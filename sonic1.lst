00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow1size+8
00000000                            lswifi: equ lsrow1size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            ; options menu
00000000                            optamm: equ ((OMTEnd-OptionMenuText)/16)-1
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l PalToCRAM,	ErrorTrap, vBlankRoutine, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000326 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
0000032C 2011                       		move.l	(a1),d0
0000032E 7200                       		moveq	#0,d1
00000330                            
00000330                            loc_32C:
00000330 D258                       		add.w	(a0)+,d1
00000332 B088                       		cmp.l	a0,d0
00000334 64FA                       		bcc.s	loc_32C
00000336 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
0000033C B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033E 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
00000342 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000346 7E00                       		moveq	#0,d7
00000348 3C3C 007F                  		move.w	#$7F,d6
0000034C                            
0000034C                            loc_348:
0000034C 2CC7                       		move.l	d7,(a6)+
0000034E 51CE FFFC                  		dbf	d6,loc_348
00000352 1039 00A1 0001             		move.b	($A10001).l,d0
00000358 0200 00C0                  		andi.b	#$C0,d0
0000035C 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000360 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000368                            
00000368                            GameInit:
00000368 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036E 7E00                       		moveq	#0,d7
00000370 3C3C 3F7F                  		move.w	#$3F7F,d6
00000374                            
00000374                            GameClrRAM:
00000374 2CC7                       		move.l	d7,(a6)+
00000376 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000037A                            
0000037A 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
00000380 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
00000388                            
00000388 6100 0000                  		bsr.w	VDPSetupGame
0000038C 6100 0000                  		bsr.w	SoundDriverLoad
00000390 6100 0000                  		bsr.w	JoypadInit
00000394 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000039A                            
0000039A                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
0000039A                            
0000039A                            MainGameLoop:
0000039A 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000039E 0240 003C                  		andi.w	#$3C,d0
000003A2 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
000003A6 60F2                       		bra.s	MainGameLoop
000003A8                            ; ===========================================================================
000003A8                            ; ---------------------------------------------------------------------------
000003A8                            ; Main game mode array
000003A8                            ; ---------------------------------------------------------------------------
000003A8                            
000003A8                            GameModeArray:
000003A8 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
000003AC                            ; ===========================================================================
000003AC 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
000003B0                            ; ===========================================================================
000003B0 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003B4                            ; ===========================================================================
000003B4 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003B8                            ; ===========================================================================
000003B8 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003BC                            ; ===========================================================================
000003BC 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003C0                            ; ===========================================================================
000003C0 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003C4                            ; ===========================================================================
000003C4 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003C8                            ; ===========================================================================
000003C8 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003CE                            ; ===========================================================================
000003CE                            
000003CE                            CheckSumError:
000003CE 6100 0000                  		bsr.w	VDPSetupGame
000003D2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003DC 7E3F                       		moveq	#$3F,d7
000003DE                            
000003DE                            CheckSum_Red:
000003DE 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003E6 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003EA                            
000003EA                            CheckSum_Loop:
000003EA 60FE                       		bra.s	CheckSum_Loop
000003EC                            ; ===========================================================================
000003EC                            
000003EC                            BusError:
000003EC 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003F2 6000                       		bra.s	loc_43A
000003F4                            ; ===========================================================================
000003F4                            
000003F4                            AddressError:
000003F4 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003FA 6000                       		bra.s	loc_43A
000003FC                            ; ===========================================================================
000003FC                            
000003FC                            IllegalInstr:
000003FC 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
00000402 54AF 0002                  		addq.l	#2,2(sp)
00000406 6000                       		bra.s	loc_462
00000408                            ; ===========================================================================
00000408                            
00000408                            ZeroDivide:
00000408 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
0000040E 6000                       		bra.s	loc_462
00000410                            ; ===========================================================================
00000410                            
00000410                            ChkInstr:
00000410 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000416 6000                       		bra.s	loc_462
00000418                            ; ===========================================================================
00000418                            
00000418                            TrapvInstr:
00000418 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000041E 6000                       		bra.s	loc_462
00000420                            ; ===========================================================================
00000420                            
00000420                            PrivilegeViol:
00000420 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000426 6000                       		bra.s	loc_462
00000428                            ; ===========================================================================
00000428                            
00000428                            Trace:
00000428 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000042E 6000                       		bra.s	loc_462
00000430                            ; ===========================================================================
00000430                            
00000430                            Line1010Emu:
00000430 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000436 54AF 0002                  		addq.l	#2,2(sp)
0000043A 6000                       		bra.s	loc_462
0000043C                            ; ===========================================================================
0000043C                            
0000043C                            Line1111Emu:
0000043C 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000442 54AF 0002                  		addq.l	#2,2(sp)
00000446 6000                       		bra.s	loc_462
00000448                            ; ===========================================================================
00000448                            
00000448                            ErrorExcept:
00000448 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000044E 6000                       		bra.s	loc_462
00000450                            ; ===========================================================================
00000450                            
00000450                            loc_43A:
00000450 46FC 2700                  		move	#$2700,sr
00000454 544F                       		addq.w	#2,sp
00000456 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
0000045A 544F                       		addq.w	#2,sp
0000045C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000462 6100 0000                  		bsr.w	ShowErrorMsg
00000466 202F 0002                  		move.l	2(sp),d0
0000046A 6100 0000                  		bsr.w	sub_5BA
0000046E 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000472 6100 0000                  		bsr.w	sub_5BA
00000476 6000                       		bra.s	loc_478
00000478                            ; ===========================================================================
00000478                            
00000478                            loc_462:
00000478 46FC 2700                  		move	#$2700,sr
0000047C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000482 6100 0000                  		bsr.w	ShowErrorMsg
00000486 202F 0002                  		move.l	2(sp),d0
0000048A 6100 0000                  		bsr.w	sub_5BA
0000048E                            
0000048E                            loc_478:
0000048E 6100 0000                  		bsr.w	ErrorWaitForC
00000492 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000498 46FC 2300                  		move	#$2300,sr
0000049C 4E73                       		rte	
0000049E                            
0000049E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000049E                            
0000049E                            
0000049E                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000049E 4DF9 00C0 0000             		lea	($C00000).l,a6
000004A4 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000004AE 41F9 0000 0000             		lea	(Art_Text).l,a0
000004B4 323C 027F                  		move.w	#$27F,d1
000004B8                            
000004B8                            Error_LoadGfx:
000004B8 3C98                       		move.w	(a0)+,(a6)
000004BA 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004BE 7000                       		moveq	#0,d0		; clear	d0
000004C0 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004C4 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004C8 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004CC 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004D6 7212                       		moveq	#$12,d1		; number of characters
000004D8                            
000004D8                            Error_LoopChars:
000004D8 7000                       		moveq	#0,d0
000004DA 1018                       		move.b	(a0)+,d0
000004DC 0640 0790                  		addi.w	#$790,d0
000004E0 3C80                       		move.w	d0,(a6)
000004E2 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004E6 4E75                       		rts	
000004E8                            ; End of function ShowErrorMsg
000004E8                            
000004E8                            ; ===========================================================================
000004E8 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004EC 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004F0 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004F4 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004F8 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004FC 0000                       		dc.w asc_5A6-ErrorText
000004FE 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000511 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000524 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000537 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
0000054A 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000055D 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
00000570 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000583 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000596 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000005A9 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005BC 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005D0 00                         		even
000005D0                            
000005D0                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005D0                            
000005D0                            
000005D0                            sub_5BA:				; XREF: loc_43A; loc_462
000005D0 3CBC 07CA                  		move.w	#$7CA,(a6)
000005D4 7407                       		moveq	#7,d2
000005D6                            
000005D6                            loc_5C0:
000005D6 E998                       		rol.l	#4,d0
000005D8 6100                       		bsr.s	sub_5CA
000005DA 51CA FFFA                  		dbf	d2,loc_5C0
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5BA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            sub_5CA:				; XREF: sub_5BA
000005E0 3200                       		move.w	d0,d1
000005E2 0241 000F                  		andi.w	#$F,d1
000005E6 0C41 000A                  		cmpi.w	#$A,d1
000005EA 6500                       		bcs.s	loc_5D8
000005EC 5E41                       		addq.w	#7,d1
000005EE                            
000005EE                            loc_5D8:
000005EE 0641 07C0                  		addi.w	#$7C0,d1
000005F2 3C81                       		move.w	d1,(a6)
000005F4 4E75                       		rts	
000005F6                            ; End of function sub_5CA
000005F6                            
000005F6                            
000005F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005F6                            
000005F6                            
000005F6                            ErrorWaitForC:				; XREF: loc_478
000005F6 6100 0000                  		bsr.w	ReadJoypads
000005FA 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000600 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000604 4E75                       		rts	
00000606                            ; End of function ErrorWaitForC
00000606                            
00000606                            ; ===========================================================================
00000606                            
00000606                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D46                            Art_Text_end:		even
00000D46                            
00000D46                            ; ===========================================================================
00000D46                            ;VBlank
00000D46                            loc_B10:				; XREF: Vectors
00000D46 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D4A 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D4E 6700                       		beq.s	loc_B88
00000D50 3039 00C0 0004             		move.w	($C00004).l,d0
00000D56 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D60 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D68 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D6E 6700                       		beq.s	loc_B42
00000D70 303C 0700                  		move.w	#$700,d0
00000D74                            
00000D74                            loc_B3E:
00000D74 51C8 FFFE                  		dbf	d0,loc_B3E
00000D78                            
00000D78                            loc_B42:
00000D78 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D7C 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D82 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D88 0240 003E                  		andi.w	#$3E,d0
00000D8C 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D90 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D94                            
00000D94                            loc_B5E:				; XREF: loc_B88
00000D94 4EB9 0000 0000             		jsr	sub_71B4C
00000D9A                            
00000D9A                            loc_B64:				; XREF: loc_D50
00000D9A 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D9E 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000DA2 4E73                       		rte	
00000DA4                            ; ===========================================================================
00000DA4 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000DA8 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000DAC 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000DB0 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DB4 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DB8 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DBC 0000                       		dc.w loc_E72-off_B6E
00000DBE                            ; ===========================================================================
00000DBE                            
00000DBE                            loc_B88:				; XREF: loc_B10; off_B6E
00000DBE 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DC4 6700                       		beq.s	loc_B9A
00000DC6 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DCC 6600 FFC6                  		bne.w	loc_B5E
00000DD0                            
00000DD0                            loc_B9A:
00000DD0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DD6 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DDA 3039 00C0 0004             		move.w	($C00004).l,d0
00000DE0 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DE6 6700                       		beq.s	loc_BBA
00000DE8 303C 0700                  		move.w	#$700,d0
00000DEC                            
00000DEC                            loc_BB6:
00000DEC 51C8 FFFE                  		dbf	d0,loc_BB6
00000DF0                            
00000DF0                            loc_BBA:
00000DF0 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DF6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DFE                            
00000DFE                            loc_BC8:
00000DFE 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000E06 66F6                       		bne.s	loc_BC8
00000E08 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E0C 6600                       		bne.s	loc_BFE
00000E0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E14 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E1A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E20 3ABC 977F                  		move.w	#$977F,(a5)
00000E24 3ABC C000                  		move.w	#$C000,(a5)
00000E28 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E2E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E32 6000                       		bra.s	loc_C22
00000E34                            ; ===========================================================================
00000E34                            
00000E34                            loc_BFE:				; XREF: loc_BC8
00000E34 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E3A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E40 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E46 3ABC 977F                  		move.w	#$977F,(a5)
00000E4A 3ABC C000                  		move.w	#$C000,(a5)
00000E4E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E54 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E58                            
00000E58                            loc_C22:				; XREF: loc_BC8
00000E58 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E5C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E64 6000 FF2E                  		bra.w	loc_B5E
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_C32:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C                            
00000E6C                            loc_C36:				; XREF: off_B6E
00000E6C 4A78 F614                  		tst.w	($FFFFF614).w
00000E70 6700 0000                  		beq.w	locret_C42
00000E74 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E78                            
00000E78                            locret_C42:
00000E78 4E75                       		rts	
00000E7A                            ; ===========================================================================
00000E7A                            
00000E7A                            loc_C44:				; XREF: off_B6E
00000E7A 6100 0000                  		bsr.w	sub_106E
00000E7E 6100 0000                  		bsr.w	sub_6886
00000E82 6100 0000                  		bsr.w	sub_1642
00000E86 4A78 F614                  		tst.w	($FFFFF614).w
00000E8A 6700 0000                  		beq.w	locret_C5C
00000E8E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E92                            
00000E92                            locret_C5C:
00000E92 4E75                       		rts	
00000E94                            ; ===========================================================================
00000E94                            
00000E94                            loc_C5E:				; XREF: off_B6E
00000E94 6100 0000                  		bsr.w	sub_106E
00000E98 4E75                       		rts	
00000E9A                            ; ===========================================================================
00000E9A                            
00000E9A                            loc_C64:				; XREF: off_B6E
00000E9A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000EA0 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000EA4                            
00000EA4                            loc_C6E:				; XREF: off_B6E
00000EA4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000EAC                            
00000EAC                            loc_C76:
00000EAC 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EB4 66F6                       		bne.s	loc_C76		; if not, branch
00000EB6 6100 0000                  		bsr.w	ReadJoypads
00000EBA 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EBE 6600                       		bne.s	loc_CB0
00000EC0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EC6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000ECC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000ED2 3ABC 977F                  		move.w	#$977F,(a5)
00000ED6 3ABC C000                  		move.w	#$C000,(a5)
00000EDA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EE0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EE4 6000                       		bra.s	loc_CD4
00000EE6                            ; ===========================================================================
00000EE6                            
00000EE6                            loc_CB0:				; XREF: loc_C76
00000EE6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EEC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EF2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EF8 3ABC 977F                  		move.w	#$977F,(a5)
00000EFC 3ABC C000                  		move.w	#$C000,(a5)
00000F00 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F06 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F0A                            
00000F0A                            loc_CD4:				; XREF: loc_C76
00000F0A 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000F0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F14 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F1A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F20 3ABC 977F                  		move.w	#$977F,(a5)
00000F24 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F28 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F2E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F32 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F38 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F3E 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F44 3ABC 977F                  		move.w	#$977F,(a5)
00000F48 3ABC 7800                  		move.w	#$7800,(a5)
00000F4C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F52 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F56 4A38 F767                  		tst.b	($FFFFF767).w
00000F5A 6700                       		beq.s	loc_D50
00000F5C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F62 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F68 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F6E 3ABC 977F                  		move.w	#$977F,(a5)
00000F72 3ABC 7000                  		move.w	#$7000,(a5)
00000F76 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F7C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F80 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F86                            
00000F86                            loc_D50:
00000F86 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F8E 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F94 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F9A 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000FA0 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000FA6 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000FAC 6400                       		bcc.s	Demo_Time
00000FAE 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FB4 588F                       		addq.l	#4,sp
00000FB6 6000 FDE2                  		bra.w	loc_B64
00000FBA                            
00000FBA                            ; ---------------------------------------------------------------------------
00000FBA                            ; Subroutine to	run a demo for an amount of time
00000FBA                            ; ---------------------------------------------------------------------------
00000FBA                            
00000FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FBA                            
00000FBA                            
00000FBA                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FBA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FBE 4EB9 0000 0000             		jsr	AniArt_Load
00000FC4 4EB9 0000 0000             		jsr	HudUpdate
00000FCA 6100 0000                  		bsr.w	sub_165E
00000FCE 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FD2 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FD6 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FDA                            
00000FDA                            Demo_TimeEnd:
00000FDA 4E75                       		rts	
00000FDC                            ; End of function Demo_Time
00000FDC                            
00000FDC                            ; ===========================================================================
00000FDC                            
00000FDC                            loc_DA6:				; XREF: off_B6E
00000FDC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FE4                            
00000FE4                            loc_DAE:
00000FE4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FEC 66F6                       		bne.s	loc_DAE		; if not, branch
00000FEE 6100 0000                  		bsr.w	ReadJoypads
00000FF2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FF8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FFE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001004 3ABC 977F                  		move.w	#$977F,(a5)
00001008 3ABC C000                  		move.w	#$C000,(a5)
0000100C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001012 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001016 4BF9 00C0 0004             		lea	($C00004).l,a5
0000101C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001022 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001028 3ABC 977F                  		move.w	#$977F,(a5)
0000102C 3ABC 7800                  		move.w	#$7800,(a5)
00001030 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001036 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000103A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001040 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001046 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000104C 3ABC 977F                  		move.w	#$977F,(a5)
00001050 3ABC 7C00                  		move.w	#$7C00,(a5)
00001054 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000105A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000105E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001066 6100 0000                  		bsr.w	PalCycle_SS
0000106A 4A38 F767                  		tst.b	($FFFFF767).w
0000106E 6700                       		beq.s	loc_E64
00001070 4BF9 00C0 0004             		lea	($C00004).l,a5
00001076 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000107C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001082 3ABC 977F                  		move.w	#$977F,(a5)
00001086 3ABC 7000                  		move.w	#$7000,(a5)
0000108A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001090 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001094 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000109A                            
0000109A                            loc_E64:
0000109A 4A78 F614                  		tst.w	($FFFFF614).w
0000109E 6700 0000                  		beq.w	locret_E70
000010A2 5378 F614                  		subq.w	#1,($FFFFF614).w
000010A6                            
000010A6                            locret_E70:
000010A6 4E75                       		rts	
000010A8                            ; ===========================================================================
000010A8                            
000010A8                            loc_E72:				; XREF: off_B6E
000010A8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000010B0                            
000010B0                            loc_E7A:
000010B0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010B8 66F6                       		bne.s	loc_E7A		; if not, branch
000010BA 6100 0000                  		bsr.w	ReadJoypads
000010BE 4A38 F64E                  		tst.b	($FFFFF64E).w
000010C2 6600                       		bne.s	loc_EB4
000010C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010CA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010D0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010D6 3ABC 977F                  		move.w	#$977F,(a5)
000010DA 3ABC C000                  		move.w	#$C000,(a5)
000010DE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010E4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010E8 6000                       		bra.s	loc_ED8
000010EA                            ; ===========================================================================
000010EA                            
000010EA                            loc_EB4:				; XREF: loc_E7A
000010EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000010F0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010F6 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010FC 3ABC 977F                  		move.w	#$977F,(a5)
00001100 3ABC C000                  		move.w	#$C000,(a5)
00001104 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000110A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000110E                            
0000110E                            loc_ED8:				; XREF: loc_E7A
0000110E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001112 4BF9 00C0 0004             		lea	($C00004).l,a5
00001118 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000111E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001124                            
00001124                            loc_EEE:
00001124 3ABC 977F                  		move.w	#$977F,(a5)
00001128 3ABC 7C00                  		move.w	#$7C00,(a5)
0000112C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001132 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001136 4BF9 00C0 0004             		lea	($C00004).l,a5
0000113C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001142 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001148 3ABC 977F                  		move.w	#$977F,(a5)
0000114C 3ABC 7800                  		move.w	#$7800,(a5)
00001150 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001156 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000115A 4A38 F767                  		tst.b	($FFFFF767).w
0000115E 6700                       		beq.s	loc_F54
00001160 4BF9 00C0 0004             		lea	($C00004).l,a5
00001166 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000116C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001172 3ABC 977F                  		move.w	#$977F,(a5)
00001176 3ABC 7000                  		move.w	#$7000,(a5)
0000117A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001180 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001184 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000118A                            
0000118A                            loc_F54:
0000118A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001192 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001198 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000119E 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
000011A4 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
000011AA 6100 0000                  		bsr.w	LoadTilesAsYouMove
000011AE 4EB9 0000 0000             		jsr	AniArt_Load
000011B4 4EB9 0000 0000             		jsr	HudUpdate
000011BA 6100 0000                  		bsr.w	sub_1642
000011BE 4E75                       		rts	
000011C0                            ; ===========================================================================
000011C0                            
000011C0                            loc_F8A:				; XREF: off_B6E
000011C0 6100 0000                  		bsr.w	sub_106E
000011C4 5238 F628                  		addq.b	#1,($FFFFF628).w
000011C8 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011CE 4E75                       		rts	
000011D0                            ; ===========================================================================
000011D0                            
000011D0                            loc_F9A:				; XREF: off_B6E
000011D0 6100 0000                  		bsr.w	sub_106E
000011D4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011D8 6000 0000                  		bra.w	sub_1642
000011DC                            ; ===========================================================================
000011DC                            
000011DC                            loc_FA6:				; XREF: off_B6E
000011DC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011E4                            
000011E4                            loc_FAE:
000011E4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011EC 66F6                       		bne.s	loc_FAE		; if not, branch
000011EE 6100 0000                  		bsr.w	ReadJoypads
000011F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000011F8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011FE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001204 3ABC 977F                  		move.w	#$977F,(a5)
00001208 3ABC C000                  		move.w	#$C000,(a5)
0000120C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001212 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001216 4BF9 00C0 0004             		lea	($C00004).l,a5
0000121C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001222 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001228 3ABC 977F                  		move.w	#$977F,(a5)
0000122C 3ABC 7800                  		move.w	#$7800,(a5)
00001230 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001236 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000123A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001240 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001246 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000124C 3ABC 977F                  		move.w	#$977F,(a5)
00001250 3ABC 7C00                  		move.w	#$7C00,(a5)
00001254 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000125A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000125E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001266 4A38 F767                  		tst.b	($FFFFF767).w
0000126A 6700                       		beq.s	loc_1060
0000126C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001272 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001278 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000127E 3ABC 977F                  		move.w	#$977F,(a5)
00001282 3ABC 7000                  		move.w	#$7000,(a5)
00001286 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000128C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001290 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001296                            
00001296                            loc_1060:
00001296 4A78 F614                  		tst.w	($FFFFF614).w
0000129A 6700 0000                  		beq.w	locret_106C
0000129E 5378 F614                  		subq.w	#1,($FFFFF614).w
000012A2                            
000012A2                            locret_106C:
000012A2 4E75                       		rts	
000012A4                            
000012A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A4                            
000012A4                            
000012A4                            sub_106E:				; XREF: loc_C32; et al
000012A4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000012AC                            
000012AC                            loc_1076:
000012AC 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012B4 66F6                       		bne.s	loc_1076	; if not, branch
000012B6 6100 0000                  		bsr.w	ReadJoypads
000012BA 4A38 F64E                  		tst.b	($FFFFF64E).w
000012BE 6600                       		bne.s	loc_10B0
000012C0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012C6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012CC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012D2 3ABC 977F                  		move.w	#$977F,(a5)
000012D6 3ABC C000                  		move.w	#$C000,(a5)
000012DA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012E0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012E4 6000                       		bra.s	loc_10D4
000012E6                            ; ===========================================================================
000012E6                            
000012E6                            loc_10B0:				; XREF: sub_106E
000012E6 4BF9 00C0 0004             		lea	($C00004).l,a5
000012EC 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012F2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012F8 3ABC 977F                  		move.w	#$977F,(a5)
000012FC 3ABC C000                  		move.w	#$C000,(a5)
00001300 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001306 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000130A                            
0000130A                            loc_10D4:				; XREF: sub_106E
0000130A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001310 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001316 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000131C 3ABC 977F                  		move.w	#$977F,(a5)
00001320 3ABC 7800                  		move.w	#$7800,(a5)
00001324 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000132A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000132E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001334 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000133A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001340 3ABC 977F                  		move.w	#$977F,(a5)
00001344 3ABC 7C00                  		move.w	#$7C00,(a5)
00001348 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000134E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001352 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000135A 4E75                       		rts	
0000135C                            ; End of function sub_106E
0000135C                            
0000135C                            ; ---------------------------------------------------------------------------
0000135C                            ; Subroutine to	move pallets from the RAM to CRAM
0000135C                            ; ---------------------------------------------------------------------------
0000135C                            
0000135C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000135C                            
0000135C                            
0000135C                            PalToCRAM:
0000135C 46FC 2700                  		move	#$2700,sr
00001360 4A78 F644                  		tst.w	($FFFFF644).w
00001364 6700                       		beq.s	locret_119C
00001366 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000136C 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001370 43F9 00C0 0000             		lea	($C00000).l,a1
00001376 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
0000137A 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001382 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 2298                       		move.l	(a0)+,(a1)
000013B2 2298                       		move.l	(a0)+,(a1)
000013B4 2298                       		move.l	(a0)+,(a1)
000013B6 2298                       		move.l	(a0)+,(a1)
000013B8 2298                       		move.l	(a0)+,(a1)
000013BA 2298                       		move.l	(a0)+,(a1)
000013BC 2298                       		move.l	(a0)+,(a1)
000013BE 2298                       		move.l	(a0)+,(a1)
000013C0 2298                       		move.l	(a0)+,(a1)
000013C2 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013C8 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013CC 4A38 F64F                  		tst.b	($FFFFF64F).w
000013D0 6600                       		bne.s	loc_119E
000013D2                            
000013D2                            locret_119C:
000013D2 4E73                       		rte	
000013D4                            ; ===========================================================================
000013D4                            
000013D4                            loc_119E:				; XREF: PalToCRAM
000013D4 4238 F64F                  		clr.b	($FFFFF64F).w
000013D8 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013DC 6100 FBDC                  		bsr.w	Demo_Time
000013E0 4EB9 0000 0000             		jsr	sub_71B4C
000013E6 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013EA 4E73                       		rte	
000013EC                            ; End of function PalToCRAM
000013EC                            
000013EC                            ; ---------------------------------------------------------------------------
000013EC                            ; Subroutine to	initialise joypads
000013EC                            ; ---------------------------------------------------------------------------
000013EC                            
000013EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013EC                            
000013EC                            
000013EC                            JoypadInit:				; XREF: GameClrRAM
000013EC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013F4                            
000013F4                            Joypad_WaitZ80:
000013F4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013FC 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013FE 7040                       		moveq	#$40,d0
00001400 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001406 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
0000140C 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001412 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000141A 4E75                       		rts	
0000141C                            ; End of function JoypadInit
0000141C                            
0000141C                            ; ---------------------------------------------------------------------------
0000141C                            ; Subroutine to	read joypad input, and send it to the RAM
0000141C                            ; ---------------------------------------------------------------------------
0000141C                            
0000141C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000141C                            
0000141C                            
0000141C                            ReadJoypads:
0000141C 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00001420 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001426 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001428 5449                       		addq.w	#2,a1		; do the second	joypad
0000142A                            
0000142A                            Joypad_Read:
0000142A 12BC 0000                  		move.b	#0,(a1)
0000142E 4E71                       		nop	
00001430 4E71                       		nop	
00001432 1011                       		move.b	(a1),d0
00001434 E508                       		lsl.b	#2,d0
00001436 0200 00C0                  		andi.b	#$C0,d0
0000143A 12BC 0040                  		move.b	#$40,(a1)
0000143E 4E71                       		nop	
00001440 4E71                       		nop	
00001442 1211                       		move.b	(a1),d1
00001444 0201 003F                  		andi.b	#$3F,d1
00001448 8001                       		or.b	d1,d0
0000144A 4600                       		not.b	d0
0000144C 1210                       		move.b	(a0),d1
0000144E B101                       		eor.b	d0,d1
00001450 10C0                       		move.b	d0,(a0)+
00001452 C200                       		and.b	d0,d1
00001454 10C1                       		move.b	d1,(a0)+
00001456 4E75                       		rts	
00001458                            ; End of function ReadJoypads
00001458                            
00001458                            
00001458                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001458                            
00001458                            
00001458                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001458 41F9 00C0 0004             		lea	($C00004).l,a0
0000145E 43F9 00C0 0000             		lea	($C00000).l,a1
00001464 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
0000146A 7E12                       		moveq	#$12,d7
0000146C                            
0000146C                            VDP_Loop:
0000146C 309A                       		move.w	(a2)+,(a0)
0000146E 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001472                            
00001472 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001478 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000147C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001482 7000                       		moveq	#0,d0
00001484 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000148E 3E3C 003F                  		move.w	#$3F,d7
00001492                            
00001492                            VDP_ClrCRAM:
00001492 3280                       		move.w	d0,(a1)
00001494 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001498                            
00001498 42B8 F616                  		clr.l	($FFFFF616).w
0000149C 42B8 F61A                  		clr.l	($FFFFF61A).w
000014A0 2F01                       		move.l	d1,-(sp)
000014A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000014A8 3ABC 8F01                  		move.w	#$8F01,(a5)
000014AC 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014B2 3ABC 9780                  		move.w	#$9780,(a5)
000014B6 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014BC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014C4                            
000014C4                            loc_128E:
000014C4 3215                       		move.w	(a5),d1
000014C6 0801 0001                  		btst	#1,d1
000014CA 66F8                       		bne.s	loc_128E
000014CC                            
000014CC 3ABC 8F02                  		move.w	#$8F02,(a5)
000014D0 221F                       		move.l	(sp)+,d1
000014D2 4E75                       		rts	
000014D4                            ; End of function VDPSetupGame
000014D4                            
000014D4                            ; ===========================================================================
000014D4 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014DC 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014E4 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014EC 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014F4 9001 9100 9200             		dc.w $9001, $9100, $9200
000014FA                            
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            ; Subroutine to	clear the screen
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            
000014FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014FA                            
000014FA                            
000014FA                            ClearScreen:
000014FA 4BF9 00C0 0004             		lea	($C00004).l,a5
00001500 3ABC 8F01                  		move.w	#$8F01,(a5)
00001504 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000150A 3ABC 9780                  		move.w	#$9780,(a5)
0000150E 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001514 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000151C                            
0000151C                            loc_12E6:
0000151C 3215                       		move.w	(a5),d1
0000151E 0801 0001                  		btst	#1,d1
00001522 66F8                       		bne.s	loc_12E6
00001524                            
00001524 3ABC 8F02                  		move.w	#$8F02,(a5)
00001528 4BF9 00C0 0004             		lea	($C00004).l,a5
0000152E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001532 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001538 3ABC 9780                  		move.w	#$9780,(a5)
0000153C 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001542 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000154A                            
0000154A                            loc_1314:
0000154A 3215                       		move.w	(a5),d1
0000154C 0801 0001                  		btst	#1,d1
00001550 66F8                       		bne.s	loc_1314
00001552                            
00001552 3ABC 8F02                  		move.w	#$8F02,(a5)
00001556 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000155E 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001566 43F8 F800                  		lea	($FFFFF800).w,a1
0000156A 7000                       		moveq	#0,d0
0000156C 323C 009F                  		move.w	#$9F,d1
00001570                            
00001570                            loc_133A:
00001570 22C0                       		move.l	d0,(a1)+
00001572 51C9 FFFC                  		dbf	d1,loc_133A
00001576                            
00001576 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000157A 7000                       		moveq	#0,d0
0000157C 323C 00FF                  		move.w	#$FF,d1
00001580                            
00001580                            loc_134A:
00001580 22C0                       		move.l	d0,(a1)+
00001582 51C9 FFFC                  		dbf	d1,loc_134A
00001586 4E75                       		rts	
00001588                            ; End of function ClearScreen
00001588                            
00001588                            ; ---------------------------------------------------------------------------
00001588                            ; Subroutine to	load the sound driver
00001588                            ; ---------------------------------------------------------------------------
00001588                            
00001588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001588                            
00001588                            
00001588                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001588 4E71                       		nop	
0000158A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001592 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000159A 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
000015A0 43F9 00A0 0000             		lea	($A00000).l,a1
000015A6 6100 0000                  		bsr.w	KosDec		; decompress
000015AA 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015B2 4E71                       		nop	
000015B4 4E71                       		nop	
000015B6 4E71                       		nop	
000015B8 4E71                       		nop	
000015BA 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015C2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015CA 4E75                       		rts	
000015CC                            ; End of function SoundDriverLoad
000015CC                            
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            ; Subroutine to	play a sound or	music track
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CC                            
000015CC                            
000015CC                            PlaySound:
000015CC 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015D0 4E75                       		rts	
000015D2                            ; End of function PlaySound
000015D2                            
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            ; Subroutine to	play a special sound/music (E0-E4)
000015D2                            ;
000015D2                            ; E0 - Fade out
000015D2                            ; E1 - Sega
000015D2                            ; E2 - Speed up
000015D2                            ; E3 - Normal speed
000015D2                            ; E4 - Stop
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            
000015D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015D2                            
000015D2                            
000015D2                            PlaySound_Special:
000015D2 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015D6 4E75                       		rts	
000015D8                            ; End of function PlaySound_Special
000015D8                            
000015D8                            ; ===========================================================================
000015D8                            ; ---------------------------------------------------------------------------
000015D8                            ; Unused sound/music subroutine
000015D8                            ; ---------------------------------------------------------------------------
000015D8                            
000015D8                            PlaySound_Unk:
000015D8 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015DC 4E75                       		rts	
000015DE                            
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            ; Subroutine to	pause the game
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            
000015DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015DE                            
000015DE                            
000015DE                            PauseGame:				; XREF: Level_MainLoop; et al
000015DE 4E71                       		nop	
000015E0 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015E4 6700                       		beq.s	Unpause		; if not, branch
000015E6 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015EA 6600                       		bne.s	loc_13BE	; if yes, branch
000015EC 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015F2 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015F4                            
000015F4                            loc_13BE:
000015F4 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015FA 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001600                            
00001600                            loc_13CA:
00001600 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001606 6100 0000                  		bsr.w	DelayProgram
0000160A 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
0000160E 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001610 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001616 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001618 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000161E 4E71                       		nop	
00001620 6000                       		bra.s	loc_1404
00001622                            ; ===========================================================================
00001622                            
00001622                            Pause_ChkBC:				; XREF: PauseGame
00001622 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001628 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000162A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001630 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001632                            
00001632                            Pause_ChkStart:				; XREF: PauseGame
00001632 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001638 67C6                       		beq.s	loc_13CA	; if not, branch
0000163A                            
0000163A                            loc_1404:				; XREF: PauseGame
0000163A 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001640                            
00001640                            Unpause:				; XREF: PauseGame
00001640 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001646                            
00001646                            Pause_DoNothing:			; XREF: PauseGame
00001646 4E75                       		rts	
00001648                            ; ===========================================================================
00001648                            
00001648                            Pause_SlowMo:				; XREF: PauseGame
00001648 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000164E 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001654 4E75                       		rts	
00001656                            ; End of function PauseGame
00001656                            
00001656                            ; ---------------------------------------------------------------------------
00001656                            ; Subroutine to	display	patterns via the VDP
00001656                            ; ---------------------------------------------------------------------------
00001656                            
00001656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001656                            
00001656                            
00001656                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001656 4DF9 00C0 0000             		lea	($C00000).l,a6
0000165C 283C 0080 0000             		move.l	#$800000,d4
00001662                            
00001662                            loc_142C:
00001662 2D40 0004                  		move.l	d0,4(a6)
00001666 3601                       		move.w	d1,d3
00001668                            
00001668                            loc_1432:
00001668 3C99                       		move.w	(a1)+,(a6)
0000166A 51CB FFFC                  		dbf	d3,loc_1432
0000166E D084                       		add.l	d4,d0
00001670 51CA FFF0                  		dbf	d2,loc_142C
00001674 4E75                       		rts	
00001676                            ; End of function ShowVDPGraphics
00001676                            
00001676                            ; ---------------------------------------------------------------------------
00001676                            ; Nemesis decompression	algorithm
00001676                            ; ---------------------------------------------------------------------------
00001676                            
00001676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001676                            
00001676                            
00001676                            NemDec:
00001676 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000167A 47F9 0000 0000             		lea	(loc_1502).l,a3
00001680 49F9 00C0 0000             		lea	($C00000).l,a4
00001686 6000                       		bra.s	loc_145C
00001688                            ; ===========================================================================
00001688 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000168C 47F9 0000 0000             		lea	(loc_1518).l,a3
00001692                            
00001692                            loc_145C:				; XREF: NemDec
00001692 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001696 3418                       		move.w	(a0)+,d2
00001698 E34A                       		lsl.w	#1,d2
0000169A 6400                       		bcc.s	loc_146A
0000169C D6FC 000A                  		adda.w	#$A,a3
000016A0                            
000016A0                            loc_146A:
000016A0 E54A                       		lsl.w	#2,d2
000016A2 3A42                       		movea.w	d2,a5
000016A4 7608                       		moveq	#8,d3
000016A6 7400                       		moveq	#0,d2
000016A8 7800                       		moveq	#0,d4
000016AA 6100 0000                  		bsr.w	NemDec4
000016AE 1A18                       		move.b	(a0)+,d5
000016B0 E145                       		asl.w	#8,d5
000016B2 1A18                       		move.b	(a0)+,d5
000016B4 3C3C 0010                  		move.w	#$10,d6
000016B8 6100                       		bsr.s	NemDec2
000016BA 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016BE 4E75                       		rts	
000016C0                            ; End of function NemDec
000016C0                            
000016C0                            
000016C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016C0                            
000016C0                            
000016C0                            NemDec2:				; XREF: NemDec
000016C0 3E06                       		move.w	d6,d7
000016C2 5147                       		subq.w	#8,d7
000016C4 3205                       		move.w	d5,d1
000016C6 EE69                       		lsr.w	d7,d1
000016C8 0C01 00FC                  		cmpi.b	#-4,d1
000016CC 6400                       		bcc.s	loc_14D6
000016CE 0241 00FF                  		andi.w	#$FF,d1
000016D2 D241                       		add.w	d1,d1
000016D4 1031 1000                  		move.b	(a1,d1.w),d0
000016D8 4880                       		ext.w	d0
000016DA 9C40                       		sub.w	d0,d6
000016DC 0C46 0009                  		cmpi.w	#9,d6
000016E0 6400                       		bcc.s	loc_14B2
000016E2 5046                       		addq.w	#8,d6
000016E4 E145                       		asl.w	#8,d5
000016E6 1A18                       		move.b	(a0)+,d5
000016E8                            
000016E8                            loc_14B2:
000016E8 1231 1001                  		move.b	1(a1,d1.w),d1
000016EC 3001                       		move.w	d1,d0
000016EE 0241 000F                  		andi.w	#$F,d1
000016F2 0240 00F0                  		andi.w	#$F0,d0
000016F6                            
000016F6                            loc_14C0:				; XREF: NemDec3
000016F6 E848                       		lsr.w	#4,d0
000016F8                            
000016F8                            loc_14C2:				; XREF: NemDec3
000016F8 E98C                       		lsl.l	#4,d4
000016FA 8801                       		or.b	d1,d4
000016FC 5343                       		subq.w	#1,d3
000016FE 6600                       		bne.s	loc_14D0
00001700 4ED3                       		jmp	(a3)
00001702                            ; End of function NemDec2
00001702                            
00001702                            
00001702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001702                            
00001702                            
00001702                            NemDec3:				; XREF: loc_1502
00001702 7800                       		moveq	#0,d4
00001704 7608                       		moveq	#8,d3
00001706                            
00001706                            loc_14D0:				; XREF: NemDec2
00001706 51C8 FFF0                  		dbf	d0,loc_14C2
0000170A 60B4                       		bra.s	NemDec2
0000170C                            ; ===========================================================================
0000170C                            
0000170C                            loc_14D6:				; XREF: NemDec2
0000170C 5D46                       		subq.w	#6,d6
0000170E 0C46 0009                  		cmpi.w	#9,d6
00001712 6400                       		bcc.s	loc_14E4
00001714 5046                       		addq.w	#8,d6
00001716 E145                       		asl.w	#8,d5
00001718 1A18                       		move.b	(a0)+,d5
0000171A                            
0000171A                            loc_14E4:				; XREF: NemDec3
0000171A 5F46                       		subq.w	#7,d6
0000171C 3205                       		move.w	d5,d1
0000171E EC69                       		lsr.w	d6,d1
00001720 3001                       		move.w	d1,d0
00001722 0241 000F                  		andi.w	#$F,d1
00001726 0240 0070                  		andi.w	#$70,d0
0000172A 0C46 0009                  		cmpi.w	#9,d6
0000172E 64C6                       		bcc.s	loc_14C0
00001730 5046                       		addq.w	#8,d6
00001732 E145                       		asl.w	#8,d5
00001734 1A18                       		move.b	(a0)+,d5
00001736 60BE                       		bra.s	loc_14C0
00001738                            ; End of function NemDec3
00001738                            
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1502:				; XREF: NemDec
00001738 2884                       		move.l	d4,(a4)
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66C2                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742 B982                       		eor.l	d4,d2
00001744 2882                       		move.l	d2,(a4)
00001746 534D                       		subq.w	#1,a5
00001748 380D                       		move.w	a5,d4
0000174A 66B6                       		bne.s	NemDec3
0000174C 4E75                       		rts	
0000174E                            ; ===========================================================================
0000174E                            
0000174E                            loc_1518:				; XREF: NemDec
0000174E 28C4                       		move.l	d4,(a4)+
00001750 534D                       		subq.w	#1,a5
00001752 380D                       		move.w	a5,d4
00001754 66AC                       		bne.s	NemDec3
00001756 4E75                       		rts	
00001758                            ; ===========================================================================
00001758 B982                       		eor.l	d4,d2
0000175A 28C2                       		move.l	d2,(a4)+
0000175C 534D                       		subq.w	#1,a5
0000175E 380D                       		move.w	a5,d4
00001760 66A0                       		bne.s	NemDec3
00001762 4E75                       		rts	
00001764                            
00001764                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001764                            
00001764                            
00001764                            NemDec4:				; XREF: NemDec
00001764 1018                       		move.b	(a0)+,d0
00001766                            
00001766                            loc_1530:
00001766 0C00 00FF                  		cmpi.b	#-1,d0
0000176A 6600                       		bne.s	loc_1538
0000176C 4E75                       		rts	
0000176E                            ; ===========================================================================
0000176E                            
0000176E                            loc_1538:				; XREF: NemDec4
0000176E 3E00                       		move.w	d0,d7
00001770                            
00001770                            loc_153A:
00001770 1018                       		move.b	(a0)+,d0
00001772 0C00 0080                  		cmpi.b	#$80,d0
00001776 64EE                       		bcc.s	loc_1530
00001778 1200                       		move.b	d0,d1
0000177A 0247 000F                  		andi.w	#$F,d7
0000177E 0241 0070                  		andi.w	#$70,d1
00001782 8E41                       		or.w	d1,d7
00001784 0240 000F                  		andi.w	#$F,d0
00001788 1200                       		move.b	d0,d1
0000178A E149                       		lsl.w	#8,d1
0000178C 8E41                       		or.w	d1,d7
0000178E 7208                       		moveq	#8,d1
00001790 9240                       		sub.w	d0,d1
00001792 6600                       		bne.s	loc_1568
00001794 1018                       		move.b	(a0)+,d0
00001796 D040                       		add.w	d0,d0
00001798 3387 0000                  		move.w	d7,(a1,d0.w)
0000179C 60D2                       		bra.s	loc_153A
0000179E                            ; ===========================================================================
0000179E                            
0000179E                            loc_1568:				; XREF: NemDec4
0000179E 1018                       		move.b	(a0)+,d0
000017A0 E368                       		lsl.w	d1,d0
000017A2 D040                       		add.w	d0,d0
000017A4 7A01                       		moveq	#1,d5
000017A6 E36D                       		lsl.w	d1,d5
000017A8 5345                       		subq.w	#1,d5
000017AA                            
000017AA                            loc_1574:
000017AA 3387 0000                  		move.w	d7,(a1,d0.w)
000017AE 5440                       		addq.w	#2,d0
000017B0 51CD FFF8                  		dbf	d5,loc_1574
000017B4 60BA                       		bra.s	loc_153A
000017B6                            ; End of function NemDec4
000017B6                            
000017B6                            ; ---------------------------------------------------------------------------
000017B6                            ; Subroutine to	load pattern load cues
000017B6                            ; ---------------------------------------------------------------------------
000017B6                            
000017B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017B6                            
000017B6                            
000017B6                            LoadPLC:
000017B6 48E7 0060                  		movem.l	a1-a2,-(sp)
000017BA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017C0 D040                       		add.w	d0,d0
000017C2 3031 0000                  		move.w	(a1,d0.w),d0
000017C6 43F1 0000                  		lea	(a1,d0.w),a1
000017CA 45F8 F680                  		lea	($FFFFF680).w,a2
000017CE                            
000017CE                            loc_1598:
000017CE 4A92                       		tst.l	(a2)
000017D0 6700                       		beq.s	loc_15A0
000017D2 5C4A                       		addq.w	#6,a2
000017D4 60F8                       		bra.s	loc_1598
000017D6                            ; ===========================================================================
000017D6                            
000017D6                            loc_15A0:				; XREF: LoadPLC
000017D6 3019                       		move.w	(a1)+,d0
000017D8 6B00                       		bmi.s	loc_15AC
000017DA                            
000017DA                            loc_15A4:
000017DA 24D9                       		move.l	(a1)+,(a2)+
000017DC 34D9                       		move.w	(a1)+,(a2)+
000017DE 51C8 FFFA                  		dbf	d0,loc_15A4
000017E2                            
000017E2                            loc_15AC:
000017E2 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017E6 4E75                       		rts	
000017E8                            ; End of function LoadPLC
000017E8                            
000017E8                            
000017E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017E8                            
000017E8                            
000017E8                            LoadPLC2:
000017E8 48E7 0060                  		movem.l	a1-a2,-(sp)
000017EC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017F2 D040                       		add.w	d0,d0
000017F4 3031 0000                  		move.w	(a1,d0.w),d0
000017F8 43F1 0000                  		lea	(a1,d0.w),a1
000017FC 6100                       		bsr.s	ClearPLC
000017FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001802 3019                       		move.w	(a1)+,d0
00001804 6B00                       		bmi.s	loc_15D8
00001806                            
00001806                            loc_15D0:
00001806 24D9                       		move.l	(a1)+,(a2)+
00001808 34D9                       		move.w	(a1)+,(a2)+
0000180A 51C8 FFFA                  		dbf	d0,loc_15D0
0000180E                            
0000180E                            loc_15D8:
0000180E 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001812 4E75                       		rts	
00001814                            ; End of function LoadPLC2
00001814                            
00001814                            ; ---------------------------------------------------------------------------
00001814                            ; Subroutine to	clear the pattern load cues
00001814                            ; ---------------------------------------------------------------------------
00001814                            
00001814                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001814                            
00001814                            
00001814                            ClearPLC:				; XREF: LoadPLC2
00001814 45F8 F680                  		lea	($FFFFF680).w,a2
00001818 701F                       		moveq	#$1F,d0
0000181A                            
0000181A                            ClearPLC_Loop:
0000181A 429A                       		clr.l	(a2)+
0000181C 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001820 4E75                       		rts	
00001822                            ; End of function ClearPLC
00001822                            
00001822                            ; ---------------------------------------------------------------------------
00001822                            ; Subroutine to	use graphics listed in a pattern load cue
00001822                            ; ---------------------------------------------------------------------------
00001822                            
00001822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001822                            
00001822                            
00001822                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001822 4AB8 F680                  		tst.l	($FFFFF680).w
00001826 6700                       		beq.s	locret_1640
00001828 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000182C 6600                       		bne.s	locret_1640
0000182E 2078 F680                  		movea.l	($FFFFF680).w,a0
00001832 47F9 0000 1738             		lea	(loc_1502).l,a3
00001838 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000183C 3418                       		move.w	(a0)+,d2
0000183E 6A00                       		bpl.s	loc_160E
00001840 D6FC 000A                  		adda.w	#$A,a3
00001844                            
00001844                            loc_160E:
00001844 0242 7FFF                  		andi.w	#$7FFF,d2
00001848 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000184C 6100 FF16                  		bsr.w	NemDec4
00001850 1A18                       		move.b	(a0)+,d5
00001852 E145                       		asl.w	#8,d5
00001854 1A18                       		move.b	(a0)+,d5
00001856 7C10                       		moveq	#$10,d6
00001858 7000                       		moveq	#0,d0
0000185A 21C8 F680                  		move.l	a0,($FFFFF680).w
0000185E 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001862 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001866 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000186A 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000186E 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001872 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001876                            
00001876                            locret_1640:
00001876 4E75                       		rts	
00001878                            ; End of function RunPLC_RAM
00001878                            
00001878                            
00001878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001878                            
00001878                            
00001878                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001878 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000187C 6700 0000                  		beq.w	locret_16DA
00001880 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001886 7000                       		moveq	#0,d0
00001888 3038 F684                  		move.w	($FFFFF684).w,d0
0000188C 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001892 6000                       		bra.s	loc_1676
00001894                            ; End of function sub_1642
00001894                            
00001894                            
00001894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001894                            
00001894                            
00001894                            sub_165E:				; XREF: Demo_Time
00001894 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001898 6700                       		beq.s	locret_16DA
0000189A 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000018A0 7000                       		moveq	#0,d0
000018A2 3038 F684                  		move.w	($FFFFF684).w,d0
000018A6 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000018AC                            
000018AC                            loc_1676:				; XREF: sub_1642
000018AC 49F9 00C0 0004             		lea	($C00004).l,a4
000018B2 E588                       		lsl.l	#2,d0
000018B4 E448                       		lsr.w	#2,d0
000018B6 0040 4000                  		ori.w	#$4000,d0
000018BA 4840                       		swap	d0
000018BC 2880                       		move.l	d0,(a4)
000018BE 594C                       		subq.w	#4,a4
000018C0 2078 F680                  		movea.l	($FFFFF680).w,a0
000018C4 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018C8 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018CC 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018D0 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018D4 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018D8 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018DC 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018E0                            
000018E0                            loc_16AA:				; XREF: sub_165E
000018E0 3A7C 0008                  		movea.w	#8,a5
000018E4 6100 FE1C                  		bsr.w	NemDec3
000018E8 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018EC 6700                       		beq.s	loc_16DC
000018EE 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018F2 66EC                       		bne.s	loc_16AA
000018F4 21C8 F680                  		move.l	a0,($FFFFF680).w
000018F8 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018FC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001900 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001904 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001908 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000190C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001910                            
00001910                            locret_16DA:				; XREF: sub_1642
00001910 4E75                       		rts	
00001912                            ; ===========================================================================
00001912                            
00001912                            loc_16DC:				; XREF: sub_165E
00001912 41F8 F680                  		lea	($FFFFF680).w,a0
00001916 7015                       		moveq	#$15,d0
00001918                            
00001918                            loc_16E2:				; XREF: sub_165E
00001918 20E8 0006                  		move.l	6(a0),(a0)+
0000191C 51C8 FFFA                  		dbf	d0,loc_16E2
00001920 4E75                       		rts	
00001922                            ; End of function sub_165E
00001922                            
00001922                            ; ---------------------------------------------------------------------------
00001922                            ; Subroutine to	execute	the pattern load cue
00001922                            ; ---------------------------------------------------------------------------
00001922                            
00001922                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001922                            
00001922                            
00001922                            RunPLC_ROM:
00001922 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001928 D040                       		add.w	d0,d0
0000192A 3031 0000                  		move.w	(a1,d0.w),d0
0000192E 43F1 0000                  		lea	(a1,d0.w),a1
00001932 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001934                            
00001934                            RunPLC_Loop:
00001934 2059                       		movea.l	(a1)+,a0	; get art pointer
00001936 7000                       		moveq	#0,d0
00001938 3019                       		move.w	(a1)+,d0	; get VRAM address
0000193A E588                       		lsl.l	#2,d0		; divide address by $20
0000193C E448                       		lsr.w	#2,d0
0000193E 0040 4000                  		ori.w	#$4000,d0
00001942 4840                       		swap	d0
00001944 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000194A 6100 FD2A                  		bsr.w	NemDec		; decompress
0000194E 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001952 4E75                       		rts	
00001954                            ; End of function RunPLC_ROM
00001954                            
00001954                            ; ---------------------------------------------------------------------------
00001954                            ; Enigma decompression algorithm
00001954                            ; ---------------------------------------------------------------------------
00001954                            
00001954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001954                            
00001954                            
00001954                            EniDec:
00001954 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001958 3640                       		movea.w	d0,a3
0000195A 1018                       		move.b	(a0)+,d0
0000195C 4880                       		ext.w	d0
0000195E 3A40                       		movea.w	d0,a5
00001960 1818                       		move.b	(a0)+,d4
00001962 E70C                       		lsl.b	#3,d4
00001964 3458                       		movea.w	(a0)+,a2
00001966 D4CB                       		adda.w	a3,a2
00001968 3858                       		movea.w	(a0)+,a4
0000196A D8CB                       		adda.w	a3,a4
0000196C 1A18                       		move.b	(a0)+,d5
0000196E E145                       		asl.w	#8,d5
00001970 1A18                       		move.b	(a0)+,d5
00001972 7C10                       		moveq	#$10,d6
00001974                            
00001974                            loc_173E:				; XREF: loc_1768
00001974 7007                       		moveq	#7,d0
00001976 3E06                       		move.w	d6,d7
00001978 9E40                       		sub.w	d0,d7
0000197A 3205                       		move.w	d5,d1
0000197C EE69                       		lsr.w	d7,d1
0000197E 0241 007F                  		andi.w	#$7F,d1
00001982 3401                       		move.w	d1,d2
00001984 0C41 0040                  		cmpi.w	#$40,d1
00001988 6400                       		bcc.s	loc_1758
0000198A 7006                       		moveq	#6,d0
0000198C E24A                       		lsr.w	#1,d2
0000198E                            
0000198E                            loc_1758:
0000198E 6100 0000                  		bsr.w	sub_188C
00001992 0242 000F                  		andi.w	#$F,d2
00001996 E849                       		lsr.w	#4,d1
00001998 D241                       		add.w	d1,d1
0000199A 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000199E                            ; End of function EniDec
0000199E                            
0000199E                            ; ===========================================================================
0000199E                            
0000199E                            loc_1768:				; XREF: loc_17B4
0000199E 32CA                       		move.w	a2,(a1)+
000019A0 524A                       		addq.w	#1,a2
000019A2 51CA FFFA                  		dbf	d2,loc_1768
000019A6 60CC                       		bra.s	loc_173E
000019A8                            ; ===========================================================================
000019A8                            
000019A8                            loc_1772:				; XREF: loc_17B4
000019A8 32CC                       		move.w	a4,(a1)+
000019AA 51CA FFFC                  		dbf	d2,loc_1772
000019AE 60C4                       		bra.s	loc_173E
000019B0                            ; ===========================================================================
000019B0                            
000019B0                            loc_177A:				; XREF: loc_17B4
000019B0 6100 0000                  		bsr.w	loc_17DC
000019B4                            
000019B4                            loc_177E:
000019B4 32C1                       		move.w	d1,(a1)+
000019B6 51CA FFFC                  		dbf	d2,loc_177E
000019BA 60B8                       		bra.s	loc_173E
000019BC                            ; ===========================================================================
000019BC                            
000019BC                            loc_1786:				; XREF: loc_17B4
000019BC 6100 0000                  		bsr.w	loc_17DC
000019C0                            
000019C0                            loc_178A:
000019C0 32C1                       		move.w	d1,(a1)+
000019C2 5241                       		addq.w	#1,d1
000019C4 51CA FFFA                  		dbf	d2,loc_178A
000019C8 60AA                       		bra.s	loc_173E
000019CA                            ; ===========================================================================
000019CA                            
000019CA                            loc_1794:				; XREF: loc_17B4
000019CA 6100 0000                  		bsr.w	loc_17DC
000019CE                            
000019CE                            loc_1798:
000019CE 32C1                       		move.w	d1,(a1)+
000019D0 5341                       		subq.w	#1,d1
000019D2 51CA FFFA                  		dbf	d2,loc_1798
000019D6 609C                       		bra.s	loc_173E
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_17A2:				; XREF: loc_17B4
000019D8 0C42 000F                  		cmpi.w	#$F,d2
000019DC 6700                       		beq.s	loc_17C4
000019DE                            
000019DE                            loc_17A8:
000019DE 6100 0000                  		bsr.w	loc_17DC
000019E2 32C1                       		move.w	d1,(a1)+
000019E4 51CA FFF8                  		dbf	d2,loc_17A8
000019E8 608A                       		bra.s	loc_173E
000019EA                            ; ===========================================================================
000019EA                            
000019EA                            loc_17B4:				; XREF: EniDec
000019EA 60B2                       		bra.s	loc_1768
000019EC                            ; ===========================================================================
000019EC 60B0                       		bra.s	loc_1768
000019EE                            ; ===========================================================================
000019EE 60B8                       		bra.s	loc_1772
000019F0                            ; ===========================================================================
000019F0 60B6                       		bra.s	loc_1772
000019F2                            ; ===========================================================================
000019F2 60BC                       		bra.s	loc_177A
000019F4                            ; ===========================================================================
000019F4 60C6                       		bra.s	loc_1786
000019F6                            ; ===========================================================================
000019F6 60D2                       		bra.s	loc_1794
000019F8                            ; ===========================================================================
000019F8 60DE                       		bra.s	loc_17A2
000019FA                            ; ===========================================================================
000019FA                            
000019FA                            loc_17C4:				; XREF: loc_17A2
000019FA 5348                       		subq.w	#1,a0
000019FC 0C46 0010                  		cmpi.w	#$10,d6
00001A00 6600                       		bne.s	loc_17CE
00001A02 5348                       		subq.w	#1,a0
00001A04                            
00001A04                            loc_17CE:
00001A04 3008                       		move.w	a0,d0
00001A06 E248                       		lsr.w	#1,d0
00001A08 6400                       		bcc.s	loc_17D6
00001A0A 5248                       		addq.w	#1,a0
00001A0C                            
00001A0C                            loc_17D6:
00001A0C 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001A10 4E75                       		rts	
00001A12                            ; ===========================================================================
00001A12                            
00001A12                            loc_17DC:				; XREF: loc_17A2
00001A12 360B                       		move.w	a3,d3
00001A14 1204                       		move.b	d4,d1
00001A16 D201                       		add.b	d1,d1
00001A18 6400                       		bcc.s	loc_17EE
00001A1A 5346                       		subq.w	#1,d6
00001A1C 0D05                       		btst	d6,d5
00001A1E 6700                       		beq.s	loc_17EE
00001A20 0043 8000                  		ori.w	#-$8000,d3
00001A24                            
00001A24                            loc_17EE:
00001A24 D201                       		add.b	d1,d1
00001A26 6400                       		bcc.s	loc_17FC
00001A28 5346                       		subq.w	#1,d6
00001A2A 0D05                       		btst	d6,d5
00001A2C 6700                       		beq.s	loc_17FC
00001A2E 0643 4000                  		addi.w	#$4000,d3
00001A32                            
00001A32                            loc_17FC:
00001A32 D201                       		add.b	d1,d1
00001A34 6400                       		bcc.s	loc_180A
00001A36 5346                       		subq.w	#1,d6
00001A38 0D05                       		btst	d6,d5
00001A3A 6700                       		beq.s	loc_180A
00001A3C 0643 2000                  		addi.w	#$2000,d3
00001A40                            
00001A40                            loc_180A:
00001A40 D201                       		add.b	d1,d1
00001A42 6400                       		bcc.s	loc_1818
00001A44 5346                       		subq.w	#1,d6
00001A46 0D05                       		btst	d6,d5
00001A48 6700                       		beq.s	loc_1818
00001A4A 0043 1000                  		ori.w	#$1000,d3
00001A4E                            
00001A4E                            loc_1818:
00001A4E D201                       		add.b	d1,d1
00001A50 6400                       		bcc.s	loc_1826
00001A52 5346                       		subq.w	#1,d6
00001A54 0D05                       		btst	d6,d5
00001A56 6700                       		beq.s	loc_1826
00001A58 0043 0800                  		ori.w	#$800,d3
00001A5C                            
00001A5C                            loc_1826:
00001A5C 3205                       		move.w	d5,d1
00001A5E 3E06                       		move.w	d6,d7
00001A60 9E4D                       		sub.w	a5,d7
00001A62 6400                       		bcc.s	loc_1856
00001A64 3C07                       		move.w	d7,d6
00001A66 0646 0010                  		addi.w	#$10,d6
00001A6A 4447                       		neg.w	d7
00001A6C EF69                       		lsl.w	d7,d1
00001A6E 1A10                       		move.b	(a0),d5
00001A70 EF3D                       		rol.b	d7,d5
00001A72 DE47                       		add.w	d7,d7
00001A74 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A78 D245                       		add.w	d5,d1
00001A7A                            
00001A7A                            loc_1844:				; XREF: loc_1868
00001A7A 300D                       		move.w	a5,d0
00001A7C D040                       		add.w	d0,d0
00001A7E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A82 D243                       		add.w	d3,d1
00001A84 1A18                       		move.b	(a0)+,d5
00001A86 E14D                       		lsl.w	#8,d5
00001A88 1A18                       		move.b	(a0)+,d5
00001A8A 4E75                       		rts	
00001A8C                            ; ===========================================================================
00001A8C                            
00001A8C                            loc_1856:				; XREF: loc_1826
00001A8C 6700                       		beq.s	loc_1868
00001A8E EE69                       		lsr.w	d7,d1
00001A90 300D                       		move.w	a5,d0
00001A92 D040                       		add.w	d0,d0
00001A94 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A98 D243                       		add.w	d3,d1
00001A9A 300D                       		move.w	a5,d0
00001A9C 6000                       		bra.s	sub_188C
00001A9E                            ; ===========================================================================
00001A9E                            
00001A9E                            loc_1868:				; XREF: loc_1856
00001A9E 7C10                       		moveq	#$10,d6
00001AA0                            
00001AA0                            loc_186A:
00001AA0 60D8                       		bra.s	loc_1844
00001AA2                            ; ===========================================================================
00001AA2 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AB8 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AC2                            
00001AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC2                            
00001AC2                            
00001AC2                            sub_188C:				; XREF: EniDec
00001AC2 9C40                       		sub.w	d0,d6
00001AC4 0C46 0009                  		cmpi.w	#9,d6
00001AC8 6400                       		bcc.s	locret_189A
00001ACA 5046                       		addq.w	#8,d6
00001ACC E145                       		asl.w	#8,d5
00001ACE 1A18                       		move.b	(a0)+,d5
00001AD0                            
00001AD0                            locret_189A:
00001AD0 4E75                       		rts	
00001AD2                            ; End of function sub_188C
00001AD2                            
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2                            ; Kosinski decompression algorithm
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2                            
00001AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AD2                            
00001AD2                            
00001AD2                            KosDec:
00001AD2                            
00001AD2 =FFFFFFFE                  var_2		= -2
00001AD2 =FFFFFFFF                  var_1		= -1
00001AD2                            
00001AD2 558F                       		subq.l	#2,sp
00001AD4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD8 1E98                       		move.b	(a0)+,(sp)
00001ADA 3A17                       		move.w	(sp),d5
00001ADC 780F                       		moveq	#$F,d4
00001ADE                            
00001ADE                            loc_18A8:
00001ADE E24D                       		lsr.w	#1,d5
00001AE0 40C6                       		move	sr,d6
00001AE2 51CC 0000                  		dbf	d4,loc_18BA
00001AE6 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AEA 1E98                       		move.b	(a0)+,(sp)
00001AEC 3A17                       		move.w	(sp),d5
00001AEE 780F                       		moveq	#$F,d4
00001AF0                            
00001AF0                            loc_18BA:
00001AF0 44C6                       		move	d6,ccr
00001AF2 6400                       		bcc.s	loc_18C2
00001AF4 12D8                       		move.b	(a0)+,(a1)+
00001AF6 60E6                       		bra.s	loc_18A8
00001AF8                            ; ===========================================================================
00001AF8                            
00001AF8                            loc_18C2:				; XREF: KosDec
00001AF8 7600                       		moveq	#0,d3
00001AFA E24D                       		lsr.w	#1,d5
00001AFC 40C6                       		move	sr,d6
00001AFE 51CC 0000                  		dbf	d4,loc_18D6
00001B02 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B06 1E98                       		move.b	(a0)+,(sp)
00001B08 3A17                       		move.w	(sp),d5
00001B0A 780F                       		moveq	#$F,d4
00001B0C                            
00001B0C                            loc_18D6:
00001B0C 44C6                       		move	d6,ccr
00001B0E 6500                       		bcs.s	loc_1906
00001B10 E24D                       		lsr.w	#1,d5
00001B12 51CC 0000                  		dbf	d4,loc_18EA
00001B16 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1A 1E98                       		move.b	(a0)+,(sp)
00001B1C 3A17                       		move.w	(sp),d5
00001B1E 780F                       		moveq	#$F,d4
00001B20                            
00001B20                            loc_18EA:
00001B20 E353                       		roxl.w	#1,d3
00001B22 E24D                       		lsr.w	#1,d5
00001B24 51CC 0000                  		dbf	d4,loc_18FC
00001B28 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B2C 1E98                       		move.b	(a0)+,(sp)
00001B2E 3A17                       		move.w	(sp),d5
00001B30 780F                       		moveq	#$F,d4
00001B32                            
00001B32                            loc_18FC:
00001B32 E353                       		roxl.w	#1,d3
00001B34 5243                       		addq.w	#1,d3
00001B36 74FF                       		moveq	#-1,d2
00001B38 1418                       		move.b	(a0)+,d2
00001B3A 6000                       		bra.s	loc_191C
00001B3C                            ; ===========================================================================
00001B3C                            
00001B3C                            loc_1906:				; XREF: loc_18C2
00001B3C 1018                       		move.b	(a0)+,d0
00001B3E 1218                       		move.b	(a0)+,d1
00001B40 74FF                       		moveq	#-1,d2
00001B42 1401                       		move.b	d1,d2
00001B44 EB4A                       		lsl.w	#5,d2
00001B46 1400                       		move.b	d0,d2
00001B48 0241 0007                  		andi.w	#7,d1
00001B4C 6700                       		beq.s	loc_1928
00001B4E 1601                       		move.b	d1,d3
00001B50 5243                       		addq.w	#1,d3
00001B52                            
00001B52                            loc_191C:
00001B52 1031 2000                  		move.b	(a1,d2.w),d0
00001B56 12C0                       		move.b	d0,(a1)+
00001B58 51CB FFF8                  		dbf	d3,loc_191C
00001B5C 6080                       		bra.s	loc_18A8
00001B5E                            ; ===========================================================================
00001B5E                            
00001B5E                            loc_1928:				; XREF: loc_1906
00001B5E 1218                       		move.b	(a0)+,d1
00001B60 6700                       		beq.s	loc_1938
00001B62 0C01 0001                  		cmpi.b	#1,d1
00001B66 6700 FF76                  		beq.w	loc_18A8
00001B6A 1601                       		move.b	d1,d3
00001B6C 60E4                       		bra.s	loc_191C
00001B6E                            ; ===========================================================================
00001B6E                            
00001B6E                            loc_1938:				; XREF: loc_1928
00001B6E 548F                       		addq.l	#2,sp
00001B70 4E75                       		rts	
00001B72                            ; End of function KosDec
00001B72                            
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            ; Pallet cycling routine loading subroutine
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            
00001B72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B72                            
00001B72                            
00001B72                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B72 7400                       		moveq	#0,d2
00001B74 7000                       		moveq	#0,d0
00001B76 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B7A D040                       		add.w	d0,d0		; multiply by 2
00001B7C 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B80 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B84                            ; End of function PalCycle_Load
00001B84                            
00001B84                            ; ===========================================================================
00001B84                            ; ---------------------------------------------------------------------------
00001B84                            ; Pallet cycling routines
00001B84                            ; ---------------------------------------------------------------------------
00001B84 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B86 0000                       		dc.w PalCycle_LZ-PalCycle
00001B88 0000                       		dc.w PalCycle_MZ-PalCycle
00001B8A 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B8C 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B8E 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B90 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B92 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B94                            
00001B94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B94                            
00001B94                            
00001B94                            PalCycle_Title:				; XREF: TitleScreen
00001B94 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B9A 6000                       		bra.s	loc_196A
00001B9C                            ; ===========================================================================
00001B9C                            
00001B9C                            PalCycle_GHZ:				; XREF: PalCycle
00001B9C 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001BA2                            
00001BA2                            loc_196A:				; XREF: PalCycle_Title
00001BA2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BA6 6A00                       		bpl.s	locret_1990
00001BA8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001BAE 3038 F632                  		move.w	($FFFFF632).w,d0
00001BB2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BB6 0240 0003                  		andi.w	#3,d0
00001BBA E748                       		lsl.w	#3,d0
00001BBC 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BC0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BC4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BC8                            
00001BC8                            locret_1990:
00001BC8 4E75                       		rts	
00001BCA                            ; End of function PalCycle_Title
00001BCA                            
00001BCA                            
00001BCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BCA                            
00001BCA                            
00001BCA                            PalCycle_LZ:				; XREF: PalCycle
00001BCA 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BCE 6A00                       		bpl.s	loc_19D8
00001BD0 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BD6 3038 F632                  		move.w	($FFFFF632).w,d0
00001BDA 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BDE 0240 0003                  		andi.w	#3,d0
00001BE2 E748                       		lsl.w	#3,d0
00001BE4 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BEA 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BF0 6600                       		bne.s	loc_19C0
00001BF2 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BF8                            
00001BF8                            loc_19C0:
00001BF8 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BFC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C00 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C04 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001C08 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C0C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C10                            
00001C10                            loc_19D8:
00001C10 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C14 0240 0007                  		andi.w	#7,d0
00001C18 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C1C 6700                       		beq.s	locret_1A3A
00001C1E 7201                       		moveq	#1,d1
00001C20 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C24 6700                       		beq.s	loc_19F0
00001C26 4441                       		neg.w	d1
00001C28                            
00001C28                            loc_19F0:
00001C28 3038 F650                  		move.w	($FFFFF650).w,d0
00001C2C 0240 0003                  		andi.w	#3,d0
00001C30 D041                       		add.w	d1,d0
00001C32 0C40 0003                  		cmpi.w	#3,d0
00001C36 6500                       		bcs.s	loc_1A0A
00001C38 3200                       		move.w	d0,d1
00001C3A 7000                       		moveq	#0,d0
00001C3C 4A41                       		tst.w	d1
00001C3E 6A00                       		bpl.s	loc_1A0A
00001C40 7002                       		moveq	#2,d0
00001C42                            
00001C42                            loc_1A0A:
00001C42 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C46 D040                       		add.w	d0,d0
00001C48 3200                       		move.w	d0,d1
00001C4A D040                       		add.w	d0,d0
00001C4C D041                       		add.w	d1,d0
00001C4E 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C54 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C58 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C5C 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C60 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C66 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C6A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C6E 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C72                            
00001C72                            locret_1A3A:
00001C72 4E75                       		rts	
00001C74                            ; End of function PalCycle_LZ
00001C74                            
00001C74                            ; ===========================================================================
00001C74 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C7C                            ; ===========================================================================
00001C7C                            
00001C7C                            PalCycle_MZ:				; XREF: PalCycle
00001C7C 4E75                       		rts	
00001C7E                            
00001C7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C7E                            
00001C7E                            
00001C7E                            PalCycle_SLZ:				; XREF: PalCycle
00001C7E 4E75                       		rts	
00001C80                            ; End of function PalCycle_SLZ
00001C80                            
00001C80                            
00001C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C80                            
00001C80                            
00001C80                            PalCycle_SYZ:				; XREF: PalCycle
00001C80 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C84 6A00                       		bpl.s	locret_1AC6
00001C86 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C8C 3038 F632                  		move.w	($FFFFF632).w,d0
00001C90 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C94 0240 0003                  		andi.w	#3,d0
00001C98 E548                       		lsl.w	#2,d0
00001C9A 3200                       		move.w	d0,d1
00001C9C D040                       		add.w	d0,d0
00001C9E 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CA4 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CA8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CAC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CB0 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CB6 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CBA 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CBE 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CC4                            
00001CC4                            locret_1AC6:
00001CC4 4E75                       		rts	
00001CC6                            ; End of function PalCycle_SYZ
00001CC6                            
00001CC6                            
00001CC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CC6                            
00001CC6                            
00001CC6                            PalCycle_SBZ:				; XREF: PalCycle
00001CC6 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CCC 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CD0 6700                       		beq.s	loc_1ADA
00001CD2 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CD8                            
00001CD8                            loc_1ADA:
00001CD8 43F8 F650                  		lea	($FFFFF650).w,a1
00001CDC 321A                       		move.w	(a2)+,d1
00001CDE                            
00001CDE                            loc_1AE0:
00001CDE 5311                       		subq.b	#1,(a1)
00001CE0 6B00                       		bmi.s	loc_1AEA
00001CE2 5489                       		addq.l	#2,a1
00001CE4 5C8A                       		addq.l	#6,a2
00001CE6 6000                       		bra.s	loc_1B06
00001CE8                            ; ===========================================================================
00001CE8                            
00001CE8                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CE8 12DA                       		move.b	(a2)+,(a1)+
00001CEA 1011                       		move.b	(a1),d0
00001CEC 5200                       		addq.b	#1,d0
00001CEE B01A                       		cmp.b	(a2)+,d0
00001CF0 6500                       		bcs.s	loc_1AF6
00001CF2 7000                       		moveq	#0,d0
00001CF4                            
00001CF4                            loc_1AF6:
00001CF4 12C0                       		move.b	d0,(a1)+
00001CF6 0240 000F                  		andi.w	#$F,d0
00001CFA D040                       		add.w	d0,d0
00001CFC 305A                       		movea.w	(a2)+,a0
00001CFE 365A                       		movea.w	(a2)+,a3
00001D00 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D04                            
00001D04                            loc_1B06:				; XREF: PalCycle_SBZ
00001D04 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D08 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D0C 6A00                       		bpl.s	locret_1B64
00001D0E 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D14 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D1A 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D1E 6700                       		beq.s	loc_1B2E
00001D20 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D26 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D2C                            
00001D2C                            loc_1B2E:
00001D2C 72FF                       		moveq	#-1,d1
00001D2E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D32 6700                       		beq.s	loc_1B38
00001D34 4441                       		neg.w	d1
00001D36                            
00001D36                            loc_1B38:
00001D36 3038 F632                  		move.w	($FFFFF632).w,d0
00001D3A 0240 0003                  		andi.w	#3,d0
00001D3E D041                       		add.w	d1,d0
00001D40 0C40 0003                  		cmpi.w	#3,d0
00001D44 6500                       		bcs.s	loc_1B52
00001D46 3200                       		move.w	d0,d1
00001D48 7000                       		moveq	#0,d0
00001D4A 4A41                       		tst.w	d1
00001D4C 6A00                       		bpl.s	loc_1B52
00001D4E 7002                       		moveq	#2,d0
00001D50                            
00001D50                            loc_1B52:
00001D50 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D54 D040                       		add.w	d0,d0
00001D56 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D5A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D5E 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D62                            
00001D62                            locret_1B64:
00001D62 4E75                       		rts	
00001D64                            ; End of function PalCycle_SBZ
00001D64                            
00001D64                            ; ===========================================================================
00001D64                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D84                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DA4                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DC4                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DD6                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DE8                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E50                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E74                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E94                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EA4                            
00001EA4                            Pal_SBZCycList:
00001EA4                            	include "_inc\SBZ pallet script 1.asm"
00001EA4                            ; ---------------------------------------------------------------------------
00001EA4                            ; Scrap Brain Zone 1 pallet cycling script
00001EA4                            ; ---------------------------------------------------------------------------
00001EA4 0008                       	dc.w 8			; number of entries - 1
00001EA6 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001EA8 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001EAA FB50                       	dc.w $FB50		; RAM address
00001EAC 0D08                       	dc.b $D, 8
00001EAE 0000                       	dc.w Pal_SBZCyc2
00001EB0 FB52                       	dc.w $FB52
00001EB2 0E08                       	dc.b $E, 8
00001EB4 0000                       	dc.w Pal_SBZCyc3
00001EB6 FB6E                       	dc.w $FB6E
00001EB8 0B08                       	dc.b $B, 8
00001EBA 0000                       	dc.w Pal_SBZCyc5
00001EBC FB70                       	dc.w $FB70
00001EBE 0708                       	dc.b 7,	8
00001EC0 0000                       	dc.w Pal_SBZCyc6
00001EC2 FB72                       	dc.w $FB72
00001EC4 1C10                       	dc.b $1C, $10
00001EC6 0000                       	dc.w Pal_SBZCyc7
00001EC8 FB7E                       	dc.w $FB7E
00001ECA 0303                       	dc.b 3,	3
00001ECC 0000                       	dc.w Pal_SBZCyc8
00001ECE FB78                       	dc.w $FB78
00001ED0 0303                       	dc.b 3,	3
00001ED2 0000                       	dc.w Pal_SBZCyc8+2
00001ED4 FB7A                       	dc.w $FB7A
00001ED6 0303                       	dc.b 3,	3
00001ED8 0000                       	dc.w Pal_SBZCyc8+4
00001EDA FB7C                       	dc.w $FB7C
00001EDC                            	even
00001EDC                            	even
00001EDC                            
00001EDC                            Pal_SBZCycList2:
00001EDC                            	include "_inc\SBZ pallet script 2.asm"
00001EDC                            ; ---------------------------------------------------------------------------
00001EDC                            ; Scrap Brain Zone 2 pallet cycling script
00001EDC                            ; ---------------------------------------------------------------------------
00001EDC 0006                       	dc.w 6
00001EDE 0708                       	dc.b 7,	8
00001EE0 0000                       	dc.w Pal_SBZCyc1
00001EE2 FB50                       	dc.w $FB50
00001EE4 0D08                       	dc.b $D, 8
00001EE6 0000                       	dc.w Pal_SBZCyc2
00001EE8 FB52                       	dc.w $FB52
00001EEA 0908                       	dc.b 9,	8
00001EEC 0000                       	dc.w Pal_SBZCyc9
00001EEE FB70                       	dc.w $FB70
00001EF0 0708                       	dc.b 7,	8
00001EF2 0000                       	dc.w Pal_SBZCyc6
00001EF4 FB72                       	dc.w $FB72
00001EF6 0303                       	dc.b 3,	3
00001EF8 0000                       	dc.w Pal_SBZCyc8
00001EFA FB78                       	dc.w $FB78
00001EFC 0303                       	dc.b 3,	3
00001EFE 0000                       	dc.w Pal_SBZCyc8+2
00001F00 FB7A                       	dc.w $FB7A
00001F02 0303                       	dc.b 3,	3
00001F04 0000                       	dc.w Pal_SBZCyc8+4
00001F06 FB7C                       	dc.w $FB7C
00001F08                            	even
00001F08                            	even
00001F08                            
00001F08                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F18                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F28                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F38                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F44                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F54                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F64                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F84                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F8E                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F9E                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FAA                            ; ---------------------------------------------------------------------------
00001FAA                            ; Subroutine to	fade out and fade in
00001FAA                            ; ---------------------------------------------------------------------------
00001FAA                            
00001FAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FAA                            
00001FAA                            
00001FAA                            Pal_FadeTo:
00001FAA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FB0                            
00001FB0                            Pal_FadeTo2:
00001FB0 7000                       		moveq	#0,d0
00001FB2 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FB6 1038 F626                  		move.b	($FFFFF626).w,d0
00001FBA D0C0                       		adda.w	d0,a0
00001FBC 7200                       		moveq	#0,d1
00001FBE 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC2                            
00001FC2                            Pal_ToBlack:
00001FC2 30C1                       		move.w	d1,(a0)+
00001FC4 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FC8                            
00001FC8 383C 0015                  		move.w	#$15,d4
00001FCC 1A3C 0009                  		move.b	#9,d5
00001FD0                            
00001FD0                            loc_1DCE:
00001FD0 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FD6 6100 0000                  		bsr.w	DelayProgram
00001FDA 6100                       		bsr.s	Pal_FadeIn
00001FDC 6100 F844                  		bsr.w	RunPLC_RAM
00001FE0 51CC FFEE                  		dbf	d4,loc_1DCE
00001FE4 4E75                       		rts	
00001FE6                            ; End of function Pal_FadeTo
00001FE6                            
00001FE6                            ; ---------------------------------------------------------------------------
00001FE6                            ; Pallet fade-in subroutine
00001FE6                            ; ---------------------------------------------------------------------------
00001FE6                            
00001FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FE6                            
00001FE6                            
00001FE6                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FE6 7000                       		moveq	#0,d0
00001FE8 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FEC 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FF0 1038 F626                  		move.b	($FFFFF626).w,d0
00001FF4 D0C0                       		adda.w	d0,a0
00001FF6 D2C0                       		adda.w	d0,a1
00001FF8 1038 F627                  		move.b	($FFFFF627).w,d0
00001FFC                            
00001FFC                            loc_1DFA:
00001FFC 6100                       		bsr.s	Pal_AddColor
00001FFE 51C8 FFFC                  		dbf	d0,loc_1DFA
00002002 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002008 6600                       		bne.s	locret_1E24
0000200A 7000                       		moveq	#0,d0
0000200C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002010 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002014 1038 F626                  		move.b	($FFFFF626).w,d0
00002018 D0C0                       		adda.w	d0,a0
0000201A D2C0                       		adda.w	d0,a1
0000201C 1038 F627                  		move.b	($FFFFF627).w,d0
00002020                            
00002020                            loc_1E1E:
00002020 6100                       		bsr.s	Pal_AddColor
00002022 51C8 FFFC                  		dbf	d0,loc_1E1E
00002026                            
00002026                            locret_1E24:
00002026 4E75                       		rts	
00002028                            ; End of function Pal_FadeIn
00002028                            
00002028                            
00002028                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002028                            
00002028                            
00002028                            Pal_AddColor:				; XREF: Pal_FadeIn
00002028 3419                       		move.w	(a1)+,d2
0000202A 3610                       		move.w	(a0),d3
0000202C B642                       		cmp.w	d2,d3
0000202E 6700                       		beq.s	loc_1E4E
00002030 3203                       		move.w	d3,d1
00002032 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002036 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002038 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
0000203A 30C1                       		move.w	d1,(a0)+	; update pallet
0000203C 4E75                       		rts	
0000203E                            ; ===========================================================================
0000203E                            
0000203E                            Pal_AddGreen:				; XREF: Pal_AddColor
0000203E 3203                       		move.w	d3,d1
00002040 0641 0020                  		addi.w	#$20,d1		; increase green value
00002044 B242                       		cmp.w	d2,d1
00002046 6200                       		bhi.s	Pal_AddRed
00002048 30C1                       		move.w	d1,(a0)+	; update pallet
0000204A 4E75                       		rts	
0000204C                            ; ===========================================================================
0000204C                            
0000204C                            Pal_AddRed:				; XREF: Pal_AddGreen
0000204C 5458                       		addq.w	#2,(a0)+	; increase red value
0000204E 4E75                       		rts	
00002050                            ; ===========================================================================
00002050                            
00002050                            loc_1E4E:				; XREF: Pal_AddColor
00002050 5448                       		addq.w	#2,a0
00002052 4E75                       		rts	
00002054                            ; End of function Pal_AddColor
00002054                            
00002054                            
00002054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002054                            
00002054                            
00002054                            Pal_FadeFrom:
00002054 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000205A 383C 0015                  		move.w	#$15,d4
0000205E                            loc_1E5C:
0000205E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002064 6100 0000                  		bsr.w	DelayProgram
00002068 6100                       		bsr.s	Pal_FadeOut
0000206A 6100 F7B6                  		bsr.w	RunPLC_RAM
0000206E 51CC FFEE                  		dbf	d4,loc_1E5C
00002072 4E75                       		rts	
00002074                            ; End of function Pal_FadeFrom
00002074                            
00002074                            ; ---------------------------------------------------------------------------
00002074                            ; Pallet fade-out subroutine
00002074                            ; ---------------------------------------------------------------------------
00002074                            
00002074                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002074                            
00002074                            
00002074                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002074 7000                       		moveq	#0,d0
00002076 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000207A 1038 F626                  		move.b	($FFFFF626).w,d0
0000207E D0C0                       		adda.w	d0,a0
00002080 1038 F627                  		move.b	($FFFFF627).w,d0
00002084                            
00002084                            loc_1E82:
00002084 6100                       		bsr.s	Pal_DecColor
00002086 51C8 FFFC                  		dbf	d0,loc_1E82
0000208A                            
0000208A 7000                       		moveq	#0,d0
0000208C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002090 1038 F626                  		move.b	($FFFFF626).w,d0
00002094 D0C0                       		adda.w	d0,a0
00002096 1038 F627                  		move.b	($FFFFF627).w,d0
0000209A                            
0000209A                            loc_1E98:
0000209A 6100                       		bsr.s	Pal_DecColor
0000209C 51C8 FFFC                  		dbf	d0,loc_1E98
000020A0 4E75                       		rts	
000020A2                            ; End of function Pal_FadeOut
000020A2                            
000020A2                            
000020A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020A2                            
000020A2                            
000020A2                            Pal_DecColor:				; XREF: Pal_FadeOut
000020A2 3410                       		move.w	(a0),d2
000020A4 6700                       		beq.s	loc_1ECC
000020A6 3202                       		move.w	d2,d1
000020A8 0241 000E                  		andi.w	#$E,d1
000020AC 6700                       		beq.s	Pal_DecGreen
000020AE 5558                       		subq.w	#2,(a0)+	; decrease red value
000020B0 4E75                       		rts	
000020B2                            ; ===========================================================================
000020B2                            
000020B2                            Pal_DecGreen:				; XREF: Pal_DecColor
000020B2 3202                       		move.w	d2,d1
000020B4 0241 00E0                  		andi.w	#$E0,d1
000020B8 6700                       		beq.s	Pal_DecBlue
000020BA 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020BE 4E75                       		rts	
000020C0                            ; ===========================================================================
000020C0                            
000020C0                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020C0 3202                       		move.w	d2,d1
000020C2 0241 0E00                  		andi.w	#$E00,d1
000020C6 6700                       		beq.s	loc_1ECC
000020C8 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020CC 4E75                       		rts	
000020CE                            ; ===========================================================================
000020CE                            
000020CE                            loc_1ECC:				; XREF: Pal_DecColor
000020CE 5448                       		addq.w	#2,a0
000020D0 4E75                       		rts	
000020D2                            ; End of function Pal_DecColor
000020D2                            
000020D2                            ; ---------------------------------------------------------------------------
000020D2                            ; Subroutine to	fill the pallet	with white (special stage)
000020D2                            ; ---------------------------------------------------------------------------
000020D2                            
000020D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020D2                            
000020D2                            
000020D2                            Pal_MakeWhite:				; XREF: SpecialStage
000020D2 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020D8 7000                       		moveq	#0,d0
000020DA 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020DE 1038 F626                  		move.b	($FFFFF626).w,d0
000020E2 D0C0                       		adda.w	d0,a0
000020E4 323C 0EEE                  		move.w	#$EEE,d1
000020E8 1038 F627                  		move.b	($FFFFF627).w,d0
000020EC                            
000020EC                            PalWhite_Loop:
000020EC 30C1                       		move.w	d1,(a0)+
000020EE 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020F2 383C 0015                  		move.w	#$15,d4
000020F6                            
000020F6                            loc_1EF4:
000020F6 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020FC 6100 0000                  		bsr.w	DelayProgram
00002100 6100                       		bsr.s	Pal_WhiteToBlack
00002102 6100 F71E                  		bsr.w	RunPLC_RAM
00002106 51CC FFEE                  		dbf	d4,loc_1EF4
0000210A 4E75                       		rts	
0000210C                            ; End of function Pal_MakeWhite
0000210C                            
0000210C                            
0000210C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000210C                            
0000210C                            
0000210C                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000210C 7000                       		moveq	#0,d0
0000210E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002112 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002116 1038 F626                  		move.b	($FFFFF626).w,d0
0000211A D0C0                       		adda.w	d0,a0
0000211C D2C0                       		adda.w	d0,a1
0000211E 1038 F627                  		move.b	($FFFFF627).w,d0
00002122                            
00002122                            loc_1F20:
00002122 6100                       		bsr.s	Pal_DecColor2
00002124 51C8 FFFC                  		dbf	d0,loc_1F20
00002128                            
00002128 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000212E 6600                       		bne.s	locret_1F4A
00002130 7000                       		moveq	#0,d0
00002132 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002136 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000213A 1038 F626                  		move.b	($FFFFF626).w,d0
0000213E D0C0                       		adda.w	d0,a0
00002140 D2C0                       		adda.w	d0,a1
00002142 1038 F627                  		move.b	($FFFFF627).w,d0
00002146                            
00002146                            loc_1F44:
00002146 6100                       		bsr.s	Pal_DecColor2
00002148 51C8 FFFC                  		dbf	d0,loc_1F44
0000214C                            
0000214C                            locret_1F4A:
0000214C 4E75                       		rts	
0000214E                            ; End of function Pal_WhiteToBlack
0000214E                            
0000214E                            
0000214E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000214E                            
0000214E                            
0000214E                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000214E 3419                       		move.w	(a1)+,d2
00002150 3610                       		move.w	(a0),d3
00002152 B642                       		cmp.w	d2,d3
00002154 6700                       		beq.s	loc_1F78
00002156 3203                       		move.w	d3,d1
00002158 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000215C 6500                       		bcs.s	loc_1F64
0000215E B242                       		cmp.w	d2,d1
00002160 6500                       		bcs.s	loc_1F64
00002162 30C1                       		move.w	d1,(a0)+
00002164 4E75                       		rts	
00002166                            ; ===========================================================================
00002166                            
00002166                            loc_1F64:				; XREF: Pal_DecColor2
00002166 3203                       		move.w	d3,d1
00002168 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000216C 6500                       		bcs.s	loc_1F74
0000216E B242                       		cmp.w	d2,d1
00002170 6500                       		bcs.s	loc_1F74
00002172 30C1                       		move.w	d1,(a0)+
00002174 4E75                       		rts	
00002176                            ; ===========================================================================
00002176                            
00002176                            loc_1F74:				; XREF: loc_1F64
00002176 5558                       		subq.w	#2,(a0)+	; decrease red value
00002178 4E75                       		rts	
0000217A                            ; ===========================================================================
0000217A                            
0000217A                            loc_1F78:				; XREF: Pal_DecColor2
0000217A 5448                       		addq.w	#2,a0
0000217C 4E75                       		rts	
0000217E                            ; End of function Pal_DecColor2
0000217E                            
0000217E                            ; ---------------------------------------------------------------------------
0000217E                            ; Subroutine to	make a white flash when	you enter a special stage
0000217E                            ; ---------------------------------------------------------------------------
0000217E                            
0000217E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000217E                            
0000217E                            
0000217E                            Pal_MakeFlash:				; XREF: SpecialStage
0000217E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002184 383C 0015                  		move.w	#$15,d4
00002188                            
00002188                            loc_1F86:
00002188 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000218E 6100 0000                  		bsr.w	DelayProgram
00002192 6100                       		bsr.s	Pal_ToWhite
00002194 6100 F68C                  		bsr.w	RunPLC_RAM
00002198 51CC FFEE                  		dbf	d4,loc_1F86
0000219C 4E75                       		rts	
0000219E                            ; End of function Pal_MakeFlash
0000219E                            
0000219E                            
0000219E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000219E                            
0000219E                            
0000219E                            Pal_ToWhite:				; XREF: Pal_MakeFlash
0000219E 7000                       		moveq	#0,d0
000021A0 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021A4 1038 F626                  		move.b	($FFFFF626).w,d0
000021A8 D0C0                       		adda.w	d0,a0
000021AA 1038 F627                  		move.b	($FFFFF627).w,d0
000021AE                            
000021AE                            loc_1FAC:
000021AE 6100                       		bsr.s	Pal_AddColor2
000021B0 51C8 FFFC                  		dbf	d0,loc_1FAC
000021B4 7000                       		moveq	#0,d0
000021B6 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021BA 1038 F626                  		move.b	($FFFFF626).w,d0
000021BE D0C0                       		adda.w	d0,a0
000021C0 1038 F627                  		move.b	($FFFFF627).w,d0
000021C4                            
000021C4                            loc_1FC2:
000021C4 6100                       		bsr.s	Pal_AddColor2
000021C6 51C8 FFFC                  		dbf	d0,loc_1FC2
000021CA 4E75                       		rts	
000021CC                            ; End of function Pal_ToWhite
000021CC                            
000021CC                            
000021CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021CC                            
000021CC                            
000021CC                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021CC 3410                       		move.w	(a0),d2
000021CE 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021D2 6700                       		beq.s	loc_2006
000021D4 3202                       		move.w	d2,d1
000021D6 0241 000E                  		andi.w	#$E,d1
000021DA 0C41 000E                  		cmpi.w	#$E,d1
000021DE 6700                       		beq.s	loc_1FE2
000021E0 5458                       		addq.w	#2,(a0)+	; increase red value
000021E2 4E75                       		rts	
000021E4                            ; ===========================================================================
000021E4                            
000021E4                            loc_1FE2:				; XREF: Pal_AddColor2
000021E4 3202                       		move.w	d2,d1
000021E6 0241 00E0                  		andi.w	#$E0,d1
000021EA 0C41 00E0                  		cmpi.w	#$E0,d1
000021EE 6700                       		beq.s	loc_1FF4
000021F0 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021F4 4E75                       		rts	
000021F6                            ; ===========================================================================
000021F6                            
000021F6                            loc_1FF4:				; XREF: loc_1FE2
000021F6 3202                       		move.w	d2,d1
000021F8 0241 0E00                  		andi.w	#$E00,d1
000021FC 0C41 0E00                  		cmpi.w	#$E00,d1
00002200 6700                       		beq.s	loc_2006
00002202 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002206 4E75                       		rts	
00002208                            ; ===========================================================================
00002208                            
00002208                            loc_2006:				; XREF: Pal_AddColor2
00002208 5448                       		addq.w	#2,a0
0000220A 4E75                       		rts	
0000220C                            ; End of function Pal_AddColor2
0000220C                            
0000220C                            ; ---------------------------------------------------------------------------
0000220C                            ; Pallet cycling routine - Sega	logo
0000220C                            ; ---------------------------------------------------------------------------
0000220C                            
0000220C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000220C                            
0000220C                            
0000220C                            PalCycle_Sega:				; XREF: SegaScreen
0000220C 4A38 F635                  		tst.b	($FFFFF635).w
00002210 6600                       		bne.s	loc_206A
00002212 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002216 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000221C 7205                       		moveq	#5,d1
0000221E 3038 F632                  		move.w	($FFFFF632).w,d0
00002222                            
00002222                            loc_2020:
00002222 6A00                       		bpl.s	loc_202A
00002224 5448                       		addq.w	#2,a0
00002226 5341                       		subq.w	#1,d1
00002228 5440                       		addq.w	#2,d0
0000222A 60F6                       		bra.s	loc_2020
0000222C                            ; ===========================================================================
0000222C                            
0000222C                            loc_202A:				; XREF: PalCycle_Sega
0000222C 3400                       		move.w	d0,d2
0000222E 0242 001E                  		andi.w	#$1E,d2
00002232 6600                       		bne.s	loc_2034
00002234 5440                       		addq.w	#2,d0
00002236                            
00002236                            loc_2034:
00002236 0C40 0060                  		cmpi.w	#$60,d0
0000223A 6400                       		bcc.s	loc_203E
0000223C 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002240                            
00002240                            loc_203E:
00002240 5440                       		addq.w	#2,d0
00002242 51C9 FFE8                  		dbf	d1,loc_202A
00002246 3038 F632                  		move.w	($FFFFF632).w,d0
0000224A 5440                       		addq.w	#2,d0
0000224C 3400                       		move.w	d0,d2
0000224E 0242 001E                  		andi.w	#$1E,d2
00002252 6600                       		bne.s	loc_2054
00002254 5440                       		addq.w	#2,d0
00002256                            
00002256                            loc_2054:
00002256 0C40 0064                  		cmpi.w	#$64,d0
0000225A 6D00                       		blt.s	loc_2062
0000225C 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002262 70F4                       		moveq	#-$C,d0
00002264                            
00002264                            loc_2062:
00002264 31C0 F632                  		move.w	d0,($FFFFF632).w
00002268 7001                       		moveq	#1,d0
0000226A 4E75                       		rts	
0000226C                            ; ===========================================================================
0000226C                            
0000226C                            loc_206A:				; XREF: loc_202A
0000226C 5338 F634                  		subq.b	#1,($FFFFF634).w
00002270 6A00                       		bpl.s	loc_20BC
00002272 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002278 3038 F632                  		move.w	($FFFFF632).w,d0
0000227C 0640 000C                  		addi.w	#$C,d0
00002280 0C40 0030                  		cmpi.w	#$30,d0
00002284 6500                       		bcs.s	loc_2088
00002286 7000                       		moveq	#0,d0
00002288 4E75                       		rts	
0000228A                            ; ===========================================================================
0000228A                            
0000228A                            loc_2088:				; XREF: loc_206A
0000228A 31C0 F632                  		move.w	d0,($FFFFF632).w
0000228E 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002294 41F0 0000                  		lea	(a0,d0.w),a0
00002298 43F8 FB04                  		lea	($FFFFFB04).w,a1
0000229C 22D8                       		move.l	(a0)+,(a1)+
0000229E 22D8                       		move.l	(a0)+,(a1)+
000022A0 3298                       		move.w	(a0)+,(a1)
000022A2 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022A6 7000                       		moveq	#0,d0
000022A8 722C                       		moveq	#$2C,d1
000022AA                            
000022AA                            loc_20A8:
000022AA 3400                       		move.w	d0,d2
000022AC 0242 001E                  		andi.w	#$1E,d2
000022B0 6600                       		bne.s	loc_20B2
000022B2 5440                       		addq.w	#2,d0
000022B4                            
000022B4                            loc_20B2:
000022B4 3390 0000                  		move.w	(a0),(a1,d0.w)
000022B8 5440                       		addq.w	#2,d0
000022BA 51C9 FFEE                  		dbf	d1,loc_20A8
000022BE                            
000022BE                            loc_20BC:
000022BE 7001                       		moveq	#1,d0
000022C0 4E75                       		rts	
000022C2                            ; End of function PalCycle_Sega
000022C2                            
000022C2                            ; ===========================================================================
000022C2                            
000022C2                            Pal_Sega1:	incbin	pallet\sega1.bin
000022CE                            Pal_Sega2:	incbin	pallet\sega2.bin
000022FE                            
000022FE                            ; ---------------------------------------------------------------------------
000022FE                            ; Subroutines to load pallets
000022FE                            ; ---------------------------------------------------------------------------
000022FE                            
000022FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FE                            
000022FE                            
000022FE                            PalLoad1:
000022FE 43F9 0000 0000             		lea	(PalPointers).l,a1
00002304 E748                       		lsl.w	#3,d0
00002306 D2C0                       		adda.w	d0,a1
00002308 2459                       		movea.l	(a1)+,a2
0000230A 3659                       		movea.w	(a1)+,a3
0000230C D6FC 0080                  		adda.w	#$80,a3
00002310 3E19                       		move.w	(a1)+,d7
00002312                            
00002312                            loc_2110:
00002312 26DA                       		move.l	(a2)+,(a3)+
00002314 51CF FFFC                  		dbf	d7,loc_2110
00002318 4E75                       		rts	
0000231A                            ; End of function PalLoad1
0000231A                            
0000231A                            
0000231A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231A                            
0000231A                            
0000231A                            PalLoad2:
0000231A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002320 E748                       		lsl.w	#3,d0
00002322 D2C0                       		adda.w	d0,a1
00002324 2459                       		movea.l	(a1)+,a2
00002326 3659                       		movea.w	(a1)+,a3
00002328 3E19                       		move.w	(a1)+,d7
0000232A                            
0000232A                            loc_2128:
0000232A 26DA                       		move.l	(a2)+,(a3)+
0000232C 51CF FFFC                  		dbf	d7,loc_2128
00002330 4E75                       		rts	
00002332                            ; End of function PalLoad2
00002332                            
00002332                            ; ---------------------------------------------------------------------------
00002332                            ; Underwater pallet loading subroutine
00002332                            ; ---------------------------------------------------------------------------
00002332                            
00002332                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002332                            
00002332                            
00002332                            PalLoad3_Water:
00002332 43F9 0000 0000             		lea	(PalPointers).l,a1
00002338 E748                       		lsl.w	#3,d0
0000233A D2C0                       		adda.w	d0,a1
0000233C 2459                       		movea.l	(a1)+,a2
0000233E 3659                       		movea.w	(a1)+,a3
00002340 96FC 0080                  		suba.w	#$80,a3
00002344 3E19                       		move.w	(a1)+,d7
00002346                            
00002346                            loc_2144:
00002346 26DA                       		move.l	(a2)+,(a3)+
00002348 51CF FFFC                  		dbf	d7,loc_2144
0000234C 4E75                       		rts	
0000234E                            ; End of function PalLoad3_Water
0000234E                            
0000234E                            
0000234E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000234E                            
0000234E                            
0000234E                            PalLoad4_Water:
0000234E 43F9 0000 0000             		lea	(PalPointers).l,a1
00002354 E748                       		lsl.w	#3,d0
00002356 D2C0                       		adda.w	d0,a1
00002358 2459                       		movea.l	(a1)+,a2
0000235A 3659                       		movea.w	(a1)+,a3
0000235C 96FC 0100                  		suba.w	#$100,a3
00002360 3E19                       		move.w	(a1)+,d7
00002362                            
00002362                            loc_2160:
00002362 26DA                       		move.l	(a2)+,(a3)+
00002364 51CF FFFC                  		dbf	d7,loc_2160
00002368 4E75                       		rts	
0000236A                            ; End of function PalLoad4_Water
0000236A                            
0000236A                            ; ===========================================================================
0000236A                            ; ---------------------------------------------------------------------------
0000236A                            ; Pallet pointers
0000236A                            ; ---------------------------------------------------------------------------
0000236A                            PalPointers:
0000236A                            	include "_inc\Pallet pointers.asm"
0000236A                            ; ---------------------------------------------------------------------------
0000236A                            ; Pallet pointers
0000236A                            ; ---------------------------------------------------------------------------
0000236A 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000236E FB00                       	dc.w $FB00		; RAM address
00002370 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002372 0000 0000                  	dc.l Pal_Title
00002376 FB00                       	dc.w $FB00
00002378 001F                       	dc.w $1F
0000237A 0000 0000                  	dc.l Pal_LevelSel
0000237E FB00                       	dc.w $FB00
00002380 001F                       	dc.w $1F
00002382 0000 0000                  	dc.l Pal_Sonic
00002386 FB00                       	dc.w $FB00
00002388 0007                       	dc.w 7
0000238A 0000 0000                  	dc.l Pal_GHZ
0000238E FB20                       	dc.w $FB20
00002390 0017                       	dc.w $17
00002392 0000 0000                  	dc.l Pal_LZ
00002396 FB20                       	dc.w $FB20
00002398 0017                       	dc.w $17
0000239A 0000 0000                  	dc.l Pal_MZ
0000239E FB20                       	dc.w $FB20
000023A0 0017                       	dc.w $17
000023A2 0000 0000                  	dc.l Pal_SLZ
000023A6 FB20                       	dc.w $FB20
000023A8 0017                       	dc.w $17
000023AA 0000 0000                  	dc.l Pal_SYZ
000023AE FB20                       	dc.w $FB20
000023B0 0017                       	dc.w $17
000023B2 0000 0000                  	dc.l Pal_SBZ1
000023B6 FB20                       	dc.w $FB20
000023B8 0017                       	dc.w $17
000023BA 0000 0000                  	dc.l Pal_Special
000023BE FB00                       	dc.w $FB00
000023C0 001F                       	dc.w $1F
000023C2 0000 0000                  	dc.l Pal_LZWater
000023C6 FB00                       	dc.w $FB00
000023C8 001F                       	dc.w $1F
000023CA 0000 0000                  	dc.l Pal_SBZ3
000023CE FB20                       	dc.w $FB20
000023D0 0017                       	dc.w $17
000023D2 0000 0000                  	dc.l Pal_SBZ3Water
000023D6 FB00                       	dc.w $FB00
000023D8 001F                       	dc.w $1F
000023DA 0000 0000                  	dc.l Pal_SBZ2
000023DE FB20                       	dc.w $FB20
000023E0 0017                       	dc.w $17
000023E2 0000 0000                  	dc.l Pal_LZSonWater
000023E6 FB00                       	dc.w $FB00
000023E8 0007                       	dc.w 7
000023EA 0000 0000                  	dc.l Pal_SBZ3SonWat
000023EE FB00                       	dc.w $FB00
000023F0 0007                       	dc.w 7
000023F2 0000 0000                  	dc.l Pal_SpeResult
000023F6 FB00                       	dc.w $FB00
000023F8 001F                       	dc.w $1F
000023FA 0000 0000                  	dc.l Pal_SpeContinue
000023FE FB00                       	dc.w $FB00
00002400 000F                       	dc.w $F
00002402 0000 0000                  	dc.l Pal_Ending
00002406 FB00                       	dc.w $FB00
00002408 001F                       	dc.w $1F
0000240A 0000 0000                  	dc.l Pal_Idiot
0000240E FB20                       	dc.w $FB20
00002410 0007                       	dc.w 7
00002412 0000 0000                  	dc.l Pal_BHZ
00002416 FB20                       	dc.w $FB20
00002418 0017                       	dc.w $17
0000241A 0000 0000                  	dc.l Pal_Gronic
0000241E FB00                       	dc.w $FB00
00002420 0007                       	dc.w 7
00002422 0000 0000                  	dc.l Pal_LZGroWater
00002426 FB00                       	dc.w $FB00
00002428 0007                       	dc.w 7
0000242A 0000 0000                  	dc.l Pal_SBZ3GroWat
0000242E FB00                       	dc.w $FB00
00002430 0007                       	dc.w 7
00002432 0000 0000                  	dc.l Pal_Anakama
00002436 FB00                       	dc.w $FB00
00002438 0007                       	dc.w 7
00002438 0007                       	dc.w 7
0000243A                            
0000243A                            ; ---------------------------------------------------------------------------
0000243A                            ; Pallet data
0000243A                            ; ---------------------------------------------------------------------------
0000243A                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024BA                            Pal_Title:	incbin	pallet\title.bin
0000253A                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025BA                            Pal_Sonic:	incbin	pallet\sonic.bin
000025DA                            Pal_GHZ:	incbin	pallet\ghz.bin
0000263A                            Pal_LZ:		incbin	pallet\lz.bin
0000269A                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
0000271A                            Pal_MZ:		incbin	pallet\mz.bin
0000277A                            Pal_SLZ:	incbin	pallet\slz.bin
000027DA                            Pal_SYZ:	incbin	pallet\syz.bin
0000283A                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
0000289A                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028FA                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000297A                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029DA                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A5A                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A7A                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A9A                            Pal_BHZ:	incbin	pallet\bhz.bin
00002AFA                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B7A                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002BBA                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002C3A                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002C5A                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002C7A                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C9A                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002CBA                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002D3A                            
00002D3A                            ; ---------------------------------------------------------------------------
00002D3A                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002D3A                            ; ---------------------------------------------------------------------------
00002D3A                            
00002D3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D3A                            
00002D3A                            
00002D3A                            DelayProgram:				; XREF: PauseGame
00002D3A 46FC 2300                  		move	#$2300,sr
00002D3E                            
00002D3E                            loc_29AC:
00002D3E 4A38 F62A                  		tst.b	($FFFFF62A).w
00002D42 66FA                       		bne.s	loc_29AC
00002D44 4E75                       		rts	
00002D46                            ; End of function DelayProgram
00002D46                            
00002D46                            ; ---------------------------------------------------------------------------
00002D46                            ; Subroutine to	generate a pseudo-random number	in d0
00002D46                            ; ---------------------------------------------------------------------------
00002D46                            
00002D46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D46                            
00002D46                            
00002D46                            RandomNumber:
00002D46 2238 F636                  		move.l	($FFFFF636).w,d1
00002D4A 6600                       		bne.s	loc_29C0
00002D4C 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002D52                            
00002D52                            loc_29C0:
00002D52 2001                       		move.l	d1,d0
00002D54 E581                       		asl.l	#2,d1
00002D56 D280                       		add.l	d0,d1
00002D58 E781                       		asl.l	#3,d1
00002D5A D280                       		add.l	d0,d1
00002D5C 3001                       		move.w	d1,d0
00002D5E 4841                       		swap	d1
00002D60 D041                       		add.w	d1,d0
00002D62 3200                       		move.w	d0,d1
00002D64 4841                       		swap	d1
00002D66 21C1 F636                  		move.l	d1,($FFFFF636).w
00002D6A 4E75                       		rts	
00002D6C                            ; End of function RandomNumber
00002D6C                            
00002D6C                            
00002D6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D6C                            
00002D6C                            
00002D6C                            CalcSine:				; XREF: SS_BGAnimate; et al
00002D6C 0240 00FF                  		andi.w	#$FF,d0
00002D70 D040                       		add.w	d0,d0
00002D72 0640 0080                  		addi.w	#$80,d0
00002D76 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002D7A 0440 0080                  		subi.w	#$80,d0
00002D7E 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002D82 4E75                       		rts	
00002D84                            ; End of function CalcSine
00002D84                            
00002D84                            ; ===========================================================================
00002D84                            
00002D84                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00003004                            
00003004                            ; ===========================================================================
00003004 48E7 6000                  		movem.l	d1-d2,-(sp)
00003008 3200                       		move.w	d0,d1
0000300A 4841                       		swap	d1
0000300C 7000                       		moveq	#0,d0
0000300E 3200                       		move.w	d0,d1
00003010 7407                       		moveq	#7,d2
00003012                            
00003012                            loc_2C80:
00003012 E599                       		rol.l	#2,d1
00003014 D040                       		add.w	d0,d0
00003016 5240                       		addq.w	#1,d0
00003018 9240                       		sub.w	d0,d1
0000301A 6400                       		bcc.s	loc_2C9A
0000301C D240                       		add.w	d0,d1
0000301E 5340                       		subq.w	#1,d0
00003020 51CA FFF0                  		dbf	d2,loc_2C80
00003024 E248                       		lsr.w	#1,d0
00003026 4CDF 0006                  		movem.l	(sp)+,d1-d2
0000302A 4E75                       		rts	
0000302C                            ; ===========================================================================
0000302C                            
0000302C                            loc_2C9A:
0000302C 5240                       		addq.w	#1,d0
0000302E 51CA FFE2                  		dbf	d2,loc_2C80
00003032 E248                       		lsr.w	#1,d0
00003034 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003038 4E75                       		rts	
0000303A                            
0000303A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000303A                            
0000303A                            
0000303A                            CalcAngle:
0000303A 48E7 1800                  		movem.l	d3-d4,-(sp)
0000303E 7600                       		moveq	#0,d3
00003040 7800                       		moveq	#0,d4
00003042 3601                       		move.w	d1,d3
00003044 3802                       		move.w	d2,d4
00003046 8843                       		or.w	d3,d4
00003048 6700                       		beq.s	loc_2D04
0000304A 3802                       		move.w	d2,d4
0000304C 4A43                       		tst.w	d3
0000304E 6A00 0000                  		bpl.w	loc_2CC2
00003052 4443                       		neg.w	d3
00003054                            
00003054                            loc_2CC2:
00003054 4A44                       		tst.w	d4
00003056 6A00 0000                  		bpl.w	loc_2CCA
0000305A 4444                       		neg.w	d4
0000305C                            
0000305C                            loc_2CCA:
0000305C B843                       		cmp.w	d3,d4
0000305E 6400 0000                  		bcc.w	loc_2CDC
00003062 E18C                       		lsl.l	#8,d4
00003064 88C3                       		divu.w	d3,d4
00003066 7000                       		moveq	#0,d0
00003068 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
0000306C 6000                       		bra.s	loc_2CE6
0000306E                            ; ===========================================================================
0000306E                            
0000306E                            loc_2CDC:				; XREF: CalcAngle
0000306E E18B                       		lsl.l	#8,d3
00003070 86C4                       		divu.w	d4,d3
00003072 7040                       		moveq	#$40,d0
00003074 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003078                            
00003078                            loc_2CE6:
00003078 4A41                       		tst.w	d1
0000307A 6A00 0000                  		bpl.w	loc_2CF2
0000307E 4440                       		neg.w	d0
00003080 0640 0080                  		addi.w	#$80,d0
00003084                            
00003084                            loc_2CF2:
00003084 4A42                       		tst.w	d2
00003086 6A00 0000                  		bpl.w	loc_2CFE
0000308A 4440                       		neg.w	d0
0000308C 0640 0100                  		addi.w	#$100,d0
00003090                            
00003090                            loc_2CFE:
00003090 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003094 4E75                       		rts	
00003096                            ; ===========================================================================
00003096                            
00003096                            loc_2D04:				; XREF: CalcAngle
00003096 303C 0040                  		move.w	#$40,d0
0000309A 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000309E 4E75                       		rts	
000030A0                            ; End of function CalcAngle
000030A0                            
000030A0                            ; ===========================================================================
000030A0                            
000030A0                            Angle_Data:	incbin	misc\angles.bin
000031A2                            
000031A2                            ; ===========================================================================
000031A2                            
000031A2                            ; ---------------------------------------------------------------------------
000031A2                            ; Sega screen
000031A2                            ; ---------------------------------------------------------------------------
000031A2                            
000031A2                            SegaScreen:				; XREF: GameModeArray
000031A2 103C 00E4                  		move.b	#$E4,d0
000031A6 6100 E42A                  		bsr.w	PlaySound_Special ; stop music
000031AA 6100 E668                  		bsr.w	ClearPLC
000031AE 6100 EEA4                  		bsr.w	Pal_FadeFrom
000031B2 4DF9 00C0 0004             		lea	($C00004).l,a6
000031B8 3CBC 8004                  		move.w	#$8004,(a6)
000031BC 3CBC 8230                  		move.w	#$8230,(a6)
000031C0 3CBC 8407                  		move.w	#$8407,(a6)
000031C4 3CBC 8700                  		move.w	#$8700,(a6)
000031C8 3CBC 8B00                  		move.w	#$8B00,(a6)
000031CC 4238 F64E                  		clr.b	($FFFFF64E).w
000031D0 46FC 2700                  		move	#$2700,sr
000031D4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031D8 0200 00BF                  		andi.b	#$BF,d0
000031DC 33C0 00C0 0004             		move.w	d0,($C00004).l
000031E2 6100 E316                  		bsr.w	ClearScreen
000031E6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031F0 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000031F6 6100 E47E                  		bsr.w	NemDec
000031FA 43F9 00FF 0000             		lea	($FF0000).l,a1
00003200 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003206 303C 0000                  		move.w	#0,d0
0000320A 6100 E748                  		bsr.w	EniDec
0000320E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003214 203C 6510 0003             		move.l	#$65100003,d0
0000321A 7217                       		moveq	#$17,d1
0000321C 7407                       		moveq	#7,d2
0000321E 6100 E436                  		bsr.w	ShowVDPGraphics
00003222 43F9 00FF 0180             		lea	($FF0180).l,a1
00003228 203C 4000 0003             		move.l	#$40000003,d0
0000322E 7227                       		moveq	#$27,d1
00003230 741B                       		moveq	#$1B,d2
00003232 6100 E422                  		bsr.w	ShowVDPGraphics
00003236 7000                       		moveq	#0,d0
00003238 6100 F0E0                  		bsr.w	PalLoad2	; load Sega logo pallet
0000323C 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00003242 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003248 31FC 0000 F662             		move.w	#0,($FFFFF662).w
0000324E 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00003254 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003258 0000 0040                  		ori.b	#$40,d0
0000325C 33C0 00C0 0004             		move.w	d0,($C00004).l
00003262                            
00003262                            Sega_WaitPallet:
00003262 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003268 6100 FAD0                  		bsr.w	DelayProgram
0000326C 6100 EF9E                  		bsr.w	PalCycle_Sega
00003270 66F0                       		bne.s	Sega_WaitPallet
00003272                            
00003272 103C 00E1                  		move.b	#$E1,d0
00003276 6100 E35A                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
0000327A 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003280 6100 FAB8                  		bsr.w	DelayProgram
00003284 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000328A                            
0000328A                            Sega_WaitEnd:
0000328A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003290 6100 FAA8                  		bsr.w	DelayProgram
00003294 4A78 F614                  		tst.w	($FFFFF614).w
00003298 6700                       		beq.s	Sega_GotoTitle
0000329A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000032A0 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000032A2                            
000032A2                            Sega_GotoTitle:
000032A2 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
000032A8 4E75                       		rts	
000032AA                            ; ===========================================================================
000032AA                            
000032AA                            ; ---------------------------------------------------------------------------
000032AA                            ; Title	screen
000032AA                            ; ---------------------------------------------------------------------------
000032AA                            
000032AA                            TitleScreen:				; XREF: GameModeArray
000032AA 103C 00E4                  		move.b	#$E4,d0
000032AE 6100 E322                  		bsr.w	PlaySound_Special ; stop music
000032B2 6100 EDA0                  		bsr.w	Pal_FadeFrom
000032B6 6100 E55C                  		bsr.w	ClearPLC
000032BA 46FC 2700                  		move	#$2700,sr
000032BE 6100 E2C8                  		bsr.w	SoundDriverLoad
000032C2 4DF9 00C0 0004             		lea	($C00004).l,a6
000032C8 3CBC 8004                  		move.w	#$8004,(a6)
000032CC 3CBC 8230                  		move.w	#$8230,(a6)
000032D0 3CBC 8407                  		move.w	#$8407,(a6)
000032D4 3CBC 9001                  		move.w	#$9001,(a6)
000032D8 3CBC 9200                  		move.w	#$9200,(a6)
000032DC 3CBC 8B03                  		move.w	#$8B03,(a6)
000032E0 3CBC 8720                  		move.w	#$8720,(a6)
000032E4 4238 F64E                  		clr.b	($FFFFF64E).w
000032E8 6100 E210                  		bsr.w	ClearScreen
000032EC 43F8 D000                  		lea	($FFFFD000).w,a1
000032F0 7000                       		moveq	#0,d0
000032F2 323C 07FF                  		move.w	#$7FF,d1
000032F6                            
000032F6                            Title_ClrObjRam:
000032F6 22C0                       		move.l	d0,(a1)+
000032F8 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000032FC                            
000032FC                            ; gomer
000032FC 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003306 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
0000330C 6100 E368                  		bsr.w	NemDec
00003310 7003                       		moveq	#3,d0		; load Sonic's pallet
00003312 6100 EFEA                  		bsr.w	PalLoad1
00003316                            
00003316 43F9 00FF 0000             		lea	($FF0000).l,a1
0000331C 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
00003322 303C 0000                  		move.w	#0,d0
00003326 6100 E62C                  		bsr.w	EniDec
0000332A                            ; help how the fuck can i do this IT SHOWS NOTHING
0000332A 6100 EC7E                  		bsr.w	Pal_FadeTo
0000332E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003334 203C 4000 0003             		move.l	#$40000003,d0
0000333A 7227                       		moveq	#$27,d1
0000333C 741B                       		moveq	#$1B,d2
0000333E 6100 E316                  		bsr.w	ShowVDPGraphics
00003342                            
00003342                            
00003342 43F9 00FF 0000             		lea	($FF0000).l,a1
00003348 203C 6000 0003             		move.l	#$60000003,d0
0000334E 7227                       		moveq	#$27,d1
00003350 741B                       		moveq	#$1B,d2
00003352                            
00003352 6100 ED00                  		bsr.w	Pal_FadeFrom
00003356                            
00003356                            
00003356 6100 E1A2                  		bsr.w	ClearScreen
0000335A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003364 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000336A 6100 E30A                  		bsr.w	NemDec
0000336E 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003378 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000337E 6100 E2F6                  		bsr.w	NemDec
00003382 43F9 00FF 0000             		lea	($FF0000).l,a1
00003388 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000338E 303C 0000                  		move.w	#0,d0
00003392 6100 E5C0                  		bsr.w	EniDec
00003396 43F9 00FF 0000             		lea	($FF0000).l,a1
0000339C 203C 4000 0003             		move.l	#$40000003,d0
000033A2 7227                       		moveq	#$27,d1
000033A4 741B                       		moveq	#$1B,d2
000033A6 6100 E2AE                  		bsr.w	ShowVDPGraphics
000033AA 6100 ECA8                  		bsr.w	Pal_FadeFrom
000033AE 43F8 FB80                  		lea	($FFFFFB80).w,a1
000033B2 7000                       		moveq	#0,d0
000033B4 323C 001F                  		move.w	#$1F,d1
000033B8                            
000033B8                            
000033B8                            Title_ClrPallet:
000033B8 22C0                       		move.l	d0,(a1)+
000033BA 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000033BE                            
000033BE 7003                       		moveq	#3,d0		; load Sonic's pallet
000033C0 6100 EF3C                  		bsr.w	PalLoad1
000033C4 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000033CA 4EB9 0000 0000             		jsr	ObjectsLoad
000033D0 4EB9 0000 0000             		jsr	BuildSprites
000033D6 6100 EBD2                  		bsr.w	Pal_FadeTo
000033DA 46FC 2700                  		move	#$2700,sr
000033DE 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000033E8 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000033EE 6100 E286                  		bsr.w	NemDec
000033F2 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
000033FC 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003402 6100 E272                  		bsr.w	NemDec
00003406 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003410 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003416 6100 E25E                  		bsr.w	NemDec
0000341A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003420 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003428 4BF9 0000 0606             		lea	(Art_Text).l,a5
0000342E 323C 0BC4                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003432                            
00003432                            Title_LoadText:
00003432 2C9D                       		move.l	(a5)+,(a6)
00003434 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003438                            
00003438 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
0000343E 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003444 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000344A 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003450 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003456 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
0000345C 6100 0000                  		bsr.w	LevelSizeLoad
00003460 6100 0000                  		bsr.w	DeformBgLayer
00003464                            
00003464 43F8 B000                  		lea	($FFFFB000).w,a1
00003468 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
0000346E 303C 0000                  		move.w	#0,d0
00003472 6100 E4E0                  		bsr.w	EniDec
00003476 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
0000347C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003482 6100 E64E                  		bsr.w	KosDec
00003486 6100 0000                  		bsr.w	LevelLayoutLoad
0000348A                            
0000348A 46FC 2700                  		move	#$2700,sr
0000348E 6100 E06A                  		bsr.w	ClearScreen
00003492 4BF9 00C0 0004             		lea	($C00004).l,a5
00003498 4DF9 00C0 0000             		lea	($C00000).l,a6
0000349E 47F8 F708                  		lea	($FFFFF708).w,a3
000034A2 49F8 A440                  		lea	($FFFFA440).w,a4
000034A6 343C 6000                  		move.w	#$6000,d2
000034AA 6100 0000                  		bsr.w	LoadTilesFromStart2
000034AE 43F9 00FF 0000             		lea	($FF0000).l,a1
000034B4 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000034BA 303C 0000                  		move.w	#0,d0
000034BE 6100 E494                  		bsr.w	EniDec
000034C2 43F9 00FF 0000             		lea	($FF0000).l,a1
000034C8 203C 4206 0003             		move.l	#$42060003,d0
000034CE 7221                       		moveq	#$21,d1
000034D0 7415                       		moveq	#$15,d2
000034D2 6100 E182                  		bsr.w	ShowVDPGraphics
000034D6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000034E0 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000034E6 6100 E18E                  		bsr.w	NemDec
000034EA 7001                       		moveq	#1,d0		; load title screen pallet
000034EC 6100 EE10                  		bsr.w	PalLoad1
000034F0 103C 008A                  		move.b	#$8A,d0		; play title screen music
000034F4 6100 E0DC                  		bsr.w	PlaySound_Special
000034F8 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000034FE 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003504 43F8 D080                  		lea	($FFFFD080).w,a1
00003508 7000                       		moveq	#0,d0
0000350A 323C 000F                  		move.w	#$F,d1
0000350E                            
0000350E                            Title_ClrObjRam2:
0000350E 22C0                       		move.l	d0,(a1)+
00003510 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003514                            
00003514 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000351A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003520 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003526 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000352C 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003532 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003538 4EB9 0000 0000             		jsr	ObjectsLoad
0000353E 6100 0000                  		bsr.w	DeformBgLayer
00003542 4EB9 0000 0000             		jsr	BuildSprites
00003548 7000                       		moveq	#0,d0
0000354A 6100 E29C                  		bsr.w	LoadPLC2
0000354E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003554 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000355A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000355E 0000 0040                  		ori.b	#$40,d0
00003562 33C0 00C0 0004             		move.w	d0,($C00004).l
00003568 6100 EA40                  		bsr.w	Pal_FadeTo
0000356C                            
0000356C                            loc_317C:
0000356C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003572 6100 F7C6                  		bsr.w	DelayProgram
00003576 4EB9 0000 0000             		jsr	ObjectsLoad
0000357C 6100 0000                  		bsr.w	DeformBgLayer
00003580 4EB9 0000 0000             		jsr	BuildSprites
00003586 6100 E60C                  		bsr.w	PalCycle_Title
0000358A 6100 E296                  		bsr.w	RunPLC_RAM
0000358E 3038 D008                  		move.w	($FFFFD008).w,d0
00003592 5440                       		addq.w	#2,d0
00003594 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003598 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
0000359C 6500                       		bcs.s	Title_ChkRegion	; if not, branch
0000359E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000035A4 4E75                       		rts	
000035A6                            ; ===========================================================================
000035A6                            
000035A6                            Title_ChkRegion:
000035A6 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000035AA 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000035AC 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000035B2 6000                       		bra.s	Title_EnterCheat
000035B4                            ; ===========================================================================
000035B4                            
000035B4                            Title_RegionJ:				; XREF: Title_ChkRegion
000035B4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000035BA                            
000035BA                            Title_EnterCheat:			; XREF: Title_ChkRegion
000035BA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000035BE D0C0                       		adda.w	d0,a0
000035C0 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000035C4 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000035C8 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000035CA 6600                       		bne.s	loc_3210	; if not, branch
000035CC 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000035D0 4A00                       		tst.b	d0
000035D2 6600                       		bne.s	Title_CountC
000035D4 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000035D8 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000035DC E249                       		lsr.w	#1,d1
000035DE 0241 0003                  		andi.w	#3,d1
000035E2 6700                       		beq.s	Title_PlayRing
000035E4 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000035E8 6A00                       		bpl.s	Title_PlayRing
000035EA 7201                       		moveq	#1,d1
000035EC 1181 1001                  		move.b	d1,1(a0,d1.w)
000035F0                            
000035F0                            Title_PlayRing:
000035F0 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000035F6 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000035FA 6100 DFD6                  		bsr.w	PlaySound_Special
000035FE 6000                       		bra.s	Title_CountC
00003600                            ; ===========================================================================
00003600                            
00003600                            loc_3210:				; XREF: Title_EnterCheat
00003600 4A00                       		tst.b	d0
00003602 6700                       		beq.s	Title_CountC
00003604 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
0000360A 6700                       		beq.s	Title_CountC
0000360C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003612                            
00003612                            Title_CountC:
00003612 1038 F605                  		move.b	($FFFFF605).w,d0
00003616 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000361A 6700                       		beq.s	loc_3230	; if not, branch
0000361C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003620                            
00003620                            loc_3230:
00003620 4A78 F614                  		tst.w	($FFFFF614).w
00003624 6700 0000                  		beq.w	Demo
00003628                            		; (temporary until we have an actual options screen)
00003628 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
0000362E 6700                       		beq.s	@notc
00003630                            
00003630 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
00003634 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
0000363A 6D00                       		blt.s	@notoverflow
0000363C 11FC 0000 FFE8             		move.b	#0,(v_character).w
00003642                            	@notoverflow:
00003642 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003646 6100 DF8A                  		bsr.w	PlaySound_Special
0000364A                            	@notc:
0000364A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003650 6700 FF1A                  		beq.w	loc_317C	; if not, branch
00003654                            
00003654                            Title_ChkLevSel:
00003654 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
0000365A 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000365E                            		
0000365E                            		
0000365E 7002                       		moveq	#2,d0
00003660 6100 ECB8                  		bsr.w	PalLoad2	; load level select pallet
00003664 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003668 7000                       		moveq	#0,d0
0000366A 323C 00DF                  		move.w	#$DF,d1
0000366E                            
0000366E                            Title_ClrScroll:
0000366E 22C0                       		move.l	d0,(a1)+
00003670 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003674                            
00003674 21C0 F616                  		move.l	d0,($FFFFF616).w
00003678 46FC 2700                  		move	#$2700,sr
0000367C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003682 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
0000368C 323C 03FF                  		move.w	#$3FF,d1
00003690                            
00003690                            Title_ClrVram:
00003690 2C80                       		move.l	d0,(a6)
00003692 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003696                            
00003696 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
0000369A 6700 0000                  		beq.w	GotoOptions	; if not, play level
0000369E                            
0000369E 6100 0000                  		bsr.w	LevSelTextLoad
000036A2                            		
000036A2                            		; sound test fix
000036A2 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000036A6 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000036AC                            		
000036AC 363C C65F                  		move.w	#$C680-$21,d3 ; selected
000036B0 0C46 0014                  		cmpi.w	#$14,d6
000036B4 6700                       		beq.s	@issndtst
000036B6 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
000036BA                            	@issndtst:
000036BA 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000036BE 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000036C2                            		
000036C2 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
000036C6 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000036CE                            		
000036CE 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000036D4 6700                       		beq.s	@issndtst2
000036D6                            		
000036D6 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
000036DC 6100 0000                  		bsr.w	CStringSlop
000036E0 6000                       		bra.s	LevelSelect
000036E2                            	@issndtst2:
000036E2 43F9 0000 0000             		lea	(Controls_SND).l,a1
000036E8 6100 0000                  		bsr.w	CStringSlop
000036EC                            		
000036EC                            ; ---------------------------------------------------------------------------
000036EC                            ; Level	Select
000036EC                            ; ---------------------------------------------------------------------------
000036EC                            LevelSelect:
000036EC 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036F2 6100 F646                  		bsr.w	DelayProgram
000036F6 6100 0000                  		bsr.w	LevSelControls
000036FA 6100 E126                  		bsr.w	RunPLC_RAM
000036FE 4AB8 F680                  		tst.l	($FFFFF680).w
00003702 66E8                       		bne.s	LevelSelect
00003704 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
0000370A 67E0                       		beq.s	LevelSelect	; if not, branch
0000370C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003710 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
00003714 6600                       		bne.s	@dont	; if not, dont blow this place up
00003716                            			
00003716 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
0000371C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003722 6100 F616                  		bsr.w	DelayProgram
00003726                            	@dont:
00003726 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
0000372A 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
0000372C                            		
0000372C 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
00003732 67B8                       		beq.s	LevelSelect	; if not, branch
00003734                            		
00003734 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
0000373A 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
0000373C                            		
0000373C 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003740 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003744                            		
00003744 4EB9 0000 0000             		jsr		ShowNow_Playing
0000374A 60A0                       		bra.s	LevelSelect
0000374C                            ; ===========================================================================
0000374C                            
0000374C                            LevSel_SEGA:				; XREF: LevelSelect
0000374C 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
00003752 4E75                       		rts	
00003754                            ; ===========================================================================
00003754                            
00003754                            LevSel_Ending:				; XREF: LevelSelect
00003754 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
0000375A 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003760 4E75                       		rts	
00003762                            ; ===========================================================================
00003762                            
00003762                            LevSel_Credits:				; XREF: LevelSelect
00003762 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003768 103C 0091                  		move.b	#$91,d0
0000376C 6100 DE64                  		bsr.w	PlaySound_Special ; play credits music
00003770 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003776 4E75                       		rts	
00003778                            ; ===========================================================================
00003778                            
00003778                            LevSel_Level_SS:			; XREF: LevelSelect
00003778 D040                       		add.w	d0,d0
0000377A 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
0000377E 6B00 FF6C                  		bmi.w	LevelSelect
00003782 0C40 FFFF                  		cmpi.w	#$FFFF,d0	; check	if level is 0700 (Special Stage)
00003786 6600                       		bne.s	LevSel_Level	; if not, branch
00003788 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000378E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003792 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003798 7000                       		moveq	#0,d0
0000379A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000379E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000037A2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000037A6 4E75                       		rts	
000037A8                            ; ===========================================================================
000037A8                            
000037A8                            LevSel_Level:				; XREF: LevSel_Level_SS
000037A8 0240 3FFF                  		andi.w	#$3FFF,d0
000037AC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000037B0                            
000037B0                            PlayLevel:				; XREF: ROM:00003246j ...
000037B0 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000037B6 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000037BC 7000                       		moveq	#0,d0
000037BE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000037C2 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000037C6 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000037CA 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
000037CE 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000037D2 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
000037D6 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000037DA 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000037DE 103C 00E0                  		move.b	#$E0,d0
000037E2 6100 DDEE                  		bsr.w	PlaySound_Special ; fade out music
000037E6 4E75                       		rts	
000037E8                            ; ===========================================================================
000037E8                            ; ---------------------------------------------------------------------------
000037E8                            ; Level	select - level pointers
000037E8                            ; ---------------------------------------------------------------------------
000037E8                            LSelectPointers:
000037E8 0000                       		dc.w $0000 ; crz
000037EA 0001                       		dc.w $0001
000037EC 0002                       		dc.w $0002
000037EE 0100                       		dc.w $0100 ; ilfez
000037F0 0101                       		dc.w $0101
000037F2 0102                       		dc.w $0102
000037F4 0200                       		dc.w $0200 ; mz
000037F6 0201                       		dc.w $0201
000037F8 0202                       		dc.w $0202
000037FA 0300                       		dc.w $0300 ; dgrotz
000037FC 0301                       		dc.w $0301 
000037FE 0302                       		dc.w $0302 
00003800 0700                       		dc.w $0700 ; the other mz...
00003802 0701                       		dc.w $0701 
00003804 0702                       		dc.w $0702 
00003806 0400                       		dc.w $0400 ; tpfbz
00003808 0401                       		dc.w $0401
0000380A 0402                       		dc.w $0402
0000380C 0500                       		dc.w $0500 ; zzzzz
0000380E 0501                       		dc.w $0501 
00003810 0103                       		dc.w $0103 
00003812 0502                       		dc.w $0502 ; fz
00003814 FFFF                       		dc.w $FFFF ; special
00003816 8000                       		dc.w $8000 ; sound test
00003818                            		even
00003818                            ; --------------------------------------
00003818                            ; ---------------------------------------------------------------------------
00003818                            ; Level	select codes
00003818                            ; ---------------------------------------------------------------------------
00003818                            LevelSelectCode_J:
00003818                            		incbin	misc\ls_jcode.bin
0000381E                            		even
0000381E                            
0000381E                            LevelSelectCode_US:
0000381E                            		incbin	misc\ls_ucode.bin
00003824                            		even
00003824                            ; ===========================================================================
00003824                            
00003824                            ; ---------------------------------------------------------------------------
00003824                            ; Demo mode
00003824                            ; ---------------------------------------------------------------------------
00003824                            
00003824                            Demo:					; XREF: TitleScreen
00003824 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000382A                            
0000382A                            loc_33B6:				; XREF: loc_33E4
0000382A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003830 6100 F508                  		bsr.w	DelayProgram
00003834 6100 0000                  		bsr.w	DeformBgLayer
00003838 6100 E338                  		bsr.w	PalCycle_Load
0000383C 6100 DFE4                  		bsr.w	RunPLC_RAM
00003840 3038 D008                  		move.w	($FFFFD008).w,d0
00003844 5440                       		addq.w	#2,d0
00003846 31C0 D008                  		move.w	d0,($FFFFD008).w
0000384A 0C40 1C00                  		cmpi.w	#$1C00,d0
0000384E 6500                       		bcs.s	loc_33E4
00003850 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003856 4E75                       		rts	
00003858                            ; ===========================================================================
00003858                            
00003858                            loc_33E4:				; XREF: Demo
00003858 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000385E 6600 FDF4                  		bne.w	Title_ChkLevSel	; if yes, branch
00003862 4A78 F614                  		tst.w	($FFFFF614).w
00003866 6600 FFC2                  		bne.w	loc_33B6
0000386A 103C 00E0                  		move.b	#$E0,d0
0000386E 6100 DD62                  		bsr.w	PlaySound_Special ; fade out music
00003872 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003876 0240 0007                  		andi.w	#7,d0
0000387A D040                       		add.w	d0,d0
0000387C 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003880 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003884 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003888 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
0000388E 6500                       		bcs.s	loc_3422	; if yes, branch
00003890 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003896                            
00003896                            loc_3422:
00003896 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
0000389C 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000038A2 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000038A6 6600                       		bne.s	Demo_Level	; if not, branch
000038A8 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000038AE 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000038B2 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000038B6                            
000038B6                            Demo_Level:
000038B6 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000038BC 7000                       		moveq	#0,d0
000038BE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000038C2 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000038C6 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000038CA 4E75                       		rts	
000038CC                            ; ===========================================================================
000038CC                            ; ---------------------------------------------------------------------------
000038CC                            ; Levels used in demos
000038CC                            ; ---------------------------------------------------------------------------
000038CC                            Demo_Levels:	incbin	misc\dm_ord1.bin
000038D4                            		even
000038D4                            
000038D4                            ; ---------------------------------------------------------------------------
000038D4                            ; Subroutine to	change what you're selecting in the level select
000038D4                            ; ---------------------------------------------------------------------------
000038D4                            
000038D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038D4                            
000038D4                            
000038D4                            LevSelControls:				; XREF: LevelSelect
000038D4 1238 F605                  		move.b	($FFFFF605).w,d1
000038D8 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000038DC 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000038DE 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000038E2 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
000038E6                            
000038E6                            LevSel_UpDown:
000038E6 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000038EC 1238 F604                  		move.b	($FFFFF604).w,d1
000038F0 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000038F4 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
000038F8 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000038FC 0801 0000                  		btst	#0,d1		; is up	pressed?
00003900 6700                       		beq.s	LevSel_Down	; if not, branch
00003902 5346                       		subq.w	#1,d6		; move up 1 selection
00003904 6400                       		bcc.s	LevSel_Down
00003906 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003908                            
00003908                            LevSel_Down:
00003908 0801 0001                  		btst	#1,d1		; is down pressed?
0000390C 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000390E 5246                       		addq.w	#1,d6		; move down 1 selection
00003910 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003914 6500                       		bcs.s	LevSel_Refresh
00003916 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003918 6000                       		bra.s	LevSel_Refresh
0000391A                            		
0000391A                            LevSel_LR:
0000391A 0801 0002                  		btst	#2,d1		; is left pressed?
0000391E 6700                       		beq.s	LevSel_Right	; if not, branch
00003920 0446 0000                  		sub.w	#lsrow2size,d6
00003924 64E2                       		bcc.s	LevSel_Down
00003926 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
0000392A                            LevSel_Right:
0000392A 0801 0003                  		btst	#3,d1		; is right pressed?
0000392E 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003930 0646 0000                  		add.w	#lsrow1size,d6
00003934 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003938 6500                       		bcs.s	LevSel_Refresh
0000393A 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
0000393E                            ; ===========================================================================
0000393E                            LevSel_Refresh:
0000393E                            		
0000393E 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003942 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003946                            		
00003946 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
0000394C 6600                       		bne.s	@exitsndtest
0000394E                            		
0000394E 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003952 43F9 0000 0000             		lea	(Controls_Normal).l,a1
00003958 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003960 6100 0000                  		bsr.w	CStringSlop
00003964                            	@exitsndtest:
00003964                            	
00003964 363C C65F                  		move.w	#$C680-$21,d3
00003968 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
0000396C 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003970                            		
00003970 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
00003976 6600                       		bne.s	@entersndtest
00003978                            		
00003978 363C C65F                  		move.w	#$C680-$21,d3
0000397C 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003982 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000398A 6100 0000                  		bsr.w	CStringSlop
0000398E                            	@entersndtest:
0000398E 4E75                       		rts	
00003990                            		
00003990                            LevSel_SndTest:				; XREF: LevSelControls
00003990 1238 F605                  		move.b	($FFFFF605).w,d1
00003994 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
00003998 6700                       		beq.s	LevSel_NoMove	; if not, branch
0000399A 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
000039A0 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
000039A4                            		
000039A4 1038 FF84                  		move.b	($FFFFFF84).w,d0
000039A8 0801 0002                  		btst	#2,d1		; is left pressed?
000039AC 6700                       		beq.s	SndTest_Right	; if not, branch
000039AE 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
000039B0                            		; no need the fact it's a byte does the trick
000039B0                            
000039B0                            SndTest_Right:
000039B0 0801 0003                  		btst	#3,d1		; is right pressed?
000039B4 6700                       		beq.s	SndTest_A	; if not, branch
000039B6 5200                       		addq.b	#1,d0		; add 1	to sound test
000039B8                            		; same here
000039B8                            		
000039B8                            SndTest_A:
000039B8 0801 0006                  		btst	#6,d1		; is A pressed?
000039BC 6700                       		beq.s	SndTest_B	; if not, branch
000039BE 5100                       		subq.b	#8,d0		; subtract $10 to sound test
000039C0 5100                       		subq.b	#8,d0
000039C2                            		
000039C2                            SndTest_B:
000039C2 0801 0004                  		btst	#4,d1		; is B pressed?
000039C6 6700                       		beq.s	SndTest_Refresh	; if not, branch
000039C8 5000                       		addq.b	#8,d0		; add $10 to sound test
000039CA 5000                       		addq.b	#8,d0
000039CC                            
000039CC                            SndTest_Refresh:
000039CC 363C C65F                  		move.w	#$C680-$21,d3
000039D0 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
000039D4 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000039D8                            
000039D8                            LevSel_NoMove:
000039D8 4E75                       		rts	
000039DA                            ; End of function LevSelControls
000039DA                            
000039DA                            ; ---------------------------------------------------------------------------
000039DA                            ; Subroutine to load level select text
000039DA                            ; ---------------------------------------------------------------------------
000039DA                            
000039DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000039DA                            
000039DA                            LevSelTextLoad_loop:
000039DA 2D44 0004                  		move.l	d4,4(a6)
000039DE 6100 0000                  		bsr.w	LevSel_ChgLine
000039E2 0684 0080 0000             		addi.l	#$800000,d4
000039E8 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000039EC 4E75                       		rts
000039EE                            LevSelTextLoad:				; XREF: TitleScreen
000039EE 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000039F4 4DF9 00C0 0000             		lea	($C00000).l,a6
000039FA 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000039FE 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003A04                            		
00003A04 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
00003A08 61D0                       		bsr.s	LevSelTextLoad_loop
00003A0A                            		
00003A0A                            		
00003A0A 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003A10 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
00003A14 61C4                       		bsr.s	LevSelTextLoad_loop
00003A16 363C C65F                  		move.w	#$C680-$21,d3
00003A1A                            		
00003A1A                            LevSelHighlightCode:
00003A1A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003A20 7000                       		moveq	#0,d0
00003A22 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003A26 3200                       		move.w	d0,d1
00003A28 283C 6086 0003             		move.l	#lsscrpos,d4
00003A2E                            		
00003A2E 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003A32 6D00                       		blt.s	@notsecond
00003A34                            		
00003A34 0440 0000                  		sub.w	#lsrow1size,d0
00003A38 0684 0024 0000             		addi.l	#lsoff,d4
00003A3E                            	@notsecond:
00003A3E EF48                       		lsl.w	#7,d0
00003A40 4840                       		swap	d0
00003A42 D880                       		add.l	d0,d4
00003A44 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003A4A E749                       		lsl.w	#3,d1
00003A4C D241                       		add.w	d1,d1
00003A4E D2C1                       		adda.w	d1,a1
00003A50 2D44 0004                  		move.l	d4,4(a6)
00003A54 6100 0000                  		bsr.w	LevSel_ChgLine
00003A58 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003A5E 6700                       		beq.s	LevSelSndTest
00003A60 4E75                       		rts
00003A62                            
00003A62                            LevSelSndTest:
00003A62 0643 0030                  		add.w	#$30,d3
00003A66 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003A70 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003A74 1400                       		move.b	d0,d2
00003A76 E808                       		lsr.b	#4,d0
00003A78 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A7C 1002                       		move.b	d2,d0
00003A7E 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A82 4E75                       		rts	
00003A84                            ; End of function LevSelTextLoad
00003A84                            
00003A84                            
00003A84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A84                            
00003A84                            
00003A84                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003A84 0240 000F                  		andi.w	#$F,d0
00003A88 0C00 000A                  		cmpi.b	#$A,d0
00003A8C 6500                       		bcs.s	loc_3580
00003A8E 5E00                       		addi.b	#7,d0
00003A90                            
00003A90                            loc_3580:
00003A90 D043                       		add.w	d3,d0
00003A92 3C80                       		move.w	d0,(a6)
00003A94 4E75                       		rts	
00003A96                            ; End of function LevSel_ChgSnd
00003A96                            
00003A96                            
00003A96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A96                            
00003A96                            
00003A96                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003A96 740F                       		moveq	#$10-1,d2		; number of characters per line
00003A98                            
00003A98                            @loop:
00003A98 7000                       		moveq	#0,d0
00003A9A 1019                       		move.b	(a1)+,d0
00003A9C 0C00 0020                  		cmpi.b	#$20,d0
00003AA0 6E00                       		bgt.s	@draw
00003AA2 3CBC 0000                  		move.w	#0,(a6)
00003AA6 51CA FFF0                  		dbf	d2,@loop
00003AAA 4E75                       		rts	
00003AAC                            ; ===========================================================================
00003AAC                            
00003AAC                            @draw:				; XREF: LevSel_ChgLine
00003AAC D043                       		add.w	d3,d0
00003AAE 3C80                       		move.w	d0,(a6)
00003AB0 51CA FFE6                  		dbf	d2,@loop
00003AB4 4E75                       		rts	
00003AB6                            ; End of function LevSel_ChgLine
00003AB6                            		
00003AB6                            CStringSlop_draw:
00003AB6 D043                       		add.w	d3,d0
00003AB8 3C80                       		move.w	d0,(a6)
00003ABA                            CStringSlop:				; XREF: LevSelTextLoad
00003ABA 7000                       		moveq	#0,d0
00003ABC 1019                       		move.b	(a1)+,d0
00003ABE 0C00 0020                  		cmpi.b	#$20,d0
00003AC2 6EF2                       		bgt.s	CStringSlop_draw
00003AC4                            		
00003AC4 0C00 0001                  		cmpi.b	#1,d0
00003AC8 6700                       		beq.s	@InsertSpaces
00003ACA 6500                       		blo.s	@end
00003ACC                            		
00003ACC 3CBC 0000                  		move.w	#0,(a6)
00003AD0 60E8                       		bra.s	CStringSlop
00003AD2                            	@end:
00003AD2 4E75                       		rts
00003AD4                            	@InsertSpaces:
00003AD4 7000                       		moveq	#0,d0
00003AD6 1019                       		move.b	(a1)+,d0
00003AD8                            		
00003AD8                            	@insert:
00003AD8 3CBC 0000                  		move.w	#0,(a6)
00003ADC 51C8 FFFA                  		dbf.w	d0,@insert
00003AE0 60D8                       		bra.s	CStringSlop
00003AE2                            ; End of function LevSel_ChgLine
00003AE2                            
00003AE2                            ; ===========================================================================
00003AE2                            ; ---------------------------------------------------------------------------
00003AE2                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003AE2                            ; ---------------------------------------------------------------------------
00003AE2                            LevelMenuText:	
00003AE2 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003AF2 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B02 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B12 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003B22 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003B32 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B42 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003B52 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B62 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B72 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003B82 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B92 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BA2 4D41 4B4F 544F 2020 2020+          dc.b    "MAKOTO         1"
00003BB2 2020 2020 2020 2020 2020+          dc.b    "               2"
00003BC2 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BD2                            LMTSecondRow:
00003BD2 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003BE2 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003BF2 2020 2020 2020 2020 2020+          dc.b    "               3"
00003C02 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003C12 2020 2020 2020 2020 2020+          dc.b    "               2"
00003C22 2020 2020 2020 2020 2020+          dc.b    "               3"
00003C32 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003C42 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003C52 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003C62 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003C72 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003C82                            LMTSelectableEnd:
00003C82 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003C92                            LMTEnd:
00003C92                            
00003C92                            Now_Playing:
00003C92 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003CA2                            		even
00003CA2                            NP_Track:
00003CA2 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003CAA                            		even
00003CAA                            NP_SFX:
00003CAA 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003CB2                            		even
00003CB2                            
00003CB2                            ShowNow_Playing:
00003CB2 1C00                       		move.b	d0,d6
00003CB4 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003CB8 43FA FFD8                  		lea	Now_Playing(pc),a1
00003CBC 4DF9 00C0 0000             		lea		($C00000).l,a6
00003CC2 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003CCA 6100 FDEE                  		bsr.w	CStringSlop
00003CCE                            		
00003CCE 43FA FFD2                  		lea	NP_Track(pc),a1
00003CD2 0C06 00A0                  		cmpi.b	#$A0,d6
00003CD6 6D00                       		blt.s	@track
00003CD8                            		
00003CD8 43FA FFD0                  		lea	NP_SFX(pc),a1
00003CDC                            	@track:
00003CDC 6100 FDDC                  		bsr.w	CStringSlop
00003CE0                            		
00003CE0 0643 0030                  		add.w	#$30,d3
00003CE4 1006                       		move.b	d6,d0
00003CE6 1400                       		move.b	d0,d2
00003CE8 E808                       		lsr.b	#4,d0
00003CEA 6100 FD98                  		bsr.w	LevSel_ChgSnd
00003CEE 1002                       		move.b	d2,d0
00003CF0 6100 FD92                  		bsr.w	LevSel_ChgSnd
00003CF4 4E75                       		rts	
00003CF6                            
00003CF6                            ; 1 is insert spaces btw
00003CF6                            Controls_Normal:
00003CF6 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003D02                            		even		
00003D02                            Controls_SND:
00003D02 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003D28 00                         		even
00003D28                            		
00003D28                            OptionMenuText:	
00003D28 504C 4159 2054 4845 2047+  		dc.b    "PLAY THE GAME!!!"
00003D38 4348 4152 4143 5445 5220+          dc.b    "CHARACTER       "
00003D48                            OMTEnd:
00003D48                            		
00003D48                            ; ---------------------------------------------------------------------------
00003D48                            ; Level	Select
00003D48                            ; ---------------------------------------------------------------------------
00003D48                            GotoOptions:
00003D48 43F9 0000 3D28             		lea	(OptionMenuText).l,a1
00003D4E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003D54 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003D58 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003D5E                            		
00003D5E 323C 0000                  		move.w	#optamm-1,d1		; number of lines of text (first row)
00003D62 6100 FC76                  		bsr.w	LevSelTextLoad_loop
00003D66                            
00003D66                            OptionsMenu:
00003D66 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003D6C 6100 EFCC                  		bsr.w	DelayProgram
00003D70 6100 0000                  		bsr.w	OptControls
00003D74 6100 DAAC                  		bsr.w	RunPLC_RAM
00003D78 4AB8 F680                  		tst.l	($FFFFF680).w
00003D7C 66E8                       		bne.s	OptionsMenu
00003D7E 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003D84 67E0                       		beq.s	OptionsMenu	; if not, branch
00003D86 4E71                       		nop
00003D88 60DC                       		bra.s	OptionsMenu
00003D8A                            		
00003D8A                            OptReturn:
00003D8A 4E75                       		rts
00003D8C                            OptControls:				; XREF: LevelSelect
00003D8C 1238 F605                  		move.b	($FFFFF605).w,d1
00003D90 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003D94 6600                       		bne.s	Opt_UpDown	; if yes, branch
00003D96 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003D9A 6AEE                       		bpl.s	OptReturn	; if time remains, branch
00003D9C                            Opt_UpDown:
00003D9C 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003DA2 1238 F604                  		move.b	($FFFFF604).w,d1
00003DA6 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003DAA 0801 0000                  		btst	#0,d1		; is up	pressed?
00003DAE 6700                       		beq.s	Opt_Down	; if not, branch
00003DB0 5346                       		subq.w	#1,d6		; move up 1 selection
00003DB2 6400                       		bcc.s	Opt_Down
00003DB4 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003DB6                            
00003DB6                            Opt_Down:
00003DB6 0801 0001                  		btst	#1,d1		; is down pressed?
00003DBA 6700                       		beq.s	Opt_Refresh	; if not, branch
00003DBC 5246                       		addq.w	#1,d6		; move down 1 selection
00003DBE 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003DC2 6500                       		bcs.s	Opt_Refresh
00003DC4 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003DC6                            Opt_Refresh:
00003DC6                            		
00003DC6                            ; ---------------------------------------------------------------------------
00003DC6                            ; Music	playlist
00003DC6                            ; ---------------------------------------------------------------------------
00003DC6                            MusicList1:	incbin	misc\muslist1.bin
00003DCE                            		even
00003DCE                            MusicList2:	incbin	misc\muslist2.bin
00003DD6                            		even
00003DD6                            MusicList3:	incbin	misc\muslist3.bin
00003DDE                            		even
00003DDE                            MusicList4:	incbin	misc\muslist4.bin
00003DE6                            		even
00003DE6                            ; ===========================================================================
00003DE6                            
00003DE6                            ; ---------------------------------------------------------------------------
00003DE6                            ; Level
00003DE6                            ; ---------------------------------------------------------------------------
00003DE6                            
00003DE6                            Level:					; XREF: GameModeArray
00003DE6 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003DEC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DF0 6B00                       		bmi.s	loc_37B6
00003DF2 103C 00E0                  		move.b	#$E0,d0
00003DF6 6100 D7DA                  		bsr.w	PlaySound_Special ; fade out music
00003DFA                            
00003DFA                            loc_37B6:
00003DFA 6100 DA18                  		bsr.w	ClearPLC
00003DFE 6100 E254                  		bsr.w	Pal_FadeFrom
00003E02 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E06 6B00                       		bmi.s	Level_ClrRam
00003E08 46FC 2700                  		move	#$2700,sr
00003E0C 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003E16 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003E1C 6100 D858                  		bsr.w	NemDec
00003E20 46FC 2300                  		move	#$2300,sr
00003E24 7000                       		moveq	#0,d0
00003E26 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E2A E948                       		lsl.w	#4,d0
00003E2C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003E32 45F2 0000                  		lea	(a2,d0.w),a2
00003E36 7000                       		moveq	#0,d0
00003E38 1012                       		move.b	(a2),d0
00003E3A 6700                       		beq.s	loc_37FC
00003E3C 6100 D978                  		bsr.w	LoadPLC		; load level patterns
00003E40                            
00003E40                            loc_37FC:
00003E40 7001                       		moveq	#1,d0
00003E42 6100 D972                  		bsr.w	LoadPLC		; load standard	patterns
00003E46                            
00003E46                            Level_ClrRam:
00003E46 43F8 D000                  		lea	($FFFFD000).w,a1
00003E4A 7000                       		moveq	#0,d0
00003E4C 323C 07FF                  		move.w	#$7FF,d1
00003E50                            
00003E50                            Level_ClrObjRam:
00003E50 22C0                       		move.l	d0,(a1)+
00003E52 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003E56                            
00003E56 43F8 F628                  		lea	($FFFFF628).w,a1
00003E5A 7000                       		moveq	#0,d0
00003E5C 323C 0015                  		move.w	#$15,d1
00003E60                            
00003E60                            Level_ClrVars:
00003E60 22C0                       		move.l	d0,(a1)+
00003E62 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003E66                            
00003E66 43F8 F700                  		lea	($FFFFF700).w,a1
00003E6A 7000                       		moveq	#0,d0
00003E6C 323C 003F                  		move.w	#$3F,d1
00003E70                            
00003E70                            Level_ClrVars2:
00003E70 22C0                       		move.l	d0,(a1)+
00003E72 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003E76                            
00003E76 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003E7A 7000                       		moveq	#0,d0
00003E7C 323C 0047                  		move.w	#$47,d1
00003E80                            
00003E80                            Level_ClrVars3:
00003E80 22C0                       		move.l	d0,(a1)+
00003E82 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003E86                            
00003E86 46FC 2700                  		move	#$2700,sr
00003E8A 6100 D66E                  		bsr.w	ClearScreen
00003E8E 4DF9 00C0 0004             		lea	($C00004).l,a6
00003E94 3CBC 8B03                  		move.w	#$8B03,(a6)
00003E98 3CBC 8230                  		move.w	#$8230,(a6)
00003E9C 3CBC 8407                  		move.w	#$8407,(a6)
00003EA0 3CBC 857C                  		move.w	#$857C,(a6)
00003EA4 3CBC 9001                  		move.w	#$9001,(a6)
00003EA8 3CBC 8004                  		move.w	#$8004,(a6)
00003EAC 3CBC 8720                  		move.w	#$8720,(a6)
00003EB0 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003EB6 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003EBA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003EC0 6600                       		bne.s	Level_LoadPal	; if not, branch
00003EC2 3CBC 8014                  		move.w	#$8014,(a6)
00003EC6 7000                       		moveq	#0,d0
00003EC8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003ECC D040                       		add.w	d0,d0
00003ECE 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003ED4 3031 0000                  		move.w	(a1,d0.w),d0
00003ED8 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003EDC 31C0 F648                  		move.w	d0,($FFFFF648).w
00003EE0 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003EE4 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003EE8 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003EEC 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003EF2 6000 0000                  		bra.w	Level_LoadPal
00003EF6                            Player_Palette:
00003EF6                            		; normal, lz, sbz, blank
00003EF6 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003EFE                            		
00003EFE 0016 0017 0018 0000        		dc.w	22,23,24,0 ; Pal_Gronic 
00003F06 0019 0017 0018 0000        		dc.w	25,23,24,0 ; Pal_Anakama 
00003F0E 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
00003F16                            
00003F16                            		; add more player palettes
00003F16                            Level_LoadPal:
00003F16 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003F1C 46FC 2300                  		move	#$2300,sr
00003F20                            
00003F20 7200                       		moveq	#0,d1
00003F22 1238 FFE8                  		move.b	(v_character),d1
00003F26 D241                       		add.w	d1,d1
00003F28 D241                       		add.w	d1,d1
00003F2A D241                       		add.w	d1,d1
00003F2C 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003F30                            		
00003F30 6100 E3E8                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003F34 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003F3A 6600                       		bne.s	Level_GetBgm	; if not, branch
00003F3C 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003F40 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003F46 6600                       		bne.s	Level_WaterPal	; if not, branch
00003F48 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003F4C                            
00003F4C                            Level_WaterPal:
00003F4C 6100 E3E4                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003F50 4A38 FE30                  		tst.b	($FFFFFE30).w
00003F54 6700                       		beq.s	Level_GetBgm
00003F56 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003F5C                            
00003F5C                            ; NineKode begins here - How to play different songs on different acts
00003F5C                             
00003F5C                            Level_GetBgm:
00003F5C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F60 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003F64 7000                       		moveq	#0,d0
00003F66 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F6A                             
00003F6A 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003F70 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003F72 43F9 0000 3DC6             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003F78 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F7A                             
00003F7A                            Level_GetBgm2:
00003F7A 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003F80 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003F82 43F9 0000 3DCE             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003F88 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F8A                             
00003F8A                            Level_GetBgm3:
00003F8A 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003F90 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003F92 43F9 0000 3DD6             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003F98 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F9A                             
00003F9A                            Level_GetBgm4:
00003F9A 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003FA0 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003FA2 43F9 0000 3DDE             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003FA8                             
00003FA8                            Level_PlayBgm:
00003FA8 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003FAC 6100 D61E                  		bsr.w	PlaySound	; play music
00003FB0 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003FB6                             
00003FB6                            ; NineKode ends here
00003FB6                            
00003FB6                            Level_TtlCard:
00003FB6 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003FBC 6100 ED7C                  		bsr.w	DelayProgram
00003FC0 4EB9 0000 0000             		jsr	ObjectsLoad
00003FC6 4EB9 0000 0000             		jsr	BuildSprites
00003FCC 6100 D854                  		bsr.w	RunPLC_RAM
00003FD0 3038 D108                  		move.w	($FFFFD108).w,d0
00003FD4 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003FD8 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003FDA 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003FDE 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003FE0 4EB9 0000 0000             		jsr	Hud_Base
00003FE6                            
00003FE6                            loc_3946:
00003FE6 7003                       		moveq	#3,d0
00003FE8 6100 E314                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003FEC 6100 0000                  		bsr.w	LevelSizeLoad
00003FF0 6100 0000                  		bsr.w	DeformBgLayer
00003FF4 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003FFA 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003FFE 6100 0000                  		bsr.w	LoadTilesFromStart
00004002 4EB9 0000 0000             		jsr	FloorLog_Unk
00004008 6100 0000                  		bsr.w	ColIndexLoad
0000400C 6100 0000                  		bsr.w	LZWaterEffects
00004010 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00004016 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000401A 6B00                       		bmi.s	Level_ChkDebug
0000401C 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00004022                            
00004022                            Level_ChkDebug:
00004022 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004026 6700                       		beq.s	Level_ChkWater	; if not, branch
00004028 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000402E 6700                       		beq.s	Level_ChkWater	; if not, branch
00004030 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004036                            
00004036                            Level_ChkWater:
00004036 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0000403C 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00004042 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004048 6600                       		bne.s	Level_LoadObj	; if not, branch
0000404A 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00004050 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00004056 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
0000405C 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00004062                            
00004062                            Level_LoadObj:
00004062 4EB9 0000 0000             		jsr	ObjPosLoad
00004068 4EB9 0000 0000             		jsr	ObjectsLoad
0000406E 4EB9 0000 0000             		jsr	BuildSprites
00004074 7000                       		moveq	#0,d0
00004076 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
0000407A 6600                       		bne.s	loc_39E8	; if yes, branch
0000407C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004080 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004084 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00004088                            
00004088                            loc_39E8:
00004088 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
0000408C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00004090 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00004094 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00004098                            		; move.b	d0,($FFFFFE2F).w
00004098 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
0000409E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000040A2 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000040A6 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000040AA 6100 0000                  		bsr.w	OscillateNumInit
000040AE 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
000040B4 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
000040BA 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
000040C0 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000040C6 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
000040CC 7000                       		moveq	#0,d0
000040CE 1038 FE10                  		move.b	($FFFFFE10).w,d0
000040D2 E548                       		lsl.w	#2,d0
000040D4 2271 0000                  		movea.l	(a1,d0.w),a1
000040D8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040DC 6A00                       		bpl.s	Level_Demo	; if yes, branch
000040DE 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000040E4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000040E8 5340                       		subq.w	#1,d0
000040EA E548                       		lsl.w	#2,d0
000040EC 2271 0000                  		movea.l	(a1,d0.w),a1
000040F0                            
000040F0                            Level_Demo:
000040F0 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000040F6 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000040FA 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004100 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004104 6A00                       		bpl.s	Level_ChkWaterPal
00004106 31FC 021C F614             		move.w	#540,($FFFFF614).w
0000410C 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00004112 6600                       		bne.s	Level_ChkWaterPal
00004114 31FC 01FE F614             		move.w	#510,($FFFFF614).w
0000411A                            
0000411A                            Level_ChkWaterPal:
0000411A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00004120 6600                       		bne.s	Level_Delay	; if not, branch
00004122 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00004124 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
0000412A 6600                       		bne.s	Level_WaterPal2	; if not, branch
0000412C 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
0000412E                            
0000412E                            Level_WaterPal2:
0000412E 6100 E21E                  		bsr.w	PalLoad4_Water
00004132                            
00004132                            Level_Delay:
00004132 323C 0003                  		move.w	#3,d1
00004136                            
00004136                            Level_DelayLoop:
00004136 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000413C 6100 EBFC                  		bsr.w	DelayProgram
00004140 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004144                            
00004144 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000414A 6100 DE64                  		bsr.w	Pal_FadeTo2
0000414E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004152 6B00                       		bmi.s	Level_ClrCardArt
00004154 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00004158 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
0000415C 5838 D124                  		addq.b	#4,($FFFFD124).w
00004160 5838 D164                  		addq.b	#4,($FFFFD164).w
00004164 6000                       		bra.s	Level_StartGame
00004166                            ; ===========================================================================
00004166                            
00004166                            Level_ClrCardArt:
00004166 7002                       		moveq	#2,d0
00004168 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load explosion patterns
0000416E 7000                       		moveq	#0,d0
00004170 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004174 0640 0015                  		addi.w	#$15,d0
00004178 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
0000417E                            
0000417E                            Level_StartGame:
0000417E 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00004184                            
00004184                            ; ---------------------------------------------------------------------------
00004184                            ; Main level loop (when	all title card and loading sequences are finished)
00004184                            ; ---------------------------------------------------------------------------
00004184                            
00004184                            Level_MainLoop:
00004184 6100 D458                  		bsr.w	PauseGame
00004188 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000418E 6100 EBAA                  		bsr.w	DelayProgram
00004192 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00004196 6100 0000                  		bsr.w	MoveSonicInDemo
0000419A 6100 0000                  		bsr.w	LZWaterEffects
0000419E 4EB9 0000 0000             		jsr	ObjectsLoad
000041A4 4A78 FE08                  		tst.w	($FFFFFE08).w
000041A8 6600                       		bne.s	loc_3B10
000041AA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000041B0 6400                       		bcc.s	loc_3B14
000041B2                            
000041B2                            loc_3B10:
000041B2 6100 0000                  		bsr.w	DeformBgLayer
000041B6                            
000041B6                            loc_3B14:
000041B6 4EB9 0000 0000             		jsr	BuildSprites
000041BC 4EB9 0000 0000             		jsr	ObjPosLoad
000041C2 6100 D9AE                  		bsr.w	PalCycle_Load
000041C6 6100 D65A                  		bsr.w	RunPLC_RAM
000041CA 6100 0000                  		bsr.w	OscillateNumDo
000041CE 6100 0000                  		bsr.w	ChangeRingFrame
000041D2 6100 0000                  		bsr.w	SignpostArtLoad
000041D6 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000041DC 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000041DE 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000041E2 6600 FC02                  		bne.w	Level		; if yes, branch
000041E6 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000041EC 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000041F0 4E75                       		rts	
000041F2                            ; ===========================================================================
000041F2                            
000041F2                            Level_ChkDemo:				; XREF: Level_MainLoop
000041F2 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000041F6 6600                       		bne.s	Level_EndDemo	; if yes, branch
000041F8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000041FC 6700                       		beq.s	Level_EndDemo	; if not, branch
000041FE 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00004204 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00004208 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000420E 4E75                       		rts	
00004210                            ; ===========================================================================
00004210                            
00004210                            Level_EndDemo:				; XREF: Level_ChkDemo
00004210 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00004216 6600                       		bne.s	loc_3B88	; if not, branch
00004218 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000421E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004222 6A00                       		bpl.s	loc_3B88	; if yes, branch
00004224 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
0000422A                            
0000422A                            loc_3B88:
0000422A 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00004230 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004236 4278 F794                  		clr.w	($FFFFF794).w
0000423A                            
0000423A                            loc_3B98:
0000423A 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004240 6100 EAF8                  		bsr.w	DelayProgram
00004244 6100 0000                  		bsr.w	MoveSonicInDemo
00004248 4EB9 0000 0000             		jsr	ObjectsLoad
0000424E 4EB9 0000 0000             		jsr	BuildSprites
00004254 4EB9 0000 0000             		jsr	ObjPosLoad
0000425A 5378 F794                  		subq.w	#1,($FFFFF794).w
0000425E 6A00                       		bpl.s	loc_3BC8
00004260 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004266 6100 DE0C                  		bsr.w	Pal_FadeOut
0000426A                            
0000426A                            loc_3BC8:
0000426A 4A78 F614                  		tst.w	($FFFFF614).w
0000426E 66CA                       		bne.s	loc_3B98
00004270 4E75                       		rts	
00004272                            ; ===========================================================================
00004272                            ; ---------------------------------------------------------------------------
00004272                            ; Subroutine to	do special water effects in Labyrinth Zone
00004272                            ; ---------------------------------------------------------------------------
00004272                            
00004272                            LZWaterEffects:				; XREF: Level
00004272 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004278 6600                       		bne.s	locret_3C28	; if not, branch
0000427A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004280 6400                       		bcc.s	LZMoveWater
00004282 6100 0000                  		bsr.w	LZWindTunnels
00004286 6100 0000                  		bsr.w	LZWaterSlides
0000428A 6100 0000                  		bsr.w	LZDynamicWater
0000428E                            
0000428E                            LZMoveWater:
0000428E 4238 F64E                  		clr.b	($FFFFF64E).w
00004292 7000                       		moveq	#0,d0
00004294 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004298 E248                       		lsr.w	#1,d0
0000429A D078 F648                  		add.w	($FFFFF648).w,d0
0000429E 31C0 F646                  		move.w	d0,($FFFFF646).w
000042A2 3038 F646                  		move.w	($FFFFF646).w,d0
000042A6 9078 F704                  		sub.w	($FFFFF704).w,d0
000042AA 6400                       		bcc.s	loc_3C1A
000042AC 4A40                       		tst.w	d0
000042AE 6A00                       		bpl.s	loc_3C1A
000042B0 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
000042B6 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
000042BC                            
000042BC                            loc_3C1A:
000042BC 0C40 00DF                  		cmpi.w	#$DF,d0
000042C0 6500                       		bcs.s	loc_3C24
000042C2 303C 00DF                  		move.w	#$DF,d0
000042C6                            
000042C6                            loc_3C24:
000042C6 11C0 F625                  		move.b	d0,($FFFFF625).w
000042CA                            
000042CA                            locret_3C28:
000042CA 4E75                       		rts	
000042CC                            ; ===========================================================================
000042CC                            ; ---------------------------------------------------------------------------
000042CC                            ; Labyrinth default water heights
000042CC                            ; ---------------------------------------------------------------------------
000042CC                            WaterHeight:	incbin	misc\lz_heigh.bin
000042D4                            		even
000042D4                            ; ===========================================================================
000042D4                            
000042D4                            ; ---------------------------------------------------------------------------
000042D4                            ; Labyrinth dynamic water routines
000042D4                            ; ---------------------------------------------------------------------------
000042D4                            
000042D4                            LZDynamicWater:				; XREF: LZWaterEffects
000042D4 7000                       		moveq	#0,d0
000042D6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042DA D040                       		add.w	d0,d0
000042DC 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000042E0 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000042E4 7200                       		moveq	#0,d1
000042E6 1238 F64C                  		move.b	($FFFFF64C).w,d1
000042EA 3038 F64A                  		move.w	($FFFFF64A).w,d0
000042EE 9078 F648                  		sub.w	($FFFFF648).w,d0
000042F2 6700                       		beq.s	locret_3C5A
000042F4 6400                       		bcc.s	loc_3C56
000042F6 4441                       		neg.w	d1
000042F8                            
000042F8                            loc_3C56:
000042F8 D378 F648                  		add.w	d1,($FFFFF648).w
000042FC                            
000042FC                            locret_3C5A:
000042FC 4E75                       		rts	
000042FE                            ; ===========================================================================
000042FE 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004300 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004302 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004304 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004306                            ; ===========================================================================
00004306                            
00004306                            DynWater_LZ1:				; XREF: DynWater_Index
00004306 3038 F700                  		move.w	($FFFFF700).w,d0
0000430A 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000430E 6600                       		bne.s	loc_3CD0
00004310 323C 00B8                  		move.w	#$B8,d1
00004314 0C40 0600                  		cmpi.w	#$600,d0
00004318 6500                       		bcs.s	loc_3CB4
0000431A 323C 0108                  		move.w	#$108,d1
0000431E 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00004324 6500                       		bcs.s	loc_3CBA
00004326 0C40 0C00                  		cmpi.w	#$C00,d0
0000432A 6500                       		bcs.s	loc_3CB4
0000432C 323C 0318                  		move.w	#$318,d1
00004330 0C40 1080                  		cmpi.w	#$1080,d0
00004334 6500                       		bcs.s	loc_3CB4
00004336 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000433C 323C 05C8                  		move.w	#$5C8,d1
00004340 0C40 1380                  		cmpi.w	#$1380,d0
00004344 6500                       		bcs.s	loc_3CB4
00004346 323C 03A8                  		move.w	#$3A8,d1
0000434A B278 F648                  		cmp.w	($FFFFF648).w,d1
0000434E 6600                       		bne.s	loc_3CB4
00004350 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004356                            
00004356                            loc_3CB4:
00004356 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000435A 4E75                       		rts	
0000435C                            ; ===========================================================================
0000435C                            
0000435C                            loc_3CBA:				; XREF: DynWater_LZ1
0000435C 0C40 0C80                  		cmpi.w	#$C80,d0
00004360 65F4                       		bcs.s	loc_3CB4
00004362 323C 00E8                  		move.w	#$E8,d1
00004366 0C40 1500                  		cmpi.w	#$1500,d0
0000436A 65EA                       		bcs.s	loc_3CB4
0000436C 323C 0108                  		move.w	#$108,d1
00004370 60E4                       		bra.s	loc_3CB4
00004372                            ; ===========================================================================
00004372                            
00004372                            loc_3CD0:				; XREF: DynWater_LZ1
00004372 5302                       		subq.b	#1,d2
00004374 6600                       		bne.s	locret_3CF4
00004376 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000437C 6400                       		bcc.s	locret_3CF4
0000437E 323C 03A8                  		move.w	#$3A8,d1
00004382 0C40 1300                  		cmpi.w	#$1300,d0
00004386 6500                       		bcs.s	loc_3CF0
00004388 323C 0108                  		move.w	#$108,d1
0000438C 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004392                            
00004392                            loc_3CF0:
00004392 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004396                            
00004396                            locret_3CF4:
00004396 4E75                       		rts	
00004398                            ; ===========================================================================
00004398                            
00004398                            DynWater_LZ2:				; XREF: DynWater_Index
00004398 3038 F700                  		move.w	($FFFFF700).w,d0
0000439C 323C 0328                  		move.w	#$328,d1
000043A0 0C40 0500                  		cmpi.w	#$500,d0
000043A4 6500                       		bcs.s	loc_3D12
000043A6 323C 03C8                  		move.w	#$3C8,d1
000043AA 0C40 0B00                  		cmpi.w	#$B00,d0
000043AE 6500                       		bcs.s	loc_3D12
000043B0 323C 0428                  		move.w	#$428,d1
000043B4                            
000043B4                            loc_3D12:
000043B4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043B8 4E75                       		rts	
000043BA                            ; ===========================================================================
000043BA                            
000043BA                            DynWater_LZ3:				; XREF: DynWater_Index
000043BA 3038 F700                  		move.w	($FFFFF700).w,d0
000043BE 1438 F64D                  		move.b	($FFFFF64D).w,d2
000043C2 6600                       		bne.s	loc_3D5E
000043C4 323C 0500                  		move.w	#$500,d1
000043C8 0C40 0600                  		cmpi.w	#$600,d0
000043CC 6500                       		bcs.s	loc_3D54
000043CE 0C40 1B00                  		cmpi.w	#$1B00,d0
000043D2 6500                       		bcs.s	loc_3D54
000043D4 323C 0850                  		move.w	#$850,d1
000043D8                            
000043D8                            loc_3D54:
000043D8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043DC 31C1 F648                  		move.w	d1,($FFFFF648).w
000043E0 4E75                       		rts	
000043E2                            ; ===========================================================================
000043E2                            
000043E2                            loc_3D5E:				; XREF: DynWater_LZ3
000043E2 5302                       		subq.b	#1,d2
000043E4 6600                       		bne.s	loc_3DA8
000043E6 323C 04C8                  		move.w	#$4C8,d1
000043EA 0C40 0770                  		cmpi.w	#$770,d0
000043EE 6500                       		bcs.s	loc_3DA2
000043F0 323C 0308                  		move.w	#$308,d1
000043F4 0C40 1400                  		cmpi.w	#$1400,d0
000043F8 6500                       		bcs.s	loc_3DA2
000043FA 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00004400 6700                       		beq.s	loc_3D8E
00004402 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004408 6400                       		bcc.s	loc_3D8E
0000440A 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004410 6400                       		bcc.s	loc_3DA2
00004412                            
00004412                            loc_3D8E:
00004412 323C 0508                  		move.w	#$508,d1
00004416 31C1 F648                  		move.w	d1,($FFFFF648).w
0000441A 0C40 1770                  		cmpi.w	#$1770,d0
0000441E 6500                       		bcs.s	loc_3DA2
00004420 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004426                            
00004426                            loc_3DA2:
00004426 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000442A 4E75                       		rts	
0000442C                            ; ===========================================================================
0000442C                            
0000442C                            loc_3DA8:
0000442C 5302                       		subq.b	#1,d2
0000442E 6600                       		bne.s	loc_3DD2
00004430 323C 0508                  		move.w	#$508,d1
00004434 0C40 1860                  		cmpi.w	#$1860,d0
00004438 6500                       		bcs.s	loc_3DCC
0000443A 323C 0188                  		move.w	#$188,d1
0000443E 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004442 6400                       		bcc.s	loc_3DC6
00004444 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004448 6600                       		bne.s	loc_3DCC
0000444A                            
0000444A                            loc_3DC6:
0000444A 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004450                            
00004450                            loc_3DCC:
00004450 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004454 4E75                       		rts	
00004456                            ; ===========================================================================
00004456                            
00004456                            loc_3DD2:
00004456 5302                       		subq.b	#1,d2
00004458 6600                       		bne.s	loc_3E0E
0000445A 323C 0188                  		move.w	#$188,d1
0000445E 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004462 6500                       		bcs.s	loc_3E04
00004464 323C 0900                  		move.w	#$900,d1
00004468 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000446C 6500                       		bcs.s	loc_3E04
0000446E 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004474 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
0000447A 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004480 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004486 4E75                       		rts	
00004488                            ; ===========================================================================
00004488                            
00004488                            loc_3E04:
00004488 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000448C 31C1 F648                  		move.w	d1,($FFFFF648).w
00004490 4E75                       		rts	
00004492                            ; ===========================================================================
00004492                            
00004492                            loc_3E0E:
00004492 0C40 1E00                  		cmpi.w	#$1E00,d0
00004496 6500                       		bcs.s	locret_3E1A
00004498 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000449E                            
0000449E                            locret_3E1A:
0000449E 4E75                       		rts	
000044A0                            ; ===========================================================================
000044A0                            
000044A0                            DynWater_SBZ3:				; XREF: DynWater_Index
000044A0 323C 0228                  		move.w	#$228,d1
000044A4 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000044AA 6500                       		bcs.s	loc_3E2C
000044AC 323C 04C8                  		move.w	#$4C8,d1
000044B0                            
000044B0                            loc_3E2C:
000044B0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000044B4 4E75                       		rts
000044B6                            
000044B6                            ; ---------------------------------------------------------------------------
000044B6                            ; Labyrinth Zone "wind tunnels"	subroutine
000044B6                            ; ---------------------------------------------------------------------------
000044B6                            
000044B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044B6                            
000044B6                            
000044B6                            LZWindTunnels:				; XREF: LZWaterEffects
000044B6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000044BA 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000044BE 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000044C4 7000                       		moveq	#0,d0
000044C6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000044CA E748                       		lsl.w	#3,d0
000044CC D4C0                       		adda.w	d0,a2
000044CE 7200                       		moveq	#0,d1
000044D0 4A38 FE11                  		tst.b	($FFFFFE11).w
000044D4 6600                       		bne.s	loc_3E56
000044D6 7201                       		moveq	#1,d1
000044D8 514A                       		subq.w	#8,a2
000044DA                            
000044DA                            loc_3E56:
000044DA 43F8 D000                  		lea	($FFFFD000).w,a1
000044DE                            
000044DE                            LZWind_Loop:
000044DE 3029 0008                  		move.w	8(a1),d0
000044E2 B052                       		cmp.w	(a2),d0
000044E4 6500 0000                  		bcs.w	loc_3EF4
000044E8 B06A 0004                  		cmp.w	4(a2),d0
000044EC 6400 0000                  		bcc.w	loc_3EF4
000044F0 3429 000C                  		move.w	$C(a1),d2
000044F4 B46A 0002                  		cmp.w	2(a2),d2
000044F8 6500                       		bcs.s	loc_3EF4
000044FA B46A 0006                  		cmp.w	6(a2),d2
000044FE 6400                       		bcc.s	loc_3EF4
00004500 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004504 0200 003F                  		andi.b	#$3F,d0
00004508 6600                       		bne.s	loc_3E90
0000450A 303C 00D0                  		move.w	#$D0,d0
0000450E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004514                            
00004514                            loc_3E90:
00004514 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00004518 6600 0000                  		bne.w	locret_3F0A
0000451C 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004522 6400                       		bcc.s	loc_3F06
00004524 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
0000452A 0440 0080                  		subi.w	#$80,d0
0000452E B052                       		cmp.w	(a2),d0
00004530 6400                       		bcc.s	LZWind_Move
00004532 7002                       		moveq	#2,d0
00004534 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000453A 6600                       		bne.s	loc_3EBA
0000453C 4440                       		neg.w	d0
0000453E                            
0000453E                            loc_3EBA:
0000453E D169 000C                  		add.w	d0,$C(a1)
00004542                            
00004542                            LZWind_Move:
00004542 5869 0008                  		addq.w	#4,8(a1)
00004546 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
0000454C 337C 0000 0012             		move.w	#0,$12(a1)
00004552 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004558 08E9 0001 0022             		bset	#1,$22(a1)
0000455E 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004564 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004566 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000456A                            
0000456A                            LZWind_MoveDown:
0000456A 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004570 6700                       		beq.s	locret_3EF2	; if not, branch
00004572 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004576                            
00004576                            locret_3EF2:
00004576 4E75                       		rts	
00004578                            ; ===========================================================================
00004578                            
00004578                            loc_3EF4:				; XREF: LZWindTunnels
00004578 504A                       		addq.w	#8,a2
0000457A 51C9 FF62                  		dbf	d1,LZWind_Loop
0000457E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004582 6700                       		beq.s	locret_3F0A
00004584 137C 0000 001C             		move.b	#0,$1C(a1)
0000458A                            
0000458A                            loc_3F06:
0000458A 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000458E                            
0000458E                            locret_3F0A:
0000458E 4E75                       		rts	
00004590                            ; End of function LZWindTunnels
00004590                            
00004590                            ; ===========================================================================
00004590 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004598 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000045AA 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000045B8                            					; XREF: LZWindTunnels
000045B8                            		even
000045B8                            
000045B8                            ; ---------------------------------------------------------------------------
000045B8                            ; Labyrinth Zone water slide subroutine
000045B8                            ; ---------------------------------------------------------------------------
000045B8                            
000045B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045B8                            
000045B8                            
000045B8                            LZWaterSlides:				; XREF: LZWaterEffects
000045B8 43F8 D000                  		lea	($FFFFD000).w,a1
000045BC 0829 0001 0022             		btst	#1,$22(a1)
000045C2 6600                       		bne.s	loc_3F6A
000045C4 3029 000C                  		move.w	$C(a1),d0
000045C8 E248                       		lsr.w	#1,d0
000045CA 0240 0380                  		andi.w	#$380,d0
000045CE 1229 0008                  		move.b	8(a1),d1
000045D2 0241 007F                  		andi.w	#$7F,d1
000045D6 D041                       		add.w	d1,d0
000045D8 45F8 A400                  		lea	($FFFFA400).w,a2
000045DC 1032 0000                  		move.b	(a2,d0.w),d0
000045E0 45FA 0000                  		lea	byte_3FCF(pc),a2
000045E4 7206                       		moveq	#6,d1
000045E6                            
000045E6                            loc_3F62:
000045E6 B022                       		cmp.b	-(a2),d0
000045E8 57C9 FFFC                  		dbeq	d1,loc_3F62
000045EC 6700                       		beq.s	LZSlide_Move
000045EE                            
000045EE                            loc_3F6A:
000045EE 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000045F2 6700                       		beq.s	locret_3F7A
000045F4 337C 0005 003E             		move.w	#5,$3E(a1)
000045FA 4238 F7CA                  		clr.b	($FFFFF7CA).w
000045FE                            
000045FE                            locret_3F7A:
000045FE 4E75                       		rts	
00004600                            ; ===========================================================================
00004600                            
00004600                            LZSlide_Move:				; XREF: LZWaterSlides
00004600 0C41 0003                  		cmpi.w	#3,d1
00004604 6400                       		bcc.s	loc_3F84
00004606 4E71                       		nop	
00004608                            
00004608                            loc_3F84:
00004608 08A9 0000 0022             		bclr	#0,$22(a1)
0000460E 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004612 1340 0014                  		move.b	d0,$14(a1)
00004616 6A00                       		bpl.s	loc_3F9A
00004618 08E9 0000 0022             		bset	#0,$22(a1)
0000461E                            
0000461E                            loc_3F9A:
0000461E 4229 0015                  		clr.b	$15(a1)
00004622 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004628 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
0000462E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004632 0200 001F                  		andi.b	#$1F,d0
00004636 6600                       		bne.s	locret_3FBE
00004638 303C 00D0                  		move.w	#$D0,d0
0000463C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play water sound
00004642                            
00004642                            locret_3FBE:
00004642 4E75                       		rts	
00004644                            ; End of function LZWaterSlides
00004644                            
00004644                            ; ===========================================================================
00004644 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004653 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004654                            		even
00004654                            
00004654                            ; ---------------------------------------------------------------------------
00004654                            ; Subroutine to	move Sonic in demo mode
00004654                            ; ---------------------------------------------------------------------------
00004654                            
00004654                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004654                            
00004654                            
00004654                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004654 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004658 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000465A 4E75                       		rts	
0000465C                            ; ===========================================================================
0000465C                            
0000465C                            ; This is an unused subroutine for recording a demo
0000465C                            
0000465C                            MoveDemo_Record:
0000465C 43F9 0008 0000             		lea	($80000).l,a1
00004662 3038 F790                  		move.w	($FFFFF790).w,d0
00004666 D2C0                       		adda.w	d0,a1
00004668 1038 F604                  		move.b	($FFFFF604).w,d0
0000466C B011                       		cmp.b	(a1),d0
0000466E 6600                       		bne.s	loc_3FFA
00004670 5229 0001                  		addq.b	#1,1(a1)
00004674 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000467A 6700                       		beq.s	loc_3FFA
0000467C 4E75                       		rts	
0000467E                            ; ===========================================================================
0000467E                            
0000467E                            loc_3FFA:				; XREF: MoveDemo_Record
0000467E 1340 0002                  		move.b	d0,2(a1)
00004682 137C 0000 0003             		move.b	#0,3(a1)
00004688 5478 F790                  		addq.w	#2,($FFFFF790).w
0000468C 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004692 4E75                       		rts	
00004694                            ; ===========================================================================
00004694                            
00004694                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004694 4A38 F604                  		tst.b	($FFFFF604).w
00004698 6A00                       		bpl.s	loc_4022
0000469A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000469E 6B00                       		bmi.s	loc_4022
000046A0 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000046A6                            
000046A6                            loc_4022:
000046A6 43F9 0000 0000             		lea	(Demo_Index).l,a1
000046AC 7000                       		moveq	#0,d0
000046AE 1038 FE10                  		move.b	($FFFFFE10).w,d0
000046B2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000046B8 6600                       		bne.s	loc_4038
000046BA 7006                       		moveq	#6,d0
000046BC                            
000046BC                            loc_4038:
000046BC E548                       		lsl.w	#2,d0
000046BE 2271 0000                  		movea.l	(a1,d0.w),a1
000046C2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000046C6 6A00                       		bpl.s	loc_4056
000046C8 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000046CE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000046D2 5340                       		subq.w	#1,d0
000046D4 E548                       		lsl.w	#2,d0
000046D6 2271 0000                  		movea.l	(a1,d0.w),a1
000046DA                            
000046DA                            loc_4056:
000046DA 3038 F790                  		move.w	($FFFFF790).w,d0
000046DE D2C0                       		adda.w	d0,a1
000046E0 1011                       		move.b	(a1),d0
000046E2 41F8 F604                  		lea	($FFFFF604).w,a0
000046E6 1200                       		move.b	d0,d1
000046E8 1410                       		move.b	(a0),d2
000046EA B500                       		eor.b	d2,d0
000046EC 10C1                       		move.b	d1,(a0)+
000046EE C001                       		and.b	d1,d0
000046F0 10C0                       		move.b	d0,(a0)+
000046F2 5338 F792                  		subq.b	#1,($FFFFF792).w
000046F6 6400                       		bcc.s	locret_407E
000046F8 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000046FE 5478 F790                  		addq.w	#2,($FFFFF790).w
00004702                            
00004702                            locret_407E:
00004702 4E75                       		rts	
00004704                            ; End of function MoveSonicInDemo
00004704                            
00004704                            ; ===========================================================================
00004704                            ; ---------------------------------------------------------------------------
00004704                            ; Demo sequence	pointers
00004704                            ; ---------------------------------------------------------------------------
00004704                            Demo_Index:
00004704                            	include "_inc\Demo pointers for intro.asm"
00004704                            ; ---------------------------------------------------------------------------
00004704                            ; Demo sequence	pointers
00004704                            ; ---------------------------------------------------------------------------
00004704 0000 0000                  	dc.l Demo_GHZ
00004708 0000 0000                  	dc.l Demo_GHZ
0000470C 0000 0000                  	dc.l Demo_MZ
00004710 0000 0000                  	dc.l Demo_MZ
00004714 0000 0000                  	dc.l Demo_SYZ
00004718 0000 0000                  	dc.l Demo_SYZ
0000471C 0000 0000                  	dc.l Demo_SS
00004720 0000 0000                  	dc.l Demo_SS
00004720 0000 0000                  	dc.l Demo_SS
00004724                            
00004724                            Demo_EndIndex:
00004724                            	include "_inc\Demo pointers for ending.asm"
00004724                            ; ---------------------------------------------------------------------------
00004724                            ; Demo (ending) sequence pointers
00004724                            ; ---------------------------------------------------------------------------
00004724 0000 0000                  	dc.l Demo_EndGHZ1
00004728 0000 0000                  	dc.l Demo_EndMZ
0000472C 0000 0000                  	dc.l Demo_EndSYZ
00004730 0000 0000                  	dc.l Demo_EndLZ
00004734 0000 0000                  	dc.l Demo_EndSLZ
00004738 0000 0000                  	dc.l Demo_EndSBZ1
0000473C 0000 0000                  	dc.l Demo_EndSBZ2
00004740 0000 0000                  	dc.l Demo_EndGHZ2
00004740 0000 0000                  	dc.l Demo_EndGHZ2
00004744                            
00004744 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004754 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004764 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004774                            		even
00004774                            
00004774                            ; ---------------------------------------------------------------------------
00004774                            ; Collision index loading subroutine
00004774                            ; ---------------------------------------------------------------------------
00004774                            
00004774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004774                            
00004774                            
00004774                            ColIndexLoad:				; XREF: Level
00004774 7000                       		moveq	#0,d0
00004776 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000477A E548                       		lsl.w	#2,d0
0000477C 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004782 4E75                       		rts	
00004784                            ; End of function ColIndexLoad
00004784                            
00004784                            ; ===========================================================================
00004784                            ; ---------------------------------------------------------------------------
00004784                            ; Collision index pointers
00004784                            ; ---------------------------------------------------------------------------
00004784                            ColPointers:
00004784                            	include "_inc\Collision index pointers.asm"
00004784                            ; ---------------------------------------------------------------------------
00004784                            ; Collision index pointers
00004784                            ; ---------------------------------------------------------------------------
00004784 0000 0000                  	dc.l Col_GHZ
00004788 0000 0000                  	dc.l Col_LZ
0000478C 0000 0000                  	dc.l Col_MZ
00004790 0000 0000                  	dc.l Col_SLZ
00004794 0000 0000                  	dc.l Col_SYZ
00004798 0000 0000                  	dc.l Col_SBZ
0000479C 0000 0000                  	dc.l Col_GHZ ; this is the ending just so it does not fuck up
000047A0 0000 0000                  	dc.l Col_BHZ
000047A0 0000 0000                  	dc.l Col_BHZ
000047A4                            
000047A4                            ; ---------------------------------------------------------------------------
000047A4                            ; Oscillating number subroutine
000047A4                            ; ---------------------------------------------------------------------------
000047A4                            
000047A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047A4                            
000047A4                            
000047A4                            OscillateNumInit:			; XREF: Level
000047A4 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000047A8 45F9 0000 0000             		lea	(Osc_Data).l,a2
000047AE 7220                       		moveq	#$20,d1
000047B0                            
000047B0                            Osc_Loop:
000047B0 32DA                       		move.w	(a2)+,(a1)+
000047B2 51C9 FFFC                  		dbf	d1,Osc_Loop
000047B6 4E75                       		rts	
000047B8                            ; End of function OscillateNumInit
000047B8                            
000047B8                            ; ===========================================================================
000047B8 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
000047BC 0000 0080                  		dc.w 0,	$80
000047C0 0000 0080                  		dc.w 0,	$80
000047C4 0000 0080                  		dc.w 0,	$80
000047C8 0000 0080                  		dc.w 0,	$80
000047CC 0000 0080                  		dc.w 0,	$80
000047D0 0000 0080                  		dc.w 0,	$80
000047D4 0000 0080                  		dc.w 0,	$80
000047D8 0000 0080                  		dc.w 0,	$80
000047DC 0000 50F0                  		dc.w 0,	$50F0
000047E0 011E 2080                  		dc.w $11E, $2080
000047E4 00B4 3080                  		dc.w $B4, $3080
000047E8 010E 5080                  		dc.w $10E, $5080
000047EC 01C2 7080                  		dc.w $1C2, $7080
000047F0 0276 0080                  		dc.w $276, $80
000047F4 0000 0080                  		dc.w 0,	$80
000047F8 0000                       		dc.w 0
000047FA                            		even
000047FA                            
000047FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047FA                            
000047FA                            
000047FA                            OscillateNumDo:				; XREF: Level
000047FA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004800 6400                       		bcc.s	locret_41C4
00004802 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004806 45F9 0000 0000             		lea	(Osc_Data2).l,a2
0000480C 3619                       		move.w	(a1)+,d3
0000480E 720F                       		moveq	#$F,d1
00004810                            
00004810                            loc_4184:
00004810 341A                       		move.w	(a2)+,d2
00004812 381A                       		move.w	(a2)+,d4
00004814 0303                       		btst	d1,d3
00004816 6600                       		bne.s	loc_41A4
00004818 3029 0002                  		move.w	2(a1),d0
0000481C D042                       		add.w	d2,d0
0000481E 3340 0002                  		move.w	d0,2(a1)
00004822 D151                       		add.w	d0,0(a1)
00004824 B811                       		cmp.b	0(a1),d4
00004826 6200                       		bhi.s	loc_41BA
00004828 03C3                       		bset	d1,d3
0000482A 6000                       		bra.s	loc_41BA
0000482C                            ; ===========================================================================
0000482C                            
0000482C                            loc_41A4:				; XREF: OscillateNumDo
0000482C 3029 0002                  		move.w	2(a1),d0
00004830 9042                       		sub.w	d2,d0
00004832 3340 0002                  		move.w	d0,2(a1)
00004836 D151                       		add.w	d0,0(a1)
00004838 B811                       		cmp.b	0(a1),d4
0000483A 6300                       		bls.s	loc_41BA
0000483C 0383                       		bclr	d1,d3
0000483E                            
0000483E                            loc_41BA:
0000483E 5849                       		addq.w	#4,a1
00004840 51C9 FFCE                  		dbf	d1,loc_4184
00004844 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004848                            
00004848                            locret_41C4:
00004848 4E75                       		rts	
0000484A                            ; End of function OscillateNumDo
0000484A                            
0000484A                            ; ===========================================================================
0000484A 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000484E 0002 0018                  		dc.w 2,	$18
00004852 0002 0020                  		dc.w 2,	$20
00004856 0002 0030                  		dc.w 2,	$30
0000485A 0004 0020                  		dc.w 4,	$20
0000485E 0008 0008                  		dc.w 8,	8
00004862 0008 0040                  		dc.w 8,	$40
00004866 0004 0040                  		dc.w 4,	$40
0000486A 0002 0050                  		dc.w 2,	$50
0000486E 0002 0050                  		dc.w 2,	$50
00004872 0002 0020                  		dc.w 2,	$20
00004876 0003 0030                  		dc.w 3,	$30
0000487A 0005 0050                  		dc.w 5,	$50
0000487E 0007 0070                  		dc.w 7,	$70
00004882 0002 0010                  		dc.w 2,	$10
00004886 0002 0010                  		dc.w 2,	$10
0000488A                            		even
0000488A                            
0000488A                            ; ---------------------------------------------------------------------------
0000488A                            ; Subroutine to	change object animation	variables (rings, giant	rings)
0000488A                            ; ---------------------------------------------------------------------------
0000488A                            
0000488A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000488A                            
0000488A                            
0000488A                            ChangeRingFrame:			; XREF: Level
0000488A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0000488E 6A00                       		bpl.s	loc_421C
00004890 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004896 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000489A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000048A0                            
000048A0                            loc_421C:
000048A0 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
000048A4 6A00                       		bpl.s	loc_4232
000048A6 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000048AC 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
000048B0 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
000048B6                            
000048B6                            loc_4232:
000048B6 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000048BA 6A00                       		bpl.s	loc_4250
000048BC 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
000048C2 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
000048C6 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
000048CC 6500                       		bcs.s	loc_4250
000048CE 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
000048D4                            
000048D4                            loc_4250:
000048D4 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000048D8 6700                       		beq.s	locret_4272
000048DA 7000                       		moveq	#0,d0
000048DC 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000048E0 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000048E4 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000048E8 EF58                       		rol.w	#7,d0
000048EA 0240 0003                  		andi.w	#3,d0
000048EE 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000048F2 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000048F6                            
000048F6                            locret_4272:
000048F6 4E75                       		rts	
000048F8                            ; End of function ChangeRingFrame
000048F8                            
000048F8                            ; ---------------------------------------------------------------------------
000048F8                            ; End-of-act signpost pattern loading subroutine
000048F8                            ; ---------------------------------------------------------------------------
000048F8                            
000048F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000048F8                            
000048F8                            
000048F8                            SignpostArtLoad:			; XREF: Level
000048F8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000048FC 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004900 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004906 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004908 3038 F700                  		move.w	($FFFFF700).w,d0
0000490C 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004910 0441 0100                  		subi.w	#$100,d1
00004914 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004916 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004918 4A38 FE1E                  		tst.b	($FFFFFE1E).w
0000491C 6700                       		beq.s	Signpost_Exit
0000491E B278 F728                  		cmp.w	($FFFFF728).w,d1
00004922 6700                       		beq.s	Signpost_Exit
00004924 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004928 7012                       		moveq	#$12,d0
0000492A 6000 CEBC                  		bra.w	LoadPLC2	; load signpost	patterns
0000492E                            ; ===========================================================================
0000492E                            
0000492E                            Signpost_Exit:
0000492E 4E75                       		rts	
00004930                            ; End of function SignpostArtLoad
00004930                            
00004930                            ; ===========================================================================
00004930                            Demo_GHZ:	incbin	demodata\i_ghz.bin
000049B0                            Demo_MZ:	incbin	demodata\i_mz.bin
00004AE0                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004B60                            Demo_SS:	incbin	demodata\i_ss.bin
00004C60                            ; ===========================================================================
00004C60                            
00004C60                            ; ---------------------------------------------------------------------------
00004C60                            ; Special Stage
00004C60                            ; ---------------------------------------------------------------------------
00004C60                            
00004C60                            SpecialStage:				; XREF: GameModeArray
00004C60 303C 00CA                  		move.w	#$CA,d0
00004C64 6100 C96C                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004C68 6100 D514                  		bsr.w	Pal_MakeFlash
00004C6C 46FC 2700                  		move	#$2700,sr
00004C70 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C76 3CBC 8B03                  		move.w	#$8B03,(a6)
00004C7A 3CBC 8004                  		move.w	#$8004,(a6)
00004C7E 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004C84 3CBC 9011                  		move.w	#$9011,(a6)
00004C88 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004C8C 0200 00BF                  		andi.b	#$BF,d0
00004C90 33C0 00C0 0004             		move.w	d0,($C00004).l
00004C96 6100 C862                  		bsr.w	ClearScreen
00004C9A 46FC 2300                  		move	#$2300,sr
00004C9E 4BF9 00C0 0004             		lea	($C00004).l,a5
00004CA4 3ABC 8F01                  		move.w	#$8F01,(a5)
00004CA8 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004CAE 3ABC 9780                  		move.w	#$9780,(a5)
00004CB2 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004CB8 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004CC0                            
00004CC0                            loc_463C:
00004CC0 3215                       		move.w	(a5),d1
00004CC2 0801 0001                  		btst	#1,d1
00004CC6 66F8                       		bne.s	loc_463C
00004CC8 3ABC 8F02                  		move.w	#$8F02,(a5)
00004CCC 6100 0000                  		bsr.w	SS_BGLoad
00004CD0 7014                       		moveq	#$14,d0
00004CD2 6100 CC4E                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004CD6 43F8 D000                  		lea	($FFFFD000).w,a1
00004CDA 7000                       		moveq	#0,d0
00004CDC 323C 07FF                  		move.w	#$7FF,d1
00004CE0                            
00004CE0                            SS_ClrObjRam:
00004CE0 22C0                       		move.l	d0,(a1)+
00004CE2 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004CE6                            
00004CE6 43F8 F700                  		lea	($FFFFF700).w,a1
00004CEA 7000                       		moveq	#0,d0
00004CEC 323C 003F                  		move.w	#$3F,d1
00004CF0                            
00004CF0                            SS_ClrRam:
00004CF0 22C0                       		move.l	d0,(a1)+
00004CF2 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004CF6                            
00004CF6 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004CFA 7000                       		moveq	#0,d0
00004CFC 323C 0027                  		move.w	#$27,d1
00004D00                            
00004D00                            SS_ClrRam2:
00004D00 22C0                       		move.l	d0,(a1)+
00004D02 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004D06                            
00004D06 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004D0A 7000                       		moveq	#0,d0
00004D0C 323C 007F                  		move.w	#$7F,d1
00004D10                            
00004D10                            SS_ClrNemRam:
00004D10 22C0                       		move.l	d0,(a1)+
00004D12 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004D16                            
00004D16 4238 F64E                  		clr.b	($FFFFF64E).w
00004D1A 4278 FE02                  		clr.w	($FFFFFE02).w
00004D1E 700A                       		moveq	#$A,d0
00004D20 6100 D5DC                  		bsr.w	PalLoad1	; load special stage pallet
00004D24 4EB9 0000 0000             		jsr	SS_Load
00004D2A 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004D32 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004D3A 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004D40 6100 0000                  		bsr.w	PalCycle_SS
00004D44 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004D48 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
00004D4C 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00004D52 303C 0089                  		move.w	#$89,d0
00004D56 6100 C874                  		bsr.w	PlaySound	; play special stage BG	music
00004D5A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004D60 43F9 0000 4704             		lea	(Demo_Index).l,a1
00004D66 7006                       		moveq	#6,d0
00004D68 E548                       		lsl.w	#2,d0
00004D6A 2271 0000                  		movea.l	(a1,d0.w),a1
00004D6E 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004D74 5338 F792                  		subq.b	#1,($FFFFF792).w
00004D78 4278 FE20                  		clr.w	($FFFFFE20).w
00004D7C 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004D80 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004D86 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004D8C                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004D8C                            ;		beq.s	SS_NoDebug	; if not, branch
00004D8C                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
00004D8C                            ;		beq.s	SS_NoDebug	; if not, branch
00004D8C                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004D8C                            
00004D8C                            SS_NoDebug:
00004D8C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004D90 0000 0040                  		ori.b	#$40,d0
00004D94 33C0 00C0 0004             		move.w	d0,($C00004).l
00004D9A 6100 D336                  		bsr.w	Pal_MakeWhite
00004D9E                            
00004D9E                            ; ---------------------------------------------------------------------------
00004D9E                            ; Main Special Stage loop
00004D9E                            ; ---------------------------------------------------------------------------
00004D9E                            
00004D9E                            SS_MainLoop:
00004D9E 6100 C83E                  		bsr.w	PauseGame
00004DA2 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004DA8 6100 DF90                  		bsr.w	DelayProgram
00004DAC 4A78 F784                          tst.w   ($FFFFF784).w
00004DB0 6700                               beq.s   SS_NotReversed
00004DB2 5378 F784                          subi.w  #1,($FFFFF784).w
00004DB6                            
00004DB6                            SS_NotReversed:
00004DB6 6100 F89C                  		bsr.w	MoveSonicInDemo
00004DBA 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004DC0 4EB9 0000 0000             		jsr	ObjectsLoad
00004DC6 4EB9 0000 0000             		jsr	BuildSprites
00004DCC 4EB9 0000 0000             		jsr	SS_ShowLayout
00004DD2 6100 0000                  		bsr.w	SS_BGAnimate
00004DD6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DDA 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004DDC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004DE0 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004DE4                            
00004DE4                            SS_ChkEnd:
00004DE4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004DEA 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
00004DEE                            
00004DEE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DF2 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004DF6 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004DFC 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004E02 6500                       		bcs.s	SS_End		; if not, branch
00004E04 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004E08                            
00004E08                            SS_End:
00004E08 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004E0E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004E14 4278 F794                  		clr.w	($FFFFF794).w
00004E18                            
00004E18                            SS_EndLoop:
00004E18 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004E1E 6100 DF1A                  		bsr.w	DelayProgram
00004E22 6100 F830                  		bsr.w	MoveSonicInDemo
00004E26 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004E2C 4EB9 0000 0000             		jsr	ObjectsLoad
00004E32 4EB9 0000 0000             		jsr	BuildSprites
00004E38 4EB9 0000 0000             		jsr	SS_ShowLayout
00004E3E 6100 0000                  		bsr.w	SS_BGAnimate
00004E42 5378 F794                  		subq.w	#1,($FFFFF794).w
00004E46 6A00                       		bpl.s	loc_47D4
00004E48 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004E4E 6100 D34E                  		bsr.w	Pal_ToWhite
00004E52                            
00004E52                            loc_47D4:
00004E52 4A78 F614                  		tst.w	($FFFFF614).w
00004E56 66C0                       		bne.s	SS_EndLoop
00004E58                            
00004E58 46FC 2700                  		move	#$2700,sr
00004E5C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E62 3CBC 8230                  		move.w	#$8230,(a6)
00004E66 3CBC 8407                  		move.w	#$8407,(a6)
00004E6A 3CBC 9001                  		move.w	#$9001,(a6)
00004E6E 6100 C68A                  		bsr.w	ClearScreen
00004E72 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004E7C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004E82 6100 C7F2                  		bsr.w	NemDec
00004E86 4EB9 0000 0000             		jsr	Hud_Base
00004E8C 46FC 2300                  		move	#$2300,sr
00004E90 7011                       		moveq	#$11,d0
00004E92 6100 D486                  		bsr.w	PalLoad2	; load results screen pallet
00004E96 7000                       		moveq	#0,d0
00004E98 6100 C94E                  		bsr.w	LoadPLC2
00004E9C 701B                       		moveq	#$1B,d0
00004E9E 6100 C916                  		bsr.w	LoadPLC		; load results screen patterns
00004EA2 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004EA8 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004EAE 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004EB2 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004EB6 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004EBA 303C 008E                  		move.w	#$8E,d0
00004EBE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004EC4 43F8 D000                  		lea	($FFFFD000).w,a1
00004EC8 7000                       		moveq	#0,d0
00004ECA 323C 07FF                  		move.w	#$7FF,d1
00004ECE                            
00004ECE                            SS_EndClrObjRam:
00004ECE 22C0                       		move.l	d0,(a1)+
00004ED0 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004ED4                            
00004ED4 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004EDA                            
00004EDA                            SS_NormalExit:
00004EDA 6100 C702                  		bsr.w	PauseGame
00004EDE 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004EE4 6100 DE54                  		bsr.w	DelayProgram
00004EE8 4EB9 0000 0000             		jsr	ObjectsLoad
00004EEE 4EB9 0000 0000             		jsr	BuildSprites
00004EF4 6100 C92C                  		bsr.w	RunPLC_RAM
00004EF8 4A78 FE02                  		tst.w	($FFFFFE02).w
00004EFC 67DC                       		beq.s	SS_NormalExit
00004EFE 4AB8 F680                  		tst.l	($FFFFF680).w
00004F02 66D6                       		bne.s	SS_NormalExit
00004F04 303C 00CA                  		move.w	#$CA,d0
00004F08 6100 C6C8                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004F0C 6100 D270                  		bsr.w	Pal_MakeFlash
00004F10 4E75                       		rts	
00004F12                            ; ===========================================================================
00004F12                            
00004F12                            SS_ToSegaScreen:
00004F12 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004F18 4E75                       		rts
00004F1A                            
00004F1A                            ; ---------------------------------------------------------------------------
00004F1A                            ; Special stage	background loading subroutine
00004F1A                            ; ---------------------------------------------------------------------------
00004F1A                            
00004F1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F1A                            
00004F1A                            
00004F1A                            SS_BGLoad:				; XREF: SpecialStage
00004F1A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F20 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004F26 303C 4051                  		move.w	#$4051,d0
00004F2A 6100 CA28                  		bsr.w	EniDec
00004F2E 263C 5000 0001             		move.l	#$50000001,d3
00004F34 45F9 00FF 0080             		lea	($FF0080).l,a2
00004F3A 7E06                       		moveq	#6,d7
00004F3C                            
00004F3C                            loc_48BE:
00004F3C 2003                       		move.l	d3,d0
00004F3E 7C03                       		moveq	#3,d6
00004F40 7800                       		moveq	#0,d4
00004F42 0C47 0003                  		cmpi.w	#3,d7
00004F46 6400                       		bcc.s	loc_48CC
00004F48 7801                       		moveq	#1,d4
00004F4A                            
00004F4A                            loc_48CC:
00004F4A 7A07                       		moveq	#7,d5
00004F4C                            
00004F4C                            loc_48CE:
00004F4C 224A                       		movea.l	a2,a1
00004F4E 0A04 0001                  		eori.b	#1,d4
00004F52 6600                       		bne.s	loc_48E2
00004F54 0C47 0006                  		cmpi.w	#6,d7
00004F58 6600                       		bne.s	loc_48F2
00004F5A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F60                            
00004F60                            loc_48E2:
00004F60 48E7 F800                  		movem.l	d0-d4,-(sp)
00004F64 7207                       		moveq	#7,d1
00004F66 7407                       		moveq	#7,d2
00004F68 6100 C6EC                  		bsr.w	ShowVDPGraphics
00004F6C 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004F70                            
00004F70                            loc_48F2:
00004F70 0680 0010 0000             		addi.l	#$100000,d0
00004F76 51CD FFD4                  		dbf	d5,loc_48CE
00004F7A 0680 0380 0000             		addi.l	#$3800000,d0
00004F80 0A04 0001                  		eori.b	#1,d4
00004F84 51CE FFC4                  		dbf	d6,loc_48CC
00004F88 0683 1000 0000             		addi.l	#$10000000,d3
00004F8E 6A00                       		bpl.s	loc_491C
00004F90 4843                       		swap	d3
00004F92 0683 0000 C000             		addi.l	#$C000,d3
00004F98 4843                       		swap	d3
00004F9A                            
00004F9A                            loc_491C:
00004F9A D4FC 0080                  		adda.w	#$80,a2
00004F9E 51CF FF9C                  		dbf	d7,loc_48BE
00004FA2 43F9 00FF 0000             		lea	($FF0000).l,a1
00004FA8 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004FAE 303C 4000                  		move.w	#$4000,d0
00004FB2 6100 C9A0                  		bsr.w	EniDec
00004FB6 43F9 00FF 0000             		lea	($FF0000).l,a1
00004FBC 203C 4000 0003             		move.l	#$40000003,d0
00004FC2 723F                       		moveq	#$3F,d1
00004FC4 741F                       		moveq	#$1F,d2
00004FC6 6100 C68E                  		bsr.w	ShowVDPGraphics
00004FCA 43F9 00FF 0000             		lea	($FF0000).l,a1
00004FD0 203C 5000 0003             		move.l	#$50000003,d0
00004FD6 723F                       		moveq	#$3F,d1
00004FD8 743F                       		moveq	#$3F,d2
00004FDA 6100 C67A                  		bsr.w	ShowVDPGraphics
00004FDE 4E75                       		rts	
00004FE0                            ; End of function SS_BGLoad
00004FE0                            
00004FE0                            ; ---------------------------------------------------------------------------
00004FE0                            ; Pallet cycling routine - special stage
00004FE0                            ; ---------------------------------------------------------------------------
00004FE0                            
00004FE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FE0                            
00004FE0                            
00004FE0                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004FE0 4A78 F63A                  		tst.w	($FFFFF63A).w
00004FE4 6600                       		bne.s	locret_49E6
00004FE6 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004FEA 6A00                       		bpl.s	locret_49E6
00004FEC 4DF9 00C0 0004             		lea	($C00004).l,a6
00004FF2 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004FF6 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004FFA 0240 001F                  		andi.w	#$1F,d0
00004FFE E548                       		lsl.w	#2,d0
00005000 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005006 D0C0                       		adda.w	d0,a0
00005008 1018                       		move.b	(a0)+,d0
0000500A 6A00                       		bpl.s	loc_4992
0000500C 303C 01FF                  		move.w	#$1FF,d0
00005010                            
00005010                            loc_4992:
00005010 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00005014 7000                       		moveq	#0,d0
00005016 1018                       		move.b	(a0)+,d0
00005018 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
0000501C 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005022 43F1 0000                  		lea	(a1,d0.w),a1
00005026 303C 8200                  		move.w	#-$7E00,d0
0000502A 1019                       		move.b	(a1)+,d0
0000502C 3C80                       		move.w	d0,(a6)
0000502E 11D1 F616                  		move.b	(a1),($FFFFF616).w
00005032 303C 8400                  		move.w	#-$7C00,d0
00005036 1018                       		move.b	(a0)+,d0
00005038 3C80                       		move.w	d0,(a6)
0000503A 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00005044 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
0000504C 7000                       		moveq	#0,d0
0000504E 1018                       		move.b	(a0)+,d0
00005050 6B00                       		bmi.s	loc_49E8
00005052 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005058 D2C0                       		adda.w	d0,a1
0000505A 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
0000505E 24D9                       		move.l	(a1)+,(a2)+
00005060 24D9                       		move.l	(a1)+,(a2)+
00005062 24D9                       		move.l	(a1)+,(a2)+
00005064                            
00005064                            locret_49E6:
00005064 4E75                       		rts	
00005066                            ; ===========================================================================
00005066                            
00005066                            loc_49E8:				; XREF: PalCycle_SS
00005066 3238 F79E                  		move.w	($FFFFF79E).w,d1
0000506A 0C40 008A                  		cmpi.w	#$8A,d0
0000506E 6500                       		bcs.s	loc_49F4
00005070 5241                       		addq.w	#1,d1
00005072                            
00005072                            loc_49F4:
00005072 C2FC 002A                  		mulu.w	#$2A,d1
00005076 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
0000507C D2C1                       		adda.w	d1,a1
0000507E 0240 007F                  		andi.w	#$7F,d0
00005082 0880 0000                  		bclr	#0,d0
00005086 6700                       		beq.s	loc_4A18
00005088 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
0000508C 24D1                       		move.l	(a1),(a2)+
0000508E 24E9 0004                  		move.l	4(a1),(a2)+
00005092 24E9 0008                  		move.l	8(a1),(a2)+
00005096                            
00005096                            loc_4A18:
00005096 D2FC 000C                  		adda.w	#$C,a1
0000509A 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
0000509E 0C40 000A                  		cmpi.w	#$A,d0
000050A2 6500                       		bcs.s	loc_4A2E
000050A4 0440 000A                  		subi.w	#$A,d0
000050A8 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
000050AC                            
000050AC                            loc_4A2E:
000050AC 3200                       		move.w	d0,d1
000050AE D040                       		add.w	d0,d0
000050B0 D041                       		add.w	d1,d0
000050B2 D2C0                       		adda.w	d0,a1
000050B4 24D9                       		move.l	(a1)+,(a2)+
000050B6 34D9                       		move.w	(a1)+,(a2)+
000050B8 4E75                       		rts	
000050BA                            ; End of function PalCycle_SS
000050BA                            
000050BA                            ; ===========================================================================
000050BA 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
000050CA                            					; XREF: PalCycle_SS
000050CA 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000050DA 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000050EA FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
000050FA 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
0000510A 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
0000511A 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
0000512A FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
0000513A                            		even
0000513A 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005148                            					; XREF: PalCycle_SS
00005148                            		even
00005148                            
00005148                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00005190                            		even
00005190                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005262                            		even
00005262                            
00005262                            ; ---------------------------------------------------------------------------
00005262                            ; Subroutine to	make the special stage background animated
00005262                            ; ---------------------------------------------------------------------------
00005262                            
00005262                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005262                            
00005262                            
00005262                            SS_BGAnimate:				; XREF: SpecialStage
00005262 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005266 6600                       		bne.s	loc_4BF6
00005268 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000526E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005274                            
00005274                            loc_4BF6:
00005274 0C40 0008                  		cmpi.w	#8,d0
00005278 6400                       		bcc.s	loc_4C4E
0000527A 0C40 0006                  		cmpi.w	#6,d0
0000527E 6600                       		bne.s	loc_4C10
00005280 5278 F718                  		addq.w	#1,($FFFFF718).w
00005284 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005288 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000528E                            
0000528E                            loc_4C10:
0000528E 7000                       		moveq	#0,d0
00005290 3038 F708                  		move.w	($FFFFF708).w,d0
00005294 4440                       		neg.w	d0
00005296 4840                       		swap	d0
00005298 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000529E 47F8 AA00                  		lea	($FFFFAA00).w,a3
000052A2 7609                       		moveq	#9,d3
000052A4                            
000052A4                            loc_4C26:
000052A4 302B 0002                  		move.w	2(a3),d0
000052A8 6100 DAC2                  		bsr.w	CalcSine
000052AC 7400                       		moveq	#0,d2
000052AE 1419                       		move.b	(a1)+,d2
000052B0 C1C2                       		muls.w	d2,d0
000052B2 E080                       		asr.l	#8,d0
000052B4 36C0                       		move.w	d0,(a3)+
000052B6 1419                       		move.b	(a1)+,d2
000052B8 4882                       		ext.w	d2
000052BA D55B                       		add.w	d2,(a3)+
000052BC 51CB FFE6                  		dbf	d3,loc_4C26
000052C0 47F8 AA00                  		lea	($FFFFAA00).w,a3
000052C4 45F9 0000 0000             		lea	(byte_4CB8).l,a2
000052CA 6000                       		bra.s	loc_4C7E
000052CC                            ; ===========================================================================
000052CC                            
000052CC                            loc_4C4E:				; XREF: SS_BGAnimate
000052CC 0C40 000C                  		cmpi.w	#$C,d0
000052D0 6600                       		bne.s	loc_4C74
000052D2 5378 F718                  		subq.w	#1,($FFFFF718).w
000052D6 47F8 AB00                  		lea	($FFFFAB00).w,a3
000052DA 243C 0001 8000             		move.l	#$18000,d2
000052E0 7206                       		moveq	#6,d1
000052E2                            
000052E2                            loc_4C64:
000052E2 2013                       		move.l	(a3),d0
000052E4 9082                       		sub.l	d2,d0
000052E6 26C0                       		move.l	d0,(a3)+
000052E8 0482 0000 2000             		subi.l	#$2000,d2
000052EE 51C9 FFF2                  		dbf	d1,loc_4C64
000052F2                            
000052F2                            loc_4C74:
000052F2 47F8 AB00                  		lea	($FFFFAB00).w,a3
000052F6 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000052FC                            
000052FC                            loc_4C7E:
000052FC 43F8 CC00                  		lea	($FFFFCC00).w,a1
00005300 3038 F718                  		move.w	($FFFFF718).w,d0
00005304 4440                       		neg.w	d0
00005306 4840                       		swap	d0
00005308 7600                       		moveq	#0,d3
0000530A 161A                       		move.b	(a2)+,d3
0000530C 3438 F70C                  		move.w	($FFFFF70C).w,d2
00005310 4442                       		neg.w	d2
00005312 0242 00FF                  		andi.w	#$FF,d2
00005316 E54A                       		lsl.w	#2,d2
00005318                            
00005318                            loc_4C9A:
00005318 301B                       		move.w	(a3)+,d0
0000531A 544B                       		addq.w	#2,a3
0000531C 7200                       		moveq	#0,d1
0000531E 121A                       		move.b	(a2)+,d1
00005320 5341                       		subq.w	#1,d1
00005322                            
00005322                            loc_4CA4:
00005322 2380 2000                  		move.l	d0,(a1,d2.w)
00005326 5842                       		addq.w	#4,d2
00005328 0242 03FC                  		andi.w	#$3FC,d2
0000532C 51C9 FFF4                  		dbf	d1,loc_4CA4
00005330 51CB FFE6                  		dbf	d3,loc_4C9A
00005334 4E75                       		rts	
00005336                            ; End of function SS_BGAnimate
00005336                            
00005336                            ; ===========================================================================
00005336 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005342                            		even
00005342 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
0000534A                            		even
0000534A 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
0000535E                            		even
0000535E                            					; XREF: SS_BGAnimate
0000535E                            ; ===========================================================================
0000535E                            
0000535E                            ; ---------------------------------------------------------------------------
0000535E                            ; Continue screen
0000535E                            ; ---------------------------------------------------------------------------
0000535E                            
0000535E                            ContinueScreen:				; XREF: GameModeArray
0000535E 6100 CCF4                  		bsr.w	Pal_FadeFrom
00005362 46FC 2700                  		move	#$2700,sr
00005366 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000536A 0200 00BF                  		andi.b	#$BF,d0
0000536E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005374 4DF9 00C0 0004             		lea	($C00004).l,a6
0000537A 3CBC 8004                  		move.w	#$8004,(a6)
0000537E 3CBC 8700                  		move.w	#$8700,(a6)
00005382 6100 C176                  		bsr.w	ClearScreen
00005386 43F8 D000                  		lea	($FFFFD000).w,a1
0000538A 7000                       		moveq	#0,d0
0000538C 323C 07FF                  		move.w	#$7FF,d1
00005390                            
00005390                            Cont_ClrObjRam:
00005390 22C0                       		move.l	d0,(a1)+
00005392 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005396                            
00005396 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000053A0 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000053A6 6100 C2CE                  		bsr.w	NemDec
000053AA 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
000053B4 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
000053BA 6100 C2BA                  		bsr.w	NemDec
000053BE 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
000053C8 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
000053CE 6100 C2A6                  		bsr.w	NemDec
000053D2 720A                       		moveq	#10,d1
000053D4 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000053DA 7012                       		moveq	#$12,d0
000053DC 6100 CF20                  		bsr.w	PalLoad1	; load continue	screen pallet
000053E0 103C 0090                  		move.b	#$90,d0
000053E4 6100 C1E6                  		bsr.w	PlaySound	; play continue	music
000053E8 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000053EE 42B8 F700                  		clr.l	($FFFFF700).w
000053F2 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000053FA 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00005400 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005406 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
0000540C 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00005412 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005418 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
0000541E 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005424 4EB9 0000 0000             		jsr	ObjectsLoad
0000542A 4EB9 0000 0000             		jsr	BuildSprites
00005430 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005434 0000 0040                  		ori.b	#$40,d0
00005438 33C0 00C0 0004             		move.w	d0,($C00004).l
0000543E 6100 CB6A                  		bsr.w	Pal_FadeTo
00005442                            
00005442                            ; ---------------------------------------------------------------------------
00005442                            ; Continue screen main loop
00005442                            ; ---------------------------------------------------------------------------
00005442                            
00005442                            Cont_MainLoop:
00005442 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005448 6100 D8F0                  		bsr.w	DelayProgram
0000544C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005452 6400                       		bcc.s	loc_4DF2
00005454 46FC 2700                  		move	#$2700,sr
00005458 3238 F614                  		move.w	($FFFFF614).w,d1
0000545C 82FC 003C                  		divu.w	#$3C,d1
00005460 0281 0000 000F             		andi.l	#$F,d1
00005466 4EB9 0000 0000             		jsr	ContScrCounter
0000546C 46FC 2300                  		move	#$2300,sr
00005470                            
00005470                            loc_4DF2:
00005470 4EB9 0000 0000             		jsr	ObjectsLoad
00005476 4EB9 0000 0000             		jsr	BuildSprites
0000547C 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005482 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005484 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000548A 64B6                       		bcc.s	Cont_MainLoop
0000548C 4A78 F614                  		tst.w	($FFFFF614).w
00005490 6600 FFB0                  		bne.w	Cont_MainLoop
00005494 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000549A 4E75                       		rts	
0000549C                            ; ===========================================================================
0000549C                            
0000549C                            Cont_GotoLevel:				; XREF: Cont_MainLoop
0000549C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000054A2 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000054A8 7000                       		moveq	#0,d0
000054AA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000054AE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000054B2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000054B6 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
000054BA 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
000054BE 4E75                       		rts	
000054C0                            ; ===========================================================================
000054C0                            
000054C0                            ; ---------------------------------------------------------------------------
000054C0                            ; Object 80 - Continue screen elements
000054C0                            ; ---------------------------------------------------------------------------
000054C0                            
000054C0                            Obj80:					; XREF: Obj_Index
000054C0 7000                       		moveq	#0,d0
000054C2 1028 0024                  		move.b	$24(a0),d0
000054C6 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
000054CA 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
000054CE                            ; ===========================================================================
000054CE 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
000054D0 0000                       		dc.w Obj80_Display-Obj80_Index
000054D2 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000054D4 0000                       		dc.w Obj80_ChkType-Obj80_Index
000054D6                            ; ===========================================================================
000054D6                            
000054D6                            Obj80_Main:				; XREF: Obj80_Index
000054D6 5428 0024                  		addq.b	#2,$24(a0)
000054DA 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000054E2 317C 8500 0002             		move.w	#$8500,2(a0)
000054E8 117C 0000 0001             		move.b	#0,1(a0)
000054EE 117C 003C 0019             		move.b	#$3C,$19(a0)
000054F4 317C 0120 0008             		move.w	#$120,8(a0)
000054FA 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005500 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005506                            
00005506                            Obj80_Display:				; XREF: Obj80_Index
00005506 4EF9 0000 0000             		jmp	DisplaySprite
0000550C                            ; ===========================================================================
0000550C                            Obj80_MiniSonicPos:
0000550C 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
0000551E 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000552A                            ; ===========================================================================
0000552A                            
0000552A                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000552A 2248                       		movea.l	a0,a1
0000552C 45F9 0000 550C             		lea	(Obj80_MiniSonicPos).l,a2
00005532 7200                       		moveq	#0,d1
00005534 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005538 5501                       		subq.b	#2,d1
0000553A 6400                       		bcc.s	loc_4EC4
0000553C 4EF9 0000 0000             		jmp	DeleteObject
00005542                            ; ===========================================================================
00005542                            
00005542                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005542 7601                       		moveq	#1,d3
00005544 0C01 000E                  		cmpi.b	#$E,d1
00005548 6500                       		bcs.s	loc_4ED0
0000554A 7600                       		moveq	#0,d3
0000554C 720E                       		moveq	#$E,d1
0000554E                            
0000554E                            loc_4ED0:
0000554E 1401                       		move.b	d1,d2
00005550 0202 0001                  		andi.b	#1,d2
00005554                            
00005554                            Obj80_MiniSonLoop:
00005554 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005558 335A 0008                  		move.w	(a2)+,8(a1)
0000555C 4A02                       		tst.b	d2
0000555E 6700                       		beq.s	loc_4EEA
00005560 0469 000A 0008             		subi.w	#$A,8(a1)
00005566                            
00005566                            loc_4EEA:
00005566 337C 00D0 000A             		move.w	#$D0,$A(a1)
0000556C 137C 0006 001A             		move.b	#6,$1A(a1)
00005572 137C 0006 0024             		move.b	#6,$24(a1)
00005578 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005580 337C 8551 0002             		move.w	#$8551,2(a1)
00005586 137C 0000 0001             		move.b	#0,1(a1)
0000558C 43E9 0040                  		lea	$40(a1),a1
00005590 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005594 43E9 FFC0                  		lea	-$40(a1),a1
00005598 1343 0028                  		move.b	d3,$28(a1)
0000559C                            
0000559C                            Obj80_ChkType:				; XREF: Obj80_Index
0000559C 4A28 0028                  		tst.b	$28(a0)
000055A0 6700                       		beq.s	loc_4F40
000055A2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000055A8 6500                       		bcs.s	loc_4F40
000055AA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000055AE 0200 0001                  		andi.b	#1,d0
000055B2 6600                       		bne.s	loc_4F40
000055B4 4A78 D010                  		tst.w	($FFFFD010).w
000055B8 6600                       		bne.s	Obj80_Delete
000055BA 4E75                       		rts	
000055BC                            ; ===========================================================================
000055BC                            
000055BC                            loc_4F40:				; XREF: Obj80_ChkType
000055BC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000055C0 0200 000F                  		andi.b	#$F,d0
000055C4 6600                       		bne.s	Obj80_Display2
000055C6 0868 0000 001A             		bchg	#0,$1A(a0)
000055CC                            
000055CC                            Obj80_Display2:
000055CC 4EF9 0000 0000             		jmp	DisplaySprite
000055D2                            ; ===========================================================================
000055D2                            
000055D2                            Obj80_Delete:				; XREF: Obj80_ChkType
000055D2 4EF9 0000 0000             		jmp	DeleteObject
000055D8                            ; ===========================================================================
000055D8                            
000055D8                            ; ---------------------------------------------------------------------------
000055D8                            ; Object 81 - Sonic on the continue screen
000055D8                            ; ---------------------------------------------------------------------------
000055D8                            
000055D8                            Obj81:					; XREF: Obj_Index
000055D8 7000                       		moveq	#0,d0
000055DA 1028 0024                  		move.b	$24(a0),d0
000055DE 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000055E2 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000055E6 4EF9 0000 0000             		jmp	DisplaySprite
000055EC                            ; ===========================================================================
000055EC 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000055EE 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000055F0 0000                       		dc.w Obj81_Animate-Obj81_Index
000055F2 0000                       		dc.w Obj81_Run-Obj81_Index
000055F4                            ; ===========================================================================
000055F4                            
000055F4                            Obj81_Main:				; XREF: Obj81_Index
000055F4 5428 0024                  		addq.b	#2,$24(a0)
000055F8 317C 00A0 0008             		move.w	#$A0,8(a0)
000055FE 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005604 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000560C 317C 0780 0002             		move.w	#$780,2(a0)
00005612 117C 0004 0001             		move.b	#4,1(a0)
00005618 117C 0002 0018             		move.b	#2,$18(a0)
0000561E 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005624 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
0000562A                            
0000562A                            Obj81_ChkLand:				; XREF: Obj81_Index
0000562A 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005630 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005632 5428 0024                  		addq.b	#2,$24(a0)
00005636 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
0000563A 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005642 317C 8500 0002             		move.w	#$8500,2(a0)
00005648 117C 0000 001C             		move.b	#0,$1C(a0)
0000564E 6000                       		bra.s	Obj81_Animate
00005650                            ; ===========================================================================
00005650                            
00005650                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005650 4EB9 0000 0000             		jsr	SpeedToPos
00005656 4EB9 0000 0000             		jsr	Sonic_Animate
0000565C 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005662                            ; ===========================================================================
00005662                            
00005662                            Obj81_Animate:				; XREF: Obj81_Index
00005662 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005666 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005668 43F9 0000 0000             		lea	(Ani_obj81).l,a1
0000566E 4EF9 0000 0000             		jmp	AnimateSprite
00005674                            ; ===========================================================================
00005674                            
00005674                            Obj81_GetUp:				; XREF: Obj81_Animate
00005674 5428 0024                  		addq.b	#2,$24(a0)
00005678 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005680 317C 0780 0002             		move.w	#$780,2(a0)
00005686 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
0000568C 4268 0014                  		clr.w	$14(a0)
00005690 5168 000C                  		subq.w	#8,$C(a0)
00005694 103C 00E0                  		move.b	#$E0,d0
00005698 6100 BF38                  		bsr.w	PlaySound_Special ; fade out music
0000569C                            
0000569C                            Obj81_Run:				; XREF: Obj81_Index
0000569C 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
000056A2 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000056A4 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
000056AA 6000                       		bra.s	Obj81_ShowRun
000056AC                            ; ===========================================================================
000056AC                            
000056AC                            Obj81_AddSpeed:				; XREF: Obj81_Run
000056AC 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
000056B2                            
000056B2                            Obj81_ShowRun:				; XREF: Obj81_Run
000056B2 4EB9 0000 0000             		jsr	SpeedToPos
000056B8 4EB9 0000 0000             		jsr	Sonic_Animate
000056BE 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000056C4                            ; ===========================================================================
000056C4                            Ani_obj81:
000056C4                            	include "_anim\obj81.asm"
000056C4                            ; ---------------------------------------------------------------------------
000056C4                            ; Animation script - Sonic on the continue screen
000056C4                            ; ---------------------------------------------------------------------------
000056C4 0000                       		dc.w byte_504A-Ani_obj81
000056C6 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
000056D2 00                         		even
000056D2 00                         		even
000056D2                            
000056D2                            ; ---------------------------------------------------------------------------
000056D2                            ; Sprite mappings - Continue screen
000056D2                            ; ---------------------------------------------------------------------------
000056D2                            Map_obj80:
000056D2                            	include "_maps\obj80.asm"
000056D2                            ; ---------------------------------------------------------------------------
000056D2                            ; Sprite mappings - Continue screen
000056D2                            ; ---------------------------------------------------------------------------
000056D2 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
000056D6 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000056DA 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000056DE 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000056E2 0B                         byte_5066:	dc.b $B
000056E3 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000056E8 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000056ED F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000056F2 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000056F7 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000056FC F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005701 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005706 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
0000570B 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005710 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005715 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
0000571A 03                         byte_509E:	dc.b 3
0000571B 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005720 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005725 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000572A 03                         byte_50AE:	dc.b 3
0000572B 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005730 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005735 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000573A 03                         byte_50BE:	dc.b 3
0000573B 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005740 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005745 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000574A 02                         byte_50CE:	dc.b 2
0000574B 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005750 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005755 01                         byte_50D9:	dc.b 1
00005756 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
0000575B 01                         byte_50DF:	dc.b 1
0000575C 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005762 00                         		even
00005762 00                         		even
00005762                            
00005762                            ; ===========================================================================
00005762                            ; ---------------------------------------------------------------------------
00005762                            ; Ending sequence in Green Hill	Zone
00005762                            ; ---------------------------------------------------------------------------
00005762                            
00005762                            EndingSequence:				; XREF: GameModeArray
00005762 103C 00E4                  		move.b	#$E4,d0
00005766 6100 BE6A                  		bsr.w	PlaySound_Special ; stop music
0000576A 6100 C8E8                  		bsr.w	Pal_FadeFrom
0000576E 43F8 D000                  		lea	($FFFFD000).w,a1
00005772 7000                       		moveq	#0,d0
00005774 323C 07FF                  		move.w	#$7FF,d1
00005778                            
00005778                            End_ClrObjRam:
00005778 22C0                       		move.l	d0,(a1)+
0000577A 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000577E                            
0000577E 43F8 F628                  		lea	($FFFFF628).w,a1
00005782 7000                       		moveq	#0,d0
00005784 323C 0015                  		move.w	#$15,d1
00005788                            
00005788                            End_ClrRam:
00005788 22C0                       		move.l	d0,(a1)+
0000578A 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
0000578E                            
0000578E 43F8 F700                  		lea	($FFFFF700).w,a1
00005792 7000                       		moveq	#0,d0
00005794 323C 003F                  		move.w	#$3F,d1
00005798                            
00005798                            End_ClrRam2:
00005798 22C0                       		move.l	d0,(a1)+
0000579A 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000579E                            
0000579E 43F8 FE60                  		lea	($FFFFFE60).w,a1
000057A2 7000                       		moveq	#0,d0
000057A4 323C 0047                  		move.w	#$47,d1
000057A8                            
000057A8                            End_ClrRam3:
000057A8 22C0                       		move.l	d0,(a1)+
000057AA 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000057AE                            
000057AE 46FC 2700                  		move	#$2700,sr
000057B2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000057B6 0200 00BF                  		andi.b	#$BF,d0
000057BA 33C0 00C0 0004             		move.w	d0,($C00004).l
000057C0 6100 BD38                  		bsr.w	ClearScreen
000057C4 4DF9 00C0 0004             		lea	($C00004).l,a6
000057CA 3CBC 8B03                  		move.w	#$8B03,(a6)
000057CE 3CBC 8230                  		move.w	#$8230,(a6)
000057D2 3CBC 8407                  		move.w	#$8407,(a6)
000057D6 3CBC 857C                  		move.w	#$857C,(a6)
000057DA 3CBC 9001                  		move.w	#$9001,(a6)
000057DE 3CBC 8004                  		move.w	#$8004,(a6)
000057E2 3CBC 8720                  		move.w	#$8720,(a6)
000057E6 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000057EC 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000057F0 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000057F6 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000057FC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005802 6700                       		beq.s	End_LoadData	; if yes, branch
00005804 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
0000580A                            
0000580A                            End_LoadData:
0000580A 701C                       		moveq	#$1C,d0
0000580C 6100 C114                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005810 4EB9 0000 0000             		jsr	Hud_Base
00005816 6100 0000                  		bsr.w	LevelSizeLoad
0000581A 6100 0000                  		bsr.w	DeformBgLayer
0000581E 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005824 6100 0000                  		bsr.w	MainLoadBlockLoad
00005828 6100 0000                  		bsr.w	LoadTilesFromStart
0000582C 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005834 46FC 2300                  		move	#$2300,sr
00005838 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
0000583E 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005842 6100 C28E                  		bsr.w	KosDec
00005846 7003                       		moveq	#3,d0
00005848 6100 CAB4                  		bsr.w	PalLoad1	; load Sonic's pallet
0000584C 303C 008B                  		move.w	#$8B,d0
00005850 6100 BD7A                  		bsr.w	PlaySound	; play ending sequence music
00005854 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0000585A 6700                       		beq.s	End_LoadSonic	; if not, branch
0000585C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005862                            
00005862                            End_LoadSonic:
00005862 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005868 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
0000586E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005874 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
0000587A 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005880 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005886 4EB9 0000 0000             		jsr	ObjPosLoad
0000588C 4EB9 0000 0000             		jsr	ObjectsLoad
00005892 4EB9 0000 0000             		jsr	BuildSprites
00005898 7000                       		moveq	#0,d0
0000589A 31C0 FE20                  		move.w	d0,($FFFFFE20).w
0000589E 21C0 FE22                  		move.l	d0,($FFFFFE22).w
000058A2 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
000058A6 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
000058AA 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
000058AE 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
000058B2 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000058B6 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000058BA 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000058BE 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000058C2 6100 EEE0                  		bsr.w	OscillateNumInit
000058C6 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
000058CC 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
000058D2 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000058D8 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000058DE 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000058E4 6100 D454                  		bsr.w	DelayProgram
000058E8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000058EC 0000 0040                  		ori.b	#$40,d0
000058F0 33C0 00C0 0004             		move.w	d0,($C00004).l
000058F6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000058FC 6100 C6AC                  		bsr.w	Pal_FadeTo
00005900                            
00005900                            ; ---------------------------------------------------------------------------
00005900                            ; Main ending sequence loop
00005900                            ; ---------------------------------------------------------------------------
00005900                            
00005900                            End_MainLoop:
00005900 6100 BCDC                  		bsr.w	PauseGame
00005904 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000590A 6100 D42E                  		bsr.w	DelayProgram
0000590E 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005912 6100 0000                  		bsr.w	End_MoveSonic
00005916 4EB9 0000 0000             		jsr	ObjectsLoad
0000591C 6100 0000                  		bsr.w	DeformBgLayer
00005920 4EB9 0000 0000             		jsr	BuildSprites
00005926 4EB9 0000 0000             		jsr	ObjPosLoad
0000592C 6100 C244                  		bsr.w	PalCycle_Load
00005930 6100 EEC8                  		bsr.w	OscillateNumDo
00005934 6100 EF54                  		bsr.w	ChangeRingFrame
00005938 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
0000593E 6700                       		beq.s	loc_52DA	; if yes, branch
00005940 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005946 103C 0091                  		move.b	#$91,d0
0000594A 6100 BC86                  		bsr.w	PlaySound_Special ; play credits music
0000594E 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005954 4E75                       		rts	
00005956                            ; ===========================================================================
00005956                            
00005956                            loc_52DA:
00005956 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000595A 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000595E                            
0000595E 4278 FE02                  		clr.w	($FFFFFE02).w
00005962 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005968 4278 F794                  		clr.w	($FFFFF794).w
0000596C                            
0000596C                            End_AllEmlds:				; XREF: loc_5334
0000596C 6100 BC70                  		bsr.w	PauseGame
00005970 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005976 6100 D3C2                  		bsr.w	DelayProgram
0000597A 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000597E 6100 0000                  		bsr.w	End_MoveSonic
00005982 4EB9 0000 0000             		jsr	ObjectsLoad
00005988 6100 0000                  		bsr.w	DeformBgLayer
0000598C 4EB9 0000 0000             		jsr	BuildSprites
00005992 4EB9 0000 0000             		jsr	ObjPosLoad
00005998 6100 EE60                  		bsr.w	OscillateNumDo
0000599C 6100 EEEC                  		bsr.w	ChangeRingFrame
000059A0 5378 F794                  		subq.w	#1,($FFFFF794).w
000059A4 6A00                       		bpl.s	loc_5334
000059A6 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000059AC 6100 C7F0                  		bsr.w	Pal_ToWhite
000059B0                            
000059B0                            loc_5334:
000059B0 4A78 FE02                  		tst.w	($FFFFFE02).w
000059B4 6700 FFB6                  		beq.w	End_AllEmlds
000059B8 4278 FE02                  		clr.w	($FFFFFE02).w
000059BC 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
000059C2 4BF9 00C0 0004             		lea	($C00004).l,a5
000059C8 4DF9 00C0 0000             		lea	($C00000).l,a6
000059CE 47F8 F700                  		lea	($FFFFF700).w,a3
000059D2 49F8 A400                  		lea	($FFFFA400).w,a4
000059D6 343C 4000                  		move.w	#$4000,d2
000059DA 6100 0000                  		bsr.w	LoadTilesFromStart2
000059DE 7013                       		moveq	#$13,d0
000059E0 6100 C91C                  		bsr.w	PalLoad1	; load ending pallet
000059E4 6100 C6EC                  		bsr.w	Pal_MakeWhite
000059E8 6000 FF16                  		bra.w	End_MainLoop
000059EC                            
000059EC                            ; ---------------------------------------------------------------------------
000059EC                            ; Subroutine controlling Sonic on the ending sequence
000059EC                            ; ---------------------------------------------------------------------------
000059EC                            
000059EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000059EC                            
000059EC                            
000059EC                            End_MoveSonic:				; XREF: End_MainLoop
000059EC 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000059F0 6600                       		bne.s	End_MoveSonic2
000059F2 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000059F8 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000059FA 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000059FE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005A04 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005A0A 4E75                       		rts	
00005A0C                            ; ===========================================================================
00005A0C                            
00005A0C                            End_MoveSonic2:				; XREF: End_MoveSonic
00005A0C 5500                       		subq.b	#2,d0
00005A0E 6600                       		bne.s	End_MoveSonic3
00005A10 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005A16 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005A18 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005A1C 7000                       		moveq	#0,d0
00005A1E 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005A22 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005A26 31C0 D014                  		move.w	d0,($FFFFD014).w
00005A2A 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005A30 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005A36 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005A3C 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005A42 4E75                       		rts	
00005A44                            ; ===========================================================================
00005A44                            
00005A44                            End_MoveSonic3:				; XREF: End_MoveSonic
00005A44 5500                       		subq.b	#2,d0
00005A46 6600                       		bne.s	End_MoveSonExit
00005A48 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005A4C 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005A52 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005A58 4278 D024                  		clr.w	($FFFFD024).w
00005A5C                            
00005A5C                            End_MoveSonExit:
00005A5C 4E75                       		rts	
00005A5E                            ; End of function End_MoveSonic
00005A5E                            
00005A5E                            ; ===========================================================================
00005A5E                            ; ---------------------------------------------------------------------------
00005A5E                            ; Object 87 - Sonic on ending sequence
00005A5E                            ; ---------------------------------------------------------------------------
00005A5E                            
00005A5E                            Obj87:					; XREF: Obj_Index
00005A5E 7000                       		moveq	#0,d0
00005A60 1028 0025                  		move.b	$25(a0),d0
00005A64 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005A68 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005A6C 4EF9 0000 0000             		jmp	DisplaySprite
00005A72                            ; ===========================================================================
00005A72 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005A76 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005A7A 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005A7E 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005A82 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005A86                            ; ===========================================================================
00005A86                            
00005A86                            Obj87_Main:				; XREF: Obj87_Index
00005A86 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A8C 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005A8E 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005A94 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005A9A 4E75                       		rts	
00005A9C                            ; ===========================================================================
00005A9C                            
00005A9C                            Obj87_Main2:				; XREF: Obj87_Main
00005A9C 5428 0025                  		addq.b	#2,$25(a0)
00005AA0 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005AA8 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005AAE 117C 0004 0001             		move.b	#4,1(a0)
00005AB4 4228 0022                  		clr.b	$22(a0)
00005AB8 117C 0002 0018             		move.b	#2,$18(a0)
00005ABE 117C 0000 001A             		move.b	#0,$1A(a0)
00005AC4 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005ACA                            
00005ACA                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005ACA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005ACE 6600                       		bne.s	Obj87_Wait
00005AD0 5428 0025                  		addq.b	#2,$25(a0)
00005AD4 317C 0001 001C             		move.w	#1,$1C(a0)
00005ADA 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005AE0                            
00005AE0                            Obj87_Wait:
00005AE0 4E75                       		rts	
00005AE2                            ; ===========================================================================
00005AE2                            
00005AE2                            Obj87_LookUp:				; XREF: Obj87_Index
00005AE2 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005AEA 6600                       		bne.s	locret_5480
00005AEC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005AF2 317C 005A 0030             		move.w	#$5A,$30(a0)
00005AF8 5428 0025                  		addq.b	#2,$25(a0)
00005AFC                            
00005AFC                            locret_5480:
00005AFC 4E75                       		rts	
00005AFE                            ; ===========================================================================
00005AFE                            
00005AFE                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005AFE 5368 0030                  		subq.w	#1,$30(a0)
00005B02 6600                       		bne.s	Obj87_Wait2
00005B04 43F8 D400                  		lea	($FFFFD400).w,a1
00005B08 323C 00FF                  		move.w	#$FF,d1
00005B0C                            
00005B0C                            Obj87_ClrLoop:
00005B0C 4299                       		clr.l	(a1)+
00005B0E 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005B12 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005B18 5428 0025                  		addq.b	#2,$25(a0)
00005B1C 117C 0001 001C             		move.b	#1,$1C(a0)
00005B22 317C 003C 0030             		move.w	#$3C,$30(a0)
00005B28                            
00005B28                            Obj87_Wait2:
00005B28 4E75                       		rts	
00005B2A                            ; ===========================================================================
00005B2A                            
00005B2A                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005B2A 5368 0030                  		subq.w	#1,$30(a0)
00005B2E 6600                       		bne.s	Obj87_Wait3
00005B30 5428 0025                  		addq.b	#2,$25(a0)
00005B34 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005B3A 117C 0002 001C             		move.b	#2,$1C(a0)
00005B40 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B46                            
00005B46                            Obj87_Wait3:
00005B46 4E75                       		rts	
00005B48                            ; ===========================================================================
00005B48                            
00005B48                            Obj87_Animate:				; XREF: Obj87_Index
00005B48 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005B4E 4EF9 0000 0000             		jmp	AnimateSprite
00005B54                            ; ===========================================================================
00005B54                            
00005B54                            Obj87_Leap:				; XREF: Obj87_Index
00005B54 5368 0030                  		subq.w	#1,$30(a0)
00005B58 6600                       		bne.s	Obj87_Wait4
00005B5A 5428 0025                  		addq.b	#2,$25(a0)
00005B5E 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005B66 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005B6C 117C 0004 0001             		move.b	#4,1(a0)
00005B72 4228 0022                  		clr.b	$22(a0)
00005B76 117C 0002 0018             		move.b	#2,$18(a0)
00005B7C 117C 0005 001A             		move.b	#5,$1A(a0)
00005B82 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005B88 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B8E 60B8                       		bra.s	Obj87_Animate
00005B90                            ; ===========================================================================
00005B90                            
00005B90                            Obj87_Wait4:				; XREF: Obj87_Leap
00005B90 4E75                       		rts	
00005B92                            ; ===========================================================================
00005B92                            Ani_obj87:
00005B92                            	include "_anim\obj87.asm"
00005B92                            ; ---------------------------------------------------------------------------
00005B92                            ; Animation script - Sonic on the ending sequence
00005B92                            ; ---------------------------------------------------------------------------
00005B92 0000                       		dc.w byte_551C-Ani_obj87
00005B94 0000                       		dc.w byte_552A-Ani_obj87
00005B96 0000                       		dc.w byte_5534-Ani_obj87
00005B98 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005BA6 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005BB0 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005BB8                            		even
00005BB8                            		even
00005BB8                            
00005BB8                            ; ===========================================================================
00005BB8                            ; ---------------------------------------------------------------------------
00005BB8                            ; Object 88 - chaos emeralds on	the ending sequence
00005BB8                            ; ---------------------------------------------------------------------------
00005BB8                            
00005BB8                            Obj88:					; XREF: Obj_Index
00005BB8 7000                       		moveq	#0,d0
00005BBA 1028 0024                  		move.b	$24(a0),d0
00005BBE 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005BC2 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005BC6 4EF9 0000 0000             		jmp	DisplaySprite
00005BCC                            ; ===========================================================================
00005BCC 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005BCE 0000                       		dc.w Obj88_Move-Obj88_Index
00005BD0                            ; ===========================================================================
00005BD0                            
00005BD0                            Obj88_Main:				; XREF: Obj88_Index
00005BD0 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005BD6 6700                       		beq.s	Obj88_Main2
00005BD8 588F                       		addq.l	#4,sp
00005BDA 4E75                       		rts	
00005BDC                            ; ===========================================================================
00005BDC                            
00005BDC                            Obj88_Main2:				; XREF: Obj88_Main
00005BDC 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005BE2 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005BE8 2248                       		movea.l	a0,a1
00005BEA 7600                       		moveq	#0,d3
00005BEC 7401                       		moveq	#1,d2
00005BEE 7205                       		moveq	#5,d1
00005BF0                            
00005BF0                            Obj88_MainLoop:
00005BF0 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005BF4 5429 0024                  		addq.b	#2,$24(a1)
00005BF8 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005C00 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005C06 137C 0004 0001             		move.b	#4,1(a1)
00005C0C 137C 0001 0018             		move.b	#1,$18(a1)
00005C12 3368 0008 0038             		move.w	8(a0),$38(a1)
00005C18 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005C1E 1342 001C                  		move.b	d2,$1C(a1)
00005C22 1342 001A                  		move.b	d2,$1A(a1)
00005C26 5202                       		addq.b	#1,d2
00005C28 1343 0026                  		move.b	d3,$26(a1)
00005C2C 0603 002A                  		addi.b	#$2A,d3
00005C30 43E9 0040                  		lea	$40(a1),a1
00005C34 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005C38                            
00005C38                            Obj88_Move:				; XREF: Obj88_Index
00005C38 3028 003E                  		move.w	$3E(a0),d0
00005C3C D168 0026                  		add.w	d0,$26(a0)
00005C40 1028 0026                  		move.b	$26(a0),d0
00005C44 4EB9 0000 2D6C             		jsr	(CalcSine).l
00005C4A 7800                       		moveq	#0,d4
00005C4C 1828 003C                  		move.b	$3C(a0),d4
00005C50 C3C4                       		muls.w	d4,d1
00005C52 E081                       		asr.l	#8,d1
00005C54 C1C4                       		muls.w	d4,d0
00005C56 E080                       		asr.l	#8,d0
00005C58 D268 0038                  		add.w	$38(a0),d1
00005C5C D068 003A                  		add.w	$3A(a0),d0
00005C60 3141 0008                  		move.w	d1,8(a0)
00005C64 3140 000C                  		move.w	d0,$C(a0)
00005C68 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005C6E 6700                       		beq.s	loc_55FA
00005C70 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005C76                            
00005C76                            loc_55FA:
00005C76 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005C7C 6700                       		beq.s	loc_5608
00005C7E 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005C84                            
00005C84                            loc_5608:
00005C84 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005C8A 6700                       		beq.s	locret_5614
00005C8C 5368 003A                  		subq.w	#1,$3A(a0)
00005C90                            
00005C90                            locret_5614:
00005C90 4E75                       		rts	
00005C92                            ; ===========================================================================
00005C92                            ; ---------------------------------------------------------------------------
00005C92                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005C92                            ; ---------------------------------------------------------------------------
00005C92                            
00005C92                            Obj89:					; XREF: Obj_Index
00005C92 7000                       		moveq	#0,d0
00005C94 1028 0024                  		move.b	$24(a0),d0
00005C98 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005C9C 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005CA0                            ; ===========================================================================
00005CA0 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005CA2 0000                       		dc.w Obj89_Move-Obj89_Index
00005CA4 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005CA6                            ; ===========================================================================
00005CA6                            
00005CA6                            Obj89_Main:				; XREF: Obj89_Index
00005CA6 5428 0024                  		addq.b	#2,$24(a0)
00005CAA 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005CB0 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005CB6 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005CBE 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005CC4 117C 0000 0001             		move.b	#0,1(a0)
00005CCA 117C 0000 0018             		move.b	#0,$18(a0)
00005CD0                            
00005CD0                            Obj89_Move:				; XREF: Obj89_Index
00005CD0 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005CD6 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005CD8 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005CDE 4EB9 0000 0000             		jsr	DisplaySprite
00005CE4                            ; ===========================================================================
00005CE4                            
00005CE4                            Obj89_Delay:				; XREF: Obj89_Move
00005CE4 5428 0024                  		addq.b	#2,$24(a0)
00005CE8 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005CEE                            
00005CEE                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005CEE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005CF2 6A00                       		bpl.s	Obj89_Display
00005CF4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005CFA                            
00005CFA                            Obj89_Display:
00005CFA 4EB9 0000 0000             		jsr	DisplaySprite
00005D00                            ; ===========================================================================
00005D00                            ; ---------------------------------------------------------------------------
00005D00                            ; Sprite mappings - Sonic on the ending	sequence
00005D00                            ; ---------------------------------------------------------------------------
00005D00                            Map_obj87:
00005D00                            	include "_maps\obj87.asm"
00005D00                            ; ---------------------------------------------------------------------------
00005D00                            ; Sprite mappings - Sonic on the ending	sequence
00005D00                            ; ---------------------------------------------------------------------------
00005D00 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005D04 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005D08 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005D0C 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005D10 02                         byte_5690:	dc.b 2
00005D11 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005D16 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005D1B 03                         byte_569B:	dc.b 3
00005D1C FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005D21 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005D26 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005D2B 02                         byte_56AB:	dc.b 2
00005D2C EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005D31 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005D36 02                         byte_56B6:	dc.b 2
00005D37 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005D3C FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005D41 02                         byte_56C1:	dc.b 2
00005D42 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005D47 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005D4C 03                         byte_56CC:	dc.b 3
00005D4D EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005D52 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005D57 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005D5C 07                         byte_56DC:	dc.b 7
00005D5D B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005D62 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005D67 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005D6C CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005D71 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005D76 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005D7B EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005D80 18                         byte_5700:	dc.b $18
00005D81 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005D86 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005D8B 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005D90 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005D95 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005D9A 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005D9F 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005DA4 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005DA9 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005DAE B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005DB3 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005DB8 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005DBD C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005DC2 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005DC7 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005DCC D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005DD1 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005DD6 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005DDB E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005DE0 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005DE5 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005DEA E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005DEF F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005DF4 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005DFA 00                         		even
00005DFA 00                         		even
00005DFA                            
00005DFA                            ; ---------------------------------------------------------------------------
00005DFA                            ; Sprite mappings - chaos emeralds on the ending sequence
00005DFA                            ; ---------------------------------------------------------------------------
00005DFA                            Map_obj88:
00005DFA                            	include "_maps\obj88.asm"
00005DFA                            ; ---------------------------------------------------------------------------
00005DFA                            ; Sprite mappings - chaos emeralds on the ending sequence
00005DFA                            ; ---------------------------------------------------------------------------
00005DFA 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005DFE 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005E02 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005E06 0000                       		dc.w byte_57AC-Map_obj88
00005E08 01                         byte_5788:	dc.b 1
00005E09 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005E0E 01                         byte_578E:	dc.b 1
00005E0F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005E14 01                         byte_5794:	dc.b 1
00005E15 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005E1A 01                         byte_579A:	dc.b 1
00005E1B F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005E20 01                         byte_57A0:	dc.b 1
00005E21 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005E26 01                         byte_57A6:	dc.b 1
00005E27 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005E2C 01                         byte_57AC:	dc.b 1
00005E2D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005E32                            		even
00005E32                            		even
00005E32                            
00005E32                            ; ---------------------------------------------------------------------------
00005E32                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005E32                            ; ---------------------------------------------------------------------------
00005E32                            Map_obj89:
00005E32                            	include "_maps\obj89.asm"
00005E32                            ; ---------------------------------------------------------------------------
00005E32                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005E32                            ; ---------------------------------------------------------------------------
00005E32 0000                       		dc.w byte_57B4-Map_obj89
00005E34 03                         byte_57B4:	dc.b 3
00005E35 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005E3A F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005E3F F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005E44                            		even
00005E44                            		even
00005E44                            
00005E44                            ; ===========================================================================
00005E44                            ; ---------------------------------------------------------------------------
00005E44                            ; Credits ending sequence
00005E44                            ; ---------------------------------------------------------------------------
00005E44                            
00005E44                            Credits:				; XREF: GameModeArray
00005E44 6100 B9CE                  		bsr.w	ClearPLC
00005E48 6100 C20A                  		bsr.w	Pal_FadeFrom
00005E4C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E52 3CBC 8004                  		move.w	#$8004,(a6)
00005E56 3CBC 8230                  		move.w	#$8230,(a6)
00005E5A 3CBC 8407                  		move.w	#$8407,(a6)
00005E5E 3CBC 9001                  		move.w	#$9001,(a6)
00005E62 3CBC 9200                  		move.w	#$9200,(a6)
00005E66 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E6A 3CBC 8720                  		move.w	#$8720,(a6)
00005E6E 4238 F64E                  		clr.b	($FFFFF64E).w
00005E72 6100 B686                  		bsr.w	ClearScreen
00005E76 43F8 D000                  		lea	($FFFFD000).w,a1
00005E7A 7000                       		moveq	#0,d0
00005E7C 323C 07FF                  		move.w	#$7FF,d1
00005E80                            
00005E80                            Cred_ClrObjRam:
00005E80 22C0                       		move.l	d0,(a1)+
00005E82 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005E86                            
00005E86 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005E90 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005E96 6100 B7DE                  		bsr.w	NemDec
00005E9A 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005E9E 7000                       		moveq	#0,d0
00005EA0 323C 001F                  		move.w	#$1F,d1
00005EA4                            
00005EA4                            Cred_ClrPallet:
00005EA4 22C0                       		move.l	d0,(a1)+
00005EA6 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005EAA                            
00005EAA 7003                       		moveq	#3,d0
00005EAC 6100 C450                  		bsr.w	PalLoad1	; load Sonic's pallet
00005EB0 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005EB6 4EB9 0000 0000             		jsr	ObjectsLoad
00005EBC 4EB9 0000 0000             		jsr	BuildSprites
00005EC2 6100 0000                  		bsr.w	EndingDemoLoad
00005EC6 7000                       		moveq	#0,d0
00005EC8 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005ECC E948                       		lsl.w	#4,d0
00005ECE 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005ED4 45F2 0000                  		lea	(a2,d0.w),a2
00005ED8 7000                       		moveq	#0,d0
00005EDA 1012                       		move.b	(a2),d0
00005EDC 6700                       		beq.s	loc_5862
00005EDE 6100 B8D6                  		bsr.w	LoadPLC		; load level patterns
00005EE2                            
00005EE2                            loc_5862:
00005EE2 7001                       		moveq	#1,d0
00005EE4 6100 B8D0                  		bsr.w	LoadPLC		; load standard	level patterns
00005EE8 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005EEE 6100 C0BA                  		bsr.w	Pal_FadeTo
00005EF2                            
00005EF2                            Cred_WaitLoop:
00005EF2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005EF8 6100 CE40                  		bsr.w	DelayProgram
00005EFC 6100 B924                  		bsr.w	RunPLC_RAM
00005F00 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005F04 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005F06 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005F0A 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005F0C 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005F12 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005F16 4E75                       		rts	
00005F18                            
00005F18                            ; ---------------------------------------------------------------------------
00005F18                            ; Ending sequence demo loading subroutine
00005F18                            ; ---------------------------------------------------------------------------
00005F18                            
00005F18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005F18                            
00005F18                            
00005F18                            EndingDemoLoad:				; XREF: Credits
00005F18 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005F1C 0240 000F                  		andi.w	#$F,d0
00005F20 D040                       		add.w	d0,d0
00005F22 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005F26 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005F2A 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005F2E 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005F34 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005F36 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005F3C 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005F42 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005F48 7000                       		moveq	#0,d0
00005F4A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005F4E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005F52 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005F56 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005F5A 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005F60 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005F62 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005F68 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005F6C 303C 0008                  		move.w	#8,d0
00005F70                            
00005F70                            EndDemo_LampLoad:
00005F70 24D9                       		move.l	(a1)+,(a2)+
00005F72 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005F76                            
00005F76                            EndDemo_Exit:
00005F76 4E75                       		rts	
00005F78                            ; End of function EndingDemoLoad
00005F78                            
00005F78                            ; ===========================================================================
00005F78                            ; ---------------------------------------------------------------------------
00005F78                            ; Levels used in the end sequence demos
00005F78                            ; ---------------------------------------------------------------------------
00005F78                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005F88                            
00005F88                            ; ---------------------------------------------------------------------------
00005F88                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005F88                            ; ---------------------------------------------------------------------------
00005F88                            EndDemo_LampVar:
00005F88 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005F8A 0A00 062C 000D             		dc.w $A00, $62C, $D
00005F90 0000 0000                  		dc.l 0
00005F94 0000                       		dc.b 0,	0
00005F96 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005FAA 0101                       		dc.b 1,	1
00005FAC                            ; ===========================================================================
00005FAC                            ; ---------------------------------------------------------------------------
00005FAC                            ; "TRY AGAIN" and "END"	screens
00005FAC                            ; ---------------------------------------------------------------------------
00005FAC                            
00005FAC                            TryAgainEnd:				; XREF: Credits
00005FAC 6100 B866                  		bsr.w	ClearPLC
00005FB0 6100 C0A2                  		bsr.w	Pal_FadeFrom
00005FB4 4DF9 00C0 0004             		lea	($C00004).l,a6
00005FBA 3CBC 8004                  		move.w	#$8004,(a6)
00005FBE 3CBC 8230                  		move.w	#$8230,(a6)
00005FC2 3CBC 8407                  		move.w	#$8407,(a6)
00005FC6 3CBC 9001                  		move.w	#$9001,(a6)
00005FCA 3CBC 9200                  		move.w	#$9200,(a6)
00005FCE 3CBC 8B03                  		move.w	#$8B03,(a6)
00005FD2 3CBC 8720                  		move.w	#$8720,(a6)
00005FD6 4238 F64E                  		clr.b	($FFFFF64E).w
00005FDA 6100 B51E                  		bsr.w	ClearScreen
00005FDE 43F8 D000                  		lea	($FFFFD000).w,a1
00005FE2 7000                       		moveq	#0,d0
00005FE4 323C 07FF                  		move.w	#$7FF,d1
00005FE8                            
00005FE8                            TryAg_ClrObjRam:
00005FE8 22C0                       		move.l	d0,(a1)+
00005FEA 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005FEE                            
00005FEE 701D                       		moveq	#$1D,d0
00005FF0 6100 B930                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005FF4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005FF8 7000                       		moveq	#0,d0
00005FFA 323C 001F                  		move.w	#$1F,d1
00005FFE                            
00005FFE                            TryAg_ClrPallet:
00005FFE 22C0                       		move.l	d0,(a1)+
00006000 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00006004                            
00006004 7013                       		moveq	#$13,d0
00006006 6100 C2F6                  		bsr.w	PalLoad1	; load ending pallet
0000600A 4278 FBC0                  		clr.w	($FFFFFBC0).w
0000600E 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00006014 4EB9 0000 0000             		jsr	ObjectsLoad
0000601A 4EB9 0000 0000             		jsr	BuildSprites
00006020 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00006026 6100 BF82                  		bsr.w	Pal_FadeTo
0000602A                            
0000602A                            ; ---------------------------------------------------------------------------
0000602A                            ; "TRY AGAIN" and "END"	screen main loop
0000602A                            ; ---------------------------------------------------------------------------
0000602A                            TryAg_MainLoop:
0000602A 6100 B5B2                  		bsr.w	PauseGame
0000602E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00006034 6100 CD04                  		bsr.w	DelayProgram
00006038 4EB9 0000 0000             		jsr	ObjectsLoad
0000603E 4EB9 0000 0000             		jsr	BuildSprites
00006044 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000604A 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000604C 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00006050 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006052 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00006058 67D0                       		beq.s	TryAg_MainLoop
0000605A                            
0000605A                            TryAg_Exit:
0000605A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006060 4E75                       		rts	
00006062                            
00006062                            ; ===========================================================================
00006062                            ; ---------------------------------------------------------------------------
00006062                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006062                            ; ---------------------------------------------------------------------------
00006062                            
00006062                            Obj8B:					; XREF: Obj_Index
00006062 7000                       		moveq	#0,d0
00006064 1028 0024                  		move.b	$24(a0),d0
00006068 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
0000606C 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00006070 4EF9 0000 0000             		jmp	DisplaySprite
00006076                            ; ===========================================================================
00006076 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00006078 0000                       		dc.w Obj8B_Animate-Obj8B_Index
0000607A 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
0000607C 0000                       		dc.w loc_5A8E-Obj8B_Index
0000607E                            ; ===========================================================================
0000607E                            
0000607E                            Obj8B_Main:				; XREF: Obj8B_Index
0000607E 5428 0024                  		addq.b	#2,$24(a0)
00006082 317C 0120 0008             		move.w	#$120,8(a0)
00006088 317C 00F4 000A             		move.w	#$F4,$A(a0)
0000608E 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00006096 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000609C 117C 0000 0001             		move.b	#0,1(a0)
000060A2 117C 0002 0018             		move.b	#2,$18(a0)
000060A8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
000060AE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000060B4 6700                       		beq.s	Obj8B_Animate	; if yes, branch
000060B6 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
000060BC 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
000060C2 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
000060C8 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
000060CE                            
000060CE                            Obj8B_Animate:				; XREF: Obj8B_Index
000060CE 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
000060D4 4EF9 0000 0000             		jmp	AnimateSprite
000060DA                            ; ===========================================================================
000060DA                            
000060DA                            Obj8B_Juggle:				; XREF: Obj8B_Index
000060DA 5428 0024                  		addq.b	#2,$24(a0)
000060DE 7002                       		moveq	#2,d0
000060E0 0828 0000 001C             		btst	#0,$1C(a0)
000060E6 6700                       		beq.s	loc_5A6A
000060E8 4440                       		neg.w	d0
000060EA                            
000060EA                            loc_5A6A:
000060EA 43F8 D800                  		lea	($FFFFD800).w,a1
000060EE 7205                       		moveq	#5,d1
000060F0                            
000060F0                            loc_5A70:
000060F0 1340 003E                  		move.b	d0,$3E(a1)
000060F4 3400                       		move.w	d0,d2
000060F6 E742                       		asl.w	#3,d2
000060F8 D529 0026                  		add.b	d2,$26(a1)
000060FC 43E9 0040                  		lea	$40(a1),a1
00006100 51C9 FFEE                  		dbf	d1,loc_5A70
00006104 5228 001A                  		addq.b	#1,$1A(a0)
00006108 317C 0070 0030             		move.w	#112,$30(a0)
0000610E                            
0000610E                            loc_5A8E:				; XREF: Obj8B_Index
0000610E 5368 0030                  		subq.w	#1,$30(a0)
00006112 6A00                       		bpl.s	locret_5AA0
00006114 0868 0000 001C             		bchg	#0,$1C(a0)
0000611A 117C 0002 0024             		move.b	#2,$24(a0)
00006120                            
00006120                            locret_5AA0:
00006120 4E75                       		rts	
00006122                            ; ===========================================================================
00006122                            Ani_obj8B:
00006122                            	include "_anim\obj8B.asm"
00006122                            ; ---------------------------------------------------------------------------
00006122                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006122                            ; ---------------------------------------------------------------------------
00006122 0000                       		dc.w byte_5AA8-Ani_obj8B
00006124 0000                       		dc.w byte_5AAC-Ani_obj8B
00006126 0000                       		dc.w byte_5AB0-Ani_obj8B
00006128 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
0000612C 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00006130 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00006142                            		even
00006142                            		even
00006142                            
00006142                            ; ===========================================================================
00006142                            ; ---------------------------------------------------------------------------
00006142                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006142                            ; ---------------------------------------------------------------------------
00006142                            
00006142                            Obj8C:					; XREF: Obj_Index
00006142 7000                       		moveq	#0,d0
00006144 1028 0024                  		move.b	$24(a0),d0
00006148 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
0000614C 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006150 4EF9 0000 0000             		jmp	DisplaySprite
00006156                            ; ===========================================================================
00006156 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00006158 0000                       		dc.w Obj8C_Move-Obj8C_Index
0000615A                            ; ===========================================================================
0000615A                            
0000615A                            Obj8C_Main:				; XREF: Obj8C_Index
0000615A 2248                       		movea.l	a0,a1
0000615C 7400                       		moveq	#0,d2
0000615E 7600                       		moveq	#0,d3
00006160 7205                       		moveq	#5,d1
00006162 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00006166                            
00006166                            Obj8C_MakeEms:				; XREF: loc_5B42
00006166 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
0000616A 5429 0024                  		addq.b	#2,$24(a1)
0000616E 237C 0000 5DFA 0004        		move.l	#Map_obj88,4(a1)
00006176 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000617C 137C 0000 0001             		move.b	#0,1(a1)
00006182 137C 0001 0018             		move.b	#1,$18(a1)
00006188 337C 0104 0008             		move.w	#$104,8(a1)
0000618E 337C 0120 0038             		move.w	#$120,$38(a1)
00006194 337C 00EC 000A             		move.w	#$EC,$A(a1)
0000619A 3369 000A 003A             		move.w	$A(a1),$3A(a1)
000061A0 137C 001C 003C             		move.b	#$1C,$3C(a1)
000061A6 47F8 FE58                  		lea	($FFFFFE58).w,a3
000061AA                            
000061AA                            Obj8C_ChkEms:
000061AA 7000                       		moveq	#0,d0
000061AC 1038 FE57                  		move.b	($FFFFFE57).w,d0
000061B0 5340                       		subq.w	#1,d0
000061B2 6500                       		bcs.s	loc_5B42
000061B4                            
000061B4                            Obj8C_ChkEmLoop:
000061B4 B433 0000                  		cmp.b	(a3,d0.w),d2
000061B8 6600                       		bne.s	loc_5B3E
000061BA 5202                       		addq.b	#1,d2
000061BC 60EC                       		bra.s	Obj8C_ChkEms
000061BE                            ; ===========================================================================
000061BE                            
000061BE                            loc_5B3E:
000061BE 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
000061C2                            
000061C2                            loc_5B42:
000061C2 1342 001A                  		move.b	d2,$1A(a1)
000061C6 5229 001A                  		addq.b	#1,$1A(a1)
000061CA 5202                       		addq.b	#1,d2
000061CC 137C 0080 0026             		move.b	#$80,$26(a1)
000061D2 1343 001E                  		move.b	d3,$1E(a1)
000061D6 1343 001F                  		move.b	d3,$1F(a1)
000061DA 0643 000A                  		addi.w	#$A,d3
000061DE 43E9 0040                  		lea	$40(a1),a1
000061E2 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000061E6                            
000061E6                            Obj8C_Move:				; XREF: Obj8C_Index
000061E6 4A68 003E                  		tst.w	$3E(a0)
000061EA 6700                       		beq.s	locret_5BBA
000061EC 4A28 001E                  		tst.b	$1E(a0)
000061F0 6700                       		beq.s	loc_5B78
000061F2 5328 001E                  		subq.b	#1,$1E(a0)
000061F6 6600                       		bne.s	loc_5B80
000061F8                            
000061F8                            loc_5B78:
000061F8 3028 003E                  		move.w	$3E(a0),d0
000061FC D168 0026                  		add.w	d0,$26(a0)
00006200                            
00006200                            loc_5B80:
00006200 1028 0026                  		move.b	$26(a0),d0
00006204 6700                       		beq.s	loc_5B8C
00006206 0C00 0080                  		cmpi.b	#$80,d0
0000620A 6600                       		bne.s	loc_5B96
0000620C                            
0000620C                            loc_5B8C:
0000620C 4268 003E                  		clr.w	$3E(a0)
00006210 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00006216                            
00006216                            loc_5B96:
00006216 4EB9 0000 2D6C             		jsr	(CalcSine).l
0000621C 7800                       		moveq	#0,d4
0000621E 1828 003C                  		move.b	$3C(a0),d4
00006222 C3C4                       		muls.w	d4,d1
00006224 E081                       		asr.l	#8,d1
00006226 C1C4                       		muls.w	d4,d0
00006228 E080                       		asr.l	#8,d0
0000622A D268 0038                  		add.w	$38(a0),d1
0000622E D068 003A                  		add.w	$3A(a0),d0
00006232 3141 0008                  		move.w	d1,8(a0)
00006236 3140 000A                  		move.w	d0,$A(a0)
0000623A                            
0000623A                            locret_5BBA:
0000623A 4E75                       		rts	
0000623C                            ; ===========================================================================
0000623C                            ; ---------------------------------------------------------------------------
0000623C                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
0000623C                            ; ---------------------------------------------------------------------------
0000623C                            Map_obj8B:
0000623C                            	include "_maps\obj8B.asm"
0000623C                            ; ---------------------------------------------------------------------------
0000623C                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
0000623C                            ; ---------------------------------------------------------------------------
0000623C 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006240 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006244 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006248 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
0000624C 08                         byte_5BCC:	dc.b 8
0000624D E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006252 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006257 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000625C F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006261 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006266 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000626B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006270 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006275 08                         byte_5BF5:	dc.b 8
00006276 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000627B F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006280 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006285 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000628A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000628F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006294 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006299 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000629E 08                         byte_5C1E:	dc.b 8
0000629F E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
000062A4 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
000062A9 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
000062AE F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
000062B3 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000062B8 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000062BD 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000062C2 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000062C7 08                         byte_5C47:	dc.b 8
000062C8 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
000062CD F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
000062D2 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000062D7 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000062DC 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000062E1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000062E6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000062EB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000062F0 0C                         byte_5C70:	dc.b $C
000062F1 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000062F6 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000062FB 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006300 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006305 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
0000630A F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
0000630F 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006314 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006319 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
0000631E 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006323 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006328 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000632D 0A                         byte_5CAD:	dc.b $A
0000632E D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006333 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006338 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
0000633D D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006342 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006347 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
0000634C 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006351 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006356 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
0000635B 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006360 0A                         byte_5CE0:	dc.b $A
00006361 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006366 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
0000636B EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006370 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006375 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
0000637A EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000637F 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006384 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006389 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000638E 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006393 0C                         byte_5D13:	dc.b $C
00006394 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006399 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000639E 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
000063A3 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
000063A8 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
000063AD FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000063B2 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
000063B7 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
000063BC 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
000063C1 180C 0087 00               		dc.b $18, $C, 0, $87, 0
000063C6 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000063CB 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000063D0                            		even
000063D0                            		even
000063D0                            
000063D0                            ; ---------------------------------------------------------------------------
000063D0                            ; Ending sequence demos
000063D0                            ; ---------------------------------------------------------------------------
000063D0                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000063FE                            		even
000063FE                            Demo_EndMZ:	incbin	demodata\e_mz.bin
0000643E                            		even
0000643E                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000646E                            		even
0000646E                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000649E                            		even
0000649E                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
000064BE                            		even
000064BE                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000064DE                            		even
000064DE                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
0000650E                            		even
0000650E                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
0000653E                            		even
0000653E                            
0000653E                            ; ---------------------------------------------------------------------------
0000653E                            ; Subroutine to	load level boundaries and start	locations
0000653E                            ; ---------------------------------------------------------------------------
0000653E                            
0000653E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000653E                            
0000653E                            
0000653E                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
0000653E 7000                       		moveq	#0,d0
00006540 11C0 F740                  		move.b	d0,($FFFFF740).w
00006544 11C0 F741                  		move.b	d0,($FFFFF741).w
00006548 11C0 F746                  		move.b	d0,($FFFFF746).w
0000654C 11C0 F748                  		move.b	d0,($FFFFF748).w
00006550 11C0 F742                  		move.b	d0,($FFFFF742).w
00006554 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006558 ED08                       		lsl.b	#6,d0
0000655A E848                       		lsr.w	#4,d0
0000655C 3200                       		move.w	d0,d1
0000655E D040                       		add.w	d0,d0
00006560 D041                       		add.w	d1,d0
00006562 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006566 3018                       		move.w	(a0)+,d0
00006568 31C0 F730                  		move.w	d0,($FFFFF730).w
0000656C 2018                       		move.l	(a0)+,d0
0000656E 21C0 F728                  		move.l	d0,($FFFFF728).w
00006572 21C0 F720                  		move.l	d0,($FFFFF720).w
00006576 2018                       		move.l	(a0)+,d0
00006578 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000657C 21C0 F724                  		move.l	d0,($FFFFF724).w
00006580 3038 F728                  		move.w	($FFFFF728).w,d0
00006584 0640 0240                  		addi.w	#$240,d0
00006588 31C0 F732                  		move.w	d0,($FFFFF732).w
0000658C 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006592 3018                       		move.w	(a0)+,d0
00006594 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006598 6000 0000                  		bra.w	LevSz_ChkLamp
0000659C                            ; ===========================================================================
0000659C                            ; ---------------------------------------------------------------------------
0000659C                            ; Level size array and ending start location array
0000659C                            ; ---------------------------------------------------------------------------
0000659C                            LevelSizeArray:        ; GHZ
0000659C 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
000065A8 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
000065B4 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
000065C0 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000065CC                                    ; LZ
000065CC 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
000065D8 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
000065E4 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
000065F0 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
000065FC                                    ; MZ
000065FC 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
00006608 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
00006614 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
00006620 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
0000662C                                    ; SLZ
0000662C 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00006638 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
00006644 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00006650 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
0000665C                                    ; SYZ
0000665C 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006668 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00006674 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00006680 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
0000668C                                    ; SBZ
0000668C 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006698 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
000066A4 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
000066B0 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
000066BC                                    ; Ending
000066BC 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
000066C8 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
000066D4 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
000066E0 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
000066EC                                    ; BHZ
000066EC 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
000066F8 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006704 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006710 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
0000671C                                    even
0000671C                            
0000671C                            ; ===========================================================================
0000671C                            
0000671C                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
0000671C 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006720 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006722 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006728 3238 D008                  		move.w	($FFFFD008).w,d1
0000672C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006730 6000 0000                  		bra.w	loc_60D0
00006734                            ; ===========================================================================
00006734                            
00006734                            
00006734                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006734 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006738 ED08                       		lsl.b	#6,d0
0000673A E848                       		lsr.w	#4,d0
0000673C 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006740 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006744 6A00 0000                  		bpl.w	LevSz_SonicPos	; if not, branch
00006748 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000674C 5340                       		subq.w	#1,d0
0000674E E548                       		lsl.w	#2,d0
00006750 43FB 0000                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006754 6000 0000                  		bra.w	LevSz_SonicPos
00006758                            
00006758                            EndingStLocArray:
00006758                            		incbin	misc\sloc_end.bin
00006778                            		even
00006778                            		
00006778                            ; ===========================================================================
00006778                            ; ---------------------------------------------------------------------------
00006778                            ; Sonic	start location array
00006778                            ; ---------------------------------------------------------------------------
00006778                            StartLocArray:	incbin	misc\sloc_lev.bin
000067F8                            		even
000067F8                            
000067F8                            LevSz_SonicPos:
000067F8 7200                       		moveq	#0,d1
000067FA 3219                       		move.w	(a1)+,d1
000067FC 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006800 7000                       		moveq	#0,d0
00006802 3011                       		move.w	(a1),d0
00006804 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006808                            
00006808                            loc_60D0:				; XREF: LevSz_ChkLamp
00006808 0441 00A0                  		subi.w	#$A0,d1
0000680C 6400                       		bcc.s	loc_60D8
0000680E 7200                       		moveq	#0,d1
00006810                            
00006810                            loc_60D8:
00006810 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006814 B242                       		cmp.w	d2,d1
00006816 6500                       		bcs.s	loc_60E2
00006818 3202                       		move.w	d2,d1
0000681A                            
0000681A                            loc_60E2:
0000681A 31C1 F700                  		move.w	d1,($FFFFF700).w
0000681E 0440 0060                  		subi.w	#$60,d0
00006822 6400                       		bcc.s	loc_60EE
00006824 7000                       		moveq	#0,d0
00006826                            
00006826                            loc_60EE:
00006826 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000682A 6D00                       		blt.s	loc_60F8
0000682C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006830                            
00006830                            loc_60F8:
00006830 31C0 F704                  		move.w	d0,($FFFFF704).w
00006834 6100 0000                  		bsr.w	BgScrollSpeed
00006838 7000                       		moveq	#0,d0
0000683A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000683E E508                       		lsl.b	#2,d0
00006840 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006846 6000 0000                  		bra.w	LevSz_Unk
0000684A                            
0000684A                            ; ---------------------------------------------------------------------------
0000684A                            ; Which	256x256	tiles contain loops or roll-tunnels
0000684A                            ; ---------------------------------------------------------------------------
0000684A                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
0000684A                            ; loop,	loop, tunnel, tunnel
0000684A                            ; ---------------------------------------------------------------------------
0000684A                            LoopTileNums:	incbin	misc\loopnums.bin
0000686A                            		even
0000686A                            ; this is from the cwa source code i will share kaito x gakupo mpreg if this does not work i swear t ogod if this does not
0000686A                            ; ITS GONJE HELP
0000686A                            ; ===========================================================================
0000686A                            
0000686A                            LevSz_Unk:				; XREF: LevelSizeLoad
0000686A 7000                       		moveq	#0,d0
0000686C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006870 E748                       		lsl.w	#3,d0
00006872 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006876 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
0000687A 24D9                       		move.l	(a1)+,(a2)+
0000687C 24D9                       		move.l	(a1)+,(a2)+
0000687E 4E75                       		rts	
00006880                            ; End of function LevelSizeLoad
00006880                            
00006880                            ; ===========================================================================
00006880 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006888 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006890 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006898 0800 0100 0100 0000        		dc.l $8000100, $1000000
000068A0 0800 0100 0100 0000        		dc.l $8000100, $1000000
000068A8 0800 0100 0100 0000        		dc.l $8000100, $1000000
000068B0 0070 0100 0100 0100        		dc.l $700100, $1000100
000068B8                            
000068B8                            ; ---------------------------------------------------------------------------
000068B8                            ; Subroutine to	set scroll speed of some backgrounds
000068B8                            ; ---------------------------------------------------------------------------
000068B8                            
000068B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068B8                            
000068B8                            
000068B8                            BgScrollSpeed:				; XREF: LevelSizeLoad
000068B8 4A38 FE30                  		tst.b	($FFFFFE30).w
000068BC 6600                       		bne.s	loc_6206
000068BE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068C2 31C0 F714                  		move.w	d0,($FFFFF714).w
000068C6 31C1 F708                  		move.w	d1,($FFFFF708).w
000068CA 31C1 F710                  		move.w	d1,($FFFFF710).w
000068CE 31C1 F718                  		move.w	d1,($FFFFF718).w
000068D2                            
000068D2                            loc_6206:
000068D2 7400                       		moveq	#0,d2
000068D4 1438 FE10                  		move.b	($FFFFFE10).w,d2
000068D8 D442                       		add.w	d2,d2
000068DA 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000068DE 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000068E2                            ; End of function BgScrollSpeed
000068E2                            
000068E2                            ; ===========================================================================
000068E2 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000068E6 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000068EA 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000068EE 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_GHZ-BgScroll_Index
000068F2                            ; ===========================================================================
000068F2                            
000068F2                            BgScroll_GHZ:				; XREF: BgScroll_Index
000068F2 6000 0000                  		bra.w	Deform_GHZ
000068F6                            ; ===========================================================================
000068F6                            
000068F6                            BgScroll_LZ:				; XREF: BgScroll_Index
000068F6 E280                       		asr.l	#1,d0
000068F8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068FC 4E75                       		rts	
000068FE                            ; ===========================================================================
000068FE                            
000068FE                            BgScroll_MZ:				; XREF: BgScroll_Index
000068FE 4E75                       		rts	
00006900                            ; ===========================================================================
00006900                            
00006900                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006900 E280                       		asr.l	#1,d0
00006902 0640 00C0                  		addi.w	#$C0,d0
00006906 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000690A 4E75                       		rts	
0000690C                            ; ===========================================================================
0000690C                            
0000690C                            BgScroll_SYZ:				; XREF: BgScroll_Index
0000690C E980                       		asl.l	#4,d0
0000690E 2400                       		move.l	d0,d2
00006910 E380                       		asl.l	#1,d0
00006912 D082                       		add.l	d2,d0
00006914 E080                       		asr.l	#8,d0
00006916 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000691A 31C0 F714                  		move.w	d0,($FFFFF714).w
0000691E 4E75                       		rts	
00006920                            ; ===========================================================================
00006920                            
00006920                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006920 E980                       		asl.l	#4,d0
00006922 E380                       		asl.l	#1,d0
00006924 E080                       		asr.l	#8,d0
00006926 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000692A 4E75                       		rts	
0000692C                            ; ===========================================================================
0000692C                            
0000692C                            BgScroll_End:				; XREF: BgScroll_Index
0000692C 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006932 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006938 4E75                       		rts	
0000693A                            ; ===========================================================================
0000693A 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006940 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006946 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000694C 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006952 4E75                       		rts
00006954                            
00006954                            ; ---------------------------------------------------------------------------
00006954                            ; Background layer deformation subroutines
00006954                            ; ---------------------------------------------------------------------------
00006954                            
00006954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006954                            
00006954                            
00006954                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006954 4A38 F744                  		tst.b	($FFFFF744).w
00006958 6700                       		beq.s	loc_628E
0000695A 4E75                       		rts	
0000695C                            ; ===========================================================================
0000695C                            
0000695C                            loc_628E:
0000695C 4278 F754                  		clr.w	($FFFFF754).w
00006960 4278 F756                  		clr.w	($FFFFF756).w
00006964 4278 F758                  		clr.w	($FFFFF758).w
00006968 4278 F75A                  		clr.w	($FFFFF75A).w
0000696C 6100 0000                  		bsr.w	ScrollHoriz
00006970 6100 0000                  		bsr.w	ScrollVertical
00006974 6100 0000                  		bsr.w	DynScrResizeLoad
00006978 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
0000697E 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006984 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
0000698A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006990 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006996 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
0000699C 7000                       		moveq	#0,d0
0000699E 1038 FE10                  		move.b	($FFFFFE10).w,d0
000069A2 D040                       		add.w	d0,d0
000069A4 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000069A8 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000069AC                            ; End of function DeformBgLayer
000069AC                            
000069AC                            ; ===========================================================================
000069AC                            ; ---------------------------------------------------------------------------
000069AC                            ; Offset index for background layer deformation	code
000069AC                            ; ---------------------------------------------------------------------------
000069AC 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000069B0 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000069B4 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000069B8 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_GHZ-Deform_Index
000069BC                            ; ---------------------------------------------------------------------------
000069BC                            ; Green	Hill Zone background layer deformation code
000069BC                            ; ---------------------------------------------------------------------------
000069BC                            
000069BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069BC                            
000069BC                            
000069BC                            Deform_GHZ:				; XREF: Deform_Index
000069BC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000069C0 48C4                       		ext.l	d4
000069C2 EB84                       		asl.l	#5,d4
000069C4 2204                       		move.l	d4,d1
000069C6 E384                       		asl.l	#1,d4
000069C8 D881                       		add.l	d1,d4
000069CA 7A00                       		moveq	#0,d5
000069CC 6100 0000                  		bsr.w	ScrollBlock1
000069D0 6100 0000                  		bsr.w	ScrollBlock4
000069D4 43F8 CC00                  		lea	($FFFFCC00).w,a1
000069D8 3038 F704                  		move.w	($FFFFF704).w,d0
000069DC 0240 07FF                  		andi.w	#$7FF,d0
000069E0 EA48                       		lsr.w	#5,d0
000069E2 4440                       		neg.w	d0
000069E4 0640 0026                  		addi.w	#$26,d0
000069E8 31C0 F714                  		move.w	d0,($FFFFF714).w
000069EC 3800                       		move.w	d0,d4
000069EE 6100 0000                  		bsr.w	ScrollBlock3
000069F2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069F8 323C 006F                  		move.w	#$6F,d1
000069FC 9244                       		sub.w	d4,d1
000069FE 3038 F700                  		move.w	($FFFFF700).w,d0
00006A02 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006A08 6600                       		bne.s	loc_633C
00006A0A 7000                       		moveq	#0,d0
00006A0C                            
00006A0C                            loc_633C:
00006A0C 4440                       		neg.w	d0
00006A0E 4840                       		swap	d0
00006A10 3038 F708                  		move.w	($FFFFF708).w,d0
00006A14 4440                       		neg.w	d0
00006A16                            
00006A16                            loc_6346:
00006A16 22C0                       		move.l	d0,(a1)+
00006A18 51C9 FFFC                  		dbf	d1,loc_6346
00006A1C 323C 0027                  		move.w	#$27,d1
00006A20 3038 F710                  		move.w	($FFFFF710).w,d0
00006A24 4440                       		neg.w	d0
00006A26                            
00006A26                            loc_6356:
00006A26 22C0                       		move.l	d0,(a1)+
00006A28 51C9 FFFC                  		dbf	d1,loc_6356
00006A2C 3038 F710                  		move.w	($FFFFF710).w,d0
00006A30 0640 0000                  		addi.w	#0,d0
00006A34 3438 F700                  		move.w	($FFFFF700).w,d2
00006A38 0642 FE00                  		addi.w	#-$200,d2
00006A3C 9440                       		sub.w	d0,d2
00006A3E 48C2                       		ext.l	d2
00006A40 E182                       		asl.l	#8,d2
00006A42 85FC 0068                  		divs.w	#$68,d2
00006A46 48C2                       		ext.l	d2
00006A48 E182                       		asl.l	#8,d2
00006A4A 7600                       		moveq	#0,d3
00006A4C 3600                       		move.w	d0,d3
00006A4E 323C 0047                  		move.w	#$47,d1
00006A52 D244                       		add.w	d4,d1
00006A54                            
00006A54                            loc_6384:
00006A54 3003                       		move.w	d3,d0
00006A56 4440                       		neg.w	d0
00006A58 22C0                       		move.l	d0,(a1)+
00006A5A 4843                       		swap	d3
00006A5C D682                       		add.l	d2,d3
00006A5E 4843                       		swap	d3
00006A60 51C9 FFF2                  		dbf	d1,loc_6384
00006A64 4E75                       		rts	
00006A66                            ; End of function Deform_GHZ
00006A66                            
00006A66                            ; ---------------------------------------------------------------------------
00006A66                            ; Labyrinth Zone background layer deformation code
00006A66                            ; ---------------------------------------------------------------------------
00006A66                            
00006A66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A66                            
00006A66                            
00006A66                            Deform_LZ:				; XREF: Deform_Index
00006A66 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A6A 48C4                       		ext.l	d4
00006A6C EF84                       		asl.l	#7,d4
00006A6E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006A72 48C5                       		ext.l	d5
00006A74 EF85                       		asl.l	#7,d5
00006A76 6100 0000                  		bsr.w	ScrollBlock1
00006A7A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A80 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A84 323C 00DF                  		move.w	#$DF,d1
00006A88 3038 F700                  		move.w	($FFFFF700).w,d0
00006A8C 4440                       		neg.w	d0
00006A8E 4840                       		swap	d0
00006A90 3038 F708                  		move.w	($FFFFF708).w,d0
00006A94 4440                       		neg.w	d0
00006A96                            
00006A96                            loc_63C6:
00006A96 22C0                       		move.l	d0,(a1)+
00006A98 51C9 FFFC                  		dbf	d1,loc_63C6
00006A9C 3038 F646                  		move.w	($FFFFF646).w,d0
00006AA0 9078 F704                  		sub.w	($FFFFF704).w,d0
00006AA4 4E75                       		rts	
00006AA6                            ; End of function Deform_LZ
00006AA6                            
00006AA6                            ; ---------------------------------------------------------------------------
00006AA6                            ; Marble Zone background layer deformation code
00006AA6                            ; ---------------------------------------------------------------------------
00006AA6                            
00006AA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AA6                            
00006AA6                            
00006AA6                            Deform_MZ:				; XREF: Deform_Index
00006AA6 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006AAA 48C4                       		ext.l	d4
00006AAC ED84                       		asl.l	#6,d4
00006AAE 2204                       		move.l	d4,d1
00006AB0 E384                       		asl.l	#1,d4
00006AB2 D881                       		add.l	d1,d4
00006AB4 7A00                       		moveq	#0,d5
00006AB6 6100 0000                  		bsr.w	ScrollBlock1
00006ABA 303C 0200                  		move.w	#$200,d0
00006ABE 3238 F704                  		move.w	($FFFFF704).w,d1
00006AC2 0441 01C8                  		subi.w	#$1C8,d1
00006AC6 6500                       		bcs.s	loc_6402
00006AC8 3401                       		move.w	d1,d2
00006ACA D241                       		add.w	d1,d1
00006ACC D242                       		add.w	d2,d1
00006ACE E441                       		asr.w	#2,d1
00006AD0 D041                       		add.w	d1,d0
00006AD2                            
00006AD2                            loc_6402:
00006AD2 31C0 F714                  		move.w	d0,($FFFFF714).w
00006AD6 6100 0000                  		bsr.w	ScrollBlock3
00006ADA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006AE0 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AE4 323C 00DF                  		move.w	#$DF,d1
00006AE8 3038 F700                  		move.w	($FFFFF700).w,d0
00006AEC 4440                       		neg.w	d0
00006AEE 4840                       		swap	d0
00006AF0 3038 F708                  		move.w	($FFFFF708).w,d0
00006AF4 4440                       		neg.w	d0
00006AF6                            
00006AF6                            loc_6426:
00006AF6 22C0                       		move.l	d0,(a1)+
00006AF8 51C9 FFFC                  		dbf	d1,loc_6426
00006AFC 4E75                       		rts	
00006AFE                            ; End of function Deform_MZ
00006AFE                            
00006AFE                            ; ---------------------------------------------------------------------------
00006AFE                            ; Star Light Zone background layer deformation code
00006AFE                            ; ---------------------------------------------------------------------------
00006AFE                            
00006AFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AFE                            
00006AFE                            
00006AFE                            Deform_SLZ:				; XREF: Deform_Index
00006AFE 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B02 48C4                       		ext.l	d4
00006B04 EB84                       		asl.l	#5,d4
00006B06 2204                       		move.l	d4,d1
00006B08 E384                       		asl.l	#1,d4
00006B0A D881                       		add.l	d1,d4
00006B0C 7A00                       		moveq	#0,d5
00006B0E 6100 0000                  		bsr.w	ScrollBlock1
00006B12 6100 0000                  		bsr.w	ScrollBlock3
00006B16 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B1A                            	;	move.w	($FFFFF704).w,d0
00006B1A                            	;	andi.w	#$7FF,d0
00006B1A EA48                       		lsr.w	#5,d0
00006B1C 4440                       		neg.w	d0
00006B1E 0640 0026                  		addi.w	#$26,d0
00006B22 31C0 F714                  		move.w	d0,($FFFFF714).w
00006B26 3800                       		move.w	d0,d4
00006B28                            	;	bsr.w	ScrollBlock3
00006B28 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006B2E 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006B32                            
00006B32 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B36 4440                       		neg.w	d0			; negate (positive to negative)
00006B38 4840                       		swap	d0			; send to the left side of d0
00006B3A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B3E 45F8 A800                  		lea	($FFFFA800).w,a2
00006B42 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B48 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B4E 3038 A800                  		move.w	($FFFFA800).w,d0
00006B52 4440                       		neg.w	d0			; negate (positive to negative)
00006B54 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006B56 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B5A                            slz_DeformLoop_1:
00006B5A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B5C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006B60                            
00006B60 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B64 4440                       		neg.w	d0			; negate (positive to negative)
00006B66 4840                       		swap	d0			; send to the left side of d0
00006B68 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B6C 45F8 A800                  		lea	($FFFFA800).w,a2
00006B70 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B76 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B7C 3038 A800                  		move.w	($FFFFA800).w,d0
00006B80 4440                       		neg.w	d0			; negate (positive to negative)
00006B82 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006B84 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B88                            slz_DeformLoop_2:
00006B88 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B8A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006B8E                            
00006B8E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B92 4440                       		neg.w	d0			; negate (positive to negative)
00006B94 4840                       		swap	d0			; send to the left side of d0
00006B96 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B9A 45F8 A800                  		lea	($FFFFA800).w,a2
00006B9E 069A 0000 5000             		addi.l	#$5000,(a2)+
00006BA4 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BAA 3038 A800                  		move.w	($FFFFA800).w,d0
00006BAE 4440                       		neg.w	d0			; negate (positive to negative)
00006BB0 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006BB2 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BB6                            slz_DeformLoop_3:
00006BB6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BB8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006BBC                            
00006BBC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BC0 4440                       		neg.w	d0			; negate (positive to negative)
00006BC2 4840                       		swap	d0			; send to the left side of d0
00006BC4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BC8 45F8 A800                  		lea	($FFFFA800).w,a2
00006BCC 069A 0000 5000             		addi.l	#$5000,(a2)+
00006BD2 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BD8 3038 A800                  		move.w	($FFFFA800).w,d0
00006BDC 4440                       		neg.w	d0			; negate (positive to negative)
00006BDE E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006BE0 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BE4                            slz_DeformLoop_4:
00006BE4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BE6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006BEA                            
00006BEA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BEE 4440                       		neg.w	d0			; negate (positive to negative)
00006BF0 4840                       		swap	d0			; send to the left side of d0
00006BF2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BF6 45F8 A800                  		lea	($FFFFA800).w,a2
00006BFA 069A 0000 5000             		addi.l	#$5000,(a2)+
00006C00 069A 0000 C000             		addi.l	#$C000,(a2)+
00006C06 3038 A800                  		move.w	($FFFFA800).w,d0
00006C0A 4440                       		neg.w	d0			; negate (positive to negative)
00006C0C E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006C0E 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C12                            slz_DeformLoop_5:
00006C12 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C14 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006C18                            
00006C18 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C1C 4440                       		neg.w	d0			; negate (positive to negative)
00006C1E 4840                       		swap	d0			; send to the left side of d0
00006C20 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C24 4440                       		neg.w	d0			; negate (positive to negative)
00006C26 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006C28 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C2C                            slz_DeformLoop_6:
00006C2C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C2E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006C32                            
00006C32 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C36 4440                       		neg.w	d0			; negate (positive to negative)
00006C38 4840                       		swap	d0			; send to the left side of d0
00006C3A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C3E 4440                       		neg.w	d0			; negate (positive to negative)
00006C40 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006C42 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C46                            slz_DeformLoop_7:
00006C46 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C48 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006C4C                            
00006C4C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C50 4440                       		neg.w	d0			; negate (positive to negative)
00006C52 4840                       		swap	d0			; send to the left side of d0
00006C54 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C58 4440                       		neg.w	d0			; negate (positive to negative)
00006C5A EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006C5C 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C60                            slz_DeformLoop_8:
00006C60 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C62 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006C66                            
00006C66 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C6A 4440                       		neg.w	d0			; negate (positive to negative)
00006C6C 4840                       		swap	d0			; send to the left side of d0
00006C6E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C72 4440                       		neg.w	d0			; negate (positive to negative)
00006C74 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006C76 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C7A                            slz_DeformLoop_9:
00006C7A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C7C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006C80                            
00006C80 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C84 4440                       		neg.w	d0			; negate (positive to negative)
00006C86 4840                       		swap	d0			; send to the left side of d0
00006C88 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C8C 4440                       		neg.w	d0			; negate (positive to negative)
00006C8E E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006C90 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C94                            slz_DeformLoop_10:
00006C94 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C96 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006C9A                            
00006C9A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C9E 4440                       		neg.w	d0			; negate (positive to negative)
00006CA0 4840                       		swap	d0			; send to the left side of d0
00006CA2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CA6 4440                       		neg.w	d0			; negate (positive to negative)
00006CA8 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006CAA 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CAE                            slz_DeformLoop_11:
00006CAE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CB0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006CB4                            
00006CB4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006CB8 4440                       		neg.w	d0			; negate (positive to negative)
00006CBA 4840                       		swap	d0			; send to the left side of d0
00006CBC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CC0 4440                       		neg.w	d0			; negate (positive to negative)
00006CC2 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006CC4 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CC8                            slz_DeformLoop_12:
00006CC8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CCA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006CCE                            
00006CCE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006CD2 4440                       		neg.w	d0			; negate (positive to negative)
00006CD4 4840                       		swap	d0			; send to the left side of d0
00006CD6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CDA 4440                       		neg.w	d0			; negate (positive to negative)
00006CDC E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006CDE 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CE2                            slz_DeformLoop_13:
00006CE2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CE4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006CE8 4E75                       		rts	
00006CEA                            ; End of function Deform_SLZ
00006CEA 4E75                       		rts	
00006CEC                            ; End of function Deform_SLZ_2
00006CEC                            
00006CEC                            ; ---------------------------------------------------------------------------
00006CEC                            ; Spring Yard Zone background layer deformation	code
00006CEC                            ; ---------------------------------------------------------------------------
00006CEC                            
00006CEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CEC                            
00006CEC                            
00006CEC                            Deform_SYZ:				; XREF: Deform_Index
00006CEC 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006CF0 48C4                       		ext.l	d4
00006CF2 ED84                       		asl.l	#6,d4
00006CF4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006CF8 48C5                       		ext.l	d5
00006CFA E985                       		asl.l	#4,d5
00006CFC 2205                       		move.l	d5,d1
00006CFE E385                       		asl.l	#1,d5
00006D00 DA81                       		add.l	d1,d5
00006D02 6100 0000                  		bsr.w	ScrollBlock1
00006D06 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D0C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D10 323C 00DF                  		move.w	#$DF,d1
00006D14 3038 F700                  		move.w	($FFFFF700).w,d0
00006D18 4440                       		neg.w	d0
00006D1A 4840                       		swap	d0
00006D1C 3038 F708                  		move.w	($FFFFF708).w,d0
00006D20 4440                       		neg.w	d0
00006D22                            
00006D22                            loc_653C:
00006D22 22C0                       		move.l	d0,(a1)+
00006D24 51C9 FFFC                  		dbf	d1,loc_653C
00006D28 4E75                       		rts	
00006D2A                            ; End of function Deform_SYZ
00006D2A                            
00006D2A                            ; ---------------------------------------------------------------------------
00006D2A                            ; Scrap	Brain Zone background layer deformation	code
00006D2A                            ; ---------------------------------------------------------------------------
00006D2A                            
00006D2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D2A                            
00006D2A                            
00006D2A                            Deform_SBZ:				; XREF: Deform_Index
00006D2A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006D2E 48C4                       		ext.l	d4
00006D30 ED84                       		asl.l	#6,d4
00006D32 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006D36 48C5                       		ext.l	d5
00006D38 E985                       		asl.l	#4,d5
00006D3A E385                       		asl.l	#1,d5
00006D3C 6100 0000                  		bsr.w	ScrollBlock1
00006D40 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D46 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D4A 323C 00DF                  		move.w	#$DF,d1
00006D4E 3038 F700                  		move.w	($FFFFF700).w,d0
00006D52 4440                       		neg.w	d0
00006D54 4840                       		swap	d0
00006D56 3038 F708                  		move.w	($FFFFF708).w,d0
00006D5A 4440                       		neg.w	d0
00006D5C                            
00006D5C                            loc_6576:
00006D5C 22C0                       		move.l	d0,(a1)+
00006D5E 51C9 FFFC                  		dbf	d1,loc_6576
00006D62 4E75                       		rts	
00006D64                            ; End of function Deform_SBZ
00006D64                            
00006D64                            ; ---------------------------------------------------------------------------
00006D64                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006D64                            ; ---------------------------------------------------------------------------
00006D64                            
00006D64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D64                            
00006D64                            
00006D64                            ScrollHoriz:				; XREF: DeformBgLayer
00006D64 3838 F700                  		move.w	($FFFFF700).w,d4
00006D68 6100                       		bsr.s	ScrollHoriz2
00006D6A 3038 F700                  		move.w	($FFFFF700).w,d0
00006D6E 0240 0010                  		andi.w	#$10,d0
00006D72 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006D76 B300                       		eor.b	d1,d0
00006D78 6600                       		bne.s	locret_65B0
00006D7A 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006D80 3038 F700                  		move.w	($FFFFF700).w,d0
00006D84 9044                       		sub.w	d4,d0
00006D86 6A00                       		bpl.s	loc_65AA
00006D88 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006D8E 4E75                       		rts	
00006D90                            ; ===========================================================================
00006D90                            
00006D90                            loc_65AA:
00006D90 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006D96                            
00006D96                            locret_65B0:
00006D96 4E75                       		rts	
00006D98                            ; End of function ScrollHoriz
00006D98                            
00006D98                            
00006D98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D98                            
00006D98                            
00006D98                            ScrollHoriz2:				; XREF: ScrollHoriz
00006D98 3038 D008                  		move.w	($FFFFD008).w,d0
00006D9C 9078 F700                  		sub.w	($FFFFF700).w,d0
00006DA0 0440 0090                  		subi.w	#$90,d0
00006DA4 6500                       		bcs.s	loc_65F6
00006DA6 0440 0010                  		subi.w	#$10,d0
00006DAA 6400                       		bcc.s	loc_65CC
00006DAC 4278 F73A                  		clr.w	($FFFFF73A).w
00006DB0 4E75                       		rts	
00006DB2                            ; ===========================================================================
00006DB2                            
00006DB2                            loc_65CC:
00006DB2 0C40 0010                  		cmpi.w	#$10,d0
00006DB6 6500                       		bcs.s	loc_65D6
00006DB8 303C 0010                  		move.w	#$10,d0
00006DBC                            
00006DBC                            loc_65D6:
00006DBC D078 F700                  		add.w	($FFFFF700).w,d0
00006DC0 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006DC4 6D00                       		blt.s	loc_65E4
00006DC6 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006DCA                            
00006DCA                            loc_65E4:
00006DCA 3200                       		move.w	d0,d1
00006DCC 9278 F700                  		sub.w	($FFFFF700).w,d1
00006DD0 E141                       		asl.w	#8,d1
00006DD2 31C0 F700                  		move.w	d0,($FFFFF700).w
00006DD6 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006DDA 4E75                       		rts	
00006DDC                            ; ===========================================================================
00006DDC                            
00006DDC                            loc_65F6:				; XREF: ScrollHoriz2
00006DDC D078 F700                  		add.w	($FFFFF700).w,d0
00006DE0 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006DE4 6EE4                       		bgt.s	loc_65E4
00006DE6 3038 F728                  		move.w	($FFFFF728).w,d0
00006DEA 60DE                       		bra.s	loc_65E4
00006DEC                            ; End of function ScrollHoriz2
00006DEC                            
00006DEC                            ; ===========================================================================
00006DEC 4A40                       		tst.w	d0
00006DEE 6A00                       		bpl.s	loc_6610
00006DF0 303C FFFE                  		move.w	#-2,d0
00006DF4 60E6                       		bra.s	loc_65F6
00006DF6                            ; ===========================================================================
00006DF6                            
00006DF6                            loc_6610:
00006DF6 303C 0002                  		move.w	#2,d0
00006DFA 60B6                       		bra.s	loc_65CC
00006DFC                            
00006DFC                            ; ---------------------------------------------------------------------------
00006DFC                            ; Subroutine to	scroll the level vertically as Sonic moves
00006DFC                            ; ---------------------------------------------------------------------------
00006DFC                            
00006DFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DFC                            
00006DFC                            
00006DFC                            ScrollVertical:				; XREF: DeformBgLayer
00006DFC 7200                       		moveq	#0,d1
00006DFE 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006E02 9078 F704                  		sub.w	($FFFFF704).w,d0
00006E06 0838 0002 D022             		btst	#2,($FFFFD022).w
00006E0C 6700                       		beq.s	loc_662A
00006E0E 5B40                       		subq.w	#5,d0
00006E10                            
00006E10                            loc_662A:
00006E10 0838 0001 D022             		btst	#1,($FFFFD022).w
00006E16 6700                       		beq.s	loc_664A
00006E18 0640 0020                  		addi.w	#$20,d0
00006E1C 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006E20 6500                       		bcs.s	loc_6696
00006E22 0440 0040                  		subi.w	#$40,d0
00006E26 6400                       		bcc.s	loc_6696
00006E28 4A38 F75C                  		tst.b	($FFFFF75C).w
00006E2C 6600                       		bne.s	loc_66A8
00006E2E 6000                       		bra.s	loc_6656
00006E30                            ; ===========================================================================
00006E30                            
00006E30                            loc_664A:
00006E30 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006E34 6600                       		bne.s	loc_665C
00006E36 4A38 F75C                  		tst.b	($FFFFF75C).w
00006E3A 6600                       		bne.s	loc_66A8
00006E3C                            
00006E3C                            loc_6656:
00006E3C 4278 F73C                  		clr.w	($FFFFF73C).w
00006E40 4E75                       		rts	
00006E42                            ; ===========================================================================
00006E42                            
00006E42                            loc_665C:
00006E42 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006E48 6600                       		bne.s	loc_6684
00006E4A 3238 D014                  		move.w	($FFFFD014).w,d1
00006E4E 6A00                       		bpl.s	loc_666C
00006E50 4441                       		neg.w	d1
00006E52                            
00006E52                            loc_666C:
00006E52 0C41 0800                  		cmpi.w	#$800,d1
00006E56 6400                       		bcc.s	loc_6696
00006E58 323C 0600                  		move.w	#$600,d1
00006E5C 0C40 0006                  		cmpi.w	#6,d0
00006E60 6E00                       		bgt.s	loc_66F6
00006E62 0C40 FFFA                  		cmpi.w	#-6,d0
00006E66 6D00                       		blt.s	loc_66C0
00006E68 6000                       		bra.s	loc_66AE
00006E6A                            ; ===========================================================================
00006E6A                            
00006E6A                            loc_6684:
00006E6A 323C 0200                  		move.w	#$200,d1
00006E6E 0C40 0002                  		cmpi.w	#2,d0
00006E72 6E00                       		bgt.s	loc_66F6
00006E74 0C40 FFFE                  		cmpi.w	#-2,d0
00006E78 6D00                       		blt.s	loc_66C0
00006E7A 6000                       		bra.s	loc_66AE
00006E7C                            ; ===========================================================================
00006E7C                            
00006E7C                            loc_6696:
00006E7C 323C 1000                  		move.w	#$1000,d1
00006E80 0C40 0010                  		cmpi.w	#$10,d0
00006E84 6E00                       		bgt.s	loc_66F6
00006E86 0C40 FFF0                  		cmpi.w	#-$10,d0
00006E8A 6D00                       		blt.s	loc_66C0
00006E8C 6000                       		bra.s	loc_66AE
00006E8E                            ; ===========================================================================
00006E8E                            
00006E8E                            loc_66A8:
00006E8E 7000                       		moveq	#0,d0
00006E90 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006E94                            
00006E94                            loc_66AE:
00006E94 7200                       		moveq	#0,d1
00006E96 3200                       		move.w	d0,d1
00006E98 D278 F704                  		add.w	($FFFFF704).w,d1
00006E9C 4A40                       		tst.w	d0
00006E9E 6A00 0000                  		bpl.w	loc_6700
00006EA2 6000 0000                  		bra.w	loc_66CC
00006EA6                            ; ===========================================================================
00006EA6                            
00006EA6                            loc_66C0:
00006EA6 4441                       		neg.w	d1
00006EA8 48C1                       		ext.l	d1
00006EAA E181                       		asl.l	#8,d1
00006EAC D2B8 F704                  		add.l	($FFFFF704).w,d1
00006EB0 4841                       		swap	d1
00006EB2                            
00006EB2                            loc_66CC:
00006EB2 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006EB6 6E00                       		bgt.s	loc_6724
00006EB8 0C41 FF00                  		cmpi.w	#-$100,d1
00006EBC 6E00                       		bgt.s	loc_66F0
00006EBE 0241 07FF                  		andi.w	#$7FF,d1
00006EC2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006EC8 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006ECE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006ED4 6000                       		bra.s	loc_6724
00006ED6                            ; ===========================================================================
00006ED6                            
00006ED6                            loc_66F0:
00006ED6 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006EDA 6000                       		bra.s	loc_6724
00006EDC                            ; ===========================================================================
00006EDC                            
00006EDC                            loc_66F6:
00006EDC 48C1                       		ext.l	d1
00006EDE E181                       		asl.l	#8,d1
00006EE0 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006EE4 4841                       		swap	d1
00006EE6                            
00006EE6                            loc_6700:
00006EE6 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006EEA 6D00                       		blt.s	loc_6724
00006EEC 0441 0800                  		subi.w	#$800,d1
00006EF0 6500                       		bcs.s	loc_6720
00006EF2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006EF8 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006EFE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006F04 6000                       		bra.s	loc_6724
00006F06                            ; ===========================================================================
00006F06                            
00006F06                            loc_6720:
00006F06 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006F0A                            
00006F0A                            loc_6724:
00006F0A 3838 F704                  		move.w	($FFFFF704).w,d4
00006F0E 4841                       		swap	d1
00006F10 2601                       		move.l	d1,d3
00006F12 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006F16 E09B                       		ror.l	#8,d3
00006F18 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006F1C 21C1 F704                  		move.l	d1,($FFFFF704).w
00006F20 3038 F704                  		move.w	($FFFFF704).w,d0
00006F24 0240 0010                  		andi.w	#$10,d0
00006F28 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006F2C B300                       		eor.b	d1,d0
00006F2E 6600                       		bne.s	locret_6766
00006F30 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006F36 3038 F704                  		move.w	($FFFFF704).w,d0
00006F3A 9044                       		sub.w	d4,d0
00006F3C 6A00                       		bpl.s	loc_6760
00006F3E 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006F44 4E75                       		rts	
00006F46                            ; ===========================================================================
00006F46                            
00006F46                            loc_6760:
00006F46 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006F4C                            
00006F4C                            locret_6766:
00006F4C 4E75                       		rts	
00006F4E                            ; End of function ScrollVertical
00006F4E                            
00006F4E                            
00006F4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F4E                            
00006F4E                            
00006F4E                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006F4E 2438 F708                  		move.l	($FFFFF708).w,d2
00006F52 2002                       		move.l	d2,d0
00006F54 D084                       		add.l	d4,d0
00006F56 21C0 F708                  		move.l	d0,($FFFFF708).w
00006F5A 2200                       		move.l	d0,d1
00006F5C 4841                       		swap	d1
00006F5E 0241 0010                  		andi.w	#$10,d1
00006F62 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006F66 B701                       		eor.b	d3,d1
00006F68 6600                       		bne.s	loc_679C
00006F6A 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006F70 9082                       		sub.l	d2,d0
00006F72 6A00                       		bpl.s	loc_6796
00006F74 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006F7A 6000                       		bra.s	loc_679C
00006F7C                            ; ===========================================================================
00006F7C                            
00006F7C                            loc_6796:
00006F7C 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006F82                            
00006F82                            loc_679C:
00006F82 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006F86 2003                       		move.l	d3,d0
00006F88 D085                       		add.l	d5,d0
00006F8A 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006F8E 2200                       		move.l	d0,d1
00006F90 4841                       		swap	d1
00006F92 0241 0010                  		andi.w	#$10,d1
00006F96 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006F9A B501                       		eor.b	d2,d1
00006F9C 6600                       		bne.s	locret_67D0
00006F9E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006FA4 9083                       		sub.l	d3,d0
00006FA6 6A00                       		bpl.s	loc_67CA
00006FA8 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006FAE 4E75                       		rts	
00006FB0                            ; ===========================================================================
00006FB0                            
00006FB0                            loc_67CA:
00006FB0 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006FB6                            
00006FB6                            locret_67D0:
00006FB6 4E75                       		rts	
00006FB8                            ; End of function ScrollBlock1
00006FB8                            
00006FB8                            
00006FB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FB8                            
00006FB8                            
00006FB8                            ScrollBlock2:				; XREF: Deform_SLZ
00006FB8 2438 F708                  		move.l	($FFFFF708).w,d2
00006FBC 2002                       		move.l	d2,d0
00006FBE D084                       		add.l	d4,d0
00006FC0 21C0 F708                  		move.l	d0,($FFFFF708).w
00006FC4 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006FC8 2003                       		move.l	d3,d0
00006FCA D085                       		add.l	d5,d0
00006FCC 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006FD0 2200                       		move.l	d0,d1
00006FD2 4841                       		swap	d1
00006FD4 0241 0010                  		andi.w	#$10,d1
00006FD8 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006FDC B501                       		eor.b	d2,d1
00006FDE 6600                       		bne.s	locret_6812
00006FE0 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006FE6 9083                       		sub.l	d3,d0
00006FE8 6A00                       		bpl.s	loc_680C
00006FEA 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006FF0 4E75                       		rts	
00006FF2                            ; ===========================================================================
00006FF2                            
00006FF2                            loc_680C:
00006FF2 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006FF8                            
00006FF8                            locret_6812:
00006FF8 4E75                       		rts	
00006FFA                            ; End of function ScrollBlock2
00006FFA                            
00006FFA                            
00006FFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FFA                            
00006FFA                            
00006FFA                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006FFA 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006FFE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007002 3200                       		move.w	d0,d1
00007004 0241 0010                  		andi.w	#$10,d1
00007008 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000700C B501                       		eor.b	d2,d1
0000700E 6600                       		bne.s	locret_6842
00007010 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007016 9043                       		sub.w	d3,d0
00007018 6A00                       		bpl.s	loc_683C
0000701A 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007020 4E75                       		rts	
00007022                            ; ===========================================================================
00007022                            
00007022                            loc_683C:
00007022 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007028                            
00007028                            locret_6842:
00007028 4E75                       		rts	
0000702A                            ; End of function ScrollBlock3
0000702A                            
0000702A                            
0000702A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000702A                            
0000702A                            
0000702A                            ScrollBlock4:				; XREF: Deform_GHZ
0000702A 3438 F710                  		move.w	($FFFFF710).w,d2
0000702E 3638 F714                  		move.w	($FFFFF714).w,d3
00007032 3038 F73A                  		move.w	($FFFFF73A).w,d0
00007036 48C0                       		ext.l	d0
00007038 EF80                       		asl.l	#7,d0
0000703A D1B8 F710                  		add.l	d0,($FFFFF710).w
0000703E 3038 F710                  		move.w	($FFFFF710).w,d0
00007042 0240 0010                  		andi.w	#$10,d0
00007046 1238 F74E                  		move.b	($FFFFF74E).w,d1
0000704A B300                       		eor.b	d1,d0
0000704C 6600                       		bne.s	locret_6884
0000704E 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00007054 3038 F710                  		move.w	($FFFFF710).w,d0
00007058 9042                       		sub.w	d2,d0
0000705A 6A00                       		bpl.s	loc_687E
0000705C 08F8 0002 F758             		bset	#2,($FFFFF758).w
00007062 6000                       		bra.s	locret_6884
00007064                            ; ===========================================================================
00007064                            
00007064                            loc_687E:
00007064 08F8 0003 F758             		bset	#3,($FFFFF758).w
0000706A                            
0000706A                            locret_6884:
0000706A 4E75                       		rts	
0000706C                            ; End of function ScrollBlock4
0000706C                            
0000706C                            
0000706C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000706C                            
0000706C                            
0000706C                            sub_6886:				; XREF: loc_C44
0000706C 4BF9 00C0 0004             		lea	($C00004).l,a5
00007072 4DF9 00C0 0000             		lea	($C00000).l,a6
00007078 45F8 F756                  		lea	($FFFFF756).w,a2
0000707C 47F8 F708                  		lea	($FFFFF708).w,a3
00007080 49F8 A440                  		lea	($FFFFA440).w,a4
00007084 343C 6000                  		move.w	#$6000,d2
00007088 6100 0000                  		bsr.w	sub_6954
0000708C 45F8 F758                  		lea	($FFFFF758).w,a2
00007090 47F8 F710                  		lea	($FFFFF710).w,a3
00007094 6000 0000                  		bra.w	sub_69F4
00007098                            ; End of function sub_6886
00007098                            
00007098                            ; ---------------------------------------------------------------------------
00007098                            ; Subroutine to	display	correct	tiles as you move
00007098                            ; ---------------------------------------------------------------------------
00007098                            
00007098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007098                            
00007098                            
00007098                            LoadTilesAsYouMove:			; XREF: Demo_Time
00007098 4BF9 00C0 0004             		lea	($C00004).l,a5
0000709E 4DF9 00C0 0000             		lea	($C00000).l,a6
000070A4 45F8 FF32                  		lea	($FFFFFF32).w,a2
000070A8 47F8 FF18                  		lea	($FFFFFF18).w,a3
000070AC 49F8 A440                  		lea	($FFFFA440).w,a4
000070B0 343C 6000                  		move.w	#$6000,d2
000070B4 6100 0000                  		bsr.w	sub_6954
000070B8 45F8 FF34                  		lea	($FFFFFF34).w,a2
000070BC 47F8 FF20                  		lea	($FFFFFF20).w,a3
000070C0 6100 0000                  		bsr.w	sub_69F4
000070C4 45F8 FF30                  		lea	($FFFFFF30).w,a2
000070C8 47F8 FF10                  		lea	($FFFFFF10).w,a3
000070CC 49F8 A400                  		lea	($FFFFA400).w,a4
000070D0 343C 4000                  		move.w	#$4000,d2
000070D4 4A12                       		tst.b	(a2)
000070D6 6700                       		beq.s	locret_6952
000070D8 0892 0000                  		bclr	#0,(a2)
000070DC 6700                       		beq.s	loc_6908
000070DE 78F0                       		moveq	#-$10,d4
000070E0 7AF0                       		moveq	#-$10,d5
000070E2 6100 0000                  		bsr.w	sub_6C20
000070E6 78F0                       		moveq	#-$10,d4
000070E8 7AF0                       		moveq	#-$10,d5
000070EA 6100 0000                  		bsr.w	sub_6AD8
000070EE                            
000070EE                            loc_6908:
000070EE 0892 0001                  		bclr	#1,(a2)
000070F2 6700                       		beq.s	loc_6922
000070F4 383C 00E0                  		move.w	#$E0,d4
000070F8 7AF0                       		moveq	#-$10,d5
000070FA 6100 0000                  		bsr.w	sub_6C20
000070FE 383C 00E0                  		move.w	#$E0,d4
00007102 7AF0                       		moveq	#-$10,d5
00007104 6100 0000                  		bsr.w	sub_6AD8
00007108                            
00007108                            loc_6922:
00007108 0892 0002                  		bclr	#2,(a2)
0000710C 6700                       		beq.s	loc_6938
0000710E 78F0                       		moveq	#-$10,d4
00007110 7AF0                       		moveq	#-$10,d5
00007112 6100 0000                  		bsr.w	sub_6C20
00007116 78F0                       		moveq	#-$10,d4
00007118 7AF0                       		moveq	#-$10,d5
0000711A 6100 0000                  		bsr.w	sub_6B04
0000711E                            
0000711E                            loc_6938:
0000711E 0892 0003                  		bclr	#3,(a2)
00007122 6700                       		beq.s	locret_6952
00007124 78F0                       		moveq	#-$10,d4
00007126 3A3C 0140                  		move.w	#$140,d5
0000712A 6100 0000                  		bsr.w	sub_6C20
0000712E 78F0                       		moveq	#-$10,d4
00007130 3A3C 0140                  		move.w	#$140,d5
00007134 6100 0000                  		bsr.w	sub_6B04
00007138                            
00007138                            locret_6952:
00007138 4E75                       		rts	
0000713A                            ; End of function LoadTilesAsYouMove
0000713A                            
0000713A                            
0000713A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000713A                            
0000713A                            
0000713A                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
0000713A 4A12                       		tst.b	(a2)
0000713C 6700 0000                  		beq.w	locret_69F2
00007140 0892 0000                  		bclr	#0,(a2)
00007144 6700                       		beq.s	loc_6972
00007146 78F0                       		moveq	#-$10,d4
00007148 7AF0                       		moveq	#-$10,d5
0000714A 6100 0000                  		bsr.w	sub_6C20
0000714E 78F0                       		moveq	#-$10,d4
00007150 7AF0                       		moveq	#-$10,d5
00007152 7C1F                       		moveq	#$1F,d6
00007154 6100 0000                  		bsr.w	sub_6ADA
00007158                            
00007158                            loc_6972:
00007158 0892 0001                  		bclr	#1,(a2)
0000715C 6700                       		beq.s	loc_698E
0000715E 383C 00E0                  		move.w	#$E0,d4
00007162 7AF0                       		moveq	#-$10,d5
00007164 6100 0000                  		bsr.w	sub_6C20
00007168 383C 00E0                  		move.w	#$E0,d4
0000716C 7AF0                       		moveq	#-$10,d5
0000716E 7C1F                       		moveq	#$1F,d6
00007170 6100 0000                  		bsr.w	sub_6ADA
00007174                            
00007174                            loc_698E:
00007174 0892 0002                  		bclr	#2,(a2)
00007178 6700                       		beq.s	loc_69BE
0000717A 78F0                       		moveq	#-$10,d4
0000717C 7AF0                       		moveq	#-$10,d5
0000717E 6100 0000                  		bsr.w	sub_6C20
00007182 78F0                       		moveq	#-$10,d4
00007184 7AF0                       		moveq	#-$10,d5
00007186 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000718A 322B 0004                  		move.w	4(a3),d1
0000718E 0241 FFF0                  		andi.w	#-$10,d1
00007192 9C41                       		sub.w	d1,d6
00007194 6D00                       		blt.s	loc_69BE
00007196 E84E                       		lsr.w	#4,d6
00007198 0C46 000F                  		cmpi.w	#$F,d6
0000719C 6500                       		bcs.s	loc_69BA
0000719E 7C0F                       		moveq	#$F,d6
000071A0                            
000071A0                            loc_69BA:
000071A0 6100 0000                  		bsr.w	sub_6B06
000071A4                            
000071A4                            loc_69BE:
000071A4 0892 0003                  		bclr	#3,(a2)
000071A8 6700                       		beq.s	locret_69F2
000071AA 78F0                       		moveq	#-$10,d4
000071AC 3A3C 0140                  		move.w	#$140,d5
000071B0 6100 0000                  		bsr.w	sub_6C20
000071B4 78F0                       		moveq	#-$10,d4
000071B6 3A3C 0140                  		move.w	#$140,d5
000071BA 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000071BE 322B 0004                  		move.w	4(a3),d1
000071C2 0241 FFF0                  		andi.w	#-$10,d1
000071C6 9C41                       		sub.w	d1,d6
000071C8 6D00                       		blt.s	locret_69F2
000071CA E84E                       		lsr.w	#4,d6
000071CC 0C46 000F                  		cmpi.w	#$F,d6
000071D0 6500                       		bcs.s	loc_69EE
000071D2 7C0F                       		moveq	#$F,d6
000071D4                            
000071D4                            loc_69EE:
000071D4 6100 0000                  		bsr.w	sub_6B06
000071D8                            
000071D8                            locret_69F2:
000071D8 4E75                       		rts	
000071DA                            ; End of function sub_6954
000071DA                            
000071DA                            
000071DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071DA                            
000071DA                            
000071DA                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
000071DA 4A12                       		tst.b	(a2)
000071DC 6700 0000                  		beq.w	locret_6A80
000071E0 0892 0002                  		bclr	#2,(a2)
000071E4 6700                       		beq.s	loc_6A3E
000071E6 0C53 0010                  		cmpi.w	#$10,(a3)
000071EA 6500                       		bcs.s	loc_6A3E
000071EC 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000071F0 322B 0004                  		move.w	4(a3),d1
000071F4 0241 FFF0                  		andi.w	#-$10,d1
000071F8 9841                       		sub.w	d1,d4
000071FA 3F04                       		move.w	d4,-(sp)
000071FC 7AF0                       		moveq	#-$10,d5
000071FE 6100 0000                  		bsr.w	sub_6C20
00007202 381F                       		move.w	(sp)+,d4
00007204 7AF0                       		moveq	#-$10,d5
00007206 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000720A 322B 0004                  		move.w	4(a3),d1
0000720E 0241 FFF0                  		andi.w	#-$10,d1
00007212 9C41                       		sub.w	d1,d6
00007214 6D00                       		blt.s	loc_6A3E
00007216 E84E                       		lsr.w	#4,d6
00007218 0446 000E                  		subi.w	#$E,d6
0000721C 6400                       		bcc.s	loc_6A3E
0000721E 4446                       		neg.w	d6
00007220 6100 0000                  		bsr.w	sub_6B06
00007224                            
00007224                            loc_6A3E:
00007224 0892 0003                  		bclr	#3,(a2)
00007228 6700                       		beq.s	locret_6A80
0000722A 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000722E 322B 0004                  		move.w	4(a3),d1
00007232 0241 FFF0                  		andi.w	#-$10,d1
00007236 9841                       		sub.w	d1,d4
00007238 3F04                       		move.w	d4,-(sp)
0000723A 3A3C 0140                  		move.w	#$140,d5
0000723E 6100 0000                  		bsr.w	sub_6C20
00007242 381F                       		move.w	(sp)+,d4
00007244 3A3C 0140                  		move.w	#$140,d5
00007248 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000724C 322B 0004                  		move.w	4(a3),d1
00007250 0241 FFF0                  		andi.w	#-$10,d1
00007254 9C41                       		sub.w	d1,d6
00007256 6D00                       		blt.s	locret_6A80
00007258 E84E                       		lsr.w	#4,d6
0000725A 0446 000E                  		subi.w	#$E,d6
0000725E 6400                       		bcc.s	locret_6A80
00007260 4446                       		neg.w	d6
00007262 6100 0000                  		bsr.w	sub_6B06
00007266                            
00007266                            locret_6A80:
00007266 4E75                       		rts	
00007268                            ; End of function sub_69F4
00007268                            
00007268                            ; ===========================================================================
00007268 4A12                       		tst.b	(a2)
0000726A 6700                       		beq.s	locret_6AD6
0000726C 0892 0002                  		bclr	#2,(a2)
00007270 6700                       		beq.s	loc_6AAC
00007272 383C 00D0                  		move.w	#$D0,d4
00007276 322B 0004                  		move.w	4(a3),d1
0000727A 0241 FFF0                  		andi.w	#-$10,d1
0000727E 9841                       		sub.w	d1,d4
00007280 3F04                       		move.w	d4,-(sp)
00007282 7AF0                       		moveq	#-$10,d5
00007284 6100 0000                  		bsr.w	sub_6C3C
00007288 381F                       		move.w	(sp)+,d4
0000728A 7AF0                       		moveq	#-$10,d5
0000728C 7C02                       		moveq	#2,d6
0000728E 6100 0000                  		bsr.w	sub_6B06
00007292                            
00007292                            loc_6AAC:
00007292 0892 0003                  		bclr	#3,(a2)
00007296 6700                       		beq.s	locret_6AD6
00007298 383C 00D0                  		move.w	#$D0,d4
0000729C 322B 0004                  		move.w	4(a3),d1
000072A0 0241 FFF0                  		andi.w	#-$10,d1
000072A4 9841                       		sub.w	d1,d4
000072A6 3F04                       		move.w	d4,-(sp)
000072A8 3A3C 0140                  		move.w	#$140,d5
000072AC 6100 0000                  		bsr.w	sub_6C3C
000072B0 381F                       		move.w	(sp)+,d4
000072B2 3A3C 0140                  		move.w	#$140,d5
000072B6 7C02                       		moveq	#2,d6
000072B8 6100 0000                  		bsr.w	sub_6B06
000072BC                            
000072BC                            locret_6AD6:
000072BC 4E75                       		rts	
000072BE                            
000072BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072BE                            
000072BE                            
000072BE                            sub_6AD8:				; XREF: LoadTilesAsYouMove
000072BE 7C15                       		moveq	#$15,d6
000072C0                            ; End of function sub_6AD8
000072C0                            
000072C0                            
000072C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072C0                            
000072C0                            
000072C0                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
000072C0 2E3C 0080 0000             		move.l	#$800000,d7
000072C6 2200                       		move.l	d0,d1
000072C8                            
000072C8                            loc_6AE2:
000072C8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000072CC 6100 0000                  		bsr.w	sub_6BD6
000072D0 2001                       		move.l	d1,d0
000072D2 6100 0000                  		bsr.w	sub_6B32
000072D6 5801                       		addq.b	#4,d1
000072D8 0201 007F                  		andi.b	#$7F,d1
000072DC 4CDF 0030                  		movem.l	(sp)+,d4-d5
000072E0 0645 0010                  		addi.w	#$10,d5
000072E4 51CE FFE2                  		dbf	d6,loc_6AE2
000072E8 4E75                       		rts	
000072EA                            ; End of function sub_6ADA
000072EA                            
000072EA                            
000072EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072EA                            
000072EA                            
000072EA                            sub_6B04:				; XREF: LoadTilesAsYouMove
000072EA 7C0F                       		moveq	#$F,d6
000072EC                            ; End of function sub_6B04
000072EC                            
000072EC                            
000072EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072EC                            
000072EC                            
000072EC                            sub_6B06:				; XREF: sub_6954
000072EC 2E3C 0080 0000             		move.l	#$800000,d7
000072F2 2200                       		move.l	d0,d1
000072F4                            
000072F4                            loc_6B0E:
000072F4 48E7 0C00                  		movem.l	d4-d5,-(sp)
000072F8 6100 0000                  		bsr.w	sub_6BD6
000072FC 2001                       		move.l	d1,d0
000072FE 6100 0000                  		bsr.w	sub_6B32
00007302 0641 0100                  		addi.w	#$100,d1
00007306 0241 0FFF                  		andi.w	#$FFF,d1
0000730A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000730E 0644 0010                  		addi.w	#$10,d4
00007312 51CE FFE0                  		dbf	d6,loc_6B0E
00007316 4E75                       		rts	
00007318                            ; End of function sub_6B06
00007318                            
00007318                            
00007318                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007318                            
00007318                            
00007318                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007318 8042                       		or.w	d2,d0
0000731A 4840                       		swap	d0
0000731C 0810 0004                  		btst	#4,(a0)
00007320 6600                       		bne.s	loc_6B6E
00007322 0810 0003                  		btst	#3,(a0)
00007326 6600                       		bne.s	loc_6B4E
00007328 2A80                       		move.l	d0,(a5)
0000732A 2C99                       		move.l	(a1)+,(a6)
0000732C D087                       		add.l	d7,d0
0000732E 2A80                       		move.l	d0,(a5)
00007330 2C99                       		move.l	(a1)+,(a6)
00007332 4E75                       		rts	
00007334                            ; ===========================================================================
00007334                            
00007334                            loc_6B4E:
00007334 2A80                       		move.l	d0,(a5)
00007336 2819                       		move.l	(a1)+,d4
00007338 0A84 0800 0800             		eori.l	#$8000800,d4
0000733E 4844                       		swap	d4
00007340 2C84                       		move.l	d4,(a6)
00007342 D087                       		add.l	d7,d0
00007344 2A80                       		move.l	d0,(a5)
00007346 2819                       		move.l	(a1)+,d4
00007348 0A84 0800 0800             		eori.l	#$8000800,d4
0000734E 4844                       		swap	d4
00007350 2C84                       		move.l	d4,(a6)
00007352 4E75                       		rts	
00007354                            ; ===========================================================================
00007354                            
00007354                            loc_6B6E:
00007354 0810 0003                  		btst	#3,(a0)
00007358 6600                       		bne.s	loc_6B90
0000735A 2A80                       		move.l	d0,(a5)
0000735C 2A19                       		move.l	(a1)+,d5
0000735E 2819                       		move.l	(a1)+,d4
00007360 0A84 1000 1000             		eori.l	#$10001000,d4
00007366 2C84                       		move.l	d4,(a6)
00007368 D087                       		add.l	d7,d0
0000736A 2A80                       		move.l	d0,(a5)
0000736C 0A85 1000 1000             		eori.l	#$10001000,d5
00007372 2C85                       		move.l	d5,(a6)
00007374 4E75                       		rts	
00007376                            ; ===========================================================================
00007376                            
00007376                            loc_6B90:
00007376 2A80                       		move.l	d0,(a5)
00007378 2A19                       		move.l	(a1)+,d5
0000737A 2819                       		move.l	(a1)+,d4
0000737C 0A84 1800 1800             		eori.l	#$18001800,d4
00007382 4844                       		swap	d4
00007384 2C84                       		move.l	d4,(a6)
00007386 D087                       		add.l	d7,d0
00007388 2A80                       		move.l	d0,(a5)
0000738A 0A85 1800 1800             		eori.l	#$18001800,d5
00007390 4845                       		swap	d5
00007392 2C85                       		move.l	d5,(a6)
00007394 4E75                       		rts	
00007396                            ; End of function sub_6B32
00007396                            
00007396                            ; ===========================================================================
00007396 4E75                       		rts	
00007398                            ; ===========================================================================
00007398 2A80                       		move.l	d0,(a5)
0000739A 3A3C 2000                  		move.w	#$2000,d5
0000739E 3819                       		move.w	(a1)+,d4
000073A0 D845                       		add.w	d5,d4
000073A2 3C84                       		move.w	d4,(a6)
000073A4 3819                       		move.w	(a1)+,d4
000073A6 D845                       		add.w	d5,d4
000073A8 3C84                       		move.w	d4,(a6)
000073AA D087                       		add.l	d7,d0
000073AC 2A80                       		move.l	d0,(a5)
000073AE 3819                       		move.w	(a1)+,d4
000073B0 D845                       		add.w	d5,d4
000073B2 3C84                       		move.w	d4,(a6)
000073B4 3819                       		move.w	(a1)+,d4
000073B6 D845                       		add.w	d5,d4
000073B8 3C84                       		move.w	d4,(a6)
000073BA 4E75                       		rts	
000073BC                            
000073BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073BC                            
000073BC                            
000073BC                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
000073BC 43F8 B000                  		lea	($FFFFB000).w,a1
000073C0 D86B 0004                  		add.w	4(a3),d4
000073C4 DA53                       		add.w	(a3),d5
000073C6 3604                       		move.w	d4,d3
000073C8 E24B                       		lsr.w	#1,d3
000073CA 0243 0380                  		andi.w	#$380,d3
000073CE E64D                       		lsr.w	#3,d5
000073D0 3005                       		move.w	d5,d0
000073D2 EA48                       		lsr.w	#5,d0
000073D4 0240 007F                  		andi.w	#$7F,d0
000073D8 D043                       		add.w	d3,d0
000073DA 76FF                       		moveq	#-1,d3
000073DC 1634 0000                  		move.b	(a4,d0.w),d3
000073E0 6700                       		beq.s	locret_6C1E
000073E2 5303                       		subq.b	#1,d3
000073E4 0243 007F                  		andi.w	#$7F,d3
000073E8 EE5B                       		ror.w	#7,d3
000073EA D844                       		add.w	d4,d4
000073EC 0244 01E0                  		andi.w	#$1E0,d4
000073F0 0245 001E                  		andi.w	#$1E,d5
000073F4 D644                       		add.w	d4,d3
000073F6 D645                       		add.w	d5,d3
000073F8 2043                       		movea.l	d3,a0
000073FA 3610                       		move.w	(a0),d3
000073FC 0243 03FF                  		andi.w	#$3FF,d3
00007400 E74B                       		lsl.w	#3,d3
00007402 D2C3                       		adda.w	d3,a1
00007404                            
00007404                            locret_6C1E:
00007404 4E75                       		rts	
00007406                            ; End of function sub_6BD6
00007406                            
00007406                            
00007406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007406                            
00007406                            
00007406                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007406 D86B 0004                  		add.w	4(a3),d4
0000740A DA53                       		add.w	(a3),d5
0000740C 0244 00F0                  		andi.w	#$F0,d4
00007410 0245 01F0                  		andi.w	#$1F0,d5
00007414 E94C                       		lsl.w	#4,d4
00007416 E44D                       		lsr.w	#2,d5
00007418 D845                       		add.w	d5,d4
0000741A 7003                       		moveq	#3,d0
0000741C 4840                       		swap	d0
0000741E 3004                       		move.w	d4,d0
00007420 4E75                       		rts	
00007422                            ; End of function sub_6C20
00007422                            
00007422                            
00007422                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007422                            ; not used
00007422                            
00007422                            
00007422                            sub_6C3C:
00007422 D86B 0004                  		add.w	4(a3),d4
00007426 DA53                       		add.w	(a3),d5
00007428 0244 00F0                  		andi.w	#$F0,d4
0000742C 0245 01F0                  		andi.w	#$1F0,d5
00007430 E94C                       		lsl.w	#4,d4
00007432 E44D                       		lsr.w	#2,d5
00007434 D845                       		add.w	d5,d4
00007436 7002                       		moveq	#2,d0
00007438 4840                       		swap	d0
0000743A 3004                       		move.w	d4,d0
0000743C 4E75                       		rts	
0000743E                            ; End of function sub_6C3C
0000743E                            
0000743E                            ; ---------------------------------------------------------------------------
0000743E                            ; Subroutine to	load tiles as soon as the level	appears
0000743E                            ; ---------------------------------------------------------------------------
0000743E                            
0000743E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000743E                            
0000743E                            
0000743E                            LoadTilesFromStart:			; XREF: Level; EndingSequence
0000743E 4BF9 00C0 0004             		lea	($C00004).l,a5
00007444 4DF9 00C0 0000             		lea	($C00000).l,a6
0000744A 47F8 F700                  		lea	($FFFFF700).w,a3
0000744E 49F8 A400                  		lea	($FFFFA400).w,a4
00007452 343C 4000                  		move.w	#$4000,d2
00007456 6100                       		bsr.s	LoadTilesFromStart2
00007458 47F8 F708                  		lea	($FFFFF708).w,a3
0000745C 49F8 A440                  		lea	($FFFFA440).w,a4
00007460 343C 6000                  		move.w	#$6000,d2
00007464                            ; End of function LoadTilesFromStart
00007464                            
00007464                            
00007464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007464                            
00007464                            
00007464                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007464 78F0                       		moveq	#-$10,d4
00007466 7C0F                       		moveq	#$F,d6
00007468                            
00007468                            loc_6C82:
00007468 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000746C 7A00                       		moveq	#0,d5
0000746E 3204                       		move.w	d4,d1
00007470 6100 FF94                  		bsr.w	sub_6C20
00007474 3801                       		move.w	d1,d4
00007476 7A00                       		moveq	#0,d5
00007478 7C1F                       		moveq	#$1F,d6
0000747A 6100 FE44                  		bsr.w	sub_6ADA
0000747E 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007482 0644 0010                  		addi.w	#$10,d4
00007486 51CE FFE0                  		dbf	d6,loc_6C82
0000748A 4E75                       		rts	
0000748C                            ; End of function LoadTilesFromStart2
0000748C                            
0000748C                            ; ---------------------------------------------------------------------------
0000748C                            ; Main Load Block loading subroutine
0000748C                            ; ---------------------------------------------------------------------------
0000748C                            
0000748C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000748C                            
0000748C                            
0000748C                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
0000748C 7000                       		moveq	#0,d0
0000748E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007492 E948                       		lsl.w	#4,d0
00007494 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000749A 45F2 0000                  		lea	(a2,d0.w),a2
0000749E 2F0A                       		move.l	a2,-(sp)
000074A0 588A                       		addq.l	#4,a2
000074A2 205A                       		movea.l	(a2)+,a0
000074A4 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000074A8 303C 0000                  		move.w	#0,d0
000074AC 6100 A4A6                  		bsr.w	EniDec
000074B0 205A                       		movea.l	(a2)+,a0
000074B2 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
000074B8 6100 A618                  		bsr.w	KosDec
000074BC 6100 0000                  		bsr.w	LevelLayoutLoad
000074C0 301A                       		move.w	(a2)+,d0
000074C2 3012                       		move.w	(a2),d0
000074C4 0240 00FF                  		andi.w	#$FF,d0
000074C8 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
000074CE 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000074D0 700C                       		moveq	#$C,d0		; use SB3 pallet
000074D2                            
000074D2                            MLB_ChkSBZPal:
000074D2 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000074D8 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000074DA 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000074E0 6600                       		bne.s	MLB_NormalPal	; if not, branch
000074E2                            
000074E2                            MLB_UsePal0E:
000074E2 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000074E4                            
000074E4                            MLB_NormalPal:
000074E4 6100 AE18                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000074E8 245F                       		movea.l	(sp)+,a2
000074EA 584A                       		addq.w	#4,a2
000074EC 7000                       		moveq	#0,d0
000074EE 1012                       		move.b	(a2),d0
000074F0 6700                       		beq.s	locret_6D10
000074F2 6100 A2C2                  		bsr.w	LoadPLC		; load pattern load cues
000074F6                            
000074F6                            locret_6D10:
000074F6 4E75                       		rts	
000074F8                            ; End of function MainLoadBlockLoad
000074F8                            
000074F8                            ; ---------------------------------------------------------------------------
000074F8                            ; Level	layout loading subroutine
000074F8                            ; ---------------------------------------------------------------------------
000074F8                            
000074F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074F8                            
000074F8                            
000074F8                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000074F8 47F8 A400                  		lea	($FFFFA400).w,a3
000074FC 323C 01FF                  		move.w	#$1FF,d1
00007500 7000                       		moveq	#0,d0
00007502                            
00007502                            LevLoad_ClrRam:
00007502 26C0                       		move.l	d0,(a3)+
00007504 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007508                            
00007508 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
0000750C 7200                       		moveq	#0,d1
0000750E 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007512 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007516 7202                       		moveq	#2,d1
00007518                            ; End of function LevelLayoutLoad
00007518                            
00007518                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007518                            
00007518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007518                            
00007518                            
00007518                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007518 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000751C ED08                       		lsl.b	#6,d0
0000751E EA48                       		lsr.w	#5,d0
00007520 3400                       		move.w	d0,d2
00007522 D040                       		add.w	d0,d0
00007524 D042                       		add.w	d2,d0
00007526 D041                       		add.w	d1,d0
00007528 43F9 0000 0000             		lea	(Level_Index).l,a1
0000752E 3031 0000                  		move.w	(a1,d0.w),d0
00007532 43F1 0000                  		lea	(a1,d0.w),a1
00007536 7200                       		moveq	#0,d1
00007538 3401                       		move.w	d1,d2
0000753A 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
0000753C 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000753E                            
0000753E                            LevLoad_NumRows:
0000753E 3001                       		move.w	d1,d0
00007540 204B                       		movea.l	a3,a0
00007542                            
00007542                            LevLoad_Row:
00007542 10D9                       		move.b	(a1)+,(a0)+
00007544 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007548 47EB 0080                  		lea	$80(a3),a3	; do next row
0000754C 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007550 4E75                       		rts	
00007552                            ; End of function LevelLayoutLoad2
00007552                            
00007552                            ; ---------------------------------------------------------------------------
00007552                            ; Dynamic screen resize	loading	subroutine
00007552                            ; ---------------------------------------------------------------------------
00007552                            
00007552                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007552                            
00007552                            
00007552                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007552 7000                       		moveq	#0,d0
00007554 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007558 D040                       		add.w	d0,d0
0000755A 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000755E 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007562 7202                       		moveq	#2,d1
00007564 3038 F726                  		move.w	($FFFFF726).w,d0
00007568 9078 F72E                  		sub.w	($FFFFF72E).w,d0
0000756C 6700                       		beq.s	locret_6DAA
0000756E 6400                       		bcc.s	loc_6DAC
00007570 4441                       		neg.w	d1
00007572 3038 F704                  		move.w	($FFFFF704).w,d0
00007576 B078 F726                  		cmp.w	($FFFFF726).w,d0
0000757A 6300                       		bls.s	loc_6DA0
0000757C 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007580 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007586                            
00007586                            loc_6DA0:
00007586 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000758A 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007590                            
00007590                            locret_6DAA:
00007590 4E75                       		rts	
00007592                            ; ===========================================================================
00007592                            
00007592                            loc_6DAC:				; XREF: DynScrResizeLoad
00007592 3038 F704                  		move.w	($FFFFF704).w,d0
00007596 5040                       		addq.w	#8,d0
00007598 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000759C 6500                       		bcs.s	loc_6DC4
0000759E 0838 0001 D022             		btst	#1,($FFFFD022).w
000075A4 6700                       		beq.s	loc_6DC4
000075A6 D241                       		add.w	d1,d1
000075A8 D241                       		add.w	d1,d1
000075AA                            
000075AA                            loc_6DC4:
000075AA D378 F72E                  		add.w	d1,($FFFFF72E).w
000075AE 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000075B4 4E75                       		rts	
000075B6                            ; End of function DynScrResizeLoad
000075B6                            
000075B6                            ; ===========================================================================
000075B6                            ; ---------------------------------------------------------------------------
000075B6                            ; Offset index for dynamic screen resizing
000075B6                            ; ---------------------------------------------------------------------------
000075B6 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
000075BA 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
000075BE 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
000075C2 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_GHZ-Resize_Index
000075C6                            ; ===========================================================================
000075C6                            ; ---------------------------------------------------------------------------
000075C6                            ; Green	Hill Zone dynamic screen resizing
000075C6                            ; ---------------------------------------------------------------------------
000075C6                            
000075C6                            Resize_GHZ:				; XREF: Resize_Index
000075C6 7000                       		moveq	#0,d0
000075C8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075CC D040                       		add.w	d0,d0
000075CE 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000075D2 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000075D6                            ; ===========================================================================
000075D6 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000075D8 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000075DA 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000075DC                            ; ===========================================================================
000075DC                            
000075DC                            Resize_GHZ1:
000075DC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000075E2 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000075E8 6500                       		bcs.s	locret_6E08	; if not, branch
000075EA 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000075F0                            
000075F0                            locret_6E08:
000075F0 4E75                       		rts	
000075F2                            ; ===========================================================================
000075F2                            
000075F2                            Resize_GHZ2:
000075F2 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000075F8 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000075FE 6500                       		bcs.s	locret_6E3A
00007600 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007606 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
0000760C 6500                       		bcs.s	locret_6E3A
0000760E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007614 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
0000761A 6500                       		bcs.s	locret_6E3A
0000761C 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
00007622 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
00007628 6500                       		bcs.s	locret_6E3A
0000762A 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
00007630                            		
00007630                            locret_6E3A:
00007630 4E75                       		rts	
00007632                            ; ===========================================================================
00007632                            
00007632                            Resize_GHZ3:
00007632 7000                       		moveq	#0,d0
00007634 1038 F742                  		move.b	($FFFFF742).w,d0
00007638 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000763C 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007640                            ; ===========================================================================
00007640 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007642 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007644 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007646                            ; ===========================================================================
00007646                            
00007646                            Resize_GHZ3main:
00007646 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000764C 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007652 6500                       		bcs.s	locret_6E96
00007654 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
0000765A 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007660 6500                       		bcs.s	locret_6E96
00007662 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007668 6500                       		bcs.s	loc_6E98
0000766A 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007670 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007676 6400                       		bcc.s	loc_6E8E
00007678 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
0000767E 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007684                            
00007684                            loc_6E8E:
00007684 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000768A 6400                       		bcc.s	loc_6E98
0000768C                            
0000768C                            locret_6E96:
0000768C 4E75                       		rts	
0000768E                            ; ===========================================================================
0000768E                            
0000768E                            loc_6E98:
0000768E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007694 5438 F742                  		addq.b	#2,($FFFFF742).w
00007698 4E75                       		rts	
0000769A                            ; ===========================================================================
0000769A                            
0000769A                            Resize_GHZ3boss:
0000769A 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000076A0 6400                       		bcc.s	loc_6EB0
000076A2 5538 F742                  		subq.b	#2,($FFFFF742).w
000076A6                            
000076A6                            loc_6EB0:
000076A6 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000076AC 6500                       		bcs.s	locret_6EE8
000076AE 6100 0000                  		bsr.w	SingleObjLoad
000076B2 6600                       		bne.s	loc_6ED0
000076B4 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000076B8 337C 2A60 0008             		move.w	#$2A60,8(a1)
000076BE 337C 0280 000C             		move.w	#$280,$C(a1)
000076C4                            
000076C4                            loc_6ED0:
000076C4 303C 008C                  		move.w	#$8C,d0
000076C8 6100 9F02                  		bsr.w	PlaySound	; play boss music
000076CC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000076D2 5438 F742                  		addq.b	#2,($FFFFF742).w
000076D6 7011                       		moveq	#$11,d0
000076D8 6000 A0DC                  		bra.w	LoadPLC		; load boss patterns
000076DC                            ; ===========================================================================
000076DC                            
000076DC                            locret_6EE8:
000076DC 4E75                       		rts	
000076DE                            ; ===========================================================================
000076DE                            
000076DE                            Resize_GHZ3end:
000076DE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000076E4 4E75                       		rts	
000076E6                            ; ===========================================================================
000076E6                            ; ---------------------------------------------------------------------------
000076E6                            ; Labyrinth Zone dynamic screen	resizing
000076E6                            ; ---------------------------------------------------------------------------
000076E6                            
000076E6                            Resize_LZ:				; XREF: Resize_Index
000076E6 7000                       		moveq	#0,d0
000076E8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076EC D040                       		add.w	d0,d0
000076EE 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000076F2 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000076F6                            ; ===========================================================================
000076F6 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000076F8 0000                       		dc.w Resize_LZ12-Resize_LZx
000076FA 0000                       		dc.w Resize_LZ3-Resize_LZx
000076FC 0000                       		dc.w Resize_SBZ3-Resize_LZx
000076FE                            ; ===========================================================================
000076FE                            
000076FE                            Resize_LZ12:
000076FE 4E75                       		rts	
00007700                            ; ===========================================================================
00007700                            
00007700                            Resize_LZ3:
00007700 7000                       		moveq	#0,d0
00007702 1038 F742                  		move.b	($FFFFF742).w,d0
00007706 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
0000770A 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
0000770E                            ; ===========================================================================
0000770E                            off_6E4A2:	
0000770E 0000                       		dc.w Resize_LZ3boss-off_6E4A2
00007710 0000                       		dc.w Resize_LZ3end-off_6E4A2
00007712                            ; ===========================================================================
00007712                            Resize_LZ3boss:
00007712 4A38 F742                  		tst.b	($FFFFF742).w
00007716 6600                       		bne.s	locret_6F62
00007718 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000771E 6500                       		bcs.s	locret_6F62
00007720 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
00007726 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
0000772C                            
0000772C 6100 0000                  		bsr.w	SingleObjLoad
00007730 6600                       		bne.s	loc_6F4A
00007732 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007736 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
0000773C 337C 06E0 000C             		move.w	#$6E0,$C(a1)
00007742                            loc_6F4A:
00007742 303C 008C                  		move.w	#$8C,d0
00007746 6100 9E84                  		bsr.w	PlaySound	; play boss music
0000774A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007750 5438 F742                  		addq.b	#2,($FFFFF742).w
00007754 7020                       		moveq	#$20,d0
00007756 6000 A05E                  		bra.w	LoadPLC		; load boss patterns
0000775A                            ; ===========================================================================
0000775A                            
0000775A                            locret_6F62:
0000775A 4E75                       		rts	
0000775C                            ; ===========================================================================
0000775C                            
0000775C                            Resize_LZ3end:
0000775C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007762 4E75                       		rts	
00007764                            ; ===========================================================================
00007764                            
00007764                            Resize_SBZ3:
00007764 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000776A 6500                       		bcs.s	locret_6F8C
0000776C 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007772 6400                       		bcc.s	locret_6F8C	; if not, branch
00007774 4238 FE30                  		clr.b	($FFFFFE30).w
00007778 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000777E 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007784 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
0000778A                            
0000778A                            locret_6F8C:
0000778A 4E75                       		rts	
0000778C                            ; ===========================================================================
0000778C                            ; ---------------------------------------------------------------------------
0000778C                            ; Marble Zone dynamic screen resizing
0000778C                            ; ---------------------------------------------------------------------------
0000778C                            
0000778C                            Resize_MZ:				; XREF: Resize_Index
0000778C 7000                       		moveq	#0,d0
0000778E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007792 D040                       		add.w	d0,d0
00007794 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007798 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
0000779C                            ; ===========================================================================
0000779C 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000779E 0000                       		dc.w Resize_MZ2-Resize_MZx
000077A0 0000                       		dc.w Resize_MZ3-Resize_MZx
000077A2                            ; ===========================================================================
000077A2                            
000077A2                            Resize_MZ1:
000077A2 7000                       		moveq	#0,d0
000077A4 1038 F742                  		move.b	($FFFFF742).w,d0
000077A8 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000077AC 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000077B0                            ; ===========================================================================
000077B0 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000077B2 0000                       		dc.w loc_6FEA-off_6FB2
000077B4 0000                       		dc.w loc_702E-off_6FB2
000077B6 0000                       		dc.w loc_7050-off_6FB2
000077B8                            ; ===========================================================================
000077B8                            
000077B8                            loc_6FBA:
000077B8 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000077BE 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000077C4 6500                       		bcs.s	locret_6FE8
000077C6 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000077CC 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000077D2 6500                       		bcs.s	locret_6FE8
000077D4 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000077DA 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000077E0 6500                       		bcs.s	locret_6FE8
000077E2 5438 F742                  		addq.b	#2,($FFFFF742).w
000077E6                            
000077E6                            locret_6FE8:
000077E6 4E75                       		rts	
000077E8                            ; ===========================================================================
000077E8                            
000077E8                            loc_6FEA:
000077E8 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000077EE 6400                       		bcc.s	loc_6FF8
000077F0 5538 F742                  		subq.b	#2,($FFFFF742).w
000077F4 4E75                       		rts	
000077F6                            ; ===========================================================================
000077F6                            
000077F6                            loc_6FF8:
000077F6 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000077FC 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007802 6400                       		bcc.s	locret_702C
00007804 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
0000780A 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007810 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007816 6400                       		bcc.s	locret_702C
00007818 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000781E 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007824 6500                       		bcs.s	locret_702C
00007826 5438 F742                  		addq.b	#2,($FFFFF742).w
0000782A                            
0000782A                            locret_702C:
0000782A 4E75                       		rts	
0000782C                            ; ===========================================================================
0000782C                            
0000782C                            loc_702E:
0000782C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007832 6400                       		bcc.s	loc_703C
00007834 5538 F742                  		subq.b	#2,($FFFFF742).w
00007838 4E75                       		rts	
0000783A                            ; ===========================================================================
0000783A                            
0000783A                            loc_703C:
0000783A 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007840 6500                       		bcs.s	locret_704E
00007842 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007848 5438 F742                  		addq.b	#2,($FFFFF742).w
0000784C                            
0000784C                            locret_704E:
0000784C 4E75                       		rts	
0000784E                            ; ===========================================================================
0000784E                            
0000784E                            loc_7050:
0000784E 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007854 6500                       		bcs.s	locret_7072
00007856 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000785C 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007862 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007868 6500                       		bcs.s	locret_7072
0000786A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007870                            
00007870                            locret_7072:
00007870 4E75                       		rts	
00007872                            ; ===========================================================================
00007872                            
00007872                            Resize_MZ2:
00007872 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007878 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000787E 6500                       		bcs.s	locret_7088
00007880 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007886                            
00007886                            locret_7088:
00007886 4E75                       		rts	
00007888                            ; ===========================================================================
00007888                            
00007888                            Resize_MZ3:
00007888 7000                       		moveq	#0,d0
0000788A 1038 F742                  		move.b	($FFFFF742).w,d0
0000788E 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007892 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007896                            ; ===========================================================================
00007896 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007898 0000                       		dc.w Resize_MZ3end-off_7098
0000789A                            ; ===========================================================================
0000789A                            
0000789A                            Resize_MZ3boss:
0000789A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000078A0 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000078A6 6500                       		bcs.s	locret_70E8
000078A8 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000078AE 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000078B4 6500                       		bcs.s	locret_70E8
000078B6 6100 0000                  		bsr.w	SingleObjLoad
000078BA 6600                       		bne.s	loc_70D0
000078BC 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000078C0 337C 19F0 0008             		move.w	#$19F0,8(a1)
000078C6 337C 022C 000C             		move.w	#$22C,$C(a1)
000078CC                            
000078CC                            loc_70D0:
000078CC 303C 008C                  		move.w	#$8C,d0
000078D0 6100 9CFA                  		bsr.w	PlaySound	; play boss music
000078D4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000078DA 5438 F742                  		addq.b	#2,($FFFFF742).w
000078DE 7011                       		moveq	#$11,d0
000078E0 6000 9ED4                  		bra.w	LoadPLC		; load boss patterns
000078E4                            ; ===========================================================================
000078E4                            
000078E4                            locret_70E8:
000078E4 4E75                       		rts	
000078E6                            ; ===========================================================================
000078E6                            
000078E6                            Resize_MZ3end:
000078E6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000078EC 4E75                       		rts	
000078EE                            ; ===========================================================================
000078EE                            ; ---------------------------------------------------------------------------
000078EE                            ; Star Light Zone dynamic screen resizing
000078EE                            ; ---------------------------------------------------------------------------
000078EE                            
000078EE                            Resize_SLZ:				; XREF: Resize_Index
000078EE 7000                       		moveq	#0,d0
000078F0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000078F4 D040                       		add.w	d0,d0
000078F6 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000078FA 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000078FE                            ; ===========================================================================
000078FE 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
00007900 0000                       		dc.w Resize_SLZ2-Resize_SLZx
00007902 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007904                            ; ===========================================================================
00007904                            
00007904                            Resize_SLZ1:
00007904 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
0000790A 4E75                       		rts	
0000790C                            
0000790C                            Resize_SLZ2:
0000790C 4E75                       		rts	
0000790E                            ; ===========================================================================
0000790E                            
0000790E                            Resize_SLZ3:
0000790E 7000                       		moveq	#0,d0
00007910 1038 F742                  		move.b	($FFFFF742).w,d0
00007914 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007918 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000791C                            ; ===========================================================================
0000791C 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000791E 0000                       		dc.w Resize_SLZ3boss-off_7118
00007920 0000                       		dc.w Resize_SLZ3end-off_7118
00007922                            ; ===========================================================================
00007922                            
00007922                            Resize_SLZ3main:
00007922 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007928 6500                       		bcs.s	locret_7130
0000792A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007930 5438 F742                  		addq.b	#2,($FFFFF742).w
00007934                            
00007934                            locret_7130:
00007934 4E75                       		rts	
00007936                            ; ===========================================================================
00007936                            
00007936                            Resize_SLZ3boss:
00007936 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000793C 6500                       		bcs.s	locret_715C
0000793E 6100 0000                  		bsr.w	SingleObjLoad
00007942 6600                       		bne.s	loc_7144
00007944 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007948                            
00007948                            loc_7144:
00007948 303C 008C                  		move.w	#$8C,d0
0000794C 6100 9C7E                  		bsr.w	PlaySound	; play boss music
00007950 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007956 5438 F742                  		addq.b	#2,($FFFFF742).w
0000795A 7011                       		moveq	#$11,d0
0000795C 6000 9E58                  		bra.w	LoadPLC		; load boss patterns
00007960                            ; ===========================================================================
00007960                            
00007960                            locret_715C:
00007960 4E75                       		rts	
00007962                            ; ===========================================================================
00007962                            
00007962                            Resize_SLZ3end:
00007962 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007968 4E75                       		rts
0000796A 4E75                       		rts
0000796C                            ; ===========================================================================
0000796C                            ; ---------------------------------------------------------------------------
0000796C                            ; Spring Yard Zone dynamic screen resizing
0000796C                            ; ---------------------------------------------------------------------------
0000796C                            
0000796C                            Resize_SYZ:				; XREF: Resize_Index
0000796C 7000                       		moveq	#0,d0
0000796E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007972 D040                       		add.w	d0,d0
00007974 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007978 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000797C                            ; ===========================================================================
0000797C 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000797E 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007980 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007982                            ; ===========================================================================
00007982                            
00007982                            Resize_SYZ1:
00007982 4E75                       		rts	
00007984                            ; ===========================================================================
00007984                            
00007984                            Resize_SYZ2:
00007984 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000798A 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007990 6500                       		bcs.s	locret_71A2
00007992 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007998 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
0000799E 6500                       		bcs.s	locret_71A2
000079A0 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000079A6                            
000079A6                            locret_71A2:
000079A6 4E75                       		rts	
000079A8                            ; ===========================================================================
000079A8                            
000079A8                            Resize_SYZ3:
000079A8 7000                       		moveq	#0,d0
000079AA 1038 F742                  		move.b	($FFFFF742).w,d0
000079AE 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000079B2 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000079B6                            ; ===========================================================================
000079B6 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000079B8 0000                       		dc.w Resize_SYZ3boss-off_71B2
000079BA 0000                       		dc.w Resize_SYZ3end-off_71B2
000079BC                            ; ===========================================================================
000079BC                            
000079BC                            Resize_SYZ3main:
000079BC 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000079C2 6500                       		bcs.s	locret_71CE
000079C4 6100 0000                  		bsr.w	SingleObjLoad
000079C8 6600                       		bne.s	locret_71CE
000079CA 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000079CE 5438 F742                  		addq.b	#2,($FFFFF742).w
000079D2                            
000079D2                            locret_71CE:
000079D2 4E75                       		rts	
000079D4                            ; ===========================================================================
000079D4                            
000079D4                            Resize_SYZ3boss:
000079D4 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000079DA 6500                       		bcs.s	locret_7200
000079DC 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000079E2 6100 0000                  		bsr.w	SingleObjLoad
000079E6 6600                       		bne.s	loc_71EC
000079E8 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000079EC 5438 F742                  		addq.b	#2,($FFFFF742).w
000079F0                            
000079F0                            loc_71EC:
000079F0 303C 008C                  		move.w	#$8C,d0
000079F4 6100 9BD6                  		bsr.w	PlaySound	; play boss music
000079F8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000079FE 7011                       		moveq	#$11,d0
00007A00 6000 9DB4                  		bra.w	LoadPLC		; load boss patterns
00007A04                            ; ===========================================================================
00007A04                            
00007A04                            locret_7200:
00007A04 4E75                       		rts	
00007A06                            ; ===========================================================================
00007A06                            
00007A06                            Resize_SYZ3end:
00007A06 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007A0C 4E75                       		rts	
00007A0E                            ; ===========================================================================
00007A0E                            ; ---------------------------------------------------------------------------
00007A0E                            ; Scrap	Brain Zone dynamic screen resizing
00007A0E                            ; ---------------------------------------------------------------------------
00007A0E                            
00007A0E                            Resize_SBZ:				; XREF: Resize_Index
00007A0E 7000                       		moveq	#0,d0
00007A10 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007A14 D040                       		add.w	d0,d0
00007A16 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007A1A 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007A1E                            ; ===========================================================================
00007A1E 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007A20 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007A22 0000                       		dc.w Resize_FZ-Resize_SBZx
00007A24                            ; ===========================================================================
00007A24                            
00007A24                            Resize_SBZ1:
00007A24 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007A2A 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007A30 6500                       		bcs.s	locret_7242
00007A32 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007A38 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007A3E 6500                       		bcs.s	locret_7242
00007A40 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007A46                            
00007A46                            locret_7242:
00007A46 4E75                       		rts	
00007A48                            ; ===========================================================================
00007A48                            
00007A48                            Resize_SBZ2:
00007A48 7000                       		moveq	#0,d0
00007A4A 1038 F742                  		move.b	($FFFFF742).w,d0
00007A4E 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007A52 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007A56                            ; ===========================================================================
00007A56 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007A58 0000                       		dc.w Resize_SBZ2boss-off_7252
00007A5A 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007A5C 0000                       		dc.w Resize_SBZ2end-off_7252
00007A5E                            ; ===========================================================================
00007A5E                            
00007A5E                            Resize_SBZ2main:
00007A5E 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007A64 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007A6A 6500                       		bcs.s	locret_727A
00007A6C 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007A72 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007A78 6500                       		bcs.s	locret_727A
00007A7A 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A7E                            
00007A7E                            locret_727A:
00007A7E 4E75                       		rts	
00007A80                            ; ===========================================================================
00007A80                            
00007A80                            Resize_SBZ2boss:
00007A80 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007A86 6500                       		bcs.s	locret_7298
00007A88 6100 0000                  		bsr.w	SingleObjLoad
00007A8C 6600                       		bne.s	locret_7298
00007A8E 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007A92 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A96 701E                       		moveq	#$1E,d0
00007A98 6000 9D1C                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007A9C                            ; ===========================================================================
00007A9C                            
00007A9C                            locret_7298:
00007A9C 4E75                       		rts	
00007A9E                            ; ===========================================================================
00007A9E                            
00007A9E                            Resize_SBZ2boss2:
00007A9E 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007AA4 6500                       		bcs.s	loc_72B6
00007AA6 6100 0000                  		bsr.w	SingleObjLoad
00007AAA 6600                       		bne.s	loc_72B0
00007AAC 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007AB0 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AB4                            
00007AB4                            loc_72B0:
00007AB4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007ABA                            
00007ABA                            loc_72B6:
00007ABA 6000                       		bra.s	loc_72C2
00007ABC                            ; ===========================================================================
00007ABC                            
00007ABC                            Resize_SBZ2end:
00007ABC 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007AC2 6500                       		bcs.s	loc_72C2
00007AC4 4E75                       		rts	
00007AC6                            ; ===========================================================================
00007AC6                            
00007AC6                            loc_72C2:
00007AC6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007ACC 4E75                       		rts	
00007ACE                            ; ===========================================================================
00007ACE                            
00007ACE                            Resize_FZ:
00007ACE 7000                       		moveq	#0,d0
00007AD0 1038 F742                  		move.b	($FFFFF742).w,d0
00007AD4 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007AD8 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007ADC                            ; ===========================================================================
00007ADC 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007AE0 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007AE4 0000                       		dc.w Resize_FZend2-off_72D8
00007AE6                            ; ===========================================================================
00007AE6                            
00007AE6                            Resize_FZmain:
00007AE6 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007AEC 6500                       		bcs.s	loc_72F4
00007AEE 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AF2 701F                       		moveq	#$1F,d0
00007AF4 6100 9CC0                  		bsr.w	LoadPLC		; load FZ boss patterns
00007AF8                            
00007AF8                            loc_72F4:
00007AF8 60CC                       		bra.s	loc_72C2
00007AFA                            ; ===========================================================================
00007AFA                            
00007AFA                            Resize_FZboss:
00007AFA 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007B00 6500                       		bcs.s	loc_7312
00007B02 6100 0000                  		bsr.w	SingleObjLoad
00007B06 6600                       		bne.s	loc_7312
00007B08 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007B0C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B10 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007B16                            
00007B16                            loc_7312:
00007B16 60AE                       		bra.s	loc_72C2
00007B18                            ; ===========================================================================
00007B18                            
00007B18                            Resize_FZend:
00007B18 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007B1E 6500                       		bcs.s	loc_7320
00007B20 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B24                            
00007B24                            loc_7320:
00007B24 60A0                       		bra.s	loc_72C2
00007B26                            ; ===========================================================================
00007B26                            
00007B26                            locret_7322:
00007B26 4E75                       		rts	
00007B28                            ; ===========================================================================
00007B28                            
00007B28                            Resize_FZend2:
00007B28 609C                       		bra.s	loc_72C2
00007B2A                            ; ===========================================================================
00007B2A                            ; ---------------------------------------------------------------------------
00007B2A                            ; Ending sequence dynamic screen resizing (empty)
00007B2A                            ; ---------------------------------------------------------------------------
00007B2A                            
00007B2A                            Resize_Ending:				; XREF: Resize_Index
00007B2A 4E75                       		rts	
00007B2C                            ; ===========================================================================
00007B2C                            ; ---------------------------------------------------------------------------
00007B2C                            ; Object 11 - GHZ bridge
00007B2C                            ; ---------------------------------------------------------------------------
00007B2C                            
00007B2C                            Obj11:					; XREF: Obj_Index
00007B2C 7000                       		moveq	#0,d0
00007B2E 1028 0024                  		move.b	$24(a0),d0
00007B32 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007B36 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007B3A                            ; ===========================================================================
00007B3A 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007B3E 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007B42 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007B46                            ; ===========================================================================
00007B46                            
00007B46                            Obj11_Main:				; XREF: Obj11_Index
00007B46 5428 0024                  		addq.b	#2,$24(a0)
00007B4A 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007B52 317C 438E 0002             		move.w	#$438E,2(a0)
00007B58 117C 0004 0001             		move.b	#4,1(a0)
00007B5E 117C 0003 0018             		move.b	#3,$18(a0)
00007B64 117C 0080 0019             		move.b	#$80,$19(a0)
00007B6A 3428 000C                  		move.w	$C(a0),d2
00007B6E 3628 0008                  		move.w	8(a0),d3
00007B72 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007B74 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007B78 7200                       		moveq	#0,d1
00007B7A 1212                       		move.b	(a2),d1		; copy a2 to d1
00007B7C 14FC 0000                  		move.b	#0,(a2)+
00007B80 3001                       		move.w	d1,d0
00007B82 E248                       		lsr.w	#1,d0
00007B84 E948                       		lsl.w	#4,d0
00007B86 9640                       		sub.w	d0,d3
00007B88 5501                       		subq.b	#2,d1
00007B8A 6500                       		bcs.s	Obj11_Action
00007B8C                            
00007B8C                            Obj11_MakeBdg:
00007B8C 6100 0000                  		bsr.w	SingleObjLoad
00007B90 6600                       		bne.s	Obj11_Action
00007B92 5228 0028                  		addq.b	#1,$28(a0)
00007B96 B668 0008                  		cmp.w	8(a0),d3
00007B9A 6600                       		bne.s	loc_73B8
00007B9C 0643 0010                  		addi.w	#$10,d3
00007BA0 3142 000C                  		move.w	d2,$C(a0)
00007BA4 3142 003C                  		move.w	d2,$3C(a0)
00007BA8 3A08                       		move.w	a0,d5
00007BAA 0445 D000                  		subi.w	#-$3000,d5
00007BAE EC4D                       		lsr.w	#6,d5
00007BB0 0245 007F                  		andi.w	#$7F,d5
00007BB4 14C5                       		move.b	d5,(a2)+
00007BB6 5228 0028                  		addq.b	#1,$28(a0)
00007BBA                            
00007BBA                            loc_73B8:				; XREF: ROM:00007398j
00007BBA 3A09                       		move.w	a1,d5
00007BBC 0445 D000                  		subi.w	#-$3000,d5
00007BC0 EC4D                       		lsr.w	#6,d5
00007BC2 0245 007F                  		andi.w	#$7F,d5
00007BC6 14C5                       		move.b	d5,(a2)+
00007BC8 137C 000A 0024             		move.b	#$A,$24(a1)
00007BCE 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007BD0 3342 000C                  		move.w	d2,$C(a1)
00007BD4 3342 003C                  		move.w	d2,$3C(a1)
00007BD8 3343 0008                  		move.w	d3,8(a1)
00007BDC 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007BE4 337C 438E 0002             		move.w	#$438E,2(a1)
00007BEA 137C 0004 0001             		move.b	#4,1(a1)
00007BF0 137C 0003 0018             		move.b	#3,$18(a1)
00007BF6 137C 0008 0019             		move.b	#8,$19(a1)
00007BFC 0643 0010                  		addi.w	#$10,d3
00007C00 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007C04                            
00007C04                            Obj11_Action:				; XREF: Obj11_Index
00007C04 6100                       		bsr.s	Obj11_Solid
00007C06 4A28 003E                  		tst.b	$3E(a0)
00007C0A 6700                       		beq.s	Obj11_Display
00007C0C 5928 003E                  		subq.b	#4,$3E(a0)
00007C10 6100 0000                  		bsr.w	Obj11_Bend
00007C14                            
00007C14                            Obj11_Display:
00007C14 6100 0000                  		bsr.w	DisplaySprite
00007C18 6000 0000                  		bra.w	Obj11_ChkDel
00007C1C                            
00007C1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C1C                            
00007C1C                            
00007C1C                            Obj11_Solid:				; XREF: Obj11_Action
00007C1C 7200                       		moveq	#0,d1
00007C1E 1228 0028                  		move.b	$28(a0),d1
00007C22 E749                       		lsl.w	#3,d1
00007C24 3401                       		move.w	d1,d2
00007C26 5041                       		addq.w	#8,d1
00007C28 D442                       		add.w	d2,d2
00007C2A 43F8 D000                  		lea	($FFFFD000).w,a1
00007C2E 4A69 0012                  		tst.w	$12(a1)
00007C32 6B00 0000                  		bmi.w	locret_751E
00007C36 3029 0008                  		move.w	8(a1),d0
00007C3A 9068 0008                  		sub.w	8(a0),d0
00007C3E D041                       		add.w	d1,d0
00007C40 6B00 0000                  		bmi.w	locret_751E
00007C44 B042                       		cmp.w	d2,d0
00007C46 6400 0000                  		bcc.w	locret_751E
00007C4A 6000                       		bra.s	Platform2
00007C4C                            ; End of function Obj11_Solid
00007C4C                            
00007C4C                            ; ---------------------------------------------------------------------------
00007C4C                            ; Platform subroutine
00007C4C                            ; ---------------------------------------------------------------------------
00007C4C                            
00007C4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C4C                            
00007C4C                            
00007C4C                            PlatformObject:
00007C4C 43F8 D000                  		lea	($FFFFD000).w,a1
00007C50 4A69 0012                  		tst.w	$12(a1)
00007C54 6B00 0000                  		bmi.w	locret_751E
00007C58 3029 0008                  		move.w	8(a1),d0
00007C5C 9068 0008                  		sub.w	8(a0),d0
00007C60 D041                       		add.w	d1,d0
00007C62 6B00 0000                  		bmi.w	locret_751E
00007C66 D241                       		add.w	d1,d1
00007C68 B041                       		cmp.w	d1,d0
00007C6A 6400 0000                  		bcc.w	locret_751E
00007C6E                            
00007C6E                            Platform2:
00007C6E 3028 000C                  		move.w	$C(a0),d0
00007C72 5140                       		subq.w	#8,d0
00007C74                            
00007C74                            Platform3:
00007C74 3429 000C                  		move.w	$C(a1),d2
00007C78 1229 0016                  		move.b	$16(a1),d1
00007C7C 4881                       		ext.w	d1
00007C7E D242                       		add.w	d2,d1
00007C80 5841                       		addq.w	#4,d1
00007C82 9041                       		sub.w	d1,d0
00007C84 6200 0000                  		bhi.w	locret_751E
00007C88 0C40 FFF0                  		cmpi.w	#-$10,d0
00007C8C 6500 0000                  		bcs.w	locret_751E
00007C90 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007C94 6B00 0000                  		bmi.w	locret_751E
00007C98 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007C9E 6400 0000                  		bcc.w	locret_751E
00007CA2 D440                       		add.w	d0,d2
00007CA4 5642                       		addq.w	#3,d2
00007CA6 3342 000C                  		move.w	d2,$C(a1)
00007CAA 5428 0024                  		addq.b	#2,$24(a0)
00007CAE                            
00007CAE                            loc_74AE:
00007CAE 0829 0003 0022             		btst	#3,$22(a1)
00007CB4 6700                       		beq.s	loc_74DC
00007CB6 7000                       		moveq	#0,d0
00007CB8 1029 003D                  		move.b	$3D(a1),d0
00007CBC ED48                       		lsl.w	#6,d0
00007CBE 0680 00FF D000             		addi.l	#$FFD000,d0
00007CC4 2440                       		movea.l	d0,a2
00007CC6 08AA 0003 0022             		bclr	#3,$22(a2)
00007CCC 422A 0025                  		clr.b	$25(a2)
00007CD0 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007CD6 6600                       		bne.s	loc_74DC
00007CD8 552A 0024                  		subq.b	#2,$24(a2)
00007CDC                            
00007CDC                            loc_74DC:
00007CDC 3008                       		move.w	a0,d0
00007CDE 0440 D000                  		subi.w	#-$3000,d0
00007CE2 EC48                       		lsr.w	#6,d0
00007CE4 0240 007F                  		andi.w	#$7F,d0
00007CE8 1340 003D                  		move.b	d0,$3D(a1)
00007CEC 137C 0000 0026             		move.b	#0,$26(a1)
00007CF2 337C 0000 0012             		move.w	#0,$12(a1)
00007CF8 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007CFE 0829 0001 0022             		btst	#1,$22(a1)
00007D04 6700                       		beq.s	loc_7512
00007D06 2F08                       		move.l	a0,-(sp)
00007D08 2049                       		movea.l	a1,a0
00007D0A 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007D10 205F                       		movea.l	(sp)+,a0
00007D12                            
00007D12                            loc_7512:
00007D12 08E9 0003 0022             		bset	#3,$22(a1)
00007D18 08E8 0003 0022             		bset	#3,$22(a0)
00007D1E                            
00007D1E                            locret_751E:
00007D1E 4E75                       		rts	
00007D20                            ; End of function PlatformObject
00007D20                            
00007D20                            ; ---------------------------------------------------------------------------
00007D20                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007D20                            ; ---------------------------------------------------------------------------
00007D20                            
00007D20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D20                            
00007D20                            
00007D20                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007D20 43F8 D000                  		lea	($FFFFD000).w,a1
00007D24 4A69 0012                  		tst.w	$12(a1)
00007D28 6B00 FFF4                  		bmi.w	locret_751E
00007D2C 3029 0008                  		move.w	8(a1),d0
00007D30 9068 0008                  		sub.w	8(a0),d0
00007D34 D041                       		add.w	d1,d0
00007D36 6BE6                       		bmi.s	locret_751E
00007D38 D241                       		add.w	d1,d1
00007D3A B041                       		cmp.w	d1,d0
00007D3C 64E0                       		bcc.s	locret_751E
00007D3E 0828 0000 0001             		btst	#0,1(a0)
00007D44 6700                       		beq.s	loc_754A
00007D46 4640                       		not.w	d0
00007D48 D041                       		add.w	d1,d0
00007D4A                            
00007D4A                            loc_754A:
00007D4A E248                       		lsr.w	#1,d0
00007D4C 7600                       		moveq	#0,d3
00007D4E 1632 0000                  		move.b	(a2,d0.w),d3
00007D52 3028 000C                  		move.w	$C(a0),d0
00007D56 9043                       		sub.w	d3,d0
00007D58 6000 FF1A                  		bra.w	Platform3
00007D5C                            ; End of function SlopeObject
00007D5C                            
00007D5C                            
00007D5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D5C                            
00007D5C                            
00007D5C                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007D5C 43F8 D000                  		lea	($FFFFD000).w,a1
00007D60 4A69 0012                  		tst.w	$12(a1)
00007D64 6B00 FFB8                  		bmi.w	locret_751E
00007D68 3029 0008                  		move.w	8(a1),d0
00007D6C 9068 0008                  		sub.w	8(a0),d0
00007D70 D041                       		add.w	d1,d0
00007D72 6B00 FFAA                  		bmi.w	locret_751E
00007D76 D241                       		add.w	d1,d1
00007D78 B041                       		cmp.w	d1,d0
00007D7A 6400 FFA2                  		bcc.w	locret_751E
00007D7E 3028 000C                  		move.w	$C(a0),d0
00007D82 9043                       		sub.w	d3,d0
00007D84 6000 FEEE                  		bra.w	Platform3
00007D88                            ; End of function Obj15_Solid
00007D88                            
00007D88                            ; ===========================================================================
00007D88                            
00007D88                            Obj11_Action2:				; XREF: Obj11_Index
00007D88 6100                       		bsr.s	Obj11_WalkOff
00007D8A 6100 0000                  		bsr.w	DisplaySprite
00007D8E 6000 0000                  		bra.w	Obj11_ChkDel
00007D92                            
00007D92                            ; ---------------------------------------------------------------------------
00007D92                            ; Subroutine allowing Sonic to walk off a bridge
00007D92                            ; ---------------------------------------------------------------------------
00007D92                            
00007D92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D92                            
00007D92                            
00007D92                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007D92 7200                       		moveq	#0,d1
00007D94 1228 0028                  		move.b	$28(a0),d1
00007D98 E749                       		lsl.w	#3,d1
00007D9A 3401                       		move.w	d1,d2
00007D9C 5041                       		addq.w	#8,d1
00007D9E 6100                       		bsr.s	ExitPlatform2
00007DA0 6400                       		bcc.s	locret_75BE
00007DA2 E848                       		lsr.w	#4,d0
00007DA4 1140 003F                  		move.b	d0,$3F(a0)
00007DA8 1028 003E                  		move.b	$3E(a0),d0
00007DAC 0C00 0040                  		cmpi.b	#$40,d0
00007DB0 6700                       		beq.s	loc_75B6
00007DB2 5828 003E                  		addq.b	#4,$3E(a0)
00007DB6                            
00007DB6                            loc_75B6:
00007DB6 6100 0000                  		bsr.w	Obj11_Bend
00007DBA 6100 0000                  		bsr.w	Obj11_MoveSonic
00007DBE                            
00007DBE                            locret_75BE:
00007DBE 4E75                       		rts	
00007DC0                            ; End of function Obj11_WalkOff
00007DC0                            
00007DC0                            ; ---------------------------------------------------------------------------
00007DC0                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007DC0                            ; ---------------------------------------------------------------------------
00007DC0                            
00007DC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DC0                            
00007DC0                            
00007DC0                            ExitPlatform:
00007DC0 3401                       		move.w	d1,d2
00007DC2                            
00007DC2                            ExitPlatform2:
00007DC2 D442                       		add.w	d2,d2
00007DC4 43F8 D000                  		lea	($FFFFD000).w,a1
00007DC8 0829 0001 0022             		btst	#1,$22(a1)
00007DCE 6600                       		bne.s	loc_75E0
00007DD0 3029 0008                  		move.w	8(a1),d0
00007DD4 9068 0008                  		sub.w	8(a0),d0
00007DD8 D041                       		add.w	d1,d0
00007DDA 6B00                       		bmi.s	loc_75E0
00007DDC B042                       		cmp.w	d2,d0
00007DDE 6500                       		bcs.s	locret_75F2
00007DE0                            
00007DE0                            loc_75E0:
00007DE0 08A9 0003 0022             		bclr	#3,$22(a1)
00007DE6 117C 0002 0024             		move.b	#2,$24(a0)
00007DEC 08A8 0003 0022             		bclr	#3,$22(a0)
00007DF2                            
00007DF2                            locret_75F2:
00007DF2 4E75                       		rts	
00007DF4                            ; End of function ExitPlatform
00007DF4                            
00007DF4                            
00007DF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DF4                            
00007DF4                            
00007DF4                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007DF4 7000                       		moveq	#0,d0
00007DF6 1028 003F                  		move.b	$3F(a0),d0
00007DFA 1030 0029                  		move.b	$29(a0,d0.w),d0
00007DFE ED48                       		lsl.w	#6,d0
00007E00 0680 00FF D000             		addi.l	#$FFD000,d0
00007E06 2440                       		movea.l	d0,a2
00007E08 43F8 D000                  		lea	($FFFFD000).w,a1
00007E0C 302A 000C                  		move.w	$C(a2),d0
00007E10 5140                       		subq.w	#8,d0
00007E12 7200                       		moveq	#0,d1
00007E14 1229 0016                  		move.b	$16(a1),d1
00007E18 9041                       		sub.w	d1,d0
00007E1A 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007E1E 4E75                       		rts	
00007E20                            ; End of function Obj11_MoveSonic
00007E20                            
00007E20                            
00007E20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E20                            
00007E20                            
00007E20                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007E20 1028 003E                  		move.b	$3E(a0),d0
00007E24 6100 AF46                  		bsr.w	CalcSine
00007E28 3800                       		move.w	d0,d4
00007E2A 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007E30 7000                       		moveq	#0,d0
00007E32 1028 0028                  		move.b	$28(a0),d0
00007E36 E948                       		lsl.w	#4,d0
00007E38 7600                       		moveq	#0,d3
00007E3A 1628 003F                  		move.b	$3F(a0),d3
00007E3E 3403                       		move.w	d3,d2
00007E40 D640                       		add.w	d0,d3
00007E42 7A00                       		moveq	#0,d5
00007E44 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007E4A 1A35 3000                  		move.b	(a5,d3.w),d5
00007E4E 0243 000F                  		andi.w	#$F,d3
00007E52 E94B                       		lsl.w	#4,d3
00007E54 47F4 3000                  		lea	(a4,d3.w),a3
00007E58 45E8 0029                  		lea	$29(a0),a2
00007E5C                            
00007E5C                            loc_765C:
00007E5C 7000                       		moveq	#0,d0
00007E5E 101A                       		move.b	(a2)+,d0
00007E60 ED48                       		lsl.w	#6,d0
00007E62 0680 00FF D000             		addi.l	#$FFD000,d0
00007E68 2240                       		movea.l	d0,a1
00007E6A 7000                       		moveq	#0,d0
00007E6C 101B                       		move.b	(a3)+,d0
00007E6E 5240                       		addq.w	#1,d0
00007E70 C0C5                       		mulu.w	d5,d0
00007E72 C0C4                       		mulu.w	d4,d0
00007E74 4840                       		swap	d0
00007E76 D069 003C                  		add.w	$3C(a1),d0
00007E7A 3340 000C                  		move.w	d0,$C(a1)
00007E7E 51CA FFDC                  		dbf	d2,loc_765C
00007E82 7000                       		moveq	#0,d0
00007E84 1028 0028                  		move.b	$28(a0),d0
00007E88 7600                       		moveq	#0,d3
00007E8A 1628 003F                  		move.b	$3F(a0),d3
00007E8E 5203                       		addq.b	#1,d3
00007E90 9600                       		sub.b	d0,d3
00007E92 4403                       		neg.b	d3
00007E94 6B00                       		bmi.s	locret_76CA
00007E96 3403                       		move.w	d3,d2
00007E98 E94B                       		lsl.w	#4,d3
00007E9A 47F4 3000                  		lea	(a4,d3.w),a3
00007E9E D6C2                       		adda.w	d2,a3
00007EA0 5342                       		subq.w	#1,d2
00007EA2 6500                       		bcs.s	locret_76CA
00007EA4                            
00007EA4                            loc_76A4:
00007EA4 7000                       		moveq	#0,d0
00007EA6 101A                       		move.b	(a2)+,d0
00007EA8 ED48                       		lsl.w	#6,d0
00007EAA 0680 00FF D000             		addi.l	#$FFD000,d0
00007EB0 2240                       		movea.l	d0,a1
00007EB2 7000                       		moveq	#0,d0
00007EB4 1023                       		move.b	-(a3),d0
00007EB6 5240                       		addq.w	#1,d0
00007EB8 C0C5                       		mulu.w	d5,d0
00007EBA C0C4                       		mulu.w	d4,d0
00007EBC 4840                       		swap	d0
00007EBE D069 003C                  		add.w	$3C(a1),d0
00007EC2 3340 000C                  		move.w	d0,$C(a1)
00007EC6 51CA FFDC                  		dbf	d2,loc_76A4
00007ECA                            
00007ECA                            locret_76CA:
00007ECA 4E75                       		rts	
00007ECC                            ; End of function Obj11_Bend
00007ECC                            
00007ECC                            ; ===========================================================================
00007ECC                            ; ---------------------------------------------------------------------------
00007ECC                            ; GHZ bridge-bending data
00007ECC                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007ECC                            ; ---------------------------------------------------------------------------
00007ECC                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007FDC                            		even
00007FDC                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000080DC                            		even
000080DC                            
000080DC                            ; ===========================================================================
000080DC                            
000080DC                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000080DC 3028 0008                  		move.w	8(a0),d0
000080E0 0240 FF80                  		andi.w	#$FF80,d0
000080E4 3238 F700                  		move.w	($FFFFF700).w,d1
000080E8 0441 0080                  		subi.w	#$80,d1
000080EC 0241 FF80                  		andi.w	#$FF80,d1
000080F0 9041                       		sub.w	d1,d0
000080F2 0C40 0280                  		cmpi.w	#$280,d0
000080F6 6200 0000                  		bhi.w	Obj11_DelAll
000080FA 4E75                       		rts	
000080FC                            ; ===========================================================================
000080FC                            
000080FC                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000080FC 7400                       		moveq	#0,d2
000080FE 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00008102 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00008104 5302                       		subq.b	#1,d2		; subtract 1
00008106 6500                       		bcs.s	Obj11_Delete
00008108                            
00008108                            Obj11_DelLoop:
00008108 7000                       		moveq	#0,d0
0000810A 101A                       		move.b	(a2)+,d0
0000810C ED48                       		lsl.w	#6,d0
0000810E 0680 00FF D000             		addi.l	#$FFD000,d0
00008114 2240                       		movea.l	d0,a1
00008116 B048                       		cmp.w	a0,d0
00008118 6700                       		beq.s	loc_791E
0000811A 6100 0000                  		bsr.w	DeleteObject2
0000811E                            
0000811E                            loc_791E:
0000811E 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00008122                            
00008122                            Obj11_Delete:
00008122 6100 0000                  		bsr.w	DeleteObject
00008126 4E75                       		rts	
00008128                            ; ===========================================================================
00008128                            
00008128                            Obj11_Delete2:				; XREF: Obj11_Index
00008128 6100 0000                  		bsr.w	DeleteObject
0000812C 4E75                       		rts	
0000812E                            ; ===========================================================================
0000812E                            
0000812E                            Obj11_Display2:				; XREF: Obj11_Index
0000812E 6100 0000                  		bsr.w	DisplaySprite
00008132 4E75                       		rts	
00008134                            ; ===========================================================================
00008134                            ; ---------------------------------------------------------------------------
00008134                            ; Sprite mappings - GHZ	bridge
00008134                            ; ---------------------------------------------------------------------------
00008134                            Map_obj11:
00008134                            	include "_maps\obj11.asm"
00008134                            ; ---------------------------------------------------------------------------
00008134                            ; Sprite mappings - GHZ	bridge
00008134                            ; ---------------------------------------------------------------------------
00008134 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00008138 0000                       		dc.w byte_794B-Map_obj11
0000813A 01                         byte_793A:	dc.b 1
0000813B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008140 02                         byte_7940:	dc.b 2
00008141 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00008146 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
0000814B 01                         byte_794B:	dc.b 1
0000814C FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00008152 00                         		even
00008152 00                         		even
00008152                            
00008152                            ; ===========================================================================
00008152                            ; ---------------------------------------------------------------------------
00008152                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008152                            ;	    - spiked ball on a chain (SBZ)
00008152                            ; ---------------------------------------------------------------------------
00008152                            
00008152                            Obj15:					; XREF: Obj_Index
00008152 7000                       		moveq	#0,d0
00008154 1028 0024                  		move.b	$24(a0),d0
00008158 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
0000815C 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008160                            ; ===========================================================================
00008160 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008164 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008168 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
0000816C 0000                       		dc.w Obj15_Action-Obj15_Index
0000816E                            ; ===========================================================================
0000816E                            
0000816E                            Obj15_Main:				; XREF: Obj15_Index
0000816E 5428 0024                  		addq.b	#2,$24(a0)
00008172 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
0000817A 317C 4380 0002             		move.w	#$4380,2(a0)
00008180 117C 0004 0001             		move.b	#4,1(a0)
00008186 117C 0003 0018             		move.b	#3,$18(a0)
0000818C 117C 0018 0019             		move.b	#$18,$19(a0)
00008192 117C 0008 0016             		move.b	#8,$16(a0)
00008198 3168 000C 0038             		move.w	$C(a0),$38(a0)
0000819E 3168 0008 003A             		move.w	8(a0),$3A(a0)
000081A4 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000081AA 6600                       		bne.s	Obj15_NotSLZ
000081AC 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
000081B4 317C 43DC 0002             		move.w	#$43DC,2(a0)
000081BA 117C 0020 0019             		move.b	#$20,$19(a0)
000081C0 117C 0010 0016             		move.b	#$10,$16(a0)
000081C6 117C 0099 0020             		move.b	#$99,$20(a0)
000081CC                            
000081CC                            Obj15_NotSLZ:
000081CC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000081D2 6600                       		bne.s	Obj15_SetLength
000081D4 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
000081DC 317C 0391 0002             		move.w	#$391,2(a0)
000081E2 117C 0018 0019             		move.b	#$18,$19(a0)
000081E8 117C 0018 0016             		move.b	#$18,$16(a0)
000081EE 117C 0086 0020             		move.b	#$86,$20(a0)
000081F4 117C 000C 0024             		move.b	#$C,$24(a0)
000081FA                            
000081FA                            Obj15_SetLength:
000081FA 1810                       		move.b	0(a0),d4
000081FC 7200                       		moveq	#0,d1
000081FE 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008202 1212                       		move.b	(a2),d1		; move a2 to d1
00008204 3F01                       		move.w	d1,-(sp)
00008206 0241 000F                  		andi.w	#$F,d1
0000820A 14FC 0000                  		move.b	#0,(a2)+
0000820E 3601                       		move.w	d1,d3
00008210 E94B                       		lsl.w	#4,d3
00008212 5003                       		addq.b	#8,d3
00008214 1143 003C                  		move.b	d3,$3C(a0)
00008218 5103                       		subq.b	#8,d3
0000821A 4A28 001A                  		tst.b	$1A(a0)
0000821E 6700                       		beq.s	Obj15_MakeChain
00008220 5003                       		addq.b	#8,d3
00008222 5341                       		subq.w	#1,d1
00008224                            
00008224                            Obj15_MakeChain:
00008224 6100 0000                  		bsr.w	SingleObjLoad
00008228 6600                       		bne.s	loc_7A92
0000822A 5228 0028                  		addq.b	#1,$28(a0)
0000822E 3A09                       		move.w	a1,d5
00008230 0445 D000                  		subi.w	#-$3000,d5
00008234 EC4D                       		lsr.w	#6,d5
00008236 0245 007F                  		andi.w	#$7F,d5
0000823A 14C5                       		move.b	d5,(a2)+
0000823C 137C 000A 0024             		move.b	#$A,$24(a1)
00008242 1284                       		move.b	d4,0(a1)	; load swinging	object
00008244 2368 0004 0004             		move.l	4(a0),4(a1)
0000824A 3368 0002 0002             		move.w	2(a0),2(a1)
00008250 08A9 0006 0002             		bclr	#6,2(a1)
00008256 137C 0004 0001             		move.b	#4,1(a1)
0000825C 137C 0004 0018             		move.b	#4,$18(a1)
00008262 137C 0008 0019             		move.b	#8,$19(a1)
00008268 137C 0001 001A             		move.b	#1,$1A(a1)
0000826E 1343 003C                  		move.b	d3,$3C(a1)
00008272 0403 0010                  		subi.b	#$10,d3
00008276 6400                       		bcc.s	loc_7A8E
00008278 137C 0002 001A             		move.b	#2,$1A(a1)
0000827E 137C 0003 0018             		move.b	#3,$18(a1)
00008284 08E9 0006 0002             		bset	#6,2(a1)
0000828A                            
0000828A                            loc_7A8E:
0000828A 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000828E                            
0000828E                            loc_7A92:
0000828E 3A08                       		move.w	a0,d5
00008290 0445 D000                  		subi.w	#-$3000,d5
00008294 EC4D                       		lsr.w	#6,d5
00008296 0245 007F                  		andi.w	#$7F,d5
0000829A 14C5                       		move.b	d5,(a2)+
0000829C 317C 4080 0026             		move.w	#$4080,$26(a0)
000082A2 317C FE00 003E             		move.w	#-$200,$3E(a0)
000082A8 321F                       		move.w	(sp)+,d1
000082AA 0801 0004                  		btst	#4,d1		; is object type $8X ?
000082AE 6700                       		beq.s	loc_7AD4	; if not, branch
000082B0 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000082B8 317C 43AA 0002             		move.w	#$43AA,2(a0)
000082BE 117C 0001 001A             		move.b	#1,$1A(a0)
000082C4 117C 0002 0018             		move.b	#2,$18(a0)
000082CA 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
000082D0                            
000082D0                            loc_7AD4:
000082D0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
000082D6 6700                       		beq.s	Obj15_Action	; if yes, branch
000082D8                            
000082D8                            Obj15_SetSolid:				; XREF: Obj15_Index
000082D8 7200                       		moveq	#0,d1
000082DA 1228 0019                  		move.b	$19(a0),d1
000082DE 7600                       		moveq	#0,d3
000082E0 1628 0016                  		move.b	$16(a0),d3
000082E4 6100 FA76                  		bsr.w	Obj15_Solid
000082E8                            
000082E8                            Obj15_Action:				; XREF: Obj15_Index
000082E8 6100 0000                  		bsr.w	Obj15_Move
000082EC 6100 0000                  		bsr.w	DisplaySprite
000082F0 6000 0000                  		bra.w	Obj15_ChkDel
000082F4                            ; ===========================================================================
000082F4                            
000082F4                            Obj15_Action2:				; XREF: Obj15_Index
000082F4 7200                       		moveq	#0,d1
000082F6 1228 0019                  		move.b	$19(a0),d1
000082FA 6100 FAC4                  		bsr.w	ExitPlatform
000082FE 3F28 0008                  		move.w	8(a0),-(sp)
00008302 6100 0000                  		bsr.w	Obj15_Move
00008306 341F                       		move.w	(sp)+,d2
00008308 7600                       		moveq	#0,d3
0000830A 1628 0016                  		move.b	$16(a0),d3
0000830E 5203                       		addq.b	#1,d3
00008310 6100 0000                  		bsr.w	MvSonicOnPtfm
00008314 6100 0000                  		bsr.w	DisplaySprite
00008318 6000 0000                  		bra.w	Obj15_ChkDel
0000831C                            
0000831C 4E75                       		rts
0000831E                            
0000831E                            ; ---------------------------------------------------------------------------
0000831E                            ; Subroutine to	change Sonic's position with a platform
0000831E                            ; ---------------------------------------------------------------------------
0000831E                            
0000831E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000831E                            
0000831E                            
0000831E                            MvSonicOnPtfm:
0000831E 43F8 D000                  		lea	($FFFFD000).w,a1
00008322 3028 000C                  		move.w	$C(a0),d0
00008326 9043                       		sub.w	d3,d0
00008328 6000                       		bra.s	MvSonic2
0000832A                            ; End of function MvSonicOnPtfm
0000832A                            
0000832A                            ; ---------------------------------------------------------------------------
0000832A                            ; Subroutine to	change Sonic's position with a platform
0000832A                            ; ---------------------------------------------------------------------------
0000832A                            
0000832A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000832A                            
0000832A                            
0000832A                            MvSonicOnPtfm2:
0000832A 43F8 D000                  		lea	($FFFFD000).w,a1
0000832E 3028 000C                  		move.w	$C(a0),d0
00008332 0440 0009                  		subi.w	#9,d0
00008336                            
00008336                            MvSonic2:
00008336 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000833A 6B00                       		bmi.s	locret_7B62
0000833C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008342 6400                       		bcc.s	locret_7B62
00008344 4A78 FE08                  		tst.w	($FFFFFE08).w
00008348 6600                       		bne.s	locret_7B62
0000834A 7200                       		moveq	#0,d1
0000834C 1229 0016                  		move.b	$16(a1),d1
00008350 9041                       		sub.w	d1,d0
00008352 3340 000C                  		move.w	d0,$C(a1)
00008356 9468 0008                  		sub.w	8(a0),d2
0000835A 9569 0008                  		sub.w	d2,8(a1)
0000835E                            
0000835E                            locret_7B62:
0000835E 4E75                       		rts	
00008360                            ; End of function MvSonicOnPtfm2
00008360                            
00008360                            
00008360                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008360                            
00008360                            
00008360                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008360 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008364 323C 0080                  		move.w	#$80,d1
00008368 0828 0000 0022             		btst	#0,$22(a0)
0000836E 6700                       		beq.s	loc_7B78
00008370 4440                       		neg.w	d0
00008372 D041                       		add.w	d1,d0
00008374                            
00008374                            loc_7B78:
00008374 6000                       		bra.s	Obj15_Move2
00008376                            ; End of function Obj15_Move
00008376                            
00008376                            
00008376                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008376                            
00008376                            
00008376                            Obj48_Move:				; XREF: Obj48_Display2
00008376 4A28 003D                  		tst.b	$3D(a0)
0000837A 6600                       		bne.s	loc_7B9C
0000837C 3028 003E                  		move.w	$3E(a0),d0
00008380 5040                       		addq.w	#8,d0
00008382 3140 003E                  		move.w	d0,$3E(a0)
00008386 D168 0026                  		add.w	d0,$26(a0)
0000838A 0C40 0200                  		cmpi.w	#$200,d0
0000838E 6600                       		bne.s	loc_7BB6
00008390 117C 0001 003D             		move.b	#1,$3D(a0)
00008396 6000                       		bra.s	loc_7BB6
00008398                            ; ===========================================================================
00008398                            
00008398                            loc_7B9C:
00008398 3028 003E                  		move.w	$3E(a0),d0
0000839C 5140                       		subq.w	#8,d0
0000839E 3140 003E                  		move.w	d0,$3E(a0)
000083A2 D168 0026                  		add.w	d0,$26(a0)
000083A6 0C40 FE00                  		cmpi.w	#-$200,d0
000083AA 6600                       		bne.s	loc_7BB6
000083AC 117C 0000 003D             		move.b	#0,$3D(a0)
000083B2                            
000083B2                            loc_7BB6:
000083B2 1028 0026                  		move.b	$26(a0),d0
000083B6                            ; End of function Obj48_Move
000083B6                            
000083B6                            
000083B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083B6                            
000083B6                            
000083B6                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
000083B6 6100 A9B4                  		bsr.w	CalcSine
000083BA 3428 0038                  		move.w	$38(a0),d2
000083BE 3628 003A                  		move.w	$3A(a0),d3
000083C2 45E8 0028                  		lea	$28(a0),a2
000083C6 7C00                       		moveq	#0,d6
000083C8 1C1A                       		move.b	(a2)+,d6
000083CA                            
000083CA                            loc_7BCE:
000083CA 7800                       		moveq	#0,d4
000083CC 181A                       		move.b	(a2)+,d4
000083CE ED4C                       		lsl.w	#6,d4
000083D0 0684 00FF D000             		addi.l	#$FFD000,d4
000083D6 2244                       		movea.l	d4,a1
000083D8 7800                       		moveq	#0,d4
000083DA 1829 003C                  		move.b	$3C(a1),d4
000083DE 2A04                       		move.l	d4,d5
000083E0 C9C0                       		muls.w	d0,d4
000083E2 E084                       		asr.l	#8,d4
000083E4 CBC1                       		muls.w	d1,d5
000083E6 E085                       		asr.l	#8,d5
000083E8 D842                       		add.w	d2,d4
000083EA DA43                       		add.w	d3,d5
000083EC 3344 000C                  		move.w	d4,$C(a1)
000083F0 3345 0008                  		move.w	d5,8(a1)
000083F4 51CE FFD4                  		dbf	d6,loc_7BCE
000083F8 4E75                       		rts	
000083FA                            ; End of function Obj15_Move2
000083FA                            
000083FA                            ; ===========================================================================
000083FA                            
000083FA                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000083FA 3028 003A                  		move.w	$3A(a0),d0
000083FE 0240 FF80                  		andi.w	#$FF80,d0
00008402 3238 F700                  		move.w	($FFFFF700).w,d1
00008406 0441 0080                  		subi.w	#$80,d1
0000840A 0241 FF80                  		andi.w	#$FF80,d1
0000840E 9041                       		sub.w	d1,d0
00008410 0C40 0280                  		cmpi.w	#$280,d0
00008414 6200 0000                  		bhi.w	Obj15_DelAll
00008418 4E75                       		rts	
0000841A                            ; ===========================================================================
0000841A                            
0000841A                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000841A 7400                       		moveq	#0,d2
0000841C 45E8 0028                  		lea	$28(a0),a2
00008420 141A                       		move.b	(a2)+,d2
00008422                            
00008422                            Obj15_DelLoop:
00008422 7000                       		moveq	#0,d0
00008424 101A                       		move.b	(a2)+,d0
00008426 ED48                       		lsl.w	#6,d0
00008428 0680 00FF D000             		addi.l	#$FFD000,d0
0000842E 2240                       		movea.l	d0,a1
00008430 6100 0000                  		bsr.w	DeleteObject2
00008434 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008438 4E75                       		rts	
0000843A                            ; ===========================================================================
0000843A                            
0000843A                            Obj15_Delete:				; XREF: Obj15_Index
0000843A 6100 0000                  		bsr.w	DeleteObject
0000843E 4E75                       		rts	
00008440                            ; ===========================================================================
00008440                            
00008440                            Obj15_Display:				; XREF: Obj15_Index
00008440 6000 0000                  		bra.w	DisplaySprite
00008444                            ; ===========================================================================
00008444                            ; ---------------------------------------------------------------------------
00008444                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008444                            ; ---------------------------------------------------------------------------
00008444                            Map_obj15:
00008444                            	include "_maps\obj15ghz.asm"
00008444                            ; ---------------------------------------------------------------------------
00008444                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008444                            ; ---------------------------------------------------------------------------
00008444 0000                       		dc.w byte_7C4E-Map_obj15
00008446 0000                       		dc.w byte_7C59-Map_obj15
00008448 0000                       		dc.w byte_7C5F-Map_obj15
0000844A 02                         byte_7C4E:	dc.b 2
0000844B F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008450 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008455 01                         byte_7C59:	dc.b 1
00008456 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000845B 01                         byte_7C5F:	dc.b 1
0000845C F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008462 00                         		even
00008462 00                         		even
00008462                            
00008462                            ; ---------------------------------------------------------------------------
00008462                            ; Sprite mappings - SLZ	swinging platforms
00008462                            ; ---------------------------------------------------------------------------
00008462                            Map_obj15a:
00008462                            	include "_maps\obj15slz.asm"
00008462                            ; ---------------------------------------------------------------------------
00008462                            ; Sprite mappings - SLZ	swinging platforms
00008462                            ; ---------------------------------------------------------------------------
00008462 0000                       		dc.w byte_7C6C-Map_obj15a
00008464 0000                       		dc.w byte_7C95-Map_obj15a
00008466 0000                       		dc.w byte_7C9B-Map_obj15a
00008468 08                         byte_7C6C:	dc.b 8
00008469 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000846E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008473 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008478 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000847D 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008482 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008487 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000848C 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008491 01                         byte_7C95:	dc.b 1
00008492 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008497 01                         byte_7C9B:	dc.b 1
00008498 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000849E 00                         		even
0000849E 00                         		even
0000849E                            
0000849E                            ; ===========================================================================
0000849E                            ; ---------------------------------------------------------------------------
0000849E                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000849E                            ; ---------------------------------------------------------------------------
0000849E                            
0000849E                            Obj17:					; XREF: Obj_Index
0000849E 7000                       		moveq	#0,d0
000084A0 1028 0024                  		move.b	$24(a0),d0
000084A4 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000084A8 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000084AC                            ; ===========================================================================
000084AC 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
000084AE 0000                       		dc.w Obj17_Action-Obj17_Index
000084B0 0000                       		dc.w Obj17_Action-Obj17_Index
000084B2 0000                       		dc.w Obj17_Delete-Obj17_Index
000084B4 0000                       		dc.w Obj17_Display-Obj17_Index
000084B6                            ; ===========================================================================
000084B6                            
000084B6                            Obj17_Main:				; XREF: Obj17_Index
000084B6 5428 0024                  		addq.b	#2,$24(a0)
000084BA 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
000084C2 317C 4398 0002             		move.w	#$4398,2(a0)
000084C8 117C 0007 0022             		move.b	#7,$22(a0)
000084CE 117C 0004 0001             		move.b	#4,1(a0)
000084D4 117C 0003 0018             		move.b	#3,$18(a0)
000084DA 117C 0008 0019             		move.b	#8,$19(a0)
000084E0 3428 000C                  		move.w	$C(a0),d2
000084E4 3628 0008                  		move.w	8(a0),d3
000084E8 1810                       		move.b	0(a0),d4
000084EA 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000084EE 7200                       		moveq	#0,d1
000084F0 1212                       		move.b	(a2),d1		; move a2 to d1
000084F2 14FC 0000                  		move.b	#0,(a2)+
000084F6 3001                       		move.w	d1,d0
000084F8 E248                       		lsr.w	#1,d0
000084FA E948                       		lsl.w	#4,d0
000084FC 9640                       		sub.w	d0,d3
000084FE 5501                       		subq.b	#2,d1
00008500 6500                       		bcs.s	Obj17_Action
00008502 7C00                       		moveq	#0,d6
00008504                            
00008504                            Obj17_MakeHelix:
00008504 6100 0000                  		bsr.w	SingleObjLoad
00008508 6600                       		bne.s	Obj17_Action
0000850A 5228 0028                  		addq.b	#1,$28(a0)
0000850E 3A09                       		move.w	a1,d5
00008510 0445 D000                  		subi.w	#$D000,d5
00008514 EC4D                       		lsr.w	#6,d5
00008516 0245 007F                  		andi.w	#$7F,d5
0000851A 14C5                       		move.b	d5,(a2)+
0000851C 137C 0008 0024             		move.b	#8,$24(a1)
00008522 1284                       		move.b	d4,0(a1)
00008524 3342 000C                  		move.w	d2,$C(a1)
00008528 3343 0008                  		move.w	d3,8(a1)
0000852C 2368 0004 0004             		move.l	4(a0),4(a1)
00008532 337C 4398 0002             		move.w	#$4398,2(a1)
00008538 137C 0004 0001             		move.b	#4,1(a1)
0000853E 137C 0003 0018             		move.b	#3,$18(a1)
00008544 137C 0008 0019             		move.b	#8,$19(a1)
0000854A 1346 003E                  		move.b	d6,$3E(a1)
0000854E 5206                       		addq.b	#1,d6
00008550 0206 0007                  		andi.b	#7,d6
00008554 0643 0010                  		addi.w	#$10,d3
00008558 B668 0008                  		cmp.w	8(a0),d3
0000855C 6600                       		bne.s	loc_7D78
0000855E 1146 003E                  		move.b	d6,$3E(a0)
00008562 5206                       		addq.b	#1,d6
00008564 0206 0007                  		andi.b	#7,d6
00008568 0643 0010                  		addi.w	#$10,d3
0000856C 5228 0028                  		addq.b	#1,$28(a0)
00008570                            
00008570                            loc_7D78:
00008570 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008574                            
00008574                            Obj17_Action:				; XREF: Obj17_Index
00008574 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008578 6100 0000                  		bsr.w	DisplaySprite
0000857C 6000 0000                  		bra.w	Obj17_ChkDel
00008580                            
00008580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008580                            
00008580                            
00008580                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008580 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008584 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000858A D028 003E                  		add.b	$3E(a0),d0
0000858E 0200 0007                  		andi.b	#7,d0
00008592 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008596 6600                       		bne.s	locret_7DA6
00008598 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000859E                            
0000859E                            locret_7DA6:
0000859E 4E75                       		rts	
000085A0                            ; End of function Obj17_RotateSpikes
000085A0                            
000085A0                            ; ===========================================================================
000085A0                            
000085A0                            Obj17_ChkDel:				; XREF: Obj17_Action
000085A0 3028 0008                  		move.w	8(a0),d0
000085A4 0240 FF80                  		andi.w	#$FF80,d0
000085A8 3238 F700                  		move.w	($FFFFF700).w,d1
000085AC 0441 0080                  		subi.w	#$80,d1
000085B0 0241 FF80                  		andi.w	#$FF80,d1
000085B4 9041                       		sub.w	d1,d0
000085B6 0C40 0280                  		cmpi.w	#$280,d0
000085BA 6200 0000                  		bhi.w	Obj17_DelAll
000085BE 4E75                       		rts	
000085C0                            ; ===========================================================================
000085C0                            
000085C0                            Obj17_DelAll:				; XREF: Obj17_ChkDel
000085C0 7400                       		moveq	#0,d2
000085C2 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000085C6 141A                       		move.b	(a2)+,d2	; move a2 to d2
000085C8 5502                       		subq.b	#2,d2
000085CA 6500                       		bcs.s	Obj17_Delete
000085CC                            
000085CC                            Obj17_DelLoop:
000085CC 7000                       		moveq	#0,d0
000085CE 101A                       		move.b	(a2)+,d0
000085D0 ED48                       		lsl.w	#6,d0
000085D2 0680 00FF D000             		addi.l	#$FFD000,d0
000085D8 2240                       		movea.l	d0,a1
000085DA 6100 0000                  		bsr.w	DeleteObject2	; delete object
000085DE 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
000085E2                            
000085E2                            Obj17_Delete:				; XREF: Obj17_Index
000085E2 6100 0000                  		bsr.w	DeleteObject
000085E6 4E75                       		rts	
000085E8                            ; ===========================================================================
000085E8                            
000085E8                            Obj17_Display:				; XREF: Obj17_Index
000085E8 6100 FF96                  		bsr.w	Obj17_RotateSpikes
000085EC 6000 0000                  		bra.w	DisplaySprite
000085F0                            ; ===========================================================================
000085F0                            ; ---------------------------------------------------------------------------
000085F0                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000085F0                            ; ---------------------------------------------------------------------------
000085F0                            Map_obj17:
000085F0                            	include "_maps\obj17.asm"
000085F0                            ; ---------------------------------------------------------------------------
000085F0                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000085F0                            ; ---------------------------------------------------------------------------
000085F0 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000085F4 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000085F8 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000085FC 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008600 01                         byte_7E08:	dc.b 1
00008601 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008606 01                         byte_7E0E:	dc.b 1
00008607 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000860C 01                         byte_7E14:	dc.b 1
0000860D F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008612 01                         byte_7E1A:	dc.b 1
00008613 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008618 01                         byte_7E20:	dc.b 1
00008619 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
0000861E 01                         byte_7E26:	dc.b 1
0000861F 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008624 01                         byte_7E2C:	dc.b 1
00008625 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000862A                            		even
0000862A                            		even
0000862A                            
0000862A                            ; ===========================================================================
0000862A                            ; ---------------------------------------------------------------------------
0000862A                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000862A                            ; ---------------------------------------------------------------------------
0000862A                            
0000862A                            Obj18:					; XREF: Obj_Index
0000862A 7000                       		moveq	#0,d0
0000862C 1028 0024                  		move.b	$24(a0),d0
00008630 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008634 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008638                            ; ===========================================================================
00008638 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000863A 0000                       		dc.w Obj18_Solid-Obj18_Index
0000863C 0000                       		dc.w Obj18_Action2-Obj18_Index
0000863E 0000                       		dc.w Obj18_Delete-Obj18_Index
00008640 0000                       		dc.w Obj18_Action-Obj18_Index
00008642                            ; ===========================================================================
00008642                            
00008642                            Obj18_Main:				; XREF: Obj18_Index
00008642 5428 0024                  		addq.b	#2,$24(a0)
00008646 317C 4000 0002             		move.w	#$4000,2(a0)
0000864C 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008654 117C 0020 0019             		move.b	#$20,$19(a0)
0000865A 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008660 6600                       		bne.s	Obj18_NotSYZ
00008662 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
0000866A 117C 0020 0019             		move.b	#$20,$19(a0)
00008670                            
00008670                            Obj18_NotSYZ:
00008670 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008676 6600                       		bne.s	Obj18_NotSLZ
00008678 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008680 117C 0020 0019             		move.b	#$20,$19(a0)
00008686 317C 4000 0002             		move.w	#$4000,2(a0)
0000868C 117C 0003 0028             		move.b	#3,$28(a0)
00008692                            
00008692                            Obj18_NotSLZ:
00008692 117C 0004 0001             		move.b	#4,1(a0)
00008698 117C 0004 0018             		move.b	#4,$18(a0)
0000869E 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000086A4 3168 000C 0034             		move.w	$C(a0),$34(a0)
000086AA 3168 0008 0032             		move.w	8(a0),$32(a0)
000086B0 317C 0080 0026             		move.w	#$80,$26(a0)
000086B6 7200                       		moveq	#0,d1
000086B8 1028 0028                  		move.b	$28(a0),d0
000086BC 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000086C0 6600                       		bne.s	Obj18_SetFrame	; if not, branch
000086C2 5201                       		addq.b	#1,d1		; use frame #1
000086C4 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
000086CA                            
000086CA                            Obj18_SetFrame:
000086CA 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
000086CE                            
000086CE                            Obj18_Solid:				; XREF: Obj18_Index
000086CE 4A28 0038                  		tst.b	$38(a0)
000086D2 6700                       		beq.s	loc_7EE0
000086D4 5928 0038                  		subq.b	#4,$38(a0)
000086D8                            
000086D8                            loc_7EE0:
000086D8 7200                       		moveq	#0,d1
000086DA 1228 0019                  		move.b	$19(a0),d1
000086DE 6100 F56C                  		bsr.w	PlatformObject
000086E2                            
000086E2                            Obj18_Action:				; XREF: Obj18_Index
000086E2 6100 0000                  		bsr.w	Obj18_Move
000086E6 6100 0000                  		bsr.w	Obj18_Nudge
000086EA 6100 0000                  		bsr.w	DisplaySprite
000086EE 6000 0000                  		bra.w	Obj18_ChkDel
000086F2                            ; ===========================================================================
000086F2                            
000086F2                            Obj18_Action2:				; XREF: Obj18_Index
000086F2 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000086F8 6700                       		beq.s	loc_7F06
000086FA 5828 0038                  		addq.b	#4,$38(a0)
000086FE                            
000086FE                            loc_7F06:
000086FE 7200                       		moveq	#0,d1
00008700 1228 0019                  		move.b	$19(a0),d1
00008704 6100 F6BA                  		bsr.w	ExitPlatform
00008708 3F28 0008                  		move.w	8(a0),-(sp)
0000870C 6100 0000                  		bsr.w	Obj18_Move
00008710 6100 0000                  		bsr.w	Obj18_Nudge
00008714 341F                       		move.w	(sp)+,d2
00008716 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000871A 6100 0000                  		bsr.w	DisplaySprite
0000871E 6000 0000                  		bra.w	Obj18_ChkDel
00008722                            
00008722 4E75                       		rts
00008724                            
00008724                            ; ---------------------------------------------------------------------------
00008724                            ; Subroutine to	move platform slightly when you	stand on it
00008724                            ; ---------------------------------------------------------------------------
00008724                            
00008724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008724                            
00008724                            
00008724                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008724 1028 0038                  		move.b	$38(a0),d0
00008728 6100 A642                  		bsr.w	CalcSine
0000872C 323C 0400                  		move.w	#$400,d1
00008730 C1C1                       		muls.w	d1,d0
00008732 4840                       		swap	d0
00008734 D068 002C                  		add.w	$2C(a0),d0
00008738 3140 000C                  		move.w	d0,$C(a0)
0000873C 4E75                       		rts	
0000873E                            ; End of function Obj18_Nudge
0000873E                            
0000873E                            ; ---------------------------------------------------------------------------
0000873E                            ; Subroutine to	move platforms
0000873E                            ; ---------------------------------------------------------------------------
0000873E                            
0000873E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000873E                            
0000873E                            
0000873E                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000873E 7000                       		moveq	#0,d0
00008740 1028 0028                  		move.b	$28(a0),d0
00008744 0240 000F                  		andi.w	#$F,d0
00008748 D040                       		add.w	d0,d0
0000874A 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000874E 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008752                            ; End of function Obj18_Move
00008752                            
00008752                            ; ===========================================================================
00008752 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008756 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
0000875A 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000875E 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008762 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008766 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
0000876A 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000876C                            ; ===========================================================================
0000876C                            
0000876C                            Obj18_Type00:
0000876C 4E75                       		rts			; platform 00 doesn't move
0000876E                            ; ===========================================================================
0000876E                            
0000876E                            Obj18_Type05:
0000876E 3028 0032                  		move.w	$32(a0),d0
00008772 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008776 4401                       		neg.b	d1		; reverse platform-motion
00008778 0601 0040                  		addi.b	#$40,d1
0000877C 6000                       		bra.s	Obj18_01_Move
0000877E                            ; ===========================================================================
0000877E                            
0000877E                            Obj18_Type01:
0000877E 3028 0032                  		move.w	$32(a0),d0
00008782 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008786 0401 0040                  		subi.b	#$40,d1
0000878A                            
0000878A                            Obj18_01_Move:
0000878A 4881                       		ext.w	d1
0000878C D041                       		add.w	d1,d0
0000878E 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008792 6000 0000                  		bra.w	Obj18_ChgMotion
00008796                            ; ===========================================================================
00008796                            
00008796                            Obj18_Type0C:
00008796 3028 0034                  		move.w	$34(a0),d0
0000879A 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000879E 4401                       		neg.b	d1		; reverse platform-motion
000087A0 0601 0030                  		addi.b	#$30,d1
000087A4 6000                       		bra.s	Obj18_02_Move
000087A6                            ; ===========================================================================
000087A6                            
000087A6                            Obj18_Type0B:
000087A6 3028 0034                  		move.w	$34(a0),d0
000087AA 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000087AE 0401 0030                  		subi.b	#$30,d1
000087B2 6000                       		bra.s	Obj18_02_Move
000087B4                            ; ===========================================================================
000087B4                            
000087B4                            Obj18_Type06:
000087B4 3028 0034                  		move.w	$34(a0),d0
000087B8 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000087BC 4401                       		neg.b	d1		; reverse platform-motion
000087BE 0601 0040                  		addi.b	#$40,d1
000087C2 6000                       		bra.s	Obj18_02_Move
000087C4                            ; ===========================================================================
000087C4                            
000087C4                            Obj18_Type02:
000087C4 3028 0034                  		move.w	$34(a0),d0
000087C8 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000087CC 0401 0040                  		subi.b	#$40,d1
000087D0                            
000087D0                            Obj18_02_Move:
000087D0 4881                       		ext.w	d1
000087D2 D041                       		add.w	d1,d0
000087D4 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000087D8 6000 0000                  		bra.w	Obj18_ChgMotion
000087DC                            ; ===========================================================================
000087DC                            
000087DC                            Obj18_Type03:
000087DC 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000087E0 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000087E2 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000087E8 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000087EA 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000087F0                            
000087F0                            Obj18_03_NoMove:
000087F0 4E75                       		rts	
000087F2                            ; ===========================================================================
000087F2                            
000087F2                            Obj18_03_Wait:
000087F2 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000087F6 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000087F8 317C 0020 003A             		move.w	#32,$3A(a0)
000087FE 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008802 4E75                       		rts	
00008804                            ; ===========================================================================
00008804                            
00008804                            Obj18_Type04:
00008804 4A68 003A                  		tst.w	$3A(a0)
00008808 6700                       		beq.s	loc_8048
0000880A 5368 003A                  		subq.w	#1,$3A(a0)
0000880E 6600                       		bne.s	loc_8048
00008810 0828 0003 0022             		btst	#3,$22(a0)
00008816 6700                       		beq.s	loc_8042
00008818 08E9 0001 0022             		bset	#1,$22(a1)
0000881E 08A9 0003 0022             		bclr	#3,$22(a1)
00008824 137C 0002 0024             		move.b	#2,$24(a1)
0000882A 08A8 0003 0022             		bclr	#3,$22(a0)
00008830 4228 0025                  		clr.b	$25(a0)
00008834 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000883A                            
0000883A                            loc_8042:
0000883A 117C 0008 0024             		move.b	#8,$24(a0)
00008840                            
00008840                            loc_8048:
00008840 2628 002C                  		move.l	$2C(a0),d3
00008844 3028 0012                  		move.w	$12(a0),d0
00008848 48C0                       		ext.l	d0
0000884A E180                       		asl.l	#8,d0
0000884C D680                       		add.l	d0,d3
0000884E 2143 002C                  		move.l	d3,$2C(a0)
00008852 0668 0038 0012             		addi.w	#$38,$12(a0)
00008858 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000885C 0640 00E0                  		addi.w	#$E0,d0
00008860 B068 002C                  		cmp.w	$2C(a0),d0
00008864 6400                       		bcc.s	locret_8074
00008866 117C 0006 0024             		move.b	#6,$24(a0)
0000886C                            
0000886C                            locret_8074:
0000886C 4E75                       		rts	
0000886E                            ; ===========================================================================
0000886E                            
0000886E                            Obj18_Type07:
0000886E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008872 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008874 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008878 7000                       		moveq	#0,d0
0000887A 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000887E E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008880 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008884 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008886 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000888C                            
0000888C                            Obj18_07_NoMove:
0000888C 4E75                       		rts	
0000888E                            ; ===========================================================================
0000888E                            
0000888E                            Obj18_07_Wait:
0000888E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008892 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008894 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008898 4E75                       		rts	
0000889A                            ; ===========================================================================
0000889A                            
0000889A                            Obj18_Type08:
0000889A 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000889E 3028 0034                  		move.w	$34(a0),d0
000088A2 0440 0200                  		subi.w	#$200,d0
000088A6 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000088AA 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000088AC 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000088B0                            
000088B0                            Obj18_08_NoStop:
000088B0 4E75                       		rts	
000088B2                            ; ===========================================================================
000088B2                            
000088B2                            Obj18_Type0A:
000088B2 3028 0034                  		move.w	$34(a0),d0
000088B6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000088BA 0401 0040                  		subi.b	#$40,d1
000088BE 4881                       		ext.w	d1
000088C0 E241                       		asr.w	#1,d1
000088C2 D041                       		add.w	d1,d0
000088C4 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000088C8                            
000088C8                            Obj18_ChgMotion:
000088C8 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000088CE 4E75                       		rts	
000088D0                            ; ===========================================================================
000088D0                            
000088D0                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000088D0 3028 0032                  		move.w	$32(a0),d0
000088D4 0240 FF80                  		andi.w	#$FF80,d0
000088D8 3238 F700                  		move.w	($FFFFF700).w,d1
000088DC 0441 0080                  		subi.w	#$80,d1
000088E0 0241 FF80                  		andi.w	#$FF80,d1
000088E4 9041                       		sub.w	d1,d0
000088E6 0C40 0280                  		cmpi.w	#$280,d0
000088EA 6200                       		bhi.s	Obj18_Delete
000088EC 4E75                       		rts	
000088EE                            ; ===========================================================================
000088EE                            
000088EE                            Obj18_Delete:				; XREF: Obj18_Index
000088EE 6000 0000                  		bra.w	DeleteObject
000088F2                            ; ===========================================================================
000088F2                            ; ---------------------------------------------------------------------------
000088F2                            ; Sprite mappings - unused
000088F2                            ; ---------------------------------------------------------------------------
000088F2                            Map_obj18x:
000088F2                            	include "_maps\obj18x.asm"
000088F2                            ; ---------------------------------------------------------------------------
000088F2                            ; Sprite mappings - unused
000088F2                            ; ---------------------------------------------------------------------------
000088F2 0000                       		dc.w byte_80FE-Map_obj18x
000088F4 0000                       		dc.w byte_8109-Map_obj18x
000088F6 02                         byte_80FE:	dc.b 2
000088F7 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000088FC F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008901 0A                         byte_8109:	dc.b $A
00008902 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008907 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000890C 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008911 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008916 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000891B F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008920 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008925 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000892A 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000892F 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008934                            		even
00008934                            		even
00008934                            
00008934                            ; ---------------------------------------------------------------------------
00008934                            ; Sprite mappings - GHZ	platforms
00008934                            ; ---------------------------------------------------------------------------
00008934                            Map_obj18:
00008934                            	include "_maps\obj18ghz.asm"
00008934                            ; ---------------------------------------------------------------------------
00008934                            ; Sprite mappings - GHZ	platforms
00008934                            ; ---------------------------------------------------------------------------
00008934 0000                       		dc.w byte_8140-Map_obj18
00008936 0000                       		dc.w byte_8155-Map_obj18
00008938 04                         byte_8140:	dc.b 4
00008939 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000893E F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008943 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008948 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000894D 0A                         byte_8155:	dc.b $A
0000894E F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008953 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008958 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000895D 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008962 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008967 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000896C 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008971 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008976 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000897B 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008980                            		even
00008980                            		even
00008980                            
00008980                            ; ---------------------------------------------------------------------------
00008980                            ; Sprite mappings - SYZ	platforms
00008980                            ; ---------------------------------------------------------------------------
00008980                            Map_obj18a:
00008980                            	include "_maps\obj18syz.asm"
00008980                            ; ---------------------------------------------------------------------------
00008980                            ; Sprite mappings - SYZ	platforms
00008980                            ; ---------------------------------------------------------------------------
00008980 0000                       		dc.w byte_818A-Map_obj18a
00008982 03                         byte_818A:	dc.b 3
00008983 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008988 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000898D F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008992                            		even
00008992                            		even
00008992                            
00008992                            ; ---------------------------------------------------------------------------
00008992                            ; Sprite mappings - SLZ	platforms
00008992                            ; ---------------------------------------------------------------------------
00008992                            Map_obj18b:
00008992                            	include "_maps\obj18slz.asm"
00008992                            ; ---------------------------------------------------------------------------
00008992                            ; Sprite mappings - SLZ	platforms
00008992                            ; ---------------------------------------------------------------------------
00008992 0000                       		dc.w byte_819C-Map_obj18b
00008994 02                         byte_819C:	dc.b 2
00008995 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000899A F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000089A0 00                         		even
000089A0 00                         		even
000089A0                            
000089A0                            ; ===========================================================================
000089A0                            ; ---------------------------------------------------------------------------
000089A0                            ; Object 19 - Pearto bombs
000089A0                            ; ---------------------------------------------------------------------------
000089A0                            Obj19:					; XREF: Obj_Index
000089A0 7000                       		moveq	#0,d0
000089A2 1028 0024                  		move.b	$24(a0),d0
000089A6 323B 0000                  		move.w	off_7070(pc,d0.w),d1
000089AA 4EFB 1000                  		jmp	off_7070(pc,d1.w)
000089AE                            ; ---------------------------------------------------------------------------
000089AE                            
000089AE 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
000089B4                            ; ---------------------------------------------------------------------------
000089B4                            
000089B4                            loc_7076:
000089B4 5428 0024                  		addq.b	#2,$24(a0)
000089B8 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
000089C0 317C 0480 0002             		move.w	#($9000/$20),2(a0)
000089C6 117C 0004 0001             		move.b	#4,1(a0)
000089CC 117C 0003 0019             		move.b	#3,$19(a0)
000089D2 117C 0087 0020             		move.b	#$87,$20(a0)
000089D8 117C 0008 0018             		move.b	#8,$18(a0)
000089DE 317C 0018 0030             		move.w	#$18,$30(a0)
000089E4                            
000089E4                            loc_70A6:
000089E4 0828 0007 0022             		btst	#7,$22(a0)
000089EA 6600                       		bne.s	loc_70C2
000089EC 4A68 0030                  		tst.w	$30(a0)
000089F0 6600                       		bne.s	loc_70D2
000089F2 4EB9 0000 0000             		jsr	ObjHitFloor
000089F8 4A41                       		tst.w	d1
000089FA 6A00                       		bpl.s	loc_70D6
000089FC D368 000C                  		add.w	d1,$C(a0)
00008A00                            
00008A00                            loc_70C2:
00008A00 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
00008A04 117C 0000 0024             		move.b	#0,$24(a0)
00008A0A                            ; ---------------------------------------------------------------------------
00008A0A                            
00008A0A                            loc_70D2:
00008A0A 5368 0030                  		subq.w	#1,$30(a0)
00008A0E                            
00008A0E                            loc_70D6:
00008A0E 6100 0000                  		bsr.w	ObjectFall
00008A12 6100 0000                  		bsr.w	DisplaySprite
00008A16 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008A1A 0640 00E0                  		addi.w	#$E0,d0
00008A1E B068 000C                  		cmp.w	$C(a0),d0
00008A22 6500                       		bcs.s	loc_70EE
00008A24 4E75                       		rts
00008A26                            ; ---------------------------------------------------------------------------
00008A26                            
00008A26                            loc_70EE:
00008A26 6100 0000                  		bsr.w	DeleteObject
00008A2A 4E75                       		rts
00008A2C                            		
00008A2C                            Map_obj19:
00008A2C                            	include "_maps\obj19.asm"
00008A2C                            Map_02b4:
00008A2C 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
00008A2E 01                         Map_02b4_2: 	dc.b $1
00008A2F F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
00008A34                            	even
00008A34                            	even
00008A34                            ; ===========================================================================
00008A34                            ; ---------------------------------------------------------------------------
00008A34                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008A34                            ; ---------------------------------------------------------------------------
00008A34                            Map_obj48:
00008A34                            	include "_maps\obj48.asm"
00008A34                            ; ---------------------------------------------------------------------------
00008A34                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008A34                            ; ---------------------------------------------------------------------------
00008A34 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008A38 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008A3C 06                         byte_81B2:	dc.b 6
00008A3D F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008A42 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008A47 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008A4C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008A51 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008A56 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008A5B 04                         byte_81D1:	dc.b 4
00008A5C E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008A61 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008A66 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008A6B 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008A70 04                         byte_81E6:	dc.b 4
00008A71 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008A76 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008A7B 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008A80 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008A85 04                         byte_81FB:	dc.b 4
00008A86 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008A8B E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008A90 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008A95 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008A9A                            		even
00008A9A                            		even
00008A9A                            
00008A9A                            ; ===========================================================================
00008A9A                            ; ---------------------------------------------------------------------------
00008A9A                            ; Object 1A - GHZ collapsing ledge
00008A9A                            ; ---------------------------------------------------------------------------
00008A9A                            
00008A9A                            Obj1A:					; XREF: Obj_Index
00008A9A 7000                       		moveq	#0,d0
00008A9C 1028 0024                  		move.b	$24(a0),d0
00008AA0 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008AA4 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008AA8                            ; ===========================================================================
00008AA8 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008AAC 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008AB0 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008AB4                            ; ===========================================================================
00008AB4                            
00008AB4                            Obj1A_Main:				; XREF: Obj1A_Index
00008AB4 5428 0024                  		addq.b	#2,$24(a0)
00008AB8 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008AC0 317C 4000 0002             		move.w	#$4000,2(a0)
00008AC6 0028 0004 0001             		ori.b	#4,1(a0)
00008ACC 117C 0004 0018             		move.b	#4,$18(a0)
00008AD2 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008AD8 117C 0064 0019             		move.b	#$64,$19(a0)
00008ADE 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008AE4 117C 0038 0016             		move.b	#$38,$16(a0)
00008AEA 08E8 0004 0001             		bset	#4,1(a0)
00008AF0                            
00008AF0                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008AF0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008AF4 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008AF6 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008AFA 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008AFE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008B02                            
00008B02                            Obj1A_Slope:
00008B02 323C 0030                  		move.w	#$30,d1
00008B06 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008B0C 6100 F212                  		bsr.w	SlopeObject
00008B10 6000 0000                  		bra.w	MarkObjGone
00008B14                            ; ===========================================================================
00008B14                            
00008B14                            Obj1A_Touch:				; XREF: Obj1A_Index
00008B14 4A28 0038                  		tst.b	$38(a0)
00008B18 6700 0000                  		beq.w	loc_847A
00008B1C 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008B22 5328 0038                  		subq.b	#1,$38(a0)
00008B26                            
00008B26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B26                            
00008B26                            
00008B26                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008B26 323C 0030                  		move.w	#$30,d1
00008B2A 6100 F294                  		bsr.w	ExitPlatform
00008B2E 323C 0030                  		move.w	#$30,d1
00008B32 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008B38 3428 0008                  		move.w	8(a0),d2
00008B3C 6100 0000                  		bsr.w	SlopeObject2
00008B40 6000 0000                  		bra.w	MarkObjGone
00008B44                            ; End of function Obj1A_WalkOff
00008B44                            
00008B44                            ; ===========================================================================
00008B44                            
00008B44                            Obj1A_Display:				; XREF: Obj1A_Index
00008B44 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008B48 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008B4A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008B4E 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008B52 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008B56 6000 0000                  		bra.w	DisplaySprite
00008B5A                            ; ===========================================================================
00008B5A                            
00008B5A                            loc_82D0:				; XREF: Obj1A_Display
00008B5A 5328 0038                  		subq.b	#1,$38(a0)
00008B5E 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008B62 43F8 D000                  		lea	($FFFFD000).w,a1
00008B66 0829 0003 0022             		btst	#3,$22(a1)
00008B6C 6700                       		beq.s	loc_82FC
00008B6E 4A28 0038                  		tst.b	$38(a0)
00008B72 6600                       		bne.s	locret_8308
00008B74 08A9 0003 0022             		bclr	#3,$22(a1)
00008B7A 08A9 0005 0022             		bclr	#5,$22(a1)
00008B80 137C 0001 001D             		move.b	#1,$1D(a1)
00008B86                            
00008B86                            loc_82FC:
00008B86 117C 0000 003A             		move.b	#0,$3A(a0)
00008B8C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008B92                            
00008B92                            locret_8308:
00008B92 4E75                       		rts	
00008B94                            ; ===========================================================================
00008B94                            
00008B94                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008B94 6100 0000                  		bsr.w	ObjectFall
00008B98 6100 0000                  		bsr.w	DisplaySprite
00008B9C 4A28 0001                  		tst.b	1(a0)
00008BA0 6A00                       		bpl.s	Obj1A_Delete
00008BA2 4E75                       		rts	
00008BA4                            ; ===========================================================================
00008BA4                            
00008BA4                            Obj1A_Delete:				; XREF: Obj1A_Index
00008BA4 6100 0000                  		bsr.w	DeleteObject
00008BA8 4E75                       		rts	
00008BAA                            ; ===========================================================================
00008BAA                            ; ---------------------------------------------------------------------------
00008BAA                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008BAA                            ; ---------------------------------------------------------------------------
00008BAA                            
00008BAA                            Obj53:					; XREF: Obj_Index
00008BAA 7000                       		moveq	#0,d0
00008BAC 1028 0024                  		move.b	$24(a0),d0
00008BB0 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008BB4 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008BB8                            ; ===========================================================================
00008BB8 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008BBC 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008BC0 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008BC4                            ; ===========================================================================
00008BC4                            
00008BC4                            Obj53_Main:				; XREF: Obj53_Index
00008BC4 5428 0024                  		addq.b	#2,$24(a0)
00008BC8 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008BD0 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008BD6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008BDC 6600                       		bne.s	Obj53_NotSLZ
00008BDE 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008BE4 5428 001A                  		addq.b	#2,$1A(a0)
00008BE8                            
00008BE8                            Obj53_NotSLZ:
00008BE8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008BEE 6600                       		bne.s	Obj53_NotSBZ
00008BF0 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008BF6                            
00008BF6                            Obj53_NotSBZ:
00008BF6 0028 0004 0001             		ori.b	#4,1(a0)
00008BFC 117C 0004 0018             		move.b	#4,$18(a0)
00008C02 117C 0007 0038             		move.b	#7,$38(a0)
00008C08 117C 0044 0019             		move.b	#$44,$19(a0)
00008C0E                            
00008C0E                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008C0E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008C12 6700                       		beq.s	Obj53_Solid	; if not, branch
00008C14 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008C18 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008C1C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008C20                            
00008C20                            Obj53_Solid:
00008C20 323C 0020                  		move.w	#$20,d1
00008C24 6100 F026                  		bsr.w	PlatformObject
00008C28 4A28 0028                  		tst.b	$28(a0)
00008C2C 6A00                       		bpl.s	Obj53_MarkAsGone
00008C2E 0829 0003 0022             		btst	#3,$22(a1)
00008C34 6700                       		beq.s	Obj53_MarkAsGone
00008C36 08A8 0000 0001             		bclr	#0,1(a0)
00008C3C 3029 0008                  		move.w	8(a1),d0
00008C40 9068 0008                  		sub.w	8(a0),d0
00008C44 6400                       		bcc.s	Obj53_MarkAsGone
00008C46 08E8 0000 0001             		bset	#0,1(a0)
00008C4C                            
00008C4C                            Obj53_MarkAsGone:
00008C4C 6000 0000                  		bra.w	MarkObjGone
00008C50                            ; ===========================================================================
00008C50                            
00008C50                            Obj53_Touch:				; XREF: Obj53_Index
00008C50 4A28 0038                  		tst.b	$38(a0)
00008C54 6700 0000                  		beq.w	loc_8458
00008C58 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008C5E 5328 0038                  		subq.b	#1,$38(a0)
00008C62                            
00008C62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C62                            
00008C62                            
00008C62                            Obj53_WalkOff:				; XREF: Obj53_Index
00008C62 323C 0020                  		move.w	#$20,d1
00008C66 6100 F158                  		bsr.w	ExitPlatform
00008C6A 3428 0008                  		move.w	8(a0),d2
00008C6E 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008C72 6000 0000                  		bra.w	MarkObjGone
00008C76                            ; End of function Obj53_WalkOff
00008C76                            
00008C76                            ; ===========================================================================
00008C76                            
00008C76                            Obj53_Display:				; XREF: Obj53_Index
00008C76 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008C7A 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008C7C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008C80 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008C84 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008C88 6000 0000                  		bra.w	DisplaySprite
00008C8C                            ; ===========================================================================
00008C8C                            
00008C8C                            loc_8402:
00008C8C 5328 0038                  		subq.b	#1,$38(a0)
00008C90 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008C94 43F8 D000                  		lea	($FFFFD000).w,a1
00008C98 0829 0003 0022             		btst	#3,$22(a1)
00008C9E 6700                       		beq.s	loc_842E
00008CA0 4A28 0038                  		tst.b	$38(a0)
00008CA4 6600                       		bne.s	locret_843A
00008CA6 08A9 0003 0022             		bclr	#3,$22(a1)
00008CAC 08A9 0005 0022             		bclr	#5,$22(a1)
00008CB2 137C 0001 001D             		move.b	#1,$1D(a1)
00008CB8                            
00008CB8                            loc_842E:
00008CB8 117C 0000 003A             		move.b	#0,$3A(a0)
00008CBE 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008CC4                            
00008CC4                            locret_843A:
00008CC4 4E75                       		rts	
00008CC6                            ; ===========================================================================
00008CC6                            
00008CC6                            Obj53_TimeZero:				; XREF: Obj53_Display
00008CC6 6100 0000                  		bsr.w	ObjectFall
00008CCA 6100 0000                  		bsr.w	DisplaySprite
00008CCE 4A28 0001                  		tst.b	1(a0)
00008CD2 6A00                       		bpl.s	Obj53_Delete
00008CD4 4E75                       		rts	
00008CD6                            ; ===========================================================================
00008CD6                            
00008CD6                            Obj53_Delete:				; XREF: Obj53_Index
00008CD6 6100 0000                  		bsr.w	DeleteObject
00008CDA 4E75                       		rts	
00008CDC                            ; ===========================================================================
00008CDC                            
00008CDC                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008CDC 117C 0000 003A             		move.b	#0,$3A(a0)
00008CE2                            
00008CE2                            loc_8458:				; XREF: Obj53_Touch
00008CE2 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008CE8 0828 0000 0028             		btst	#0,$28(a0)
00008CEE 6700                       		beq.s	loc_846C
00008CF0 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008CF6                            
00008CF6                            loc_846C:
00008CF6 7207                       		moveq	#7,d1
00008CF8 5228 001A                  		addq.b	#1,$1A(a0)
00008CFC 6000                       		bra.s	loc_8486
00008CFE                            ; ===========================================================================
00008CFE                            
00008CFE                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008CFE 117C 0000 003A             		move.b	#0,$3A(a0)
00008D04                            
00008D04                            loc_847A:				; XREF: Obj1A_Touch
00008D04 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008D0A 7218                       		moveq	#$18,d1
00008D0C 5428 001A                  		addq.b	#2,$1A(a0)
00008D10                            
00008D10                            loc_8486:				; XREF: Obj53_Collapse
00008D10 7000                       		moveq	#0,d0
00008D12 1028 001A                  		move.b	$1A(a0),d0
00008D16 D040                       		add.w	d0,d0
00008D18 2668 0004                  		movea.l	4(a0),a3
00008D1C D6F3 0000                  		adda.w	(a3,d0.w),a3
00008D20 524B                       		addq.w	#1,a3
00008D22 08E8 0005 0001             		bset	#5,1(a0)
00008D28 1810                       		move.b	0(a0),d4
00008D2A 1A28 0001                  		move.b	1(a0),d5
00008D2E 2248                       		movea.l	a0,a1
00008D30 6000                       		bra.s	loc_84B2
00008D32                            ; ===========================================================================
00008D32                            
00008D32                            loc_84AA:
00008D32 6100 0000                  		bsr.w	SingleObjLoad
00008D36 6600                       		bne.s	loc_84F2
00008D38 5A4B                       		addq.w	#5,a3
00008D3A                            
00008D3A                            loc_84B2:
00008D3A 137C 0006 0024             		move.b	#6,$24(a1)
00008D40 1284                       		move.b	d4,0(a1)
00008D42 234B 0004                  		move.l	a3,4(a1)
00008D46 1345 0001                  		move.b	d5,1(a1)
00008D4A 3368 0008 0008             		move.w	8(a0),8(a1)
00008D50 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008D56 3368 0002 0002             		move.w	2(a0),2(a1)
00008D5C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008D62 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008D68 135C 0038                  		move.b	(a4)+,$38(a1)
00008D6C B3C8                       		cmpa.l	a0,a1
00008D6E 6400                       		bcc.s	loc_84EE
00008D70 6100 0000                  		bsr.w	DisplaySprite2
00008D74                            
00008D74                            loc_84EE:
00008D74 51C9 FFBC                  		dbf	d1,loc_84AA
00008D78                            
00008D78                            loc_84F2:
00008D78 6100 0000                  		bsr.w	DisplaySprite
00008D7C 303C 00B9                  		move.w	#$B9,d0
00008D80 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008D86                            ; ===========================================================================
00008D86                            ; ---------------------------------------------------------------------------
00008D86                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008D86                            ; ---------------------------------------------------------------------------
00008D86 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008D96 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008DA0 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008DA8 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008DB0                            
00008DB0                            ; ---------------------------------------------------------------------------
00008DB0                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008DB0                            ; ---------------------------------------------------------------------------
00008DB0                            
00008DB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DB0                            
00008DB0                            
00008DB0                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008DB0 43F8 D000                  		lea	($FFFFD000).w,a1
00008DB4 0829 0003 0022             		btst	#3,$22(a1)
00008DBA 6700                       		beq.s	locret_856E
00008DBC 3029 0008                  		move.w	8(a1),d0
00008DC0 9068 0008                  		sub.w	8(a0),d0
00008DC4 D041                       		add.w	d1,d0
00008DC6 E248                       		lsr.w	#1,d0
00008DC8 0828 0000 0001             		btst	#0,1(a0)
00008DCE 6700                       		beq.s	loc_854E
00008DD0 4640                       		not.w	d0
00008DD2 D041                       		add.w	d1,d0
00008DD4                            
00008DD4                            loc_854E:
00008DD4 7200                       		moveq	#0,d1
00008DD6 1232 0000                  		move.b	(a2,d0.w),d1
00008DDA 3028 000C                  		move.w	$C(a0),d0
00008DDE 9041                       		sub.w	d1,d0
00008DE0 7200                       		moveq	#0,d1
00008DE2 1229 0016                  		move.b	$16(a1),d1
00008DE6 9041                       		sub.w	d1,d0
00008DE8 3340 000C                  		move.w	d0,$C(a1)
00008DEC 9468 0008                  		sub.w	8(a0),d2
00008DF0 9569 0008                  		sub.w	d2,8(a1)
00008DF4                            
00008DF4                            locret_856E:
00008DF4 4E75                       		rts	
00008DF6                            ; End of function SlopeObject2
00008DF6                            
00008DF6                            ; ===========================================================================
00008DF6                            ; ---------------------------------------------------------------------------
00008DF6                            ; Collision data for GHZ collapsing ledge
00008DF6                            ; ---------------------------------------------------------------------------
00008DF6                            Obj1A_SlopeData:
00008DF6                            		incbin	misc\ghzledge.bin
00008E26                            		even
00008E26                            
00008E26                            ; ---------------------------------------------------------------------------
00008E26                            ; Sprite mappings - GHZ	collapsing ledge
00008E26                            ; ---------------------------------------------------------------------------
00008E26                            Map_obj1A:
00008E26                            	include "_maps\obj1A.asm"
00008E26                            ; ---------------------------------------------------------------------------
00008E26                            ; Sprite mappings - GHZ	collapsing ledge
00008E26                            ; ---------------------------------------------------------------------------
00008E26 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008E2A 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008E2E 10                         byte_85A8:	dc.b $10
00008E2F C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008E34 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008E39 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008E3E E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008E43 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008E48 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008E4D F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008E52 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008E57 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008E5C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008E61 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008E66 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008E6B 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008E70 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008E75 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008E7A 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E7F 10                         byte_85F9:	dc.b $10
00008E80 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008E85 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008E8A E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008E8F E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008E94 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008E99 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008E9E F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008EA3 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008EA8 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008EAD F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008EB2 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008EB7 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008EBC 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008EC1 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008EC6 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008ECB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008ED0 19                         byte_864A:	dc.b $19
00008ED1 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008ED6 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008EDB D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008EE0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008EE5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008EEA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008EEF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008EF4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008EF9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008EFE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008F03 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008F08 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008F0D F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008F12 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008F17 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008F1C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008F21 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008F26 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008F2B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008F30 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008F35 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008F3A 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008F3F 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008F44 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008F49 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008F4E 19                         byte_86C8:	dc.b $19
00008F4F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008F54 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008F59 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008F5E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008F63 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008F68 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008F6D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008F72 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008F77 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008F7C D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008F81 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008F86 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008F8B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008F90 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008F95 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008F9A F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008F9F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008FA4 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008FA9 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008FAE 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008FB3 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008FB8 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008FBD 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008FC2 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008FC7 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008FCC                            		even
00008FCC                            		even
00008FCC                            
00008FCC                            ; ---------------------------------------------------------------------------
00008FCC                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008FCC                            ; ---------------------------------------------------------------------------
00008FCC                            Map_obj53:
00008FCC                            	include "_maps\obj53.asm"
00008FCC                            ; ---------------------------------------------------------------------------
00008FCC                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008FCC                            ; ---------------------------------------------------------------------------
00008FCC 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008FD0 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008FD4 04                         byte_874E:	dc.b 4
00008FD5 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008FDA 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008FDF F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008FE4 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008FE9 08                         byte_8763:	dc.b 8
00008FEA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008FEF F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008FF4 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008FF9 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008FFE 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00009003 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00009008 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000900D 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00009012 04                         byte_878C:	dc.b 4
00009013 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00009018 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000901D F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009022 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00009027 08                         byte_87A1:	dc.b 8
00009028 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000902D F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00009032 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009037 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000903C 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00009041 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00009046 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000904B 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00009050                            		even
00009050                            		even
00009050                            
00009050                            ; ===========================================================================
00009050                            ; ---------------------------------------------------------------------------
00009050                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009050                            ; ---------------------------------------------------------------------------
00009050                            
00009050                            Obj1C:					; XREF: Obj_Index
00009050 7000                       		moveq	#0,d0
00009052 1028 0024                  		move.b	$24(a0),d0
00009056 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000905A 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000905E                            ; ===========================================================================
0000905E 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00009060 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00009062                            ; ===========================================================================
00009062                            
00009062                            Obj1C_Main:				; XREF: Obj1C_Index
00009062 5428 0024                  		addq.b	#2,$24(a0)
00009066 7000                       		moveq	#0,d0
00009068 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000906C C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009070 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00009074 2159 0004                  		move.l	(a1)+,4(a0)
00009078 3159 0002                  		move.w	(a1)+,2(a0)
0000907C 0028 0004 0001             		ori.b	#4,1(a0)
00009082 1159 001A                  		move.b	(a1)+,$1A(a0)
00009086 1159 0019                  		move.b	(a1)+,$19(a0)
0000908A 1159 0018                  		move.b	(a1)+,$18(a0)
0000908E 1159 0020                  		move.b	(a1)+,$20(a0)
00009092                            
00009092                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00009092 3028 0008                  		move.w	8(a0),d0
00009096 0240 FF80                  		andi.w	#$FF80,d0
0000909A 3238 F700                  		move.w	($FFFFF700).w,d1
0000909E 0441 0080                  		subi.w	#$80,d1
000090A2 0241 FF80                  		andi.w	#$FF80,d1
000090A6 9041                       		sub.w	d1,d0
000090A8 0C40 0280                  		cmpi.w	#$280,d0
000090AC 6200 0000                  		bhi.w	DeleteObject
000090B0 6000 0000                  		bra.w	DisplaySprite
000090B4                            ; ===========================================================================
000090B4                            ; ---------------------------------------------------------------------------
000090B4                            ; Variables for	object $1C are stored in an array
000090B4                            ; ---------------------------------------------------------------------------
000090B4 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000090B8 44D8                       		dc.w $44D8		; VRAM setting
000090BA 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000090BE 0000 0000                  		dc.l Map_obj1C
000090C2 44D8                       		dc.w $44D8
000090C4 0008 0200                  		dc.b 0,	8, 2, 0
000090C8 0000 0000                  		dc.l Map_obj1C
000090CC 44D8                       		dc.w $44D8
000090CE 0008 0200                  		dc.b 0,	8, 2, 0
000090D2 0000 8134                  		dc.l Map_obj11
000090D6 438E                       		dc.w $438E
000090D8 0110 0100                  		dc.b 1,	$10, 1,	0
000090DC                            ; ---------------------------------------------------------------------------
000090DC                            ; Sprite mappings - SLZ	lava thrower
000090DC                            ; ---------------------------------------------------------------------------
000090DC                            Map_obj1C:
000090DC                            	include "_maps\obj1C.asm"
000090DC                            ; ---------------------------------------------------------------------------
000090DC                            ; Sprite mappings - SLZ	lava thrower
000090DC                            ; ---------------------------------------------------------------------------
000090DC 0000                       		dc.w byte_8858-Map_obj1C
000090DE 01                         byte_8858:	dc.b 1
000090DF F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000090E4                            		even
000090E4                            		even
000090E4                            
000090E4                            ; ===========================================================================
000090E4                            ; ---------------------------------------------------------------------------
000090E4                            ; Object 1D - switch that activates when Sonic touches it
000090E4                            ; (this	is not used anywhere in	the game)
000090E4                            ; ---------------------------------------------------------------------------
000090E4                            
000090E4                            Obj1D:					; XREF: Obj_Index
000090E4 7000                       		moveq	#0,d0
000090E6 1028 0024                  		move.b	$24(a0),d0
000090EA 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
000090EE 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
000090F2                            ; ===========================================================================
000090F2 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
000090F4 0000                       		dc.w Obj1D_Action-Obj1D_Index
000090F6 0000                       		dc.w Obj1D_Delete-Obj1D_Index
000090F8                            ; ===========================================================================
000090F8                            
000090F8                            Obj1D_Main:				; XREF: Obj1D_Index
000090F8 5428 0024                  		addq.b	#2,$24(a0)
000090FC 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00009104 317C 4000 0002             		move.w	#$4000,2(a0)
0000910A 117C 0004 0001             		move.b	#4,1(a0)
00009110 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009116 117C 0010 0019             		move.b	#$10,$19(a0)
0000911C 117C 0005 0018             		move.b	#5,$18(a0)
00009122                            
00009122                            Obj1D_Action:				; XREF: Obj1D_Index
00009122 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009128 323C 0010                  		move.w	#$10,d1
0000912C 6100 0000                  		bsr.w	Obj1D_ChkTouch
00009130 6700                       		beq.s	Obj1D_ChkDel
00009132 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00009136 7001                       		moveq	#1,d0
00009138 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000913C                            
0000913C                            Obj1D_ChkDel:
0000913C 6100 0000                  		bsr.w	DisplaySprite
00009140 3028 0008                  		move.w	8(a0),d0
00009144 0240 FF80                  		andi.w	#$FF80,d0
00009148 3238 F700                  		move.w	($FFFFF700).w,d1
0000914C 0441 0080                  		subi.w	#$80,d1
00009150 0241 FF80                  		andi.w	#$FF80,d1
00009154 9041                       		sub.w	d1,d0
00009156 0C40 0280                  		cmpi.w	#$280,d0
0000915A 6200 0000                  		bhi.w	Obj1D_Delete
0000915E 4E75                       		rts	
00009160                            ; ===========================================================================
00009160                            
00009160                            Obj1D_Delete:				; XREF: Obj1D_Index
00009160 6100 0000                  		bsr.w	DeleteObject
00009164 4E75                       		rts	
00009166                            ; ---------------------------------------------------------------------------
00009166                            ; Subroutine to	check if Sonic touches the object
00009166                            ; ---------------------------------------------------------------------------
00009166                            
00009166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009166                            
00009166                            
00009166                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009166 43F8 D000                  		lea	($FFFFD000).w,a1
0000916A 3029 0008                  		move.w	8(a1),d0
0000916E 9068 0008                  		sub.w	8(a0),d0
00009172 D041                       		add.w	d1,d0
00009174 6B00                       		bmi.s	loc_8918
00009176 D241                       		add.w	d1,d1
00009178 B041                       		cmp.w	d1,d0
0000917A 6400                       		bcc.s	loc_8918
0000917C 3429 000C                  		move.w	$C(a1),d2
00009180 1229 0016                  		move.b	$16(a1),d1
00009184 4881                       		ext.w	d1
00009186 D242                       		add.w	d2,d1
00009188 3028 000C                  		move.w	$C(a0),d0
0000918C 0440 0010                  		subi.w	#$10,d0
00009190 9041                       		sub.w	d1,d0
00009192 6200                       		bhi.s	loc_8918
00009194 0C40 FFF0                  		cmpi.w	#-$10,d0
00009198 6500                       		bcs.s	loc_8918
0000919A 70FF                       		moveq	#-1,d0
0000919C 4E75                       		rts	
0000919E                            ; ===========================================================================
0000919E                            
0000919E                            loc_8918:
0000919E 7000                       		moveq	#0,d0
000091A0 4E75                       		rts	
000091A2                            ; End of function Obj1D_ChkTouch
000091A2                            
000091A2                            ; ===========================================================================
000091A2                            ; ---------------------------------------------------------------------------
000091A2                            ; Sprite mappings - object 1D
000091A2                            ; ---------------------------------------------------------------------------
000091A2                            Map_obj1D:
000091A2                            	include "_maps\obj1D.asm"
000091A2                            ; ---------------------------------------------------------------------------
000091A2                            ; Sprite mappings - object 1D
000091A2                            ; ---------------------------------------------------------------------------
000091A2 0000                       		dc.w byte_891E-Map_obj1D
000091A4 04                         byte_891E:	dc.b 4
000091A5 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
000091AA 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
000091AF E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
000091B4 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
000091BA 00                         		even
000091BA 00                         		even
000091BA                            
000091BA                            ; ===========================================================================
000091BA                            ; ---------------------------------------------------------------------------
000091BA                            ; Object 2A - doors (SBZ)
000091BA                            ; ---------------------------------------------------------------------------
000091BA                            
000091BA                            Obj2A:					; XREF: Obj_Index
000091BA 7000                       		moveq	#0,d0
000091BC 1028 0024                  		move.b	$24(a0),d0
000091C0 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
000091C4 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
000091C8                            ; ===========================================================================
000091C8 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
000091CA 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
000091CC                            ; ===========================================================================
000091CC                            
000091CC                            Obj2A_Main:				; XREF: Obj2A_Index
000091CC 5428 0024                  		addq.b	#2,$24(a0)
000091D0 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
000091D8 317C 42E8 0002             		move.w	#$42E8,2(a0)
000091DE 0028 0004 0001             		ori.b	#4,1(a0)
000091E4 117C 0008 0019             		move.b	#8,$19(a0)
000091EA 117C 0004 0018             		move.b	#4,$18(a0)
000091F0                            
000091F0                            Obj2A_OpenShut:				; XREF: Obj2A_Index
000091F0 323C 0040                  		move.w	#$40,d1
000091F4 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
000091F8 3038 D008                  		move.w	($FFFFD008).w,d0
000091FC D041                       		add.w	d1,d0
000091FE B068 0008                  		cmp.w	8(a0),d0
00009202 6500                       		bcs.s	Obj2A_Animate
00009204 9041                       		sub.w	d1,d0
00009206 9041                       		sub.w	d1,d0
00009208 B068 0008                  		cmp.w	8(a0),d0
0000920C 6400                       		bcc.s	Obj2A_Animate
0000920E D041                       		add.w	d1,d0
00009210 B068 0008                  		cmp.w	8(a0),d0
00009214 6400                       		bcc.s	loc_899A
00009216 0828 0000 0022             		btst	#0,$22(a0)
0000921C 6600                       		bne.s	Obj2A_Animate
0000921E 6000                       		bra.s	Obj2A_Open
00009220                            ; ===========================================================================
00009220                            
00009220                            loc_899A:				; XREF: Obj2A_OpenShut
00009220 0828 0000 0022             		btst	#0,$22(a0)
00009226 6700                       		beq.s	Obj2A_Animate
00009228                            
00009228                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009228 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000922E                            
0000922E                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000922E 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009234 6100 0000                  		bsr.w	AnimateSprite
00009238 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000923C 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000923E 323C 0011                  		move.w	#$11,d1
00009242 343C 0020                  		move.w	#$20,d2
00009246 3602                       		move.w	d2,d3
00009248 5243                       		addq.w	#1,d3
0000924A 3828 0008                  		move.w	8(a0),d4
0000924E 6100 0000                  		bsr.w	SolidObject
00009252                            
00009252                            Obj2A_MarkAsUsed:
00009252 6000 0000                  		bra.w	MarkObjGone
00009256                            ; ===========================================================================
00009256                            Ani_obj2A:
00009256                            	include "_anim\obj2A.asm"
00009256                            ; ---------------------------------------------------------------------------
00009256                            ; Animation script - doors (SBZ)
00009256                            ; ---------------------------------------------------------------------------
00009256 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009258 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000925A 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009266 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009272                            		even
00009272                            		even
00009272                            
00009272                            ; ---------------------------------------------------------------------------
00009272                            ; Sprite mappings - doors (SBZ)
00009272                            ; ---------------------------------------------------------------------------
00009272                            Map_obj2A:
00009272                            	include "_maps\obj2A.asm"
00009272                            ; ---------------------------------------------------------------------------
00009272                            ; Sprite mappings - doors (SBZ)
00009272                            ; ---------------------------------------------------------------------------
00009272 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009276 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0000927A 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000927E 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009282 0000                       		dc.w byte_8A56-Map_obj2A
00009284 02                         byte_89FE:	dc.b 2
00009285 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0000928A 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000928F 02                         byte_8A09:	dc.b 2
00009290 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009295 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0000929A 02                         byte_8A14:	dc.b 2
0000929B D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000092A0 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000092A5 02                         byte_8A1F:	dc.b 2
000092A6 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000092AB 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000092B0 02                         byte_8A2A:	dc.b 2
000092B1 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000092B6 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000092BB 02                         byte_8A35:	dc.b 2
000092BC CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000092C1 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000092C6 02                         byte_8A40:	dc.b 2
000092C7 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
000092CC 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
000092D1 02                         byte_8A4B:	dc.b 2
000092D2 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
000092D7 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
000092DC 02                         byte_8A56:	dc.b 2
000092DD C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
000092E2 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
000092E8 00                         		even
000092E8 00                         		even
000092E8                            
000092E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092E8                            
000092E8                            
000092E8                            Obj44_SolidWall:			; XREF: Obj44_Solid
000092E8 6100 0000                  		bsr.w	Obj44_SolidWall2
000092EC 6700                       		beq.s	loc_8AA8
000092EE 6B00 0000                  		bmi.w	loc_8AC4
000092F2 4A40                       		tst.w	d0
000092F4 6700 0000                  		beq.w	loc_8A92
000092F8 6B00                       		bmi.s	loc_8A7C
000092FA 4A69 0010                  		tst.w	$10(a1)
000092FE 6B00                       		bmi.s	loc_8A92
00009300 6000                       		bra.s	loc_8A82
00009302                            ; ===========================================================================
00009302                            
00009302                            loc_8A7C:
00009302 4A69 0010                  		tst.w	$10(a1)
00009306 6A00                       		bpl.s	loc_8A92
00009308                            
00009308                            loc_8A82:
00009308 9169 0008                  		sub.w	d0,8(a1)
0000930C 337C 0000 0014             		move.w	#0,$14(a1)
00009312 337C 0000 0010             		move.w	#0,$10(a1)
00009318                            
00009318                            loc_8A92:
00009318 0829 0001 0022             		btst	#1,$22(a1)
0000931E 6600                       		bne.s	loc_8AB6
00009320 08E9 0005 0022             		bset	#5,$22(a1)
00009326 08E8 0005 0022             		bset	#5,$22(a0)
0000932C 4E75                       		rts	
0000932E                            ; ===========================================================================
0000932E                            
0000932E                            loc_8AA8:
0000932E 0828 0005 0022             		btst	#5,$22(a0)
00009334 6700                       		beq.s	locret_8AC2
00009336 337C 0001 001C             		move.w	#1,$1C(a1)
0000933C                            
0000933C                            loc_8AB6:
0000933C 08A8 0005 0022             		bclr	#5,$22(a0)
00009342 08A9 0005 0022             		bclr	#5,$22(a1)
00009348                            
00009348                            locret_8AC2:
00009348 4E75                       		rts	
0000934A                            ; ===========================================================================
0000934A                            
0000934A                            loc_8AC4:
0000934A 4A69 0012                  		tst.w	$12(a1)
0000934E 6A00                       		bpl.s	locret_8AD8
00009350 4A43                       		tst.w	d3
00009352 6A00                       		bpl.s	locret_8AD8
00009354 9769 000C                  		sub.w	d3,$C(a1)
00009358 337C 0000 0012             		move.w	#0,$12(a1)
0000935E                            
0000935E                            locret_8AD8:
0000935E 4E75                       		rts	
00009360                            ; End of function Obj44_SolidWall
00009360                            
00009360                            
00009360                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009360                            
00009360                            
00009360                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009360 43F8 D000                  		lea	($FFFFD000).w,a1
00009364 3029 0008                  		move.w	8(a1),d0
00009368 9068 0008                  		sub.w	8(a0),d0
0000936C D041                       		add.w	d1,d0
0000936E 6B00                       		bmi.s	loc_8B48
00009370 3601                       		move.w	d1,d3
00009372 D643                       		add.w	d3,d3
00009374 B043                       		cmp.w	d3,d0
00009376 6200                       		bhi.s	loc_8B48
00009378 1629 0016                  		move.b	$16(a1),d3
0000937C 4883                       		ext.w	d3
0000937E D443                       		add.w	d3,d2
00009380 3629 000C                  		move.w	$C(a1),d3
00009384 9668 000C                  		sub.w	$C(a0),d3
00009388 D642                       		add.w	d2,d3
0000938A 6B00                       		bmi.s	loc_8B48
0000938C 3802                       		move.w	d2,d4
0000938E D844                       		add.w	d4,d4
00009390 B644                       		cmp.w	d4,d3
00009392 6400                       		bcc.s	loc_8B48
00009394 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009398 6B00                       		bmi.s	loc_8B48
0000939A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000093A0 6400                       		bcc.s	loc_8B48
000093A2 4A78 FE08                  		tst.w	($FFFFFE08).w
000093A6 6600                       		bne.s	loc_8B48
000093A8 3A00                       		move.w	d0,d5
000093AA B240                       		cmp.w	d0,d1
000093AC 6400                       		bcc.s	loc_8B30
000093AE D241                       		add.w	d1,d1
000093B0 9041                       		sub.w	d1,d0
000093B2 3A00                       		move.w	d0,d5
000093B4 4445                       		neg.w	d5
000093B6                            
000093B6                            loc_8B30:
000093B6 3203                       		move.w	d3,d1
000093B8 B443                       		cmp.w	d3,d2
000093BA 6400                       		bcc.s	loc_8B3C
000093BC 9644                       		sub.w	d4,d3
000093BE 3203                       		move.w	d3,d1
000093C0 4441                       		neg.w	d1
000093C2                            
000093C2                            loc_8B3C:
000093C2 BA41                       		cmp.w	d1,d5
000093C4 6200                       		bhi.s	loc_8B44
000093C6 7801                       		moveq	#1,d4
000093C8 4E75                       		rts	
000093CA                            ; ===========================================================================
000093CA                            
000093CA                            loc_8B44:
000093CA 78FF                       		moveq	#-1,d4
000093CC 4E75                       		rts	
000093CE                            ; ===========================================================================
000093CE                            
000093CE                            loc_8B48:
000093CE 7800                       		moveq	#0,d4
000093D0 4E75                       		rts	
000093D2                            ; End of function Obj44_SolidWall2
000093D2                            
000093D2                            ; ===========================================================================
000093D2                            ; ---------------------------------------------------------------------------
000093D2                            ; Object 1E - Ball Hog enemy (SBZ)
000093D2                            ; ---------------------------------------------------------------------------
000093D2                            
000093D2                            Obj1E:					; XREF: Obj_Index
000093D2 7000                       		moveq	#0,d0
000093D4 1028 0024                  		move.b	$24(a0),d0
000093D8 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
000093DC 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
000093E0                            ; ===========================================================================
000093E0 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
000093E2 0000                       		dc.w Obj1E_Action-Obj1E_Index
000093E4                            ; ===========================================================================
000093E4                            
000093E4                            Obj1E_Main:				; XREF: Obj1E_Index
000093E4 117C 0013 0016             		move.b	#$13,$16(a0)
000093EA 117C 0008 0017             		move.b	#8,$17(a0)
000093F0 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000093F8 317C 2302 0002             		move.w	#$2302,2(a0)
000093FE 117C 0004 0001             		move.b	#4,1(a0)
00009404 117C 0004 0018             		move.b	#4,$18(a0)
0000940A 117C 0005 0020             		move.b	#5,$20(a0)
00009410 117C 000C 0019             		move.b	#$C,$19(a0)
00009416 6100 0000                  		bsr.w	ObjectFall
0000941A 4EB9 0000 0000             		jsr	ObjHitFloor
00009420 4A41                       		tst.w	d1
00009422 6A00                       		bpl.s	locret_8BAC
00009424 D368 000C                  		add.w	d1,$C(a0)
00009428 317C 0000 0012             		move.w	#0,$12(a0)
0000942E 5428 0024                  		addq.b	#2,$24(a0)
00009432                            
00009432                            locret_8BAC:
00009432 4E75                       		rts	
00009434                            ; ===========================================================================
00009434                            
00009434                            Obj1E_Action:				; XREF: Obj1E_Index
00009434 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000943A 6100 0000                  		bsr.w	AnimateSprite
0000943E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009444 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009446 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000944A 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000944C 6000                       		bra.s	Obj1E_MarkAsGone
0000944E                            ; ===========================================================================
0000944E                            
0000944E                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000944E 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009452                            
00009452                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009452 6000 0000                  		bra.w	MarkObjGone
00009456                            ; ===========================================================================
00009456                            
00009456                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009456 117C 0001 0032             		move.b	#1,$32(a0)
0000945C 6100 0000                  		bsr.w	SingleObjLoad
00009460 6600                       		bne.s	loc_8C1A
00009462 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009466 3368 0008 0008             		move.w	8(a0),8(a1)
0000946C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009472 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009478 337C 0000 0012             		move.w	#0,$12(a1)
0000947E 70FC                       		moveq	#-4,d0
00009480 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009486 6700                       		beq.s	loc_8C0A	; if not, branch
00009488 4440                       		neg.w	d0
0000948A 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000948E                            
0000948E                            loc_8C0A:
0000948E D169 0008                  		add.w	d0,8(a1)
00009492 0669 000C 000C             		addi.w	#$C,$C(a1)
00009498 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000949E                            
0000949E                            loc_8C1A:
0000949E 60B2                       		bra.s	Obj1E_MarkAsGone
000094A0                            ; ===========================================================================
000094A0                            ; ---------------------------------------------------------------------------
000094A0                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000094A0                            ; ---------------------------------------------------------------------------
000094A0                            
000094A0                            Obj20:					; XREF: Obj_Index
000094A0 7000                       		moveq	#0,d0
000094A2 1028 0024                  		move.b	$24(a0),d0
000094A6 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000094AA 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000094AE                            ; ===========================================================================
000094AE 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000094B0 0000                       		dc.w Obj20_Bounce-Obj20_Index
000094B2                            ; ===========================================================================
000094B2                            
000094B2                            Obj20_Main:				; XREF: Obj20_Index
000094B2 5428 0024                  		addq.b	#2,$24(a0)
000094B6 117C 0007 0016             		move.b	#7,$16(a0)
000094BC 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000094C4 317C 2302 0002             		move.w	#$2302,2(a0)
000094CA 117C 0004 0001             		move.b	#4,1(a0)
000094D0 117C 0003 0018             		move.b	#3,$18(a0)
000094D6 117C 0087 0020             		move.b	#$87,$20(a0)
000094DC 117C 0008 0019             		move.b	#8,$19(a0)
000094E2 7000                       		moveq	#0,d0
000094E4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000094E8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000094EC 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000094F0 117C 0004 001A             		move.b	#4,$1A(a0)
000094F6                            
000094F6                            Obj20_Bounce:				; XREF: Obj20_Index
000094F6 4EB9 0000 0000             		jsr	ObjectFall
000094FC 4A68 0012                  		tst.w	$12(a0)
00009500 6B00                       		bmi.s	Obj20_ChkExplode
00009502 4EB9 0000 0000             		jsr	ObjHitFloor
00009508 4A41                       		tst.w	d1
0000950A 6A00                       		bpl.s	Obj20_ChkExplode
0000950C D368 000C                  		add.w	d1,$C(a0)
00009510 317C FD00 0012             		move.w	#-$300,$12(a0)
00009516 4A03                       		tst.b	d3
00009518 6700                       		beq.s	Obj20_ChkExplode
0000951A 6B00                       		bmi.s	loc_8CA4
0000951C 4A68 0010                  		tst.w	$10(a0)
00009520 6A00                       		bpl.s	Obj20_ChkExplode
00009522 4468 0010                  		neg.w	$10(a0)
00009526 6000                       		bra.s	Obj20_ChkExplode
00009528                            ; ===========================================================================
00009528                            
00009528                            loc_8CA4:				; XREF: Obj20_Bounce
00009528 4A68 0010                  		tst.w	$10(a0)
0000952C 6B00                       		bmi.s	Obj20_ChkExplode
0000952E 4468 0010                  		neg.w	$10(a0)
00009532                            
00009532                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009532 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009536 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009538 10BC 0024                  		move.b	#$24,0(a0)
0000953C 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009540 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009546 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000954A                            ; ===========================================================================
0000954A                            
0000954A                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000954A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000954E 6A00                       		bpl.s	Obj20_Display
00009550 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009556 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000955C                            
0000955C                            Obj20_Display:
0000955C 6100 0000                  		bsr.w	DisplaySprite
00009560 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009564 0640 00E0                  		addi.w	#$E0,d0
00009568 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000956C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009570 4E75                       		rts	
00009572                            ; ===========================================================================
00009572                            ; ---------------------------------------------------------------------------
00009572                            ; Object 24 - explosion	from a destroyed monitor
00009572                            ; ---------------------------------------------------------------------------
00009572                            
00009572                            Obj24:					; XREF: Obj_Index
00009572 7000                       		moveq	#0,d0
00009574 1028 0024                  		move.b	$24(a0),d0
00009578 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000957C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009580                            ; ===========================================================================
00009580 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009582 0000                       		dc.w Obj24_Animate-Obj24_Index
00009584                            ; ===========================================================================
00009584                            
00009584                            Obj24_Main:				; XREF: Obj24_Index
00009584 5428 0024                  		addq.b	#2,$24(a0)
00009588 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009590 317C 041C 0002             		move.w	#$41C,2(a0)
00009596 117C 0004 0001             		move.b	#4,1(a0)
0000959C 117C 0001 0018             		move.b	#1,$18(a0)
000095A2 117C 0000 0020             		move.b	#0,$20(a0)
000095A8 117C 000C 0019             		move.b	#$C,$19(a0)
000095AE 117C 0009 001E             		move.b	#9,$1E(a0)
000095B4 117C 0000 001A             		move.b	#0,$1A(a0)
000095BA 303C 00A5                  		move.w	#$A5,d0
000095BE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play explosion sound
000095C4                            
000095C4                            Obj24_Animate:				; XREF: Obj24_Index
000095C4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000095C8 6A00                       		bpl.s	Obj24_Display
000095CA 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
000095D0 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000095D4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000095DA 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000095DE                            
000095DE                            Obj24_Display:
000095DE 6000 0000                  		bra.w	DisplaySprite
000095E2                            ; ===========================================================================
000095E2                            ; ---------------------------------------------------------------------------
000095E2                            ; Object 27 - explosion	from a destroyed enemy
000095E2                            ; ---------------------------------------------------------------------------
000095E2                            
000095E2                            Obj27:					; XREF: Obj_Index
000095E2 7000                       		moveq	#0,d0
000095E4 1028 0024                  		move.b	$24(a0),d0
000095E8 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000095EC 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000095F0                            ; ===========================================================================
000095F0 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000095F2 0000                       		dc.w Obj27_Main-Obj27_Index
000095F4 0000                       		dc.w Obj27_Animate-Obj27_Index
000095F6                            ; ===========================================================================
000095F6                            
000095F6                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000095F6 5428 0024                  		addq.b	#2,$24(a0)
000095FA 6100 0000                  		bsr.w	SingleObjLoad
000095FE 6600                       		bne.s	Obj27_Main
00009600 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009604 3368 0008 0008             		move.w	8(a0),8(a1)
0000960A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009610 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009616                            
00009616                            Obj27_Main:				; XREF: Obj27_Index
00009616 5428 0024                  		addq.b	#2,$24(a0)
0000961A 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009622 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009628 117C 0004 0001             		move.b	#4,1(a0)
0000962E 117C 0001 0018             		move.b	#1,$18(a0)
00009634 117C 0000 0020             		move.b	#0,$20(a0)
0000963A 117C 000C 0019             		move.b	#$C,$19(a0)
00009640                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009640 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009646 117C 0000 001A             		move.b	#0,$1A(a0)
0000964C 303C 00C1                  		move.w	#$C1,d0
00009650 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009656                            
00009656 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
0000965C 1028 0028                  		move.b	$28(a0),d0
00009660 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009666 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
0000966C                            
0000966C                            Obj27_Animate:				; XREF: Obj27_Index
0000966C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009670 6A00                       		bpl.s	Obj27_Display
00009672                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009672 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009678 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000967C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009682 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009686                            
00009686                            Obj27_Display:
00009686 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
0000968C 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009692 6000 0000                  		bra.w	DisplaySprite
00009696                            ; ===========================================================================
00009696                            ; ---------------------------------------------------------------------------
00009696                            Obj27_ExplosionXYSpd:
00009696                            		; dc.w	-$350, -$300	; Left
00009696                            		; dc.w	-$200, -$450	; Near middle (left)
00009696                            		; dc.w	0, -$500	; Middle
00009696                            		; dc.w	$200, -$450	; Near middle (right)
00009696                            		; dc.w	$350, -$300	; Right
00009696                            
00009696 FEB0 FC00                  		dc.w	-$150, -$400	; Left
0000969A FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
0000969E 0000 FA00                  		dc.w	0, -$600	; Middle
000096A2 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
000096A6 0150 FC00                  		dc.w	$150, -$400	; Right
000096AA                            
000096AA 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
000096C4                            ; ---------------------------------------------------------------------------
000096C4                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
000096C4                            ; ---------------------------------------------------------------------------
000096C4                            
000096C4                            Obj3F:					; XREF: Obj_Index
000096C4 7000                       		moveq	#0,d0
000096C6 1028 0024                  		move.b	$24(a0),d0
000096CA 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
000096CE 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
000096D2                            ; ===========================================================================
000096D2 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
000096D4 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
000096D6                            ; ===========================================================================
000096D6                            
000096D6                            Obj3F_Main:				; XREF: Obj3F_Index
000096D6 5428 0024                  		addq.b	#2,$24(a0)
000096DA 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000096E2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000096E8 117C 0004 0001             		move.b	#4,1(a0)
000096EE 117C 0001 0018             		move.b	#1,$18(a0)
000096F4 117C 0000 0020             		move.b	#0,$20(a0)
000096FA 117C 000C 0019             		move.b	#$C,$19(a0)
00009700 117C 0007 001E             		move.b	#7,$1E(a0)
00009706 117C 0000 001A             		move.b	#0,$1A(a0)
0000970C 303C 00C4                  		move.w	#$C4,d0
00009710 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009716                            ; ===========================================================================
00009716                            Ani_obj1E:
00009716                            	include "_anim\obj1E.asm"
00009716                            ; ---------------------------------------------------------------------------
00009716                            ; Animation script - doors (SBZ)
00009716                            ; ---------------------------------------------------------------------------
00009716 0000                       		dc.w byte_8E4A-Ani_obj1E
00009718 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009730 00                         		even
00009730 00                         		even
00009730                            
00009730                            ; ---------------------------------------------------------------------------
00009730                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009730                            ; ---------------------------------------------------------------------------
00009730                            Map_obj1E:
00009730                            	include "_maps\obj1E.asm"
00009730                            Map_a7ad:
00009730 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
00009732 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
00009734 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
00009736 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
00009738 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
0000973A 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
0000973C 02                         Map_a7ad_C: 	dc.b $2
0000973D EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009742 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009747 02                         Map_a7ad_17: 	dc.b $2
00009748 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
0000974D FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009752 02                         Map_a7ad_22: 	dc.b $2
00009753 F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
00009758 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
0000975D 02                         Map_a7ad_2D: 	dc.b $2
0000975E E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
00009763 F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
00009768 02                         Map_a7ad_38: 	dc.b $2
00009769 F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
0000976E E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
00009773 02                         Map_a7ad_43: 	dc.b $2
00009774 F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
00009779 E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
0000977E                            	even
0000977E                            	even
0000977E                            
0000977E                            ; ---------------------------------------------------------------------------
0000977E                            ; Sprite mappings - explosion
0000977E                            ; ---------------------------------------------------------------------------
0000977E                            Map_obj24:
0000977E                            	include "_maps\obj24.asm"
0000977E                            ; ---------------------------------------------------------------------------
0000977E                            ; Sprite mappings - explosion
0000977E                            ; ---------------------------------------------------------------------------
0000977E 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009782 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009786 01                         byte_8EAE:	dc.b 1
00009787 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000978C 01                         byte_8EB4:	dc.b 1
0000978D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009792 01                         byte_8EBA:	dc.b 1
00009793 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009798 01                         byte_8EC0:	dc.b 1
00009799 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000979E                            		even
0000979E                            		even
0000979E                            
0000979E                            ; ---------------------------------------------------------------------------
0000979E                            ; Sprite mappings - explosion
0000979E                            ; ---------------------------------------------------------------------------
0000979E 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
000097A2 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
000097A6 0000                       		dc.w byte_8EF7-Map_obj27
000097A8 01                         byte_8ED0:	dc.b 1
000097A9 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000097AE 01                         byte_8ED6:	dc.b 1
000097AF F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
000097B4 01                         byte_8EDC:	dc.b 1
000097B5 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
000097BA 04                         byte_8EE2:	dc.b 4
000097BB EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
000097C0 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
000097C5 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
000097CA FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
000097CF 04                         byte_8EF7:	dc.b 4
000097D0 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
000097D5 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
000097DA 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
000097DF FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
000097E4                            		even
000097E4                            ; ---------------------------------------------------------------------------
000097E4                            ; Sprite mappings - explosion from when	a boss is destroyed
000097E4                            ; ---------------------------------------------------------------------------
000097E4 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
000097E6 0000                       		dc.w byte_8F16-Map_obj3F
000097E8 0000                       		dc.w byte_8F1C-Map_obj3F
000097EA FFD6                       		dc.w byte_8EE2-Map_obj3F
000097EC FFEB                       		dc.w byte_8EF7-Map_obj3F
000097EE 01                         byte_8F16:	dc.b 1
000097EF F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000097F4 01                         byte_8F1C:	dc.b 1
000097F5 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000097FA                            		even
000097FA                            ; ===========================================================================
000097FA                            ; ---------------------------------------------------------------------------
000097FA                            ; Object 28 - animals
000097FA                            ; ---------------------------------------------------------------------------
000097FA                            
000097FA                            Obj28:					; XREF: Obj_Index
000097FA 7000                       		moveq	#0,d0
000097FC 1028 0024                  		move.b	$24(a0),d0
00009800 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009804 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009808                            ; ===========================================================================
00009808 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000980C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009810 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009814 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009818 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000981C 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009820 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009824 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009828 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000982C 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009830 0000                       		dc.w loc_92D6-Obj28_Index
00009832                            
00009832 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1, 0,	5, 0,	5
00009842                            
00009842 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009846 0000 0000                  		dc.l Map_obj28
0000984A FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000984E 0000 0000                  		dc.l Map_obj28a		; mappings address
00009852 FE80 FD00                  		dc.w $FE80, $FD00
00009856 0000 0000                  		dc.l Map_obj28
0000985A FEC0 FE80                  		dc.w $FEC0, $FE80
0000985E 0000 0000                  		dc.l Map_obj28a
00009862 FE40 FD00                  		dc.w $FE40, $FD00
00009866 0000 0000                  		dc.l Map_obj28b
0000986A FD00 FC00                  		dc.w $FD00, $FC00
0000986E 0000 0000                  		dc.l Map_obj28a
00009872 FD80 FC80                  		dc.w $FD80, $FC80
00009876 0000 0000                  		dc.l Map_obj28b
0000987A                            
0000987A FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000988A FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000989A FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000098A6                            
000098A6 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000098BA 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
000098CE 0000 0000                  		dc.l Map_obj28b
000098D2                            
000098D2 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
000098E4 0565 05B3                  		dc.w $565, $5B3
000098E8                            ; ===========================================================================
000098E8                            
000098E8                            Obj28_Ending:				; XREF: Obj28_Index
000098E8 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
000098EC 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000098F0 7000                       		moveq	#0,d0
000098F2 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000098F6 D040                       		add.w	d0,d0		; multiply d0 by 2
000098F8 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
000098FC 0440 0014                  		subi.w	#$14,d0
00009900 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009906 D040                       		add.w	d0,d0
00009908 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000990E 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009912 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009918 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000991E 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009924 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000992A 117C 000C 0016             		move.b	#$C,$16(a0)
00009930 117C 0004 0001             		move.b	#4,1(a0)
00009936 08E8 0000 0001             		bset	#0,1(a0)
0000993C 117C 0006 0018             		move.b	#6,$18(a0)
00009942 117C 0008 0019             		move.b	#8,$19(a0)
00009948 117C 0007 001E             		move.b	#7,$1E(a0)
0000994E 6000 0000                  		bra.w	DisplaySprite
00009952                            ; ===========================================================================
00009952                            
00009952                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009952 5428 0024                  		addq.b	#2,$24(a0)
00009956 6100 93EE                  		bsr.w	RandomNumber
0000995A 0240 0001                  		andi.w	#1,d0
0000995E 7200                       		moveq	#0,d1
00009960 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009964 D241                       		add.w	d1,d1
00009966 D240                       		add.w	d0,d1
00009968 43FA FEC8                  		lea	Obj28_VarIndex(pc),a1
0000996C 1031 1000                  		move.b	(a1,d1.w),d0
00009970 1140 0030                  		move.b	d0,$30(a0)
00009974 E748                       		lsl.w	#3,d0
00009976 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000997A D2C0                       		adda.w	d0,a1
0000997C 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009980 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009984 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009988 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000998E 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009994 6700                       		beq.s	loc_90C0	; if yes, branch
00009996 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000999C                            
0000999C                            loc_90C0:
0000999C 117C 000C 0016             		move.b	#$C,$16(a0)
000099A2 117C 0004 0001             		move.b	#4,1(a0)
000099A8 08E8 0000 0001             		bset	#0,1(a0)
000099AE 117C 0006 0018             		move.b	#6,$18(a0)
000099B4 117C 0008 0019             		move.b	#8,$19(a0)
000099BA 117C 0007 001E             		move.b	#7,$1E(a0)
000099C0 117C 0002 001A             		move.b	#2,$1A(a0)
000099C6 317C FC00 0012             		move.w	#-$400,$12(a0)
000099CC 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000099D0 6600                       		bne.s	loc_911C
000099D2 6100 0000                  		bsr.w	SingleObjLoad
000099D6 6600                       		bne.s	Obj28_Display
000099D8 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000099DC 3368 0008 0008             		move.w	8(a0),8(a1)
000099E2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000099E8 3028 003E                  		move.w	$3E(a0),d0
000099EC E248                       		lsr.w	#1,d0
000099EE 1340 001A                  		move.b	d0,$1A(a1)
000099F2                            
000099F2                            Obj28_Display:
000099F2 6000 0000                  		bra.w	DisplaySprite
000099F6                            ; ===========================================================================
000099F6                            
000099F6                            loc_911C:
000099F6 117C 0012 0024             		move.b	#$12,$24(a0)
000099FC 4268 0010                  		clr.w	$10(a0)
00009A00 6000 0000                  		bra.w	DisplaySprite
00009A04                            ; ===========================================================================
00009A04                            
00009A04                            loc_912A:				; XREF: Obj28_Index
00009A04 4A28 0001                  		tst.b	1(a0)
00009A08 6A00 0000                  		bpl.w	DeleteObject
00009A0C 6100 0000                  		bsr.w	ObjectFall
00009A10 4A68 0012                  		tst.w	$12(a0)
00009A14 6B00                       		bmi.s	loc_9180
00009A16 4EB9 0000 0000             		jsr	ObjHitFloor
00009A1C 4A41                       		tst.w	d1
00009A1E 6A00                       		bpl.s	loc_9180
00009A20 D368 000C                  		add.w	d1,$C(a0)
00009A24 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009A2A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A30 117C 0001 001A             		move.b	#1,$1A(a0)
00009A36 1028 0030                  		move.b	$30(a0),d0
00009A3A D000                       		add.b	d0,d0
00009A3C 5800                       		addq.b	#4,d0
00009A3E 1140 0024                  		move.b	d0,$24(a0)
00009A42 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009A46 6700                       		beq.s	loc_9180
00009A48 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009A4E 6700                       		beq.s	loc_9180
00009A50 4468 0010                  		neg.w	$10(a0)
00009A54 0868 0000 0001             		bchg	#0,1(a0)
00009A5A                            
00009A5A                            loc_9180:
00009A5A 6000 0000                  		bra.w	DisplaySprite
00009A5E                            ; ===========================================================================
00009A5E                            
00009A5E                            loc_9184:				; XREF: Obj28_Index
00009A5E 6100 0000                  		bsr.w	ObjectFall
00009A62 117C 0001 001A             		move.b	#1,$1A(a0)
00009A68 4A68 0012                  		tst.w	$12(a0)
00009A6C 6B00                       		bmi.s	loc_91AE
00009A6E 117C 0000 001A             		move.b	#0,$1A(a0)
00009A74 4EB9 0000 0000             		jsr	ObjHitFloor
00009A7A 4A41                       		tst.w	d1
00009A7C 6A00                       		bpl.s	loc_91AE
00009A7E D368 000C                  		add.w	d1,$C(a0)
00009A82 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A88                            
00009A88                            loc_91AE:
00009A88 4A28 0028                  		tst.b	$28(a0)
00009A8C 6600                       		bne.s	loc_9224
00009A8E 4A28 0001                  		tst.b	1(a0)
00009A92 6A00 0000                  		bpl.w	DeleteObject
00009A96 6000 0000                  		bra.w	DisplaySprite
00009A9A                            ; ===========================================================================
00009A9A                            
00009A9A                            loc_91C0:				; XREF: Obj28_Index
00009A9A 6100 0000                  		bsr.w	SpeedToPos
00009A9E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009AA4 4A68 0012                  		tst.w	$12(a0)
00009AA8 6B00                       		bmi.s	loc_91FC
00009AAA 4EB9 0000 0000             		jsr	ObjHitFloor
00009AB0 4A41                       		tst.w	d1
00009AB2 6A00                       		bpl.s	loc_91FC
00009AB4 D368 000C                  		add.w	d1,$C(a0)
00009AB8 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009ABE 4A28 0028                  		tst.b	$28(a0)
00009AC2 6700                       		beq.s	loc_91FC
00009AC4 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009ACA 6700                       		beq.s	loc_91FC
00009ACC 4468 0010                  		neg.w	$10(a0)
00009AD0 0868 0000 0001             		bchg	#0,1(a0)
00009AD6                            
00009AD6                            loc_91FC:
00009AD6 5328 001E                  		subq.b	#1,$1E(a0)
00009ADA 6A00                       		bpl.s	loc_9212
00009ADC 117C 0001 001E             		move.b	#1,$1E(a0)
00009AE2 5228 001A                  		addq.b	#1,$1A(a0)
00009AE6 0228 0001 001A             		andi.b	#1,$1A(a0)
00009AEC                            
00009AEC                            loc_9212:
00009AEC 4A28 0028                  		tst.b	$28(a0)
00009AF0 6600                       		bne.s	loc_9224
00009AF2 4A28 0001                  		tst.b	1(a0)
00009AF6 6A00 0000                  		bpl.w	DeleteObject
00009AFA 6000 0000                  		bra.w	DisplaySprite
00009AFE                            ; ===========================================================================
00009AFE                            
00009AFE                            loc_9224:				; XREF: Obj28_Index
00009AFE 3028 0008                  		move.w	8(a0),d0
00009B02 9078 D008                  		sub.w	($FFFFD008).w,d0
00009B06 6500                       		bcs.s	loc_923C
00009B08 0440 0180                  		subi.w	#$180,d0
00009B0C 6A00                       		bpl.s	loc_923C
00009B0E 4A28 0001                  		tst.b	1(a0)
00009B12 6A00 0000                  		bpl.w	DeleteObject
00009B16                            
00009B16                            loc_923C:
00009B16 6000 0000                  		bra.w	DisplaySprite
00009B1A                            ; ===========================================================================
00009B1A                            
00009B1A                            loc_9240:				; XREF: Obj28_Index
00009B1A 4A28 0001                  		tst.b	1(a0)
00009B1E 6A00 0000                  		bpl.w	DeleteObject
00009B22 5368 0036                  		subq.w	#1,$36(a0)
00009B26 6600 0000                  		bne.w	loc_925C
00009B2A 117C 0002 0024             		move.b	#2,$24(a0)
00009B30 117C 0003 0018             		move.b	#3,$18(a0)
00009B36                            
00009B36                            loc_925C:
00009B36 6000 0000                  		bra.w	DisplaySprite
00009B3A                            ; ===========================================================================
00009B3A                            
00009B3A                            loc_9260:				; XREF: Obj28_Index
00009B3A 6100 0000                  		bsr.w	sub_9404
00009B3E 6400                       		bcc.s	loc_927C
00009B40 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009B46 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B4C 117C 000E 0024             		move.b	#$E,$24(a0)
00009B52 6000 FF46                  		bra.w	loc_91C0
00009B56                            ; ===========================================================================
00009B56                            
00009B56                            loc_927C:
00009B56 6000 FFA6                  		bra.w	loc_9224
00009B5A                            ; ===========================================================================
00009B5A                            
00009B5A                            loc_9280:				; XREF: Obj28_Index
00009B5A 6100 0000                  		bsr.w	sub_9404
00009B5E 6A00                       		bpl.s	loc_92B6
00009B60 4268 0010                  		clr.w	$10(a0)
00009B64 4268 0032                  		clr.w	$32(a0)
00009B68 6100 0000                  		bsr.w	SpeedToPos
00009B6C 0668 0018 0012             		addi.w	#$18,$12(a0)
00009B72 6100 0000                  		bsr.w	loc_93C4
00009B76 6100 0000                  		bsr.w	loc_93EC
00009B7A 5328 001E                  		subq.b	#1,$1E(a0)
00009B7E 6A00                       		bpl.s	loc_92B6
00009B80 117C 0001 001E             		move.b	#1,$1E(a0)
00009B86 5228 001A                  		addq.b	#1,$1A(a0)
00009B8A 0228 0001 001A             		andi.b	#1,$1A(a0)
00009B90                            
00009B90                            loc_92B6:
00009B90 6000 FF6C                  		bra.w	loc_9224
00009B94                            ; ===========================================================================
00009B94                            
00009B94                            loc_92BA:				; XREF: Obj28_Index
00009B94 6100 0000                  		bsr.w	sub_9404
00009B98 6A00                       		bpl.s	loc_9310
00009B9A 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009BA0 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BA6 117C 0004 0024             		move.b	#4,$24(a0)
00009BAC 6000 FEB0                  		bra.w	loc_9184
00009BB0                            ; ===========================================================================
00009BB0                            
00009BB0                            loc_92D6:				; XREF: Obj28_Index
00009BB0 6100 0000                  		bsr.w	ObjectFall
00009BB4 117C 0001 001A             		move.b	#1,$1A(a0)
00009BBA 4A68 0012                  		tst.w	$12(a0)
00009BBE 6B00                       		bmi.s	loc_9310
00009BC0 117C 0000 001A             		move.b	#0,$1A(a0)
00009BC6 4EB9 0000 0000             		jsr	ObjHitFloor
00009BCC 4A41                       		tst.w	d1
00009BCE 6A00                       		bpl.s	loc_9310
00009BD0 4628 0029                  		not.b	$29(a0)
00009BD4 6600                       		bne.s	loc_9306
00009BD6 4468 0010                  		neg.w	$10(a0)
00009BDA 0868 0000 0001             		bchg	#0,1(a0)
00009BE0                            
00009BE0                            loc_9306:
00009BE0 D368 000C                  		add.w	d1,$C(a0)
00009BE4 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BEA                            
00009BEA                            loc_9310:
00009BEA 6000 FF12                  		bra.w	loc_9224
00009BEE                            ; ===========================================================================
00009BEE                            
00009BEE                            loc_9314:				; XREF: Obj28_Index
00009BEE 6100 0000                  		bsr.w	sub_9404
00009BF2 6A00                       		bpl.s	loc_932E
00009BF4 4268 0010                  		clr.w	$10(a0)
00009BF8 4268 0032                  		clr.w	$32(a0)
00009BFC 6100 0000                  		bsr.w	ObjectFall
00009C00 6100 0000                  		bsr.w	loc_93C4
00009C04 6100 0000                  		bsr.w	loc_93EC
00009C08                            
00009C08                            loc_932E:
00009C08 6000 FEF4                  		bra.w	loc_9224
00009C0C                            ; ===========================================================================
00009C0C                            
00009C0C                            loc_9332:				; XREF: Obj28_Index
00009C0C 6100 0000                  		bsr.w	sub_9404
00009C10 6A00                       		bpl.s	loc_936C
00009C12 6100 0000                  		bsr.w	ObjectFall
00009C16 117C 0001 001A             		move.b	#1,$1A(a0)
00009C1C 4A68 0012                  		tst.w	$12(a0)
00009C20 6B00                       		bmi.s	loc_936C
00009C22 117C 0000 001A             		move.b	#0,$1A(a0)
00009C28 4EB9 0000 0000             		jsr	ObjHitFloor
00009C2E 4A41                       		tst.w	d1
00009C30 6A00                       		bpl.s	loc_936C
00009C32 4468 0010                  		neg.w	$10(a0)
00009C36 0868 0000 0001             		bchg	#0,1(a0)
00009C3C D368 000C                  		add.w	d1,$C(a0)
00009C40 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C46                            
00009C46                            loc_936C:
00009C46 6000 FEB6                  		bra.w	loc_9224
00009C4A                            ; ===========================================================================
00009C4A                            
00009C4A                            loc_9370:				; XREF: Obj28_Index
00009C4A 6100 0000                  		bsr.w	sub_9404
00009C4E 6A00                       		bpl.s	loc_93C0
00009C50 6100 0000                  		bsr.w	SpeedToPos
00009C54 0668 0018 0012             		addi.w	#$18,$12(a0)
00009C5A 4A68 0012                  		tst.w	$12(a0)
00009C5E 6B00                       		bmi.s	loc_93AA
00009C60 4EB9 0000 0000             		jsr	ObjHitFloor
00009C66 4A41                       		tst.w	d1
00009C68 6A00                       		bpl.s	loc_93AA
00009C6A 4628 0029                  		not.b	$29(a0)
00009C6E 6600                       		bne.s	loc_93A0
00009C70 4468 0010                  		neg.w	$10(a0)
00009C74 0868 0000 0001             		bchg	#0,1(a0)
00009C7A                            
00009C7A                            loc_93A0:
00009C7A D368 000C                  		add.w	d1,$C(a0)
00009C7E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C84                            
00009C84                            loc_93AA:
00009C84 5328 001E                  		subq.b	#1,$1E(a0)
00009C88 6A00                       		bpl.s	loc_93C0
00009C8A 117C 0001 001E             		move.b	#1,$1E(a0)
00009C90 5228 001A                  		addq.b	#1,$1A(a0)
00009C94 0228 0001 001A             		andi.b	#1,$1A(a0)
00009C9A                            
00009C9A                            loc_93C0:
00009C9A 6000 FE62                  		bra.w	loc_9224
00009C9E                            ; ===========================================================================
00009C9E                            
00009C9E                            loc_93C4:
00009C9E 117C 0001 001A             		move.b	#1,$1A(a0)
00009CA4 4A68 0012                  		tst.w	$12(a0)
00009CA8 6B00                       		bmi.s	locret_93EA
00009CAA 117C 0000 001A             		move.b	#0,$1A(a0)
00009CB0 4EB9 0000 0000             		jsr	ObjHitFloor
00009CB6 4A41                       		tst.w	d1
00009CB8 6A00                       		bpl.s	locret_93EA
00009CBA D368 000C                  		add.w	d1,$C(a0)
00009CBE 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009CC4                            
00009CC4                            locret_93EA:
00009CC4 4E75                       		rts	
00009CC6                            ; ===========================================================================
00009CC6                            
00009CC6                            loc_93EC:
00009CC6 08E8 0000 0001             		bset	#0,1(a0)
00009CCC 3028 0008                  		move.w	8(a0),d0
00009CD0 9078 D008                  		sub.w	($FFFFD008).w,d0
00009CD4 6400                       		bcc.s	locret_9402
00009CD6 08A8 0000 0001             		bclr	#0,1(a0)
00009CDC                            
00009CDC                            locret_9402:
00009CDC 4E75                       		rts	
00009CDE                            
00009CDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009CDE                            
00009CDE                            
00009CDE                            sub_9404:
00009CDE 3038 D008                  		move.w	($FFFFD008).w,d0
00009CE2 9068 0008                  		sub.w	8(a0),d0
00009CE6 0440 00B8                  		subi.w	#$B8,d0
00009CEA 4E75                       		rts	
00009CEC                            ; End of function sub_9404
00009CEC                            
00009CEC                            ; ===========================================================================
00009CEC                            ; ---------------------------------------------------------------------------
00009CEC                            ; Object 29 - points that appear when you destroy something
00009CEC                            ; ---------------------------------------------------------------------------
00009CEC                            
00009CEC                            Obj29:					; XREF: Obj_Index
00009CEC 7000                       		moveq	#0,d0
00009CEE 1028 0024                  		move.b	$24(a0),d0
00009CF2 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009CF6 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009CFA 6000 0000                  		bra.w	DisplaySprite
00009CFE                            ; ===========================================================================
00009CFE 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009D00 0000                       		dc.w Obj29_Slower-Obj29_Index
00009D02                            ; ===========================================================================
00009D02                            
00009D02                            Obj29_Main:				; XREF: Obj29_Index
00009D02 5428 0024                  		addq.b	#2,$24(a0)
00009D06 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009D0E 317C 2797 0002             		move.w	#$2797,2(a0)
00009D14 117C 0004 0001             		move.b	#4,1(a0)
00009D1A 117C 0001 0018             		move.b	#1,$18(a0)
00009D20 117C 0008 0019             		move.b	#8,$19(a0)
00009D26 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009D2C                            
00009D2C                            Obj29_Slower:				; XREF: Obj29_Index
00009D2C 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009D30 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009D34 6100 0000                  		bsr.w	SpeedToPos
00009D38 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009D3E 4E75                       		rts	
00009D40                            ; ===========================================================================
00009D40                            ; ---------------------------------------------------------------------------
00009D40                            ; Sprite mappings - animals
00009D40                            ; ---------------------------------------------------------------------------
00009D40                            Map_obj28:
00009D40                            	include "_maps\obj28.asm"
00009D40                            ; ---------------------------------------------------------------------------
00009D40                            ; Sprite mappings - animals
00009D40                            ; ---------------------------------------------------------------------------
00009D40 0000                       		dc.w byte_9472-Map_obj28
00009D42 0000                       		dc.w byte_9478-Map_obj28
00009D44 0000                       		dc.w byte_946C-Map_obj28
00009D46 01                         byte_946C:	dc.b 1
00009D47 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D4C 01                         byte_9472:	dc.b 1
00009D4D F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009D52 01                         byte_9478:	dc.b 1
00009D53 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009D58                            		even
00009D58                            		even
00009D58                            
00009D58                            Map_obj28a:
00009D58                            	include "_maps\obj28a.asm"
00009D58                            ; ---------------------------------------------------------------------------
00009D58                            ; Sprite mappings - animals
00009D58                            ; ---------------------------------------------------------------------------
00009D58 0000                       		dc.w byte_948A-Map_obj28a
00009D5A 0000                       		dc.w byte_9490-Map_obj28a
00009D5C 0000                       		dc.w byte_9484-Map_obj28a
00009D5E 01                         byte_9484:	dc.b 1
00009D5F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D64 01                         byte_948A:	dc.b 1
00009D65 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009D6A 01                         byte_9490:	dc.b 1
00009D6B FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009D70                            		even
00009D70                            		even
00009D70                            
00009D70                            Map_obj28b:
00009D70                            	include "_maps\obj28b.asm"
00009D70                            ; ---------------------------------------------------------------------------
00009D70                            ; Sprite mappings - animals
00009D70                            ; ---------------------------------------------------------------------------
00009D70 0000                       		dc.w byte_94A2-Map_obj28b
00009D72 0000                       		dc.w byte_94A8-Map_obj28b
00009D74 0000                       		dc.w byte_949C-Map_obj28b
00009D76 01                         byte_949C:	dc.b 1
00009D77 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D7C 01                         byte_94A2:	dc.b 1
00009D7D FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009D82 01                         byte_94A8:	dc.b 1
00009D83 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009D88                            		even
00009D88                            		even
00009D88                            
00009D88                            ; ---------------------------------------------------------------------------
00009D88                            ; Sprite mappings - points that	appear when you	destroy	something
00009D88                            ; ---------------------------------------------------------------------------
00009D88                            Map_obj29:
00009D88                            	include "_maps\obj29.asm"
00009D88                            ; ---------------------------------------------------------------------------
00009D88                            ; Sprite mappings - points that	appear when you	destroy	something
00009D88                            ; ---------------------------------------------------------------------------
00009D88 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009D8C 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009D90 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009D94 0000                       		dc.w byte_94E5-Map_obj29
00009D96 01                         byte_94BC:	dc.b 1
00009D97 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009D9C 01                         byte_94C2:	dc.b 1
00009D9D FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009DA2 01                         byte_94C8:	dc.b 1
00009DA3 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009DA8 01                         byte_94CE:	dc.b 1
00009DA9 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009DAE 01                         byte_94D4:	dc.b 1
00009DAF FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009DB4 02                         byte_94DA:	dc.b 2
00009DB5 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009DBA FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009DBF 02                         byte_94E5:	dc.b 2
00009DC0 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009DC5 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009DCA                            		even
00009DCA                            		even
00009DCA                            
00009DCA                            ; ===========================================================================
00009DCA                            ; ---------------------------------------------------------------------------
00009DCA                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009DCA                            ; ---------------------------------------------------------------------------
00009DCA                            
00009DCA                            Obj1F:					; XREF: Obj_Index
00009DCA 7000                       		moveq	#0,d0
00009DCC 1028 0024                  		move.b	$24(a0),d0
00009DD0 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009DD4 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009DD8                            ; ===========================================================================
00009DD8 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009DDA 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009DDC 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009DDE 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009DE0 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009DE2                            ; ===========================================================================
00009DE2                            
00009DE2                            Obj1F_Main:				; XREF: Obj1F_Index
00009DE2 117C 0010 0016             		move.b	#$10,$16(a0)
00009DE8 117C 0008 0017             		move.b	#8,$17(a0)
00009DEE 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009DF6 317C 0400 0002             		move.w	#$400,2(a0)
00009DFC 117C 0004 0001             		move.b	#4,1(a0)
00009E02 117C 0003 0018             		move.b	#3,$18(a0)
00009E08 117C 0006 0020             		move.b	#6,$20(a0)
00009E0E 117C 0015 0019             		move.b	#$15,$19(a0)
00009E14 6100 0000                  		bsr.w	ObjectFall
00009E18 4EB9 0000 0000             		jsr	ObjHitFloor
00009E1E 4A41                       		tst.w	d1
00009E20 6A00                       		bpl.s	locret_955A
00009E22 D368 000C                  		add.w	d1,$C(a0)
00009E26 1143 0026                  		move.b	d3,$26(a0)
00009E2A 317C 0000 0012             		move.w	#0,$12(a0)
00009E30 5428 0024                  		addq.b	#2,$24(a0)
00009E34                            
00009E34                            locret_955A:
00009E34 4E75                       		rts	
00009E36                            ; ===========================================================================
00009E36                            
00009E36                            Obj1F_Action:				; XREF: Obj1F_Index
00009E36 7000                       		moveq	#0,d0
00009E38 1028 0025                  		move.b	$25(a0),d0
00009E3C 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009E40 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009E44 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009E4A 6100 0000                  		bsr.w	AnimateSprite
00009E4E 6000 0000                  		bra.w	MarkObjGone
00009E52                            ; ===========================================================================
00009E52 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009E54 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009E56                            ; ===========================================================================
00009E56                            
00009E56                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009E56 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009E5A 6A00                       		bpl.s	locret_95B6
00009E5C 4A28 0001                  		tst.b	1(a0)
00009E60 6A00                       		bpl.s	Obj1F_Move
00009E62 0868 0001 0032             		bchg	#1,$32(a0)
00009E68 6600                       		bne.s	Obj1F_MakeFire
00009E6A                            
00009E6A                            Obj1F_Move:
00009E6A 5428 0025                  		addq.b	#2,$25(a0)
00009E6E 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009E74 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009E7A 6100 0000                  		bsr.w	Obj1F_SetAni
00009E7E 5600                       		addq.b	#3,d0
00009E80 1140 001C                  		move.b	d0,$1C(a0)
00009E84 0868 0000 0022             		bchg	#0,$22(a0)
00009E8A 6600                       		bne.s	locret_95B6
00009E8C 4468 0010                  		neg.w	$10(a0)		; change direction
00009E90                            
00009E90                            locret_95B6:
00009E90 4E75                       		rts	
00009E92                            ; ===========================================================================
00009E92                            
00009E92                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009E92 317C 003B 0030             		move.w	#$3B,$30(a0)
00009E98 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009E9E 6100 0000                  		bsr.w	SingleObjLoad
00009EA2 6600                       		bne.s	Obj1F_MakeFire2
00009EA4 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009EA8 137C 0006 0024             		move.b	#6,$24(a1)
00009EAE 3368 0008 0008             		move.w	8(a0),8(a1)
00009EB4 0469 0010 0008             		subi.w	#$10,8(a1)
00009EBA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009EC0 337C FF00 0010             		move.w	#-$100,$10(a1)
00009EC6                            
00009EC6                            Obj1F_MakeFire2:
00009EC6 6100 0000                  		bsr.w	SingleObjLoad
00009ECA 6600                       		bne.s	locret_9618
00009ECC 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009ED0 137C 0006 0024             		move.b	#6,$24(a1)
00009ED6 3368 0008 0008             		move.w	8(a0),8(a1)
00009EDC 0669 0010 0008             		addi.w	#$10,8(a1)
00009EE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009EE8 337C 0100 0010             		move.w	#$100,$10(a1)
00009EEE                            
00009EEE                            locret_9618:
00009EEE 4E75                       		rts	
00009EF0                            ; ===========================================================================
00009EF0                            
00009EF0                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009EF0 5368 0030                  		subq.w	#1,$30(a0)
00009EF4 6B00                       		bmi.s	loc_966E
00009EF6 6100 0000                  		bsr.w	SpeedToPos
00009EFA 0868 0000 0032             		bchg	#0,$32(a0)
00009F00 6600                       		bne.s	loc_9654
00009F02 3628 0008                  		move.w	8(a0),d3
00009F06 0643 0010                  		addi.w	#$10,d3
00009F0A 0828 0000 0022             		btst	#0,$22(a0)
00009F10 6700                       		beq.s	loc_9640
00009F12 0443 0020                  		subi.w	#$20,d3
00009F16                            
00009F16                            loc_9640:
00009F16 4EB9 0000 0000             		jsr	ObjHitFloor2
00009F1C 0C41 FFF8                  		cmpi.w	#-8,d1
00009F20 6D00                       		blt.s	loc_966E
00009F22 0C41 000C                  		cmpi.w	#$C,d1
00009F26 6C00                       		bge.s	loc_966E
00009F28 4E75                       		rts	
00009F2A                            ; ===========================================================================
00009F2A                            
00009F2A                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009F2A 4EB9 0000 0000             		jsr	ObjHitFloor
00009F30 D368 000C                  		add.w	d1,$C(a0)
00009F34 1143 0026                  		move.b	d3,$26(a0)
00009F38 6100 0000                  		bsr.w	Obj1F_SetAni
00009F3C 5600                       		addq.b	#3,d0
00009F3E 1140 001C                  		move.b	d0,$1C(a0)
00009F42 4E75                       		rts	
00009F44                            ; ===========================================================================
00009F44                            
00009F44                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009F44 5528 0025                  		subq.b	#2,$25(a0)
00009F48 317C 003B 0030             		move.w	#59,$30(a0)
00009F4E 317C 0000 0010             		move.w	#0,$10(a0)
00009F54 6100 0000                  		bsr.w	Obj1F_SetAni
00009F58 1140 001C                  		move.b	d0,$1C(a0)
00009F5C 4E75                       		rts	
00009F5E                            ; ---------------------------------------------------------------------------
00009F5E                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009F5E                            ; ---------------------------------------------------------------------------
00009F5E                            
00009F5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F5E                            
00009F5E                            
00009F5E                            Obj1F_SetAni:				; XREF: loc_966E
00009F5E 7000                       		moveq	#0,d0
00009F60 1628 0026                  		move.b	$26(a0),d3
00009F64 6B00                       		bmi.s	loc_96A4
00009F66 0C03 0006                  		cmpi.b	#6,d3
00009F6A 6500                       		bcs.s	locret_96A2
00009F6C 7001                       		moveq	#1,d0
00009F6E 0828 0000 0022             		btst	#0,$22(a0)
00009F74 6600                       		bne.s	locret_96A2
00009F76 7002                       		moveq	#2,d0
00009F78                            
00009F78                            locret_96A2:
00009F78 4E75                       		rts	
00009F7A                            ; ===========================================================================
00009F7A                            
00009F7A                            loc_96A4:				; XREF: Obj1F_SetAni
00009F7A 0C03 00FA                  		cmpi.b	#-6,d3
00009F7E 6200                       		bhi.s	locret_96B6
00009F80 7002                       		moveq	#2,d0
00009F82 0828 0000 0022             		btst	#0,$22(a0)
00009F88 6600                       		bne.s	locret_96B6
00009F8A 7001                       		moveq	#1,d0
00009F8C                            
00009F8C                            locret_96B6:
00009F8C 4E75                       		rts	
00009F8E                            ; End of function Obj1F_SetAni
00009F8E                            
00009F8E                            ; ===========================================================================
00009F8E                            
00009F8E                            Obj1F_Delete:				; XREF: Obj1F_Index
00009F8E 6100 0000                  		bsr.w	DeleteObject
00009F92 4E75                       		rts	
00009F94                            ; ===========================================================================
00009F94                            ; ---------------------------------------------------------------------------
00009F94                            ; Sub-object - missile that the	Crabmeat throws
00009F94                            ; ---------------------------------------------------------------------------
00009F94                            
00009F94                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009F94 5428 0024                  		addq.b	#2,$24(a0)
00009F98 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009FA0 317C 0400 0002             		move.w	#$400,2(a0)
00009FA6 117C 0004 0001             		move.b	#4,1(a0)
00009FAC 117C 0003 0018             		move.b	#3,$18(a0)
00009FB2 117C 0087 0020             		move.b	#$87,$20(a0)
00009FB8 117C 0008 0019             		move.b	#8,$19(a0)
00009FBE 317C FC00 0012             		move.w	#-$400,$12(a0)
00009FC4 117C 0007 001C             		move.b	#7,$1C(a0)
00009FCA                            
00009FCA                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009FCA 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009FD0 6100 0000                  		bsr.w	AnimateSprite
00009FD4 6100 0000                  		bsr.w	ObjectFall
00009FD8 6100 0000                  		bsr.w	DisplaySprite
00009FDC 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009FE0 0640 00E0                  		addi.w	#$E0,d0
00009FE4 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009FE8 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009FEA 4E75                       		rts	
00009FEC                            ; ===========================================================================
00009FEC                            
00009FEC                            Obj1F_Delete2:
00009FEC 6000 0000                  		bra.w	DeleteObject
00009FF0                            ; ===========================================================================
00009FF0                            Ani_obj1F:
00009FF0                            	include "_anim\obj1F.asm"
00009FF0                            ; ---------------------------------------------------------------------------
00009FF0                            ; Animation script - Crabmeat enemy
00009FF0                            ; ---------------------------------------------------------------------------
00009FF0 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009FF6 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009FFC 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A000 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A004 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A008 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A00C 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A012 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A018 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A01E 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A022 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A026                            		even
0000A026                            		even
0000A026                            
0000A026                            ; ---------------------------------------------------------------------------
0000A026                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A026                            ; ---------------------------------------------------------------------------
0000A026                            Map_obj1F:
0000A026                            	include "_maps\obj1F.asm"
0000A026                            Map_1514:
0000A026 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
0000A028 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
0000A02A 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
0000A02C 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
0000A02E 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
0000A030 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
0000A032 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
0000A034 03                         Map_1514_E: 	dc.b $3
0000A035 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A03A F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A03F F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A044 03                         Map_1514_1E: 	dc.b $3
0000A045 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A04A F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A04F F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A054 03                         Map_1514_2E: 	dc.b $3
0000A055 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A05A F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A05F F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A064 03                         Map_1514_3E: 	dc.b $3
0000A065 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A06A F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A06F F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A074 03                         Map_1514_4E: 	dc.b $3
0000A075 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A07A F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A07F F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A084 01                         Map_1514_5E: 	dc.b $1
0000A085 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
0000A08A 01                         Map_1514_64: 	dc.b $1
0000A08B F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
0000A090                            	even
0000A090                            	even
0000A090                            
0000A090                            ; ===========================================================================
0000A090                            ; ---------------------------------------------------------------------------
0000A090                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A090                            ; ---------------------------------------------------------------------------
0000A090                            
0000A090                            Obj22:					; XREF: Obj_Index
0000A090 7000                       		moveq	#0,d0
0000A092 1028 0024                  		move.b	$24(a0),d0
0000A096 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A09A 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A09E                            ; ===========================================================================
0000A09E 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A0A0 0000                       		dc.w Obj22_Action-Obj22_Index
0000A0A2 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A0A4                            ; ===========================================================================
0000A0A4                            
0000A0A4                            Obj22_Main:				; XREF: Obj22_Index
0000A0A4 5428 0024                  		addq.b	#2,$24(a0)
0000A0A8 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A0B0 317C 0444 0002             		move.w	#$444,2(a0)
0000A0B6 117C 0004 0001             		move.b	#4,1(a0)
0000A0BC 117C 0003 0018             		move.b	#3,$18(a0)
0000A0C2 117C 0008 0020             		move.b	#8,$20(a0)
0000A0C8 117C 0018 0019             		move.b	#$18,$19(a0)
0000A0CE                            
0000A0CE                            Obj22_Action:				; XREF: Obj22_Index
0000A0CE 7000                       		moveq	#0,d0
0000A0D0 1028 0025                  		move.b	$25(a0),d0
0000A0D4 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A0D8 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A0DC 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A0E2 6100 0000                  		bsr.w	AnimateSprite
0000A0E6 6000 0000                  		bra.w	MarkObjGone
0000A0EA                            ; ===========================================================================
0000A0EA 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A0EC 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A0EE                            ; ===========================================================================
0000A0EE                            
0000A0EE                            Obj22_Move:				; XREF: Obj22_Index2
0000A0EE 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A0F2 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A0F4 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A0FA 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A0FC 5428 0025                  		addq.b	#2,$25(a0)
0000A100 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A106 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A10C 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A112 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A118 6600                       		bne.s	locret_986C	; if not, branch
0000A11A 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A11E                            
0000A11E                            locret_986C:
0000A11E 4E75                       		rts	
0000A120                            ; ===========================================================================
0000A120                            
0000A120                            Obj22_Fire:				; XREF: Obj22_Move
0000A120 6100 0000                  		bsr.w	SingleObjLoad
0000A124 6600                       		bne.s	locret_98D0
0000A126 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A12A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A130 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A136 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A13C 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A142 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A148 303C 0018                  		move.w	#$18,d0
0000A14C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A152 6600                       		bne.s	loc_98AA	; if not, branch
0000A154 4440                       		neg.w	d0
0000A156 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A15A                            
0000A15A                            loc_98AA:
0000A15A D169 0008                  		add.w	d0,8(a1)
0000A15E 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A164 337C 000E 0032             		move.w	#$E,$32(a1)
0000A16A 2348 003C                  		move.l	a0,$3C(a1)
0000A16E 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A174 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A17A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A180                            
0000A180                            locret_98D0:
0000A180 4E75                       		rts	
0000A182                            ; ===========================================================================
0000A182                            
0000A182                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A182 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A186 6B00                       		bmi.s	Obj22_ChgDir
0000A188 6100 0000                  		bsr.w	SpeedToPos
0000A18C 4A28 0034                  		tst.b	$34(a0)
0000A190 6600                       		bne.s	locret_992A
0000A192 3038 D008                  		move.w	($FFFFD008).w,d0
0000A196 9068 0008                  		sub.w	8(a0),d0
0000A19A 6A00                       		bpl.s	Obj22_SetNrSonic
0000A19C 4440                       		neg.w	d0
0000A19E                            
0000A19E                            Obj22_SetNrSonic:
0000A19E 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A1A2 6400                       		bcc.s	locret_992A	; if not, branch
0000A1A4 4A28 0001                  		tst.b	1(a0)
0000A1A8 6A00                       		bpl.s	locret_992A
0000A1AA 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A1B0 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A1B6 6000                       		bra.s	Obj22_Stop
0000A1B8                            ; ===========================================================================
0000A1B8                            
0000A1B8                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A1B8 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A1BE 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A1C4 317C 003B 0032             		move.w	#59,$32(a0)
0000A1CA                            
0000A1CA                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A1CA 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A1CE 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A1D4 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A1DA                            
0000A1DA                            locret_992A:
0000A1DA 4E75                       		rts	
0000A1DC                            ; ===========================================================================
0000A1DC                            
0000A1DC                            Obj22_Delete:				; XREF: Obj22_Index
0000A1DC 6100 0000                  		bsr.w	DeleteObject
0000A1E0 4E75                       		rts	
0000A1E2                            ; ===========================================================================
0000A1E2                            ; ---------------------------------------------------------------------------
0000A1E2                            ; Object 23 - missile that Buzz	Bomber throws
0000A1E2                            ; ---------------------------------------------------------------------------
0000A1E2                            
0000A1E2                            Obj23:					; XREF: Obj_Index
0000A1E2 7000                       		moveq	#0,d0
0000A1E4 1028 0024                  		move.b	$24(a0),d0
0000A1E8 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A1EC 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A1F0                            ; ===========================================================================
0000A1F0 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A1F2 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A1F4 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A1F6 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A1F8 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A1FA                            ; ===========================================================================
0000A1FA                            
0000A1FA                            Obj23_Main:				; XREF: Obj23_Index
0000A1FA 5368 0032                  		subq.w	#1,$32(a0)
0000A1FE 6A00                       		bpl.s	Obj23_ChkCancel
0000A200 5428 0024                  		addq.b	#2,$24(a0)
0000A204 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A20C 317C 2444 0002             		move.w	#$2444,2(a0)
0000A212 117C 0004 0001             		move.b	#4,1(a0)
0000A218 117C 0003 0018             		move.b	#3,$18(a0)
0000A21E 117C 0008 0019             		move.b	#8,$19(a0)
0000A224 0228 0003 0022             		andi.b	#3,$22(a0)
0000A22A 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A22E 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A230 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A236 117C 0087 0020             		move.b	#$87,$20(a0)
0000A23C 117C 0001 001C             		move.b	#1,$1C(a0)
0000A242 6000                       		bra.s	Obj23_Animate2
0000A244                            ; ===========================================================================
0000A244                            
0000A244                            Obj23_Animate:				; XREF: Obj23_Index
0000A244 6100                       		bsr.s	Obj23_ChkCancel
0000A246 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A24C 6100 0000                  		bsr.w	AnimateSprite
0000A250 6000 0000                  		bra.w	DisplaySprite
0000A254                            ; ---------------------------------------------------------------------------
0000A254                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A254                            ; destroyed, and if it has, then cancel	the missile
0000A254                            ; ---------------------------------------------------------------------------
0000A254                            
0000A254                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A254                            
0000A254                            
0000A254                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A254 2268 003C                  		movea.l	$3C(a0),a1
0000A258 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A25C 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A25E 4E75                       		rts	
0000A260                            ; End of function Obj23_ChkCancel
0000A260                            
0000A260                            ; ===========================================================================
0000A260                            
0000A260                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A260 0828 0007 0022             		btst	#7,$22(a0)
0000A266 6600                       		bne.s	Obj23_Explode
0000A268 117C 0087 0020             		move.b	#$87,$20(a0)
0000A26E 117C 0001 001C             		move.b	#1,$1C(a0)
0000A274 6100 0000                  		bsr.w	SpeedToPos
0000A278 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A27E 6100 0000                  		bsr.w	AnimateSprite
0000A282 6100 0000                  		bsr.w	DisplaySprite
0000A286 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A28A 0640 00E0                  		addi.w	#$E0,d0
0000A28E B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A292 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A294 4E75                       		rts	
0000A296                            ; ===========================================================================
0000A296                            
0000A296                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A296 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A29A 117C 0000 0024             		move.b	#0,$24(a0)
0000A2A0 6000 F2D0                  		bra.w	Obj24
0000A2A4                            ; ===========================================================================
0000A2A4                            
0000A2A4                            Obj23_Delete:				; XREF: Obj23_Index
0000A2A4 6100 0000                  		bsr.w	DeleteObject
0000A2A8 4E75                       		rts	
0000A2AA                            ; ===========================================================================
0000A2AA                            
0000A2AA                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A2AA 4A28 0001                  		tst.b	1(a0)
0000A2AE 6AF4                       		bpl.s	Obj23_Delete
0000A2B0 6100 0000                  		bsr.w	SpeedToPos
0000A2B4                            
0000A2B4                            Obj23_Animate2:				; XREF: Obj23_Main
0000A2B4 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A2BA 6100 0000                  		bsr.w	AnimateSprite
0000A2BE 6100 0000                  		bsr.w	DisplaySprite
0000A2C2 4E75                       		rts	
0000A2C4                            ; ===========================================================================
0000A2C4                            Ani_obj22:
0000A2C4                            	include "_anim\obj22.asm"
0000A2C4                            ; ---------------------------------------------------------------------------
0000A2C4                            ; Animation script - Buzz Bomber enemy
0000A2C4                            ; ---------------------------------------------------------------------------
0000A2C4 0000                       		dc.w byte_9A1E-Ani_obj22
0000A2C6 0000                       		dc.w byte_9A22-Ani_obj22
0000A2C8 0000                       		dc.w byte_9A26-Ani_obj22
0000A2CA 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A2CE 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A2D2 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A2D6                            		even
0000A2D6                            		even
0000A2D6                            
0000A2D6                            Ani_obj23:
0000A2D6                            	include "_anim\obj23.asm"
0000A2D6                            ; ---------------------------------------------------------------------------
0000A2D6                            ; Animation script - missile that Buzz Bomber throws
0000A2D6                            ; ---------------------------------------------------------------------------
0000A2D6 0000                       		dc.w byte_9A2E-Ani_obj23
0000A2D8 0000                       		dc.w byte_9A32-Ani_obj23
0000A2DA 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A2DE 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A2E2                            		even
0000A2E2                            		even
0000A2E2                            
0000A2E2                            ; ---------------------------------------------------------------------------
0000A2E2                            ; Sprite mappings - Buzz Bomber	enemy
0000A2E2                            ; ---------------------------------------------------------------------------
0000A2E2                            Map_obj22:
0000A2E2                            	include "_maps\obj22.asm"
0000A2E2                            Map_e97a:
0000A2E2 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A2E4 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A2E6 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A2E8 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A2EA 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A2EC 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A2EE 06                         Map_e97a_C: 	dc.b $6
0000A2EF F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A2F4 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A2F9 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A2FE 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A303 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A308 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A30D 06                         Map_e97a_2B: 	dc.b $6
0000A30E F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A313 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A318 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A31D 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A322 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A327 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A32C 07                         Map_e97a_4A: 	dc.b $7
0000A32D 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A332 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A337 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A33C 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A341 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A346 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A34B F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A350 07                         Map_e97a_6E: 	dc.b $7
0000A351 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A356 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A35B F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A360 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A365 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A36A F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A36F F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A374 06                         Map_e97a_92: 	dc.b $6
0000A375 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A37A 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A37F 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A384 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A389 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A38E F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A393 04                         Map_e97a_B1: 	dc.b $4
0000A394 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A399 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A39E 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A3A3 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A3A8                            	even
0000A3A8                            	even
0000A3A8                            
0000A3A8                            ; ---------------------------------------------------------------------------
0000A3A8                            ; Sprite mappings - missile that Buzz Bomber throws
0000A3A8                            ; ---------------------------------------------------------------------------
0000A3A8                            Map_obj23:
0000A3A8                            	include "_maps\obj23.asm"
0000A3A8                            ; ---------------------------------------------------------------------------
0000A3A8                            ; Sprite mappings - missile that Buzz Bomber throws
0000A3A8                            ; ---------------------------------------------------------------------------
0000A3A8 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A3AC 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A3B0 01                         byte_9B0E:	dc.b 1
0000A3B1 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A3B6 01                         byte_9B14:	dc.b 1
0000A3B7 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A3BC 01                         byte_9B1A:	dc.b 1
0000A3BD F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A3C2 01                         byte_9B20:	dc.b 1
0000A3C3 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A3C8                            		even
0000A3C8                            		even
0000A3C8                            
0000A3C8                            ; ===========================================================================
0000A3C8                            ; ---------------------------------------------------------------------------
0000A3C8                            ; Object 25 - rings
0000A3C8                            ; ---------------------------------------------------------------------------
0000A3C8                            
0000A3C8                            Obj25:					; XREF: Obj_Index
0000A3C8 7000                       		moveq	#0,d0
0000A3CA 1028 0024                  		move.b	$24(a0),d0
0000A3CE 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A3D2 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A3D6                            ; ===========================================================================
0000A3D6 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A3D8 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A3DA 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A3DC 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A3DE 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0                            ; Distances between rings (format: horizontal, vertical)
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A3E2 1800                       		dc.b $18, 0		; horizontal normal
0000A3E4 2000                       		dc.b $20, 0		; horizontal wide
0000A3E6 0010                       		dc.b 0,	$10		; vertical tight
0000A3E8 0018                       		dc.b 0,	$18		; vertical normal
0000A3EA 0020                       		dc.b 0,	$20		; vertical wide
0000A3EC 1010                       		dc.b $10, $10		; diagonal
0000A3EE 1818                       		dc.b $18, $18
0000A3F0 2020                       		dc.b $20, $20
0000A3F2 F010                       		dc.b $F0, $10
0000A3F4 E818                       		dc.b $E8, $18
0000A3F6 E020                       		dc.b $E0, $20
0000A3F8 1008                       		dc.b $10, 8
0000A3FA 1810                       		dc.b $18, $10
0000A3FC F008                       		dc.b $F0, 8
0000A3FE E810                       		dc.b $E8, $10
0000A400                            ; ===========================================================================
0000A400                            
0000A400                            Obj25_Main:				; XREF: Obj25_Index
0000A400 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A404 7000                       		moveq	#0,d0
0000A406 1028 0023                  		move.b	$23(a0),d0
0000A40A 45F2 0002                  		lea	2(a2,d0.w),a2
0000A40E 1812                       		move.b	(a2),d4
0000A410 1228 0028                  		move.b	$28(a0),d1
0000A414 1001                       		move.b	d1,d0
0000A416 0241 0007                  		andi.w	#7,d1
0000A41A 0C41 0007                  		cmpi.w	#7,d1
0000A41E 6600                       		bne.s	loc_9B80
0000A420 7206                       		moveq	#6,d1
0000A422                            
0000A422                            loc_9B80:
0000A422 4841                       		swap	d1
0000A424 323C 0000                  		move.w	#0,d1
0000A428 E808                       		lsr.b	#4,d0
0000A42A D040                       		add.w	d0,d0
0000A42C 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A430 4885                       		ext.w	d5
0000A432 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A436 4886                       		ext.w	d6
0000A438 2248                       		movea.l	a0,a1
0000A43A 3428 0008                  		move.w	8(a0),d2
0000A43E 3628 000C                  		move.w	$C(a0),d3
0000A442 E20C                       		lsr.b	#1,d4
0000A444 6500                       		bcs.s	loc_9C02
0000A446 0892 0007                  		bclr	#7,(a2)
0000A44A 6000                       		bra.s	loc_9BBA
0000A44C                            ; ===========================================================================
0000A44C                            
0000A44C                            Obj25_MakeRings:
0000A44C 4841                       		swap	d1
0000A44E E20C                       		lsr.b	#1,d4
0000A450 6500                       		bcs.s	loc_9C02
0000A452 0892 0007                  		bclr	#7,(a2)
0000A456 6100 0000                  		bsr.w	SingleObjLoad
0000A45A 6600                       		bne.s	loc_9C0E
0000A45C                            
0000A45C                            loc_9BBA:				; XREF: Obj25_Main
0000A45C 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A460 5429 0024                  		addq.b	#2,$24(a1)
0000A464 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A468 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A46E 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A472 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A47A 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A480 137C 0004 0001             		move.b	#4,1(a1)
0000A486 137C 0002 0018             		move.b	#2,$18(a1)
0000A48C 137C 0047 0020             		move.b	#$47,$20(a1)
0000A492 137C 0008 0019             		move.b	#8,$19(a1)
0000A498 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A49E 1341 0034                  		move.b	d1,$34(a1)
0000A4A2                            
0000A4A2                            loc_9C02:
0000A4A2 5241                       		addq.w	#1,d1
0000A4A4 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A4A6 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A4A8 4841                       		swap	d1
0000A4AA 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A4AE                            
0000A4AE                            loc_9C0E:
0000A4AE 0812 0000                  		btst	#0,(a2)
0000A4B2 6600 0000                  		bne.w	DeleteObject
0000A4B6                            
0000A4B6                            Obj25_Animate:				; XREF: Obj25_Index
0000A4B6 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A4BC 6100 0000                  		bsr.w	DisplaySprite
0000A4C0 3028 0032                  		move.w	$32(a0),d0
0000A4C4 0240 FF80                  		andi.w	#$FF80,d0
0000A4C8 3238 F700                  		move.w	($FFFFF700).w,d1
0000A4CC 0441 0080                  		subi.w	#$80,d1
0000A4D0 0241 FF80                  		andi.w	#$FF80,d1
0000A4D4 9041                       		sub.w	d1,d0
0000A4D6 0C40 0280                  		cmpi.w	#$280,d0
0000A4DA 6200                       		bhi.s	Obj25_Delete
0000A4DC 4E75                       		rts	
0000A4DE                            ; ===========================================================================
0000A4DE                            
0000A4DE                            Obj25_Collect:				; XREF: Obj25_Index
0000A4DE 5428 0024                  		addq.b	#2,$24(a0)
0000A4E2 117C 0000 0020             		move.b	#0,$20(a0)
0000A4E8 117C 0001 0018             		move.b	#1,$18(a0)
0000A4EE 6100 0000                  		bsr.w	CollectRing
0000A4F2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A4F6 7000                       		moveq	#0,d0
0000A4F8 1028 0023                  		move.b	$23(a0),d0
0000A4FC 1228 0034                  		move.b	$34(a0),d1
0000A500 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A504                            
0000A504                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A504 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A50A 6100 0000                  		bsr.w	AnimateSprite
0000A50E 6000 0000                  		bra.w	DisplaySprite
0000A512                            ; ===========================================================================
0000A512                            
0000A512                            Obj25_Delete:				; XREF: Obj25_Index
0000A512 6000 0000                  		bra.w	DeleteObject
0000A516                            
0000A516                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A516                            
0000A516                            
0000A516                            CollectRing:				; XREF: Obj25_Collect
0000A516 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A51A 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A520 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A524 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A52A 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A52C 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A532 6700                       		beq.s	loc_9CA4
0000A534 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A53A 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A53C 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A542 6600                       		bne.s	Obj25_PlaySnd
0000A544                            
0000A544                            loc_9CA4:
0000A544 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A548 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A54C 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A550                            
0000A550                            Obj25_PlaySnd:
0000A550 4EF9 0000 15D2             		jmp	(PlaySound_Special).l
0000A556                            ; End of function CollectRing
0000A556                            
0000A556                            ; ===========================================================================
0000A556                            ; ---------------------------------------------------------------------------
0000A556                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A556                            ; ---------------------------------------------------------------------------
0000A556                            
0000A556                            Obj37:					; XREF: Obj_Index
0000A556 7000                       		moveq	#0,d0
0000A558 1028 0024                  		move.b	$24(a0),d0
0000A55C 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A560 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A564                            ; ===========================================================================
0000A564 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A566 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A568 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A56A 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A56C 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A56E                            ; ===========================================================================
0000A56E                            
0000A56E                            Obj37_CountRings:			; XREF: Obj37_Index
0000A56E 2248                       		movea.l	a0,a1
0000A570 7A00                       		moveq	#0,d5
0000A572 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A576 7020                       		moveq	#32,d0
0000A578 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A57A 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A57C 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A57E                            
0000A57E                            loc_9CDE:
0000A57E 5345                       		subq.w	#1,d5
0000A580 383C 0288                  		move.w	#$288,d4
0000A584 6000                       		bra.s	Obj37_MakeRings
0000A586                            ; ===========================================================================
0000A586                            
0000A586                            Obj37_Loop:
0000A586 6100 0000                  		bsr.w	SingleObjLoad
0000A58A 6600 0000                  		bne.w	Obj37_ResetCounter
0000A58E                            
0000A58E                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A58E 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A592 5429 0024                  		addq.b	#2,$24(a1)
0000A596 137C 0008 0016             		move.b	#8,$16(a1)
0000A59C 137C 0008 0017             		move.b	#8,$17(a1)
0000A5A2 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A5AE 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A5B6 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A5BC 137C 0004 0001             		move.b	#4,1(a1)
0000A5C2 137C 0003 0018             		move.b	#3,$18(a1)
0000A5C8 137C 0047 0020             		move.b	#$47,$20(a1)
0000A5CE 137C 0008 0019             		move.b	#8,$19(a1)
0000A5D4 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A5DA 4A44                       		tst.w	d4
0000A5DC 6B00                       		bmi.s	loc_9D62
0000A5DE 3004                       		move.w	d4,d0
0000A5E0 6100 878A                  		bsr.w	CalcSine
0000A5E4 3404                       		move.w	d4,d2
0000A5E6 E04A                       		lsr.w	#8,d2
0000A5E8 E560                       		asl.w	d2,d0
0000A5EA E561                       		asl.w	d2,d1
0000A5EC 3400                       		move.w	d0,d2
0000A5EE 3601                       		move.w	d1,d3
0000A5F0 0604 0010                  		addi.b	#$10,d4
0000A5F4 6400                       		bcc.s	loc_9D62
0000A5F6 0444 0080                  		subi.w	#$80,d4
0000A5FA 6400                       		bcc.s	loc_9D62
0000A5FC 383C 0288                  		move.w	#$288,d4
0000A600                            
0000A600                            loc_9D62:
0000A600 3342 0010                  		move.w	d2,$10(a1)
0000A604 3343 0012                  		move.w	d3,$12(a1)
0000A608 4442                       		neg.w	d2
0000A60A 4444                       		neg.w	d4
0000A60C 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A610                            
0000A610                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A610 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A616 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A61C 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A622 303C 00C6                  		move.w	#$C6,d0
0000A626 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A62C                            
0000A62C                            Obj37_Bounce:				; XREF: Obj37_Index
0000A62C 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A632 6100 0000                  		bsr.w	SpeedToPos
0000A636 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A63C 6B00                       		bmi.s	Obj37_ChkDel
0000A63E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A642 D007                       		add.b	d7,d0
0000A644 0200 0003                  		andi.b	#3,d0
0000A648 6600                       		bne.s	Obj37_ChkDel
0000A64A 4EB9 0000 0000             		jsr	ObjHitFloor
0000A650 4A41                       		tst.w	d1
0000A652 6A00                       		bpl.s	Obj37_ChkDel
0000A654 D368 000C                  		add.w	d1,$C(a0)
0000A658 3028 0012                  		move.w	$12(a0),d0
0000A65C E440                       		asr.w	#2,d0
0000A65E 9168 0012                  		sub.w	d0,$12(a0)
0000A662 4468 0012                  		neg.w	$12(a0)
0000A666                            
0000A666                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A666 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A66A 6700                       		beq.s	Obj37_Delete
0000A66C 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A670 0640 00E0                  		addi.w	#$E0,d0
0000A674 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A678 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A67A 6000 0000                  		bra.w	DisplaySprite
0000A67E                            ; ===========================================================================
0000A67E                            
0000A67E                            Obj37_Collect:				; XREF: Obj37_Index
0000A67E 5428 0024                  		addq.b	#2,$24(a0)
0000A682 117C 0000 0020             		move.b	#0,$20(a0)
0000A688 117C 0001 0018             		move.b	#1,$18(a0)
0000A68E 6100 FE86                  		bsr.w	CollectRing
0000A692                            
0000A692                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A692 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A698 6100 0000                  		bsr.w	AnimateSprite
0000A69C 6000 0000                  		bra.w	DisplaySprite
0000A6A0                            ; ===========================================================================
0000A6A0                            
0000A6A0                            Obj37_Delete:				; XREF: Obj37_Index
0000A6A0 6000 0000                  		bra.w	DeleteObject
0000A6A4                            ; ===========================================================================
0000A6A4                            ; ---------------------------------------------------------------------------
0000A6A4                            ; Object 4B - giant ring for entry to special stage
0000A6A4                            ; ---------------------------------------------------------------------------
0000A6A4                            
0000A6A4                            Obj4B:					; XREF: Obj_Index
0000A6A4 7000                       		moveq	#0,d0
0000A6A6 1028 0024                  		move.b	$24(a0),d0
0000A6AA 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A6AE 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A6B2                            ; ===========================================================================
0000A6B2 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A6B4 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A6B6 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A6B8 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A6BA                            ; ===========================================================================
0000A6BA                            
0000A6BA                            Obj4B_Main:				; XREF: Obj4B_Index
0000A6BA 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A6C2 317C 2400 0002             		move.w	#$2400,2(a0)
0000A6C8 0028 0004 0001             		ori.b	#4,1(a0)
0000A6CE 117C 0040 0019             		move.b	#$40,$19(a0)
0000A6D4 4A28 0001                  		tst.b	1(a0)
0000A6D8 6A00                       		bpl.s	Obj4B_Animate
0000A6DA 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A6E0 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A6E4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A6EA 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A6EC 4E75                       		rts	
0000A6EE                            ; ===========================================================================
0000A6EE                            
0000A6EE                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A6EE 5428 0024                  		addq.b	#2,$24(a0)
0000A6F2 117C 0002 0018             		move.b	#2,$18(a0)
0000A6F8 117C 0052 0020             		move.b	#$52,$20(a0)
0000A6FE 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A704                            
0000A704                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A704 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A70A 3028 0008                  		move.w	8(a0),d0
0000A70E 0240 FF80                  		andi.w	#$FF80,d0
0000A712 3238 F700                  		move.w	($FFFFF700).w,d1
0000A716 0441 0080                  		subi.w	#$80,d1
0000A71A 0241 FF80                  		andi.w	#$FF80,d1
0000A71E 9041                       		sub.w	d1,d0
0000A720 0C40 0280                  		cmpi.w	#$280,d0
0000A724 6200 0000                  		bhi.w	DeleteObject
0000A728 6000 0000                  		bra.w	DisplaySprite
0000A72C                            ; ===========================================================================
0000A72C                            
0000A72C                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A72C 5528 0024                  		subq.b	#2,$24(a0)
0000A730 117C 0000 0020             		move.b	#0,$20(a0)
0000A736 6100 0000                  		bsr.w	SingleObjLoad
0000A73A 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A73E 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A742 3368 0008 0008             		move.w	8(a0),8(a1)
0000A748 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A74E 2348 003C                  		move.l	a0,$3C(a1)
0000A752 3038 D008                  		move.w	($FFFFD008).w,d0
0000A756 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A75A 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A75C 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A762                            
0000A762                            Obj4B_PlaySnd:
0000A762 303C 00C3                  		move.w	#$C3,d0
0000A766 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A76C 6096                       		bra.s	Obj4B_Animate
0000A76E                            ; ===========================================================================
0000A76E                            
0000A76E                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A76E 6000 0000                  		bra.w	DeleteObject
0000A772                            ; ===========================================================================
0000A772                            ; ---------------------------------------------------------------------------
0000A772                            ; Object 7C - flash effect when	you collect the	giant ring
0000A772                            ; ---------------------------------------------------------------------------
0000A772                            
0000A772                            Obj7C:					; XREF: Obj_Index
0000A772 7000                       		moveq	#0,d0
0000A774 1028 0024                  		move.b	$24(a0),d0
0000A778 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A77C 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A780                            ; ===========================================================================
0000A780 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A782 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A784 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A786                            ; ===========================================================================
0000A786                            
0000A786                            Obj7C_Main:				; XREF: Obj7C_Index
0000A786 5428 0024                  		addq.b	#2,$24(a0)
0000A78A 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A792 317C 2462 0002             		move.w	#$2462,2(a0)
0000A798 0028 0004 0001             		ori.b	#4,1(a0)
0000A79E 117C 0000 0018             		move.b	#0,$18(a0)
0000A7A4 117C 0020 0019             		move.b	#$20,$19(a0)
0000A7AA 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A7B0                            
0000A7B0                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A7B0 6100                       		bsr.s	Obj7C_Collect
0000A7B2 3028 0008                  		move.w	8(a0),d0
0000A7B6 0240 FF80                  		andi.w	#$FF80,d0
0000A7BA 3238 F700                  		move.w	($FFFFF700).w,d1
0000A7BE 0441 0080                  		subi.w	#$80,d1
0000A7C2 0241 FF80                  		andi.w	#$FF80,d1
0000A7C6 9041                       		sub.w	d1,d0
0000A7C8 0C40 0280                  		cmpi.w	#$280,d0
0000A7CC 6200 0000                  		bhi.w	DeleteObject
0000A7D0 6000 0000                  		bra.w	DisplaySprite
0000A7D4                            
0000A7D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A7D4                            
0000A7D4                            
0000A7D4                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A7D4 5328 001E                  		subq.b	#1,$1E(a0)
0000A7D8 6A00                       		bpl.s	locret_9F76
0000A7DA 117C 0001 001E             		move.b	#1,$1E(a0)
0000A7E0 5228 001A                  		addq.b	#1,$1A(a0)
0000A7E4 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A7EA 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A7EC 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A7F2 6600                       		bne.s	locret_9F76	; if not, branch
0000A7F4 2268 003C                  		movea.l	$3C(a0),a1
0000A7F8 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A7FE 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A804 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A80A 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A80E 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A812                            
0000A812                            locret_9F76:
0000A812 4E75                       		rts	
0000A814                            ; ===========================================================================
0000A814                            
0000A814                            Obj7C_End:				; XREF: Obj7C_Collect
0000A814 5428 0024                  		addq.b	#2,$24(a0)
0000A818 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A81E 588F                       		addq.l	#4,sp
0000A820 4E75                       		rts	
0000A822                            ; End of function Obj7C_Collect
0000A822                            
0000A822                            ; ===========================================================================
0000A822                            
0000A822                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A822 6000 0000                  		bra.w	DeleteObject
0000A826                            ; ===========================================================================
0000A826                            Ani_obj25:
0000A826                            	include "_anim\obj25.asm"
0000A826                            ; ---------------------------------------------------------------------------
0000A826                            ; Animation script - ring
0000A826                            ; ---------------------------------------------------------------------------
0000A826 0000                       		dc.w byte_9F8C-Ani_obj25
0000A828 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A82E                            		even
0000A82E                            		even
0000A82E                            
0000A82E                            ; ---------------------------------------------------------------------------
0000A82E                            ; Sprite mappings - rings
0000A82E                            ; ---------------------------------------------------------------------------
0000A82E                            Map_obj25:
0000A82E                            	include "_maps\obj25.asm"
0000A82E                            ; ---------------------------------------------------------------------------
0000A82E                            ; Sprite mappings - rings
0000A82E                            ; ---------------------------------------------------------------------------
0000A82E 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A832 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A836 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A83A 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A83E 01                         byte_9FA2:	dc.b 1
0000A83F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A844 01                         byte_9FA8:	dc.b 1
0000A845 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A84A 01                         byte_9FAE:	dc.b 1
0000A84B F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A850 01                         byte_9FB4:	dc.b 1
0000A851 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A856 01                         byte_9FBA:	dc.b 1
0000A857 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A85C 01                         byte_9FC0:	dc.b 1
0000A85D F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A862 01                         byte_9FC6:	dc.b 1
0000A863 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A868 01                         byte_9FCC:	dc.b 1
0000A869 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A86E                            		even
0000A86E                            		even
0000A86E                            
0000A86E                            ; ---------------------------------------------------------------------------
0000A86E                            ; Sprite mappings - giant ring
0000A86E                            ; ---------------------------------------------------------------------------
0000A86E                            Map_obj4B:
0000A86E                            	include "_maps\obj4B.asm"
0000A86E                            ; ---------------------------------------------------------------------------
0000A86E                            ; Sprite mappings - giant ring
0000A86E                            ; ---------------------------------------------------------------------------
0000A86E 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A872 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A876 0A                         byte_9FDA:	dc.b $A
0000A877 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A87C E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A881 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A886 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A88B F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A890 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A895 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A89A 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A89F 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A8A4 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A8A9 08                         byte_A00D:	dc.b 8
0000A8AA E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A8AF E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A8B4 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A8B9 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A8BE F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A8C3 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A8C8 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A8CD 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A8D2 04                         byte_A036:	dc.b 4
0000A8D3 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A8D8 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A8DD 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A8E2 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A8E7 08                         byte_A04B:	dc.b 8
0000A8E8 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A8ED E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A8F2 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A8F7 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A8FC F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A901 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A906 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A90B 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A910                            		even
0000A910                            		even
0000A910                            
0000A910                            ; ---------------------------------------------------------------------------
0000A910                            ; Sprite mappings - flash effect when you collect the giant ring
0000A910                            ; ---------------------------------------------------------------------------
0000A910                            Map_obj7C:
0000A910                            	include "_maps\obj7C.asm"
0000A910                            ; ---------------------------------------------------------------------------
0000A910                            ; Sprite mappings - flash effect when you collect the giant ring
0000A910                            ; ---------------------------------------------------------------------------
0000A910 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A914 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A918 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A91C 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A920 02                         byte_A084:	dc.b 2
0000A921 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A926 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A92B 04                         byte_A08F:	dc.b 4
0000A92C E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A931 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A936 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A93B 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A940 04                         byte_A0A4:	dc.b 4
0000A941 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A946 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A94B 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A950 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A955 04                         byte_A0B9:	dc.b 4
0000A956 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A95B E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A960 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A965 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A96A 04                         byte_A0CE:	dc.b 4
0000A96B E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A970 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A975 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A97A 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A97F 04                         byte_A0E3:	dc.b 4
0000A980 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A985 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A98A 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A98F 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A994 02                         byte_A0F8:	dc.b 2
0000A995 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A99A 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A99F 04                         byte_A103:	dc.b 4
0000A9A0 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A9A5 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A9AA 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A9AF 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A9B4                            		even
0000A9B4                            		even
0000A9B4                            
0000A9B4                            ; ===========================================================================
0000A9B4                            ; ---------------------------------------------------------------------------
0000A9B4                            ; Object 26 - monitors
0000A9B4                            ; ---------------------------------------------------------------------------
0000A9B4                            
0000A9B4                            Obj26:					; XREF: Obj_Index
0000A9B4 7000                       		moveq	#0,d0
0000A9B6 1028 0024                  		move.b	$24(a0),d0
0000A9BA 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A9BE 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A9C2                            ; ===========================================================================
0000A9C2 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A9C4 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A9C6 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A9C8 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A9CA 0000                       		dc.w Obj26_Display-Obj26_Index
0000A9CC                            ; ===========================================================================
0000A9CC                            
0000A9CC                            Obj26_Main:				; XREF: Obj26_Index
0000A9CC 5428 0024                  		addq.b	#2,$24(a0)
0000A9D0 117C 000E 0016             		move.b	#$E,$16(a0)
0000A9D6 117C 000E 0017             		move.b	#$E,$17(a0)
0000A9DC 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A9E4 317C 0680 0002             		move.w	#$680,2(a0)
0000A9EA 117C 0004 0001             		move.b	#4,1(a0)
0000A9F0 117C 0003 0018             		move.b	#3,$18(a0)
0000A9F6 117C 000F 0019             		move.b	#$F,$19(a0)
0000A9FC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AA00 7000                       		moveq	#0,d0
0000AA02 1028 0023                  		move.b	$23(a0),d0
0000AA06 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000AA0C 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000AA12 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000AA14 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000AA1A 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000AA20 4E75                       		rts	
0000AA22                            ; ===========================================================================
0000AA22                            
0000AA22                            Obj26_NotBroken:			; XREF: Obj26_Main
0000AA22 117C 0046 0020             		move.b	#$46,$20(a0)
0000AA28 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000AA2E                            
0000AA2E                            Obj26_Solid:				; XREF: Obj26_Index
0000AA2E 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000AA32 6700                       		beq.s	loc_A1EC	; if not, branch
0000AA34 5500                       		subq.b	#2,d0
0000AA36 6600                       		bne.s	Obj26_Fall
0000AA38 7200                       		moveq	#0,d1
0000AA3A 1228 0019                  		move.b	$19(a0),d1
0000AA3E 0641 000B                  		addi.w	#$B,d1
0000AA42 6100 D37C                  		bsr.w	ExitPlatform
0000AA46 0829 0003 0022             		btst	#3,$22(a1)
0000AA4C 6600 0000                  		bne.w	loc_A1BC
0000AA50 4228 0025                  		clr.b	$25(a0)
0000AA54 6000 0000                  		bra.w	Obj26_Animate
0000AA58                            ; ===========================================================================
0000AA58                            
0000AA58                            loc_A1BC:				; XREF: Obj26_Solid
0000AA58 363C 0010                  		move.w	#$10,d3
0000AA5C 3428 0008                  		move.w	8(a0),d2
0000AA60 6100 D8BC                  		bsr.w	MvSonicOnPtfm
0000AA64 6000 0000                  		bra.w	Obj26_Animate
0000AA68                            ; ===========================================================================
0000AA68                            
0000AA68                            Obj26_Fall:				; XREF: Obj26_Solid
0000AA68 6100 0000                  		bsr.w	ObjectFall
0000AA6C 4EB9 0000 0000             		jsr	ObjHitFloor
0000AA72 4A41                       		tst.w	d1
0000AA74 6A00 0000                  		bpl.w	Obj26_Animate
0000AA78 D368 000C                  		add.w	d1,$C(a0)
0000AA7C 4268 0012                  		clr.w	$12(a0)
0000AA80 4228 0025                  		clr.b	$25(a0)
0000AA84 6000 0000                  		bra.w	Obj26_Animate
0000AA88                            ; ===========================================================================
0000AA88                            
0000AA88                            loc_A1EC:				; XREF: Obj26_Solid
0000AA88 323C 001A                  		move.w	#$1A,d1
0000AA8C 343C 000F                  		move.w	#$F,d2
0000AA90 6100 0000                  		bsr.w	Obj26_SolidSides
0000AA94 6700 0000                  		beq.w	loc_A25C
0000AA98 4A69 0012                  		tst.w	$12(a1)
0000AA9C 6B00                       		bmi.s	loc_A20A
0000AA9E 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000AAA4 6700                       		beq.s	loc_A25C	; if yes, branch
0000AAA6                            
0000AAA6                            loc_A20A:
0000AAA6 4A41                       		tst.w	d1
0000AAA8 6A00                       		bpl.s	loc_A220
0000AAAA 9769 000C                  		sub.w	d3,$C(a1)
0000AAAE 6100 D1FE                  		bsr.w	loc_74AE
0000AAB2 117C 0002 0025             		move.b	#2,$25(a0)
0000AAB8 6000 0000                  		bra.w	Obj26_Animate
0000AABC                            ; ===========================================================================
0000AABC                            
0000AABC                            loc_A220:
0000AABC 4A40                       		tst.w	d0
0000AABE 6700 0000                  		beq.w	loc_A246
0000AAC2 6B00                       		bmi.s	loc_A230
0000AAC4 4A69 0010                  		tst.w	$10(a1)
0000AAC8 6B00                       		bmi.s	loc_A246
0000AACA 6000                       		bra.s	loc_A236
0000AACC                            ; ===========================================================================
0000AACC                            
0000AACC                            loc_A230:
0000AACC 4A69 0010                  		tst.w	$10(a1)
0000AAD0 6A00                       		bpl.s	loc_A246
0000AAD2                            
0000AAD2                            loc_A236:
0000AAD2 9169 0008                  		sub.w	d0,8(a1)
0000AAD6 337C 0000 0014             		move.w	#0,$14(a1)
0000AADC 337C 0000 0010             		move.w	#0,$10(a1)
0000AAE2                            
0000AAE2                            loc_A246:
0000AAE2 0829 0001 0022             		btst	#1,$22(a1)
0000AAE8 6600                       		bne.s	loc_A26A
0000AAEA 08E9 0005 0022             		bset	#5,$22(a1)
0000AAF0 08E8 0005 0022             		bset	#5,$22(a0)
0000AAF6 6000                       		bra.s	Obj26_Animate
0000AAF8                            ; ===========================================================================
0000AAF8                            
0000AAF8                            loc_A25C:
0000AAF8 0828 0005 0022             		btst	#5,$22(a0)
0000AAFE 6700                       		beq.s	Obj26_Animate
0000AB00 337C 0001 001C             		move.w	#1,$1C(a1)
0000AB06                            
0000AB06                            loc_A26A:
0000AB06 08A8 0005 0022             		bclr	#5,$22(a0)
0000AB0C 08A9 0005 0022             		bclr	#5,$22(a1)
0000AB12                            
0000AB12                            Obj26_Animate:				; XREF: Obj26_Index
0000AB12 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000AB18 6100 0000                  		bsr.w	AnimateSprite
0000AB1C                            
0000AB1C                            Obj26_Display:				; XREF: Obj26_Index
0000AB1C 6100 0000                  		bsr.w	DisplaySprite
0000AB20 3028 0008                  		move.w	8(a0),d0
0000AB24 0240 FF80                  		andi.w	#$FF80,d0
0000AB28 3238 F700                  		move.w	($FFFFF700).w,d1
0000AB2C 0441 0080                  		subi.w	#$80,d1
0000AB30 0241 FF80                  		andi.w	#$FF80,d1
0000AB34 9041                       		sub.w	d1,d0
0000AB36 0C40 0280                  		cmpi.w	#$280,d0
0000AB3A 6200 0000                  		bhi.w	DeleteObject
0000AB3E 4E75                       		rts	
0000AB40                            ; ===========================================================================
0000AB40                            
0000AB40                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000AB40 5428 0024                  		addq.b	#2,$24(a0)
0000AB44 117C 0000 0020             		move.b	#0,$20(a0)
0000AB4A 6100 0000                  		bsr.w	SingleObjLoad
0000AB4E 6600                       		bne.s	Obj26_Explode
0000AB50 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000AB54 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB5A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB60 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000AB66 7400                       		moveq	#0,d2	; GMZ
0000AB68 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000AB6A                            
0000AB6A                            Obj26_Explode:
0000AB6A 6100 0000                  		bsr.w	SingleObjLoad
0000AB6E 6600                       		bne.s	Obj26_SetBroken
0000AB70 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000AB74 5429 0024                  		addq.b	#2,$24(a1)
0000AB78 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000AB7C 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB82 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB88                            
0000AB88                            Obj26_NextExplosion:
0000AB88 5802                       		addq.b	#4,d2
0000AB8A 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000AB8E                            
0000AB8E                            Obj26_SetBroken:
0000AB8E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AB92 7000                       		moveq	#0,d0
0000AB94 1028 0023                  		move.b	$23(a0),d0
0000AB98 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000AB9E 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000ABA4 6000 0000                  		bra.w	DisplaySprite
0000ABA8                            ; ===========================================================================
0000ABA8                            ; ---------------------------------------------------------------------------
0000ABA8                            ; Object 2E - contents of monitors
0000ABA8                            ; ---------------------------------------------------------------------------
0000ABA8                            
0000ABA8                            Obj2E:					; XREF: Obj_Index
0000ABA8 7000                       		moveq	#0,d0
0000ABAA 1028 0024                  		move.b	$24(a0),d0
0000ABAE 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000ABB2 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000ABB6 6000 0000                  		bra.w	DisplaySprite
0000ABBA                            ; ===========================================================================
0000ABBA 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000ABBC 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000ABBE 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000ABC0                            ; ===========================================================================
0000ABC0                            
0000ABC0                            Obj2E_Main:				; XREF: Obj2E_Index
0000ABC0 5428 0024                  		addq.b	#2,$24(a0)
0000ABC4 317C 0680 0002             		move.w	#$680,2(a0)
0000ABCA 117C 0024 0001             		move.b	#$24,1(a0)
0000ABD0 117C 0003 0018             		move.b	#3,$18(a0)
0000ABD6 117C 0008 0019             		move.b	#8,$19(a0)
0000ABDC 317C FD00 0012             		move.w	#-$300,$12(a0)
0000ABE2 7000                       		moveq	#0,d0
0000ABE4 1028 001C                  		move.b	$1C(a0),d0
0000ABE8 5400                       		addq.b	#2,d0
0000ABEA 1140 001A                  		move.b	d0,$1A(a0)
0000ABEE 227C 0000 0000             		movea.l	#Map_obj26,a1
0000ABF4 D000                       		add.b	d0,d0
0000ABF6 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000ABFA 5249                       		addq.w	#1,a1
0000ABFC 2149 0004                  		move.l	a1,4(a0)
0000AC00                            
0000AC00                            Obj2E_Move:				; XREF: Obj2E_Index
0000AC00 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AC04 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AC08 6100 0000                  		bsr.w	SpeedToPos
0000AC0C 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AC12 4E75                       		rts	
0000AC14                            ; ===========================================================================
0000AC14                            
0000AC14                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AC14 5428 0024                  		addq.b	#2,$24(a0)
0000AC18 317C 001D 001E             		move.w	#29,$1E(a0)
0000AC1E 1028 001C                  		move.b	$1C(a0),d0
0000AC22 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AC26 6600                       		bne.s	Obj2E_ChkSonic
0000AC28 4E75                       		rts			; Eggman monitor does nothing
0000AC2A                            ; ===========================================================================
0000AC2A                            
0000AC2A                            Obj2E_ChkSonic:
0000AC2A 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AC2E 6600                       		bne.s	Obj2E_ChkShoes
0000AC30                            
0000AC30                            ExtraLife:
0000AC30 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AC34 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AC38 303C 0088                  		move.w	#$88,d0
0000AC3C 4EF9 0000 15CC             		jmp	(PlaySound).l	; play extra life music
0000AC42                            ; ===========================================================================
0000AC42                            
0000AC42                            Obj2E_ChkShoes:
0000AC42 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AC46 6600                       		bne.s	Obj2E_ChkShield
0000AC48 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AC4E 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AC54 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AC5A 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AC60 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AC66 303C 00E2                  		move.w	#$E2,d0
0000AC6A 4EF9 0000 15CC             		jmp	(PlaySound).l	; Speed	up the music
0000AC70                            ; ===========================================================================
0000AC70                            
0000AC70                            Obj2E_ChkShield:
0000AC70 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AC74 6600                       		bne.s	Obj2E_ChkInvinc
0000AC76 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AC7C 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AC82 303C 00AF                  		move.w	#$AF,d0
0000AC86 4EF9 0000 15CC             		jmp	(PlaySound).l	; play shield sound
0000AC8C                            ; ===========================================================================
0000AC8C                            
0000AC8C                            Obj2E_ChkInvinc:
0000AC8C 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AC90 6600                       		bne.s	Obj2E_ChkRings
0000AC92 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AC98 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AC9E 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000ACA4 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000ACAA 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000ACB0 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000ACB6 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000ACBC 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000ACC2 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000ACC8 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000ACCE 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000ACD2 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000ACD4 303C 0087                  		move.w	#$87,d0
0000ACD8 4EF9 0000 15CC             		jmp	(PlaySound).l	; play invincibility music
0000ACDE                            ; ===========================================================================
0000ACDE                            
0000ACDE                            Obj2E_NoMusic:
0000ACDE 4E75                       		rts	
0000ACE0                            ; ===========================================================================
0000ACE0                            
0000ACE0                            Obj2E_ChkRings:
0000ACE0 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000ACE4 6600                       		bne.s	Obj2E_ChkS
0000ACE6 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000ACEC 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000ACF2 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000ACF8 6500                       		bcs.s	Obj2E_RingSound
0000ACFA 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AD00 6700 FF2E                  		beq.w	ExtraLife
0000AD04 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AD0A 6500                       		bcs.s	Obj2E_RingSound
0000AD0C 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AD12 6700 FF1C                  		beq.w	ExtraLife
0000AD16                            
0000AD16                            Obj2E_RingSound:
0000AD16 303C 00B5                  		move.w	#$B5,d0
0000AD1A 4EF9 0000 15CC             		jmp	(PlaySound).l	; play ring sound
0000AD20                            ; ===========================================================================
0000AD20                            
0000AD20                            Obj2E_ChkS:
0000AD20 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AD24 6600                       		bne.s	Obj2E_ChkEnd
0000AD26                            		; nop	
0000AD26 7201                       		moveq	#1,d1
0000AD28 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AD2C                            
0000AD2C                            Obj2E_ChkEnd:
0000AD2C 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AD2E                            ; ===========================================================================
0000AD2E                            
0000AD2E                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AD2E 5368 001E                  		subq.w	#1,$1E(a0)
0000AD32 6B00 0000                  		bmi.w	DeleteObject
0000AD36 4E75                       		rts	
0000AD38                            ; ---------------------------------------------------------------------------
0000AD38                            ; Subroutine to	make the sides of a monitor solid
0000AD38                            ; ---------------------------------------------------------------------------
0000AD38                            
0000AD38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD38                            
0000AD38                            
0000AD38                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AD38 43F8 D000                  		lea	($FFFFD000).w,a1
0000AD3C 3029 0008                  		move.w	8(a1),d0
0000AD40 9068 0008                  		sub.w	8(a0),d0
0000AD44 D041                       		add.w	d1,d0
0000AD46 6B00                       		bmi.s	loc_A4E6
0000AD48 3601                       		move.w	d1,d3
0000AD4A D643                       		add.w	d3,d3
0000AD4C B043                       		cmp.w	d3,d0
0000AD4E 6200                       		bhi.s	loc_A4E6
0000AD50 1629 0016                  		move.b	$16(a1),d3
0000AD54 4883                       		ext.w	d3
0000AD56 D443                       		add.w	d3,d2
0000AD58 3629 000C                  		move.w	$C(a1),d3
0000AD5C 9668 000C                  		sub.w	$C(a0),d3
0000AD60 D642                       		add.w	d2,d3
0000AD62 6B00                       		bmi.s	loc_A4E6
0000AD64 D442                       		add.w	d2,d2
0000AD66 B642                       		cmp.w	d2,d3
0000AD68 6400                       		bcc.s	loc_A4E6
0000AD6A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AD6E 6B00                       		bmi.s	loc_A4E6
0000AD70 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AD76 6400                       		bcc.s	loc_A4E6
0000AD78 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AD7C 6600                       		bne.s	loc_A4E6
0000AD7E B240                       		cmp.w	d0,d1
0000AD80 6400                       		bcc.s	loc_A4DC
0000AD82 D241                       		add.w	d1,d1
0000AD84 9041                       		sub.w	d1,d0
0000AD86                            
0000AD86                            loc_A4DC:
0000AD86 0C43 0010                  		cmpi.w	#$10,d3
0000AD8A 6500                       		bcs.s	loc_A4EA
0000AD8C                            
0000AD8C                            loc_A4E2:
0000AD8C 7201                       		moveq	#1,d1
0000AD8E 4E75                       		rts	
0000AD90                            ; ===========================================================================
0000AD90                            
0000AD90                            loc_A4E6:
0000AD90 7200                       		moveq	#0,d1
0000AD92 4E75                       		rts	
0000AD94                            ; ===========================================================================
0000AD94                            
0000AD94                            loc_A4EA:
0000AD94 7200                       		moveq	#0,d1
0000AD96 1228 0019                  		move.b	$19(a0),d1
0000AD9A 5841                       		addq.w	#4,d1
0000AD9C 3401                       		move.w	d1,d2
0000AD9E D442                       		add.w	d2,d2
0000ADA0 D269 0008                  		add.w	8(a1),d1
0000ADA4 9268 0008                  		sub.w	8(a0),d1
0000ADA8 6BE2                       		bmi.s	loc_A4E2
0000ADAA B242                       		cmp.w	d2,d1
0000ADAC 64DE                       		bcc.s	loc_A4E2
0000ADAE 72FF                       		moveq	#-1,d1
0000ADB0 4E75                       		rts	
0000ADB2                            ; End of function Obj26_SolidSides
0000ADB2                            
0000ADB2                            ; ===========================================================================
0000ADB2                            Ani_obj26:
0000ADB2                            	include "_anim\obj26.asm"
0000ADB2                            ; ---------------------------------------------------------------------------
0000ADB2                            ; Animation script - monitors
0000ADB2                            ; ---------------------------------------------------------------------------
0000ADB2 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000ADB8 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000ADBE 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000ADC4 0000                       		dc.w byte_A582-Ani_obj26
0000ADC6 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000ADCC 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000ADD8 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000ADE4 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000ADF0 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000ADFC 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AE08 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AE14 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AE20 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AE2C 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AE34                            		even
0000AE34                            		even
0000AE34                            
0000AE34                            ; ---------------------------------------------------------------------------
0000AE34                            ; Sprite mappings - monitors
0000AE34                            ; ---------------------------------------------------------------------------
0000AE34                            Map_obj26:
0000AE34                            	include "_maps\obj26.asm"
0000AE34                            ; ================================================================================
0000AE34                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AE34                            ; ================================================================================
0000AE34                            
0000AE34                            DATAY1U343IF3L:
0000AE34 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AE38 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AE3C 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AE40 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AE44 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AE48 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AE4C 05                         DATAY1U343IF3L_0: dc.b $5
0000AE4D E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE52 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE57 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE5C 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE61 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE66 06                         DATAY1U343IF3L_1: dc.b $6
0000AE67 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AE6C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE71 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE76 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE7B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE80 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE85 05                         DATAY1U343IF3L_2: dc.b $5
0000AE86 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE8B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE90 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE95 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE9A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE9F 05                         DATAY1U343IF3L_3: dc.b $5
0000AEA0 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEA5 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEAA E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEAF 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEB4 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEB9 06                         DATAY1U343IF3L_4: dc.b $6
0000AEBA F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AEBF E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEC4 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEC9 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AECE 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AED3 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AED8 06                         DATAY1U343IF3L_5: dc.b $6
0000AED9 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AEDE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEE3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEE8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEED 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEF2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEF7 06                         DATAY1U343IF3L_6: dc.b $6
0000AEF8 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AEFD E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF02 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF07 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF0C 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF11 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF16 06                         DATAY1U343IF3L_7: dc.b $6
0000AF17 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AF1C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF21 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF26 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF2B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF30 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF35 06                         DATAY1U343IF3L_8: dc.b $6
0000AF36 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AF3B E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF40 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF45 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF4A 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF4F 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF54 06                         DATAY1U343IF3L_9: dc.b $6
0000AF55 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AF5A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF5F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF64 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF69 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF6E 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF73 05                         DATAY1U343IF3L_A: dc.b $5
0000AF74 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF79 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF7E E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF83 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF88 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF8D 01                         DATAY1U343IF3L_B: dc.b $1
0000AF8E FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AF94 00                         	even
0000AF94 00                         	even
0000AF94                            
0000AF94                            ; ===========================================================================
0000AF94                            ; ---------------------------------------------------------------------------
0000AF94                            ; Object 0E - Sonic on the title screen
0000AF94                            ; ---------------------------------------------------------------------------
0000AF94                            
0000AF94                            Obj0E:					; XREF: Obj_Index
0000AF94 7000                       		moveq	#0,d0
0000AF96 1028 0024                  		move.b	$24(a0),d0
0000AF9A 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AF9E 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AFA2                            ; ===========================================================================
0000AFA2 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AFA4 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AFA6 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AFA8 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AFAA                            ; ===========================================================================
0000AFAA                            
0000AFAA                            Obj0E_Main:				; XREF: Obj0E_Index
0000AFAA 5428 0024                  		addq.b	#2,$24(a0)
0000AFAE 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AFB4 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AFBA 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AFC2 317C 2300 0002             		move.w	#$2300,2(a0)
0000AFC8 117C 0001 0018             		move.b	#1,$18(a0)
0000AFCE 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AFD4 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AFDA 6100 0000                  		bsr.w	AnimateSprite
0000AFDE                            
0000AFDE                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AFDE 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AFE2 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AFE4 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AFE8 6000 0000                  		bra.w	DisplaySprite
0000AFEC                            ; ===========================================================================
0000AFEC                            
0000AFEC                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AFEC 4E75                       		rts	
0000AFEE                            ; ===========================================================================
0000AFEE                            
0000AFEE                            Obj0E_Move:				; XREF: Obj0E_Index
0000AFEE 5168 000A                  		subq.w	#8,$A(a0)
0000AFF2 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AFF8 6600                       		bne.s	Obj0E_Display
0000AFFA 5428 0024                  		addq.b	#2,$24(a0)
0000AFFE                            
0000AFFE                            Obj0E_Display:
0000AFFE 6000 0000                  		bra.w	DisplaySprite
0000B002                            ; ===========================================================================
0000B002 4E75                       		rts	
0000B004                            ; ===========================================================================
0000B004                            
0000B004                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B004 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B00A 6100 0000                  		bsr.w	AnimateSprite
0000B00E 6000 0000                  		bra.w	DisplaySprite
0000B012                            ; ===========================================================================
0000B012 4E75                       		rts	
0000B014                            ; ===========================================================================
0000B014                            ; ---------------------------------------------------------------------------
0000B014                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B014                            ; ---------------------------------------------------------------------------
0000B014                            
0000B014                            Obj0F:					; XREF: Obj_Index
0000B014 7000                       		moveq	#0,d0
0000B016 1028 0024                  		move.b	$24(a0),d0
0000B01A 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B01E 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B022 6000 0000                  		bra.w	DisplaySprite
0000B026                            ; ===========================================================================
0000B026 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B028 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B02A 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B02C                            ; ===========================================================================
0000B02C                            
0000B02C                            Obj0F_Main:				; XREF: Obj0F_Index
0000B02C 5428 0024                  		addq.b	#2,$24(a0)
0000B030 317C 00D0 0008             		move.w	#$D0,8(a0)
0000B036 317C 0130 000A             		move.w	#$130,$A(a0)
0000B03C 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B044 317C 0200 0002             		move.w	#$200,2(a0)
0000B04A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B050 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B052 5428 0024                  		addq.b	#2,$24(a0)
0000B056 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B05C 6600                       		bne.s	locret_A6F8	; if not, branch
0000B05E 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B064 317C 0170 0008             		move.w	#$170,8(a0)
0000B06A 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B070                            
0000B070                            locret_A6F8:				; XREF: Obj0F_Index
0000B070 4E75                       		rts	
0000B072                            ; ===========================================================================
0000B072                            
0000B072                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B072 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B078 6000 0000                  		bra.w	AnimateSprite
0000B07C                            ; ===========================================================================
0000B07C                            Ani_obj0E:
0000B07C                            	include "_anim\obj0E.asm"
0000B07C                            ; ---------------------------------------------------------------------------
0000B07C                            ; Animation script - Sonic on the title screen
0000B07C                            ; ---------------------------------------------------------------------------
0000B07C 0000                       		dc.w byte_A706-Ani_obj0E
0000B07E 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B08A                            		even
0000B08A                            		even
0000B08A                            
0000B08A                            Ani_obj0F:
0000B08A                            	include "_anim\obj0F.asm"
0000B08A                            ; ---------------------------------------------------------------------------
0000B08A                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B08A                            ; ---------------------------------------------------------------------------
0000B08A 0000                       		dc.w byte_A714-Ani_obj0F
0000B08C 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B090                            		even
0000B090                            		even
0000B090                            
0000B090                            ; ---------------------------------------------------------------------------
0000B090                            ; Subroutine to	animate	a sprite using an animation script
0000B090                            ; ---------------------------------------------------------------------------
0000B090                            
0000B090                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B090                            
0000B090                            
0000B090                            AnimateSprite:
0000B090 7000                       		moveq	#0,d0
0000B092 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B096 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B09A 6700                       		beq.s	Anim_Run	; if not, branch
0000B09C 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B0A0 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B0A6 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B0AC                            
0000B0AC                            Anim_Run:
0000B0AC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B0B0 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B0B2 D040                       		add.w	d0,d0
0000B0B4 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B0B8 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B0BC 7200                       		moveq	#0,d1
0000B0BE 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B0C2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B0C6 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B0C8                            
0000B0C8                            Anim_Next:
0000B0C8 1200                       		move.b	d0,d1
0000B0CA 0200 001F                  		andi.b	#$1F,d0
0000B0CE 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B0D2 1028 0022                  		move.b	$22(a0),d0
0000B0D6 E719                       		rol.b	#3,d1
0000B0D8 B101                       		eor.b	d0,d1
0000B0DA 0201 0003                  		andi.b	#3,d1
0000B0DE 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B0E4 8328 0001                  		or.b	d1,1(a0)
0000B0E8 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B0EC                            
0000B0EC                            Anim_Wait:
0000B0EC 4E75                       		rts	
0000B0EE                            ; ===========================================================================
0000B0EE                            
0000B0EE                            Anim_End_FF:
0000B0EE 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B0F0 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B0F2 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B0F8 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B0FC 60CA                       		bra.s	Anim_Next
0000B0FE                            ; ===========================================================================
0000B0FE                            
0000B0FE                            Anim_End_FE:
0000B0FE 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B100 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B102 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B106 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B10A 9200                       		sub.b	d0,d1
0000B10C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B110 60B6                       		bra.s	Anim_Next
0000B112                            ; ===========================================================================
0000B112                            
0000B112                            Anim_End_FD:
0000B112 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B114 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B116 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B11C                            
0000B11C                            Anim_End_FC:
0000B11C 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B11E 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B120 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B124                            
0000B124                            Anim_End_FB:
0000B124 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B126 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B128 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B12E 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B132                            
0000B132                            Anim_End_FA:
0000B132 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B134 6600                       		bne.s	Anim_End	; if not, branch
0000B136 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B13A                            
0000B13A                            Anim_End:
0000B13A 4E75                       		rts	
0000B13C                            ; End of function AnimateSprite
0000B13C                            
0000B13C                            ; ===========================================================================
0000B13C                            ; ---------------------------------------------------------------------------
0000B13C                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B13C                            ; ---------------------------------------------------------------------------
0000B13C                            Map_obj0F:
0000B13C                            	include "_maps\obj0F.asm"
0000B13C                            ; ---------------------------------------------------------------------------
0000B13C                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B13C                            ; ---------------------------------------------------------------------------
0000B13C 0000                       		dc.w byte_A7CD-Map_obj0F
0000B13E 0000                       		dc.w byte_A7CC-Map_obj0F
0000B140 0000                       		dc.w byte_A7EB-Map_obj0F
0000B142 0000                       		dc.w byte_A882-Map_obj0F
0000B144 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B145 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B14A 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B14F 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B154 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B159 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B15E 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B163 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B164 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B169 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B16E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B173 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B178 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B17D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B182 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B187 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B18C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B191 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B196 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B19B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1A0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1A5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1AA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1AF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1B4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1B9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1BE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1C3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1C8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1CD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1D2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1D7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1DC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1E1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1E6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1EB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1F0 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1F5 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1FA 01                         byte_A882:	dc.b 1			; "TM"
0000B1FB FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B200                            		even
0000B200                            		even
0000B200                            
0000B200                            ; ---------------------------------------------------------------------------
0000B200                            ; Sprite mappings - Sonic on the title screen
0000B200                            ; ---------------------------------------------------------------------------
0000B200                            Map_obj0E:
0000B200                            	include "_maps\obj0E.asm"
0000B200                            ; ================================================================================
0000B200                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B200                            ; ================================================================================
0000B200                            
0000B200                            DATAGKI0HYDQBXP:
0000B200 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B204 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B208 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B20C 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B210 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B211 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B216 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B21B 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B220 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B225 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B22A 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B22F 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B234 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B239 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B23A 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B23F 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B244 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B249 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B24E 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B253 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B258 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B25D 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B262 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B267 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B26C 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B271 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B272 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B277 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B27C F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B281 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B286 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B28B 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B290 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B295 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B29A 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B29F 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B2A4 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B2A9 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B2AA FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B2AF F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B2B4 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B2B9 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B2BE 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B2C3 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B2C8 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B2CD 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B2D2 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B2D7 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B2DC 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B2DD F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B2E2 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B2E7 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B2EC 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B2F1 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B2F6 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B2FB 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B300 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B305 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B30A 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B30F 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B314 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B319 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B31E 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B323 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B328 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B32D 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B32E 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B333 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B338 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B33D 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B342 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B347 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B34C 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B351 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B356 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B35B 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B360 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B365 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B366 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B36B 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B370 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B375 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B37A 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B37F 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B384 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B389 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B38E 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B393 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B398 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B39D 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B3A2 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B3A7 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B3AC 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B3B1 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B3B2 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B3B7 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B3BC 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B3C1 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B3C6 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B3CB 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B3D0 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B3D5 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B3DA 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B3DF EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B3E4 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B3E9 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B3EE EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B3F3 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B3F8 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B3FE 00                         	even
0000B3FE 00                         	even
0000B3FE                            
0000B3FE                            ; ===========================================================================
0000B3FE                            ; ---------------------------------------------------------------------------
0000B3FE                            ; Object 2B - Chopper enemy (GHZ)
0000B3FE                            ; ---------------------------------------------------------------------------
0000B3FE                            
0000B3FE                            Obj2B:					; XREF: Obj_Index
0000B3FE 7000                       		moveq	#0,d0
0000B400 1028 0024                  		move.b	$24(a0),d0
0000B404 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B408 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B40C 6000 0000                  		bra.w	MarkObjGone
0000B410                            ; ===========================================================================
0000B410 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B412 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B414                            ; ===========================================================================
0000B414                            
0000B414                            Obj2B_Main:				; XREF: Obj2B_Index
0000B414 5428 0024                  		addq.b	#2,$24(a0)
0000B418 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B420 317C 047B 0002             		move.w	#$47B,2(a0)
0000B426 117C 0004 0001             		move.b	#4,1(a0)
0000B42C 117C 0004 0018             		move.b	#4,$18(a0)
0000B432 117C 0009 0020             		move.b	#9,$20(a0)
0000B438 117C 0010 0019             		move.b	#$10,$19(a0)
0000B43E 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B444 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B44A                            
0000B44A                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B44A 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B450 6100 FC3E                  		bsr.w	AnimateSprite
0000B454 6100 0000                  		bsr.w	SpeedToPos
0000B458 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B45E 3028 0030                  		move.w	$30(a0),d0
0000B462 B068 000C                  		cmp.w	$C(a0),d0
0000B466 6400                       		bcc.s	Obj2B_ChgAni
0000B468 3140 000C                  		move.w	d0,$C(a0)
0000B46C 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B472                            
0000B472                            Obj2B_ChgAni:
0000B472 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B478 0440 00C0                  		subi.w	#$C0,d0
0000B47C B068 000C                  		cmp.w	$C(a0),d0
0000B480 6400                       		bcc.s	locret_ABB6
0000B482 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B488 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B48C 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B48E 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B494                            
0000B494                            locret_ABB6:
0000B494 4E75                       		rts	
0000B496                            ; ===========================================================================
0000B496                            Ani_obj2B:
0000B496                            	include "_anim\obj2B.asm"
0000B496                            ; ---------------------------------------------------------------------------
0000B496                            ; Animation script - Chopper enemy
0000B496                            ; ---------------------------------------------------------------------------
0000B496 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B498 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B49A 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B49C 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B4A0 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B4A4 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B4A8 00                         		even
0000B4A8 00                         		even
0000B4A8                            
0000B4A8                            ; ---------------------------------------------------------------------------
0000B4A8                            ; Sprite mappings - Chopper enemy (GHZ)
0000B4A8                            ; ---------------------------------------------------------------------------
0000B4A8                            Map_obj2B:
0000B4A8                            	include "_maps\obj2B.asm"
0000B4A8                            Map_1ff1:
0000B4A8 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B4AA 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B4AC 02                         Map_1ff1_4: 	dc.b $2
0000B4AD E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B4B2 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B4B7 02                         Map_1ff1_F: 	dc.b $2
0000B4B8 E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B4BD 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B4C2                            	even
0000B4C2                            	even
0000B4C2                            
0000B4C2                            ; ===========================================================================
0000B4C2                            ; ---------------------------------------------------------------------------
0000B4C2                            ; Object 2C - Jaws enemy (LZ)
0000B4C2                            ; ---------------------------------------------------------------------------
0000B4C2                            
0000B4C2                            Obj2C:					; XREF: Obj_Index
0000B4C2 7000                       		moveq	#0,d0
0000B4C4 1028 0024                  		move.b	$24(a0),d0
0000B4C8 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B4CC 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B4D0                            ; ===========================================================================
0000B4D0 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B4D2 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B4D4                            ; ===========================================================================
0000B4D4                            
0000B4D4                            Obj2C_Main:				; XREF: Obj2C_Index
0000B4D4 5428 0024                  		addq.b	#2,$24(a0)
0000B4D8 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B4E0 317C 2486 0002             		move.w	#$2486,2(a0)
0000B4E6 0028 0004 0001             		ori.b	#4,1(a0)
0000B4EC 117C 000A 0020             		move.b	#$A,$20(a0)
0000B4F2 117C 0004 0018             		move.b	#4,$18(a0)
0000B4F8 117C 0010 0019             		move.b	#$10,$19(a0)
0000B4FE 7000                       		moveq	#0,d0
0000B500 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B504 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B506 5340                       		subq.w	#1,d0
0000B508 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B50C 3140 0032                  		move.w	d0,$32(a0)
0000B510 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B516 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B51C 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B51E 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B522                            
0000B522                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B522 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B526 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B528 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B52E 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B532 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B538 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B53E                            
0000B53E                            Obj2C_Animate:
0000B53E 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B544 6100 FB4A                  		bsr.w	AnimateSprite
0000B548 6100 0000                  		bsr.w	SpeedToPos
0000B54C 6000 0000                  		bra.w	MarkObjGone
0000B550                            ; ===========================================================================
0000B550                            Ani_obj2C:
0000B550                            	include "_anim\obj2C.asm"
0000B550                            ; ---------------------------------------------------------------------------
0000B550                            ; Animation script - Jaws enemy
0000B550                            ; ---------------------------------------------------------------------------
0000B550 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B552 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B558                            		even
0000B558                            		even
0000B558                            
0000B558                            ; ---------------------------------------------------------------------------
0000B558                            ; Sprite mappings - Jaws enemy (LZ)
0000B558                            ; ---------------------------------------------------------------------------
0000B558                            Map_obj2C:
0000B558                            	include "_maps\obj2C.asm"
0000B558                            ; ---------------------------------------------------------------------------
0000B558                            ; Sprite mappings - Jaws enemy (LZ)
0000B558                            ; ---------------------------------------------------------------------------
0000B558 0000                       		dc.w byte_AC78-Map_obj2C
0000B55A 0000                       		dc.w byte_AC83-Map_obj2C
0000B55C 0000                       		dc.w byte_AC8E-Map_obj2C
0000B55E 0000                       		dc.w byte_AC99-Map_obj2C
0000B560 02                         byte_AC78:	dc.b 2
0000B561 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B566 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B56B 02                         byte_AC83:	dc.b 2
0000B56C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B571 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B576 02                         byte_AC8E:	dc.b 2
0000B577 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B57C F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B581 02                         byte_AC99:	dc.b 2
0000B582 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B587 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B58C                            		even
0000B58C                            		even
0000B58C                            
0000B58C                            ; ===========================================================================
0000B58C                            ; ---------------------------------------------------------------------------
0000B58C                            ; Object 2D - Burrobot enemy (LZ)
0000B58C                            ; ---------------------------------------------------------------------------
0000B58C                            
0000B58C                            Obj2D:					; XREF: Obj_Index
0000B58C 7000                       		moveq	#0,d0
0000B58E 1028 0024                  		move.b	$24(a0),d0
0000B592 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B596 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B59A                            ; ===========================================================================
0000B59A 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B59C 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B59E                            ; ===========================================================================
0000B59E                            
0000B59E                            Obj2D_Main:				; XREF: Obj2D_Index
0000B59E 5428 0024                  		addq.b	#2,$24(a0)
0000B5A2 117C 0013 0016             		move.b	#$13,$16(a0)
0000B5A8 117C 0008 0017             		move.b	#8,$17(a0)
0000B5AE 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B5B6 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B5BC 0028 0004 0001             		ori.b	#4,1(a0)
0000B5C2 117C 0004 0018             		move.b	#4,$18(a0)
0000B5C8 117C 0005 0020             		move.b	#5,$20(a0)
0000B5CE 117C 000C 0019             		move.b	#$C,$19(a0)
0000B5D4 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B5D8 117C 0002 001C             		move.b	#2,$1C(a0)
0000B5DE                            
0000B5DE                            Obj2D_Action:				; XREF: Obj2D_Index
0000B5DE 7000                       		moveq	#0,d0
0000B5E0 1028 0025                  		move.b	$25(a0),d0
0000B5E4 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B5E8 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B5EC 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B5F2 6100 FA9C                  		bsr.w	AnimateSprite
0000B5F6 6000 0000                  		bra.w	MarkObjGone
0000B5FA                            ; ===========================================================================
0000B5FA 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B5FC 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B5FE 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B600 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B602                            ; ===========================================================================
0000B602                            
0000B602                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B602 5368 0030                  		subq.w	#1,$30(a0)
0000B606 6A00                       		bpl.s	locret_AD42
0000B608 5428 0025                  		addq.b	#2,$25(a0)
0000B60C 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B612 317C 0080 0010             		move.w	#$80,$10(a0)
0000B618 117C 0001 001C             		move.b	#1,$1C(a0)
0000B61E 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B624 6700                       		beq.s	locret_AD42
0000B626 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B62A                            
0000B62A                            locret_AD42:
0000B62A 4E75                       		rts	
0000B62C                            ; ===========================================================================
0000B62C                            
0000B62C                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B62C 5368 0030                  		subq.w	#1,$30(a0)
0000B630 6B00                       		bmi.s	loc_AD84
0000B632 6100 0000                  		bsr.w	SpeedToPos
0000B636 0868 0000 0032             		bchg	#0,$32(a0)
0000B63C 6600                       		bne.s	loc_AD78
0000B63E 3628 0008                  		move.w	8(a0),d3
0000B642 0643 000C                  		addi.w	#$C,d3
0000B646 0828 0000 0022             		btst	#0,$22(a0)
0000B64C 6600                       		bne.s	loc_AD6A
0000B64E 0443 0018                  		subi.w	#$18,d3
0000B652                            
0000B652                            loc_AD6A:
0000B652 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B658 0C41 000C                  		cmpi.w	#$C,d1
0000B65C 6C00                       		bge.s	loc_AD84
0000B65E 4E75                       		rts	
0000B660                            ; ===========================================================================
0000B660                            
0000B660                            loc_AD78:				; XREF: Obj2D_Move
0000B660 4EB9 0000 0000             		jsr	ObjHitFloor
0000B666 D368 000C                  		add.w	d1,$C(a0)
0000B66A 4E75                       		rts	
0000B66C                            ; ===========================================================================
0000B66C                            
0000B66C                            loc_AD84:				; XREF: Obj2D_Move
0000B66C 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B672 6700                       		beq.s	loc_ADA4
0000B674 5528 0025                  		subq.b	#2,$25(a0)
0000B678 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B67E 317C 0000 0010             		move.w	#0,$10(a0)
0000B684 117C 0000 001C             		move.b	#0,$1C(a0)
0000B68A 4E75                       		rts	
0000B68C                            ; ===========================================================================
0000B68C                            
0000B68C                            loc_ADA4:
0000B68C 5428 0025                  		addq.b	#2,$25(a0)
0000B690 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B696 117C 0002 001C             		move.b	#2,$1C(a0)
0000B69C 4E75                       		rts	
0000B69E                            ; ===========================================================================
0000B69E                            
0000B69E                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B69E 6100 0000                  		bsr.w	SpeedToPos
0000B6A2 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B6A8 6B00                       		bmi.s	locret_ADF0
0000B6AA 117C 0003 001C             		move.b	#3,$1C(a0)
0000B6B0 4EB9 0000 0000             		jsr	ObjHitFloor
0000B6B6 4A41                       		tst.w	d1
0000B6B8 6A00                       		bpl.s	locret_ADF0
0000B6BA D368 000C                  		add.w	d1,$C(a0)
0000B6BE 317C 0000 0012             		move.w	#0,$12(a0)
0000B6C4 117C 0001 001C             		move.b	#1,$1C(a0)
0000B6CA 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B6D0 5528 0025                  		subq.b	#2,$25(a0)
0000B6D4 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B6D8                            
0000B6D8                            locret_ADF0:
0000B6D8 4E75                       		rts	
0000B6DA                            ; ===========================================================================
0000B6DA                            
0000B6DA                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B6DA 343C 0060                  		move.w	#$60,d2
0000B6DE 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B6E2 6400                       		bcc.s	locret_AE20
0000B6E4 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B6E8 9068 000C                  		sub.w	$C(a0),d0
0000B6EC 6400                       		bcc.s	locret_AE20
0000B6EE 0C40 FF80                  		cmpi.w	#-$80,d0
0000B6F2 6500                       		bcs.s	locret_AE20
0000B6F4 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B6F8 6600                       		bne.s	locret_AE20
0000B6FA 5528 0025                  		subq.b	#2,$25(a0)
0000B6FE 3141 0010                  		move.w	d1,$10(a0)
0000B702 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B708                            
0000B708                            locret_AE20:
0000B708 4E75                       		rts	
0000B70A                            
0000B70A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B70A                            
0000B70A                            
0000B70A                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B70A 323C 0080                  		move.w	#$80,d1
0000B70E 08E8 0000 0022             		bset	#0,$22(a0)
0000B714 3038 D008                  		move.w	($FFFFD008).w,d0
0000B718 9068 0008                  		sub.w	8(a0),d0
0000B71C 6400                       		bcc.s	loc_AE40
0000B71E 4440                       		neg.w	d0
0000B720 4441                       		neg.w	d1
0000B722 08A8 0000 0022             		bclr	#0,$22(a0)
0000B728                            
0000B728                            loc_AE40:
0000B728 B042                       		cmp.w	d2,d0
0000B72A 4E75                       		rts	
0000B72C                            ; End of function Obj2D_ChkSonic2
0000B72C                            
0000B72C                            ; ===========================================================================
0000B72C                            Ani_obj2D:
0000B72C                            	include "_anim\obj2D.asm"
0000B72C                            ; ---------------------------------------------------------------------------
0000B72C                            ; Animation script - Burrobot enemy but craig
0000B72C                            ; ---------------------------------------------------------------------------
0000B72C 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B72E 0000                       		dc.w byte_AE50-Ani_obj2D
0000B730 0000                       		dc.w byte_AE54-Ani_obj2D
0000B732 0000                       		dc.w byte_AE58-Ani_obj2D
0000B734 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B737 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B73B 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B749 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B74C                            		even
0000B74C                            		even
0000B74C                            
0000B74C                            ; ---------------------------------------------------------------------------
0000B74C                            ; Sprite mappings - Burrobot enemy (LZ)
0000B74C                            ; ---------------------------------------------------------------------------
0000B74C                            Map_obj2D:
0000B74C                            	include "_maps\obj2D.asm"
0000B74C                            Map_e3a3:
0000B74C 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B74E 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B750 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B752 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B754 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B756 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B758 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B75A 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B75C 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B75E 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B760 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B762 02                         Map_e3a3_16: 	dc.b $2
0000B763 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B768 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B76D 02                         Map_e3a3_21: 	dc.b $2
0000B76E EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B773 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B778 02                         Map_e3a3_2C: 	dc.b $2
0000B779 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B77E 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B783 02                         Map_e3a3_37: 	dc.b $2
0000B784 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B789 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B78E 02                         Map_e3a3_42: 	dc.b $2
0000B78F EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B794 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B799 02                         Map_e3a3_4D: 	dc.b $2
0000B79A EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B79F FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B7A4 02                         Map_e3a3_58: 	dc.b $2
0000B7A5 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B7AA FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B7AF 02                         Map_e3a3_63: 	dc.b $2
0000B7B0 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B7B5 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B7BA 02                         Map_e3a3_6E: 	dc.b $2
0000B7BB EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B7C0 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B7C5 02                         Map_e3a3_79: 	dc.b $2
0000B7C6 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B7CB 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B7D0 02                         Map_e3a3_84: 	dc.b $2
0000B7D1 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B7D6 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B7DC 00                         	even
0000B7DC 00                         	even
0000B7DC                            
0000B7DC                            ; ===========================================================================
0000B7DC                            ; ---------------------------------------------------------------------------
0000B7DC                            ; Object 2F - large moving platforms (MZ)
0000B7DC                            ; ---------------------------------------------------------------------------
0000B7DC                            
0000B7DC                            Obj2F:					; XREF: Obj_Index
0000B7DC 7000                       		moveq	#0,d0
0000B7DE 1028 0024                  		move.b	$24(a0),d0
0000B7E2 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B7E6 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B7EA                            ; ===========================================================================
0000B7EA 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B7EC 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B7EE                            
0000B7EE 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B7F0 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B7F2 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B7F4 0140                       		dc.b 1,	$40
0000B7F6 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B7F8 0220                       		dc.b 2,	$20
0000B7FA                            ; ===========================================================================
0000B7FA                            
0000B7FA                            Obj2F_Main:				; XREF: Obj2F_Index
0000B7FA 5428 0024                  		addq.b	#2,$24(a0)
0000B7FE 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B806 317C C000 0002             		move.w	#$C000,2(a0)
0000B80C 117C 0004 0001             		move.b	#4,1(a0)
0000B812 117C 0005 0018             		move.b	#5,$18(a0)
0000B818 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B81E 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B824 7000                       		moveq	#0,d0
0000B826 1028 0028                  		move.b	$28(a0),d0
0000B82A E448                       		lsr.w	#2,d0
0000B82C 0240 001C                  		andi.w	#$1C,d0
0000B830 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B834 3019                       		move.w	(a1)+,d0
0000B836 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B83A 214A 0030                  		move.l	a2,$30(a0)
0000B83E 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B842 1151 0019                  		move.b	(a1),$19(a0)
0000B846 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B84C 117C 0040 0016             		move.b	#$40,$16(a0)
0000B852 08E8 0004 0001             		bset	#4,1(a0)
0000B858                            
0000B858                            Obj2F_Action:				; XREF: Obj2F_Index
0000B858 6100 0000                  		bsr.w	Obj2F_Types
0000B85C 4A28 0025                  		tst.b	$25(a0)
0000B860 6700                       		beq.s	Obj2F_Solid
0000B862 7200                       		moveq	#0,d1
0000B864 1228 0019                  		move.b	$19(a0),d1
0000B868 0641 000B                  		addi.w	#$B,d1
0000B86C 6100 C552                  		bsr.w	ExitPlatform
0000B870 0829 0003 0022             		btst	#3,$22(a1)
0000B876 6600 0000                  		bne.w	Obj2F_Slope
0000B87A 4228 0025                  		clr.b	$25(a0)
0000B87E 6000                       		bra.s	Obj2F_Display
0000B880                            ; ===========================================================================
0000B880                            
0000B880                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B880 7200                       		moveq	#0,d1
0000B882 1228 0019                  		move.b	$19(a0),d1
0000B886 0641 000B                  		addi.w	#$B,d1
0000B88A 2468 0030                  		movea.l	$30(a0),a2
0000B88E 3428 0008                  		move.w	8(a0),d2
0000B892 6100 D51C                  		bsr.w	SlopeObject2
0000B896 6000                       		bra.s	Obj2F_Display
0000B898                            ; ===========================================================================
0000B898                            
0000B898                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B898 7200                       		moveq	#0,d1
0000B89A 1228 0019                  		move.b	$19(a0),d1
0000B89E 0641 000B                  		addi.w	#$B,d1
0000B8A2 343C 0020                  		move.w	#$20,d2
0000B8A6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B8AC 6600                       		bne.s	loc_AF8E
0000B8AE 343C 0030                  		move.w	#$30,d2
0000B8B2                            
0000B8B2                            loc_AF8E:
0000B8B2 2468 0030                  		movea.l	$30(a0),a2
0000B8B6 6100 0000                  		bsr.w	SolidObject2F
0000B8BA                            
0000B8BA                            Obj2F_Display:				; XREF: Obj2F_Action
0000B8BA 6100 0000                  		bsr.w	DisplaySprite
0000B8BE 6000 0000                  		bra.w	Obj2F_ChkDel
0000B8C2                            
0000B8C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B8C2                            
0000B8C2                            
0000B8C2                            Obj2F_Types:				; XREF: Obj2F_Action
0000B8C2 7000                       		moveq	#0,d0
0000B8C4 1028 0028                  		move.b	$28(a0),d0
0000B8C8 0240 0007                  		andi.w	#7,d0
0000B8CC D040                       		add.w	d0,d0
0000B8CE 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B8D2 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B8D6                            ; End of function Obj2F_Types
0000B8D6                            
0000B8D6                            ; ===========================================================================
0000B8D6 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B8D8 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B8DA 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B8DC 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B8DE 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B8E0 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B8E2                            ; ===========================================================================
0000B8E2                            
0000B8E2                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B8E2 4E75                       		rts			; type 00 platform doesn't move
0000B8E4                            ; ===========================================================================
0000B8E4                            
0000B8E4                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B8E4 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B8E8 323C 0020                  		move.w	#$20,d1
0000B8EC 6000                       		bra.s	Obj2F_Move
0000B8EE                            ; ===========================================================================
0000B8EE                            
0000B8EE                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B8EE 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B8F2 323C 0030                  		move.w	#$30,d1
0000B8F6 6000                       		bra.s	Obj2F_Move
0000B8F8                            ; ===========================================================================
0000B8F8                            
0000B8F8                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B8F8 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B8FC 323C 0040                  		move.w	#$40,d1
0000B900 6000                       		bra.s	Obj2F_Move
0000B902                            ; ===========================================================================
0000B902                            
0000B902                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B902 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B906 323C 0060                  		move.w	#$60,d1
0000B90A                            
0000B90A                            Obj2F_Move:
0000B90A 0828 0003 0028             		btst	#3,$28(a0)
0000B910 6700                       		beq.s	loc_AFF2
0000B912 4440                       		neg.w	d0
0000B914 D041                       		add.w	d1,d0
0000B916                            
0000B916                            loc_AFF2:
0000B916 3228 002C                  		move.w	$2C(a0),d1
0000B91A 9240                       		sub.w	d0,d1
0000B91C 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B920 4E75                       		rts	
0000B922                            ; ===========================================================================
0000B922                            
0000B922                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B922 1028 0034                  		move.b	$34(a0),d0
0000B926 4A28 0025                  		tst.b	$25(a0)
0000B92A 6600                       		bne.s	loc_B010
0000B92C 5500                       		subq.b	#2,d0
0000B92E 6400                       		bcc.s	loc_B01C
0000B930 7000                       		moveq	#0,d0
0000B932 6000                       		bra.s	loc_B01C
0000B934                            ; ===========================================================================
0000B934                            
0000B934                            loc_B010:
0000B934 5800                       		addq.b	#4,d0
0000B936 0C00 0040                  		cmpi.b	#$40,d0
0000B93A 6500                       		bcs.s	loc_B01C
0000B93C 103C 0040                  		move.b	#$40,d0
0000B940                            
0000B940                            loc_B01C:
0000B940 1140 0034                  		move.b	d0,$34(a0)
0000B944 4EB9 0000 2D6C             		jsr	(CalcSine).l
0000B94A E848                       		lsr.w	#4,d0
0000B94C 3200                       		move.w	d0,d1
0000B94E D068 002C                  		add.w	$2C(a0),d0
0000B952 3140 000C                  		move.w	d0,$C(a0)
0000B956 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B95C 6600                       		bne.s	loc_B07A
0000B95E 4A28 0035                  		tst.b	$35(a0)
0000B962 6600                       		bne.s	loc_B07A
0000B964 117C 0001 0035             		move.b	#1,$35(a0)
0000B96A 6100 0000                  		bsr.w	SingleObjLoad2
0000B96E 6600                       		bne.s	loc_B07A
0000B970 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B974 3368 0008 0008             		move.w	8(a0),8(a1)
0000B97A 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B980 5069 002C                  		addq.w	#8,$2C(a1)
0000B984 5769 002C                  		subq.w	#3,$2C(a1)
0000B988 0469 0040 0008             		subi.w	#$40,8(a1)
0000B98E 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B994 2348 0038                  		move.l	a0,$38(a1)
0000B998 2448                       		movea.l	a0,a2
0000B99A 6100                       		bsr.s	sub_B09C
0000B99C                            
0000B99C                            loc_B07A:
0000B99C 7400                       		moveq	#0,d2
0000B99E 45E8 0036                  		lea	$36(a0),a2
0000B9A2 141A                       		move.b	(a2)+,d2
0000B9A4 5302                       		subq.b	#1,d2
0000B9A6 6500                       		bcs.s	locret_B09A
0000B9A8                            
0000B9A8                            loc_B086:
0000B9A8 7000                       		moveq	#0,d0
0000B9AA 101A                       		move.b	(a2)+,d0
0000B9AC ED48                       		lsl.w	#6,d0
0000B9AE 0640 D000                  		addi.w	#-$3000,d0
0000B9B2 3240                       		movea.w	d0,a1
0000B9B4 3341 003C                  		move.w	d1,$3C(a1)
0000B9B8 51CA FFEE                  		dbf	d2,loc_B086
0000B9BC                            
0000B9BC                            locret_B09A:
0000B9BC 4E75                       		rts	
0000B9BE                            
0000B9BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B9BE                            
0000B9BE                            
0000B9BE                            sub_B09C:
0000B9BE 45EA 0036                  		lea	$36(a2),a2
0000B9C2 7000                       		moveq	#0,d0
0000B9C4 1012                       		move.b	(a2),d0
0000B9C6 5212                       		addq.b	#1,(a2)
0000B9C8 45F2 0001                  		lea	1(a2,d0.w),a2
0000B9CC 3009                       		move.w	a1,d0
0000B9CE 0440 D000                  		subi.w	#-$3000,d0
0000B9D2 EC48                       		lsr.w	#6,d0
0000B9D4 0240 007F                  		andi.w	#$7F,d0
0000B9D8 1480                       		move.b	d0,(a2)
0000B9DA 4E75                       		rts	
0000B9DC                            ; End of function sub_B09C
0000B9DC                            
0000B9DC                            ; ===========================================================================
0000B9DC                            
0000B9DC                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B9DC 4A28 0035                  		tst.b	$35(a0)
0000B9E0 6700                       		beq.s	loc_B0C6
0000B9E2 4A28 0001                  		tst.b	1(a0)
0000B9E6 6A00                       		bpl.s	Obj2F_DelFlames
0000B9E8                            
0000B9E8                            loc_B0C6:
0000B9E8 3028 002A                  		move.w	$2A(a0),d0
0000B9EC 0240 FF80                  		andi.w	#$FF80,d0
0000B9F0 3238 F700                  		move.w	($FFFFF700).w,d1
0000B9F4 0441 0080                  		subi.w	#$80,d1
0000B9F8 0241 FF80                  		andi.w	#$FF80,d1
0000B9FC 9041                       		sub.w	d1,d0
0000B9FE 0C40 0280                  		cmpi.w	#$280,d0
0000BA02 6200 0000                  		bhi.w	DeleteObject
0000BA06 4E75                       		rts	
0000BA08                            ; ===========================================================================
0000BA08                            
0000BA08                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000BA08 7400                       		moveq	#0,d2
0000BA0A                            
0000BA0A                            loc_B0E8:
0000BA0A 45E8 0036                  		lea	$36(a0),a2
0000BA0E 1412                       		move.b	(a2),d2
0000BA10 421A                       		clr.b	(a2)+
0000BA12 5302                       		subq.b	#1,d2
0000BA14 6500                       		bcs.s	locret_B116
0000BA16                            
0000BA16                            loc_B0F4:
0000BA16 7000                       		moveq	#0,d0
0000BA18 1012                       		move.b	(a2),d0
0000BA1A 421A                       		clr.b	(a2)+
0000BA1C ED48                       		lsl.w	#6,d0
0000BA1E 0640 D000                  		addi.w	#-$3000,d0
0000BA22 3240                       		movea.w	d0,a1
0000BA24 6100 0000                  		bsr.w	DeleteObject2
0000BA28 51CA FFEC                  		dbf	d2,loc_B0F4
0000BA2C 117C 0000 0035             		move.b	#0,$35(a0)
0000BA32 117C 0000 0034             		move.b	#0,$34(a0)
0000BA38                            
0000BA38                            locret_B116:
0000BA38 4E75                       		rts	
0000BA3A                            ; ===========================================================================
0000BA3A                            ; ---------------------------------------------------------------------------
0000BA3A                            ; Collision data for large moving platforms (MZ)
0000BA3A                            ; ---------------------------------------------------------------------------
0000BA3A                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000BA86                            		even
0000BA86                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000BAB2                            		even
0000BAB2                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000BAFE                            		even
0000BAFE                            ; ===========================================================================
0000BAFE                            ; ---------------------------------------------------------------------------
0000BAFE                            ; Object 35 - fireball that sits on the	floor (MZ)
0000BAFE                            ; (appears when	you walk on sinking platforms)
0000BAFE                            ; ---------------------------------------------------------------------------
0000BAFE                            
0000BAFE                            Obj35:					; XREF: Obj_Index
0000BAFE 7000                       		moveq	#0,d0
0000BB00 1028 0024                  		move.b	$24(a0),d0
0000BB04 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000BB08 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000BB0C                            ; ===========================================================================
0000BB0C 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000BB0E 0000                       		dc.w loc_B238-Obj35_Index
0000BB10 0000                       		dc.w Obj35_Move-Obj35_Index
0000BB12                            ; ===========================================================================
0000BB12                            
0000BB12                            Obj35_Main:				; XREF: Obj35_Index
0000BB12 5428 0024                  		addq.b	#2,$24(a0)
0000BB16 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000BB1E 317C 0345 0002             		move.w	#$345,2(a0)
0000BB24 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BB2A 117C 0004 0001             		move.b	#4,1(a0)
0000BB30 117C 0001 0018             		move.b	#1,$18(a0)
0000BB36 117C 008B 0020             		move.b	#$8B,$20(a0)
0000BB3C 117C 0008 0019             		move.b	#8,$19(a0)
0000BB42 303C 00C8                  		move.w	#$C8,d0
0000BB46 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flame sound
0000BB4C 4A28 0028                  		tst.b	$28(a0)
0000BB50 6700                       		beq.s	loc_B238
0000BB52 5428 0024                  		addq.b	#2,$24(a0)
0000BB56 6000 0000                  		bra.w	Obj35_Move
0000BB5A                            ; ===========================================================================
0000BB5A                            
0000BB5A                            loc_B238:				; XREF: Obj35_Index
0000BB5A 2268 0030                  		movea.l	$30(a0),a1
0000BB5E 3228 0008                  		move.w	8(a0),d1
0000BB62 9268 002A                  		sub.w	$2A(a0),d1
0000BB66 0641 000C                  		addi.w	#$C,d1
0000BB6A 3001                       		move.w	d1,d0
0000BB6C E248                       		lsr.w	#1,d0
0000BB6E 1031 0000                  		move.b	(a1,d0.w),d0
0000BB72 4440                       		neg.w	d0
0000BB74 D068 002C                  		add.w	$2C(a0),d0
0000BB78 3400                       		move.w	d0,d2
0000BB7A D068 003C                  		add.w	$3C(a0),d0
0000BB7E 3140 000C                  		move.w	d0,$C(a0)
0000BB82 0C41 0084                  		cmpi.w	#$84,d1
0000BB86 6400                       		bcc.s	loc_B2B0
0000BB88 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BB90 0C41 0080                  		cmpi.w	#$80,d1
0000BB94 6400                       		bcc.s	loc_B2B0
0000BB96 2028 0008                  		move.l	8(a0),d0
0000BB9A 0680 0008 0000             		addi.l	#$80000,d0
0000BBA0 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BBA6 6600                       		bne.s	loc_B2B0
0000BBA8 6100 0000                  		bsr.w	SingleObjLoad2
0000BBAC 6600                       		bne.s	loc_B2B0
0000BBAE 12BC 0035                  		move.b	#$35,0(a1)
0000BBB2 3368 0008 0008             		move.w	8(a0),8(a1)
0000BBB8 3342 002C                  		move.w	d2,$2C(a1)
0000BBBC 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BBC2 137C 0001 0028             		move.b	#1,$28(a1)
0000BBC8 2468 0038                  		movea.l	$38(a0),a2
0000BBCC 6100 FDF0                  		bsr.w	sub_B09C
0000BBD0                            
0000BBD0                            loc_B2B0:
0000BBD0 6000                       		bra.s	Obj35_Animate
0000BBD2                            ; ===========================================================================
0000BBD2                            
0000BBD2                            Obj35_Move:				; XREF: Obj35_Index
0000BBD2 3028 002C                  		move.w	$2C(a0),d0
0000BBD6 D068 003C                  		add.w	$3C(a0),d0
0000BBDA 3140 000C                  		move.w	d0,$C(a0)
0000BBDE                            
0000BBDE                            Obj35_Animate:				; XREF: loc_B238
0000BBDE 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BBE4 6100 F4AA                  		bsr.w	AnimateSprite
0000BBE8 6000 0000                  		bra.w	DisplaySprite
0000BBEC                            ; ===========================================================================
0000BBEC                            Ani_obj35:
0000BBEC                            	include "_anim\obj35.asm"
0000BBEC                            ; ---------------------------------------------------------------------------
0000BBEC                            ; Animation script - fireball that sits on the	floor (MZ)
0000BBEC                            ; ---------------------------------------------------------------------------
0000BBEC 0000                       		dc.w byte_B2CE-Ani_obj35
0000BBEE 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BBF4                            		even
0000BBF4                            		even
0000BBF4                            
0000BBF4                            ; ---------------------------------------------------------------------------
0000BBF4                            ; Sprite mappings - large moving platforms (MZ)
0000BBF4                            ; ---------------------------------------------------------------------------
0000BBF4                            Map_obj2F:
0000BBF4                            	include "_maps\obj2F.asm"
0000BBF4                            ; ---------------------------------------------------------------------------
0000BBF4                            ; Sprite mappings - large moving platforms (MZ)
0000BBF4                            ; ---------------------------------------------------------------------------
0000BBF4 0000                       		dc.w byte_B2DA-Map_obj2F
0000BBF6 0000                       		dc.w byte_B31C-Map_obj2F
0000BBF8 0000                       		dc.w byte_B34F-Map_obj2F
0000BBFA 0D                         byte_B2DA:	dc.b $D
0000BBFB D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BC00 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BC05 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BC0A D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BC0F F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BC14 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC19 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BC1E D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BC23 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BC28 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BC2D 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BC32 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BC37 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BC3C 0A                         byte_B31C:	dc.b $A
0000BC3D D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BC42 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BC47 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BC4C C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BC51 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BC56 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC5B C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BC60 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BC65 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BC6A E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BC6F 06                         byte_B34F:	dc.b 6
0000BC70 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BC75 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC7A 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BC7F D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BC84 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BC89 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BC8E                            		even
0000BC8E                            		even
0000BC8E                            
0000BC8E                            ; ---------------------------------------------------------------------------
0000BC8E                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BC8E                            ; ---------------------------------------------------------------------------
0000BC8E                            Map_obj14:
0000BC8E                            	include "_maps\obj14.asm"
0000BC8E                            ; --------------------------------------------------------------------------------
0000BC8E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BC8E                            ; --------------------------------------------------------------------------------
0000BC8E                            
0000BC8E                            SME_C6wT7:	
0000BC8E 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BC92 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BC96 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BC9A 01                         SME_C6wT7_C:	dc.b 1	
0000BC9B E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BCA0 01                         SME_C6wT7_12:	dc.b 1	
0000BCA1 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BCA6 02                         SME_C6wT7_18:	dc.b 2	
0000BCA7 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BCAC E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BCB1 01                         SME_C6wT7_23:	dc.b 1	
0000BCB2 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BCB7 01                         SME_C6wT7_29:	dc.b 1	
0000BCB8 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BCBD 01                         SME_C6wT7_2F:	dc.b 1	
0000BCBE F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BCC4 00                         		even
0000BCC4 00                         		even
0000BCC4                            
0000BCC4                            ; ===========================================================================
0000BCC4                            ; ---------------------------------------------------------------------------
0000BCC4                            ; Object 30 - large green glassy blocks	(MZ)
0000BCC4                            ; ---------------------------------------------------------------------------
0000BCC4                            
0000BCC4                            Obj30:					; XREF: Obj_Index
0000BCC4 7000                       		moveq	#0,d0
0000BCC6 1028 0024                  		move.b	$24(a0),d0
0000BCCA 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BCCE 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BCD2 3028 0008                  		move.w	8(a0),d0
0000BCD6 0240 FF80                  		andi.w	#$FF80,d0
0000BCDA 3238 F700                  		move.w	($FFFFF700).w,d1
0000BCDE 0441 0080                  		subi.w	#$80,d1
0000BCE2 0241 FF80                  		andi.w	#$FF80,d1
0000BCE6 9041                       		sub.w	d1,d0
0000BCE8 0C40 0280                  		cmpi.w	#$280,d0
0000BCEC 6200 0000                  		bhi.w	Obj30_Delete
0000BCF0 6000 0000                  		bra.w	DisplaySprite
0000BCF4                            ; ===========================================================================
0000BCF4                            
0000BCF4                            Obj30_Delete:
0000BCF4 6000 0000                  		bra.w	DeleteObject
0000BCF8                            ; ===========================================================================
0000BCF8 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BCFA 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BCFC 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BCFE 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BD00 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BD02                            
0000BD02 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BD05 0400 01                    		dc.b 4,	0, 1
0000BD08 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BD0B 0800 01                    		dc.b 8,	0, 1
0000BD0E                            ; ===========================================================================
0000BD0E                            
0000BD0E                            Obj30_Main:				; XREF: Obj30_Index
0000BD0E 45F9 0000 BD02             		lea	(Obj30_Vars1).l,a2
0000BD14 7201                       		moveq	#1,d1
0000BD16 117C 0048 0016             		move.b	#$48,$16(a0)
0000BD1C 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BD22 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BD24 45F9 0000 BD08             		lea	(Obj30_Vars2).l,a2
0000BD2A 7201                       		moveq	#1,d1
0000BD2C 117C 0038 0016             		move.b	#$38,$16(a0)
0000BD32                            
0000BD32                            loc_B40C:
0000BD32 2248                       		movea.l	a0,a1
0000BD34 6000                       		bra.s	Obj30_Load	; load main object
0000BD36                            ; ===========================================================================
0000BD36                            
0000BD36                            Obj30_Loop:
0000BD36 6100 0000                  		bsr.w	SingleObjLoad2
0000BD3A 6600                       		bne.s	loc_B480
0000BD3C                            
0000BD3C                            Obj30_Load:				; XREF: Obj30_Main
0000BD3C 135A 0024                  		move.b	(a2)+,$24(a1)
0000BD40 12BC 0030                  		move.b	#$30,0(a1)
0000BD44 3368 0008 0008             		move.w	8(a0),8(a1)
0000BD4A 101A                       		move.b	(a2)+,d0
0000BD4C 4880                       		ext.w	d0
0000BD4E D068 000C                  		add.w	$C(a0),d0
0000BD52 3340 000C                  		move.w	d0,$C(a1)
0000BD56 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BD5E 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BD64 137C 0004 0001             		move.b	#4,1(a1)
0000BD6A 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BD70 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BD76 137C 0020 0019             		move.b	#$20,$19(a1)
0000BD7C 137C 0004 0018             		move.b	#4,$18(a1)
0000BD82 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BD86 2348 003C                  		move.l	a0,$3C(a1)
0000BD8A 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BD8E                            
0000BD8E 137C 0010 0019             		move.b	#$10,$19(a1)
0000BD94 137C 0003 0018             		move.b	#3,$18(a1)
0000BD9A 5029 0028                  		addq.b	#8,$28(a1)
0000BD9E 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BDA4                            
0000BDA4                            loc_B480:
0000BDA4 317C 0090 0032             		move.w	#$90,$32(a0)
0000BDAA 08E8 0004 0001             		bset	#4,1(a0)
0000BDB0                            
0000BDB0                            Obj30_Block012:				; XREF: Obj30_Index
0000BDB0 6100 0000                  		bsr.w	Obj30_Types
0000BDB4 323C 002B                  		move.w	#$2B,d1
0000BDB8 343C 0048                  		move.w	#$48,d2
0000BDBC 363C 0049                  		move.w	#$49,d3
0000BDC0 3828 0008                  		move.w	8(a0),d4
0000BDC4 6000 0000                  		bra.w	SolidObject
0000BDC8                            ; ===========================================================================
0000BDC8                            
0000BDC8                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BDC8 2268 003C                  		movea.l	$3C(a0),a1
0000BDCC 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BDD2 6000 0000                  		bra.w	Obj30_Types
0000BDD6                            ; ===========================================================================
0000BDD6                            
0000BDD6                            Obj30_Block34:				; XREF: Obj30_Index
0000BDD6 6100 0000                  		bsr.w	Obj30_Types
0000BDDA 323C 002B                  		move.w	#$2B,d1
0000BDDE 343C 0038                  		move.w	#$38,d2
0000BDE2 363C 0039                  		move.w	#$39,d3
0000BDE6 3828 0008                  		move.w	8(a0),d4
0000BDEA 6000 0000                  		bra.w	SolidObject
0000BDEE                            ; ===========================================================================
0000BDEE                            
0000BDEE                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BDEE 2268 003C                  		movea.l	$3C(a0),a1
0000BDF2 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BDF8 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BDFE 6000 0002                  		bra.w	*+4
0000BE02                            
0000BE02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BE02                            
0000BE02                            
0000BE02                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BE02 7000                       		moveq	#0,d0
0000BE04 1028 0028                  		move.b	$28(a0),d0
0000BE08 0240 0007                  		andi.w	#7,d0
0000BE0C D040                       		add.w	d0,d0
0000BE0E 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BE12 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BE16                            ; End of function Obj30_Types
0000BE16                            
0000BE16                            ; ===========================================================================
0000BE16 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BE18 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BE1A 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BE1C 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BE1E 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BE20                            ; ===========================================================================
0000BE20                            
0000BE20                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BE20 4E75                       		rts	
0000BE22                            ; ===========================================================================
0000BE22                            
0000BE22                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BE22 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE26 323C 0040                  		move.w	#$40,d1
0000BE2A 6000                       		bra.s	loc_B514
0000BE2C                            ; ===========================================================================
0000BE2C                            
0000BE2C                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BE2C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE30 323C 0040                  		move.w	#$40,d1
0000BE34 4440                       		neg.w	d0
0000BE36 D041                       		add.w	d1,d0
0000BE38                            
0000BE38                            loc_B514:				; XREF: Obj30_Type01
0000BE38 0828 0003 0028             		btst	#3,$28(a0)
0000BE3E 6700                       		beq.s	loc_B526
0000BE40 4440                       		neg.w	d0
0000BE42 D041                       		add.w	d1,d0
0000BE44 E208                       		lsr.b	#1,d0
0000BE46 0640 0020                  		addi.w	#$20,d0
0000BE4A                            
0000BE4A                            loc_B526:
0000BE4A 6000 0000                  		bra.w	loc_B5EE
0000BE4E                            ; ===========================================================================
0000BE4E                            
0000BE4E                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BE4E 0828 0003 0028             		btst	#3,$28(a0)
0000BE54 6700                       		beq.s	loc_B53E
0000BE56 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE5A 0440 0010                  		subi.w	#$10,d0
0000BE5E 6000 0000                  		bra.w	loc_B5EE
0000BE62                            ; ===========================================================================
0000BE62                            
0000BE62                            loc_B53E:
0000BE62 0828 0003 0022             		btst	#3,$22(a0)
0000BE68 6600                       		bne.s	loc_B54E
0000BE6A 08A8 0000 0034             		bclr	#0,$34(a0)
0000BE70 6000                       		bra.s	loc_B582
0000BE72                            ; ===========================================================================
0000BE72                            
0000BE72                            loc_B54E:
0000BE72 4A28 0034                  		tst.b	$34(a0)
0000BE76 6600                       		bne.s	loc_B582
0000BE78 117C 0001 0034             		move.b	#1,$34(a0)
0000BE7E 08E8 0000 0035             		bset	#0,$35(a0)
0000BE84 6700                       		beq.s	loc_B582
0000BE86 08E8 0007 0034             		bset	#7,$34(a0)
0000BE8C 317C 0010 0036             		move.w	#$10,$36(a0)
0000BE92 117C 000A 0038             		move.b	#$A,$38(a0)
0000BE98 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BE9E 6600                       		bne.s	loc_B582
0000BEA0 317C 0040 0036             		move.w	#$40,$36(a0)
0000BEA6                            
0000BEA6                            loc_B582:
0000BEA6 4A28 0034                  		tst.b	$34(a0)
0000BEAA 6A00                       		bpl.s	loc_B5AA
0000BEAC 4A28 0038                  		tst.b	$38(a0)
0000BEB0 6700                       		beq.s	loc_B594
0000BEB2 5328 0038                  		subq.b	#1,$38(a0)
0000BEB6 6600                       		bne.s	loc_B5AA
0000BEB8                            
0000BEB8                            loc_B594:
0000BEB8 4A68 0032                  		tst.w	$32(a0)
0000BEBC 6700                       		beq.s	loc_B5A4
0000BEBE 5368 0032                  		subq.w	#1,$32(a0)
0000BEC2 5368 0036                  		subq.w	#1,$36(a0)
0000BEC6 6600                       		bne.s	loc_B5AA
0000BEC8                            
0000BEC8                            loc_B5A4:
0000BEC8 08A8 0007 0034             		bclr	#7,$34(a0)
0000BECE                            
0000BECE                            loc_B5AA:
0000BECE 3028 0032                  		move.w	$32(a0),d0
0000BED2 6000                       		bra.s	loc_B5EE
0000BED4                            ; ===========================================================================
0000BED4                            
0000BED4                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BED4 0828 0003 0028             		btst	#3,$28(a0)
0000BEDA 6700                       		beq.s	Obj30_ChkSwitch
0000BEDC 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BEE0 0440 0010                  		subi.w	#$10,d0
0000BEE4 6000                       		bra.s	loc_B5EE
0000BEE6                            ; ===========================================================================
0000BEE6                            
0000BEE6                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BEE6 4A28 0034                  		tst.b	$34(a0)
0000BEEA 6600                       		bne.s	loc_B5E0
0000BEEC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BEF0 7000                       		moveq	#0,d0
0000BEF2 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BEF6 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BEF8 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BEFC 6700                       		beq.s	loc_B5EA	; if not, branch
0000BEFE 117C 0001 0034             		move.b	#1,$34(a0)
0000BF04                            
0000BF04                            loc_B5E0:
0000BF04 4A68 0032                  		tst.w	$32(a0)
0000BF08 6700                       		beq.s	loc_B5EA
0000BF0A 5568 0032                  		subq.w	#2,$32(a0)
0000BF0E                            
0000BF0E                            loc_B5EA:
0000BF0E 3028 0032                  		move.w	$32(a0),d0
0000BF12                            
0000BF12                            loc_B5EE:
0000BF12 3228 0030                  		move.w	$30(a0),d1
0000BF16 9240                       		sub.w	d0,d1
0000BF18 3141 000C                  		move.w	d1,$C(a0)
0000BF1C 4E75                       		rts	
0000BF1E                            ; ===========================================================================
0000BF1E                            ; ---------------------------------------------------------------------------
0000BF1E                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BF1E                            ; ---------------------------------------------------------------------------
0000BF1E                            Map_obj30:
0000BF1E                            	include "_maps\obj30.asm"
0000BF1E                            ; ---------------------------------------------------------------------------
0000BF1E                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BF1E                            ; ---------------------------------------------------------------------------
0000BF1E 0000                       		dc.w byte_B600-Map_obj30
0000BF20 0000                       		dc.w byte_B63D-Map_obj30
0000BF22 0000                       		dc.w byte_B648-Map_obj30
0000BF24 0C                         byte_B600:	dc.b $C
0000BF25 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BF2A B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BF2F C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BF34 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BF39 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BF3E E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BF43 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BF48 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BF4D 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BF52 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BF57 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BF5C 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BF61 02                         byte_B63D:	dc.b 2
0000BF62 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BF67 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BF6C 0A                         byte_B648:	dc.b $A
0000BF6D C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BF72 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BF77 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BF7C D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BF81 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BF86 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BF8B 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BF90 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BF95 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BF9A 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BFA0 00                         		even
0000BFA0 00                         		even
0000BFA0                            
0000BFA0                            ; ===========================================================================
0000BFA0                            ; ---------------------------------------------------------------------------
0000BFA0                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BFA0                            ; ---------------------------------------------------------------------------
0000BFA0                            
0000BFA0                            Obj31:					; XREF: Obj_Index
0000BFA0 7000                       		moveq	#0,d0
0000BFA2 1028 0024                  		move.b	$24(a0),d0
0000BFA6 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BFAA 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BFAE                            ; ===========================================================================
0000BFAE 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BFB0 0000                       		dc.w loc_B798-Obj31_Index
0000BFB2 0000                       		dc.w loc_B7FE-Obj31_Index
0000BFB4 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BFB6 0000                       		dc.w loc_B7E2-Obj31_Index
0000BFB8                            
0000BFB8 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BFBA 0100                       		dc.b 1,	0
0000BFBC                            
0000BFBC 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BFBF 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BFC2 08CC 03                    		dc.b 8,	$CC, 3
0000BFC5 06F0 02                    		dc.b 6,	$F0, 2
0000BFC8                            
0000BFC8 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BFCC 5000 7800                  		dc.w $5000, $7800
0000BFD0 3800 5800                  		dc.w $3800, $5800
0000BFD4 B800                       		dc.w $B800
0000BFD6                            ; ===========================================================================
0000BFD6                            
0000BFD6                            Obj31_Main:				; XREF: Obj31_Index
0000BFD6 7000                       		moveq	#0,d0
0000BFD8 1028 0028                  		move.b	$28(a0),d0
0000BFDC 6A00                       		bpl.s	loc_B6CE
0000BFDE 0240 007F                  		andi.w	#$7F,d0
0000BFE2 D040                       		add.w	d0,d0
0000BFE4 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BFE8 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BFEC 101A                       		move.b	(a2)+,d0
0000BFEE 1140 0028                  		move.b	d0,$28(a0)
0000BFF2                            
0000BFF2                            loc_B6CE:
0000BFF2 0200 000F                  		andi.b	#$F,d0
0000BFF6 D040                       		add.w	d0,d0
0000BFF8 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BFFC 4A40                       		tst.w	d0
0000BFFE 6600                       		bne.s	loc_B6E0
0000C000 3142 0032                  		move.w	d2,$32(a0)
0000C004                            
0000C004                            loc_B6E0:
0000C004 45F9 0000 BFBC             		lea	(Obj31_Var).l,a2
0000C00A 2248                       		movea.l	a0,a1
0000C00C 7203                       		moveq	#3,d1
0000C00E 6000                       		bra.s	Obj31_MakeStomper
0000C010                            ; ===========================================================================
0000C010                            
0000C010                            Obj31_Loop:
0000C010 6100 0000                  		bsr.w	SingleObjLoad2
0000C014 6600 0000                  		bne.w	Obj31_SetSize
0000C018                            
0000C018                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C018 135A 0024                  		move.b	(a2)+,$24(a1)
0000C01C 12BC 0031                  		move.b	#$31,0(a1)
0000C020 3368 0008 0008             		move.w	8(a0),8(a1)
0000C026 101A                       		move.b	(a2)+,d0
0000C028 4880                       		ext.w	d0
0000C02A D068 000C                  		add.w	$C(a0),d0
0000C02E 3340 000C                  		move.w	d0,$C(a1)
0000C032 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C03A 337C 0300 0002             		move.w	#$300,2(a1)
0000C040 137C 0004 0001             		move.b	#4,1(a1)
0000C046 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C04C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C052 137C 0010 0019             		move.b	#$10,$19(a1)
0000C058 3342 0034                  		move.w	d2,$34(a1)
0000C05C 137C 0004 0018             		move.b	#4,$18(a1)
0000C062 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C066 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C06C 6600                       		bne.s	loc_B76A
0000C06E 5341                       		subq.w	#1,d1
0000C070 1028 0028                  		move.b	$28(a0),d0
0000C074 0240 00F0                  		andi.w	#$F0,d0
0000C078 0C40 0020                  		cmpi.w	#$20,d0
0000C07C 679A                       		beq.s	Obj31_MakeStomper
0000C07E 137C 0038 0019             		move.b	#$38,$19(a1)
0000C084 137C 0090 0020             		move.b	#$90,$20(a1)
0000C08A 5241                       		addq.w	#1,d1
0000C08C                            
0000C08C                            loc_B76A:
0000C08C 2348 003C                  		move.l	a0,$3C(a1)
0000C090 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C094                            
0000C094 137C 0003 0018             		move.b	#3,$18(a1)
0000C09A                            
0000C09A                            Obj31_SetSize:
0000C09A 7000                       		moveq	#0,d0
0000C09C 1028 0028                  		move.b	$28(a0),d0
0000C0A0 E648                       		lsr.w	#3,d0
0000C0A2 0200 000E                  		andi.b	#$E,d0
0000C0A6 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C0AA 115A 0019                  		move.b	(a2)+,$19(a0)
0000C0AE 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C0B2 6000                       		bra.s	loc_B798
0000C0B4                            ; ===========================================================================
0000C0B4 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C0B6 3009                       		dc.b $30, 9
0000C0B8 100A                       		dc.b $10, $A
0000C0BA                            ; ===========================================================================
0000C0BA                            
0000C0BA                            loc_B798:				; XREF: Obj31_Index
0000C0BA 6100 0000                  		bsr.w	Obj31_Types
0000C0BE 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C0C4 7200                       		moveq	#0,d1
0000C0C6 1228 0019                  		move.b	$19(a0),d1
0000C0CA 0641 000B                  		addi.w	#$B,d1
0000C0CE 343C 000C                  		move.w	#$C,d2
0000C0D2 363C 000D                  		move.w	#$D,d3
0000C0D6 3828 0008                  		move.w	8(a0),d4
0000C0DA 6100 0000                  		bsr.w	SolidObject
0000C0DE 0828 0003 0022             		btst	#3,$22(a0)
0000C0E4 6700                       		beq.s	Obj31_Display
0000C0E6 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C0EC 6400                       		bcc.s	Obj31_Display
0000C0EE 2448                       		movea.l	a0,a2
0000C0F0 41F8 D000                  		lea	($FFFFD000).w,a0
0000C0F4 4EB9 0000 0000             		jsr	KillSonic
0000C0FA 204A                       		movea.l	a2,a0
0000C0FC                            
0000C0FC                            Obj31_Display:
0000C0FC 6100 0000                  		bsr.w	DisplaySprite
0000C100 6000 0000                  		bra.w	Obj31_ChkDel
0000C104                            ; ===========================================================================
0000C104                            
0000C104                            loc_B7E2:				; XREF: Obj31_Index
0000C104 117C 0080 0016             		move.b	#$80,$16(a0)
0000C10A 08E8 0004 0001             		bset	#4,1(a0)
0000C110 2268 003C                  		movea.l	$3C(a0),a1
0000C114 1029 0032                  		move.b	$32(a1),d0
0000C118 EA08                       		lsr.b	#5,d0
0000C11A 5600                       		addq.b	#3,d0
0000C11C 1140 001A                  		move.b	d0,$1A(a0)
0000C120                            
0000C120                            loc_B7FE:				; XREF: Obj31_Index
0000C120 2268 003C                  		movea.l	$3C(a0),a1
0000C124 7000                       		moveq	#0,d0
0000C126 1029 0032                  		move.b	$32(a1),d0
0000C12A D068 0030                  		add.w	$30(a0),d0
0000C12E 3140 000C                  		move.w	d0,$C(a0)
0000C132                            
0000C132                            Obj31_Display2:				; XREF: Obj31_Index
0000C132 6100 0000                  		bsr.w	DisplaySprite
0000C136                            
0000C136                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C136 3028 0008                  		move.w	8(a0),d0
0000C13A 0240 FF80                  		andi.w	#$FF80,d0
0000C13E 3238 F700                  		move.w	($FFFFF700).w,d1
0000C142 0441 0080                  		subi.w	#$80,d1
0000C146 0241 FF80                  		andi.w	#$FF80,d1
0000C14A 9041                       		sub.w	d1,d0
0000C14C 0C40 0280                  		cmpi.w	#$280,d0
0000C150 6200 0000                  		bhi.w	DeleteObject
0000C154 4E75                       		rts	
0000C156                            ; ===========================================================================
0000C156                            
0000C156                            Obj31_Types:				; XREF: loc_B798
0000C156 1028 0028                  		move.b	$28(a0),d0
0000C15A 0240 000F                  		andi.w	#$F,d0
0000C15E D040                       		add.w	d0,d0
0000C160 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C164 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C168                            ; ===========================================================================
0000C168 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C16A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C16C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C16E 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C170 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C172 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C174 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C176                            ; ===========================================================================
0000C176                            
0000C176                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C176 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C17A 7000                       		moveq	#0,d0
0000C17C 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C180 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C184 6700                       		beq.s	loc_B8A8	; if not, branch
0000C186 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C18A 6A00                       		bpl.s	loc_B872
0000C18C 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C192 6700                       		beq.s	loc_B8A0
0000C194                            
0000C194                            loc_B872:
0000C194 4A68 0032                  		tst.w	$32(a0)
0000C198 6700                       		beq.s	loc_B8A0
0000C19A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C19E 0200 000F                  		andi.b	#$F,d0
0000C1A2 6600                       		bne.s	loc_B892
0000C1A4 4A28 0001                  		tst.b	1(a0)
0000C1A8 6A00                       		bpl.s	loc_B892
0000C1AA 303C 00C7                  		move.w	#$C7,d0
0000C1AE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C1B4                            
0000C1B4                            loc_B892:
0000C1B4 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C1BA 6400                       		bcc.s	Obj31_Restart
0000C1BC 317C 0000 0032             		move.w	#0,$32(a0)
0000C1C2                            
0000C1C2                            loc_B8A0:
0000C1C2 317C 0000 0012             		move.w	#0,$12(a0)
0000C1C8 6000                       		bra.s	Obj31_Restart
0000C1CA                            ; ===========================================================================
0000C1CA                            
0000C1CA                            loc_B8A8:				; XREF: Obj31_Type00
0000C1CA 3228 0034                  		move.w	$34(a0),d1
0000C1CE B268 0032                  		cmp.w	$32(a0),d1
0000C1D2 6700                       		beq.s	Obj31_Restart
0000C1D4 3028 0012                  		move.w	$12(a0),d0
0000C1D8 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C1DE D168 0032                  		add.w	d0,$32(a0)
0000C1E2 B268 0032                  		cmp.w	$32(a0),d1
0000C1E6 6200                       		bhi.s	Obj31_Restart
0000C1E8 3141 0032                  		move.w	d1,$32(a0)
0000C1EC 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C1F2 4A28 0001                  		tst.b	1(a0)
0000C1F6 6A00                       		bpl.s	Obj31_Restart
0000C1F8 303C 00BD                  		move.w	#$BD,d0
0000C1FC 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C202                            
0000C202                            Obj31_Restart:
0000C202 7000                       		moveq	#0,d0
0000C204 1028 0032                  		move.b	$32(a0),d0
0000C208 D068 0030                  		add.w	$30(a0),d0
0000C20C 3140 000C                  		move.w	d0,$C(a0)
0000C210 4E75                       		rts	
0000C212                            ; ===========================================================================
0000C212                            
0000C212                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C212 4A68 0036                  		tst.w	$36(a0)
0000C216 6700                       		beq.s	loc_B938
0000C218 4A68 0038                  		tst.w	$38(a0)
0000C21C 6700                       		beq.s	loc_B902
0000C21E 5368 0038                  		subq.w	#1,$38(a0)
0000C222 6000                       		bra.s	loc_B97C
0000C224                            ; ===========================================================================
0000C224                            
0000C224                            loc_B902:
0000C224 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C228 0200 000F                  		andi.b	#$F,d0
0000C22C 6600                       		bne.s	loc_B91C
0000C22E 4A28 0001                  		tst.b	1(a0)
0000C232 6A00                       		bpl.s	loc_B91C
0000C234 303C 00C7                  		move.w	#$C7,d0
0000C238 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C23E                            
0000C23E                            loc_B91C:
0000C23E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C244 6400                       		bcc.s	loc_B97C
0000C246 317C 0000 0032             		move.w	#0,$32(a0)
0000C24C 317C 0000 0012             		move.w	#0,$12(a0)
0000C252 317C 0000 0036             		move.w	#0,$36(a0)
0000C258 6000                       		bra.s	loc_B97C
0000C25A                            ; ===========================================================================
0000C25A                            
0000C25A                            loc_B938:				; XREF: Obj31_Type01
0000C25A 3228 0034                  		move.w	$34(a0),d1
0000C25E B268 0032                  		cmp.w	$32(a0),d1
0000C262 6700                       		beq.s	loc_B97C
0000C264 3028 0012                  		move.w	$12(a0),d0
0000C268 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C26E D168 0032                  		add.w	d0,$32(a0)
0000C272 B268 0032                  		cmp.w	$32(a0),d1
0000C276 6200                       		bhi.s	loc_B97C
0000C278 3141 0032                  		move.w	d1,$32(a0)
0000C27C 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C282 317C 0001 0036             		move.w	#1,$36(a0)
0000C288 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C28E 4A28 0001                  		tst.b	1(a0)
0000C292 6A00                       		bpl.s	loc_B97C
0000C294 303C 00BD                  		move.w	#$BD,d0
0000C298 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C29E                            
0000C29E                            loc_B97C:
0000C29E 6000 FF62                  		bra.w	Obj31_Restart
0000C2A2                            ; ===========================================================================
0000C2A2                            
0000C2A2                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C2A2 3038 D008                  		move.w	($FFFFD008).w,d0
0000C2A6 9068 0008                  		sub.w	8(a0),d0
0000C2AA 6400                       		bcc.s	loc_B98C
0000C2AC 4440                       		neg.w	d0
0000C2AE                            
0000C2AE                            loc_B98C:
0000C2AE 0C40 0090                  		cmpi.w	#$90,d0
0000C2B2 6400                       		bcc.s	loc_B996
0000C2B4 5228 0028                  		addq.b	#1,$28(a0)
0000C2B8                            
0000C2B8                            loc_B996:
0000C2B8 6000 FF48                  		bra.w	Obj31_Restart
0000C2BC                            ; ===========================================================================
0000C2BC                            ; ---------------------------------------------------------------------------
0000C2BC                            ; Object 45 - spiked metal block from beta version (MZ)
0000C2BC                            ; ---------------------------------------------------------------------------
0000C2BC                            
0000C2BC                            Obj45:					; XREF: Obj_Index
0000C2BC 7000                       		moveq	#0,d0
0000C2BE 1028 0024                  		move.b	$24(a0),d0
0000C2C2 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C2C6 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C2CA                            ; ===========================================================================
0000C2CA 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C2CC 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C2CE 0000                       		dc.w loc_BA8E-Obj45_Index
0000C2D0 0000                       		dc.w Obj45_Display-Obj45_Index
0000C2D2 0000                       		dc.w loc_BA7A-Obj45_Index
0000C2D4                            
0000C2D4 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C2D7 04E4 01                    		dc.b	4, $E4,	  1
0000C2DA 0834 03                    		dc.b	8, $34,	  3
0000C2DD 0628 02                    		dc.b	6, $28,	  2
0000C2E0                            
0000C2E0 3800                       word_B9BE:	dc.w $3800
0000C2E2 A000                       		dc.w -$6000
0000C2E4 5000                       		dc.w $5000
0000C2E6                            ; ===========================================================================
0000C2E6                            
0000C2E6                            Obj45_Main:				; XREF: Obj45_Index
0000C2E6 7000                       		moveq	#0,d0
0000C2E8 1028 0028                  		move.b	$28(a0),d0
0000C2EC D040                       		add.w	d0,d0
0000C2EE 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C2F2 45F9 0000 C2D4             		lea	(Obj45_Var).l,a2
0000C2F8 2248                       		movea.l	a0,a1
0000C2FA 7203                       		moveq	#3,d1
0000C2FC 6000                       		bra.s	Obj45_Load
0000C2FE                            ; ===========================================================================
0000C2FE                            
0000C2FE                            Obj45_Loop:
0000C2FE 6100 0000                  		bsr.w	SingleObjLoad2
0000C302 6600                       		bne.s	loc_BA52
0000C304                            
0000C304                            Obj45_Load:				; XREF: Obj45_Main
0000C304 135A 0024                  		move.b	(a2)+,$24(a1)
0000C308 12BC 0045                  		move.b	#$45,0(a1)
0000C30C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C312 101A                       		move.b	(a2)+,d0
0000C314 4880                       		ext.w	d0
0000C316 D068 0008                  		add.w	8(a0),d0
0000C31A 3340 0008                  		move.w	d0,8(a1)
0000C31E 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C326 337C 0300 0002             		move.w	#$300,2(a1)
0000C32C 137C 0004 0001             		move.b	#4,1(a1)
0000C332 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C338 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C33E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C344 137C 0020 0019             		move.b	#$20,$19(a1)
0000C34A 3342 0034                  		move.w	d2,$34(a1)
0000C34E 137C 0004 0018             		move.b	#4,$18(a1)
0000C354 0C12 0001                  		cmpi.b	#1,(a2)
0000C358 6600                       		bne.s	loc_BA40
0000C35A 137C 0091 0020             		move.b	#$91,$20(a1)
0000C360                            
0000C360                            loc_BA40:
0000C360 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C364 2348 003C                  		move.l	a0,$3C(a1)
0000C368 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C36C                            
0000C36C 137C 0003 0018             		move.b	#3,$18(a1)
0000C372                            
0000C372                            loc_BA52:
0000C372 117C 0010 0019             		move.b	#$10,$19(a0)
0000C378                            
0000C378                            Obj45_Solid:				; XREF: Obj45_Index
0000C378 3F28 0008                  		move.w	8(a0),-(sp)
0000C37C 6100 0000                  		bsr.w	Obj45_Move
0000C380 323C 0017                  		move.w	#$17,d1
0000C384 343C 0020                  		move.w	#$20,d2
0000C388 363C 0020                  		move.w	#$20,d3
0000C38C 381F                       		move.w	(sp)+,d4
0000C38E 6100 0000                  		bsr.w	SolidObject
0000C392 6100 0000                  		bsr.w	DisplaySprite
0000C396 6000 0000                  		bra.w	Obj45_ChkDel
0000C39A                            ; ===========================================================================
0000C39A                            
0000C39A                            loc_BA7A:				; XREF: Obj45_Index
0000C39A 2268 003C                  		movea.l	$3C(a0),a1
0000C39E 1029 0032                  		move.b	$32(a1),d0
0000C3A2 0600 0010                  		addi.b	#$10,d0
0000C3A6 EA08                       		lsr.b	#5,d0
0000C3A8 5600                       		addq.b	#3,d0
0000C3AA 1140 001A                  		move.b	d0,$1A(a0)
0000C3AE                            
0000C3AE                            loc_BA8E:				; XREF: Obj45_Index
0000C3AE 2268 003C                  		movea.l	$3C(a0),a1
0000C3B2 7000                       		moveq	#0,d0
0000C3B4 1029 0032                  		move.b	$32(a1),d0
0000C3B8 4440                       		neg.w	d0
0000C3BA D068 0030                  		add.w	$30(a0),d0
0000C3BE 3140 0008                  		move.w	d0,8(a0)
0000C3C2                            
0000C3C2                            Obj45_Display:				; XREF: Obj45_Index
0000C3C2 6100 0000                  		bsr.w	DisplaySprite
0000C3C6                            
0000C3C6                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C3C6 3028 003A                  		move.w	$3A(a0),d0
0000C3CA 0240 FF80                  		andi.w	#$FF80,d0
0000C3CE 3238 F700                  		move.w	($FFFFF700).w,d1
0000C3D2 0441 0080                  		subi.w	#$80,d1
0000C3D6 0241 FF80                  		andi.w	#$FF80,d1
0000C3DA 9041                       		sub.w	d1,d0
0000C3DC 0C40 0280                  		cmpi.w	#$280,d0
0000C3E0 6200 0000                  		bhi.w	DeleteObject
0000C3E4 4E75                       		rts	
0000C3E6                            
0000C3E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C3E6                            
0000C3E6                            
0000C3E6                            Obj45_Move:				; XREF: Obj45_Solid
0000C3E6 7000                       		moveq	#0,d0
0000C3E8 1028 0028                  		move.b	$28(a0),d0
0000C3EC D040                       		add.w	d0,d0
0000C3EE 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C3F2 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C3F6                            ; End of function Obj45_Move
0000C3F6                            
0000C3F6                            ; ===========================================================================
0000C3F6 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C3F8 0000                       		dc.w loc_BADA-off_BAD6
0000C3FA                            ; ===========================================================================
0000C3FA                            
0000C3FA                            loc_BADA:				; XREF: off_BAD6
0000C3FA 4A68 0036                  		tst.w	$36(a0)
0000C3FE 6700                       		beq.s	loc_BB08
0000C400 4A68 0038                  		tst.w	$38(a0)
0000C404 6700                       		beq.s	loc_BAEC
0000C406 5368 0038                  		subq.w	#1,$38(a0)
0000C40A 6000                       		bra.s	loc_BB3C
0000C40C                            ; ===========================================================================
0000C40C                            
0000C40C                            loc_BAEC:
0000C40C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C412 6400                       		bcc.s	loc_BB3C
0000C414 317C 0000 0032             		move.w	#0,$32(a0)
0000C41A 317C 0000 0010             		move.w	#0,$10(a0)
0000C420 317C 0000 0036             		move.w	#0,$36(a0)
0000C426 6000                       		bra.s	loc_BB3C
0000C428                            ; ===========================================================================
0000C428                            
0000C428                            loc_BB08:				; XREF: loc_BADA
0000C428 3228 0034                  		move.w	$34(a0),d1
0000C42C B268 0032                  		cmp.w	$32(a0),d1
0000C430 6700                       		beq.s	loc_BB3C
0000C432 3028 0010                  		move.w	$10(a0),d0
0000C436 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C43C D168 0032                  		add.w	d0,$32(a0)
0000C440 B268 0032                  		cmp.w	$32(a0),d1
0000C444 6200                       		bhi.s	loc_BB3C
0000C446 3141 0032                  		move.w	d1,$32(a0)
0000C44A 317C 0000 0010             		move.w	#0,$10(a0)
0000C450 317C 0001 0036             		move.w	#1,$36(a0)
0000C456 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C45C                            
0000C45C                            loc_BB3C:
0000C45C 7000                       		moveq	#0,d0
0000C45E 1028 0032                  		move.b	$32(a0),d0
0000C462 4440                       		neg.w	d0
0000C464 D068 0030                  		add.w	$30(a0),d0
0000C468 3140 0008                  		move.w	d0,8(a0)
0000C46C 4E75                       		rts	
0000C46E                            ; ===========================================================================
0000C46E                            ; ---------------------------------------------------------------------------
0000C46E                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C46E                            ; ---------------------------------------------------------------------------
0000C46E                            Map_obj31:
0000C46E                            	include "_maps\obj31.asm"
0000C46E                            ; ---------------------------------------------------------------------------
0000C46E                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C46E                            ; ---------------------------------------------------------------------------
0000C46E 0000                       		dc.w byte_BB64-Map_obj31
0000C470 0000                       		dc.w byte_BB7E-Map_obj31
0000C472 0000                       		dc.w byte_BB98-Map_obj31
0000C474 0000                       		dc.w byte_BB9E-Map_obj31
0000C476 0000                       		dc.w byte_BBA9-Map_obj31
0000C478 0000                       		dc.w byte_BBBE-Map_obj31
0000C47A 0000                       		dc.w byte_BBDD-Map_obj31
0000C47C 0000                       		dc.w byte_BC06-Map_obj31
0000C47E 0000                       		dc.w byte_BC06-Map_obj31
0000C480 0000                       		dc.w byte_BC39-Map_obj31
0000C482 0000                       		dc.w byte_BC53-Map_obj31
0000C484 05                         byte_BB64:	dc.b 5
0000C485 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C48A F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C48F EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C494 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C499 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C49E 05                         byte_BB7E:	dc.b 5
0000C49F F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C4A4 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C4A9 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C4AE F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C4B3 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C4B8 01                         byte_BB98:	dc.b 1
0000C4B9 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C4BE 02                         byte_BB9E:	dc.b 2
0000C4BF 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4C4 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4C9 04                         byte_BBA9:	dc.b 4
0000C4CA E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C4CF F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C4D4 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4D9 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4DE 06                         byte_BBBE:	dc.b 6
0000C4DF C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C4E4 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C4E9 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C4EE F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C4F3 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4F8 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4FD 08                         byte_BBDD:	dc.b 8
0000C4FE A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C503 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C508 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C50D D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C512 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C517 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C51C 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C521 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C526 0A                         byte_BC06:	dc.b $A
0000C527 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C52C 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C531 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C536 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C53B C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C540 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C545 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C54A F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C54F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C554 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C559 05                         byte_BC39:	dc.b 5
0000C55A F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C55F F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C564 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C569 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C56E EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C573 01                         byte_BC53:	dc.b 1
0000C574 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C57A 00                         		even
0000C57A 00                         		even
0000C57A                            
0000C57A                            ; ---------------------------------------------------------------------------
0000C57A                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C57A                            ; ---------------------------------------------------------------------------
0000C57A                            Map_obj45:
0000C57A                            	include "_maps\obj45.asm"
0000C57A                            ; ---------------------------------------------------------------------------
0000C57A                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C57A                            ; ---------------------------------------------------------------------------
0000C57A 0000                       		dc.w byte_BC6C-Map_obj45
0000C57C 0000                       		dc.w byte_BC7C-Map_obj45
0000C57E 0000                       		dc.w byte_BC8C-Map_obj45
0000C580 0000                       		dc.w byte_BC92-Map_obj45
0000C582 0000                       		dc.w byte_BC9D-Map_obj45
0000C584 0000                       		dc.w byte_BCB2-Map_obj45
0000C586 0000                       		dc.w byte_BCD1-Map_obj45
0000C588 0000                       		dc.w byte_BCFA-Map_obj45
0000C58A 0000                       		dc.w byte_BCFA-Map_obj45
0000C58C 03                         byte_BC6C:	dc.b 3
0000C58D E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C592 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C597 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C59C 03                         byte_BC7C:	dc.b 3
0000C59D E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C5A2 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C5A7 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C5AC 01                         byte_BC8C:	dc.b 1
0000C5AD F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C5B2 02                         byte_BC92:	dc.b 2
0000C5B3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5B8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5BD 04                         byte_BC9D:	dc.b 4
0000C5BE F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5C3 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5C8 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5CD F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5D2 06                         byte_BCB2:	dc.b 6
0000C5D3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5D8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5DD F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5E2 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5E7 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C5EC F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C5F1 08                         byte_BCD1:	dc.b 8
0000C5F2 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5F7 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5FC F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C601 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C606 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C60B F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C610 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C615 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C61A 08                         byte_BCFA:	dc.b 8
0000C61B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C620 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C625 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C62A F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C62F F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C634 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C639 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C63E F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C643 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C648 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C64E 00                         		even
0000C64E 00                         		even
0000C64E                            
0000C64E                            ; ===========================================================================
0000C64E                            ; ---------------------------------------------------------------------------
0000C64E                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C64E                            ; ---------------------------------------------------------------------------
0000C64E                            
0000C64E                            Obj32:					; XREF: Obj_Index
0000C64E 7000                       		moveq	#0,d0
0000C650 1028 0024                  		move.b	$24(a0),d0
0000C654 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C658 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C65C                            ; ===========================================================================
0000C65C 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C65E 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C660                            ; ===========================================================================
0000C660                            
0000C660                            Obj32_Main:				; XREF: Obj32_Index
0000C660 5428 0024                  		addq.b	#2,$24(a0)
0000C664 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C66C 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C672 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C678 6700                       		beq.s	loc_BD60
0000C67A 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C680                            
0000C680                            loc_BD60:
0000C680 117C 0004 0001             		move.b	#4,1(a0)
0000C686 117C 0010 0019             		move.b	#$10,$19(a0)
0000C68C 117C 0004 0018             		move.b	#4,$18(a0)
0000C692 5668 000C                  		addq.w	#3,$C(a0)
0000C696                            
0000C696                            Obj32_Pressed:				; XREF: Obj32_Index
0000C696 4A28 0001                  		tst.b	1(a0)
0000C69A 6A00                       		bpl.s	Obj32_Display
0000C69C 323C 001B                  		move.w	#$1B,d1
0000C6A0 343C 0005                  		move.w	#5,d2
0000C6A4 363C 0005                  		move.w	#5,d3
0000C6A8 3828 0008                  		move.w	8(a0),d4
0000C6AC 6100 0000                  		bsr.w	SolidObject
0000C6B0 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C6B6 1028 0028                  		move.b	$28(a0),d0
0000C6BA 0240 000F                  		andi.w	#$F,d0
0000C6BE 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C6C2 47F3 0000                  		lea	(a3,d0.w),a3
0000C6C6 7600                       		moveq	#0,d3
0000C6C8 0828 0006 0028             		btst	#6,$28(a0)
0000C6CE 6700                       		beq.s	loc_BDB2
0000C6D0 7607                       		moveq	#7,d3
0000C6D2                            
0000C6D2                            loc_BDB2:
0000C6D2 4A28 0028                  		tst.b	$28(a0)
0000C6D6 6A00                       		bpl.s	loc_BDBE
0000C6D8 6100 0000                  		bsr.w	Obj32_MZBlock
0000C6DC 6600                       		bne.s	loc_BDC8
0000C6DE                            
0000C6DE                            loc_BDBE:
0000C6DE 4A28 0025                  		tst.b	$25(a0)
0000C6E2 6600                       		bne.s	loc_BDC8
0000C6E4 0793                       		bclr	d3,(a3)
0000C6E6 6000                       		bra.s	loc_BDDE
0000C6E8                            ; ===========================================================================
0000C6E8                            
0000C6E8                            loc_BDC8:
0000C6E8 4A13                       		tst.b	(a3)
0000C6EA 6600                       		bne.s	loc_BDD6
0000C6EC 303C 00CD                  		move.w	#$CD,d0
0000C6F0 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play switch sound
0000C6F6                            
0000C6F6                            loc_BDD6:
0000C6F6 07D3                       		bset	d3,(a3)
0000C6F8 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C6FE                            
0000C6FE                            loc_BDDE:
0000C6FE 0828 0005 0028             		btst	#5,$28(a0)
0000C704 6700                       		beq.s	Obj32_Display
0000C706 5328 001E                  		subq.b	#1,$1E(a0)
0000C70A 6A00                       		bpl.s	Obj32_Display
0000C70C 117C 0007 001E             		move.b	#7,$1E(a0)
0000C712 0868 0001 001A             		bchg	#1,$1A(a0)
0000C718                            
0000C718                            Obj32_Display:
0000C718 6100 0000                  		bsr.w	DisplaySprite
0000C71C 3028 0008                  		move.w	8(a0),d0
0000C720 0240 FF80                  		andi.w	#$FF80,d0
0000C724 3238 F700                  		move.w	($FFFFF700).w,d1
0000C728 0441 0080                  		subi.w	#$80,d1
0000C72C 0241 FF80                  		andi.w	#$FF80,d1
0000C730 9041                       		sub.w	d1,d0
0000C732 0C40 0280                  		cmpi.w	#$280,d0
0000C736 6200 0000                  		bhi.w	Obj32_Delete
0000C73A 4E75                       		rts	
0000C73C                            ; ===========================================================================
0000C73C                            
0000C73C                            Obj32_Delete:
0000C73C 6100 0000                  		bsr.w	DeleteObject
0000C740 4E75                       		rts	
0000C742                            
0000C742                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C742                            
0000C742                            
0000C742                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C742 3F03                       		move.w	d3,-(sp)
0000C744 3428 0008                  		move.w	8(a0),d2
0000C748 3628 000C                  		move.w	$C(a0),d3
0000C74C 0442 0010                  		subi.w	#$10,d2
0000C750 5143                       		subq.w	#8,d3
0000C752 383C 0020                  		move.w	#$20,d4
0000C756 3A3C 0010                  		move.w	#$10,d5
0000C75A 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C75E 3C3C 005F                  		move.w	#$5F,d6
0000C762                            
0000C762                            Obj32_MZLoop:
0000C762 4A29 0001                  		tst.b	1(a1)
0000C766 6A00                       		bpl.s	loc_BE4E
0000C768 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C76C 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C76E                            
0000C76E                            loc_BE4E:
0000C76E 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C772 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C776                            
0000C776 361F                       		move.w	(sp)+,d3
0000C778 7000                       		moveq	#0,d0
0000C77A                            
0000C77A                            locret_BE5A:
0000C77A 4E75                       		rts	
0000C77C                            ; ===========================================================================
0000C77C 1010                       Obj32_MZData:	dc.b $10, $10
0000C77E                            ; ===========================================================================
0000C77E                            
0000C77E                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C77E 7001                       		moveq	#1,d0
0000C780 0240 003F                  		andi.w	#$3F,d0
0000C784 D040                       		add.w	d0,d0
0000C786 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C78A 121A                       		move.b	(a2)+,d1
0000C78C 4881                       		ext.w	d1
0000C78E 3029 0008                  		move.w	8(a1),d0
0000C792 9041                       		sub.w	d1,d0
0000C794 9042                       		sub.w	d2,d0
0000C796 6400                       		bcc.s	loc_BE80
0000C798 D241                       		add.w	d1,d1
0000C79A D041                       		add.w	d1,d0
0000C79C 6500                       		bcs.s	loc_BE84
0000C79E 60CE                       		bra.s	loc_BE4E
0000C7A0                            ; ===========================================================================
0000C7A0                            
0000C7A0                            loc_BE80:
0000C7A0 B044                       		cmp.w	d4,d0
0000C7A2 62CA                       		bhi.s	loc_BE4E
0000C7A4                            
0000C7A4                            loc_BE84:
0000C7A4 121A                       		move.b	(a2)+,d1
0000C7A6 4881                       		ext.w	d1
0000C7A8 3029 000C                  		move.w	$C(a1),d0
0000C7AC 9041                       		sub.w	d1,d0
0000C7AE 9043                       		sub.w	d3,d0
0000C7B0 6400                       		bcc.s	loc_BE9A
0000C7B2 D241                       		add.w	d1,d1
0000C7B4 D041                       		add.w	d1,d0
0000C7B6 6500                       		bcs.s	loc_BE9E
0000C7B8 60B4                       		bra.s	loc_BE4E
0000C7BA                            ; ===========================================================================
0000C7BA                            
0000C7BA                            loc_BE9A:
0000C7BA B045                       		cmp.w	d5,d0
0000C7BC 62B0                       		bhi.s	loc_BE4E
0000C7BE                            
0000C7BE                            loc_BE9E:
0000C7BE 361F                       		move.w	(sp)+,d3
0000C7C0 7001                       		moveq	#1,d0
0000C7C2 4E75                       		rts	
0000C7C4                            ; End of function Obj32_MZBlock
0000C7C4                            
0000C7C4                            ; ===========================================================================
0000C7C4                            ; ---------------------------------------------------------------------------
0000C7C4                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C7C4                            ; ---------------------------------------------------------------------------
0000C7C4                            Map_obj32:
0000C7C4                            	include "_maps\obj32.asm"
0000C7C4                            ; ---------------------------------------------------------------------------
0000C7C4                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C7C4                            ; ---------------------------------------------------------------------------
0000C7C4 0000                       		dc.w byte_BEAC-Map_obj32
0000C7C6 0000                       		dc.w byte_BEB7-Map_obj32
0000C7C8 0000                       		dc.w byte_BEC2-Map_obj32
0000C7CA 0000                       		dc.w byte_BEB7-Map_obj32
0000C7CC 02                         byte_BEAC:	dc.b 2
0000C7CD F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C7D2 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C7D7 02                         byte_BEB7:	dc.b 2
0000C7D8 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C7DD F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C7E2 02                         byte_BEC2:	dc.b 2
0000C7E3 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C7E8 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C7ED F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C7F2                            		even
0000C7F2                            		even
0000C7F2                            
0000C7F2                            ; ===========================================================================
0000C7F2                            ; ---------------------------------------------------------------------------
0000C7F2                            ; Object 33 - pushable blocks (MZ, LZ)
0000C7F2                            ; ---------------------------------------------------------------------------
0000C7F2                            
0000C7F2                            Obj33:					; XREF: Obj_Index
0000C7F2 7000                       		moveq	#0,d0
0000C7F4 1028 0024                  		move.b	$24(a0),d0
0000C7F8 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C7FC 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C800                            ; ===========================================================================
0000C800 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C802 0000                       		dc.w loc_BF6E-Obj33_Index
0000C804 0000                       		dc.w loc_C02C-Obj33_Index
0000C806                            
0000C806 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C808 4001                       		dc.b $40, 1
0000C80A                            ; ===========================================================================
0000C80A                            
0000C80A                            Obj33_Main:				; XREF: Obj33_Index
0000C80A 5428 0024                  		addq.b	#2,$24(a0)
0000C80E 117C 000F 0016             		move.b	#$F,$16(a0)
0000C814 117C 000F 0017             		move.b	#$F,$17(a0)
0000C81A 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C822 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C828 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C82E 6600                       		bne.s	loc_BF16
0000C830 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C836                            
0000C836                            loc_BF16:
0000C836 117C 0004 0001             		move.b	#4,1(a0)
0000C83C 117C 0003 0018             		move.b	#3,$18(a0)
0000C842 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C848 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C84E 7000                       		moveq	#0,d0
0000C850 1028 0028                  		move.b	$28(a0),d0
0000C854 D040                       		add.w	d0,d0
0000C856 0240 000E                  		andi.w	#$E,d0
0000C85A 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C85E 115A 0019                  		move.b	(a2)+,$19(a0)
0000C862 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C866 4A28 0028                  		tst.b	$28(a0)
0000C86A 6700                       		beq.s	Obj33_ChkGone
0000C86C 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C872                            
0000C872                            Obj33_ChkGone:
0000C872 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C876 7000                       		moveq	#0,d0
0000C878 1028 0023                  		move.b	$23(a0),d0
0000C87C 6700                       		beq.s	loc_BF6E
0000C87E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C884 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C88A 6600 0000                  		bne.w	DeleteObject
0000C88E                            
0000C88E                            loc_BF6E:				; XREF: Obj33_Index
0000C88E 4A28 0032                  		tst.b	$32(a0)
0000C892 6600 0000                  		bne.w	loc_C046
0000C896 7200                       		moveq	#0,d1
0000C898 1228 0019                  		move.b	$19(a0),d1
0000C89C 0641 000B                  		addi.w	#$B,d1
0000C8A0 343C 0010                  		move.w	#$10,d2
0000C8A4 363C 0011                  		move.w	#$11,d3
0000C8A8 3828 0008                  		move.w	8(a0),d4
0000C8AC 6100 0000                  		bsr.w	loc_C186
0000C8B0 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C8B6 6600                       		bne.s	loc_BFC6	; if not, branch
0000C8B8 08A8 0007 0028             		bclr	#7,$28(a0)
0000C8BE 3028 0008                  		move.w	8(a0),d0
0000C8C2 0C40 0A20                  		cmpi.w	#$A20,d0
0000C8C6 6500                       		bcs.s	loc_BFC6
0000C8C8 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C8CC 6400                       		bcc.s	loc_BFC6
0000C8CE 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C8D2 0440 001C                  		subi.w	#$1C,d0
0000C8D6 3140 000C                  		move.w	d0,$C(a0)
0000C8DA 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C8E0 08E8 0007 0028             		bset	#7,$28(a0)
0000C8E6                            
0000C8E6                            loc_BFC6:
0000C8E6 3028 0008                  		move.w	8(a0),d0
0000C8EA 0240 FF80                  		andi.w	#$FF80,d0
0000C8EE 3238 F700                  		move.w	($FFFFF700).w,d1
0000C8F2 0441 0080                  		subi.w	#$80,d1
0000C8F6 0241 FF80                  		andi.w	#$FF80,d1
0000C8FA 9041                       		sub.w	d1,d0
0000C8FC 0C40 0280                  		cmpi.w	#$280,d0
0000C900 6200                       		bhi.s	loc_BFE6
0000C902 6000 0000                  		bra.w	DisplaySprite
0000C906                            ; ===========================================================================
0000C906                            
0000C906                            loc_BFE6:
0000C906 3028 0034                  		move.w	$34(a0),d0
0000C90A 0240 FF80                  		andi.w	#$FF80,d0
0000C90E 3238 F700                  		move.w	($FFFFF700).w,d1
0000C912 0441 0080                  		subi.w	#$80,d1
0000C916 0241 FF80                  		andi.w	#$FF80,d1
0000C91A 9041                       		sub.w	d1,d0
0000C91C 0C40 0280                  		cmpi.w	#$280,d0
0000C920 6200                       		bhi.s	loc_C016
0000C922 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C928 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C92E 117C 0004 0024             		move.b	#4,$24(a0)
0000C934 6000                       		bra.s	loc_C02C
0000C936                            ; ===========================================================================
0000C936                            
0000C936                            loc_C016:
0000C936 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C93A 7000                       		moveq	#0,d0
0000C93C 1028 0023                  		move.b	$23(a0),d0
0000C940 6700                       		beq.s	loc_C028
0000C942 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C948                            
0000C948                            loc_C028:
0000C948 6000 0000                  		bra.w	DeleteObject
0000C94C                            ; ===========================================================================
0000C94C                            
0000C94C                            loc_C02C:				; XREF: Obj33_Index
0000C94C 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C950 6700                       		beq.s	locret_C044
0000C952 117C 0002 0024             		move.b	#2,$24(a0)
0000C958 4228 0032                  		clr.b	$32(a0)
0000C95C 4268 0010                  		clr.w	$10(a0)
0000C960 4268 0012                  		clr.w	$12(a0)
0000C964                            
0000C964                            locret_C044:
0000C964 4E75                       		rts	
0000C966                            ; ===========================================================================
0000C966                            
0000C966                            loc_C046:				; XREF: loc_BF6E
0000C966 3F28 0008                  		move.w	8(a0),-(sp)
0000C96A 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C970 6400                       		bcc.s	loc_C056
0000C972 6100 0000                  		bsr.w	SpeedToPos
0000C976                            
0000C976                            loc_C056:
0000C976 0828 0001 0022             		btst	#1,$22(a0)
0000C97C 6700                       		beq.s	loc_C0A0
0000C97E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C984 4EB9 0000 0000             		jsr	ObjHitFloor
0000C98A 4A41                       		tst.w	d1
0000C98C 6A00 0000                  		bpl.w	loc_C09E
0000C990 D368 000C                  		add.w	d1,$C(a0)
0000C994 4268 0012                  		clr.w	$12(a0)
0000C998 08A8 0001 0022             		bclr	#1,$22(a0)
0000C99E 3011                       		move.w	(a1),d0
0000C9A0 0240 03FF                  		andi.w	#$3FF,d0
0000C9A4 0C40 016A                  		cmpi.w	#$16A,d0
0000C9A8 6500                       		bcs.s	loc_C09E
0000C9AA 3028 0030                  		move.w	$30(a0),d0
0000C9AE E640                       		asr.w	#3,d0
0000C9B0 3140 0010                  		move.w	d0,$10(a0)
0000C9B4 117C 0001 0032             		move.b	#1,$32(a0)
0000C9BA 4268 000E                  		clr.w	$E(a0)
0000C9BE                            
0000C9BE                            loc_C09E:
0000C9BE 6000                       		bra.s	loc_C0E6
0000C9C0                            ; ===========================================================================
0000C9C0                            
0000C9C0                            loc_C0A0:
0000C9C0 4A68 0010                  		tst.w	$10(a0)
0000C9C4 6700 0000                  		beq.w	loc_C0D6
0000C9C8 6B00                       		bmi.s	loc_C0BC
0000C9CA 7600                       		moveq	#0,d3
0000C9CC 1628 0019                  		move.b	$19(a0),d3
0000C9D0 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C9D6 4A41                       		tst.w	d1		; has block touched a wall?
0000C9D8 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C9DA 6000                       		bra.s	loc_C0E6
0000C9DC                            ; ===========================================================================
0000C9DC                            
0000C9DC                            loc_C0BC:
0000C9DC 7600                       		moveq	#0,d3
0000C9DE 1628 0019                  		move.b	$19(a0),d3
0000C9E2 4643                       		not.w	d3
0000C9E4 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C9EA 4A41                       		tst.w	d1		; has block touched a wall?
0000C9EC 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C9EE 6000                       		bra.s	loc_C0E6
0000C9F0                            ; ===========================================================================
0000C9F0                            
0000C9F0                            Obj33_StopPush:
0000C9F0 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C9F4 6000                       		bra.s	loc_C0E6
0000C9F6                            ; ===========================================================================
0000C9F6                            
0000C9F6                            loc_C0D6:
0000C9F6 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C9FE 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000CA04 6400                       		bcc.s	loc_C104
0000CA06                            
0000CA06                            loc_C0E6:
0000CA06 7200                       		moveq	#0,d1
0000CA08 1228 0019                  		move.b	$19(a0),d1
0000CA0C 0641 000B                  		addi.w	#$B,d1
0000CA10 343C 0010                  		move.w	#$10,d2
0000CA14 363C 0011                  		move.w	#$11,d3
0000CA18 381F                       		move.w	(sp)+,d4
0000CA1A 6100 0000                  		bsr.w	loc_C186
0000CA1E 6100                       		bsr.s	Obj33_ChkLava
0000CA20 6000 FEC4                  		bra.w	loc_BFC6
0000CA24                            ; ===========================================================================
0000CA24                            
0000CA24                            loc_C104:
0000CA24 381F                       		move.w	(sp)+,d4
0000CA26 43F8 D000                  		lea	($FFFFD000).w,a1
0000CA2A 08A9 0003 0022             		bclr	#3,$22(a1)
0000CA30 08A8 0003 0022             		bclr	#3,$22(a0)
0000CA36 6000 FECE                  		bra.w	loc_BFE6
0000CA3A                            ; ===========================================================================
0000CA3A                            
0000CA3A                            Obj33_ChkLava:
0000CA3A 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000CA40 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000CA42 343C FFE0                  		move.w	#-$20,d2
0000CA46 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000CA4C 6700                       		beq.s	Obj33_LoadLava
0000CA4E 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000CA54 6700                       		beq.s	Obj33_LoadLava
0000CA56 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000CA5C 6700                       		beq.s	Obj33_LoadLava
0000CA5E 4E75                       		rts	
0000CA60                            ; ===========================================================================
0000CA60                            
0000CA60                            Obj33_ChkLava2:
0000CA60 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000CA66 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000CA68 343C 0020                  		move.w	#$20,d2
0000CA6C 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000CA72 6700                       		beq.s	Obj33_LoadLava
0000CA74 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000CA7A 6700                       		beq.s	Obj33_LoadLava
0000CA7C                            
0000CA7C                            Obj33_NoLava:
0000CA7C 4E75                       		rts	
0000CA7E                            ; ===========================================================================
0000CA7E                            
0000CA7E                            Obj33_LoadLava:
0000CA7E 6100 0000                  		bsr.w	SingleObjLoad
0000CA82 6600                       		bne.s	locret_C184
0000CA84 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000CA88 3368 0008 0008             		move.w	8(a0),8(a1)
0000CA8E D569 0008                  		add.w	d2,8(a1)
0000CA92 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CA98 0669 0010 000C             		addi.w	#$10,$C(a1)
0000CA9E 2348 003C                  		move.l	a0,$3C(a1)
0000CAA2                            
0000CAA2                            locret_C184:
0000CAA2 4E75                       		rts	
0000CAA4                            ; ===========================================================================
0000CAA4                            
0000CAA4                            loc_C186:				; XREF: loc_BF6E
0000CAA4 1028 0025                  		move.b	$25(a0),d0
0000CAA8 6700 0000                  		beq.w	loc_C218
0000CAAC 5500                       		subq.b	#2,d0
0000CAAE 6600                       		bne.s	loc_C1AA
0000CAB0 6100 B30E                  		bsr.w	ExitPlatform
0000CAB4 0829 0003 0022             		btst	#3,$22(a1)
0000CABA 6600                       		bne.s	loc_C1A4
0000CABC 4228 0025                  		clr.b	$25(a0)
0000CAC0 4E75                       		rts	
0000CAC2                            ; ===========================================================================
0000CAC2                            
0000CAC2                            loc_C1A4:
0000CAC2 3404                       		move.w	d4,d2
0000CAC4 6000 B858                  		bra.w	MvSonicOnPtfm
0000CAC8                            ; ===========================================================================
0000CAC8                            
0000CAC8                            loc_C1AA:
0000CAC8 5500                       		subq.b	#2,d0
0000CACA 6600                       		bne.s	loc_C1F2
0000CACC 6100 0000                  		bsr.w	SpeedToPos
0000CAD0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CAD6 4EB9 0000 0000             		jsr	ObjHitFloor
0000CADC 4A41                       		tst.w	d1
0000CADE 6A00 0000                  		bpl.w	locret_C1F0
0000CAE2 D368 000C                  		add.w	d1,$C(a0)
0000CAE6 4268 0012                  		clr.w	$12(a0)
0000CAEA 4228 0025                  		clr.b	$25(a0)
0000CAEE 3011                       		move.w	(a1),d0
0000CAF0 0240 03FF                  		andi.w	#$3FF,d0
0000CAF4 0C40 016A                  		cmpi.w	#$16A,d0
0000CAF8 6500                       		bcs.s	locret_C1F0
0000CAFA 3028 0030                  		move.w	$30(a0),d0
0000CAFE E640                       		asr.w	#3,d0
0000CB00 3140 0010                  		move.w	d0,$10(a0)
0000CB04 117C 0001 0032             		move.b	#1,$32(a0)
0000CB0A 4268 000E                  		clr.w	$E(a0)
0000CB0E                            
0000CB0E                            locret_C1F0:
0000CB0E 4E75                       		rts	
0000CB10                            ; ===========================================================================
0000CB10                            
0000CB10                            loc_C1F2:
0000CB10 6100 0000                  		bsr.w	SpeedToPos
0000CB14 3028 0008                  		move.w	8(a0),d0
0000CB18 0240 000C                  		andi.w	#$C,d0
0000CB1C 6600 0000                  		bne.w	locret_C2E4
0000CB20 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000CB26 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000CB2C 4268 0010                  		clr.w	$10(a0)
0000CB30 5528 0025                  		subq.b	#2,$25(a0)
0000CB34 4E75                       		rts	
0000CB36                            ; ===========================================================================
0000CB36                            
0000CB36                            loc_C218:
0000CB36 6100 0000                  		bsr.w	loc_FAC8
0000CB3A 4A44                       		tst.w	d4
0000CB3C 6700 0000                  		beq.w	locret_C2E4
0000CB40 6B00 0000                  		bmi.w	locret_C2E4
0000CB44 4A28 0032                  		tst.b	$32(a0)
0000CB48 6700                       		beq.s	loc_C230
0000CB4A 6000 0000                  		bra.w	locret_C2E4
0000CB4E                            ; ===========================================================================
0000CB4E                            
0000CB4E                            loc_C230:
0000CB4E 4A40                       		tst.w	d0
0000CB50 6700 0000                  		beq.w	locret_C2E4
0000CB54 6B00                       		bmi.s	loc_C268
0000CB56 0829 0000 0022             		btst	#0,$22(a1)
0000CB5C 6600 0000                  		bne.w	locret_C2E4
0000CB60 3F00                       		move.w	d0,-(sp)
0000CB62 7600                       		moveq	#0,d3
0000CB64 1628 0019                  		move.b	$19(a0),d3
0000CB68 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CB6E 301F                       		move.w	(sp)+,d0
0000CB70 4A41                       		tst.w	d1
0000CB72 6B00 0000                  		bmi.w	locret_C2E4
0000CB76 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CB7E 7001                       		moveq	#1,d0
0000CB80 323C 0040                  		move.w	#$40,d1
0000CB84 6000                       		bra.s	loc_C294
0000CB86                            ; ===========================================================================
0000CB86                            
0000CB86                            loc_C268:
0000CB86 0829 0000 0022             		btst	#0,$22(a1)
0000CB8C 6700                       		beq.s	locret_C2E4
0000CB8E 3F00                       		move.w	d0,-(sp)
0000CB90 7600                       		moveq	#0,d3
0000CB92 1628 0019                  		move.b	$19(a0),d3
0000CB96 4643                       		not.w	d3
0000CB98 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CB9E 301F                       		move.w	(sp)+,d0
0000CBA0 4A41                       		tst.w	d1
0000CBA2 6B00                       		bmi.s	locret_C2E4
0000CBA4 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CBAC 70FF                       		moveq	#-1,d0
0000CBAE 323C FFC0                  		move.w	#-$40,d1
0000CBB2                            
0000CBB2                            loc_C294:
0000CBB2 43F8 D000                  		lea	($FFFFD000).w,a1
0000CBB6 D169 0008                  		add.w	d0,8(a1)
0000CBBA 3341 0014                  		move.w	d1,$14(a1)
0000CBBE 337C 0000 0010             		move.w	#0,$10(a1)
0000CBC4 3F00                       		move.w	d0,-(sp)
0000CBC6 303C 00A7                  		move.w	#$A7,d0
0000CBCA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CBD0 301F                       		move.w	(sp)+,d0
0000CBD2 4A28 0028                  		tst.b	$28(a0)
0000CBD6 6B00                       		bmi.s	locret_C2E4
0000CBD8 3F00                       		move.w	d0,-(sp)
0000CBDA 4EB9 0000 0000             		jsr	ObjHitFloor
0000CBE0 301F                       		move.w	(sp)+,d0
0000CBE2 0C41 0004                  		cmpi.w	#4,d1
0000CBE6 6F00                       		ble.s	loc_C2E0
0000CBE8 317C 0400 0010             		move.w	#$400,$10(a0)
0000CBEE 4A40                       		tst.w	d0
0000CBF0 6A00                       		bpl.s	loc_C2D8
0000CBF2 4468 0010                  		neg.w	$10(a0)
0000CBF6                            
0000CBF6                            loc_C2D8:
0000CBF6 117C 0006 0025             		move.b	#6,$25(a0)
0000CBFC 6000                       		bra.s	locret_C2E4
0000CBFE                            ; ===========================================================================
0000CBFE                            
0000CBFE                            loc_C2E0:
0000CBFE D368 000C                  		add.w	d1,$C(a0)
0000CC02                            
0000CC02                            locret_C2E4:
0000CC02 4E75                       		rts	
0000CC04                            ; ===========================================================================
0000CC04                            ; ---------------------------------------------------------------------------
0000CC04                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CC04                            ; ---------------------------------------------------------------------------
0000CC04                            Map_obj33:
0000CC04                            	include "_maps\obj33.asm"
0000CC04                            ; ---------------------------------------------------------------------------
0000CC04                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CC04                            ; ---------------------------------------------------------------------------
0000CC04 0000                       		dc.w byte_C2EA-Map_obj33
0000CC06 0000                       		dc.w byte_C2F0-Map_obj33
0000CC08 01                         byte_C2EA:	dc.b 1
0000CC09 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CC0E 04                         byte_C2F0:	dc.b 4
0000CC0F F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CC14 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CC19 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CC1E F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CC24 00                         		even
0000CC24 00                         		even
0000CC24                            
0000CC24                            ; ===========================================================================
0000CC24                            ; ---------------------------------------------------------------------------
0000CC24                            ; Object 34 - zone title cards
0000CC24                            ; ---------------------------------------------------------------------------
0000CC24                            Obj34:					; XREF: Obj_Index
0000CC24 7000                       		moveq	#0,d0
0000CC26 1028 0024                  		move.b	$24(a0),d0
0000CC2A 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CC2E 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CC32                            ; ===========================================================================
0000CC32 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CC34 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CC36 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CC38 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CC3A                            ; ===========================================================================
0000CC3A                            
0000CC3A                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CC3A 2248                       		movea.l	a0,a1
0000CC3C 7000                       		moveq	#0,d0
0000CC3E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CC42 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CC48 6600                       		bne.s	Obj34_CheckFZ
0000CC4A 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CC4C                            
0000CC4C                            Obj34_CheckFZ:
0000CC4C 3400                       		move.w	d0,d2
0000CC4E 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CC54 6600                       		bne.s	Obj34_LoadConfig
0000CC56 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CC58 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CC5A                            
0000CC5A                            Obj34_LoadConfig:
0000CC5A 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CC60 E948                       		lsl.w	#4,d0
0000CC62 D6C0                       		adda.w	d0,a3
0000CC64 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CC6A 7203                       		moveq	#3,d1
0000CC6C                            
0000CC6C                            Obj34_Loop:
0000CC6C 12BC 0034                  		move.b	#$34,0(a1)
0000CC70 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CC74 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CC78 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CC7C 335A 000A                  		move.w	(a2)+,$A(a1)
0000CC80 135A 0024                  		move.b	(a2)+,$24(a1)
0000CC84 101A                       		move.b	(a2)+,d0
0000CC86 6600                       		bne.s	Obj34_ActNumber
0000CC88 1002                       		move.b	d2,d0
0000CC8A                            
0000CC8A                            Obj34_ActNumber:
0000CC8A 0C00 0007                  		cmpi.b	#7,d0
0000CC8E 6600                       		bne.s	Obj34_MakeSprite
0000CC90 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CC94 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CC9A 6600                       		bne.s	Obj34_MakeSprite
0000CC9C 5300                       		subq.b	#1,d0
0000CC9E                            
0000CC9E                            Obj34_MakeSprite:
0000CC9E 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CCA2 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CCAA 337C 8580 0002             		move.w	#$8580,2(a1)
0000CCB0 137C 0078 0019             		move.b	#$78,$19(a1)
0000CCB6 137C 0000 0001             		move.b	#0,1(a1)
0000CCBC 137C 0000 0018             		move.b	#0,$18(a1)
0000CCC2 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CCC8 43E9 0040                  		lea	$40(a1),a1	; next object
0000CCCC 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CCD0                            
0000CCD0                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CCD0 7210                       		moveq	#$10,d1		; set horizontal speed
0000CCD2 3028 0030                  		move.w	$30(a0),d0
0000CCD6 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CCDA 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CCDC 6C00                       		bge.s	Obj34_Move
0000CCDE 4441                       		neg.w	d1
0000CCE0                            
0000CCE0                            Obj34_Move:
0000CCE0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCE4                            
0000CCE4                            loc_C3C8:
0000CCE4 3028 0008                  		move.w	8(a0),d0
0000CCE8 6B00                       		bmi.s	locret_C3D8
0000CCEA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CCEE 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CCF0 6000 0000                  		bra.w	DisplaySprite
0000CCF4                            ; ===========================================================================
0000CCF4                            
0000CCF4                            locret_C3D8:
0000CCF4 4E75                       		rts	
0000CCF6                            ; ===========================================================================
0000CCF6                            
0000CCF6                            Obj34_Wait:				; XREF: Obj34_Index
0000CCF6 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CCFA 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CCFC 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CD00 6000 0000                  		bra.w	DisplaySprite
0000CD04                            ; ===========================================================================
0000CD04                            
0000CD04                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CD04 4A28 0001                  		tst.b	1(a0)
0000CD08 6A00                       		bpl.s	Obj34_ChangeArt
0000CD0A 7220                       		moveq	#$20,d1
0000CD0C 3028 0032                  		move.w	$32(a0),d0
0000CD10 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CD14 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CD16 6C00                       		bge.s	Obj34_Move2
0000CD18 4441                       		neg.w	d1
0000CD1A                            
0000CD1A                            Obj34_Move2:
0000CD1A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD1E 3028 0008                  		move.w	8(a0),d0
0000CD22 6B00                       		bmi.s	locret_C412
0000CD24 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD28 6400                       		bcc.s	locret_C412	; if yes, branch
0000CD2A 6000 0000                  		bra.w	DisplaySprite
0000CD2E                            ; ===========================================================================
0000CD2E                            
0000CD2E                            locret_C412:
0000CD2E 4E75                       		rts	
0000CD30                            ; ===========================================================================
0000CD30                            
0000CD30                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CD30 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CD36 6600                       		bne.s	Obj34_Delete
0000CD38 7002                       		moveq	#2,d0
0000CD3A 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load explosion patterns
0000CD40 7000                       		moveq	#0,d0
0000CD42 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CD46 0640 0015                  		addi.w	#$15,d0
0000CD4A 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load animal patterns
0000CD50                            
0000CD50                            Obj34_Delete:
0000CD50 6000 0000                  		bra.w	DeleteObject
0000CD54                            ; ===========================================================================
0000CD54 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CD56 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CD58 00E4                       		dc.w $E4
0000CD5A 0206                       		dc.b 2,	6
0000CD5C 00EA                       		dc.w $EA
0000CD5E 0207                       		dc.b 2,	7
0000CD60 00E0                       		dc.w $E0
0000CD62 020A                       		dc.b 2,	$A
0000CD64                            ; ---------------------------------------------------------------------------
0000CD64                            ; Title	card configuration data
0000CD64                            ; Format:
0000CD64                            ; 4 bytes per item (YYYY XXXX)
0000CD64                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CD64                            ; ---------------------------------------------------------------------------
0000CD64 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CD74 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CD84 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CD94 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CDA4 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CDB4 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CDC4 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CDD4 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CDE4 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CDF4                            ; ===========================================================================
0000CDF4                            ; ---------------------------------------------------------------------------
0000CDF4                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CDF4                            ; ---------------------------------------------------------------------------
0000CDF4                            
0000CDF4                            Obj39:					; XREF: Obj_Index
0000CDF4 7000                       		moveq	#0,d0
0000CDF6 1028 0024                  		move.b	$24(a0),d0
0000CDFA 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CDFE 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CE02                            ; ===========================================================================
0000CE02 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CE04 0000                       		dc.w loc_C50C-Obj39_Index
0000CE06 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CE08                            ; ===========================================================================
0000CE08                            
0000CE08                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CE08 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CE0C 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CE0E 4E75                       		rts	
0000CE10                            ; ===========================================================================
0000CE10                            
0000CE10                            Obj39_Main:
0000CE10 5428 0024                  		addq.b	#2,$24(a0)
0000CE14 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CE1A 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CE20 6700                       		beq.s	loc_C4EC	; if not, branch
0000CE22 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CE28                            
0000CE28                            loc_C4EC:
0000CE28 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CE2E 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CE36 317C 855E 0002             		move.w	#$855E,2(a0)
0000CE3C 117C 0000 0001             		move.b	#0,1(a0)
0000CE42 117C 0000 0018             		move.b	#0,$18(a0)
0000CE48                            
0000CE48                            loc_C50C:				; XREF: Obj39_Index
0000CE48 7210                       		moveq	#$10,d1		; set horizontal speed
0000CE4A 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CE50 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CE52 6500                       		bcs.s	Obj39_Move
0000CE54 4441                       		neg.w	d1
0000CE56                            
0000CE56                            Obj39_Move:
0000CE56 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE5A 6000 0000                  		bra.w	DisplaySprite
0000CE5E                            ; ===========================================================================
0000CE5E                            
0000CE5E                            Obj39_SetWait:				; XREF: Obj39_Main
0000CE5E 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CE64 5428 0024                  		addq.b	#2,$24(a0)
0000CE68 4E75                       		rts	
0000CE6A                            ; ===========================================================================
0000CE6A                            
0000CE6A                            Obj39_Wait:				; XREF: Obj39_Index
0000CE6A 1038 F605                  		move.b	($FFFFF605).w,d0
0000CE6E 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CE72 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CE74 0828 0000 001A             		btst	#0,$1A(a0)
0000CE7A 6600                       		bne.s	Obj39_Display
0000CE7C 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CE80 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CE82 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CE86 6000 0000                  		bra.w	DisplaySprite
0000CE8A                            ; ===========================================================================
0000CE8A                            
0000CE8A                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CE8A 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CE8E 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CE90 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CE96 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CE9A 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CE9C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CEA2 6000                       		bra.s	Obj39_Display
0000CEA4                            ; ===========================================================================
0000CEA4                            
0000CEA4                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CEA4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CEAA                            
0000CEAA                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CEAA 6000 0000                  		bra.w	DisplaySprite
0000CEAE                            ; ===========================================================================
0000CEAE                            ; ---------------------------------------------------------------------------
0000CEAE                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CEAE                            ; ---------------------------------------------------------------------------
0000CEAE                            
0000CEAE                            Obj3A:					; XREF: Obj_Index
0000CEAE 7000                       		moveq	#0,d0
0000CEB0 1028 0024                  		move.b	$24(a0),d0
0000CEB4 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CEB8 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CEBC                            ; ===========================================================================
0000CEBC 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CEBE 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CEC0 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CEC2 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CEC4 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CEC6 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CEC8 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CECA 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CECC 0000                       		dc.w loc_C766-Obj3A_Index
0000CECE                            ; ===========================================================================
0000CECE                            
0000CECE                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CECE 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CED2 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CED4 4E75                       		rts	
0000CED6                            ; ===========================================================================
0000CED6                            
0000CED6                            Obj3A_Main:
0000CED6 2248                       		movea.l	a0,a1
0000CED8 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CEDE 7206                       		moveq	#6,d1
0000CEE0                            
0000CEE0                            Obj3A_Loop:
0000CEE0 12BC 003A                  		move.b	#$3A,0(a1)
0000CEE4 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CEE8 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CEEC 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CEF0 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CEF4 135A 0024                  		move.b	(a2)+,$24(a1)
0000CEF8 101A                       		move.b	(a2)+,d0
0000CEFA 0C00 0006                  		cmpi.b	#6,d0
0000CEFE 6600                       		bne.s	loc_C5CA
0000CF00 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CF04                            
0000CF04                            loc_C5CA:
0000CF04 1340 001A                  		move.b	d0,$1A(a1)
0000CF08 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CF10 337C 8580 0002             		move.w	#$8580,2(a1)
0000CF16 137C 0000 0001             		move.b	#0,1(a1)
0000CF1C 43E9 0040                  		lea	$40(a1),a1
0000CF20 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CF24                            
0000CF24                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CF24 7210                       		moveq	#$10,d1		; set horizontal speed
0000CF26 3028 0030                  		move.w	$30(a0),d0
0000CF2A B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CF2E 6700                       		beq.s	loc_C61A	; if yes, branch
0000CF30 6C00                       		bge.s	Obj3A_Move
0000CF32 4441                       		neg.w	d1
0000CF34                            
0000CF34                            Obj3A_Move:
0000CF34 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CF38                            
0000CF38                            loc_C5FE:				; XREF: loc_C61A
0000CF38 3028 0008                  		move.w	8(a0),d0
0000CF3C 6B00                       		bmi.s	locret_C60E
0000CF3E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF42 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CF44 6000 0000                  		bra.w	DisplaySprite
0000CF48                            ; ===========================================================================
0000CF48                            
0000CF48                            locret_C60E:
0000CF48 4E75                       		rts	
0000CF4A                            ; ===========================================================================
0000CF4A                            
0000CF4A                            loc_C610:				; XREF: loc_C61A
0000CF4A 117C 000E 0024             		move.b	#$E,$24(a0)
0000CF50 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CF54                            ; ===========================================================================
0000CF54                            
0000CF54                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CF54 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CF5A 67EE                       		beq.s	loc_C610
0000CF5C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CF62 66D4                       		bne.s	loc_C5FE
0000CF64 5428 0024                  		addq.b	#2,$24(a0)
0000CF68 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF6E                            
0000CF6E                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CF6E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CF72 6600                       		bne.s	Obj3A_Display
0000CF74 5428 0024                  		addq.b	#2,$24(a0)
0000CF78                            
0000CF78                            Obj3A_Display:
0000CF78 6000 0000                  		bra.w	DisplaySprite
0000CF7C                            ; ===========================================================================
0000CF7C                            
0000CF7C                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CF7C 6100 0000                  		bsr.w	DisplaySprite
0000CF80 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CF86 7000                       		moveq	#0,d0
0000CF88 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CF8C 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CF8E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CF92 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CF98                            
0000CF98                            Obj3A_RingBonus:
0000CF98 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CF9C 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CF9E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CFA2 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CFA8                            
0000CFA8                            Obj3A_ChkBonus:
0000CFA8 4A40                       		tst.w	d0		; is there any bonus?
0000CFAA 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CFAC 303C 00C5                  		move.w	#$C5,d0
0000CFB0 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CFB6 5428 0024                  		addq.b	#2,$24(a0)
0000CFBA 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CFC0 6600                       		bne.s	Obj3A_SetDelay
0000CFC2 5828 0024                  		addq.b	#4,$24(a0)
0000CFC6                            
0000CFC6                            Obj3A_SetDelay:
0000CFC6 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CFCC                            
0000CFCC                            locret_C692:
0000CFCC 4E75                       		rts	
0000CFCE                            ; ===========================================================================
0000CFCE                            
0000CFCE                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CFCE 4EB9 0000 0000             		jsr	AddPoints
0000CFD4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CFD8 0200 0003                  		andi.b	#3,d0
0000CFDC 66EE                       		bne.s	locret_C692
0000CFDE 303C 00CD                  		move.w	#$CD,d0
0000CFE2 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CFE8                            ; ===========================================================================
0000CFE8                            
0000CFE8                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CFE8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CFEC 0240 0007                  		andi.w	#7,d0
0000CFF0 E748                       		lsl.w	#3,d0
0000CFF2 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CFF6 0241 0003                  		andi.w	#3,d1
0000CFFA D241                       		add.w	d1,d1
0000CFFC D041                       		add.w	d1,d0
0000CFFE 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D002 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D006 4A40                       		tst.w	d0
0000D008 6600                       		bne.s	Obj3A_ChkSS
0000D00A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000D010 6000                       		bra.s	Obj3A_Display2
0000D012                            ; ===========================================================================
0000D012                            
0000D012                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D012 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D016 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D01A 6700                       		beq.s	loc_C6EA	; if not, branch
0000D01C 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D022 6000                       		bra.s	Obj3A_Display2
0000D024                            ; ===========================================================================
0000D024                            
0000D024                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D024 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D02A                            
0000D02A                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D02A 6000 0000                  		bra.w	DisplaySprite
0000D02E                            ; ===========================================================================
0000D02E                            ; ---------------------------------------------------------------------------
0000D02E                            ; Level	order array
0000D02E                            ; ---------------------------------------------------------------------------
0000D02E                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D066                            		even
0000D066                            ; ===========================================================================
0000D066                            
0000D066                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D066 7220                       		moveq	#$20,d1		; set horizontal speed
0000D068 3028 0032                  		move.w	$32(a0),d0
0000D06C B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D070 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D072 6C00                       		bge.s	Obj3A_Move2
0000D074 4441                       		neg.w	d1
0000D076                            
0000D076                            Obj3A_Move2:
0000D076 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D07A 3028 0008                  		move.w	8(a0),d0
0000D07E 6B00                       		bmi.s	locret_C748
0000D080 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D084 6400                       		bcc.s	locret_C748	; if yes, branch
0000D086 6000 0000                  		bra.w	DisplaySprite
0000D08A                            ; ===========================================================================
0000D08A                            
0000D08A                            locret_C748:
0000D08A 4E75                       		rts	
0000D08C                            ; ===========================================================================
0000D08C                            
0000D08C                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D08C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D092 6600 0000                  		bne.w	DeleteObject
0000D096 5428 0024                  		addq.b	#2,$24(a0)
0000D09A 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D09E 303C 008D                  		move.w	#$8D,d0
0000D0A2 4EF9 0000 15CC             		jmp	(PlaySound).l	; play FZ music
0000D0A8                            ; ===========================================================================
0000D0A8                            
0000D0A8                            loc_C766:				; XREF: Obj3A_Index
0000D0A8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D0AC 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D0B2 6700 0000                  		beq.w	DeleteObject
0000D0B6 4E75                       		rts	
0000D0B8                            ; ===========================================================================
0000D0B8 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D0BE 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D0C0 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D0C6 0201                       		dc.b 2,	1
0000D0C8 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D0CE 0206                       		dc.b 2,	6
0000D0D0 0520 0120 00EC             		dc.w $520, $120, $EC
0000D0D6 0202                       		dc.b 2,	2
0000D0D8 0540 0120 00FC             		dc.w $540, $120, $FC
0000D0DE 0203                       		dc.b 2,	3
0000D0E0 0560 0120 010C             		dc.w $560, $120, $10C
0000D0E6 0204                       		dc.b 2,	4
0000D0E8 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D0EE 0205                       		dc.b 2,	5
0000D0F0                            ; ===========================================================================
0000D0F0                            ; ---------------------------------------------------------------------------
0000D0F0                            ; Object 7E - special stage results screen
0000D0F0                            ; ---------------------------------------------------------------------------
0000D0F0                            
0000D0F0                            Obj7E:					; XREF: Obj_Index
0000D0F0 7000                       		moveq	#0,d0
0000D0F2 1028 0024                  		move.b	$24(a0),d0
0000D0F6 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D0FA 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D0FE                            ; ===========================================================================
0000D0FE 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D100 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D102 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D104 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D106 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D108 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D10A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D10C 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D10E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D110 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D112 0000                       		dc.w loc_C91A-Obj7E_Index
0000D114                            ; ===========================================================================
0000D114                            
0000D114                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D114 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D118 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D11A 4E75                       		rts	
0000D11C                            ; ===========================================================================
0000D11C                            
0000D11C                            Obj7E_Main:
0000D11C 2248                       		movea.l	a0,a1
0000D11E 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D124 7203                       		moveq	#3,d1
0000D126 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D12C 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D12E 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D130                            
0000D130                            Obj7E_Loop:
0000D130 12BC 007E                  		move.b	#$7E,0(a1)
0000D134 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D138 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D13C 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D140 135A 0024                  		move.b	(a2)+,$24(a1)
0000D144 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D148 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D150 337C 8580 0002             		move.w	#$8580,2(a1)
0000D156 137C 0000 0001             		move.b	#0,1(a1)
0000D15C 43E9 0040                  		lea	$40(a1),a1
0000D160 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D164                            
0000D164 7007                       		moveq	#7,d0
0000D166 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D16A 6700                       		beq.s	loc_C842
0000D16C 7000                       		moveq	#0,d0
0000D16E 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D172 6600                       		bne.s	loc_C842	; if not, branch
0000D174 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D176 317C 0018 0008             		move.w	#$18,8(a0)
0000D17C 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D182                            
0000D182                            loc_C842:
0000D182 1140 001A                  		move.b	d0,$1A(a0)
0000D186                            
0000D186                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D186 7210                       		moveq	#$10,d1		; set horizontal speed
0000D188 3028 0030                  		move.w	$30(a0),d0
0000D18C B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D190 6700                       		beq.s	loc_C86C	; if yes, branch
0000D192 6C00                       		bge.s	Obj7E_Move
0000D194 4441                       		neg.w	d1
0000D196                            
0000D196                            Obj7E_Move:
0000D196 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D19A                            
0000D19A                            loc_C85A:				; XREF: loc_C86C
0000D19A 3028 0008                  		move.w	8(a0),d0
0000D19E 6B00                       		bmi.s	locret_C86A
0000D1A0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D1A4 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D1A6 6000 0000                  		bra.w	DisplaySprite
0000D1AA                            ; ===========================================================================
0000D1AA                            
0000D1AA                            locret_C86A:
0000D1AA 4E75                       		rts	
0000D1AC                            ; ===========================================================================
0000D1AC                            
0000D1AC                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D1AC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D1B2 66E6                       		bne.s	loc_C85A
0000D1B4 5428 0024                  		addq.b	#2,$24(a0)
0000D1B8 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D1BE 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D1C4                            
0000D1C4                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D1C4 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D1C8 6600                       		bne.s	Obj7E_Display
0000D1CA 5428 0024                  		addq.b	#2,$24(a0)
0000D1CE                            
0000D1CE                            Obj7E_Display:
0000D1CE 6000 0000                  		bra.w	DisplaySprite
0000D1D2                            ; ===========================================================================
0000D1D2                            
0000D1D2                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D1D2 6100 0000                  		bsr.w	DisplaySprite
0000D1D6 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D1DC 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D1E0 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D1E2 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D1E8 700A                       		moveq	#10,d0		; add 10 to score
0000D1EA 4EB9 0000 0000             		jsr	AddPoints
0000D1F0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D1F4 0200 0003                  		andi.b	#3,d0
0000D1F8 6600                       		bne.s	locret_C8EA
0000D1FA 303C 00CD                  		move.w	#$CD,d0
0000D1FE 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D204                            ; ===========================================================================
0000D204                            
0000D204                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D204 303C 00C5                  		move.w	#$C5,d0
0000D208 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D20E 5428 0024                  		addq.b	#2,$24(a0)
0000D212 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D218 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D21E 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D220 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D226 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D22A                            
0000D22A                            locret_C8EA:
0000D22A 4E75                       		rts	
0000D22C                            ; ===========================================================================
0000D22C                            
0000D22C                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D22C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D232 6000 0000                  		bra.w	DisplaySprite
0000D236                            ; ===========================================================================
0000D236                            
0000D236                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D236 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D23C 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D242 303C 00BF                  		move.w	#$BF,d0
0000D246 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play continues music
0000D24C 5428 0024                  		addq.b	#2,$24(a0)
0000D250 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D256 6000 0000                  		bra.w	DisplaySprite
0000D25A                            ; ===========================================================================
0000D25A                            
0000D25A                            loc_C91A:				; XREF: Obj7E_Index
0000D25A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D25E 0200 000F                  		andi.b	#$F,d0
0000D262 6600                       		bne.s	Obj7E_Display2
0000D264 0868 0000 001A             		bchg	#0,$1A(a0)
0000D26A                            
0000D26A                            Obj7E_Display2:
0000D26A 6000 0000                  		bra.w	DisplaySprite
0000D26E                            ; ===========================================================================
0000D26E 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D274 0200                       		dc.b 2,	0		; rountine number, frame number
0000D276 0320 0120 0118             		dc.w $320, $120, $118
0000D27C 0201                       		dc.b 2,	1
0000D27E 0360 0120 0128             		dc.w $360, $120, $128
0000D284 0202                       		dc.b 2,	2
0000D286 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D28C 0203                       		dc.b 2,	3
0000D28E 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D294 0206                       		dc.b 2,	6
0000D296                            ; ===========================================================================
0000D296                            ; ---------------------------------------------------------------------------
0000D296                            ; Object 7F - chaos emeralds from the special stage results screen
0000D296                            ; ---------------------------------------------------------------------------
0000D296                            
0000D296                            Obj7F:					; XREF: Obj_Index
0000D296 7000                       		moveq	#0,d0
0000D298 1028 0024                  		move.b	$24(a0),d0
0000D29C 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D2A0 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D2A4                            ; ===========================================================================
0000D2A4 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D2A6 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D2A8                            
0000D2A8                            ; ---------------------------------------------------------------------------
0000D2A8                            ; X-axis positions for chaos emeralds
0000D2A8                            ; ---------------------------------------------------------------------------
0000D2A8 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D2B4                            ; ===========================================================================
0000D2B4                            
0000D2B4                            Obj7F_Main:				; XREF: Obj7F_Index
0000D2B4 2248                       		movea.l	a0,a1
0000D2B6 45F9 0000 D2A8             		lea	(Obj7F_PosData).l,a2
0000D2BC 7400                       		moveq	#0,d2
0000D2BE 7200                       		moveq	#0,d1
0000D2C0 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D2C4 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D2C6 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D2CA                            
0000D2CA                            Obj7F_Loop:
0000D2CA 12BC 007F                  		move.b	#$7F,0(a1)
0000D2CE 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D2D2 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D2D8 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D2DC 1633 2000                  		move.b	(a3,d2.w),d3
0000D2E0 1343 001A                  		move.b	d3,$1A(a1)
0000D2E4 1343 001C                  		move.b	d3,$1C(a1)
0000D2E8 5202                       		addq.b	#1,d2
0000D2EA 5429 0024                  		addq.b	#2,$24(a1)
0000D2EE 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D2F6 337C 8541 0002             		move.w	#$8541,2(a1)
0000D2FC 137C 0000 0001             		move.b	#0,1(a1)
0000D302 43E9 0040                  		lea	$40(a1),a1	; next object
0000D306 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D30A                            
0000D30A                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D30A 1028 001A                  		move.b	$1A(a0),d0
0000D30E 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D314 0C00 0006                  		cmpi.b	#6,d0
0000D318 6600                       		bne.s	Obj7F_Display
0000D31A 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D320                            
0000D320                            Obj7F_Display:
0000D320 6000 0000                  		bra.w	DisplaySprite
0000D324                            ; ===========================================================================
0000D324                            ; ---------------------------------------------------------------------------
0000D324                            ; Sprite mappings - zone title cards
0000D324                            ; ---------------------------------------------------------------------------
0000D324                            Map_obj34:
0000D324                                    include "_maps\obj34.asm"
0000D324                            Map_c5df:
0000D324 0000                       Map_c5df_0: 	dc.w Map_c5df_18-Map_c5df
0000D326 0000                       Map_c5df_2: 	dc.w Map_c5df_55-Map_c5df
0000D328 0000                       Map_c5df_4: 	dc.w Map_c5df_C4-Map_c5df
0000D32A 0000                       Map_c5df_6: 	dc.w Map_c5df_DE-Map_c5df
0000D32C 0000                       Map_c5df_8: 	dc.w Map_c5df_134-Map_c5df
0000D32E 0000                       Map_c5df_A: 	dc.w Map_c5df_19E-Map_c5df
0000D330 0000                       Map_c5df_C: 	dc.w Map_c5df_1C2-Map_c5df
0000D332 0000                       Map_c5df_E: 	dc.w Map_c5df_1D7-Map_c5df
0000D334 0000                       Map_c5df_10: 	dc.w Map_c5df_1E2-Map_c5df
0000D336 0000                       Map_c5df_12: 	dc.w Map_c5df_1ED-Map_c5df
0000D338 0000                       Map_c5df_14: 	dc.w Map_c5df_1F8-Map_c5df
0000D33A 0000                       Map_c5df_16: 	dc.w Map_c5df_23A-Map_c5df
0000D33C 0C                         Map_c5df_18: 	dc.b $C
0000D33D F805 0008 80               	dc.b $F8, $5, $0, $8, $80
0000D342 F805 003A 90               	dc.b $F8, $5, $0, $3A, $90
0000D347 F805 0046 A0               	dc.b $F8, $5, $0, $46, $A0
0000D34C F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0000D351 F805 0008 C0               	dc.b $F8, $5, $0, $8, $C0
0000D356 F805 001C D0               	dc.b $F8, $5, $0, $1C, $D0
0000D35B F805 004A E0               	dc.b $F8, $5, $0, $4A, $E0
0000D360 F800 0056 F0               	dc.b $F8, $0, $0, $56, $F0
0000D365 F805 003A 00               	dc.b $F8, $5, $0, $3A, $0
0000D36A F805 0032 10               	dc.b $F8, $5, $0, $32, $10
0000D36F F805 0026 20               	dc.b $F8, $5, $0, $26, $20
0000D374 F805 0026 30               	dc.b $F8, $5, $0, $26, $30
0000D379 16                         Map_c5df_55: 	dc.b $16
0000D37A F801 0020 80               	dc.b $F8, $1, $0, $20, $80
0000D37F F800 0056 88               	dc.b $F8, $0, $0, $56, $88
0000D384 F805 0026 98               	dc.b $F8, $5, $0, $26, $98
0000D389 F801 0020 A8               	dc.b $F8, $1, $0, $20, $A8
0000D38E F805 0022 B0               	dc.b $F8, $5, $0, $22, $B0
0000D393 F805 0010 C0               	dc.b $F8, $5, $0, $10, $C0
0000D398 F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D39D F805 0014 E0               	dc.b $F8, $5, $0, $14, $E0
0000D3A2 F801 0020 F0               	dc.b $F8, $1, $0, $20, $F0
0000D3A7 F805 0026 F8               	dc.b $F8, $5, $0, $26, $F8
0000D3AC F805 0010 08               	dc.b $F8, $5, $0, $10, $8
0000D3B1 F800 0056 18               	dc.b $F8, $0, $0, $56, $18
0000D3B6 F805 0010 28               	dc.b $F8, $5, $0, $10, $28
0000D3BB F805 0018 38               	dc.b $F8, $5, $0, $18, $38
0000D3C0 F805 0018 48               	dc.b $F8, $5, $0, $18, $48
0000D3C5 F805 003E 58               	dc.b $F8, $5, $0, $3E, $58
0000D3CA F805 0036 68               	dc.b $F8, $5, $0, $36, $68
0000D3CF F805 0026 78               	dc.b $F8, $5, $0, $26, $78
0000D3D4 F805 0032 88               	dc.b $F8, $5, $0, $32, $88
0000D3D9 F805 003A 98               	dc.b $F8, $5, $0, $3A, $98
0000D3DE F805 0010 A8               	dc.b $F8, $5, $0, $10, $A8
0000D3E3 F805 003A B8               	dc.b $F8, $5, $0, $3A, $B8
0000D3E8 05                         Map_c5df_C4: 	dc.b $5
0000D3E9 F805 002A 80               	dc.b $F8, $5, $0, $2A, $80
0000D3EE F805 0000 90               	dc.b $F8, $5, $0, $0, $90
0000D3F3 F805 003A A0               	dc.b $F8, $5, $0, $3A, $A0
0000D3F8 F805 0004 B0               	dc.b $F8, $5, $0, $4, $B0
0000D3FD F805 0026 C0               	dc.b $F8, $5, $0, $26, $C0
0000D402 11                         Map_c5df_DE: 	dc.b $11
0000D403 F805 000C 80               	dc.b $F8, $5, $0, $C, $80
0000D408 F805 0032 90               	dc.b $F8, $5, $0, $32, $90
0000D40D F805 002E A0               	dc.b $F8, $5, $0, $2E, $A0
0000D412 F805 0042 B0               	dc.b $F8, $5, $0, $42, $B0
0000D417 F800 0056 C0               	dc.b $F8, $0, $0, $56, $C0
0000D41C F805 0018 D0               	dc.b $F8, $5, $0, $18, $D0
0000D421 F805 0010 E0               	dc.b $F8, $5, $0, $10, $E0
0000D426 F805 0042 F0               	dc.b $F8, $5, $0, $42, $F0
0000D42B F800 0056 00               	dc.b $F8, $0, $0, $56, $0
0000D430 F805 003A 10               	dc.b $F8, $5, $0, $3A, $10
0000D435 F801 0020 20               	dc.b $F8, $1, $0, $20, $20
0000D43A F805 000C 28               	dc.b $F8, $5, $0, $C, $28
0000D43F F805 0032 38               	dc.b $F8, $5, $0, $32, $38
0000D444 F805 0042 48               	dc.b $F8, $5, $0, $42, $48
0000D449 F805 001C 58               	dc.b $F8, $5, $0, $1C, $58
0000D44E F801 0020 68               	dc.b $F8, $1, $0, $20, $68
0000D453 F805 003E 70               	dc.b $F8, $5, $0, $3E, $70
0000D458 15                         Map_c5df_134: 	dc.b $15
0000D459 F805 0042 80               	dc.b $F8, $5, $0, $42, $80
0000D45E F805 001C 90               	dc.b $F8, $5, $0, $1C, $90
0000D463 F805 0010 A0               	dc.b $F8, $5, $0, $10, $A0
0000D468 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D46D F805 0036 C0               	dc.b $F8, $5, $0, $36, $C0
0000D472 F801 0020 D0               	dc.b $F8, $1, $0, $20, $D0
0000D477 F805 0018 D8               	dc.b $F8, $5, $0, $18, $D8
0000D47C F800 0056 E8               	dc.b $F8, $0, $0, $56, $E8
0000D481 F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
0000D486 F805 003A 08               	dc.b $F8, $5, $0, $3A, $8
0000D48B F805 0032 18               	dc.b $F8, $5, $0, $32, $18
0000D490 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0000D495 F800 0056 38               	dc.b $F8, $0, $0, $56, $38
0000D49A F805 0004 48               	dc.b $F8, $5, $0, $4, $48
0000D49F F805 0000 58               	dc.b $F8, $5, $0, $0, $58
0000D4A4 F805 003A 68               	dc.b $F8, $5, $0, $3A, $68
0000D4A9 F805 002E 78               	dc.b $F8, $5, $0, $2E, $78
0000D4AE F805 004A 88               	dc.b $F8, $5, $0, $4A, $88
0000D4B3 F805 0000 98               	dc.b $F8, $5, $0, $0, $98
0000D4B8 F805 003A A8               	dc.b $F8, $5, $0, $3A, $A8
0000D4BD F805 000C B8               	dc.b $F8, $5, $0, $C, $B8
0000D4C2 07                         Map_c5df_19E: 	dc.b $7
0000D4C3 F805 004E 80               	dc.b $F8, $5, $0, $4E, $80
0000D4C8 F800 0056 90               	dc.b $F8, $0, $0, $56, $90
0000D4CD F805 004E A0               	dc.b $F8, $5, $0, $4E, $A0
0000D4D2 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D4D7 F805 004E C0               	dc.b $F8, $5, $0, $4E, $C0
0000D4DC F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D4E1 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D4E6 04                         Map_c5df_1C2: 	dc.b $4
0000D4E7 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D4EC F805 0032 F0               	dc.b $F8, $5, $0, $32, $F0
0000D4F1 F805 002E 00               	dc.b $F8, $5, $0, $2E, $0
0000D4F6 F805 0010 10               	dc.b $F8, $5, $0, $10, $10
0000D4FB 02                         Map_c5df_1D7: 	dc.b $2
0000D4FC 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D501 F402 0057 0C               	dc.b $F4, $2, $0, $57, $C
0000D506 02                         Map_c5df_1E2: 	dc.b $2
0000D507 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D50C F406 005A 08               	dc.b $F4, $6, $0, $5A, $8
0000D511 02                         Map_c5df_1ED: 	dc.b $2
0000D512 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D517 F406 0060 08               	dc.b $F4, $6, $0, $60, $8
0000D51C 0D                         Map_c5df_1F8: 	dc.b $D
0000D51D E40C 0070 F4               	dc.b $E4, $C, $0, $70, $F4
0000D522 E402 0074 14               	dc.b $E4, $2, $0, $74, $14
0000D527 EC04 0077 EC               	dc.b $EC, $4, $0, $77, $EC
0000D52C F405 0079 E4               	dc.b $F4, $5, $0, $79, $E4
0000D531 140C 1870 EC               	dc.b $14, $C, $18, $70, $EC
0000D536 0402 1874 E4               	dc.b $4, $2, $18, $74, $E4
0000D53B 0C04 1877 04               	dc.b $C, $4, $18, $77, $4
0000D540 FC05 1879 0C               	dc.b $FC, $5, $18, $79, $C
0000D545 EC08 007D FC               	dc.b $EC, $8, $0, $7D, $FC
0000D54A F40C 007C F4               	dc.b $F4, $C, $0, $7C, $F4
0000D54F FC08 007C F4               	dc.b $FC, $8, $0, $7C, $F4
0000D554 040C 007C EC               	dc.b $4, $C, $0, $7C, $EC
0000D559 0C08 007C EC               	dc.b $C, $8, $0, $7C, $EC
0000D55E 05                         Map_c5df_23A: 	dc.b $5
0000D55F F805 0014 DC               	dc.b $F8, $5, $0, $14, $DC
0000D564 F801 0020 EC               	dc.b $F8, $1, $0, $20, $EC
0000D569 F805 002E F4               	dc.b $F8, $5, $0, $2E, $F4
0000D56E F805 0000 04               	dc.b $F8, $5, $0, $0, $4
0000D573 F805 0026 14               	dc.b $F8, $5, $0, $26, $14
0000D578                            	even
0000D578                            	even
0000D578                            ; ---------------------------------------------------------------------------
0000D578                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D578                            ; ---------------------------------------------------------------------------
0000D578                            Map_obj39:
0000D578                            	include "_maps\obj39.asm"
0000D578                            ; ---------------------------------------------------------------------------
0000D578                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D578                            ; ---------------------------------------------------------------------------
0000D578 0000                       		dc.w byte_CBAC-Map_obj39
0000D57A 0000                       		dc.w byte_CBB7-Map_obj39
0000D57C 0000                       		dc.w byte_CBC2-Map_obj39
0000D57E 0000                       		dc.w byte_CBCD-Map_obj39
0000D580 02                         byte_CBAC:	dc.b 2
0000D581 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D586 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D58B 02                         byte_CBB7:	dc.b 2
0000D58C F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D591 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D596 02                         byte_CBC2:	dc.b 2
0000D597 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D59C F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D5A1 02                         byte_CBCD:	dc.b 2
0000D5A2 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D5A7 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D5AC                            		even
0000D5AC                            		even
0000D5AC                            
0000D5AC                            ; ---------------------------------------------------------------------------
0000D5AC                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D5AC                            ; ---------------------------------------------------------------------------
0000D5AC 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D5AE 0000                       		dc.w byte_CC13-Map_obj3A
0000D5B0 0000                       		dc.w byte_CC32-Map_obj3A
0000D5B2 0000                       		dc.w byte_CC51-Map_obj3A
0000D5B4 0000                       		dc.w byte_CC75-Map_obj3A
0000D5B6                            		;dc.w byte_CB47-Map_obj3A
0000D5B6                            		;dc.w byte_CB26-Map_obj3A
0000D5B6                            		;dc.w byte_CB31-Map_obj3A
0000D5B6                            		;dc.w byte_CB3C-Map_obj3A
0000D5B6 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D5B7 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D5BC F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D5C1 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D5C6 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D5CB F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D5D0 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D5D5 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D5DA F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D5DF F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D5E4 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D5E9 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D5EE F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D5F3 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D5F8 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D5FD F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D602 06                         byte_CC13:	dc.b 6			; PASSED
0000D603 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D608 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D60D F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D612 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D617 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D61C F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D621 06                         byte_CC32:	dc.b 6			; SCORE
0000D622 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D627 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D62C F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D631 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D636 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D63B FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D640 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D641 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D646 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D64B F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D650 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D655 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D65A F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D65F F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D664 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D665 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D66A F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D66F F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D674 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D679 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D67E F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D683 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D688                            		even
0000D688                            ; ---------------------------------------------------------------------------
0000D688                            ; Sprite mappings - special stage results screen
0000D688                            ; ---------------------------------------------------------------------------
0000D688 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D68A 0000                       		dc.w byte_CCEE-Map_obj7E
0000D68C 0000                       		dc.w byte_CD0D-Map_obj7E
0000D68E                            		;dc.w byte_CB47-Map_obj7E
0000D68E 0000                       		dc.w byte_CD31-Map_obj7E
0000D690 0000                       		dc.w byte_CD46-Map_obj7E
0000D692 0000                       		dc.w byte_CD5B-Map_obj7E
0000D694 0000                       		dc.w byte_CD6B-Map_obj7E
0000D696 0000                       		dc.w byte_CDA8-Map_obj7E
0000D698 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D699 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D69E F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D6A3 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D6A8 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D6AD F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D6B2 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D6B7 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D6BC F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D6C1 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D6C6 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D6CB F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D6D0 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D6D5 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D6DA 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D6DB F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D6E0 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D6E5 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D6EA F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D6EF F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D6F4 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D6F9 07                         byte_CD0D:	dc.b 7
0000D6FA F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D6FF F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D704 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D709 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D70E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D713 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D718 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D71D 04                         byte_CD31:	dc.b 4
0000D71E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D723 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D728 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D72D F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D732 04                         byte_CD46:	dc.b 4
0000D733 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D738 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D73D F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D742 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D747 03                         byte_CD5B:	dc.b 3
0000D748 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D74D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D752 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D757 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D758 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D75D F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D762 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D767 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D76C F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D771 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D776 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D77B F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D780 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D785 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D78A F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D78F F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D794 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D795 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D79A F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D79F F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D7A4 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D7A9 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D7AE F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D7B3 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D7B8 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D7BD F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D7C2 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D7C7 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D7CC F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D7D1 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D7D6 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D7DB F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D7E0                            		even
0000D7E0                            ; ---------------------------------------------------------------------------
0000D7E0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D7E0                            ; ---------------------------------------------------------------------------
0000D7E0                            Map_obj7F:
0000D7E0                            	include "_maps\obj7F.asm"
0000D7E0                            ; ---------------------------------------------------------------------------
0000D7E0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D7E0                            ; ---------------------------------------------------------------------------
0000D7E0 0000                       		dc.w byte_CE02-Map_obj7F
0000D7E2 0000                       		dc.w byte_CE08-Map_obj7F
0000D7E4 0000                       		dc.w byte_CE0E-Map_obj7F
0000D7E6 0000                       		dc.w byte_CE14-Map_obj7F
0000D7E8 0000                       		dc.w byte_CE1A-Map_obj7F
0000D7EA 0000                       		dc.w byte_CE20-Map_obj7F
0000D7EC 0000                       		dc.w byte_CE26-Map_obj7F
0000D7EE 01                         byte_CE02:	dc.b 1
0000D7EF F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D7F4 01                         byte_CE08:	dc.b 1
0000D7F5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D7FA 01                         byte_CE0E:	dc.b 1
0000D7FB F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D800 01                         byte_CE14:	dc.b 1
0000D801 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D806 01                         byte_CE1A:	dc.b 1
0000D807 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D80C 01                         byte_CE20:	dc.b 1
0000D80D F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D812 00                         byte_CE26:	dc.b 0			; Blank frame
0000D814 00                         		even
0000D814 00                         		even
0000D814                            
0000D814                            ; ===========================================================================
0000D814                            ; ---------------------------------------------------------------------------
0000D814                            ; Object 36 - spikes
0000D814                            ; ---------------------------------------------------------------------------
0000D814                            
0000D814                            Obj36:					; XREF: Obj_Index
0000D814 7000                       		moveq	#0,d0
0000D816 1028 0024                  		move.b	$24(a0),d0
0000D81A 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D81E 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D822                            ; ===========================================================================
0000D822 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D824 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D826                            
0000D826 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D828 0110                       		dc.b 1,	$10
0000D82A 0204                       		dc.b 2,	4
0000D82C 031C                       		dc.b 3,	$1C
0000D82E 0440                       		dc.b 4,	$40
0000D830 0510                       		dc.b 5,	$10
0000D832                            ; ===========================================================================
0000D832                            
0000D832                            Obj36_Main:				; XREF: Obj36_Index
0000D832 5428 0024                  		addq.b	#2,$24(a0)
0000D836 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D83E 317C 051B 0002             		move.w	#$51B,2(a0)
0000D844 0028 0004 0001             		ori.b	#4,1(a0)
0000D84A 117C 0004 0018             		move.b	#4,$18(a0)
0000D850 1028 0028                  		move.b	$28(a0),d0
0000D854 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D85A 0240 00F0                  		andi.w	#$F0,d0
0000D85E 43F9 0000 D826             		lea	(Obj36_Var).l,a1
0000D864 E648                       		lsr.w	#3,d0
0000D866 D2C0                       		adda.w	d0,a1
0000D868 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D86C 1159 0019                  		move.b	(a1)+,$19(a0)
0000D870 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D876 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D87C                            
0000D87C                            Obj36_Solid:				; XREF: Obj36_Index
0000D87C 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D880 343C 0004                  		move.w	#4,d2
0000D884 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D88A 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D88C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D892 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D894 343C 0014                  		move.w	#$14,d2
0000D898                            
0000D898                            ; Spikes types $1x and $5x face	sideways
0000D898                            
0000D898                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D898 323C 001B                  		move.w	#$1B,d1
0000D89C 3602                       		move.w	d2,d3
0000D89E 5243                       		addq.w	#1,d3
0000D8A0 3828 0008                  		move.w	8(a0),d4
0000D8A4 6100 0000                  		bsr.w	SolidObject
0000D8A8 0828 0003 0022             		btst	#3,$22(a0)
0000D8AE 6600                       		bne.s	Obj36_Display
0000D8B0 0C44 0001                  		cmpi.w	#1,d4
0000D8B4 6700                       		beq.s	Obj36_Hurt
0000D8B6 6000                       		bra.s	Obj36_Display
0000D8B8                            ; ===========================================================================
0000D8B8                            
0000D8B8                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D8B8                            
0000D8B8                            Obj36_Upright:				; XREF: Obj36_Solid
0000D8B8 7200                       		moveq	#0,d1
0000D8BA 1228 0019                  		move.b	$19(a0),d1
0000D8BE 0641 000B                  		addi.w	#$B,d1
0000D8C2 343C 0010                  		move.w	#$10,d2
0000D8C6 363C 0011                  		move.w	#$11,d3
0000D8CA 3828 0008                  		move.w	8(a0),d4
0000D8CE 6100 0000                  		bsr.w	SolidObject
0000D8D2 0828 0003 0022             		btst	#3,$22(a0)
0000D8D8 6600                       		bne.s	Obj36_Hurt
0000D8DA 4A44                       		tst.w	d4
0000D8DC 6A00                       		bpl.s	Obj36_Display
0000D8DE                            
0000D8DE                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D8DE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D8E2 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D8E4 2F08                       		move.l	a0,-(sp)
0000D8E6 2448                       		movea.l	a0,a2
0000D8E8 41F8 D000                  		lea	($FFFFD000).w,a0
0000D8EC 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D8F2 6400                       		bcc.s	loc_CF20
0000D8F4 2628 000C                  		move.l	$C(a0),d3
0000D8F8 3028 0012                  		move.w	$12(a0),d0
0000D8FC 48C0                       		ext.l	d0
0000D8FE E180                       		asl.l	#8,d0
0000D900 9680                       		sub.l	d0,d3
0000D902 2143 000C                  		move.l	d3,$C(a0)
0000D906 4EB9 0000 0000             		jsr	HurtSonic
0000D90C                            
0000D90C                            loc_CF20:
0000D90C 205F                       		movea.l	(sp)+,a0
0000D90E                            
0000D90E                            Obj36_Display:
0000D90E 6100 0000                  		bsr.w	DisplaySprite
0000D912 3028 0030                  		move.w	$30(a0),d0
0000D916 0240 FF80                  		andi.w	#$FF80,d0
0000D91A 3238 F700                  		move.w	($FFFFF700).w,d1
0000D91E 0441 0080                  		subi.w	#$80,d1
0000D922 0241 FF80                  		andi.w	#$FF80,d1
0000D926 9041                       		sub.w	d1,d0
0000D928 0C40 0280                  		cmpi.w	#$280,d0
0000D92C 6200 0000                  		bhi.w	DeleteObject
0000D930 4E75                       		rts	
0000D932                            ; ===========================================================================
0000D932                            
0000D932                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D932 7000                       		moveq	#0,d0
0000D934 1028 0028                  		move.b	$28(a0),d0
0000D938 D040                       		add.w	d0,d0
0000D93A 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D93E 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D942                            ; ===========================================================================
0000D942 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D944 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D946 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D948                            ; ===========================================================================
0000D948                            
0000D948                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D948 4E75                       		rts			; don't move the object
0000D94A                            ; ===========================================================================
0000D94A                            
0000D94A                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D94A 6100 0000                  		bsr.w	Obj36_Wait
0000D94E 7000                       		moveq	#0,d0
0000D950 1028 0034                  		move.b	$34(a0),d0
0000D954 D068 0032                  		add.w	$32(a0),d0
0000D958 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D95C 4E75                       		rts	
0000D95E                            ; ===========================================================================
0000D95E                            
0000D95E                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D95E 6100 0000                  		bsr.w	Obj36_Wait
0000D962 7000                       		moveq	#0,d0
0000D964 1028 0034                  		move.b	$34(a0),d0
0000D968 D068 0030                  		add.w	$30(a0),d0
0000D96C 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D970 4E75                       		rts	
0000D972                            ; ===========================================================================
0000D972                            
0000D972                            Obj36_Wait:
0000D972 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D976 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D978 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D97C 6600                       		bne.s	locret_CFE6
0000D97E 4A28 0001                  		tst.b	1(a0)
0000D982 6A00                       		bpl.s	locret_CFE6
0000D984 303C 00B6                  		move.w	#$B6,d0
0000D988 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D98E 6000                       		bra.s	locret_CFE6
0000D990                            ; ===========================================================================
0000D990                            
0000D990                            loc_CFA4:
0000D990 4A68 0036                  		tst.w	$36(a0)
0000D994 6700                       		beq.s	loc_CFC6
0000D996 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D99C 6400                       		bcc.s	locret_CFE6
0000D99E 317C 0000 0034             		move.w	#0,$34(a0)
0000D9A4 317C 0000 0036             		move.w	#0,$36(a0)
0000D9AA 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D9B0 6000                       		bra.s	locret_CFE6
0000D9B2                            ; ===========================================================================
0000D9B2                            
0000D9B2                            loc_CFC6:
0000D9B2 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D9B8 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D9BE 6500                       		bcs.s	locret_CFE6
0000D9C0 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D9C6 317C 0001 0036             		move.w	#1,$36(a0)
0000D9CC 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D9D2                            
0000D9D2                            locret_CFE6:
0000D9D2 4E75                       		rts	
0000D9D4                            ; ===========================================================================
0000D9D4                            ; ---------------------------------------------------------------------------
0000D9D4                            ; Sprite mappings - spikes
0000D9D4                            ; ---------------------------------------------------------------------------
0000D9D4                            Map_obj36:
0000D9D4                            	include "_maps\obj36.asm"
0000D9D4                            Map_obj36_inner:
0000D9D4 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000D9D6 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000D9D8 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000D9DA 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000D9DC 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000D9DE 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000D9E0 03                         Map_obj36_inner_C: 	dc.b $3
0000D9E1 F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000D9E6 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D9EB F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000D9F0 03                         Map_obj36_inner_1C: 	dc.b $3
0000D9F1 EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000D9F6 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D9FB 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000DA00 01                         Map_obj36_inner_2C: 	dc.b $1
0000DA01 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DA06 03                         Map_obj36_inner_32: 	dc.b $3
0000DA07 F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000DA0C F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DA11 F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000DA16 06                         Map_obj36_inner_42: 	dc.b $6
0000DA17 F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000DA1C F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000DA21 F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000DA26 F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000DA2B F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000DA30 F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000DA35 01                         Map_obj36_inner_61: 	dc.b $1
0000DA36 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000DA3C 00                         	even
0000DA3C 00                         	even
0000DA3C                            
0000DA3C                            ; ===========================================================================
0000DA3C                            ; ---------------------------------------------------------------------------
0000DA3C                            ; Object 3B - purple rock (GHZ)
0000DA3C                            ; ---------------------------------------------------------------------------
0000DA3C                            
0000DA3C                            Obj3B:					; XREF: Obj_Index
0000DA3C 7000                       		moveq	#0,d0
0000DA3E 1028 0024                  		move.b	$24(a0),d0
0000DA42 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000DA46 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000DA4A                            ; ===========================================================================
0000DA4A 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000DA4C 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000DA4E                            ; ===========================================================================
0000DA4E                            
0000DA4E                            Obj3B_Main:				; XREF: Obj3B_Index
0000DA4E 5428 0024                  		addq.b	#2,$24(a0)
0000DA52 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000DA5A 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000DA60 117C 0004 0001             		move.b	#4,1(a0)
0000DA66 117C 0013 0019             		move.b	#$13,$19(a0)
0000DA6C 117C 0004 0018             		move.b	#4,$18(a0)
0000DA72                            
0000DA72                            Obj3B_Solid:				; XREF: Obj3B_Index
0000DA72 323C 001B                  		move.w	#$1B,d1
0000DA76 343C 0010                  		move.w	#$10,d2
0000DA7A 363C 0010                  		move.w	#$10,d3
0000DA7E 3828 0008                  		move.w	8(a0),d4
0000DA82 6100 0000                  		bsr.w	SolidObject
0000DA86 6100 0000                  		bsr.w	DisplaySprite
0000DA8A 3028 0008                  		move.w	8(a0),d0
0000DA8E 0240 FF80                  		andi.w	#$FF80,d0
0000DA92 3238 F700                  		move.w	($FFFFF700).w,d1
0000DA96 0441 0080                  		subi.w	#$80,d1
0000DA9A 0241 FF80                  		andi.w	#$FF80,d1
0000DA9E 9041                       		sub.w	d1,d0
0000DAA0 0C40 0280                  		cmpi.w	#$280,d0
0000DAA4 6200 0000                  		bhi.w	DeleteObject
0000DAA8 4E75                       		rts	
0000DAAA                            ; ===========================================================================
0000DAAA                            ; ---------------------------------------------------------------------------
0000DAAA                            ; Object 49 - waterfall	sound effect (GHZ)
0000DAAA                            ; ---------------------------------------------------------------------------
0000DAAA                            
0000DAAA                            Obj49:					; XREF: Obj_Index
0000DAAA 7000                       		moveq	#0,d0
0000DAAC 1028 0024                  		move.b	$24(a0),d0
0000DAB0 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000DAB4 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000DAB8                            ; ===========================================================================
0000DAB8 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000DABA 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000DABC                            ; ===========================================================================
0000DABC                            
0000DABC                            Obj49_Main:				; XREF: Obj49_Index
0000DABC 5428 0024                  		addq.b	#2,$24(a0)
0000DAC0 117C 0004 0001             		move.b	#4,1(a0)
0000DAC6                            
0000DAC6                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000DAC6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DACA 0200 003F                  		andi.b	#$3F,d0
0000DACE 6600                       		bne.s	Obj49_ChkDel
0000DAD0 303C 00D0                  		move.w	#$D0,d0
0000DAD4 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000DADA                            
0000DADA                            Obj49_ChkDel:
0000DADA 3028 0008                  		move.w	8(a0),d0
0000DADE 0240 FF80                  		andi.w	#$FF80,d0
0000DAE2 3238 F700                  		move.w	($FFFFF700).w,d1
0000DAE6 0441 0080                  		subi.w	#$80,d1
0000DAEA 0241 FF80                  		andi.w	#$FF80,d1
0000DAEE 9041                       		sub.w	d1,d0
0000DAF0 0C40 0280                  		cmpi.w	#$280,d0
0000DAF4 6200 0000                  		bhi.w	DeleteObject
0000DAF8 4E75                       		rts	
0000DAFA                            ; ===========================================================================
0000DAFA                            ; ---------------------------------------------------------------------------
0000DAFA                            ; Sprite mappings - purple rock	(GHZ)
0000DAFA                            ; ---------------------------------------------------------------------------
0000DAFA                            Map_obj3B:
0000DAFA                            	include "_maps\obj3B.asm"
0000DAFA                            ; ---------------------------------------------------------------------------
0000DAFA                            ; Sprite mappings - purple rock	(GHZ)
0000DAFA                            ; ---------------------------------------------------------------------------
0000DAFA 0000                       		dc.w byte_D110-Map_obj3B
0000DAFC 02                         byte_D110:	dc.b 2
0000DAFD F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000DB02 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000DB08 00                         		even
0000DB08 00                         		even
0000DB08                            
0000DB08                            ; ===========================================================================
0000DB08                            ; ---------------------------------------------------------------------------
0000DB08                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000DB08                            ; ---------------------------------------------------------------------------
0000DB08                            
0000DB08                            Obj3C:					; XREF: Obj_Index
0000DB08 7000                       		moveq	#0,d0
0000DB0A 1028 0024                  		move.b	$24(a0),d0
0000DB0E 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000DB12 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000DB16 6000 0000                  		bra.w	MarkObjGone
0000DB1A                            ; ===========================================================================
0000DB1A 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000DB1C 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000DB1E 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000DB20                            ; ===========================================================================
0000DB20                            
0000DB20                            Obj3C_Main:				; XREF: Obj3C_Index
0000DB20 5428 0024                  		addq.b	#2,$24(a0)
0000DB24 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000DB2C 317C 450F 0002             		move.w	#$450F,2(a0)
0000DB32 117C 0004 0001             		move.b	#4,1(a0)
0000DB38 117C 0010 0019             		move.b	#$10,$19(a0)
0000DB3E 117C 0004 0018             		move.b	#4,$18(a0)
0000DB44 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000DB4A                            
0000DB4A                            Obj3C_Solid:				; XREF: Obj3C_Index
0000DB4A 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000DB50 323C 001B                  		move.w	#$1B,d1
0000DB54 343C 0020                  		move.w	#$20,d2
0000DB58 363C 0020                  		move.w	#$20,d3
0000DB5C 3828 0008                  		move.w	8(a0),d4
0000DB60 6100 0000                  		bsr.w	SolidObject
0000DB64 0828 0005 0022             		btst	#5,$22(a0)
0000DB6A 6600                       		bne.s	Obj3C_ChkRoll
0000DB6C                            
0000DB6C                            locret_D180:
0000DB6C 4E75                       		rts	
0000DB6E                            ; ===========================================================================
0000DB6E                            
0000DB6E                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000DB6E 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000DB74 66F6                       		bne.s	locret_D180	; if not, branch
0000DB76 3028 0030                  		move.w	$30(a0),d0
0000DB7A 6A00                       		bpl.s	Obj3C_ChkSpeed
0000DB7C 4440                       		neg.w	d0
0000DB7E                            
0000DB7E                            Obj3C_ChkSpeed:
0000DB7E 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000DB82 65E8                       		bcs.s	locret_D180	; if not, branch
0000DB84 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000DB8A 5869 0008                  		addq.w	#4,8(a1)
0000DB8E 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000DB94 3028 0008                  		move.w	8(a0),d0
0000DB98 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000DB9C 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000DB9E 5169 0008                  		subq.w	#8,8(a1)
0000DBA2 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000DBA8                            
0000DBA8                            Obj3C_Smash:
0000DBA8 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DBAE 08A8 0005 0022             		bclr	#5,$22(a0)
0000DBB4 08A9 0005 0022             		bclr	#5,$22(a1)
0000DBBA 7207                       		moveq	#7,d1		; load 8 fragments
0000DBBC 343C 0070                  		move.w	#$70,d2
0000DBC0 6100                       		bsr.s	SmashObject
0000DBC2                            
0000DBC2                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DBC2 6100 0000                  		bsr.w	SpeedToPos
0000DBC6 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000DBCC 6100 0000                  		bsr.w	DisplaySprite
0000DBD0 4A28 0001                  		tst.b	1(a0)
0000DBD4 6A00 0000                  		bpl.w	DeleteObject
0000DBD8 4E75                       		rts	
0000DBDA                            
0000DBDA                            ; ---------------------------------------------------------------------------
0000DBDA                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DBDA                            ; ---------------------------------------------------------------------------
0000DBDA                            
0000DBDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBDA                            
0000DBDA                            
0000DBDA                            SmashObject:				; XREF: Obj3C_Smash
0000DBDA 7000                       		moveq	#0,d0
0000DBDC 1028 001A                  		move.b	$1A(a0),d0
0000DBE0 D040                       		add.w	d0,d0
0000DBE2 2668 0004                  		movea.l	4(a0),a3
0000DBE6 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DBEA 524B                       		addq.w	#1,a3
0000DBEC 08E8 0005 0001             		bset	#5,1(a0)
0000DBF2 1810                       		move.b	0(a0),d4
0000DBF4 1A28 0001                  		move.b	1(a0),d5
0000DBF8 2248                       		movea.l	a0,a1
0000DBFA 6000                       		bra.s	Smash_LoadFrag
0000DBFC                            ; ===========================================================================
0000DBFC                            
0000DBFC                            Smash_Loop:
0000DBFC 6100 0000                  		bsr.w	SingleObjLoad
0000DC00 6600                       		bne.s	Smash_PlaySnd
0000DC02 5A4B                       		addq.w	#5,a3
0000DC04                            
0000DC04                            Smash_LoadFrag:				; XREF: SmashObject
0000DC04 137C 0004 0024             		move.b	#4,$24(a1)
0000DC0A 1284                       		move.b	d4,0(a1)
0000DC0C 234B 0004                  		move.l	a3,4(a1)
0000DC10 1345 0001                  		move.b	d5,1(a1)
0000DC14 3368 0008 0008             		move.w	8(a0),8(a1)
0000DC1A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DC20 3368 0002 0002             		move.w	2(a0),2(a1)
0000DC26 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DC2C 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DC32 335C 0010                  		move.w	(a4)+,$10(a1)
0000DC36 335C 0012                  		move.w	(a4)+,$12(a1)
0000DC3A B3C8                       		cmpa.l	a0,a1
0000DC3C 6400                       		bcc.s	loc_D268
0000DC3E 2F08                       		move.l	a0,-(sp)
0000DC40 2049                       		movea.l	a1,a0
0000DC42 6100 0000                  		bsr.w	SpeedToPos
0000DC46 D568 0012                  		add.w	d2,$12(a0)
0000DC4A 205F                       		movea.l	(sp)+,a0
0000DC4C 6100 0000                  		bsr.w	DisplaySprite2
0000DC50                            
0000DC50                            loc_D268:
0000DC50 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DC54                            
0000DC54                            Smash_PlaySnd:
0000DC54 303C 00CB                  		move.w	#$CB,d0
0000DC58 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DC5E                            ; End of function SmashObject
0000DC5E                            
0000DC5E                            ; ===========================================================================
0000DC5E                            ; Smashed block	fragment speeds
0000DC5E                            ;
0000DC5E 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DC62 0600 FF00                  		dc.w $600, $FF00
0000DC66 0600 0100                  		dc.w $600, $100
0000DC6A 0400 0500                  		dc.w $400, $500
0000DC6E 0600 FA00                  		dc.w $600, $FA00
0000DC72 0800 FE00                  		dc.w $800, $FE00
0000DC76 0800 0200                  		dc.w $800, $200
0000DC7A 0600 0600                  		dc.w $600, $600
0000DC7E                            
0000DC7E FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DC82 F800 FE00                  		dc.w $F800, $FE00
0000DC86 F800 0200                  		dc.w $F800, $200
0000DC8A FA00 0600                  		dc.w $FA00, $600
0000DC8E FC00 FB00                  		dc.w $FC00, $FB00
0000DC92 FA00 FF00                  		dc.w $FA00, $FF00
0000DC96 FA00 0100                  		dc.w $FA00, $100
0000DC9A FC00 0500                  		dc.w $FC00, $500
0000DC9E                            ; ---------------------------------------------------------------------------
0000DC9E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DC9E                            ; ---------------------------------------------------------------------------
0000DC9E                            Map_obj3C:
0000DC9E                            	include "_maps\obj3C.asm"
0000DC9E                            ; ---------------------------------------------------------------------------
0000DC9E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DC9E                            ; ---------------------------------------------------------------------------
0000DC9E 0000                       		dc.w byte_D2BC-Map_obj3C
0000DCA0 0000                       		dc.w byte_D2E5-Map_obj3C
0000DCA2 0000                       		dc.w byte_D30E-Map_obj3C
0000DCA4 08                         byte_D2BC:	dc.b 8
0000DCA5 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DCAA F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DCAF 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DCB4 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DCB9 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DCBE F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DCC3 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DCC8 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DCCD 08                         byte_D2E5:	dc.b 8
0000DCCE E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DCD3 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DCD8 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DCDD 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DCE2 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DCE7 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DCEC 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DCF1 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DCF6 08                         byte_D30E:	dc.b 8
0000DCF7 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DCFC F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DD01 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DD06 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DD0B E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DD10 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DD15 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DD1A 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DD20 00                         		even
0000DD20 00                         		even
0000DD20                            
0000DD20                            ; ---------------------------------------------------------------------------
0000DD20                            ; Object code loading subroutine
0000DD20                            ; ---------------------------------------------------------------------------
0000DD20                            
0000DD20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD20                            
0000DD20                            
0000DD20                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DD20 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DD24 7E7F                       		moveq	#$7F,d7
0000DD26 7000                       		moveq	#0,d0
0000DD28 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DD2E 6400                       		bcc.s	loc_D362
0000DD30                            
0000DD30                            loc_D348:
0000DD30 1010                       		move.b	(a0),d0		; load object number from RAM
0000DD32 6700                       		beq.s	loc_D358
0000DD34 D040                       		add.w	d0,d0
0000DD36 D040                       		add.w	d0,d0
0000DD38 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DD3C 4E91                       		jsr	(a1)		; run the object's code
0000DD3E 7000                       		moveq	#0,d0
0000DD40                            
0000DD40                            loc_D358:
0000DD40 41E8 0040                  		lea	$40(a0),a0	; next object
0000DD44 51CF FFEA                  		dbf	d7,loc_D348
0000DD48 4E75                       		rts	
0000DD4A                            ; ===========================================================================
0000DD4A                            
0000DD4A                            loc_D362:
0000DD4A 7E1F                       		moveq	#$1F,d7
0000DD4C 61E2                       		bsr.s	loc_D348
0000DD4E 7E5F                       		moveq	#$5F,d7
0000DD50                            
0000DD50                            loc_D368:
0000DD50 7000                       		moveq	#0,d0
0000DD52 1010                       		move.b	(a0),d0
0000DD54 6700                       		beq.s	loc_D378
0000DD56 4A28 0001                  		tst.b	1(a0)
0000DD5A 6A00                       		bpl.s	loc_D378
0000DD5C 6100 0000                  		bsr.w	DisplaySprite
0000DD60                            
0000DD60                            loc_D378:
0000DD60 41E8 0040                  		lea	$40(a0),a0
0000DD64                            
0000DD64                            loc_D37C:
0000DD64 51CF FFEA                  		dbf	d7,loc_D368
0000DD68 4E75                       		rts	
0000DD6A                            ; End of function ObjectsLoad
0000DD6A                            
0000DD6A                            ; ===========================================================================
0000DD6A                            ; ---------------------------------------------------------------------------
0000DD6A                            ; Object pointers
0000DD6A                            ; ---------------------------------------------------------------------------
0000DD6A                            Obj_Index:
0000DD6A                            	include "_inc\Object pointers.asm"
0000DD6A                            ; ---------------------------------------------------------------------------
0000DD6A                            ; Object pointers
0000DD6A                            ; ---------------------------------------------------------------------------
0000DD6A 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DD7A 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DD8A 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DD9A 0000 0000 0000 AF94 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DDAA 0000 7B2C 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DDBA 0000 8152 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DDCA 0000 89A0 0000 8A9A 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DDDA 0000 90E4 0000 93D2 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DDEA 0000 0000 0000 A090 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DDFA 0000 A3C8 0000 A9B4 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DE0A 0000 9CEC 0000 91BA 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DE1A 0000 B58C 0000 ABA8 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DE2A 0000 BFA0 0000 C64E 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DE3A 0000 BAFE 0000 D814 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DE4A 0000 CDF4 0000 CEAE 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DE5A 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DE6A 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DE7A 0000 C2BC 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DE8A 0000 DAAA 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DE9A 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DEAA 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DEBA 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DECA 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DEDA 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DEEA 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DEFA 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DF0A 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DF1A 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DF2A 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DF3A 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DF4A 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DF5A 0000 0000 0000 D0F0 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DF6A 0000 55D8 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DF7A 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DF8A 0000 5C92 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DF8A 0000 5C92 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DF9A                            
0000DF9A                            ; ---------------------------------------------------------------------------
0000DF9A                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DF9A                            ; ---------------------------------------------------------------------------
0000DF9A                            
0000DF9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF9A                            
0000DF9A                            
0000DF9A                            ObjectFall:
0000DF9A 2428 0008                  		move.l	8(a0),d2
0000DF9E 2628 000C                  		move.l	$C(a0),d3
0000DFA2 3028 0010                  		move.w	$10(a0),d0
0000DFA6 48C0                       		ext.l	d0
0000DFA8 E180                       		asl.l	#8,d0
0000DFAA D480                       		add.l	d0,d2
0000DFAC 3028 0012                  		move.w	$12(a0),d0
0000DFB0 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DFB6 48C0                       		ext.l	d0
0000DFB8 E180                       		asl.l	#8,d0
0000DFBA D680                       		add.l	d0,d3
0000DFBC 2142 0008                  		move.l	d2,8(a0)
0000DFC0 2143 000C                  		move.l	d3,$C(a0)
0000DFC4 4E75                       		rts	
0000DFC6                            ; End of function ObjectFall
0000DFC6                            
0000DFC6                            ; ---------------------------------------------------------------------------
0000DFC6                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DFC6                            ; ---------------------------------------------------------------------------
0000DFC6                            
0000DFC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFC6                            
0000DFC6                            
0000DFC6                            ObjectFallNoJump:
0000DFC6 2428 0008                  		move.l	8(a0),d2
0000DFCA 2628 000C                  		move.l	$C(a0),d3
0000DFCE 3028 0010                  		move.w	$10(a0),d0
0000DFD2 48C0                       		ext.l	d0
0000DFD4 E180                       		asl.l	#8,d0
0000DFD6 D480                       		add.l	d0,d2
0000DFD8                            ;		cmpi.b	#1,obID(a0)
0000DFD8                            ;		beq.s	ObjectFallSonic
0000DFD8 3028 000C                  		move.w	$C(a0),d0
0000DFDC 5868 000C                  		addi.w	#4,$C(a0)	; increase vertical speed
0000DFE0                            ;		ext.l	d0
0000DFE0                            ;		asl.l	#8,d0
0000DFE0                            ;		add.l	d0,d3
0000DFE0 2142 0008                  		move.l	d2,$8(a0)
0000DFE4                            ;		move.l	d3,obY(a0)
0000DFE4 4E75                       		rts	
0000DFE6                            
0000DFE6                            ; End of function ObjectFall
0000DFE6                            
0000DFE6                            JumpFallSonic:
0000DFE6 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000DFEC                                    
0000DFEC E180                               asl.l    #8,d0                ; Apply X speed
0000DFEE D1A8 0008                          add.l    d0,$8(a0)
0000DFF2                                    
0000DFF2 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000DFF6 4A41                               tst.w    d1                ; Are we falling?
0000DFF8 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000DFFA 4440                               neg.w    d0                ; Make Y movement go up
0000DFFC                                    
0000DFFC                            .SetYSpeed:
0000DFFC 48C0                               ext.l    d0                ; Apply Y speed
0000DFFE E180                               asl.l    #8,d0
0000E000 D1A8 000C                          add.l    d0,$C(a0)
0000E004 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000E00A 4E75                               rts
0000E00C                            
0000E00C                            ; ---------------------------------------------------------------------------
0000E00C                            ; Subroutine translating object	speed to update	object position
0000E00C                            ; ---------------------------------------------------------------------------
0000E00C                            
0000E00C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E00C                            
0000E00C                            
0000E00C                            SpeedToPos:
0000E00C 2428 0008                  		move.l	8(a0),d2
0000E010 2628 000C                  		move.l	$C(a0),d3
0000E014 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E018 48C0                       		ext.l	d0
0000E01A E180                       		asl.l	#8,d0		; multiply speed by $100
0000E01C D480                       		add.l	d0,d2		; add to x-axis	position
0000E01E 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E022 48C0                       		ext.l	d0
0000E024 E180                       		asl.l	#8,d0		; multiply by $100
0000E026 D680                       		add.l	d0,d3		; add to y-axis	position
0000E028 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000E02C 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000E030 4E75                       		rts	
0000E032                            ; End of function SpeedToPos
0000E032                            
0000E032                            ; ---------------------------------------------------------------------------
0000E032                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E032                            ; ---------------------------------------------------------------------------
0000E032                            
0000E032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E032                            
0000E032                            
0000E032                            DisplaySprite:
0000E032 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E036 3028 0018                  		move.w	$18(a0),d0
0000E03A E248                       		lsr.w	#1,d0
0000E03C 0240 0380                  		andi.w	#$380,d0
0000E040 D2C0                       		adda.w	d0,a1
0000E042 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E046 6400                       		bcc.s	locret_D620
0000E048 5451                       		addq.w	#2,(a1)
0000E04A D2D1                       		adda.w	(a1),a1
0000E04C 3288                       		move.w	a0,(a1)
0000E04E                            
0000E04E                            locret_D620:
0000E04E 4E75                       		rts	
0000E050                            ; End of function DisplaySprite
0000E050                            
0000E050                            ; ---------------------------------------------------------------------------
0000E050                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E050                            ; ---------------------------------------------------------------------------
0000E050                            
0000E050                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E050                            
0000E050                            
0000E050                            DisplaySprite2:
0000E050 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E054 3029 0018                  		move.w	$18(a1),d0
0000E058 E248                       		lsr.w	#1,d0
0000E05A 0240 0380                  		andi.w	#$380,d0
0000E05E D4C0                       		adda.w	d0,a2
0000E060 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E064 6400                       		bcc.s	locret_D63E
0000E066 5452                       		addq.w	#2,(a2)
0000E068 D4D2                       		adda.w	(a2),a2
0000E06A 3489                       		move.w	a1,(a2)
0000E06C                            
0000E06C                            locret_D63E:
0000E06C 4E75                       		rts	
0000E06E                            ; End of function DisplaySprite2
0000E06E                            
0000E06E                            ; ---------------------------------------------------------------------------
0000E06E                            ; Subroutine to	delete an object
0000E06E                            ; ---------------------------------------------------------------------------
0000E06E                            
0000E06E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E06E                            
0000E06E                            
0000E06E                            DeleteObject:
0000E06E 2248                       		movea.l	a0,a1
0000E070                            
0000E070                            DeleteObject2:
0000E070 7200                       		moveq	#0,d1
0000E072 700F                       		moveq	#$F,d0
0000E074                            
0000E074                            loc_D646:
0000E074 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E076 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E07A 4E75                       		rts	
0000E07C                            ; End of function DeleteObject
0000E07C                            
0000E07C                            ; ===========================================================================
0000E07C 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E080 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E084 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E088 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E08C                            ; ---------------------------------------------------------------------------
0000E08C                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E08C                            ; ---------------------------------------------------------------------------
0000E08C                            
0000E08C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E08C                            
0000E08C                            
0000E08C                            BuildSprites:				; XREF: TitleScreen; et al
0000E08C 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E090 7A00                       		moveq	#0,d5
0000E092 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E096 7E07                       		moveq	#7,d7
0000E098                            
0000E098                            loc_D66A:
0000E098 4A54                       		tst.w	(a4)
0000E09A 6700 0000                  		beq.w	loc_D72E
0000E09E 7C02                       		moveq	#2,d6
0000E0A0                            
0000E0A0                            loc_D672:
0000E0A0 3074 6000                  		movea.w	(a4,d6.w),a0
0000E0A4 4A10                       		tst.b	(a0)
0000E0A6 6700 0000                  		beq.w	loc_D726
0000E0AA 08A8 0007 0001             		bclr	#7,1(a0)
0000E0B0 1028 0001                  		move.b	1(a0),d0
0000E0B4 1800                       		move.b	d0,d4
0000E0B6 0240 000C                  		andi.w	#$C,d0
0000E0BA 6700                       		beq.s	loc_D6DE
0000E0BC 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E0C0 7000                       		moveq	#0,d0
0000E0C2 1028 0019                  		move.b	$19(a0),d0
0000E0C6 3628 0008                  		move.w	8(a0),d3
0000E0CA 9651                       		sub.w	(a1),d3
0000E0CC 3203                       		move.w	d3,d1
0000E0CE D240                       		add.w	d0,d1
0000E0D0 6B00 0000                  		bmi.w	loc_D726
0000E0D4 3203                       		move.w	d3,d1
0000E0D6 9240                       		sub.w	d0,d1
0000E0D8 0C41 0140                  		cmpi.w	#$140,d1
0000E0DC 6C00                       		bge.s	loc_D726
0000E0DE 0643 0080                  		addi.w	#$80,d3
0000E0E2 0804 0004                  		btst	#4,d4
0000E0E6 6700                       		beq.s	loc_D6E8
0000E0E8 7000                       		moveq	#0,d0
0000E0EA 1028 0016                  		move.b	$16(a0),d0
0000E0EE 3428 000C                  		move.w	$C(a0),d2
0000E0F2 9469 0004                  		sub.w	4(a1),d2
0000E0F6 3202                       		move.w	d2,d1
0000E0F8 D240                       		add.w	d0,d1
0000E0FA 6B00                       		bmi.s	loc_D726
0000E0FC 3202                       		move.w	d2,d1
0000E0FE 9240                       		sub.w	d0,d1
0000E100 0C41 00E0                  		cmpi.w	#$E0,d1
0000E104 6C00                       		bge.s	loc_D726
0000E106 0642 0080                  		addi.w	#$80,d2
0000E10A 6000                       		bra.s	loc_D700
0000E10C                            ; ===========================================================================
0000E10C                            
0000E10C                            loc_D6DE:
0000E10C 3428 000A                  		move.w	$A(a0),d2
0000E110 3628 0008                  		move.w	8(a0),d3
0000E114 6000                       		bra.s	loc_D700
0000E116                            ; ===========================================================================
0000E116                            
0000E116                            loc_D6E8:
0000E116 3428 000C                  		move.w	$C(a0),d2
0000E11A 9469 0004                  		sub.w	4(a1),d2
0000E11E 0642 0080                  		addi.w	#$80,d2
0000E122 0C42 0060                  		cmpi.w	#$60,d2
0000E126 6500                       		bcs.s	loc_D726
0000E128 0C42 0180                  		cmpi.w	#$180,d2
0000E12C 6400                       		bcc.s	loc_D726
0000E12E                            
0000E12E                            loc_D700:
0000E12E 2268 0004                  		movea.l	4(a0),a1
0000E132 7200                       		moveq	#0,d1
0000E134 0804 0005                  		btst	#5,d4
0000E138 6600                       		bne.s	loc_D71C
0000E13A 1228 001A                  		move.b	$1A(a0),d1
0000E13E D201                       		add.b	d1,d1
0000E140 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E144 1219                       		move.b	(a1)+,d1
0000E146 5301                       		subq.b	#1,d1
0000E148 6B00                       		bmi.s	loc_D720
0000E14A                            
0000E14A                            loc_D71C:
0000E14A 6100 0000                  		bsr.w	sub_D750
0000E14E                            
0000E14E                            loc_D720:
0000E14E 08E8 0007 0001             		bset	#7,1(a0)
0000E154                            
0000E154                            loc_D726:
0000E154 5446                       		addq.w	#2,d6
0000E156 5554                       		subq.w	#2,(a4)
0000E158 6600 FF46                  		bne.w	loc_D672
0000E15C                            
0000E15C                            loc_D72E:
0000E15C 49EC 0080                  		lea	$80(a4),a4
0000E160 51CF FF36                  		dbf	d7,loc_D66A
0000E164 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E168 0C05 0050                  		cmpi.b	#$50,d5
0000E16C 6700                       		beq.s	loc_D748
0000E16E 24BC 0000 0000             		move.l	#0,(a2)
0000E174 4E75                       		rts	
0000E176                            ; ===========================================================================
0000E176                            
0000E176                            loc_D748:
0000E176 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E17C 4E75                       		rts	
0000E17E                            ; End of function BuildSprites
0000E17E                            
0000E17E                            
0000E17E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E17E                            
0000E17E                            
0000E17E                            sub_D750:				; XREF: BuildSprites
0000E17E 3668 0002                  		movea.w	2(a0),a3
0000E182 0804 0000                  		btst	#0,d4
0000E186 6600                       		bne.s	loc_D796
0000E188 0804 0001                  		btst	#1,d4
0000E18C 6600 0000                  		bne.w	loc_D7E4
0000E190                            ; End of function sub_D750
0000E190                            
0000E190                            
0000E190                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E190                            
0000E190                            
0000E190                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E190 0C05 0050                  		cmpi.b	#$50,d5
0000E194 6700                       		beq.s	locret_D794
0000E196 1019                       		move.b	(a1)+,d0
0000E198 4880                       		ext.w	d0
0000E19A D042                       		add.w	d2,d0
0000E19C 34C0                       		move.w	d0,(a2)+
0000E19E 14D9                       		move.b	(a1)+,(a2)+
0000E1A0 5205                       		addq.b	#1,d5
0000E1A2 14C5                       		move.b	d5,(a2)+
0000E1A4 1019                       		move.b	(a1)+,d0
0000E1A6 E148                       		lsl.w	#8,d0
0000E1A8 1019                       		move.b	(a1)+,d0
0000E1AA D04B                       		add.w	a3,d0
0000E1AC 34C0                       		move.w	d0,(a2)+
0000E1AE 1019                       		move.b	(a1)+,d0
0000E1B0 4880                       		ext.w	d0
0000E1B2 D043                       		add.w	d3,d0
0000E1B4 0240 01FF                  		andi.w	#$1FF,d0
0000E1B8 6600                       		bne.s	loc_D78E
0000E1BA 5240                       		addq.w	#1,d0
0000E1BC                            
0000E1BC                            loc_D78E:
0000E1BC 34C0                       		move.w	d0,(a2)+
0000E1BE 51C9 FFD0                  		dbf	d1,sub_D762
0000E1C2                            
0000E1C2                            locret_D794:
0000E1C2 4E75                       		rts	
0000E1C4                            ; End of function sub_D762
0000E1C4                            
0000E1C4                            ; ===========================================================================
0000E1C4                            
0000E1C4                            loc_D796:
0000E1C4 0804 0001                  		btst	#1,d4
0000E1C8 6600 0000                  		bne.w	loc_D82A
0000E1CC                            
0000E1CC                            loc_D79E:
0000E1CC 0C05 0050                  		cmpi.b	#$50,d5
0000E1D0 6700                       		beq.s	locret_D7E2
0000E1D2 1019                       		move.b	(a1)+,d0
0000E1D4 4880                       		ext.w	d0
0000E1D6 D042                       		add.w	d2,d0
0000E1D8 34C0                       		move.w	d0,(a2)+
0000E1DA 1819                       		move.b	(a1)+,d4
0000E1DC 14C4                       		move.b	d4,(a2)+
0000E1DE 5205                       		addq.b	#1,d5
0000E1E0 14C5                       		move.b	d5,(a2)+
0000E1E2 1019                       		move.b	(a1)+,d0
0000E1E4 E148                       		lsl.w	#8,d0
0000E1E6 1019                       		move.b	(a1)+,d0
0000E1E8 D04B                       		add.w	a3,d0
0000E1EA 0A40 0800                  		eori.w	#$800,d0
0000E1EE 34C0                       		move.w	d0,(a2)+
0000E1F0 1019                       		move.b	(a1)+,d0
0000E1F2 4880                       		ext.w	d0
0000E1F4 4440                       		neg.w	d0
0000E1F6 D804                       		add.b	d4,d4
0000E1F8 0244 0018                  		andi.w	#$18,d4
0000E1FC 5044                       		addq.w	#8,d4
0000E1FE 9044                       		sub.w	d4,d0
0000E200 D043                       		add.w	d3,d0
0000E202 0240 01FF                  		andi.w	#$1FF,d0
0000E206 6600                       		bne.s	loc_D7DC
0000E208 5240                       		addq.w	#1,d0
0000E20A                            
0000E20A                            loc_D7DC:
0000E20A 34C0                       		move.w	d0,(a2)+
0000E20C 51C9 FFBE                  		dbf	d1,loc_D79E
0000E210                            
0000E210                            locret_D7E2:
0000E210 4E75                       		rts	
0000E212                            ; ===========================================================================
0000E212                            
0000E212                            loc_D7E4:				; XREF: sub_D750
0000E212 0C05 0050                  		cmpi.b	#$50,d5
0000E216 6700                       		beq.s	locret_D828
0000E218 1019                       		move.b	(a1)+,d0
0000E21A 1811                       		move.b	(a1),d4
0000E21C 4880                       		ext.w	d0
0000E21E 4440                       		neg.w	d0
0000E220 E70C                       		lsl.b	#3,d4
0000E222 0244 0018                  		andi.w	#$18,d4
0000E226 5044                       		addq.w	#8,d4
0000E228 9044                       		sub.w	d4,d0
0000E22A D042                       		add.w	d2,d0
0000E22C 34C0                       		move.w	d0,(a2)+
0000E22E 14D9                       		move.b	(a1)+,(a2)+
0000E230 5205                       		addq.b	#1,d5
0000E232 14C5                       		move.b	d5,(a2)+
0000E234 1019                       		move.b	(a1)+,d0
0000E236 E148                       		lsl.w	#8,d0
0000E238 1019                       		move.b	(a1)+,d0
0000E23A D04B                       		add.w	a3,d0
0000E23C 0A40 1000                  		eori.w	#$1000,d0
0000E240 34C0                       		move.w	d0,(a2)+
0000E242 1019                       		move.b	(a1)+,d0
0000E244 4880                       		ext.w	d0
0000E246 D043                       		add.w	d3,d0
0000E248 0240 01FF                  		andi.w	#$1FF,d0
0000E24C 6600                       		bne.s	loc_D822
0000E24E 5240                       		addq.w	#1,d0
0000E250                            
0000E250                            loc_D822:
0000E250 34C0                       		move.w	d0,(a2)+
0000E252 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E256                            
0000E256                            locret_D828:
0000E256 4E75                       		rts	
0000E258                            ; ===========================================================================
0000E258                            
0000E258                            loc_D82A:
0000E258 0C05 0050                  		cmpi.b	#$50,d5
0000E25C 6700                       		beq.s	locret_D87C
0000E25E 1019                       		move.b	(a1)+,d0
0000E260 1811                       		move.b	(a1),d4
0000E262 4880                       		ext.w	d0
0000E264 4440                       		neg.w	d0
0000E266 E70C                       		lsl.b	#3,d4
0000E268 0244 0018                  		andi.w	#$18,d4
0000E26C 5044                       		addq.w	#8,d4
0000E26E 9044                       		sub.w	d4,d0
0000E270 D042                       		add.w	d2,d0
0000E272 34C0                       		move.w	d0,(a2)+
0000E274 1819                       		move.b	(a1)+,d4
0000E276 14C4                       		move.b	d4,(a2)+
0000E278 5205                       		addq.b	#1,d5
0000E27A 14C5                       		move.b	d5,(a2)+
0000E27C 1019                       		move.b	(a1)+,d0
0000E27E E148                       		lsl.w	#8,d0
0000E280 1019                       		move.b	(a1)+,d0
0000E282 D04B                       		add.w	a3,d0
0000E284 0A40 1800                  		eori.w	#$1800,d0
0000E288 34C0                       		move.w	d0,(a2)+
0000E28A 1019                       		move.b	(a1)+,d0
0000E28C 4880                       		ext.w	d0
0000E28E 4440                       		neg.w	d0
0000E290 D804                       		add.b	d4,d4
0000E292 0244 0018                  		andi.w	#$18,d4
0000E296 5044                       		addq.w	#8,d4
0000E298 9044                       		sub.w	d4,d0
0000E29A D043                       		add.w	d3,d0
0000E29C 0240 01FF                  		andi.w	#$1FF,d0
0000E2A0 6600                       		bne.s	loc_D876
0000E2A2 5240                       		addq.w	#1,d0
0000E2A4                            
0000E2A4                            loc_D876:
0000E2A4 34C0                       		move.w	d0,(a2)+
0000E2A6 51C9 FFB0                  		dbf	d1,loc_D82A
0000E2AA                            
0000E2AA                            locret_D87C:
0000E2AA 4E75                       		rts	
0000E2AC                            ; ---------------------------------------------------------------------------
0000E2AC                            ; Subroutine to	check if an object is on the screen
0000E2AC                            ; ---------------------------------------------------------------------------
0000E2AC                            
0000E2AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2AC                            
0000E2AC                            
0000E2AC                            ChkObjOnScreen:
0000E2AC 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E2B0 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E2B4 6B00                       		bmi.s	NotOnScreen
0000E2B6 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E2BA 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E2BC                            
0000E2BC 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E2C0 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E2C4 6B00                       		bmi.s	NotOnScreen
0000E2C6 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E2CA 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E2CC                            
0000E2CC 7000                       		moveq	#0,d0		; set flag to 0
0000E2CE 4E75                       		rts	
0000E2D0                            ; ===========================================================================
0000E2D0                            
0000E2D0                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E2D0 7001                       		moveq	#1,d0		; set flag to 1
0000E2D2 4E75                       		rts	
0000E2D4                            ; End of function ChkObjOnScreen
0000E2D4                            
0000E2D4                            
0000E2D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2D4                            
0000E2D4                            
0000E2D4                            ChkObjOnScreen2:
0000E2D4 7200                       		moveq	#0,d1
0000E2D6 1228 0019                  		move.b	$19(a0),d1
0000E2DA 3028 0008                  		move.w	8(a0),d0
0000E2DE 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E2E2 D041                       		add.w	d1,d0
0000E2E4 6B00                       		bmi.s	NotOnScreen2
0000E2E6 D241                       		add.w	d1,d1
0000E2E8 9041                       		sub.w	d1,d0
0000E2EA 0C40 0140                  		cmpi.w	#320,d0
0000E2EE 6C00                       		bge.s	NotOnScreen2
0000E2F0                            
0000E2F0 3228 000C                  		move.w	$C(a0),d1
0000E2F4 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E2F8 6B00                       		bmi.s	NotOnScreen2
0000E2FA 0C41 00E0                  		cmpi.w	#224,d1
0000E2FE 6C00                       		bge.s	NotOnScreen2
0000E300                            
0000E300 7000                       		moveq	#0,d0
0000E302 4E75                       		rts	
0000E304                            ; ===========================================================================
0000E304                            
0000E304                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E304 7001                       		moveq	#1,d0
0000E306 4E75                       		rts	
0000E308                            ; End of function ChkObjOnScreen2
0000E308                            
0000E308                            ; ---------------------------------------------------------------------------
0000E308                            ; Subroutine to	load a level's objects
0000E308                            ; ---------------------------------------------------------------------------
0000E308                            
0000E308                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E308                            
0000E308                            
0000E308                            ObjPosLoad:				; XREF: Level; et al
0000E308 7000                       		moveq	#0,d0
0000E30A 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E30E 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E312 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E316                            ; End of function ObjPosLoad
0000E316                            
0000E316                            ; ===========================================================================
0000E316 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E318 0000                       		dc.w OPL_Next-OPL_Index
0000E31A                            ; ===========================================================================
0000E31A                            
0000E31A                            OPL_Main:				; XREF: OPL_Index
0000E31A 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E31E 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E322 ED08                       		lsl.b	#6,d0
0000E324 E848                       		lsr.w	#4,d0
0000E326 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E32C 2248                       		movea.l	a0,a1
0000E32E D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E332 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E336 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E33A D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E33E 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E342 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E346 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E34A 34FC 0101                  		move.w	#$101,(a2)+
0000E34E 303C 005E                  		move.w	#$5E,d0
0000E352                            
0000E352                            OPL_ClrList:
0000E352 429A                       		clr.l	(a2)+
0000E354 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E358                            
0000E358 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E35C 7400                       		moveq	#0,d2
0000E35E 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E362 0446 0080                  		subi.w	#$80,d6
0000E366 6400                       		bcc.s	loc_D93C
0000E368 7C00                       		moveq	#0,d6
0000E36A                            
0000E36A                            loc_D93C:
0000E36A 0246 FF80                  		andi.w	#$FF80,d6
0000E36E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E372                            
0000E372                            loc_D944:
0000E372 BC50                       		cmp.w	(a0),d6
0000E374 6300                       		bls.s	loc_D956
0000E376 4A28 0004                  		tst.b	4(a0)
0000E37A 6A00                       		bpl.s	loc_D952
0000E37C 1412                       		move.b	(a2),d2
0000E37E 5212                       		addq.b	#1,(a2)
0000E380                            
0000E380                            loc_D952:
0000E380 5C48                       		addq.w	#6,a0
0000E382 60EE                       		bra.s	loc_D944
0000E384                            ; ===========================================================================
0000E384                            
0000E384                            loc_D956:
0000E384 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E388 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E38C 0446 0080                  		subi.w	#$80,d6
0000E390 6500                       		bcs.s	loc_D976
0000E392                            
0000E392                            loc_D964:
0000E392 BC50                       		cmp.w	(a0),d6
0000E394 6300                       		bls.s	loc_D976
0000E396 4A28 0004                  		tst.b	4(a0)
0000E39A 6A00                       		bpl.s	loc_D972
0000E39C 522A 0001                  		addq.b	#1,1(a2)
0000E3A0                            
0000E3A0                            loc_D972:
0000E3A0 5C48                       		addq.w	#6,a0
0000E3A2 60EE                       		bra.s	loc_D964
0000E3A4                            ; ===========================================================================
0000E3A4                            
0000E3A4                            loc_D976:
0000E3A4 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E3A8 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E3AE                            
0000E3AE                            OPL_Next:				; XREF: OPL_Index
0000E3AE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E3B2 7400                       		moveq	#0,d2
0000E3B4 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E3B8 0246 FF80                  		andi.w	#$FF80,d6
0000E3BC BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E3C0 6700 0000                  		beq.w	locret_DA3A
0000E3C4 6C00                       		bge.s	loc_D9F6
0000E3C6 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E3CA 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E3CE 0446 0080                  		subi.w	#$80,d6
0000E3D2 6500                       		bcs.s	loc_D9D2
0000E3D4                            
0000E3D4                            loc_D9A6:
0000E3D4 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E3D8 6C00                       		bge.s	loc_D9D2
0000E3DA 5D48                       		subq.w	#6,a0
0000E3DC 4A28 0004                  		tst.b	4(a0)
0000E3E0 6A00                       		bpl.s	loc_D9BC
0000E3E2 532A 0001                  		subq.b	#1,1(a2)
0000E3E6 142A 0001                  		move.b	1(a2),d2
0000E3EA                            
0000E3EA                            loc_D9BC:
0000E3EA 6100 0000                  		bsr.w	loc_DA3C
0000E3EE 6600                       		bne.s	loc_D9C6
0000E3F0 5D48                       		subq.w	#6,a0
0000E3F2 60E0                       		bra.s	loc_D9A6
0000E3F4                            ; ===========================================================================
0000E3F4                            
0000E3F4                            loc_D9C6:
0000E3F4 4A28 0004                  		tst.b	4(a0)
0000E3F8 6A00                       		bpl.s	loc_D9D0
0000E3FA 522A 0001                  		addq.b	#1,1(a2)
0000E3FE                            
0000E3FE                            loc_D9D0:
0000E3FE 5C48                       		addq.w	#6,a0
0000E400                            
0000E400                            loc_D9D2:
0000E400 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E404 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E408 0646 0300                  		addi.w	#$300,d6
0000E40C                            
0000E40C                            loc_D9DE:
0000E40C BC68 FFFA                  		cmp.w	-6(a0),d6
0000E410 6E00                       		bgt.s	loc_D9F0
0000E412 4A28 FFFE                  		tst.b	-2(a0)
0000E416 6A00                       		bpl.s	loc_D9EC
0000E418 5312                       		subq.b	#1,(a2)
0000E41A                            
0000E41A                            loc_D9EC:
0000E41A 5D48                       		subq.w	#6,a0
0000E41C 60EE                       		bra.s	loc_D9DE
0000E41E                            ; ===========================================================================
0000E41E                            
0000E41E                            loc_D9F0:
0000E41E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E422 4E75                       		rts	
0000E424                            ; ===========================================================================
0000E424                            
0000E424                            loc_D9F6:
0000E424 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E428 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E42C 0646 0280                  		addi.w	#$280,d6
0000E430                            
0000E430                            loc_DA02:
0000E430 BC50                       		cmp.w	(a0),d6
0000E432 6300                       		bls.s	loc_DA16
0000E434 4A28 0004                  		tst.b	4(a0)
0000E438 6A00                       		bpl.s	loc_DA10
0000E43A 1412                       		move.b	(a2),d2
0000E43C 5212                       		addq.b	#1,(a2)
0000E43E                            
0000E43E                            loc_DA10:
0000E43E 6100 0000                  		bsr.w	loc_DA3C
0000E442 67EC                       		beq.s	loc_DA02
0000E444                            
0000E444                            loc_DA16:
0000E444 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E448 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E44C 0446 0300                  		subi.w	#$300,d6
0000E450 6500                       		bcs.s	loc_DA36
0000E452                            
0000E452                            loc_DA24:
0000E452 BC50                       		cmp.w	(a0),d6
0000E454 6300                       		bls.s	loc_DA36
0000E456 4A28 0004                  		tst.b	4(a0)
0000E45A 6A00                       		bpl.s	loc_DA32
0000E45C 522A 0001                  		addq.b	#1,1(a2)
0000E460                            
0000E460                            loc_DA32:
0000E460 5C48                       		addq.w	#6,a0
0000E462 60EE                       		bra.s	loc_DA24
0000E464                            ; ===========================================================================
0000E464                            
0000E464                            loc_DA36:
0000E464 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E468                            
0000E468                            locret_DA3A:
0000E468 4E75                       		rts	
0000E46A                            ; ===========================================================================
0000E46A                            
0000E46A                            loc_DA3C:
0000E46A 4A28 0004                  		tst.b	4(a0)
0000E46E 6A00                       		bpl.s	OPL_MakeItem
0000E470 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E476 6700                       		beq.s	OPL_MakeItem
0000E478 5C48                       		addq.w	#6,a0
0000E47A 7000                       		moveq	#0,d0
0000E47C 4E75                       		rts	
0000E47E                            ; ===========================================================================
0000E47E                            
0000E47E                            OPL_MakeItem:
0000E47E 6100 0000                  		bsr.w	SingleObjLoad
0000E482 6600                       		bne.s	locret_DA8A
0000E484 3358 0008                  		move.w	(a0)+,8(a1)
0000E488 3018                       		move.w	(a0)+,d0
0000E48A 3200                       		move.w	d0,d1
0000E48C 0240 0FFF                  		andi.w	#$FFF,d0
0000E490 3340 000C                  		move.w	d0,$C(a1)
0000E494 E559                       		rol.w	#2,d1
0000E496 0201 0003                  		andi.b	#3,d1
0000E49A 1341 0001                  		move.b	d1,1(a1)
0000E49E 1341 0022                  		move.b	d1,$22(a1)
0000E4A2 1018                       		move.b	(a0)+,d0
0000E4A4 6A00                       		bpl.s	loc_DA80
0000E4A6 0200 007F                  		andi.b	#$7F,d0
0000E4AA 1342 0023                  		move.b	d2,$23(a1)
0000E4AE                            
0000E4AE                            loc_DA80:
0000E4AE 1280                       		move.b	d0,0(a1)
0000E4B0 1358 0028                  		move.b	(a0)+,$28(a1)
0000E4B4 7000                       		moveq	#0,d0
0000E4B6                            
0000E4B6                            locret_DA8A:
0000E4B6 4E75                       		rts	
0000E4B8                            ; ---------------------------------------------------------------------------
0000E4B8                            ; Single object	loading	subroutine
0000E4B8                            ; ---------------------------------------------------------------------------
0000E4B8                            
0000E4B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E4B8                            
0000E4B8                            
0000E4B8                            SingleObjLoad:
0000E4B8 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E4BC 303C 005F                  		move.w	#$5F,d0
0000E4C0                            
0000E4C0                            loc_DA94:
0000E4C0 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E4C2 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E4C4 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E4C8 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E4CC                            
0000E4CC                            locret_DAA0:
0000E4CC 4E75                       		rts	
0000E4CE                            ; End of function SingleObjLoad
0000E4CE                            
0000E4CE                            
0000E4CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E4CE                            
0000E4CE                            
0000E4CE                            SingleObjLoad2:
0000E4CE 2248                       		movea.l	a0,a1
0000E4D0 303C F000                  		move.w	#-$1000,d0
0000E4D4 9048                       		sub.w	a0,d0
0000E4D6 EC48                       		lsr.w	#6,d0
0000E4D8 5340                       		subq.w	#1,d0
0000E4DA 6500                       		bcs.s	locret_DABC
0000E4DC                            
0000E4DC                            loc_DAB0:
0000E4DC 4A11                       		tst.b	(a1)
0000E4DE 6700                       		beq.s	locret_DABC
0000E4E0 43E9 0040                  		lea	$40(a1),a1
0000E4E4 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E4E8                            
0000E4E8                            locret_DABC:
0000E4E8 4E75                       		rts	
0000E4EA                            ; End of function SingleObjLoad2
0000E4EA                            
0000E4EA                            ; ===========================================================================
0000E4EA                            ; ---------------------------------------------------------------------------
0000E4EA                            ; Object 41 - springs
0000E4EA                            ; ---------------------------------------------------------------------------
0000E4EA                            
0000E4EA                            Obj41:					; XREF: Obj_Index
0000E4EA 7000                       		moveq	#0,d0
0000E4EC 1028 0024                  		move.b	$24(a0),d0
0000E4F0 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E4F4 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E4F8 6100 FB38                  		bsr.w	DisplaySprite
0000E4FC 3028 0008                  		move.w	8(a0),d0
0000E500 0240 FF80                  		andi.w	#$FF80,d0
0000E504 3238 F700                  		move.w	($FFFFF700).w,d1
0000E508 0441 0080                  		subi.w	#$80,d1
0000E50C 0241 FF80                  		andi.w	#$FF80,d1
0000E510 9041                       		sub.w	d1,d0
0000E512 0C40 0280                  		cmpi.w	#$280,d0
0000E516 6200 FB56                  		bhi.w	DeleteObject
0000E51A 4E75                       		rts	
0000E51C                            ; ===========================================================================
0000E51C 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E51E 0000                       		dc.w Obj41_Up-Obj41_Index
0000E520 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E522 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E524 0000                       		dc.w Obj41_LR-Obj41_Index
0000E526 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E528 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E52A 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E52C 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E52E 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E530                            
0000E530 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E532 F600                       		dc.w -$A00		; power	of yellow spring
0000E534                            ; ===========================================================================
0000E534                            
0000E534                            Obj41_Main:				; XREF: Obj41_Index
0000E534 5428 0024                  		addq.b	#2,$24(a0)
0000E538 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E540 317C 0523 0002             		move.w	#$523,2(a0)
0000E546 0028 0004 0001             		ori.b	#4,1(a0)
0000E54C 117C 0010 0019             		move.b	#$10,$19(a0)
0000E552 117C 0004 0018             		move.b	#4,$18(a0)
0000E558 1028 0028                  		move.b	$28(a0),d0
0000E55C 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E560 6700                       		beq.s	loc_DB54	; if not, branch
0000E562 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E568 117C 0001 001C             		move.b	#1,$1C(a0)
0000E56E 117C 0003 001A             		move.b	#3,$1A(a0)
0000E574 317C 0533 0002             		move.w	#$533,2(a0)
0000E57A 117C 0008 0019             		move.b	#8,$19(a0)
0000E580                            
0000E580                            loc_DB54:
0000E580 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E584 6700                       		beq.s	loc_DB66	; if not, branch
0000E586 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E58C 08E8 0001 0022             		bset	#1,$22(a0)
0000E592                            
0000E592                            loc_DB66:
0000E592 0800 0001                  		btst	#1,d0
0000E596 6700                       		beq.s	loc_DB72
0000E598 08E8 0005 0002             		bset	#5,2(a0)
0000E59E                            
0000E59E                            loc_DB72:
0000E59E 0240 000F                  		andi.w	#$F,d0
0000E5A2 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E5A8 4E75                       		rts	
0000E5AA                            ; ===========================================================================
0000E5AA                            
0000E5AA                            Obj41_Up:				; XREF: Obj41_Index
0000E5AA 323C 001B                  		move.w	#$1B,d1
0000E5AE 343C 0008                  		move.w	#8,d2
0000E5B2 363C 0010                  		move.w	#$10,d3
0000E5B6 3828 0008                  		move.w	8(a0),d4
0000E5BA 6100 0000                  		bsr.w	SolidObject
0000E5BE 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E5C2 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E5C4 4E75                       		rts	
0000E5C6                            ; ===========================================================================
0000E5C6                            
0000E5C6                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E5C6 5428 0024                  		addq.b	#2,$24(a0)
0000E5CA 5069 000C                  		addq.w	#8,$C(a1)
0000E5CE 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E5D4 08E9 0001 0022             		bset	#1,$22(a1)
0000E5DA 08A9 0003 0022             		bclr	#3,$22(a1)
0000E5E0 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E5E6 137C 0002 0024             		move.b	#2,$24(a1)
0000E5EC 08A8 0003 0022             		bclr	#3,$22(a0)
0000E5F2 4228 0025                  		clr.b	$25(a0)
0000E5F6 303C 00CC                  		move.w	#$CC,d0
0000E5FA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0000E600                            
0000E600                            Obj41_AniUp:				; XREF: Obj41_Index
0000E600 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E606 6000 CA88                  		bra.w	AnimateSprite
0000E60A                            ; ===========================================================================
0000E60A                            
0000E60A                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E60A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E610 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E614 4E75                       		rts	
0000E616                            ; ===========================================================================
0000E616                            
0000E616                            Obj41_LR:				; XREF: Obj41_Index
0000E616 323C 0013                  		move.w	#$13,d1
0000E61A 343C 000E                  		move.w	#$E,d2
0000E61E 363C 000F                  		move.w	#$F,d3
0000E622 3828 0008                  		move.w	8(a0),d4
0000E626 6100 0000                  		bsr.w	SolidObject
0000E62A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E630 6600                       		bne.s	loc_DC0C
0000E632 117C 0008 0024             		move.b	#8,$24(a0)
0000E638                            
0000E638                            loc_DC0C:
0000E638 0828 0005 0022             		btst	#5,$22(a0)
0000E63E 6600                       		bne.s	Obj41_BounceLR
0000E640 4E75                       		rts	
0000E642                            ; ===========================================================================
0000E642                            
0000E642                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E642 5428 0024                  		addq.b	#2,$24(a0)
0000E646 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E64C 5069 0008                  		addq.w	#8,8(a1)
0000E650 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E656 6600                       		bne.s	loc_DC36	; if yes, branch
0000E658 0469 0010 0008             		subi.w	#$10,8(a1)
0000E65E 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E662                            
0000E662                            loc_DC36:
0000E662 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E668 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E66E 0869 0000 0022             		bchg	#0,$22(a1)
0000E674 0829 0002 0022             		btst	#2,$22(a1)
0000E67A 6600                       		bne.s	loc_DC56
0000E67C 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E682                            
0000E682                            loc_DC56:
0000E682 08A8 0005 0022             		bclr	#5,$22(a0)
0000E688 08A9 0005 0022             		bclr	#5,$22(a1)
0000E68E 303C 00CC                  		move.w	#$CC,d0
0000E692 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0000E698                            
0000E698                            Obj41_AniLR:				; XREF: Obj41_Index
0000E698 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E69E 6000 C9F0                  		bra.w	AnimateSprite
0000E6A2                            ; ===========================================================================
0000E6A2                            
0000E6A2                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E6A2 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E6A8 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E6AC 4E75                       		rts	
0000E6AE                            ; ===========================================================================
0000E6AE                            
0000E6AE                            Obj41_Dwn:				; XREF: Obj41_Index
0000E6AE 323C 001B                  		move.w	#$1B,d1
0000E6B2 343C 0008                  		move.w	#8,d2
0000E6B6 363C 0010                  		move.w	#$10,d3
0000E6BA 3828 0008                  		move.w	8(a0),d4
0000E6BE 6100 0000                  		bsr.w	SolidObject
0000E6C2 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E6C8 6600                       		bne.s	loc_DCA4
0000E6CA 117C 000E 0024             		move.b	#$E,$24(a0)
0000E6D0                            
0000E6D0                            loc_DCA4:
0000E6D0 4A28 0025                  		tst.b	$25(a0)
0000E6D4 6600                       		bne.s	locret_DCAE
0000E6D6 4A44                       		tst.w	d4
0000E6D8 6B00                       		bmi.s	Obj41_BounceDwn
0000E6DA                            
0000E6DA                            locret_DCAE:
0000E6DA 4E75                       		rts	
0000E6DC                            ; ===========================================================================
0000E6DC                            
0000E6DC                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E6DC 5428 0024                  		addq.b	#2,$24(a0)
0000E6E0 5169 000C                  		subq.w	#8,$C(a1)
0000E6E4 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E6EA 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E6EE 08E9 0001 0022             		bset	#1,$22(a1)
0000E6F4 08A9 0003 0022             		bclr	#3,$22(a1)
0000E6FA 137C 0002 0024             		move.b	#2,$24(a1)
0000E700 08A8 0003 0022             		bclr	#3,$22(a0)
0000E706 4228 0025                  		clr.b	$25(a0)
0000E70A 303C 00CC                  		move.w	#$CC,d0
0000E70E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0000E714                            
0000E714                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E714 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E71A 6000 C974                  		bra.w	AnimateSprite
0000E71E                            ; ===========================================================================
0000E71E                            
0000E71E                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E71E 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E724 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E728 4E75                       		rts	
0000E72A                            ; ===========================================================================
0000E72A                            Ani_obj41:
0000E72A                            	include "_anim\obj41.asm"
0000E72A                            ; ---------------------------------------------------------------------------
0000E72A                            ; Animation script - springs
0000E72A                            ; ---------------------------------------------------------------------------
0000E72A 0000                       		dc.w byte_DD02-Ani_obj41
0000E72C 0000                       		dc.w byte_DD0E-Ani_obj41
0000E72E 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E73A 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E746                            		even
0000E746                            		even
0000E746                            
0000E746                            ; ---------------------------------------------------------------------------
0000E746                            ; Sprite mappings - springs
0000E746                            ; ---------------------------------------------------------------------------
0000E746                            Map_obj41:
0000E746                            	include "_maps\obj41.asm"
0000E746                            ; ---------------------------------------------------------------------------
0000E746                            ; Sprite mappings - springs
0000E746                            ; ---------------------------------------------------------------------------
0000E746 0000                       		dc.w byte_DD26-Map_obj41
0000E748 0000                       		dc.w byte_DD31-Map_obj41
0000E74A 0000                       		dc.w byte_DD37-Map_obj41
0000E74C 0000                       		dc.w byte_DD47-Map_obj41
0000E74E 0000                       		dc.w byte_DD4D-Map_obj41
0000E750 0000                       		dc.w byte_DD53-Map_obj41
0000E752 02                         byte_DD26:	dc.b 2
0000E753 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E758 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E75D 01                         byte_DD31:	dc.b 1
0000E75E 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E763 03                         byte_DD37:	dc.b 3
0000E764 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E769 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E76E 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E773 01                         byte_DD47:	dc.b 1
0000E774 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E779 01                         byte_DD4D:	dc.b 1
0000E77A F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E77F 04                         byte_DD53:	dc.b 4
0000E780 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E785 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E78A F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E78F 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E794                            		even
0000E794                            		even
0000E794                            
0000E794                            ; ===========================================================================
0000E794                            ; ---------------------------------------------------------------------------
0000E794                            ; Object 42 - Newtron enemy (GHZ)
0000E794                            ; ---------------------------------------------------------------------------
0000E794                            
0000E794                            Obj42:					; XREF: Obj_Index
0000E794 7000                       		moveq	#0,d0
0000E796 1028 0024                  		move.b	$24(a0),d0
0000E79A 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E79E 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E7A2                            ; ===========================================================================
0000E7A2 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E7A4 0000                       		dc.w Obj42_Action-Obj42_Index
0000E7A6 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E7A8                            ; ===========================================================================
0000E7A8                            
0000E7A8                            Obj42_Main:				; XREF: Obj42_Index
0000E7A8 5428 0024                  		addq.b	#2,$24(a0)
0000E7AC 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E7B4 317C 049B 0002             		move.w	#$49B,2(a0)
0000E7BA 117C 0004 0001             		move.b	#4,1(a0)
0000E7C0 117C 0004 0018             		move.b	#4,$18(a0)
0000E7C6 117C 0014 0019             		move.b	#$14,$19(a0)
0000E7CC 117C 0010 0016             		move.b	#$10,$16(a0)
0000E7D2 117C 0008 0017             		move.b	#8,$17(a0)
0000E7D8                            
0000E7D8                            Obj42_Action:				; XREF: Obj42_Index
0000E7D8 7000                       		moveq	#0,d0
0000E7DA 1028 0025                  		move.b	$25(a0),d0
0000E7DE 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E7E2 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E7E6 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E7EC 6100 C8A2                  		bsr.w	AnimateSprite
0000E7F0 6000 0000                  		bra.w	MarkObjGone
0000E7F4                            ; ===========================================================================
0000E7F4 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E7F6 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E7F8 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E7FA 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E7FC 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E7FE                            ; ===========================================================================
0000E7FE                            
0000E7FE                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E7FE 08E8 0000 0022             		bset	#0,$22(a0)
0000E804 3038 D008                  		move.w	($FFFFD008).w,d0
0000E808 9068 0008                  		sub.w	8(a0),d0
0000E80C 6400                       		bcc.s	loc_DDEA
0000E80E 4440                       		neg.w	d0
0000E810 08A8 0000 0022             		bclr	#0,$22(a0)
0000E816                            
0000E816                            loc_DDEA:
0000E816 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E81A 6400                       		bcc.s	locret_DE12	; if not, branch
0000E81C 5428 0025                  		addq.b	#2,$25(a0)
0000E820 117C 0001 001C             		move.b	#1,$1C(a0)
0000E826 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E82A 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E82C 317C 249B 0002             		move.w	#$249B,2(a0)
0000E832 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E838 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E83E                            
0000E83E                            locret_DE12:
0000E83E 4E75                       		rts	
0000E840                            ; ===========================================================================
0000E840                            
0000E840                            Obj42_Type00:				; XREF: Obj42_Index2
0000E840 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E846 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E848 08E8 0000 0022             		bset	#0,$22(a0)
0000E84E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E852 9068 0008                  		sub.w	8(a0),d0
0000E856 6400                       		bcc.s	locret_DE32
0000E858 08A8 0000 0022             		bclr	#0,$22(a0)
0000E85E                            
0000E85E                            locret_DE32:
0000E85E 4E75                       		rts	
0000E860                            ; ===========================================================================
0000E860                            
0000E860                            Obj42_Fall:				; XREF: Obj42_Type00
0000E860 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E866 6600                       		bne.s	loc_DE42
0000E868 117C 000C 0020             		move.b	#$C,$20(a0)
0000E86E                            
0000E86E                            loc_DE42:
0000E86E 6100 F72A                  		bsr.w	ObjectFall
0000E872 6100 0000                  		bsr.w	ObjHitFloor
0000E876 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E878 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E87A D368 000C                  		add.w	d1,$C(a0)
0000E87E 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E884 5428 0025                  		addq.b	#2,$25(a0)
0000E888 117C 0002 001C             		move.b	#2,$1C(a0)
0000E88E 0828 0005 0002             		btst	#5,2(a0)
0000E894 6700                       		beq.s	Obj42_Move
0000E896 5228 001C                  		addq.b	#1,$1C(a0)
0000E89A                            
0000E89A                            Obj42_Move:
0000E89A 117C 000D 0020             		move.b	#$D,$20(a0)
0000E8A0 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E8A6 0828 0000 0022             		btst	#0,$22(a0)
0000E8AC 6600                       		bne.s	locret_DE86
0000E8AE 4468 0010                  		neg.w	$10(a0)
0000E8B2                            
0000E8B2                            locret_DE86:
0000E8B2 4E75                       		rts	
0000E8B4                            ; ===========================================================================
0000E8B4                            
0000E8B4                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E8B4 6100 F756                  		bsr.w	SpeedToPos
0000E8B8 6100 0000                  		bsr.w	ObjHitFloor
0000E8BC 0C41 FFF8                  		cmpi.w	#-8,d1
0000E8C0 6D00                       		blt.s	loc_DEA2
0000E8C2 0C41 000C                  		cmpi.w	#$C,d1
0000E8C6 6C00                       		bge.s	loc_DEA2
0000E8C8 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E8CC 4E75                       		rts	
0000E8CE                            ; ===========================================================================
0000E8CE                            
0000E8CE                            loc_DEA2:
0000E8CE 5428 0025                  		addq.b	#2,$25(a0)
0000E8D2 4E75                       		rts	
0000E8D4                            ; ===========================================================================
0000E8D4                            
0000E8D4                            Obj42_Speed:				; XREF: Obj42_Index2
0000E8D4 6100 F736                  		bsr.w	SpeedToPos
0000E8D8 4E75                       		rts	
0000E8DA                            ; ===========================================================================
0000E8DA                            
0000E8DA                            Obj42_Type01:				; XREF: Obj42_Index2
0000E8DA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E8E0 6600                       		bne.s	Obj42_FireMissile
0000E8E2 117C 000C 0020             		move.b	#$C,$20(a0)
0000E8E8                            
0000E8E8                            Obj42_FireMissile:
0000E8E8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E8EE 6600                       		bne.s	locret_DF14
0000E8F0 4A28 0032                  		tst.b	$32(a0)
0000E8F4 6600                       		bne.s	locret_DF14
0000E8F6 117C 0001 0032             		move.b	#1,$32(a0)
0000E8FC 6100 FBBA                  		bsr.w	SingleObjLoad
0000E900 6600                       		bne.s	locret_DF14
0000E902 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E906 3368 0008 0008             		move.w	8(a0),8(a1)
0000E90C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E912 5169 000C                  		subq.w	#8,$C(a1)
0000E916 337C 0200 0010             		move.w	#$200,$10(a1)
0000E91C 303C 0014                  		move.w	#$14,d0
0000E920 0828 0000 0022             		btst	#0,$22(a0)
0000E926 6600                       		bne.s	loc_DF04
0000E928 4440                       		neg.w	d0
0000E92A 4469 0010                  		neg.w	$10(a1)
0000E92E                            
0000E92E                            loc_DF04:
0000E92E D169 0008                  		add.w	d0,8(a1)
0000E932 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E938 137C 0001 0028             		move.b	#1,$28(a1)
0000E93E                            
0000E93E                            locret_DF14:
0000E93E 4E75                       		rts	
0000E940                            ; ===========================================================================
0000E940                            
0000E940                            Obj42_Delete:				; XREF: Obj42_Index
0000E940 6000 F72C                  		bra.w	DeleteObject
0000E944                            ; ===========================================================================
0000E944                            Ani_obj42:
0000E944                            	include "_anim\obj42.asm"
0000E944                            ; ---------------------------------------------------------------------------
0000E944                            ; Animation script - Newtron enemy
0000E944                            ; ---------------------------------------------------------------------------
0000E944 0000                       		dc.w byte_DF24-Ani_obj42
0000E946 0000                       		dc.w byte_DF28-Ani_obj42
0000E948 0000                       		dc.w byte_DF30-Ani_obj42
0000E94A 0000                       		dc.w byte_DF34-Ani_obj42
0000E94C 0000                       		dc.w byte_DF38-Ani_obj42
0000E94E 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E952 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E95A 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E95E 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E962 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E96C                            		even
0000E96C                            		even
0000E96C                            
0000E96C                            ; ---------------------------------------------------------------------------
0000E96C                            ; Sprite mappings - Newtron enemy (GHZ)
0000E96C                            ; ---------------------------------------------------------------------------
0000E96C                            Map_obj42:
0000E96C                            	include "_maps\obj42.asm"
0000E96C                            ; ---------------------------------------------------------------------------
0000E96C                            ; Sprite mappings - Newtron enemy (GHZ)
0000E96C                            ; ---------------------------------------------------------------------------
0000E96C 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E970 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E974 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E978 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E97C 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E980 0000                       		dc.w byte_DFF8-Map_obj42
0000E982 03                         byte_DF58:	dc.b 3
0000E983 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E988 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E98D FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E992 03                         byte_DF68:	dc.b 3
0000E993 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E998 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E99D FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E9A2 03                         byte_DF78:	dc.b 3
0000E9A3 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E9A8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E9AD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E9B2 04                         byte_DF88:	dc.b 4
0000E9B3 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E9B8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E9BD FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E9C2 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E9C7 03                         byte_DF9D:	dc.b 3
0000E9C8 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E9CD FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E9D2 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E9D7 02                         byte_DFAD:	dc.b 2
0000E9D8 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9DD F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9E2 03                         byte_DFB8:	dc.b 3
0000E9E3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9E8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9ED FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E9F2 03                         byte_DFC8:	dc.b 3
0000E9F3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9F8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9FD FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000EA02 03                         byte_DFD8:	dc.b 3
0000EA03 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EA08 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EA0D FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000EA12 03                         byte_DFE8:	dc.b 3
0000EA13 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EA18 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EA1D FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000EA22 00                         byte_DFF8:	dc.b 0
0000EA24 00                         		even
0000EA24 00                         		even
0000EA24                            
0000EA24                            ; ===========================================================================
0000EA24                            ; ---------------------------------------------------------------------------
0000EA24                            ; Object 43 - Roller enemy (SYZ)
0000EA24                            ; ---------------------------------------------------------------------------
0000EA24                            
0000EA24                            Obj43:					; XREF: Obj_Index
0000EA24 7000                       		moveq	#0,d0
0000EA26 1028 0024                  		move.b	$24(a0),d0
0000EA2A 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000EA2E 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000EA32                            ; ===========================================================================
0000EA32 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000EA34 0000                       		dc.w Obj43_Action-Obj43_Index
0000EA36                            ; ===========================================================================
0000EA36                            
0000EA36                            Obj43_Main:				; XREF: Obj43_Index
0000EA36 117C 000E 0016             		move.b	#$E,$16(a0)
0000EA3C 117C 0008 0017             		move.b	#8,$17(a0)
0000EA42 6100 F556                  		bsr.w	ObjectFall
0000EA46 6100 0000                  		bsr.w	ObjHitFloor
0000EA4A 4A41                       		tst.w	d1
0000EA4C 6A00                       		bpl.s	locret_E052
0000EA4E D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000EA52 317C 0000 0012             		move.w	#0,$12(a0)
0000EA58 5428 0024                  		addq.b	#2,$24(a0)
0000EA5C 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000EA64 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000EA6A 117C 0004 0001             		move.b	#4,1(a0)
0000EA70 117C 0004 0018             		move.b	#4,$18(a0)
0000EA76 117C 0010 0019             		move.b	#$10,$19(a0)
0000EA7C                            
0000EA7C                            locret_E052:
0000EA7C 4E75                       		rts	
0000EA7E                            ; ===========================================================================
0000EA7E                            
0000EA7E                            Obj43_Action:				; XREF: Obj43_Index
0000EA7E 7000                       		moveq	#0,d0
0000EA80 1028 0025                  		move.b	$25(a0),d0
0000EA84 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000EA88 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000EA8C 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000EA92 6100 C5FC                  		bsr.w	AnimateSprite
0000EA96 3028 0008                  		move.w	8(a0),d0
0000EA9A 0240 FF80                  		andi.w	#$FF80,d0
0000EA9E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EAA2 0441 0080                  		subi.w	#$80,d1
0000EAA6 0241 FF80                  		andi.w	#$FF80,d1
0000EAAA 9041                       		sub.w	d1,d0
0000EAAC 0C40 0280                  		cmpi.w	#$280,d0
0000EAB0 6E00 0000                  		bgt.w	Obj43_ChkGone
0000EAB4 6000 F57C                  		bra.w	DisplaySprite
0000EAB8                            ; ===========================================================================
0000EAB8                            
0000EAB8                            Obj43_ChkGone:				; XREF: Obj43_Action
0000EAB8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EABC 7000                       		moveq	#0,d0
0000EABE 1028 0023                  		move.b	$23(a0),d0
0000EAC2 6700                       		beq.s	Obj43_Delete
0000EAC4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EACA                            
0000EACA                            Obj43_Delete:
0000EACA 6000 F5A2                  		bra.w	DeleteObject
0000EACE                            ; ===========================================================================
0000EACE 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000EAD0 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000EAD2 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000EAD4 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000EAD6                            ; ===========================================================================
0000EAD6                            
0000EAD6                            Obj43_RollChk:				; XREF: Obj43_Index2
0000EAD6 3038 D008                  		move.w	($FFFFD008).w,d0
0000EADA 0440 0100                  		subi.w	#$100,d0
0000EADE 6500                       		bcs.s	loc_E0D2
0000EAE0 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000EAE4 6500                       		bcs.s	loc_E0D2
0000EAE6 5828 0025                  		addq.b	#4,$25(a0)
0000EAEA 117C 0002 001C             		move.b	#2,$1C(a0)
0000EAF0 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000EAF6 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000EAFC                            
0000EAFC                            loc_E0D2:
0000EAFC 588F                       		addq.l	#4,sp
0000EAFE 4E75                       		rts	
0000EB00                            ; ===========================================================================
0000EB00                            
0000EB00                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000EB00 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000EB06 6700                       		beq.s	loc_E0F8
0000EB08 5368 0030                  		subq.w	#1,$30(a0)
0000EB0C 6A00                       		bpl.s	locret_E0F6
0000EB0E 117C 0001 001C             		move.b	#1,$1C(a0)
0000EB14 317C 0700 0010             		move.w	#$700,$10(a0)
0000EB1A 117C 008E 0020             		move.b	#$8E,$20(a0)
0000EB20                            
0000EB20                            locret_E0F6:
0000EB20 4E75                       		rts	
0000EB22                            ; ===========================================================================
0000EB22                            
0000EB22                            loc_E0F8:
0000EB22 5428 0025                  		addq.b	#2,$25(a0)
0000EB26 4E75                       		rts	
0000EB28                            ; ===========================================================================
0000EB28                            
0000EB28                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000EB28 6100 0000                  		bsr.w	Obj43_Stop
0000EB2C 6100 F4DE                  		bsr.w	SpeedToPos
0000EB30 6100 0000                  		bsr.w	ObjHitFloor
0000EB34 0C41 FFF8                  		cmpi.w	#-8,d1
0000EB38 6D00                       		blt.s	Obj43_Jump
0000EB3A 0C41 000C                  		cmpi.w	#$C,d1
0000EB3E 6C00                       		bge.s	Obj43_Jump
0000EB40 D368 000C                  		add.w	d1,$C(a0)
0000EB44 4E75                       		rts	
0000EB46                            ; ===========================================================================
0000EB46                            
0000EB46                            Obj43_Jump:
0000EB46 5428 0025                  		addq.b	#2,$25(a0)
0000EB4A 08E8 0000 0032             		bset	#0,$32(a0)
0000EB50 6700                       		beq.s	locret_E12E
0000EB52 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000EB58                            
0000EB58                            locret_E12E:
0000EB58 4E75                       		rts	
0000EB5A                            ; ===========================================================================
0000EB5A                            
0000EB5A                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000EB5A 6100 F43E                  		bsr.w	ObjectFall
0000EB5E 4A68 0012                  		tst.w	$12(a0)
0000EB62 6B00                       		bmi.s	locret_E150
0000EB64 6100 0000                  		bsr.w	ObjHitFloor
0000EB68 4A41                       		tst.w	d1
0000EB6A 6A00                       		bpl.s	locret_E150
0000EB6C D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000EB70 5528 0025                  		subq.b	#2,$25(a0)
0000EB74 317C 0000 0012             		move.w	#0,$12(a0)
0000EB7A                            
0000EB7A                            locret_E150:
0000EB7A 4E75                       		rts	
0000EB7C                            
0000EB7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EB7C                            
0000EB7C                            
0000EB7C                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000EB7C 4A28 0032                  		tst.b	$32(a0)
0000EB80 6B00                       		bmi.s	locret_E188
0000EB82 3038 D008                  		move.w	($FFFFD008).w,d0
0000EB86 0440 0030                  		subi.w	#$30,d0
0000EB8A 9068 0008                  		sub.w	8(a0),d0
0000EB8E 6400                       		bcc.s	locret_E188
0000EB90 117C 0000 001C             		move.b	#0,$1C(a0)
0000EB96 117C 000E 0020             		move.b	#$E,$20(a0)
0000EB9C 4268 0010                  		clr.w	$10(a0)
0000EBA0 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000EBA6 117C 0002 0025             		move.b	#2,$25(a0)
0000EBAC 08E8 0007 0032             		bset	#7,$32(a0)
0000EBB2                            
0000EBB2                            locret_E188:
0000EBB2 4E75                       		rts	
0000EBB4                            ; End of function Obj43_Stop
0000EBB4                            
0000EBB4                            ; ===========================================================================
0000EBB4                            Ani_obj43:
0000EBB4                            	include "_anim\obj43.asm"
0000EBB4                            ; ---------------------------------------------------------------------------
0000EBB4                            ; Animation script - Roller enemy
0000EBB4                            ; ---------------------------------------------------------------------------
0000EBB4 0000                       		dc.w byte_E190-Ani_obj43
0000EBB6 0000                       		dc.w byte_E196-Ani_obj43
0000EBB8 0000                       		dc.w byte_E19C-Ani_obj43
0000EBBA 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000EBC0 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000EBC6 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000EBCC 00                         		even
0000EBCC 00                         		even
0000EBCC                            
0000EBCC                            ; ---------------------------------------------------------------------------
0000EBCC                            ; Sprite mappings - Roller enemy (SYZ)
0000EBCC                            ; ---------------------------------------------------------------------------
0000EBCC                            Map_obj43:
0000EBCC                            	include "_maps\obj43.asm"
0000EBCC                            Map_61da:
0000EBCC 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000EBCE 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000EBD0 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000EBD2 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000EBD4 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000EBD6 02                         Map_61da_A: 	dc.b $2
0000EBD7 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000EBDC F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000EBE1 02                         Map_61da_15: 	dc.b $2
0000EBE2 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000EBE7 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000EBEC 01                         Map_61da_20: 	dc.b $1
0000EBED F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000EBF2 01                         Map_61da_26: 	dc.b $1
0000EBF3 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000EBF8 01                         Map_61da_2C: 	dc.b $1
0000EBF9 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000EBFE                            	even
0000EBFE                            	even
0000EBFE                            
0000EBFE                            ; ===========================================================================
0000EBFE                            ; ---------------------------------------------------------------------------
0000EBFE                            ; Object 44 - walls (GHZ)
0000EBFE                            ; ---------------------------------------------------------------------------
0000EBFE                            
0000EBFE                            Obj44:					; XREF: Obj_Index
0000EBFE 7000                       		moveq	#0,d0
0000EC00 1028 0024                  		move.b	$24(a0),d0
0000EC04 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000EC08 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000EC0C                            ; ===========================================================================
0000EC0C 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000EC0E 0000                       		dc.w Obj44_Solid-Obj44_Index
0000EC10 0000                       		dc.w Obj44_Display-Obj44_Index
0000EC12                            ; ===========================================================================
0000EC12                            
0000EC12                            Obj44_Main:				; XREF: Obj44_Index
0000EC12 5428 0024                  		addq.b	#2,$24(a0)
0000EC16 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000EC1E 317C 434C 0002             		move.w	#$434C,2(a0)
0000EC24 0028 0004 0001             		ori.b	#4,1(a0)
0000EC2A 117C 0008 0019             		move.b	#8,$19(a0)
0000EC30 117C 0006 0018             		move.b	#6,$18(a0)
0000EC36 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EC3C 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EC42 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EC44 5428 0024                  		addq.b	#2,$24(a0)
0000EC48 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EC4A                            ; ===========================================================================
0000EC4A                            
0000EC4A                            Obj44_Solid:				; XREF: Obj44_Index
0000EC4A 323C 0013                  		move.w	#$13,d1
0000EC4E 343C 0028                  		move.w	#$28,d2
0000EC52 6100 A694                  		bsr.w	Obj44_SolidWall
0000EC56                            
0000EC56                            Obj44_Display:				; XREF: Obj44_Index
0000EC56 6100 F3DA                  		bsr.w	DisplaySprite
0000EC5A 3028 0008                  		move.w	8(a0),d0
0000EC5E 0240 FF80                  		andi.w	#$FF80,d0
0000EC62 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC66 0441 0080                  		subi.w	#$80,d1
0000EC6A 0241 FF80                  		andi.w	#$FF80,d1
0000EC6E 9041                       		sub.w	d1,d0
0000EC70 0C40 0280                  		cmpi.w	#$280,d0
0000EC74 6200 F3F8                  		bhi.w	DeleteObject
0000EC78 4E75                       		rts	
0000EC7A                            ; ===========================================================================
0000EC7A                            ; ---------------------------------------------------------------------------
0000EC7A                            ; Sprite mappings - walls (GHZ)
0000EC7A                            ; ---------------------------------------------------------------------------
0000EC7A                            Map_obj44:
0000EC7A                            	include "_maps\obj44.asm"
0000EC7A                            ; ---------------------------------------------------------------------------
0000EC7A                            ; Sprite mappings - walls (GHZ)
0000EC7A                            ; ---------------------------------------------------------------------------
0000EC7A 0000                       		dc.w byte_E256-Map_obj44
0000EC7C 0000                       		dc.w byte_E26B-Map_obj44
0000EC7E 0000                       		dc.w byte_E280-Map_obj44
0000EC80 04                         byte_E256:	dc.b 4
0000EC81 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EC86 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EC8B 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EC90 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EC95 04                         byte_E26B:	dc.b 4
0000EC96 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000EC9B F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000ECA0 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ECA5 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ECAA 04                         byte_E280:	dc.b 4
0000ECAB E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000ECB0 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000ECB5 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000ECBA 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000ECC0 00                         		even
0000ECC0 00                         		even
0000ECC0                            
0000ECC0                            ; ===========================================================================
0000ECC0                            ; ---------------------------------------------------------------------------
0000ECC0                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000ECC0                            ; ---------------------------------------------------------------------------
0000ECC0                            
0000ECC0                            Obj13:					; XREF: Obj_Index
0000ECC0 7000                       		moveq	#0,d0
0000ECC2 1028 0024                  		move.b	$24(a0),d0
0000ECC6 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000ECCA 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000ECCE 6000 0000                  		bra.w	Obj14_ChkDel
0000ECD2                            ; ===========================================================================
0000ECD2 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000ECD4 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000ECD6                            ; ---------------------------------------------------------------------------
0000ECD6                            ;
0000ECD6                            ; Lava ball production rates
0000ECD6                            ;
0000ECD6 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000ECDC                            ; ===========================================================================
0000ECDC                            
0000ECDC                            Obj13_Main:				; XREF: Obj13_Index
0000ECDC 5428 0024                  		addq.b	#2,$24(a0)
0000ECE0 1028 0028                  		move.b	$28(a0),d0
0000ECE4 E848                       		lsr.w	#4,d0
0000ECE6 0240 000F                  		andi.w	#$F,d0
0000ECEA 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000ECF0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000ECF6 0228 000F 0028             		andi.b	#$F,$28(a0)
0000ECFC                            
0000ECFC                            Obj13_MakeLava:				; XREF: Obj13_Index
0000ECFC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000ED00 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000ED02 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000ED08 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000ED0C 6600                       		bne.s	locret_E302
0000ED0E 6100 F7A8                  		bsr.w	SingleObjLoad
0000ED12 6600                       		bne.s	locret_E302
0000ED14 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000ED18 3368 0008 0008             		move.w	8(a0),8(a1)
0000ED1E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ED24 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000ED2A                            
0000ED2A                            locret_E302:
0000ED2A 4E75                       		rts	
0000ED2C                            ; ===========================================================================
0000ED2C                            ; ---------------------------------------------------------------------------
0000ED2C                            ; Object 14 - lava balls (MZ, SLZ)
0000ED2C                            ; ---------------------------------------------------------------------------
0000ED2C                            
0000ED2C                            Obj14:					; XREF: Obj_Index
0000ED2C 7000                       		moveq	#0,d0
0000ED2E 1028 0024                  		move.b	$24(a0),d0
0000ED32 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000ED36 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000ED3A 6000 F2F6                  		bra.w	DisplaySprite
0000ED3E                            ; ===========================================================================
0000ED3E 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000ED40 0000                       		dc.w Obj14_Action-Obj14_Index
0000ED42 0000                       		dc.w Obj14_Delete-Obj14_Index
0000ED44                            
0000ED44 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000ED4E 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000ED56                            ; ===========================================================================
0000ED56                            
0000ED56                            Obj14_Main:				; XREF: Obj14_Index
0000ED56 5428 0024                  		addq.b	#2,$24(a0)
0000ED5A 117C 0008 0016             		move.b	#8,$16(a0)
0000ED60 117C 0008 0017             		move.b	#8,$17(a0)
0000ED66 217C 0000 BC8E 0004        		move.l	#Map_obj14,4(a0)
0000ED6E 317C 0345 0002             		move.w	#$345,2(a0)
0000ED74 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000ED7A 6600                       		bne.s	loc_E35A
0000ED7C 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000ED82                            
0000ED82                            loc_E35A:
0000ED82 117C 0004 0001             		move.b	#4,1(a0)
0000ED88 117C 0003 0018             		move.b	#3,$18(a0)
0000ED8E 117C 008B 0020             		move.b	#$8B,$20(a0)
0000ED94 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ED9A 4A28 0029                  		tst.b	$29(a0)
0000ED9E 6700                       		beq.s	Obj14_SetSpeed
0000EDA0 5428 0018                  		addq.b	#2,$18(a0)
0000EDA4                            
0000EDA4                            Obj14_SetSpeed:
0000EDA4 7000                       		moveq	#0,d0
0000EDA6 1028 0028                  		move.b	$28(a0),d0
0000EDAA D040                       		add.w	d0,d0
0000EDAC 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EDB2 117C 0008 0019             		move.b	#8,$19(a0)
0000EDB8 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EDBE 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EDC0 117C 0010 0019             		move.b	#$10,$19(a0)
0000EDC6 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EDCC 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EDD2 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EDD8                            
0000EDD8                            Obj14_PlaySnd:
0000EDD8 303C 00AE                  		move.w	#$AE,d0
0000EDDC 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EDE2                            
0000EDE2                            Obj14_Action:				; XREF: Obj14_Index
0000EDE2 7000                       		moveq	#0,d0
0000EDE4 1028 0028                  		move.b	$28(a0),d0
0000EDE8 D040                       		add.w	d0,d0
0000EDEA 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EDEE 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EDF2 6100 F218                  		bsr.w	SpeedToPos
0000EDF6 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EDFC 6100 C292                  		bsr.w	AnimateSprite
0000EE00                            
0000EE00                            Obj14_ChkDel:				; XREF: Obj13
0000EE00 3028 0008                  		move.w	8(a0),d0
0000EE04 0240 FF80                  		andi.w	#$FF80,d0
0000EE08 3238 F700                  		move.w	($FFFFF700).w,d1
0000EE0C 0441 0080                  		subi.w	#$80,d1
0000EE10 0241 FF80                  		andi.w	#$FF80,d1
0000EE14 9041                       		sub.w	d1,d0
0000EE16 0C40 0280                  		cmpi.w	#$280,d0
0000EE1A 6200 F252                  		bhi.w	DeleteObject
0000EE1E 4E75                       		rts	
0000EE20                            ; ===========================================================================
0000EE20 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EE24 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EE28 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EE2C 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EE30 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EE32                            ; ===========================================================================
0000EE32                            ; lavaball types 00-03 fly up and fall back down
0000EE32                            
0000EE32                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EE32 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EE38 3028 0030                  		move.w	$30(a0),d0
0000EE3C B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EE40 6400                       		bcc.s	loc_E41E	; if not, branch
0000EE42 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EE46                            
0000EE46                            loc_E41E:
0000EE46 08A8 0001 0022             		bclr	#1,$22(a0)
0000EE4C 4A68 0012                  		tst.w	$12(a0)
0000EE50 6A00                       		bpl.s	locret_E430
0000EE52 08E8 0001 0022             		bset	#1,$22(a0)
0000EE58                            
0000EE58                            locret_E430:
0000EE58 4E75                       		rts	
0000EE5A                            ; ===========================================================================
0000EE5A                            ; lavaball type	04 flies up until it hits the ceiling
0000EE5A                            
0000EE5A                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EE5A 08E8 0001 0022             		bset	#1,$22(a0)
0000EE60 6100 0000                  		bsr.w	ObjHitCeiling
0000EE64 4A41                       		tst.w	d1
0000EE66 6A00                       		bpl.s	locret_E452
0000EE68 117C 0008 0028             		move.b	#8,$28(a0)
0000EE6E 117C 0001 001C             		move.b	#1,$1C(a0)
0000EE74 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EE7A                            
0000EE7A                            locret_E452:
0000EE7A 4E75                       		rts	
0000EE7C                            ; ===========================================================================
0000EE7C                            ; lavaball type	05 falls down until it hits the	floor
0000EE7C                            
0000EE7C                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EE7C 08A8 0001 0022             		bclr	#1,$22(a0)
0000EE82 6100 0000                  		bsr.w	ObjHitFloor
0000EE86 4A41                       		tst.w	d1
0000EE88 6A00                       		bpl.s	locret_E474
0000EE8A 117C 0008 0028             		move.b	#8,$28(a0)
0000EE90 117C 0001 001C             		move.b	#1,$1C(a0)
0000EE96 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EE9C                            
0000EE9C                            locret_E474:
0000EE9C 4E75                       		rts	
0000EE9E                            ; ===========================================================================
0000EE9E                            ; lavaball types 06-07 move sideways
0000EE9E                            
0000EE9E                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EE9E 08E8 0000 0022             		bset	#0,$22(a0)
0000EEA4 76F8                       		moveq	#-8,d3
0000EEA6 6100 0000                  		bsr.w	ObjHitWallLeft
0000EEAA 4A41                       		tst.w	d1
0000EEAC 6A00                       		bpl.s	locret_E498
0000EEAE 117C 0008 0028             		move.b	#8,$28(a0)
0000EEB4 117C 0003 001C             		move.b	#3,$1C(a0)
0000EEBA 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EEC0                            
0000EEC0                            locret_E498:
0000EEC0 4E75                       		rts	
0000EEC2                            ; ===========================================================================
0000EEC2                            
0000EEC2                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EEC2 08A8 0000 0022             		bclr	#0,$22(a0)
0000EEC8 7608                       		moveq	#8,d3
0000EECA 6100 0000                  		bsr.w	ObjHitWallRight
0000EECE 4A41                       		tst.w	d1
0000EED0 6A00                       		bpl.s	locret_E4BC
0000EED2 117C 0008 0028             		move.b	#8,$28(a0)
0000EED8 117C 0003 001C             		move.b	#3,$1C(a0)
0000EEDE 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EEE4                            
0000EEE4                            locret_E4BC:
0000EEE4 4E75                       		rts	
0000EEE6                            ; ===========================================================================
0000EEE6                            
0000EEE6                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EEE6 4E75                       		rts	
0000EEE8                            ; ===========================================================================
0000EEE8                            
0000EEE8                            Obj14_Delete:				; XREF: Obj14_Index
0000EEE8 6000 F184                  		bra.w	DeleteObject
0000EEEC                            ; ===========================================================================
0000EEEC                            Ani_obj14:
0000EEEC                            	include "_anim\obj14.asm"
0000EEEC                            ; ---------------------------------------------------------------------------
0000EEEC                            ; Animation script - lava balls
0000EEEC                            ; ---------------------------------------------------------------------------
0000EEEC 0000                       		dc.w byte_E4CC-Ani_obj14
0000EEEE 0000                       		dc.w byte_E4D2-Ani_obj14
0000EEF0 0000                       		dc.w byte_E4D6-Ani_obj14
0000EEF2 0000                       		dc.w byte_E4DC-Ani_obj14
0000EEF4 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EEFA 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EEFE 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EF04 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EF08                            		even
0000EF08                            		even
0000EF08                            
0000EF08                            ; ===========================================================================
0000EF08                            ; ---------------------------------------------------------------------------
0000EF08                            ; Object 6D - flame thrower (SBZ)
0000EF08                            ; ---------------------------------------------------------------------------
0000EF08                            
0000EF08                            Obj6D:					; XREF: Obj_Index
0000EF08 7000                       		moveq	#0,d0
0000EF0A 1028 0024                  		move.b	$24(a0),d0
0000EF0E 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EF12 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EF16                            ; ===========================================================================
0000EF16 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EF18 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EF1A                            ; ===========================================================================
0000EF1A                            
0000EF1A                            Obj6D_Main:				; XREF: Obj6D_Index
0000EF1A 5428 0024                  		addq.b	#2,$24(a0)
0000EF1E 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EF26 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EF2C 0028 0004 0001             		ori.b	#4,1(a0)
0000EF32 117C 0001 0018             		move.b	#1,$18(a0)
0000EF38 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EF3E 117C 000C 0019             		move.b	#$C,$19(a0)
0000EF44 1028 0028                  		move.b	$28(a0),d0
0000EF48 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EF4C D040                       		add.w	d0,d0		; multiply by 2
0000EF4E 3140 0030                  		move.w	d0,$30(a0)
0000EF52 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EF56 1028 0028                  		move.b	$28(a0),d0
0000EF5A 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EF5E EB48                       		lsl.w	#5,d0		; multiply by $20
0000EF60 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EF64 117C 000A 0036             		move.b	#$A,$36(a0)
0000EF6A 0828 0001 0022             		btst	#1,$22(a0)
0000EF70 6700                       		beq.s	Obj6D_Action
0000EF72 117C 0002 001C             		move.b	#2,$1C(a0)
0000EF78 117C 0015 0036             		move.b	#$15,$36(a0)
0000EF7E                            
0000EF7E                            Obj6D_Action:				; XREF: Obj6D_Index
0000EF7E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EF82 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EF84 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EF8A 0868 0000 001C             		bchg	#0,$1C(a0)
0000EF90 6700                       		beq.s	loc_E57A
0000EF92 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EF98 303C 00B3                  		move.w	#$B3,d0
0000EF9C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flame sound
0000EFA2                            
0000EFA2                            loc_E57A:
0000EFA2 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EFA8 6100 C0E6                  		bsr.w	AnimateSprite
0000EFAC 117C 0000 0020             		move.b	#0,$20(a0)
0000EFB2 1028 0036                  		move.b	$36(a0),d0
0000EFB6 B028 001A                  		cmp.b	$1A(a0),d0
0000EFBA 6600                       		bne.s	Obj6D_ChkDel
0000EFBC 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EFC2                            
0000EFC2                            Obj6D_ChkDel:
0000EFC2 3028 0008                  		move.w	8(a0),d0
0000EFC6 0240 FF80                  		andi.w	#$FF80,d0
0000EFCA 3238 F700                  		move.w	($FFFFF700).w,d1
0000EFCE 0441 0080                  		subi.w	#$80,d1
0000EFD2 0241 FF80                  		andi.w	#$FF80,d1
0000EFD6 9041                       		sub.w	d1,d0
0000EFD8 0C40 0280                  		cmpi.w	#$280,d0
0000EFDC 6200 F090                  		bhi.w	DeleteObject
0000EFE0 6000 F050                  		bra.w	DisplaySprite
0000EFE4                            ; ===========================================================================
0000EFE4                            Ani_obj6D:
0000EFE4                            	include "_anim\obj6D.asm"
0000EFE4                            ; ---------------------------------------------------------------------------
0000EFE4                            ; Animation script - flamethrower (SBZ)
0000EFE4                            ; ---------------------------------------------------------------------------
0000EFE4 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EFE6 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EFE8 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EFEA 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EFEC 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EFFA 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000F004 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000F012 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000F01C                            		even
0000F01C                            		even
0000F01C                            
0000F01C                            ; ---------------------------------------------------------------------------
0000F01C                            ; Sprite mappings - flame thrower (SBZ)
0000F01C                            ; ---------------------------------------------------------------------------
0000F01C                            Map_obj6D:
0000F01C                            	include "_maps\obj6D.asm"
0000F01C                            ; ---------------------------------------------------------------------------
0000F01C                            ; Sprite mappings - flame thrower (SBZ)
0000F01C                            ; ---------------------------------------------------------------------------
0000F01C 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000F020 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000F024 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000F028 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000F02C 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F030 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F034 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F038 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F03C 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F040 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F044 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F048 01                         byte_E620:	dc.b 1
0000F049 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F04E 02                         byte_E626:	dc.b 2
0000F04F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F054 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F059 02                         byte_E631:	dc.b 2
0000F05A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F05F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F064 03                         byte_E63C:	dc.b 3
0000F065 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F06A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F06F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F074 03                         byte_E64C:	dc.b 3
0000F075 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F07A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F07F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F084 04                         byte_E65C:	dc.b 4
0000F085 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F08A 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F08F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F094 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F099 04                         byte_E671:	dc.b 4
0000F09A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F09F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F0A4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F0A9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0AE 05                         byte_E686:	dc.b 5
0000F0AF F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F0B4 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F0B9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F0BE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F0C3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0C8 05                         byte_E6A0:	dc.b 5
0000F0C9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F0CE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F0D3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F0D8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F0DD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0E2 06                         byte_E6BA:	dc.b 6
0000F0E3 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F0E8 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F0ED 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F0F2 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F0F7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F0FC 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F101 06                         byte_E6D9:	dc.b 6
0000F102 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F107 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F10C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F111 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F116 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F11B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F120 01                         byte_E6F8:	dc.b 1
0000F121 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F126 02                         byte_E6FE:	dc.b 2
0000F127 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F12C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F131 02                         byte_E709:	dc.b 2
0000F132 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F137 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F13C 03                         byte_E714:	dc.b 3
0000F13D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F142 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F147 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F14C 03                         byte_E724:	dc.b 3
0000F14D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F152 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F157 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F15C 04                         byte_E734:	dc.b 4
0000F15D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F162 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F167 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F16C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F171 04                         byte_E749:	dc.b 4
0000F172 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F177 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F17C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F181 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F186 05                         byte_E75E:	dc.b 5
0000F187 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F18C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F191 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F196 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F19B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1A0 05                         byte_E778:	dc.b 5
0000F1A1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1A6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F1AB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F1B0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1B5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1BA 06                         byte_E792:	dc.b 6
0000F1BB E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F1C0 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F1C5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F1CA 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F1CF 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1D4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1D9 06                         byte_E7B1:	dc.b 6
0000F1DA E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F1DF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1E4 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F1E9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F1EE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1F3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1F8                            		even
0000F1F8                            		even
0000F1F8                            
0000F1F8                            ; ===========================================================================
0000F1F8                            ; ---------------------------------------------------------------------------
0000F1F8                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F1F8                            ; ---------------------------------------------------------------------------
0000F1F8                            
0000F1F8                            Obj46:					; XREF: Obj_Index
0000F1F8 7000                       		moveq	#0,d0
0000F1FA 1028 0024                  		move.b	$24(a0),d0
0000F1FE 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F202 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F206                            ; ===========================================================================
0000F206 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F208 0000                       		dc.w Obj46_Action-Obj46_Index
0000F20A                            ; ===========================================================================
0000F20A                            
0000F20A                            Obj46_Main:				; XREF: Obj46_Index
0000F20A 5428 0024                  		addq.b	#2,$24(a0)
0000F20E 117C 000F 0016             		move.b	#$F,$16(a0)
0000F214 117C 000F 0017             		move.b	#$F,$17(a0)
0000F21A 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F222 317C 4000 0002             		move.w	#$4000,2(a0)
0000F228 117C 0004 0001             		move.b	#4,1(a0)
0000F22E 117C 0003 0018             		move.b	#3,$18(a0)
0000F234 117C 0010 0019             		move.b	#$10,$19(a0)
0000F23A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F240 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F246                            
0000F246                            Obj46_Action:				; XREF: Obj46_Index
0000F246 4A28 0001                  		tst.b	1(a0)
0000F24A 6A00                       		bpl.s	Obj46_ChkDel
0000F24C 7000                       		moveq	#0,d0
0000F24E 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F252 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F256 D040                       		add.w	d0,d0
0000F258 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F25C 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F260 323C 001B                  		move.w	#$1B,d1
0000F264 343C 0010                  		move.w	#$10,d2
0000F268 363C 0011                  		move.w	#$11,d3
0000F26C 3828 0008                  		move.w	8(a0),d4
0000F270 6100 0000                  		bsr.w	SolidObject
0000F274                            
0000F274                            Obj46_ChkDel:
0000F274 6100 EDBC                  		bsr.w	DisplaySprite
0000F278 3028 0008                  		move.w	8(a0),d0
0000F27C 0240 FF80                  		andi.w	#$FF80,d0
0000F280 3238 F700                  		move.w	($FFFFF700).w,d1
0000F284 0441 0080                  		subi.w	#$80,d1
0000F288 0241 FF80                  		andi.w	#$FF80,d1
0000F28C 9041                       		sub.w	d1,d0
0000F28E 0C40 0280                  		cmpi.w	#$280,d0
0000F292 6200 EDDA                  		bhi.w	DeleteObject
0000F296 4E75                       		rts	
0000F298                            ; ===========================================================================
0000F298 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F29A 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F29C 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F29E 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F2A0 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F2A2                            ; ===========================================================================
0000F2A2                            
0000F2A2                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F2A2 4E75                       		rts	
0000F2A4                            ; ===========================================================================
0000F2A4                            
0000F2A4                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F2A4 3038 D008                  		move.w	($FFFFD008).w,d0
0000F2A8 9068 0008                  		sub.w	8(a0),d0
0000F2AC 6400                       		bcc.s	loc_E888
0000F2AE 4440                       		neg.w	d0
0000F2B0                            
0000F2B0                            loc_E888:
0000F2B0 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F2B4 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F2B6 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F2BC                            
0000F2BC                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F2BC 7000                       		moveq	#0,d0
0000F2BE 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F2C2 0828 0003 0028             		btst	#3,$28(a0)
0000F2C8 6700                       		beq.s	loc_E8A8
0000F2CA 4440                       		neg.w	d0
0000F2CC 0640 0010                  		addi.w	#$10,d0
0000F2D0                            
0000F2D0                            loc_E8A8:
0000F2D0 3228 0030                  		move.w	$30(a0),d1
0000F2D4 9240                       		sub.w	d0,d1
0000F2D6 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F2DA 4E75                       		rts	
0000F2DC                            ; ===========================================================================
0000F2DC                            
0000F2DC                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F2DC 6100 ED2E                  		bsr.w	SpeedToPos
0000F2E0 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F2E6 6100 0000                  		bsr.w	ObjHitFloor
0000F2EA 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F2EC 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F2F0 D368 000C                  		add.w	d1,$C(a0)
0000F2F4 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F2F8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F2FE 117C 0004 0028             		move.b	#4,$28(a0)
0000F304 3011                       		move.w	(a1),d0
0000F306 0240 03FF                  		andi.w	#$3FF,d0
0000F30A 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F30E 6400                       		bcc.s	locret_E8EE
0000F310 117C 0000 0028             		move.b	#0,$28(a0)
0000F316                            
0000F316                            locret_E8EE:
0000F316 4E75                       		rts	
0000F318                            ; ===========================================================================
0000F318                            
0000F318                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F318 7000                       		moveq	#0,d0
0000F31A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F31E E648                       		lsr.w	#3,d0
0000F320 3228 0030                  		move.w	$30(a0),d1
0000F324 9240                       		sub.w	d0,d1
0000F326 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F32A 4E75                       		rts	
0000F32C                            ; ===========================================================================
0000F32C                            ; ---------------------------------------------------------------------------
0000F32C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F32C                            ; ---------------------------------------------------------------------------
0000F32C                            Map_obj46:
0000F32C                            	include "_maps\obj46.asm"
0000F32C                            ; ---------------------------------------------------------------------------
0000F32C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F32C                            ; ---------------------------------------------------------------------------
0000F32C 0000                       		dc.w byte_E906-Map_obj46
0000F32E 01                         byte_E906:	dc.b 1
0000F32F F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F334                            		even
0000F334                            		even
0000F334                            
0000F334                            ; ===========================================================================
0000F334                            ; ---------------------------------------------------------------------------
0000F334                            ; Object 12 - lamp (SYZ)
0000F334                            ; ---------------------------------------------------------------------------
0000F334                            
0000F334                            Obj12:					; XREF: Obj_Index
0000F334 7000                       		moveq	#0,d0
0000F336 1028 0024                  		move.b	$24(a0),d0
0000F33A 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F33E 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F342                            ; ===========================================================================
0000F342 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F344 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F346                            ; ===========================================================================
0000F346                            
0000F346                            Obj12_Main:				; XREF: Obj12_Index
0000F346 5428 0024                  		addq.b	#2,$24(a0)
0000F34A 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F352 317C 0000 0002             		move.w	#0,2(a0)
0000F358 117C 0004 0001             		move.b	#4,1(a0)
0000F35E 117C 0010 0019             		move.b	#$10,$19(a0)
0000F364 117C 0006 0018             		move.b	#6,$18(a0)
0000F36A                            
0000F36A                            Obj12_Animate:				; XREF: Obj12_Index
0000F36A 5328 001E                  		subq.b	#1,$1E(a0)
0000F36E 6A00                       		bpl.s	Obj12_ChkDel
0000F370 117C 0007 001E             		move.b	#7,$1E(a0)
0000F376 5228 001A                  		addq.b	#1,$1A(a0)
0000F37A 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F380 6500                       		bcs.s	Obj12_ChkDel
0000F382 117C 0000 001A             		move.b	#0,$1A(a0)
0000F388                            
0000F388                            Obj12_ChkDel:
0000F388 3028 0008                  		move.w	8(a0),d0
0000F38C 0240 FF80                  		andi.w	#$FF80,d0
0000F390 3238 F700                  		move.w	($FFFFF700).w,d1
0000F394 0441 0080                  		subi.w	#$80,d1
0000F398 0241 FF80                  		andi.w	#$FF80,d1
0000F39C 9041                       		sub.w	d1,d0
0000F39E 0C40 0280                  		cmpi.w	#$280,d0
0000F3A2 6200 ECCA                  		bhi.w	DeleteObject
0000F3A6 6000 EC8A                  		bra.w	DisplaySprite
0000F3AA                            ; ===========================================================================
0000F3AA                            ; ---------------------------------------------------------------------------
0000F3AA                            ; Sprite mappings - lamp (SYZ)
0000F3AA                            ; ---------------------------------------------------------------------------
0000F3AA                            Map_obj12:
0000F3AA                            	include "_maps\obj12.asm"
0000F3AA                            ; ---------------------------------------------------------------------------
0000F3AA                            ; Sprite mappings - lamp (SYZ)
0000F3AA                            ; ---------------------------------------------------------------------------
0000F3AA 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F3AE 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F3B2 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F3B6 02                         byte_E98E:	dc.b 2
0000F3B7 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F3BC 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F3C1 02                         byte_E999:	dc.b 2
0000F3C2 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F3C7 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F3CC 02                         byte_E9A4:	dc.b 2
0000F3CD F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F3D2 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F3D7 02                         byte_E9AF:	dc.b 2
0000F3D8 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F3DD 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F3E2 02                         byte_E9BA:	dc.b 2
0000F3E3 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F3E8 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F3ED 02                         byte_E9C5:	dc.b 2
0000F3EE F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F3F3 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F3F8                            		even
0000F3F8                            		even
0000F3F8                            
0000F3F8                            ; ===========================================================================
0000F3F8                            ; ---------------------------------------------------------------------------
0000F3F8                            ; Object 47 - pinball bumper (SYZ)
0000F3F8                            ; ---------------------------------------------------------------------------
0000F3F8                            
0000F3F8                            Obj47:					; XREF: Obj_Index
0000F3F8 7000                       		moveq	#0,d0
0000F3FA 1028 0024                  		move.b	$24(a0),d0
0000F3FE 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F402 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F406                            ; ===========================================================================
0000F406 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F408 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F40A                            ; ===========================================================================
0000F40A                            
0000F40A                            Obj47_Main:				; XREF: Obj47_Index
0000F40A 5428 0024                  		addq.b	#2,$24(a0)
0000F40E 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F416 317C 0380 0002             		move.w	#$380,2(a0)
0000F41C 117C 0004 0001             		move.b	#4,1(a0)
0000F422 117C 0010 0019             		move.b	#$10,$19(a0)
0000F428 117C 0001 0018             		move.b	#1,$18(a0)
0000F42E 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F434                            
0000F434                            Obj47_Hit:				; XREF: Obj47_Index
0000F434 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F438 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F43C 4228 0021                  		clr.b	$21(a0)
0000F440 43F8 D000                  		lea	($FFFFD000).w,a1
0000F444 3228 0008                  		move.w	8(a0),d1
0000F448 3428 000C                  		move.w	$C(a0),d2
0000F44C 9269 0008                  		sub.w	8(a1),d1
0000F450 9469 000C                  		sub.w	$C(a1),d2
0000F454 4EB9 0000 303A             		jsr	(CalcAngle).l
0000F45A 4EB9 0000 2D6C             		jsr	(CalcSine).l
0000F460 C3FC F900                  		muls.w	#-$700,d1
0000F464 E081                       		asr.l	#8,d1
0000F466 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F46A C1FC F900                  		muls.w	#-$700,d0
0000F46E E080                       		asr.l	#8,d0
0000F470 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F474 08E9 0001 0022             		bset	#1,$22(a1)
0000F47A 08A9 0004 0022             		bclr	#4,$22(a1)
0000F480 08A9 0005 0022             		bclr	#5,$22(a1)
0000F486 4229 003C                  		clr.b	$3C(a1)
0000F48A 117C 0001 001C             		move.b	#1,$1C(a0)
0000F490 303C 00B4                  		move.w	#$B4,d0
0000F494 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F49A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F49E 7000                       		moveq	#0,d0
0000F4A0 1028 0023                  		move.b	$23(a0),d0
0000F4A4 6700                       		beq.s	Obj47_Score
0000F4A6 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F4AC 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F4AE 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F4B2                            
0000F4B2                            Obj47_Score:
0000F4B2 7001                       		moveq	#1,d0
0000F4B4 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F4BA 6100 EFFC                  		bsr.w	SingleObjLoad
0000F4BE 6600                       		bne.s	Obj47_Display
0000F4C0 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F4C4 3368 0008 0008             		move.w	8(a0),8(a1)
0000F4CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F4D0 137C 0004 001A             		move.b	#4,$1A(a1)
0000F4D6                            
0000F4D6                            Obj47_Display:
0000F4D6 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F4DC 6100 BBB2                  		bsr.w	AnimateSprite
0000F4E0 3028 0008                  		move.w	8(a0),d0
0000F4E4 0240 FF80                  		andi.w	#$FF80,d0
0000F4E8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F4EC 0441 0080                  		subi.w	#$80,d1
0000F4F0 0241 FF80                  		andi.w	#$FF80,d1
0000F4F4 9041                       		sub.w	d1,d0
0000F4F6 0C40 0280                  		cmpi.w	#$280,d0
0000F4FA 6200                       		bhi.s	Obj47_ChkHit
0000F4FC 6000 EB34                  		bra.w	DisplaySprite
0000F500                            ; ===========================================================================
0000F500                            
0000F500                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F500 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F504 7000                       		moveq	#0,d0
0000F506 1028 0023                  		move.b	$23(a0),d0
0000F50A 6700                       		beq.s	Obj47_Delete
0000F50C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F512                            
0000F512                            Obj47_Delete:
0000F512 6000 EB5A                  		bra.w	DeleteObject
0000F516                            ; ===========================================================================
0000F516                            Ani_obj47:
0000F516                            	include "_anim\obj47.asm"
0000F516                            ; ---------------------------------------------------------------------------
0000F516                            ; Animation script - flamethrower (SBZ)
0000F516                            ; ---------------------------------------------------------------------------
0000F516 0000                       		dc.w byte_EAF4-Ani_obj47
0000F518 0000                       		dc.w byte_EAF8-Ani_obj47
0000F51A 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F51E 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F526                            		even
0000F526                            		even
0000F526                            
0000F526                            ; ---------------------------------------------------------------------------
0000F526                            ; Sprite mappings - pinball bumper (SYZ)
0000F526                            ; ---------------------------------------------------------------------------
0000F526                            Map_obj47:
0000F526                            	include "_maps\obj47.asm"
0000F526                            ; ---------------------------------------------------------------------------
0000F526                            ; Sprite mappings - pinball bumper (SYZ)
0000F526                            ; ---------------------------------------------------------------------------
0000F526 0000                       		dc.w byte_EB06-Map_obj47
0000F528 0000                       		dc.w byte_EB11-Map_obj47
0000F52A 0000                       		dc.w byte_EB1C-Map_obj47
0000F52C 02                         byte_EB06:	dc.b 2
0000F52D F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F532 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F537 02                         byte_EB11:	dc.b 2
0000F538 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F53D F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F542 02                         byte_EB1C:	dc.b 2
0000F543 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F548 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F54E 00                         		even
0000F54E 00                         		even
0000F54E                            
0000F54E                            ; ===========================================================================
0000F54E                            ; ---------------------------------------------------------------------------
0000F54E                            ; Object 0D - signpost at the end of a level
0000F54E                            ; ---------------------------------------------------------------------------
0000F54E                            
0000F54E                            Obj0D:					; XREF: Obj_Index
0000F54E 7000                       		moveq	#0,d0
0000F550 1028 0024                  		move.b	$24(a0),d0
0000F554 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F558 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F55C 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F562 6100 BB2C                  		bsr.w	AnimateSprite
0000F566 6100 EACA                  		bsr.w	DisplaySprite
0000F56A 3028 0008                  		move.w	8(a0),d0
0000F56E 0240 FF80                  		andi.w	#$FF80,d0
0000F572 3238 F700                  		move.w	($FFFFF700).w,d1
0000F576 0441 0080                  		subi.w	#$80,d1
0000F57A 0241 FF80                  		andi.w	#$FF80,d1
0000F57E 9041                       		sub.w	d1,d0
0000F580 0C40 0280                  		cmpi.w	#$280,d0
0000F584 6200 EAE8                  		bhi.w	DeleteObject
0000F588 4E75                       		rts	
0000F58A                            ; ===========================================================================
0000F58A 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F58C 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F58E 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F590 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F592 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F594                            ; ===========================================================================
0000F594                            
0000F594                            Obj0D_Main:				; XREF: Obj0D_Index
0000F594 5428 0024                  		addq.b	#2,$24(a0)
0000F598 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F5A0 317C 0680 0002             		move.w	#$680,2(a0)
0000F5A6 117C 0004 0001             		move.b	#4,1(a0)
0000F5AC 117C 0018 0019             		move.b	#$18,$19(a0)
0000F5B2 117C 0004 0018             		move.b	#4,$18(a0)
0000F5B8                            
0000F5B8                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F5B8 3038 D008                  		move.w	($FFFFD008).w,d0
0000F5BC 9068 0008                  		sub.w	8(a0),d0
0000F5C0 6500                       		bcs.s	locret_EBBA
0000F5C2 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F5C6 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F5C8 303C 00CF                  		move.w	#$CF,d0
0000F5CC 4EB9 0000 15CC             		jsr	(PlaySound).l	; play signpost	sound
0000F5D2 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F5D6 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F5DC 5428 0024                  		addq.b	#2,$24(a0)
0000F5E0                            
0000F5E0                            locret_EBBA:
0000F5E0 4E75                       		rts	
0000F5E2                            ; ===========================================================================
0000F5E2                            
0000F5E2                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F5E2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F5E6 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F5E8 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F5EE 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F5F2 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F5F8 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F5FA 5428 0024                  		addq.b	#2,$24(a0)
0000F5FE                            
0000F5FE                            Obj0D_Sparkle:
0000F5FE 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F602 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F604 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F60A 7000                       		moveq	#0,d0
0000F60C 1028 0034                  		move.b	$34(a0),d0
0000F610 5428 0034                  		addq.b	#2,$34(a0)
0000F614 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F61A 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F61E 6100 EE98                  		bsr.w	SingleObjLoad
0000F622 6600                       		bne.s	locret_EC42
0000F624 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F628 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F62E 101A                       		move.b	(a2)+,d0
0000F630 4880                       		ext.w	d0
0000F632 D068 0008                  		add.w	8(a0),d0
0000F636 3340 0008                  		move.w	d0,8(a1)
0000F63A 101A                       		move.b	(a2)+,d0
0000F63C 4880                       		ext.w	d0
0000F63E D068 000C                  		add.w	$C(a0),d0
0000F642 3340 000C                  		move.w	d0,$C(a1)
0000F646 237C 0000 A82E 0004        		move.l	#Map_obj25,4(a1)
0000F64E 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F654 137C 0004 0001             		move.b	#4,1(a1)
0000F65A 137C 0002 0018             		move.b	#2,$18(a1)
0000F660 137C 0008 0019             		move.b	#8,$19(a1)
0000F666                            
0000F666                            locret_EC42:
0000F666 4E75                       		rts	
0000F668                            ; ===========================================================================
0000F668 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F66A 0808                       		dc.b	8,   8
0000F66C F000                       		dc.b -$10,   0
0000F66E 18F8                       		dc.b  $18,  -8
0000F670 00F8                       		dc.b	0,  -8
0000F672 1000                       		dc.b  $10,   0
0000F674 E808                       		dc.b -$18,   8
0000F676 1810                       		dc.b  $18, $10
0000F678                            ; ===========================================================================
0000F678                            
0000F678                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F678 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F67C 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F680 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F686 6600                       		bne.s	loc_EC70
0000F688 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F68E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F694 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F696 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F69C 6000                       		bra.s	loc_EC70
0000F69E                            
0000F69E                            Obj0D_MoveLeft:
0000F69E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F6A4                            
0000F6A4                            loc_EC70:
0000F6A4 4A38 D000                  		tst.b	($FFFFD000).w
0000F6A8 6700                       		beq.s	loc_EC86
0000F6AA 3038 D008                  		move.w	($FFFFD008).w,d0
0000F6AE 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F6B2 0641 0128                  		addi.w	#$128,d1
0000F6B6 B041                       		cmp.w	d1,d0
0000F6B8 6500                       		bcs.s	locret_ECEE
0000F6BA                            
0000F6BA                            loc_EC86:
0000F6BA 5428 0024                  		addq.b	#2,$24(a0)
0000F6BE                            
0000F6BE                            ; ---------------------------------------------------------------------------
0000F6BE                            ; Subroutine to	set up bonuses at the end of an	act
0000F6BE                            ; ---------------------------------------------------------------------------
0000F6BE                            
0000F6BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6BE                            
0000F6BE                            
0000F6BE                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F6BE 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F6C2 6600                       		bne.s	locret_ECEE
0000F6C4 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F6CA 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F6CE 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F6D2 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F6D8 7010                       		moveq	#$10,d0
0000F6DA 4EB9 0000 17E8             		jsr	(LoadPLC2).l	; load title card patterns
0000F6E0 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F6E6 7000                       		moveq	#0,d0
0000F6E8 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F6EC C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F6F0 7200                       		moveq	#0,d1
0000F6F2 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F6F6 D041                       		add.w	d1,d0		; add up your time
0000F6F8 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F6FC 7214                       		moveq	#$14,d1
0000F6FE B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F700 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F702 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F704                            
0000F704                            loc_ECD0:
0000F704 D040                       		add.w	d0,d0
0000F706 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F70C 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F710 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F714 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F718 303C 008E                  		move.w	#$8E,d0
0000F71C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F722                            
0000F722                            locret_ECEE:
0000F722 4E75                       		rts	
0000F724                            ; End of function GotThroughAct
0000F724                            
0000F724                            ; ===========================================================================
0000F724 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F738 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F74E                            ; ===========================================================================
0000F74E                            
0000F74E                            locret_ED1A:				; XREF: Obj0D_Index
0000F74E 4E75                       		rts	
0000F750                            ; ===========================================================================
0000F750                            Ani_obj0D:
0000F750                            	include "_anim\obj0D.asm"
0000F750                            ; ---------------------------------------------------------------------------
0000F750                            ; Animation script - signpost
0000F750                            ; ---------------------------------------------------------------------------
0000F750 0000                       		dc.w byte_ED24-Ani_obj0D
0000F752 0000                       		dc.w byte_ED28-Ani_obj0D
0000F754 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F756 0000                       		dc.w byte_ED34-Ani_obj0D
0000F758 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F75C 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F762 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F768 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F76C 00                         		even
0000F76C 00                         		even
0000F76C                            
0000F76C                            ; ---------------------------------------------------------------------------
0000F76C                            ; Sprite mappings - signpost
0000F76C                            ; ---------------------------------------------------------------------------
0000F76C                            Map_obj0D:
0000F76C                            	include "_maps\obj0D.asm"
0000F76C                            ; ---------------------------------------------------------------------------
0000F76C                            ; Sprite mappings - signpost
0000F76C                            ; ---------------------------------------------------------------------------
0000F76C 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F770 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F774 0000                       		dc.w byte_ED73-Map_obj0D
0000F776 03                         byte_ED42:	dc.b 3
0000F777 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F77C F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F781 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F786 02                         byte_ED52:	dc.b 2
0000F787 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F78C 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F791 02                         byte_ED5D:	dc.b 2
0000F792 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F797 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F79C 02                         byte_ED68:	dc.b 2
0000F79D F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F7A2 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F7A7 03                         byte_ED73:	dc.b 3
0000F7A8 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F7AD F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F7B2 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F7B8 00                         		even
0000F7B8 00                         		even
0000F7B8                            
0000F7B8                            ; ===========================================================================
0000F7B8                            ; ---------------------------------------------------------------------------
0000F7B8                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F7B8                            ; ---------------------------------------------------------------------------
0000F7B8                            
0000F7B8                            Obj4C:					; XREF: Obj_Index
0000F7B8 7000                       		moveq	#0,d0
0000F7BA 1028 0024                  		move.b	$24(a0),d0
0000F7BE 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F7C2 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F7C6 6000 0000                  		bra.w	Obj4D_ChkDel
0000F7CA                            ; ===========================================================================
0000F7CA 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F7CC 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F7CE 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F7D0 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F7D2 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F7D4 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F7D6                            ; ===========================================================================
0000F7D6                            
0000F7D6                            Obj4C_Main:				; XREF: Obj4C_Index
0000F7D6 5428 0024                  		addq.b	#2,$24(a0)
0000F7DA 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F7E2 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F7E8 117C 0004 0001             		move.b	#4,1(a0)
0000F7EE 117C 0001 0018             		move.b	#1,$18(a0)
0000F7F4 117C 0038 0019             		move.b	#$38,$19(a0)
0000F7FA 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F800                            
0000F800                            loc_EDCC:				; XREF: Obj4C_Index
0000F800 5368 0032                  		subq.w	#1,$32(a0)
0000F804 6A00                       		bpl.s	locret_EDF0
0000F806 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F80C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F810 3228 000C                  		move.w	$C(a0),d1
0000F814 B041                       		cmp.w	d1,d0
0000F816 6400                       		bcc.s	locret_EDF0
0000F818 0441 0170                  		subi.w	#$170,d1
0000F81C B041                       		cmp.w	d1,d0
0000F81E 6500                       		bcs.s	locret_EDF0
0000F820 5428 0024                  		addq.b	#2,$24(a0)
0000F824                            
0000F824                            locret_EDF0:
0000F824 4E75                       		rts	
0000F826                            ; ===========================================================================
0000F826                            
0000F826                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F826 5428 0024                  		addq.b	#2,$24(a0)
0000F82A 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F82E 6600                       		bne.s	loc_EE18
0000F830 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F834 3368 0008 0008             		move.w	8(a0),8(a1)
0000F83A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F840 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F846 2348 003C                  		move.l	a0,$3C(a1)
0000F84A                            
0000F84A                            loc_EE18:
0000F84A 117C 0001 001C             		move.b	#1,$1C(a0)
0000F850 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F854 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F856 117C 0004 001C             		move.b	#4,$1C(a0)
0000F85C 6000                       		bra.s	Obj4C_Display
0000F85E                            ; ===========================================================================
0000F85E                            
0000F85E                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F85E 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F862 08E9 0001 0022             		bset	#1,$22(a1)
0000F868 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F86E 6000                       		bra.s	Obj4C_Display
0000F870                            ; ===========================================================================
0000F870                            
0000F870                            loc_EE3E:				; XREF: Obj4C_Index
0000F870 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F874 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F876 5428 0024                  		addq.b	#2,$24(a0)
0000F87A 4E75                       		rts	
0000F87C                            ; ===========================================================================
0000F87C                            
0000F87C                            Obj4C_Display:				; XREF: Obj4C_Index
0000F87C 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F882 6100 B80C                  		bsr.w	AnimateSprite
0000F886 6100 E7AA                  		bsr.w	DisplaySprite
0000F88A 4E75                       		rts	
0000F88C                            ; ===========================================================================
0000F88C                            
0000F88C                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F88C 117C 0000 001C             		move.b	#0,$1C(a0)
0000F892 117C 0002 0024             		move.b	#2,$24(a0)
0000F898 4A28 0028                  		tst.b	$28(a0)
0000F89C 6700 E7D0                  		beq.w	DeleteObject
0000F8A0 4E75                       		rts	
0000F8A2                            ; ===========================================================================
0000F8A2                            ; ---------------------------------------------------------------------------
0000F8A2                            ; Object 4D - lava geyser / lavafall (MZ)
0000F8A2                            ; ---------------------------------------------------------------------------
0000F8A2                            
0000F8A2                            Obj4D:					; XREF: Obj_Index
0000F8A2 7000                       		moveq	#0,d0
0000F8A4 1028 0024                  		move.b	$24(a0),d0
0000F8A8 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F8AC 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F8B0 6000 E780                  		bra.w	DisplaySprite
0000F8B4                            ; ===========================================================================
0000F8B4 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F8B6 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F8B8 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F8BA 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F8BC                            
0000F8BC FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F8C0                            ; ===========================================================================
0000F8C0                            
0000F8C0                            Obj4D_Main:				; XREF: Obj4D_Index
0000F8C0 5428 0024                  		addq.b	#2,$24(a0)
0000F8C4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F8CA 4A28 0028                  		tst.b	$28(a0)
0000F8CE 6700                       		beq.s	loc_EEA4
0000F8D0 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F8D6                            
0000F8D6                            loc_EEA4:
0000F8D6 7000                       		moveq	#0,d0
0000F8D8 1028 0028                  		move.b	$28(a0),d0
0000F8DC D040                       		add.w	d0,d0
0000F8DE 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F8E4 2248                       		movea.l	a0,a1
0000F8E6 7201                       		moveq	#1,d1
0000F8E8 6100                       		bsr.s	Obj4D_MakeLava
0000F8EA 6000                       		bra.s	loc_EF10
0000F8EC                            ; ===========================================================================
0000F8EC                            
0000F8EC                            Obj4D_Loop:
0000F8EC 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F8F0 6600                       		bne.s	loc_EF0A
0000F8F2                            
0000F8F2                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F8F2 12BC 004D                  		move.b	#$4D,0(a1)
0000F8F6 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F8FE 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F904 137C 0004 0001             		move.b	#4,1(a1)
0000F90A 137C 0020 0019             		move.b	#$20,$19(a1)
0000F910 3368 0008 0008             		move.w	8(a0),8(a1)
0000F916 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F91C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F922 137C 0001 0018             		move.b	#1,$18(a1)
0000F928 137C 0005 001C             		move.b	#5,$1C(a1)
0000F92E 4A28 0028                  		tst.b	$28(a0)
0000F932 6700                       		beq.s	loc_EF0A
0000F934 137C 0002 001C             		move.b	#2,$1C(a1)
0000F93A                            
0000F93A                            loc_EF0A:
0000F93A 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F93E 4E75                       		rts	
0000F940                            ; ===========================================================================
0000F940                            
0000F940                            loc_EF10:				; XREF: Obj4D_Main
0000F940 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F946 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F94C 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F952 137C 0093 0020             		move.b	#$93,$20(a1)
0000F958 137C 0080 0016             		move.b	#$80,$16(a1)
0000F95E 08E9 0004 0001             		bset	#4,1(a1)
0000F964 5829 0024                  		addq.b	#4,$24(a1)
0000F968 2348 003C                  		move.l	a0,$3C(a1)
0000F96C 4A28 0028                  		tst.b	$28(a0)
0000F970 6700                       		beq.s	Obj4D_PlaySnd
0000F972 7200                       		moveq	#0,d1
0000F974 6100 FF76                  		bsr.w	Obj4D_Loop
0000F978 5429 0024                  		addq.b	#2,$24(a1)
0000F97C 08E9 0004 0002             		bset	#4,2(a1)
0000F982 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F988 137C 0000 0018             		move.b	#0,$18(a1)
0000F98E 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F994 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F99A 117C 0000 0028             		move.b	#0,$28(a0)
0000F9A0                            
0000F9A0                            Obj4D_PlaySnd:
0000F9A0 303C 00C8                  		move.w	#$C8,d0
0000F9A4 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flame sound
0000F9AA                            
0000F9AA                            Obj4D_Action:				; XREF: Obj4D_Index
0000F9AA 7000                       		moveq	#0,d0
0000F9AC 1028 0028                  		move.b	$28(a0),d0
0000F9B0 D040                       		add.w	d0,d0
0000F9B2 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F9B6 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F9BA 6100 E650                  		bsr.w	SpeedToPos
0000F9BE 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F9C4 6100 B6CA                  		bsr.w	AnimateSprite
0000F9C8                            
0000F9C8                            Obj4D_ChkDel:				; XREF: Obj4C
0000F9C8 3028 0008                  		move.w	8(a0),d0
0000F9CC 0240 FF80                  		andi.w	#$FF80,d0
0000F9D0 3238 F700                  		move.w	($FFFFF700).w,d1
0000F9D4 0441 0080                  		subi.w	#$80,d1
0000F9D8 0241 FF80                  		andi.w	#$FF80,d1
0000F9DC 9041                       		sub.w	d1,d0
0000F9DE 0C40 0280                  		cmpi.w	#$280,d0
0000F9E2 6200 E68A                  		bhi.w	DeleteObject
0000F9E6 4E75                       		rts	
0000F9E8                            ; ===========================================================================
0000F9E8 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F9EA 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F9EC                            ; ===========================================================================
0000F9EC                            
0000F9EC                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F9EC 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F9F2 3028 0030                  		move.w	$30(a0),d0
0000F9F6 B068 000C                  		cmp.w	$C(a0),d0
0000F9FA 6400                       		bcc.s	locret_EFDA
0000F9FC 5828 0024                  		addq.b	#4,$24(a0)
0000FA00 2268 003C                  		movea.l	$3C(a0),a1
0000FA04 137C 0003 001C             		move.b	#3,$1C(a1)
0000FA0A                            
0000FA0A                            locret_EFDA:
0000FA0A 4E75                       		rts	
0000FA0C                            ; ===========================================================================
0000FA0C                            
0000FA0C                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000FA0C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FA12 3028 0030                  		move.w	$30(a0),d0
0000FA16 B068 000C                  		cmp.w	$C(a0),d0
0000FA1A 6400                       		bcc.s	locret_EFFA
0000FA1C 5828 0024                  		addq.b	#4,$24(a0)
0000FA20 2268 003C                  		movea.l	$3C(a0),a1
0000FA24 137C 0001 001C             		move.b	#1,$1C(a1)
0000FA2A                            
0000FA2A                            locret_EFFA:
0000FA2A 4E75                       		rts	
0000FA2C                            ; ===========================================================================
0000FA2C                            
0000FA2C                            loc_EFFC:				; XREF: Obj4D_Index
0000FA2C 2268 003C                  		movea.l	$3C(a0),a1
0000FA30 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000FA36 6700 0000                  		beq.w	Obj4D_Delete
0000FA3A 3029 000C                  		move.w	$C(a1),d0
0000FA3E 0640 0060                  		addi.w	#$60,d0
0000FA42 3140 000C                  		move.w	d0,$C(a0)
0000FA46 9068 0030                  		sub.w	$30(a0),d0
0000FA4A 4440                       		neg.w	d0
0000FA4C 7208                       		moveq	#8,d1
0000FA4E 0C40 0040                  		cmpi.w	#$40,d0
0000FA52 6C00                       		bge.s	loc_F026
0000FA54 720B                       		moveq	#$B,d1
0000FA56                            
0000FA56                            loc_F026:
0000FA56 0C40 0080                  		cmpi.w	#$80,d0
0000FA5A 6F00                       		ble.s	loc_F02E
0000FA5C 720E                       		moveq	#$E,d1
0000FA5E                            
0000FA5E                            loc_F02E:
0000FA5E 5328 001E                  		subq.b	#1,$1E(a0)
0000FA62 6A00                       		bpl.s	loc_F04C
0000FA64 117C 0007 001E             		move.b	#7,$1E(a0)
0000FA6A 5228 001B                  		addq.b	#1,$1B(a0)
0000FA6E 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000FA74 6500                       		bcs.s	loc_F04C
0000FA76 117C 0000 001B             		move.b	#0,$1B(a0)
0000FA7C                            
0000FA7C                            loc_F04C:
0000FA7C 1028 001B                  		move.b	$1B(a0),d0
0000FA80 D001                       		add.b	d1,d0
0000FA82 1140 001A                  		move.b	d0,$1A(a0)
0000FA86 6000 FF40                  		bra.w	Obj4D_ChkDel
0000FA8A                            ; ===========================================================================
0000FA8A                            
0000FA8A                            Obj4D_Delete:				; XREF: Obj4D_Index
0000FA8A 6000 E5E2                  		bra.w	DeleteObject
0000FA8E                            ; ===========================================================================
0000FA8E                            ; ---------------------------------------------------------------------------
0000FA8E                            ; Object 4E - advancing	wall of	lava (MZ)
0000FA8E                            ; ---------------------------------------------------------------------------
0000FA8E                            
0000FA8E                            Obj4E:					; XREF: Obj_Index
0000FA8E 7000                       		moveq	#0,d0
0000FA90 1028 0024                  		move.b	$24(a0),d0
0000FA94 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000FA98 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000FA9C                            ; ===========================================================================
0000FA9C 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000FA9E 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000FAA0 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000FAA2 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000FAA4 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000FAA6                            ; ===========================================================================
0000FAA6                            
0000FAA6                            Obj4E_Main:				; XREF: Obj4E_Index
0000FAA6 5828 0024                  		addq.b	#4,$24(a0)
0000FAAA 2248                       		movea.l	a0,a1
0000FAAC 7201                       		moveq	#1,d1
0000FAAE 6000                       		bra.s	Obj4E_Main2
0000FAB0                            ; ===========================================================================
0000FAB0                            
0000FAB0                            Obj4E_Loop:
0000FAB0 6100 EA1C                  		bsr.w	SingleObjLoad2
0000FAB4 6600                       		bne.s	loc_F0C8
0000FAB6                            
0000FAB6                            Obj4E_Main2:				; XREF: Obj4E_Main
0000FAB6 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000FABA 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000FAC2 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FAC8 137C 0004 0001             		move.b	#4,1(a1)
0000FACE 137C 0050 0019             		move.b	#$50,$19(a1)
0000FAD4 3368 0008 0008             		move.w	8(a0),8(a1)
0000FADA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FAE0 137C 0001 0018             		move.b	#1,$18(a1)
0000FAE6 137C 0000 001C             		move.b	#0,$1C(a1)
0000FAEC 137C 0094 0020             		move.b	#$94,$20(a1)
0000FAF2 2348 003C                  		move.l	a0,$3C(a1)
0000FAF6                            
0000FAF6                            loc_F0C8:
0000FAF6 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000FAFA                            
0000FAFA 5C29 0024                  		addq.b	#6,$24(a1)
0000FAFE 137C 0004 001A             		move.b	#4,$1A(a1)
0000FB04                            
0000FB04                            Obj4E_Action:				; XREF: Obj4E_Index
0000FB04 3038 D008                  		move.w	($FFFFD008).w,d0
0000FB08 9068 0008                  		sub.w	8(a0),d0
0000FB0C 6400                       		bcc.s	Obj4E_ChkSonic
0000FB0E 4440                       		neg.w	d0
0000FB10                            
0000FB10                            Obj4E_ChkSonic:
0000FB10 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000FB14 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FB16 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FB1A 9068 000C                  		sub.w	$C(a0),d0
0000FB1E 6400                       		bcc.s	loc_F0F4
0000FB20 4440                       		neg.w	d0
0000FB22                            
0000FB22                            loc_F0F4:
0000FB22 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000FB26 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FB28 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000FB2E 6000                       		bra.s	Obj4E_Solid
0000FB30                            ; ===========================================================================
0000FB30                            
0000FB30                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000FB30 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000FB34 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000FB36 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000FB3C 5528 0024                  		subq.b	#2,$24(a0)
0000FB40                            
0000FB40                            Obj4E_Solid:				; XREF: Obj4E_Index
0000FB40 323C 002B                  		move.w	#$2B,d1
0000FB44 343C 0018                  		move.w	#$18,d2
0000FB48 3602                       		move.w	d2,d3
0000FB4A 5243                       		addq.w	#1,d3
0000FB4C 3828 0008                  		move.w	8(a0),d4
0000FB50 1028 0024                  		move.b	$24(a0),d0
0000FB54 3F00                       		move.w	d0,-(sp)
0000FB56 6100 0000                  		bsr.w	SolidObject
0000FB5A 301F                       		move.w	(sp)+,d0
0000FB5C 1140 0024                  		move.b	d0,$24(a0)
0000FB60 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000FB66 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000FB68 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000FB6C 4228 0036                  		clr.b	$36(a0)
0000FB70                            
0000FB70                            Obj4E_Animate:
0000FB70 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000FB76 6100 B518                  		bsr.w	AnimateSprite
0000FB7A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000FB80 6400                       		bcc.s	Obj4E_ChkDel
0000FB82 6100 E488                  		bsr.w	SpeedToPos
0000FB86                            
0000FB86                            Obj4E_ChkDel:
0000FB86 6100 E4AA                  		bsr.w	DisplaySprite
0000FB8A 4A28 0036                  		tst.b	$36(a0)
0000FB8E 6600                       		bne.s	locret_F17E
0000FB90 3028 0008                  		move.w	8(a0),d0
0000FB94 0240 FF80                  		andi.w	#$FF80,d0
0000FB98 3238 F700                  		move.w	($FFFFF700).w,d1
0000FB9C 0441 0080                  		subi.w	#$80,d1
0000FBA0 0241 FF80                  		andi.w	#$FF80,d1
0000FBA4 9041                       		sub.w	d1,d0
0000FBA6 0C40 0280                  		cmpi.w	#$280,d0
0000FBAA 6200                       		bhi.s	Obj4E_ChkGone
0000FBAC                            
0000FBAC                            locret_F17E:
0000FBAC 4E75                       		rts	
0000FBAE                            ; ===========================================================================
0000FBAE                            
0000FBAE                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FBAE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FBB2 7000                       		moveq	#0,d0
0000FBB4 1028 0023                  		move.b	$23(a0),d0
0000FBB8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FBBE 117C 0008 0024             		move.b	#8,$24(a0)
0000FBC4 4E75                       		rts	
0000FBC6                            ; ===========================================================================
0000FBC6                            
0000FBC6                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FBC6 2268 003C                  		movea.l	$3C(a0),a1
0000FBCA 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FBD0 6700                       		beq.s	Obj4E_Delete
0000FBD2 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FBD8 0468 0080 0008             		subi.w	#$80,8(a0)
0000FBDE 6000 E452                  		bra.w	DisplaySprite
0000FBE2                            ; ===========================================================================
0000FBE2                            
0000FBE2                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FBE2 6000 E48A                  		bra.w	DeleteObject
0000FBE6                            ; ===========================================================================
0000FBE6                            ; ---------------------------------------------------------------------------
0000FBE6                            ; Object 54 - invisible	lava tag (MZ)
0000FBE6                            ; ---------------------------------------------------------------------------
0000FBE6                            
0000FBE6                            Obj54:					; XREF: Obj_Index
0000FBE6 7000                       		moveq	#0,d0
0000FBE8 1028 0024                  		move.b	$24(a0),d0
0000FBEC 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FBF0 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FBF4                            ; ===========================================================================
0000FBF4 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FBF6 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FBF8                            
0000FBF8 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FBFC                            ; ===========================================================================
0000FBFC                            
0000FBFC                            Obj54_Main:				; XREF: Obj54_Index
0000FBFC 5428 0024                  		addq.b	#2,$24(a0)
0000FC00 7000                       		moveq	#0,d0
0000FC02 1028 0028                  		move.b	$28(a0),d0
0000FC06 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FC0C 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FC14 117C 0084 0001             		move.b	#$84,1(a0)
0000FC1A                            
0000FC1A                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FC1A 3028 0008                  		move.w	8(a0),d0
0000FC1E 0240 FF80                  		andi.w	#$FF80,d0
0000FC22 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC26 0441 0080                  		subi.w	#$80,d1
0000FC2A 0241 FF80                  		andi.w	#$FF80,d1
0000FC2E 9041                       		sub.w	d1,d0
0000FC30 6B00 E43C                  		bmi.w	DeleteObject
0000FC34 0C40 0280                  		cmpi.w	#$280,d0
0000FC38 6200 E434                  		bhi.w	DeleteObject
0000FC3C 4E75                       		rts	
0000FC3E                            ; ===========================================================================
0000FC3E                            ; ---------------------------------------------------------------------------
0000FC3E                            ; Sprite mappings - invisible lava tag (MZ)
0000FC3E                            ; ---------------------------------------------------------------------------
0000FC3E                            Map_obj54:
0000FC3E                            	include "_maps\obj54.asm"
0000FC3E                            ; ---------------------------------------------------------------------------
0000FC3E                            ; Sprite mappings - invisible lava tag (MZ)
0000FC3E                            ; ---------------------------------------------------------------------------
0000FC3E 0000                       		dc.w byte_F212-Map_obj54
0000FC40 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FC42 00                         		even
0000FC42 00                         		even
0000FC42                            
0000FC42                            Ani_obj4C:
0000FC42                            	include "_anim\obj4C.asm"
0000FC42                            ; ---------------------------------------------------------------------------
0000FC42                            ; Animation script - geyser of lava (MZ)
0000FC42                            ; ---------------------------------------------------------------------------
0000FC42 0000                       		dc.w byte_F220-Ani_obj4C
0000FC44 0000                       		dc.w byte_F22A-Ani_obj4C
0000FC46 0000                       		dc.w byte_F22E-Ani_obj4C
0000FC48 0000                       		dc.w byte_F232-Ani_obj4C
0000FC4A 0000                       		dc.w byte_F23A-Ani_obj4C
0000FC4C 0000                       		dc.w byte_F23E-Ani_obj4C
0000FC4E 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FC58 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FC5C 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FC60 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FC68 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FC6C 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FC70                            		even
0000FC70                            		even
0000FC70                            
0000FC70                            Ani_obj4E:
0000FC70                            	include "_anim\obj4E.asm"
0000FC70                            ; ---------------------------------------------------------------------------
0000FC70                            ; Animation script - advancing wall of lava (MZ)
0000FC70                            ; ---------------------------------------------------------------------------
0000FC70 0000                       		dc.w byte_F244-Ani_obj4E
0000FC72 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FC78                            		even
0000FC78                            		even
0000FC78                            
0000FC78                            ; ---------------------------------------------------------------------------
0000FC78                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FC78                            ; ---------------------------------------------------------------------------
0000FC78                            Map_obj4C:
0000FC78                            	include "_maps\obj4C.asm"
0000FC78                            ; ---------------------------------------------------------------------------
0000FC78                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FC78                            ; ---------------------------------------------------------------------------
0000FC78 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FC7C 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FC80 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FC84 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FC88 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FC8C 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FC90 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FC94 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FC98 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FC9C 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FCA0 02                         byte_F272:	dc.b 2
0000FCA1 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FCA6 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FCAB 02                         byte_F27D:	dc.b 2
0000FCAC EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FCB1 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FCB6 04                         byte_F288:	dc.b 4
0000FCB7 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FCBC F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FCC1 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FCC6 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FCCB 04                         byte_F29D:	dc.b 4
0000FCCC EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FCD1 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FCD6 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FCDB EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FCE0 06                         byte_F2B2:	dc.b 6
0000FCE1 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FCE6 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FCEB F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FCF0 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FCF5 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FCFA E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FCFF 06                         byte_F2D1:	dc.b 6
0000FD00 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FD05 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FD0A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FD0F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FD14 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FD19 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FD1E 02                         byte_F2F0:	dc.b 2
0000FD1F E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FD24 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FD29 02                         byte_F2FB:	dc.b 2
0000FD2A E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FD2F E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FD34 0A                         byte_F306:	dc.b $A
0000FD35 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FD3A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FD3F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FD44 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FD49 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FD4E D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FD53 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FD58 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FD5D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FD62 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FD67 0A                         byte_F339:	dc.b $A
0000FD68 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FD6D 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FD72 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FD77 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FD7C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FD81 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FD86 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FD8B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FD90 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FD95 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FD9A 0A                         byte_F36C:	dc.b $A
0000FD9B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FDA0 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FDA5 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FDAA B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FDAF D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FDB4 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FDB9 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FDBE F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FDC3 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FDC8 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FDCD 06                         byte_F39F:	dc.b 6
0000FDCE 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FDD3 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FDD8 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FDDD B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FDE2 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FDE7 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FDEC 06                         byte_F3BE:	dc.b 6
0000FDED 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FDF2 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FDF7 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FDFC B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FE01 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FE06 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FE0B 06                         byte_F3DD:	dc.b 6
0000FE0C 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FE11 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FE16 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FE1B B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FE20 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FE25 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FE2A 10                         byte_F3FC:	dc.b $10
0000FE2B 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FE30 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FE35 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FE3A B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FE3F D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FE44 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FE49 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FE4E F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FE53 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FE58 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FE5D 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FE62 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FE67 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FE6C 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FE71 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FE76 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FE7B 10                         byte_F44D:	dc.b $10
0000FE7C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FE81 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FE86 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FE8B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FE90 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FE95 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FE9A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FE9F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FEA4 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FEA9 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FEAE 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FEB3 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FEB8 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FEBD 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FEC2 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FEC7 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FECC 10                         byte_F49E:	dc.b $10
0000FECD 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FED2 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FED7 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FEDC B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FEE1 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FEE6 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FEEB F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FEF0 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FEF5 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FEFA 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FEFF 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FF04 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FF09 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FF0E 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FF13 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FF18 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FF1D 06                         byte_F4EF:	dc.b 6
0000FF1E E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FF23 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FF28 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FF2D E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FF32 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FF37 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FF3C 06                         byte_F50E:	dc.b 6
0000FF3D E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FF42 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FF47 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FF4C E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FF51 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FF56 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FF5B 00                         byte_F52D:	dc.b 0
0000FF5C                            		even
0000FF5C                            		even
0000FF5C                            
0000FF5C                            ; ---------------------------------------------------------------------------
0000FF5C                            ; Sprite mappings - advancing wall of lava (MZ)
0000FF5C                            ; ---------------------------------------------------------------------------
0000FF5C                            Map_obj4E:
0000FF5C                            	include "_maps\obj4E.asm"
0000FF5C                            ; ---------------------------------------------------------------------------
0000FF5C                            ; Sprite mappings - advancing wall of lava (MZ)
0000FF5C                            ; ---------------------------------------------------------------------------
0000FF5C 0000                       		dc.w byte_F538-Map_obj4E
0000FF5E 0000                       		dc.w byte_F566-Map_obj4E
0000FF60 0000                       		dc.w byte_F594-Map_obj4E
0000FF62 0000                       		dc.w byte_F5C2-Map_obj4E
0000FF64 0000                       		dc.w byte_F5F0-Map_obj4E
0000FF66 09                         byte_F538:	dc.b 9
0000FF67 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FF6C 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FF71 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FF76 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FF7B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FF80 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FF85 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FF8A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FF8F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FF94 09                         byte_F566:	dc.b 9
0000FF95 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FF9A 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FF9F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FFA4 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FFA9 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFAE E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FFB3 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FFB8 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FFBD 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FFC2 09                         byte_F594:	dc.b 9
0000FFC3 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FFC8 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FFCD 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FFD2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FFD7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFDC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FFE1 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FFE6 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FFEB 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FFF0 09                         byte_F5C2:	dc.b 9
0000FFF1 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FFF6 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FFFB 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010000 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010005 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001000A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001000F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010014 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010019 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001001E 08                         byte_F5F0:	dc.b 8
0001001F E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010024 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010029 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001002E 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010033 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010038 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001003D E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010042 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010048 00                         		even
00010048 00                         		even
00010048                            
00010048                            ; ===========================================================================
00010048                            ; ---------------------------------------------------------------------------
00010048                            ; Object 40 - Moto Bug enemy (GHZ)
00010048                            ; ---------------------------------------------------------------------------
00010048                            
00010048                            Obj40:					; XREF: Obj_Index
00010048 7000                       		moveq	#0,d0
0001004A 1028 0024                  		move.b	$24(a0),d0
0001004E 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010052 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010056                            ; ===========================================================================
00010056 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010058 0000                       		dc.w Obj40_Action-Obj40_Index
0001005A 0000                       		dc.w Obj40_Animate-Obj40_Index
0001005C 0000                       		dc.w Obj40_Delete-Obj40_Index
0001005E                            ; ===========================================================================
0001005E                            
0001005E                            Obj40_Main:				; XREF: Obj40_Index
0001005E 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010066 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001006C 117C 0004 0001             		move.b	#4,1(a0)
00010072 117C 0004 0018             		move.b	#4,$18(a0)
00010078 117C 0014 0019             		move.b	#$14,$19(a0)
0001007E 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00010082 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00010084 117C 000E 0016             		move.b	#$E,$16(a0)
0001008A 117C 0008 0017             		move.b	#8,$17(a0)
00010090 117C 000C 0020             		move.b	#$C,$20(a0)
00010096 6100 DF02                  		bsr.w	ObjectFall
0001009A 4EB9 0000 0000             		jsr	ObjHitFloor
000100A0 4A41                       		tst.w	d1
000100A2 6A00                       		bpl.s	locret_F68A
000100A4 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000100A8 317C 0000 0012             		move.w	#0,$12(a0)
000100AE 5428 0024                  		addq.b	#2,$24(a0)
000100B2 0868 0000 0022             		bchg	#0,$22(a0)
000100B8                            
000100B8                            locret_F68A:
000100B8 4E75                       		rts	
000100BA                            ; ===========================================================================
000100BA                            
000100BA                            Obj40_SetSmoke:				; XREF: Obj40_Main
000100BA 5828 0024                  		addq.b	#4,$24(a0)
000100BE 6000 0000                  		bra.w	Obj40_Animate
000100C2                            ; ===========================================================================
000100C2                            
000100C2                            Obj40_Action:				; XREF: Obj40_Index
000100C2 7000                       		moveq	#0,d0
000100C4 1028 0025                  		move.b	$25(a0),d0
000100C8 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
000100CC 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
000100D0 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000100D6 6100 AFB8                  		bsr.w	AnimateSprite
000100DA                            
000100DA                            ; ---------------------------------------------------------------------------
000100DA                            ; Routine to mark an enemy/monitor/ring	as destroyed
000100DA                            ; ---------------------------------------------------------------------------
000100DA                            
000100DA                            MarkObjGone:
000100DA 3028 0008                  		move.w	8(a0),d0
000100DE 0240 FF80                  		andi.w	#$FF80,d0
000100E2 3238 F700                  		move.w	($FFFFF700).w,d1
000100E6 0441 0080                  		subi.w	#$80,d1
000100EA 0241 FF80                  		andi.w	#$FF80,d1
000100EE 9041                       		sub.w	d1,d0
000100F0 0C40 0280                  		cmpi.w	#$280,d0
000100F4 6200 0000                  		bhi.w	Mark_ChkGone
000100F8 6000 DF38                  		bra.w	DisplaySprite
000100FC                            ; ===========================================================================
000100FC                            
000100FC                            Mark_ChkGone:
000100FC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010100 7000                       		moveq	#0,d0
00010102 1028 0023                  		move.b	$23(a0),d0
00010106 6700                       		beq.s	Mark_Delete
00010108 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001010E                            
0001010E                            Mark_Delete:
0001010E 6000 DF5E                  		bra.w	DeleteObject
00010112                            
00010112                            ; ===========================================================================
00010112 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00010114 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00010116                            ; ===========================================================================
00010116                            
00010116                            Obj40_Move:				; XREF: Obj40_Index2
00010116 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001011A 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0001011C 5428 0025                  		addq.b	#2,$25(a0)
00010120 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00010126 117C 0001 001C             		move.b	#1,$1C(a0)
0001012C 0868 0000 0022             		bchg	#0,$22(a0)
00010132 6600                       		bne.s	locret_F70A
00010134 4468 0010                  		neg.w	$10(a0)		; change direction
00010138                            
00010138                            locret_F70A:
00010138 4E75                       		rts	
0001013A                            ; ===========================================================================
0001013A                            
0001013A                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0001013A 6100 DED0                  		bsr.w	SpeedToPos
0001013E 4EB9 0000 0000             		jsr	ObjHitFloor
00010144 0C41 FFF8                  		cmpi.w	#-8,d1
00010148 6D00                       		blt.s	Obj40_Pause
0001014A 0C41 000C                  		cmpi.w	#$C,d1
0001014E 6C00                       		bge.s	Obj40_Pause
00010150 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010154 5328 0033                  		subq.b	#1,$33(a0)
00010158 6A00                       		bpl.s	locret_F756
0001015A 117C 000F 0033             		move.b	#$F,$33(a0)
00010160 6100 E356                  		bsr.w	SingleObjLoad
00010164 6600                       		bne.s	locret_F756
00010166 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0001016A 3368 0008 0008             		move.w	8(a0),8(a1)
00010170 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010176 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001017C 137C 0002 001C             		move.b	#2,$1C(a1)
00010182                            
00010182                            locret_F756:
00010182 4E75                       		rts	
00010184                            ; ===========================================================================
00010184                            
00010184                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00010184 5528 0025                  		subq.b	#2,$25(a0)
00010188 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001018E 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00010194 117C 0000 001C             		move.b	#0,$1C(a0)
0001019A 4E75                       		rts	
0001019C                            ; ===========================================================================
0001019C                            
0001019C                            Obj40_Animate:				; XREF: Obj40_Index
0001019C 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000101A2 6100 AEEC                  		bsr.w	AnimateSprite
000101A6 6000 DE8A                  		bra.w	DisplaySprite
000101AA                            ; ===========================================================================
000101AA                            
000101AA                            Obj40_Delete:				; XREF: Obj40_Index
000101AA 6000 DEC2                  		bra.w	DeleteObject
000101AE                            ; ===========================================================================
000101AE                            Ani_obj40:
000101AE                            	include "_anim\obj40.asm"
000101AE                            ; ---------------------------------------------------------------------------
000101AE                            ; Animation script - Motobug enemy
000101AE                            ; ---------------------------------------------------------------------------
000101AE 0000                       		dc.w byte_F788-Ani_obj40
000101B0 0000                       		dc.w byte_F78C-Ani_obj40
000101B2 0000                       		dc.w byte_F792-Ani_obj40
000101B4 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
000101B8 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
000101BE 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
000101CC                            		even
000101CC                            		even
000101CC                            
000101CC                            ; ---------------------------------------------------------------------------
000101CC                            ; Sprite mappings - Moto Bug enemy (GHZ)
000101CC                            ; ---------------------------------------------------------------------------
000101CC                            Map_obj40:
000101CC                            	include "_maps\obj40.asm"
000101CC                            Map_cedc:
000101CC 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
000101CE 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
000101D0 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
000101D2 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
000101D4 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
000101D6 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
000101D8 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
000101DA 04                         Map_cedc_E: 	dc.b $4
000101DB F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
000101E0 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
000101E5 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000101EA 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
000101EF 04                         Map_cedc_23: 	dc.b $4
000101F0 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
000101F5 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
000101FA F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
000101FF 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
00010204 05                         Map_cedc_38: 	dc.b $5
00010205 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0001020A 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0001020F F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00010214 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
00010219 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0001021E 01                         Map_cedc_52: 	dc.b $1
0001021F FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
00010224 01                         Map_cedc_58: 	dc.b $1
00010225 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0001022A 01                         Map_cedc_5E: 	dc.b $1
0001022B FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
00010230 00                         Map_cedc_64: 	dc.b $0
00010232 00                         	even
00010232 00                         	even
00010232                            
00010232                            ; ===========================================================================
00010232                            ; ---------------------------------------------------------------------------
00010232                            ; Object 4F - blank
00010232                            ; ---------------------------------------------------------------------------
00010232                            
00010232                            Obj4F:					; XREF: Obj_Index
00010232 4E75                       		rts	
00010234                            
00010234                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010234                            
00010234                            
00010234                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00010234 3038 FE04                  		move.w	($FFFFFE04).w,d0
00010238 D047                       		add.w	d7,d0
0001023A 0240 0003                  		andi.w	#3,d0
0001023E 6600                       		bne.s	loc_F836
00010240 7600                       		moveq	#0,d3
00010242 1628 0019                  		move.b	$19(a0),d3
00010246 4A68 0010                  		tst.w	$10(a0)
0001024A 6B00                       		bmi.s	loc_F82C
0001024C 6100 0000                  		bsr.w	ObjHitWallRight
00010250 4A41                       		tst.w	d1
00010252 6A00                       		bpl.s	loc_F836
00010254                            
00010254                            loc_F828:
00010254 7001                       		moveq	#1,d0
00010256 4E75                       		rts	
00010258                            ; ===========================================================================
00010258                            
00010258                            loc_F82C:
00010258 4643                       		not.w	d3
0001025A 6100 0000                  		bsr.w	ObjHitWallLeft
0001025E 4A41                       		tst.w	d1
00010260 6BF2                       		bmi.s	loc_F828
00010262                            
00010262                            loc_F836:
00010262 7000                       		moveq	#0,d0
00010264 4E75                       		rts	
00010266                            ; End of function Obj50_ChkWall
00010266                            
00010266                            ; ===========================================================================
00010266                            ; ---------------------------------------------------------------------------
00010266                            ; Object 50 - Yadrin enemy (SYZ)
00010266                            ; ---------------------------------------------------------------------------
00010266                            
00010266                            Obj50:					; XREF: Obj_Index
00010266 7000                       		moveq	#0,d0
00010268 1028 0024                  		move.b	$24(a0),d0
0001026C 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00010270 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010274                            ; ===========================================================================
00010274 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00010276 0000                       		dc.w Obj50_Action-Obj50_Index
00010278                            ; ===========================================================================
00010278                            
00010278                            Obj50_Main:				; XREF: Obj50_Index
00010278 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00010280 317C 247B 0002             		move.w	#$247B,2(a0)
00010286 117C 0004 0001             		move.b	#4,1(a0)
0001028C 117C 0004 0018             		move.b	#4,$18(a0)
00010292 117C 0014 0019             		move.b	#$14,$19(a0)
00010298 117C 0011 0016             		move.b	#$11,$16(a0)
0001029E 117C 0008 0017             		move.b	#8,$17(a0)
000102A4 117C 00CC 0020             		move.b	#$CC,$20(a0)
000102AA 6100 DCEE                  		bsr.w	ObjectFall
000102AE 6100 0000                  		bsr.w	ObjHitFloor
000102B2 4A41                       		tst.w	d1
000102B4 6A00                       		bpl.s	locret_F89E
000102B6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000102BA 317C 0000 0012             		move.w	#0,$12(a0)
000102C0 5428 0024                  		addq.b	#2,$24(a0)
000102C4 0868 0000 0022             		bchg	#0,$22(a0)
000102CA                            
000102CA                            locret_F89E:
000102CA 4E75                       		rts	
000102CC                            ; ===========================================================================
000102CC                            
000102CC                            Obj50_Action:				; XREF: Obj50_Index
000102CC 7000                       		moveq	#0,d0
000102CE 1028 0025                  		move.b	$25(a0),d0
000102D2 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000102D6 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000102DA 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000102E0 6100 ADAE                  		bsr.w	AnimateSprite
000102E4 6000 FDF4                  		bra.w	MarkObjGone
000102E8                            ; ===========================================================================
000102E8 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000102EA 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000102EC                            ; ===========================================================================
000102EC                            
000102EC                            Obj50_Move:				; XREF: Obj50_Index2
000102EC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000102F0 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000102F2 5428 0025                  		addq.b	#2,$25(a0)
000102F6 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000102FC 117C 0001 001C             		move.b	#1,$1C(a0)
00010302 0868 0000 0022             		bchg	#0,$22(a0)
00010308 6600                       		bne.s	locret_F8E2
0001030A 4468 0010                  		neg.w	$10(a0)		; change direction
0001030E                            
0001030E                            locret_F8E2:
0001030E 4E75                       		rts	
00010310                            ; ===========================================================================
00010310                            
00010310                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010310 6100 DCFA                  		bsr.w	SpeedToPos
00010314 6100 0000                  		bsr.w	ObjHitFloor
00010318 0C41 FFF8                  		cmpi.w	#-8,d1
0001031C 6D00                       		blt.s	Obj50_Pause
0001031E 0C41 000C                  		cmpi.w	#$C,d1
00010322 6C00                       		bge.s	Obj50_Pause
00010324 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00010328 6100 FF0A                  		bsr.w	Obj50_ChkWall
0001032C 6600                       		bne.s	Obj50_Pause
0001032E 4E75                       		rts	
00010330                            ; ===========================================================================
00010330                            
00010330                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010330 5528 0025                  		subq.b	#2,$25(a0)
00010334 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001033A 317C 0000 0010             		move.w	#0,$10(a0)
00010340 117C 0000 001C             		move.b	#0,$1C(a0)
00010346 4E75                       		rts	
00010348                            ; ===========================================================================
00010348                            Ani_obj50:
00010348                            	include "_anim\obj50.asm"
00010348                            ; ---------------------------------------------------------------------------
00010348                            ; Animation script - Yadrin enemy
00010348                            ; ---------------------------------------------------------------------------
00010348 0000                       		dc.w byte_F920-Ani_obj50
0001034A 0000                       		dc.w byte_F924-Ani_obj50
0001034C 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010350 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0001035A                            		even
0001035A                            		even
0001035A                            
0001035A                            ; ---------------------------------------------------------------------------
0001035A                            ; Sprite mappings - Yadrin enemy (SYZ)
0001035A                            ; ---------------------------------------------------------------------------
0001035A                            Map_obj50:
0001035A                            	include "_maps\obj50.asm"
0001035A                            Map_ff24:
0001035A 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
0001035C 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
0001035E 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
00010360 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
00010362 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
00010364 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
00010366 05                         Map_ff24_C: 	dc.b $5
00010367 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0001036C FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010371 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010376 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001037B 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010380 05                         Map_ff24_26: 	dc.b $5
00010381 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010386 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
0001038B EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010390 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010395 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0001039A 05                         Map_ff24_40: 	dc.b $5
0001039B F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000103A0 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000103A5 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103AA F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103AF 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000103B4 05                         Map_ff24_5A: 	dc.b $5
000103B5 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000103BA FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000103BF EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103C4 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103C9 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000103CE 05                         Map_ff24_74: 	dc.b $5
000103CF F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000103D4 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000103D9 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103DE F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103E3 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000103E8 05                         Map_ff24_8E: 	dc.b $5
000103E9 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000103EE 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000103F3 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103F8 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103FD 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010402                            	even
00010402                            	even
00010402                            
00010402                            ; ---------------------------------------------------------------------------
00010402                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010402                            ;
00010402                            ; variables:
00010402                            ; d1 = width
00010402                            ; d2 = height /	2 (when	jumping)
00010402                            ; d3 = height /	2 (when	walking)
00010402                            ; d4 = x-axis position
00010402                            ; ---------------------------------------------------------------------------
00010402                            
00010402                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010402                            
00010402                            
00010402                            SolidObject:
00010402 4A28 0025                  		tst.b	$25(a0)
00010406 6700 0000                  		beq.w	loc_FAC8
0001040A 3401                       		move.w	d1,d2
0001040C D442                       		add.w	d2,d2
0001040E 43F8 D000                  		lea	($FFFFD000).w,a1
00010412 0829 0001 0022             		btst	#1,$22(a1)
00010418 6600                       		bne.s	loc_F9FE
0001041A 3029 0008                  		move.w	8(a1),d0
0001041E 9068 0008                  		sub.w	8(a0),d0
00010422 D041                       		add.w	d1,d0
00010424 6B00                       		bmi.s	loc_F9FE
00010426 B042                       		cmp.w	d2,d0
00010428 6500                       		bcs.s	loc_FA12
0001042A                            
0001042A                            loc_F9FE:
0001042A 08A9 0003 0022             		bclr	#3,$22(a1)
00010430 08A8 0003 0022             		bclr	#3,$22(a0)
00010436 4228 0025                  		clr.b	$25(a0)
0001043A 7800                       		moveq	#0,d4
0001043C 4E75                       		rts	
0001043E                            ; ===========================================================================
0001043E                            
0001043E                            loc_FA12:
0001043E 3404                       		move.w	d4,d2
00010440                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
00010440 7800                       		moveq	#0,d4
00010442 4E75                       		rts	
00010444                            ; ===========================================================================
00010444                            
00010444                            SolidObject71:				; XREF: Obj71_Solid
00010444 4A28 0025                  		tst.b	$25(a0)
00010448 6700 0000                  		beq.w	loc_FAD0
0001044C 3401                       		move.w	d1,d2
0001044E D442                       		add.w	d2,d2
00010450 43F8 D000                  		lea	($FFFFD000).w,a1
00010454 0829 0001 0022             		btst	#1,$22(a1)
0001045A 6600                       		bne.s	loc_FA44
0001045C 3029 0008                  		move.w	8(a1),d0
00010460 9068 0008                  		sub.w	8(a0),d0
00010464 D041                       		add.w	d1,d0
00010466 6B00                       		bmi.s	loc_FA44
00010468 B042                       		cmp.w	d2,d0
0001046A 6500                       		bcs.s	loc_FA58
0001046C                            
0001046C                            loc_FA44:
0001046C 08A9 0003 0022             		bclr	#3,$22(a1)
00010472 08A8 0003 0022             		bclr	#3,$22(a0)
00010478 4228 0025                  		clr.b	$25(a0)
0001047C 7800                       		moveq	#0,d4
0001047E 4E75                       		rts	
00010480                            ; ===========================================================================
00010480                            
00010480                            loc_FA58:
00010480 3404                       		move.w	d4,d2
00010482                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
00010482 7800                       		moveq	#0,d4
00010484 4E75                       		rts	
00010486                            ; ===========================================================================
00010486                            
00010486                            SolidObject2F:				; XREF: Obj2F_Solid
00010486 43F8 D000                  		lea	($FFFFD000).w,a1
0001048A 4A28 0001                  		tst.b	1(a0)
0001048E 6A00 0000                  		bpl.w	loc_FB92
00010492 3029 0008                  		move.w	8(a1),d0
00010496 9068 0008                  		sub.w	8(a0),d0
0001049A D041                       		add.w	d1,d0
0001049C 6B00 0000                  		bmi.w	loc_FB92
000104A0 3601                       		move.w	d1,d3
000104A2 D643                       		add.w	d3,d3
000104A4 B043                       		cmp.w	d3,d0
000104A6 6200 0000                  		bhi.w	loc_FB92
000104AA 3A00                       		move.w	d0,d5
000104AC 0828 0000 0001             		btst	#0,1(a0)
000104B2 6700                       		beq.s	loc_FA94
000104B4 4645                       		not.w	d5
000104B6 DA43                       		add.w	d3,d5
000104B8                            
000104B8                            loc_FA94:
000104B8 E24D                       		lsr.w	#1,d5
000104BA 7600                       		moveq	#0,d3
000104BC 1632 5000                  		move.b	(a2,d5.w),d3
000104C0 9612                       		sub.b	(a2),d3
000104C2 3A28 000C                  		move.w	$C(a0),d5
000104C6 9A43                       		sub.w	d3,d5
000104C8 1629 0016                  		move.b	$16(a1),d3
000104CC 4883                       		ext.w	d3
000104CE D443                       		add.w	d3,d2
000104D0 3629 000C                  		move.w	$C(a1),d3
000104D4 9645                       		sub.w	d5,d3
000104D6 5843                       		addq.w	#4,d3
000104D8 D642                       		add.w	d2,d3
000104DA 6B00 0000                  		bmi.w	loc_FB92
000104DE 3802                       		move.w	d2,d4
000104E0 D844                       		add.w	d4,d4
000104E2 B644                       		cmp.w	d4,d3
000104E4 6400 0000                  		bcc.w	loc_FB92
000104E8 6000 0000                  		bra.w	loc_FB0E
000104EC                            ; ===========================================================================
000104EC                            
000104EC                            loc_FAC8:
000104EC 4A28 0001                  		tst.b	1(a0)
000104F0 6A00 0000                  		bpl.w	loc_FB92
000104F4                            
000104F4                            loc_FAD0:
000104F4 43F8 D000                  		lea	($FFFFD000).w,a1
000104F8 3029 0008                  		move.w	8(a1),d0
000104FC 9068 0008                  		sub.w	8(a0),d0
00010500 D041                       		add.w	d1,d0
00010502 6B00 0000                  		bmi.w	loc_FB92
00010506 3601                       		move.w	d1,d3
00010508 D643                       		add.w	d3,d3
0001050A B043                       		cmp.w	d3,d0
0001050C 6200 0000                  		bhi.w	loc_FB92
00010510 1629 0016                  		move.b	$16(a1),d3
00010514 4883                       		ext.w	d3
00010516 D443                       		add.w	d3,d2
00010518 3629 000C                  		move.w	$C(a1),d3
0001051C 9668 000C                  		sub.w	$C(a0),d3
00010520 5843                       		addq.w	#4,d3
00010522 D642                       		add.w	d2,d3
00010524 6B00 0000                  		bmi.w	loc_FB92
00010528 3802                       		move.w	d2,d4
0001052A D844                       		add.w	d4,d4
0001052C B644                       		cmp.w	d4,d3
0001052E 6400 0000                  		bcc.w	loc_FB92
00010532                            
00010532                            loc_FB0E:
00010532 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010536 6B00 0000                  		bmi.w	loc_FB92
0001053A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010540 6400 0000                  		bcc.w	loc_FB92
00010544 4A78 FE08                  		tst.w	($FFFFFE08).w
00010548 6600 0000                  		bne.w	loc_FBAC
0001054C 3A00                       		move.w	d0,d5
0001054E B240                       		cmp.w	d0,d1
00010550 6400                       		bcc.s	loc_FB36
00010552 D241                       		add.w	d1,d1
00010554 9041                       		sub.w	d1,d0
00010556 3A00                       		move.w	d0,d5
00010558 4445                       		neg.w	d5
0001055A                            
0001055A                            loc_FB36:
0001055A 3203                       		move.w	d3,d1
0001055C B443                       		cmp.w	d3,d2
0001055E 6400                       		bcc.s	loc_FB44
00010560 5943                       		subq.w	#4,d3
00010562 9644                       		sub.w	d4,d3
00010564 3203                       		move.w	d3,d1
00010566 4441                       		neg.w	d1
00010568                            
00010568                            loc_FB44:
00010568 BA41                       		cmp.w	d1,d5
0001056A 6200 0000                  		bhi.w	loc_FBB0
0001056E 0C41 0004                  		cmpi.w	#4,d1
00010572 6300                       		bls.s	loc_FB8C
00010574 4A40                       		tst.w	d0
00010576 6700                       		beq.s	loc_FB70
00010578 6B00                       		bmi.s	loc_FB5E
0001057A 4A69 0010                  		tst.w	$10(a1)
0001057E 6B00                       		bmi.s	loc_FB70
00010580 6000                       		bra.s	loc_FB64
00010582                            ; ===========================================================================
00010582                            
00010582                            loc_FB5E:
00010582 4A69 0010                  		tst.w	$10(a1)
00010586 6A00                       		bpl.s	loc_FB70
00010588                            
00010588                            loc_FB64:
00010588 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0001058E 337C 0000 0010             		move.w	#0,$10(a1)
00010594                            
00010594                            loc_FB70:
00010594 9169 0008                  		sub.w	d0,8(a1)
00010598 0829 0001 0022             		btst	#1,$22(a1)
0001059E 6600                       		bne.s	loc_FB8C
000105A0 08E9 0005 0022             		bset	#5,$22(a1)
000105A6 08E8 0005 0022             		bset	#5,$22(a0)
000105AC 7801                       		moveq	#1,d4
000105AE 4E75                       		rts	
000105B0                            ; ===========================================================================
000105B0                            
000105B0                            loc_FB8C:
000105B0 6100                       		bsr.s	loc_FBA0
000105B2 7801                       		moveq	#1,d4
000105B4 4E75                       		rts	
000105B6                            ; ===========================================================================
000105B6                            
000105B6                            loc_FB92:
000105B6 0828 0005 0022             		btst	#5,$22(a0)
000105BC 6700                       		beq.s	loc_FBAC
000105BE 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000105C4                            
000105C4                            loc_FBA0:
000105C4 08A8 0005 0022             		bclr	#5,$22(a0)
000105CA 08A9 0005 0022             		bclr	#5,$22(a1)
000105D0                            
000105D0                            loc_FBAC:
000105D0 7800                       		moveq	#0,d4
000105D2 4E75                       		rts	
000105D4                            ; ===========================================================================
000105D4                            
000105D4                            loc_FBB0:
000105D4 4A43                       		tst.w	d3
000105D6 6B00                       		bmi.s	loc_FBBC
000105D8 0C43 0010                  		cmpi.w	#$10,d3
000105DC 6500                       		bcs.s	loc_FBEE
000105DE 60D6                       		bra.s	loc_FB92
000105E0                            ; ===========================================================================
000105E0                            
000105E0                            loc_FBBC:
000105E0 4A69 0012                  		tst.w	$12(a1)
000105E4 6700                       		beq.s	loc_FBD6
000105E6 6A00                       		bpl.s	loc_FBD2
000105E8 4A43                       		tst.w	d3
000105EA 6A00                       		bpl.s	loc_FBD2
000105EC 9769 000C                  		sub.w	d3,$C(a1)
000105F0 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000105F6                            
000105F6                            loc_FBD2:
000105F6 78FF                       		moveq	#-1,d4
000105F8 4E75                       		rts	
000105FA                            ; ===========================================================================
000105FA                            
000105FA                            loc_FBD6:
000105FA 0829 0001 0022             		btst	#1,$22(a1)
00010600 66F4                       		bne.s	loc_FBD2
00010602 2F08                       		move.l	a0,-(sp)
00010604 2049                       		movea.l	a1,a0
00010606 4EB9 0000 0000             		jsr	KillSonic
0001060C 205F                       		movea.l	(sp)+,a0
0001060E 78FF                       		moveq	#-1,d4
00010610 4E75                       		rts	
00010612                            ; ===========================================================================
00010612                            
00010612                            loc_FBEE:
00010612 5943                       		subq.w	#4,d3
00010614 7200                       		moveq	#0,d1
00010616 1228 0019                  		move.b	$19(a0),d1
0001061A 3401                       		move.w	d1,d2
0001061C D442                       		add.w	d2,d2
0001061E D269 0008                  		add.w	8(a1),d1
00010622 9268 0008                  		sub.w	8(a0),d1
00010626 6B00                       		bmi.s	loc_FC28
00010628 B242                       		cmp.w	d2,d1
0001062A 6400                       		bcc.s	loc_FC28
0001062C 4A69 0012                  		tst.w	$12(a1)
00010630 6B00                       		bmi.s	loc_FC28
00010632 9769 000C                  		sub.w	d3,$C(a1)
00010636 5369 000C                  		subq.w	#1,$C(a1)
0001063A 6100                       		bsr.s	sub_FC2C
0001063C 117C 0002 0025             		move.b	#2,$25(a0)
00010642 08E8 0003 0022             		bset	#3,$22(a0)
00010648 78FF                       		moveq	#-1,d4
0001064A 4E75                       		rts	
0001064C                            ; ===========================================================================
0001064C                            
0001064C                            loc_FC28:
0001064C 7800                       		moveq	#0,d4
0001064E 4E75                       		rts	
00010650                            ; End of function SolidObject
00010650                            
00010650                            
00010650                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010650                            
00010650                            
00010650                            sub_FC2C:				; XREF: SolidObject
00010650 0829 0003 0022             		btst	#3,$22(a1)
00010656 6700                       		beq.s	loc_FC4E
00010658 7000                       		moveq	#0,d0
0001065A 1029 003D                  		move.b	$3D(a1),d0
0001065E ED48                       		lsl.w	#6,d0
00010660 0680 00FF D000             		addi.l	#$FFD000,d0
00010666 2440                       		movea.l	d0,a2
00010668 08AA 0003 0022             		bclr	#3,$22(a2)
0001066E 422A 0025                  		clr.b	$25(a2)
00010672                            
00010672                            loc_FC4E:
00010672 3008                       		move.w	a0,d0
00010674 0440 D000                  		subi.w	#-$3000,d0
00010678 EC48                       		lsr.w	#6,d0
0001067A 0240 007F                  		andi.w	#$7F,d0
0001067E 1340 003D                  		move.b	d0,$3D(a1)
00010682 137C 0000 0026             		move.b	#0,$26(a1)
00010688 337C 0000 0012             		move.w	#0,$12(a1)
0001068E 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010694 0829 0001 0022             		btst	#1,$22(a1)
0001069A 6700                       		beq.s	loc_FC84
0001069C 2F08                       		move.l	a0,-(sp)
0001069E 2049                       		movea.l	a1,a0
000106A0 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000106A6 205F                       		movea.l	(sp)+,a0
000106A8                            
000106A8                            loc_FC84:
000106A8 08E9 0003 0022             		bset	#3,$22(a1)
000106AE 08E8 0003 0022             		bset	#3,$22(a0)
000106B4 4E75                       		rts	
000106B6                            ; End of function sub_FC2C
000106B6                            
000106B6                            ; ===========================================================================
000106B6                            ; ---------------------------------------------------------------------------
000106B6                            ; Object 51 - smashable	green block (MZ)
000106B6                            ; ---------------------------------------------------------------------------
000106B6                            
000106B6                            Obj51:					; XREF: Obj_Index
000106B6 7000                       		moveq	#0,d0
000106B8 1028 0024                  		move.b	$24(a0),d0
000106BC 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000106C0 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000106C4 6000 FA14                  		bra.w	MarkObjGone
000106C8                            ; ===========================================================================
000106C8 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000106CA 0000                       		dc.w Obj51_Solid-Obj51_Index
000106CC 0000                       		dc.w Obj51_Display-Obj51_Index
000106CE                            ; ===========================================================================
000106CE                            
000106CE                            Obj51_Main:				; XREF: Obj51_Index
000106CE 5428 0024                  		addq.b	#2,$24(a0)
000106D2 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000106DA 317C 42B8 0002             		move.w	#$42B8,2(a0)
000106E0 117C 0004 0001             		move.b	#4,1(a0)
000106E6 117C 0010 0019             		move.b	#$10,$19(a0)
000106EC 117C 0004 0018             		move.b	#4,$18(a0)
000106F2 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000106F8                            
000106F8                            Obj51_Solid:				; XREF: Obj51_Index
000106F8 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000106FE 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010704 323C 001B                  		move.w	#$1B,d1
00010708 343C 0010                  		move.w	#$10,d2
0001070C 363C 0011                  		move.w	#$11,d3
00010710 3828 0008                  		move.w	8(a0),d4
00010714 6100 FCEC                  		bsr.w	SolidObject
00010718 0828 0003 0022             		btst	#3,$22(a0)
0001071E 6600                       		bne.s	Obj51_Smash
00010720                            
00010720                            locret_FCFC:
00010720 4E75                       		rts	
00010722                            ; ===========================================================================
00010722                            
00010722                            Obj51_Smash:				; XREF: Obj51_Solid
00010722 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010728 66F6                       		bne.s	locret_FCFC	; if not, branch
0001072A 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010730 08E9 0002 0022             		bset	#2,$22(a1)
00010736 137C 000E 0016             		move.b	#$E,$16(a1)
0001073C 137C 0007 0017             		move.b	#7,$17(a1)
00010742 137C 0002 001C             		move.b	#2,$1C(a1)
00010748 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0001074E 08E9 0001 0022             		bset	#1,$22(a1)
00010754 08A9 0003 0022             		bclr	#3,$22(a1)
0001075A 137C 0002 0024             		move.b	#2,$24(a1)
00010760 08A8 0003 0022             		bclr	#3,$22(a0)
00010766 4228 0025                  		clr.b	$25(a0)
0001076A 117C 0001 001A             		move.b	#1,$1A(a0)
00010770 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010776 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010778 343C 0038                  		move.w	#$38,d2
0001077C 6100 D45C                  		bsr.w	SmashObject
00010780 6100 DD36                  		bsr.w	SingleObjLoad
00010784 6600                       		bne.s	Obj51_Display
00010786 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0001078A 3368 0008 0008             		move.w	8(a0),8(a1)
00010790 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010796 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
0001079A 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0001079E 0C42 0006                  		cmpi.w	#6,d2
000107A2 6500                       		bcs.s	Obj51_Bonus
000107A4 7406                       		moveq	#6,d2
000107A6                            
000107A6                            Obj51_Bonus:
000107A6 7000                       		moveq	#0,d0
000107A8 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000107AC 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000107B2 6500                       		bcs.s	loc_FD98	; if not, branch
000107B4 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000107B8 740A                       		moveq	#10,d2
000107BA                            
000107BA                            loc_FD98:
000107BA 4EB9 0000 0000             		jsr	AddPoints
000107C0 E24A                       		lsr.w	#1,d2
000107C2 1342 001A                  		move.b	d2,$1A(a1)
000107C6                            
000107C6                            Obj51_Display:				; XREF: Obj51_Index
000107C6 6100 D844                  		bsr.w	SpeedToPos
000107CA 0668 0038 0012             		addi.w	#$38,$12(a0)
000107D0 6100 D860                  		bsr.w	DisplaySprite
000107D4 4A28 0001                  		tst.b	1(a0)
000107D8 6A00 D894                  		bpl.w	DeleteObject
000107DC 4E75                       		rts	
000107DE                            ; ===========================================================================
000107DE FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000107E2 FF00 FF00                  		dc.w $FF00, $FF00
000107E6 0200 FE00                  		dc.w $200, $FE00
000107EA 0100 FF00                  		dc.w $100, $FF00
000107EE                            
000107EE 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000107F6                            ; ---------------------------------------------------------------------------
000107F6                            ; Sprite mappings - smashable green block (MZ)
000107F6                            ; ---------------------------------------------------------------------------
000107F6                            Map_obj51:
000107F6                            	include "_maps\obj51.asm"
000107F6                            ; ---------------------------------------------------------------------------
000107F6                            ; Sprite mappings - smashable green block (MZ)
000107F6                            ; ---------------------------------------------------------------------------
000107F6 0000                       		dc.w byte_FDD8-Map_obj51
000107F8 0000                       		dc.w byte_FDE3-Map_obj51
000107FA 02                         byte_FDD8:	dc.b 2
000107FB F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010800 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010805 04                         byte_FDE3:	dc.b 4
00010806 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0001080B 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010810 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010815 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0001081A                            		even
0001081A                            		even
0001081A                            
0001081A                            ; ===========================================================================
0001081A                            ; ---------------------------------------------------------------------------
0001081A                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0001081A                            ; ---------------------------------------------------------------------------
0001081A                            
0001081A                            Obj52:					; XREF: Obj_Index
0001081A 7000                       		moveq	#0,d0
0001081C 1028 0024                  		move.b	$24(a0),d0
00010820 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010824 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010828                            ; ===========================================================================
00010828 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0001082A 0000                       		dc.w Obj52_Platform-Obj52_Index
0001082C 0000                       		dc.w Obj52_StandOn-Obj52_Index
0001082E                            
0001082E 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010830 2001                       		dc.b $20, 1
00010832 2002                       		dc.b $20, 2
00010834 4003                       		dc.b $40, 3
00010836 3004                       		dc.b $30, 4
00010838                            ; ===========================================================================
00010838                            
00010838                            Obj52_Main:				; XREF: Obj52_Index
00010838 5428 0024                  		addq.b	#2,$24(a0)
0001083C 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010844 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001084A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010850 6600                       		bne.s	loc_FE44
00010852 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0001085A 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010860 117C 0007 0016             		move.b	#7,$16(a0)
00010866                            
00010866                            loc_FE44:
00010866 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001086C 6600                       		bne.s	loc_FE60
0001086E 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010874 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
0001087A 6700                       		beq.s	loc_FE60	; if yes, branch
0001087C 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010882                            
00010882                            loc_FE60:
00010882 117C 0004 0001             		move.b	#4,1(a0)
00010888 7000                       		moveq	#0,d0
0001088A 1028 0028                  		move.b	$28(a0),d0
0001088E E648                       		lsr.w	#3,d0
00010890 0240 001E                  		andi.w	#$1E,d0
00010894 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00010898 115A 0019                  		move.b	(a2)+,$19(a0)
0001089C 115A 001A                  		move.b	(a2)+,$1A(a0)
000108A0 117C 0004 0018             		move.b	#4,$18(a0)
000108A6 3168 0008 0030             		move.w	8(a0),$30(a0)
000108AC 3168 000C 0032             		move.w	$C(a0),$32(a0)
000108B2 0228 000F 0028             		andi.b	#$F,$28(a0)
000108B8                            
000108B8                            Obj52_Platform:				; XREF: Obj52_Index
000108B8 6100 0000                  		bsr.w	Obj52_Move
000108BC 7200                       		moveq	#0,d1
000108BE 1228 0019                  		move.b	$19(a0),d1
000108C2 4EB9 0000 7C4C             		jsr	(PlatformObject).l
000108C8 6000                       		bra.s	Obj52_ChkDel
000108CA                            ; ===========================================================================
000108CA                            
000108CA                            Obj52_StandOn:				; XREF: Obj52_Index
000108CA 7200                       		moveq	#0,d1
000108CC 1228 0019                  		move.b	$19(a0),d1
000108D0 4EB9 0000 7DC0             		jsr	(ExitPlatform).l
000108D6 3F28 0008                  		move.w	8(a0),-(sp)
000108DA 6100 0000                  		bsr.w	Obj52_Move
000108DE 341F                       		move.w	(sp)+,d2
000108E0 4EB9 0000 832A             		jsr	(MvSonicOnPtfm2).l
000108E6                            
000108E6                            Obj52_ChkDel:				; XREF: Obj52_Platform
000108E6 3028 0030                  		move.w	$30(a0),d0
000108EA 0240 FF80                  		andi.w	#$FF80,d0
000108EE 3238 F700                  		move.w	($FFFFF700).w,d1
000108F2 0441 0080                  		subi.w	#$80,d1
000108F6 0241 FF80                  		andi.w	#$FF80,d1
000108FA 9041                       		sub.w	d1,d0
000108FC 0C40 0280                  		cmpi.w	#$280,d0
00010900 6200 D76C                  		bhi.w	DeleteObject
00010904 6000 D72C                  		bra.w	DisplaySprite
00010908                            ; ===========================================================================
00010908                            
00010908                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010908 7000                       		moveq	#0,d0
0001090A 1028 0028                  		move.b	$28(a0),d0
0001090E 0240 000F                  		andi.w	#$F,d0
00010912 D040                       		add.w	d0,d0
00010914 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010918 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0001091C                            ; ===========================================================================
0001091C 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010920 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010924 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010928 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0001092C 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010930 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010932                            ; ===========================================================================
00010932                            
00010932                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010932 4E75                       		rts	
00010934                            ; ===========================================================================
00010934                            
00010934                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010934 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010938 323C 0060                  		move.w	#$60,d1
0001093C 0828 0000 0022             		btst	#0,$22(a0)
00010942 6700                       		beq.s	loc_FF26
00010944 4440                       		neg.w	d0
00010946 D041                       		add.w	d1,d0
00010948                            
00010948                            loc_FF26:
00010948 3228 0030                  		move.w	$30(a0),d1
0001094C 9240                       		sub.w	d0,d1
0001094E 3141 0008                  		move.w	d1,8(a0)
00010952 4E75                       		rts	
00010954                            ; ===========================================================================
00010954                            
00010954                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010954 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0001095A 6600                       		bne.s	Obj52_02_Wait
0001095C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010960                            
00010960                            Obj52_02_Wait:
00010960 4E75                       		rts	
00010962                            ; ===========================================================================
00010962                            
00010962                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010962 7600                       		moveq	#0,d3
00010964 1628 0019                  		move.b	$19(a0),d3
00010968 6100 0000                  		bsr.w	ObjHitWallRight
0001096C 4A41                       		tst.w	d1		; has the platform hit a wall?
0001096E 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010970 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010974 3168 0008 0030             		move.w	8(a0),$30(a0)
0001097A 4E75                       		rts	
0001097C                            ; ===========================================================================
0001097C                            
0001097C                            Obj52_03_End:
0001097C 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010980 4E75                       		rts	
00010982                            ; ===========================================================================
00010982                            
00010982                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010982 7600                       		moveq	#0,d3
00010984 1628 0019                  		move.b	$19(a0),d3
00010988 6100 0000                  		bsr.w	ObjHitWallRight
0001098C 4A41                       		tst.w	d1		; has the platform hit a wall?
0001098E 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010990 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010994 3168 0008 0030             		move.w	8(a0),$30(a0)
0001099A 4E75                       		rts	
0001099C                            ; ===========================================================================
0001099C                            
0001099C                            Obj52_05_End:
0001099C 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000109A0 4E75                       		rts	
000109A2                            ; ===========================================================================
000109A2                            
000109A2                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000109A2 6100 D668                  		bsr.w	SpeedToPos
000109A6 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000109AC 6100 0000                  		bsr.w	ObjHitFloor
000109B0 4A41                       		tst.w	d1		; has platform hit the floor?
000109B2 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000109B6 D368 000C                  		add.w	d1,$C(a0)
000109BA 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000109BE 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000109C2                            
000109C2                            locret_FFA0:
000109C2 4E75                       		rts	
000109C4                            ; ===========================================================================
000109C4                            
000109C4                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000109C4 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000109C8 6700                       		beq.s	Obj52_07_ChkDel
000109CA 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000109CE                            
000109CE                            Obj52_07_ChkDel:
000109CE 588F                       		addq.l	#4,sp
000109D0 3028 0030                  		move.w	$30(a0),d0
000109D4 0240 FF80                  		andi.w	#$FF80,d0
000109D8 3238 F700                  		move.w	($FFFFF700).w,d1
000109DC 0441 0080                  		subi.w	#$80,d1
000109E0 0241 FF80                  		andi.w	#$FF80,d1
000109E4 9041                       		sub.w	d1,d0
000109E6 0C40 0280                  		cmpi.w	#$280,d0
000109EA 6200 D682                  		bhi.w	DeleteObject
000109EE 4E75                       		rts	
000109F0                            ; ===========================================================================
000109F0                            
000109F0                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000109F0 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000109F4 323C 0080                  		move.w	#$80,d1
000109F8 0828 0000 0022             		btst	#0,$22(a0)
000109FE 6700                       		beq.s	loc_FFE2
00010A00 4440                       		neg.w	d0
00010A02 D041                       		add.w	d1,d0
00010A04                            
00010A04                            loc_FFE2:
00010A04 3228 0032                  		move.w	$32(a0),d1
00010A08 9240                       		sub.w	d0,d1
00010A0A 3141 000C                  		move.w	d1,$C(a0)
00010A0E 4E75                       		rts	
00010A10                            ; ===========================================================================
00010A10                            
00010A10                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010A10 7600                       		moveq	#0,d3
00010A12 1628 0019                  		move.b	$19(a0),d3
00010A16 D643                       		add.w	d3,d3
00010A18 7208                       		moveq	#8,d1
00010A1A 0828 0000 0022             		btst	#0,$22(a0)
00010A20 6700                       		beq.s	loc_10004
00010A22 4441                       		neg.w	d1
00010A24 4443                       		neg.w	d3
00010A26                            
00010A26                            loc_10004:
00010A26 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010A2A 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010A2C 3028 0008                  		move.w	8(a0),d0
00010A30 9068 0030                  		sub.w	$30(a0),d0
00010A34 B043                       		cmp.w	d3,d0
00010A36 6700                       		beq.s	Obj52_0A_Wait
00010A38 D368 0008                  		add.w	d1,8(a0)	; move platform
00010A3C 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010A42 4E75                       		rts	
00010A44                            ; ===========================================================================
00010A44                            
00010A44                            Obj52_0A_Wait:
00010A44 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010A48 6600                       		bne.s	locret_1002E	; if time remains, branch
00010A4A 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010A50                            
00010A50                            locret_1002E:
00010A50 4E75                       		rts	
00010A52                            ; ===========================================================================
00010A52                            
00010A52                            Obj52_0A_Back:
00010A52 3028 0008                  		move.w	8(a0),d0
00010A56 9068 0030                  		sub.w	$30(a0),d0
00010A5A 6700                       		beq.s	Obj52_0A_Reset
00010A5C 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010A60 4E75                       		rts	
00010A62                            ; ===========================================================================
00010A62                            
00010A62                            Obj52_0A_Reset:
00010A62 4268 0036                  		clr.w	$36(a0)
00010A66 5328 0028                  		subq.b	#1,$28(a0)
00010A6A 4E75                       		rts	
00010A6C                            ; ===========================================================================
00010A6C                            ; ---------------------------------------------------------------------------
00010A6C                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010A6C                            ; ---------------------------------------------------------------------------
00010A6C                            Map_obj52:
00010A6C                            	include "_maps\obj52mz.asm"
00010A6C                            ; ---------------------------------------------------------------------------
00010A6C                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010A6C                            ; ---------------------------------------------------------------------------
00010A6C 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010A70 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010A74 0000                       		dc.w byte_1008F-Map_obj52
00010A76 01                         byte_10054:	dc.b 1
00010A77 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010A7C 02                         byte_1005A:	dc.b 2
00010A7D F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010A82 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010A87 04                         byte_10065:	dc.b 4
00010A88 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010A8D 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010A92 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010A97 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010A9C 04                         byte_1007A:	dc.b 4
00010A9D F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010AA2 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010AA7 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010AAC F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010AB1 03                         byte_1008F:	dc.b 3
00010AB2 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010AB7 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010ABC F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010AC2 00                         		even
00010AC2 00                         		even
00010AC2                            
00010AC2                            ; ---------------------------------------------------------------------------
00010AC2                            ; Sprite mappings - moving block (LZ)
00010AC2                            ; ---------------------------------------------------------------------------
00010AC2                            Map_obj52a:
00010AC2                            	include "_maps\obj52lz.asm"
00010AC2                            ; ---------------------------------------------------------------------------
00010AC2                            ; Sprite mappings - moving block (LZ)
00010AC2                            ; ---------------------------------------------------------------------------
00010AC2 0000                       		dc.w byte_100A2-Map_obj52a
00010AC4 01                         byte_100A2:	dc.b 1
00010AC5 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010ACA                            		even
00010ACA                            		even
00010ACA                            
00010ACA                            ; ===========================================================================
00010ACA                            ; ---------------------------------------------------------------------------
00010ACA                            ; Object 55 - Basaran enemy (MZ)
00010ACA                            ; ---------------------------------------------------------------------------
00010ACA                            
00010ACA                            Obj55:					; XREF: Obj_Index
00010ACA 7000                       		moveq	#0,d0
00010ACC 1028 0024                  		move.b	$24(a0),d0
00010AD0 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010AD4 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010AD8                            ; ===========================================================================
00010AD8 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010ADA 0000                       		dc.w Obj55_Action-Obj55_Index
00010ADC                            ; ===========================================================================
00010ADC                            
00010ADC                            Obj55_Main:				; XREF: Obj55_Index
00010ADC 5428 0024                  		addq.b	#2,$24(a0)
00010AE0 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010AE8 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010AEE 117C 0004 0001             		move.b	#4,1(a0)
00010AF4 117C 000C 0016             		move.b	#$C,$16(a0)
00010AFA 117C 0002 0018             		move.b	#2,$18(a0)
00010B00 117C 000B 0020             		move.b	#$B,$20(a0)
00010B06 117C 0010 0019             		move.b	#$10,$19(a0)
00010B0C                            
00010B0C                            Obj55_Action:				; XREF: Obj55_Index
00010B0C 7000                       		moveq	#0,d0
00010B0E 1028 0025                  		move.b	$25(a0),d0
00010B12 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010B16 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010B1A 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010B20 6100 A56E                  		bsr.w	AnimateSprite
00010B24 6000 F5B4                  		bra.w	MarkObjGone
00010B28                            ; ===========================================================================
00010B28 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010B2A 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010B2C 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010B2E 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010B30                            ; ===========================================================================
00010B30                            
00010B30                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010B30 343C 0080                  		move.w	#$80,d2
00010B34 6100 0000                  		bsr.w	Obj55_ChkSonic
00010B38 6400                       		bcc.s	Obj55_NoDrop
00010B3A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010B3E 3140 0036                  		move.w	d0,$36(a0)
00010B42 9068 000C                  		sub.w	$C(a0),d0
00010B46 6500                       		bcs.s	Obj55_NoDrop
00010B48 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010B4C 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010B4E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010B52 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010B54 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010B58 D007                       		add.b	d7,d0
00010B5A 0200 0007                  		andi.b	#7,d0
00010B5E 6600                       		bne.s	Obj55_NoDrop
00010B60 117C 0001 001C             		move.b	#1,$1C(a0)
00010B66 5428 0025                  		addq.b	#2,$25(a0)
00010B6A                            
00010B6A                            Obj55_NoDrop:
00010B6A 4E75                       		rts	
00010B6C                            ; ===========================================================================
00010B6C                            
00010B6C                            Obj55_DropFly:				; XREF: Obj55_Index2
00010B6C 6100 D49E                  		bsr.w	SpeedToPos
00010B70 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010B76 343C 0080                  		move.w	#$80,d2
00010B7A 6100 0000                  		bsr.w	Obj55_ChkSonic
00010B7E 3028 0036                  		move.w	$36(a0),d0
00010B82 9068 000C                  		sub.w	$C(a0),d0
00010B86 6500                       		bcs.s	Obj55_ChkDel
00010B88 0C40 0010                  		cmpi.w	#$10,d0
00010B8C 6400                       		bcc.s	locret_10180
00010B8E 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010B92 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010B98 117C 0002 001C             		move.b	#2,$1C(a0)
00010B9E 5428 0025                  		addq.b	#2,$25(a0)
00010BA2                            
00010BA2                            locret_10180:
00010BA2 4E75                       		rts	
00010BA4                            ; ===========================================================================
00010BA4                            
00010BA4                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010BA4 4A28 0001                  		tst.b	1(a0)
00010BA8 6A00 D4C4                  		bpl.w	DeleteObject
00010BAC 4E75                       		rts	
00010BAE                            ; ===========================================================================
00010BAE                            
00010BAE                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010BAE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010BB2 0200 000F                  		andi.b	#$F,d0
00010BB6 6600                       		bne.s	loc_101A0
00010BB8 303C 00C0                  		move.w	#$C0,d0
00010BBC 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flapping sound
00010BC2                            
00010BC2                            loc_101A0:
00010BC2 6100 D448                  		bsr.w	SpeedToPos
00010BC6 3038 D008                  		move.w	($FFFFD008).w,d0
00010BCA 9068 0008                  		sub.w	8(a0),d0
00010BCE 6400                       		bcc.s	loc_101B0
00010BD0 4440                       		neg.w	d0
00010BD2                            
00010BD2                            loc_101B0:
00010BD2 0C40 0080                  		cmpi.w	#$80,d0
00010BD6 6500                       		bcs.s	locret_101C6
00010BD8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010BDC D007                       		add.b	d7,d0
00010BDE 0200 0007                  		andi.b	#7,d0
00010BE2 6600                       		bne.s	locret_101C6
00010BE4 5428 0025                  		addq.b	#2,$25(a0)
00010BE8                            
00010BE8                            locret_101C6:
00010BE8 4E75                       		rts	
00010BEA                            ; ===========================================================================
00010BEA                            
00010BEA                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010BEA 6100 D420                  		bsr.w	SpeedToPos
00010BEE 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010BF4 6100 0000                  		bsr.w	ObjHitCeiling
00010BF8 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010BFA 6A00                       		bpl.s	locret_101F4	; if not, branch
00010BFC 9368 000C                  		sub.w	d1,$C(a0)
00010C00 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010C06 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010C0A 4268 0012                  		clr.w	$12(a0)
00010C0E 4228 001C                  		clr.b	$1C(a0)
00010C12 4228 0025                  		clr.b	$25(a0)
00010C16                            
00010C16                            locret_101F4:
00010C16 4E75                       		rts	
00010C18                            ; ===========================================================================
00010C18                            
00010C18                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010C18 323C 0100                  		move.w	#$100,d1
00010C1C 08E8 0000 0022             		bset	#0,$22(a0)
00010C22 3038 D008                  		move.w	($FFFFD008).w,d0
00010C26 9068 0008                  		sub.w	8(a0),d0
00010C2A 6400                       		bcc.s	loc_10214
00010C2C 4440                       		neg.w	d0
00010C2E 4441                       		neg.w	d1
00010C30 08A8 0000 0022             		bclr	#0,$22(a0)
00010C36                            
00010C36                            loc_10214:
00010C36 B042                       		cmp.w	d2,d0
00010C38 4E75                       		rts	
00010C3A                            ; ===========================================================================
00010C3A 6100 D3D0                  		bsr.w	SpeedToPos
00010C3E 6100 D3F2                  		bsr.w	DisplaySprite
00010C42 4A28 0001                  		tst.b	1(a0)
00010C46 6A00 D426                  		bpl.w	DeleteObject
00010C4A 4E75                       		rts	
00010C4C                            ; ===========================================================================
00010C4C                            Ani_obj55:
00010C4C                            	include "_anim\obj55.asm"
00010C4C                            ; ---------------------------------------------------------------------------
00010C4C                            ; Animation script - Basaran enemy
00010C4C                            ; ---------------------------------------------------------------------------
00010C4C 0000                       		dc.w byte_10230-Ani_obj55
00010C4E 0000                       		dc.w byte_10234-Ani_obj55
00010C50 0000                       		dc.w byte_10238-Ani_obj55
00010C52 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010C56 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010C5A 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010C60                            		even
00010C60                            		even
00010C60                            
00010C60                            ; ---------------------------------------------------------------------------
00010C60                            ; Sprite mappings - Basaran enemy (MZ)
00010C60                            ; ---------------------------------------------------------------------------
00010C60                            Map_obj55:
00010C60                            	include "_maps\obj55.asm"
00010C60                            ; ---------------------------------------------------------------------------
00010C60                            ; Sprite mappings - Basaran enemy (MZ)
00010C60                            ; ---------------------------------------------------------------------------
00010C60 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010C64 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010C68 01                         byte_10246:	dc.b 1
00010C69 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010C6E 03                         byte_1024C:	dc.b 3
00010C6F F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010C74 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010C79 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010C7E 04                         byte_1025C:	dc.b 4
00010C7F F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010C84 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010C89 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010C8E 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010C93 04                         byte_10271:	dc.b 4
00010C94 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010C99 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010C9E 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010CA3 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010CA8                            		even
00010CA8                            		even
00010CA8                            
00010CA8                            ; ===========================================================================
00010CA8                            ; ---------------------------------------------------------------------------
00010CA8                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010CA8                            ; ---------------------------------------------------------------------------
00010CA8                            
00010CA8                            Obj56:					; XREF: Obj_Index
00010CA8 7000                       		moveq	#0,d0
00010CAA 1028 0024                  		move.b	$24(a0),d0
00010CAE 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010CB2 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010CB6                            ; ===========================================================================
00010CB6 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010CB8 0000                       		dc.w Obj56_Action-Obj56_Index
00010CBA                            
00010CBA 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010CBC 2020                       		dc.b  $20, $20
00010CBE 1020                       		dc.b  $10, $20
00010CC0 201A                       		dc.b  $20, $1A
00010CC2 1027                       		dc.b  $10, $27
00010CC4 1010                       		dc.b  $10, $10
00010CC6 0820                       		dc.b	8, $20
00010CC8 4010                       		dc.b  $40, $10
00010CCA                            ; ===========================================================================
00010CCA                            
00010CCA                            Obj56_Main:				; XREF: Obj56_Index
00010CCA 5428 0024                  		addq.b	#2,$24(a0)
00010CCE 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010CD6 317C 4000 0002             		move.w	#$4000,2(a0)
00010CDC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010CE2 6600                       		bne.s	loc_102C8
00010CE4 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010CEA                            
00010CEA                            loc_102C8:
00010CEA 117C 0004 0001             		move.b	#4,1(a0)
00010CF0 117C 0003 0018             		move.b	#3,$18(a0)
00010CF6 7000                       		moveq	#0,d0
00010CF8 1028 0028                  		move.b	$28(a0),d0
00010CFC E648                       		lsr.w	#3,d0
00010CFE 0240 000E                  		andi.w	#$E,d0
00010D02 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010D06 115A 0019                  		move.b	(a2)+,$19(a0)
00010D0A 1152 0016                  		move.b	(a2),$16(a0)
00010D0E E248                       		lsr.w	#1,d0
00010D10 1140 001A                  		move.b	d0,$1A(a0)
00010D14 3168 0008 0034             		move.w	8(a0),$34(a0)
00010D1A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010D20 7000                       		moveq	#0,d0
00010D22 1012                       		move.b	(a2),d0
00010D24 D040                       		add.w	d0,d0
00010D26 3140 003A                  		move.w	d0,$3A(a0)
00010D2A 7000                       		moveq	#0,d0
00010D2C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010D32 6700                       		beq.s	loc_10332
00010D34 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010D38 0240 000F                  		andi.w	#$F,d0
00010D3C 5140                       		subq.w	#8,d0
00010D3E 6500                       		bcs.s	loc_10332
00010D40 E548                       		lsl.w	#2,d0
00010D42 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010D46 45F2 0000                  		lea	(a2,d0.w),a2
00010D4A 4A52                       		tst.w	(a2)
00010D4C 6A00                       		bpl.s	loc_10332
00010D4E 0868 0000 0022             		bchg	#0,$22(a0)
00010D54                            
00010D54                            loc_10332:
00010D54 1028 0028                  		move.b	$28(a0),d0
00010D58 6A00                       		bpl.s	Obj56_Action
00010D5A 0200 000F                  		andi.b	#$F,d0
00010D5E 1140 003C                  		move.b	d0,$3C(a0)
00010D62 117C 0005 0028             		move.b	#5,$28(a0)
00010D68 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010D6E 6600                       		bne.s	Obj56_ChkGone
00010D70 117C 000C 0028             		move.b	#$C,$28(a0)
00010D76 317C 0080 003A             		move.w	#$80,$3A(a0)
00010D7C                            
00010D7C                            Obj56_ChkGone:
00010D7C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D80 7000                       		moveq	#0,d0
00010D82 1028 0023                  		move.b	$23(a0),d0
00010D86 6700                       		beq.s	Obj56_Action
00010D88 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010D8E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010D94 6700                       		beq.s	Obj56_Action
00010D96 5228 0028                  		addq.b	#1,$28(a0)
00010D9A 4268 003A                  		clr.w	$3A(a0)
00010D9E                            
00010D9E                            Obj56_Action:				; XREF: Obj56_Index
00010D9E 3F28 0008                  		move.w	8(a0),-(sp)
00010DA2 7000                       		moveq	#0,d0
00010DA4 1028 0028                  		move.b	$28(a0),d0	; get object type
00010DA8 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010DAC D040                       		add.w	d0,d0
00010DAE 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010DB2 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010DB6 381F                       		move.w	(sp)+,d4
00010DB8 4A28 0001                  		tst.b	1(a0)
00010DBC 6A00                       		bpl.s	Obj56_ChkDel
00010DBE 7200                       		moveq	#0,d1
00010DC0 1228 0019                  		move.b	$19(a0),d1
00010DC4 0641 000B                  		addi.w	#$B,d1
00010DC8 7400                       		moveq	#0,d2
00010DCA 1428 0016                  		move.b	$16(a0),d2
00010DCE 3602                       		move.w	d2,d3
00010DD0 5243                       		addq.w	#1,d3
00010DD2 6100 F62E                  		bsr.w	SolidObject
00010DD6                            
00010DD6                            Obj56_ChkDel:
00010DD6 3028 0034                  		move.w	$34(a0),d0
00010DDA 0240 FF80                  		andi.w	#$FF80,d0
00010DDE 3238 F700                  		move.w	($FFFFF700).w,d1
00010DE2 0441 0080                  		subi.w	#$80,d1
00010DE6 0241 FF80                  		andi.w	#$FF80,d1
00010DEA 9041                       		sub.w	d1,d0
00010DEC 0C40 0280                  		cmpi.w	#$280,d0
00010DF0 6200 D27C                  		bhi.w	DeleteObject
00010DF4 6000 D23C                  		bra.w	DisplaySprite
00010DF8                            ; ===========================================================================
00010DF8 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010DFC 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010E00 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010E04 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010E08 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010E0C 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010E10 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010E14                            ; ===========================================================================
00010E14                            
00010E14                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010E14 4E75                       		rts	
00010E16                            ; ===========================================================================
00010E16                            
00010E16                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010E16 323C 0040                  		move.w	#$40,d1
00010E1A 7000                       		moveq	#0,d0
00010E1C 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010E20 6000                       		bra.s	Obj56_Move_LR
00010E22                            ; ===========================================================================
00010E22                            
00010E22                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010E22 323C 0080                  		move.w	#$80,d1
00010E26 7000                       		moveq	#0,d0
00010E28 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010E2C                            
00010E2C                            Obj56_Move_LR:
00010E2C 0828 0000 0022             		btst	#0,$22(a0)
00010E32 6700                       		beq.s	loc_10416
00010E34 4440                       		neg.w	d0
00010E36 D041                       		add.w	d1,d0
00010E38                            
00010E38                            loc_10416:
00010E38 3228 0034                  		move.w	$34(a0),d1
00010E3C 9240                       		sub.w	d0,d1
00010E3E 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010E42 4E75                       		rts	
00010E44                            ; ===========================================================================
00010E44                            
00010E44                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010E44 323C 0040                  		move.w	#$40,d1
00010E48 7000                       		moveq	#0,d0
00010E4A 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010E4E 6000                       		bra.s	Obj56_Move_UD
00010E50                            ; ===========================================================================
00010E50                            
00010E50                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010E50 323C 0080                  		move.w	#$80,d1
00010E54 7000                       		moveq	#0,d0
00010E56 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010E5A                            
00010E5A                            Obj56_Move_UD:
00010E5A 0828 0000 0022             		btst	#0,$22(a0)
00010E60 6700                       		beq.s	loc_10444
00010E62 4440                       		neg.w	d0
00010E64 D041                       		add.w	d1,d0
00010E66                            
00010E66                            loc_10444:
00010E66 3228 0030                  		move.w	$30(a0),d1
00010E6A 9240                       		sub.w	d0,d1
00010E6C 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010E70 4E75                       		rts	
00010E72                            ; ===========================================================================
00010E72                            
00010E72                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010E72 4A28 0038                  		tst.b	$38(a0)
00010E76 6600                       		bne.s	loc_104A4
00010E78 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010E7E 6600                       		bne.s	loc_1047A	; if not, branch
00010E80 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010E86 6600                       		bne.s	loc_1047A
00010E88 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010E8C 3038 D008                  		move.w	($FFFFD008).w,d0
00010E90 B068 0008                  		cmp.w	8(a0),d0
00010E94 6400                       		bcc.s	loc_1047A
00010E96 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010E9C                            
00010E9C                            loc_1047A:
00010E9C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010EA0 7000                       		moveq	#0,d0
00010EA2 1028 003C                  		move.b	$3C(a0),d0
00010EA6 0832 0000 0000             		btst	#0,(a2,d0.w)
00010EAC 6700                       		beq.s	loc_104AE
00010EAE 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010EB4 6600                       		bne.s	loc_1049E	; if not, branch
00010EB6 0C00 0003                  		cmpi.b	#3,d0
00010EBA 6600                       		bne.s	loc_1049E
00010EBC 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010EC0                            
00010EC0                            loc_1049E:
00010EC0 117C 0001 0038             		move.b	#1,$38(a0)
00010EC6                            
00010EC6                            loc_104A4:
00010EC6 4A68 003A                  		tst.w	$3A(a0)
00010ECA 6700                       		beq.s	loc_104C8
00010ECC 5568 003A                  		subq.w	#2,$3A(a0)
00010ED0                            
00010ED0                            loc_104AE:
00010ED0 3028 003A                  		move.w	$3A(a0),d0
00010ED4 0828 0000 0022             		btst	#0,$22(a0)
00010EDA 6700                       		beq.s	loc_104BC
00010EDC 4440                       		neg.w	d0
00010EDE                            
00010EDE                            loc_104BC:
00010EDE 3228 0030                  		move.w	$30(a0),d1
00010EE2 D240                       		add.w	d0,d1
00010EE4 3141 000C                  		move.w	d1,$C(a0)
00010EE8 4E75                       		rts	
00010EEA                            ; ===========================================================================
00010EEA                            
00010EEA                            loc_104C8:
00010EEA 5228 0028                  		addq.b	#1,$28(a0)
00010EEE 4228 0038                  		clr.b	$38(a0)
00010EF2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010EF6 7000                       		moveq	#0,d0
00010EF8 1028 0023                  		move.b	$23(a0),d0
00010EFC 67D2                       		beq.s	loc_104AE
00010EFE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010F04 60CA                       		bra.s	loc_104AE
00010F06                            ; ===========================================================================
00010F06                            
00010F06                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010F06 4A28 0038                  		tst.b	$38(a0)
00010F0A 6600                       		bne.s	loc_10500
00010F0C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010F10 7000                       		moveq	#0,d0
00010F12 1028 003C                  		move.b	$3C(a0),d0
00010F16 4A32 0000                  		tst.b	(a2,d0.w)
00010F1A 6A00                       		bpl.s	loc_10512
00010F1C 117C 0001 0038             		move.b	#1,$38(a0)
00010F22                            
00010F22                            loc_10500:
00010F22 7000                       		moveq	#0,d0
00010F24 1028 0016                  		move.b	$16(a0),d0
00010F28 D040                       		add.w	d0,d0
00010F2A B068 003A                  		cmp.w	$3A(a0),d0
00010F2E 6700                       		beq.s	loc_1052C
00010F30 5468 003A                  		addq.w	#2,$3A(a0)
00010F34                            
00010F34                            loc_10512:
00010F34 3028 003A                  		move.w	$3A(a0),d0
00010F38 0828 0000 0022             		btst	#0,$22(a0)
00010F3E 6700                       		beq.s	loc_10520
00010F40 4440                       		neg.w	d0
00010F42                            
00010F42                            loc_10520:
00010F42 3228 0030                  		move.w	$30(a0),d1
00010F46 D240                       		add.w	d0,d1
00010F48 3141 000C                  		move.w	d1,$C(a0)
00010F4C 4E75                       		rts	
00010F4E                            ; ===========================================================================
00010F4E                            
00010F4E                            loc_1052C:
00010F4E 5328 0028                  		subq.b	#1,$28(a0)
00010F52 4228 0038                  		clr.b	$38(a0)
00010F56 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010F5A 7000                       		moveq	#0,d0
00010F5C 1028 0023                  		move.b	$23(a0),d0
00010F60 67D2                       		beq.s	loc_10512
00010F62 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010F68 60CA                       		bra.s	loc_10512
00010F6A                            ; ===========================================================================
00010F6A                            
00010F6A                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010F6A 4A28 0038                  		tst.b	$38(a0)
00010F6E 6600                       		bne.s	loc_1055E
00010F70 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010F74 6700                       		beq.s	locret_10578
00010F76 117C 0001 0038             		move.b	#1,$38(a0)
00010F7C 4268 003A                  		clr.w	$3A(a0)
00010F80                            
00010F80                            loc_1055E:
00010F80 5268 0008                  		addq.w	#1,8(a0)
00010F84 3168 0008 0034             		move.w	8(a0),$34(a0)
00010F8A 5268 003A                  		addq.w	#1,$3A(a0)
00010F8E 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010F94 6600                       		bne.s	locret_10578
00010F96 4228 0028                  		clr.b	$28(a0)
00010F9A                            
00010F9A                            locret_10578:
00010F9A 4E75                       		rts	
00010F9C                            ; ===========================================================================
00010F9C                            
00010F9C                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010F9C 4A28 0038                  		tst.b	$38(a0)
00010FA0 6600                       		bne.s	loc_10598
00010FA2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010FA6 7000                       		moveq	#0,d0
00010FA8 1028 003C                  		move.b	$3C(a0),d0
00010FAC 0832 0000 0000             		btst	#0,(a2,d0.w)
00010FB2 6700                       		beq.s	loc_105A2
00010FB4 117C 0001 0038             		move.b	#1,$38(a0)
00010FBA                            
00010FBA                            loc_10598:
00010FBA 4A68 003A                  		tst.w	$3A(a0)
00010FBE 6700                       		beq.s	loc_105C0
00010FC0 5568 003A                  		subq.w	#2,$3A(a0)
00010FC4                            
00010FC4                            loc_105A2:
00010FC4 3028 003A                  		move.w	$3A(a0),d0
00010FC8 0828 0000 0022             		btst	#0,$22(a0)
00010FCE 6700                       		beq.s	loc_105B4
00010FD0 4440                       		neg.w	d0
00010FD2 0640 0080                  		addi.w	#$80,d0
00010FD6                            
00010FD6                            loc_105B4:
00010FD6 3228 0034                  		move.w	$34(a0),d1
00010FDA D240                       		add.w	d0,d1
00010FDC 3141 0008                  		move.w	d1,8(a0)
00010FE0 4E75                       		rts	
00010FE2                            ; ===========================================================================
00010FE2                            
00010FE2                            loc_105C0:
00010FE2 5228 0028                  		addq.b	#1,$28(a0)
00010FE6 4228 0038                  		clr.b	$38(a0)
00010FEA 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010FEE 7000                       		moveq	#0,d0
00010FF0 1028 0023                  		move.b	$23(a0),d0
00010FF4 67CE                       		beq.s	loc_105A2
00010FF6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010FFC 60C6                       		bra.s	loc_105A2
00010FFE                            ; ===========================================================================
00010FFE                            
00010FFE                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010FFE 4A28 0038                  		tst.b	$38(a0)
00011002 6600                       		bne.s	loc_105F8
00011004 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011008 7000                       		moveq	#0,d0
0001100A 1028 003C                  		move.b	$3C(a0),d0
0001100E 4A32 0000                  		tst.b	(a2,d0.w)
00011012 6A00                       		bpl.s	loc_10606
00011014 117C 0001 0038             		move.b	#1,$38(a0)
0001101A                            
0001101A                            loc_105F8:
0001101A 303C 0080                  		move.w	#$80,d0
0001101E B068 003A                  		cmp.w	$3A(a0),d0
00011022 6700                       		beq.s	loc_10624
00011024 5468 003A                  		addq.w	#2,$3A(a0)
00011028                            
00011028                            loc_10606:
00011028 3028 003A                  		move.w	$3A(a0),d0
0001102C 0828 0000 0022             		btst	#0,$22(a0)
00011032 6700                       		beq.s	loc_10618
00011034 4440                       		neg.w	d0
00011036 0640 0080                  		addi.w	#$80,d0
0001103A                            
0001103A                            loc_10618:
0001103A 3228 0034                  		move.w	$34(a0),d1
0001103E D240                       		add.w	d0,d1
00011040 3141 0008                  		move.w	d1,8(a0)
00011044 4E75                       		rts	
00011046                            ; ===========================================================================
00011046                            
00011046                            loc_10624:
00011046 5328 0028                  		subq.b	#1,$28(a0)
0001104A 4228 0038                  		clr.b	$38(a0)
0001104E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011052 7000                       		moveq	#0,d0
00011054 1028 0023                  		move.b	$23(a0),d0
00011058 67CE                       		beq.s	loc_10606
0001105A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011060 60C6                       		bra.s	loc_10606
00011062                            ; ===========================================================================
00011062                            
00011062                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011062 323C 0010                  		move.w	#$10,d1
00011066 7000                       		moveq	#0,d0
00011068 1038 FE88                  		move.b	($FFFFFE88).w,d0
0001106C E248                       		lsr.w	#1,d0
0001106E 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00011072 6000                       		bra.s	Obj56_Move_Sqr
00011074                            ; ===========================================================================
00011074                            
00011074                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00011074 323C 0030                  		move.w	#$30,d1
00011078 7000                       		moveq	#0,d0
0001107A 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
0001107E 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00011082 6000                       		bra.s	Obj56_Move_Sqr
00011084                            ; ===========================================================================
00011084                            
00011084                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00011084 323C 0050                  		move.w	#$50,d1
00011088 7000                       		moveq	#0,d0
0001108A 1038 FE90                  		move.b	($FFFFFE90).w,d0
0001108E 3638 FE92                  		move.w	($FFFFFE92).w,d3
00011092 6000                       		bra.s	Obj56_Move_Sqr
00011094                            ; ===========================================================================
00011094                            
00011094                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00011094 323C 0070                  		move.w	#$70,d1
00011098 7000                       		moveq	#0,d0
0001109A 1038 FE94                  		move.b	($FFFFFE94).w,d0
0001109E 3638 FE96                  		move.w	($FFFFFE96).w,d3
000110A2                            
000110A2                            Obj56_Move_Sqr:
000110A2 4A43                       		tst.w	d3
000110A4 6600                       		bne.s	loc_1068E
000110A6 5228 0022                  		addq.b	#1,$22(a0)
000110AA 0228 0003 0022             		andi.b	#3,$22(a0)
000110B0                            
000110B0                            loc_1068E:
000110B0 1428 0022                  		move.b	$22(a0),d2
000110B4 0202 0003                  		andi.b	#3,d2
000110B8 6600                       		bne.s	loc_106AE
000110BA 9041                       		sub.w	d1,d0
000110BC D068 0034                  		add.w	$34(a0),d0
000110C0 3140 0008                  		move.w	d0,8(a0)
000110C4 4441                       		neg.w	d1
000110C6 D268 0030                  		add.w	$30(a0),d1
000110CA 3141 000C                  		move.w	d1,$C(a0)
000110CE 4E75                       		rts	
000110D0                            ; ===========================================================================
000110D0                            
000110D0                            loc_106AE:
000110D0 5302                       		subq.b	#1,d2
000110D2 6600                       		bne.s	loc_106CC
000110D4 5341                       		subq.w	#1,d1
000110D6 9041                       		sub.w	d1,d0
000110D8 4440                       		neg.w	d0
000110DA D068 0030                  		add.w	$30(a0),d0
000110DE 3140 000C                  		move.w	d0,$C(a0)
000110E2 5241                       		addq.w	#1,d1
000110E4 D268 0034                  		add.w	$34(a0),d1
000110E8 3141 0008                  		move.w	d1,8(a0)
000110EC 4E75                       		rts	
000110EE                            ; ===========================================================================
000110EE                            
000110EE                            loc_106CC:
000110EE 5302                       		subq.b	#1,d2
000110F0 6600                       		bne.s	loc_106EA
000110F2 5341                       		subq.w	#1,d1
000110F4 9041                       		sub.w	d1,d0
000110F6 4440                       		neg.w	d0
000110F8 D068 0034                  		add.w	$34(a0),d0
000110FC 3140 0008                  		move.w	d0,8(a0)
00011100 5241                       		addq.w	#1,d1
00011102 D268 0030                  		add.w	$30(a0),d1
00011106 3141 000C                  		move.w	d1,$C(a0)
0001110A 4E75                       		rts	
0001110C                            ; ===========================================================================
0001110C                            
0001110C                            loc_106EA:
0001110C 9041                       		sub.w	d1,d0
0001110E D068 0030                  		add.w	$30(a0),d0
00011112 3140 000C                  		move.w	d0,$C(a0)
00011116 4441                       		neg.w	d1
00011118 D268 0034                  		add.w	$34(a0),d1
0001111C 3141 0008                  		move.w	d1,8(a0)
00011120 4E75                       		rts	
00011122                            ; ===========================================================================
00011122                            ; ---------------------------------------------------------------------------
00011122                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011122                            ; ---------------------------------------------------------------------------
00011122                            Map_obj56:
00011122                            	include "_maps\obj56.asm"
00011122                            ; ---------------------------------------------------------------------------
00011122                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011122                            ; ---------------------------------------------------------------------------
00011122 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00011126 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
0001112A 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
0001112E 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00011132 01                         byte_10710:	dc.b 1
00011133 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00011138 04                         byte_10716:	dc.b 4
00011139 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
0001113E E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00011143 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00011148 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
0001114D 02                         byte_1072B:	dc.b 2
0001114E E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00011153 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00011158 04                         byte_10736:	dc.b 4
00011159 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
0001115E E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00011163 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00011168 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
0001116D 03                         byte_1074B:	dc.b 3
0001116E D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00011173 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00011178 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
0001117D 01                         byte_1075B:	dc.b 1
0001117E F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011183 02                         byte_10761:	dc.b 2
00011184 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011189 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001118E 04                         byte_1076C:	dc.b 4
0001118F F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00011194 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00011199 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
0001119E F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000111A4 00                         		even
000111A4 00                         		even
000111A4                            
000111A4                            ; ===========================================================================
000111A4                            ; ---------------------------------------------------------------------------
000111A4                            ; Object 57 - spiked balls (SYZ, LZ)
000111A4                            ; ---------------------------------------------------------------------------
000111A4                            
000111A4                            Obj57:					; XREF: Obj_Index
000111A4 7000                       		moveq	#0,d0
000111A6 1028 0024                  		move.b	$24(a0),d0
000111AA 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000111AE 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000111B2                            ; ===========================================================================
000111B2 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000111B4 0000                       		dc.w Obj57_Move-Obj57_Index
000111B6 0000                       		dc.w Obj57_Display-Obj57_Index
000111B8                            ; ===========================================================================
000111B8                            
000111B8                            Obj57_Main:				; XREF: Obj57_Index
000111B8 5428 0024                  		addq.b	#2,$24(a0)
000111BC 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000111C4 317C 03BA 0002             		move.w	#$3BA,2(a0)
000111CA 117C 0004 0001             		move.b	#4,1(a0)
000111D0 117C 0004 0018             		move.b	#4,$18(a0)
000111D6 117C 0008 0019             		move.b	#8,$19(a0)
000111DC 3168 0008 003A             		move.w	8(a0),$3A(a0)
000111E2 3168 000C 0038             		move.w	$C(a0),$38(a0)
000111E8 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000111EE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000111F4 6600                       		bne.s	loc_107E8
000111F6 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000111FC 317C 0310 0002             		move.w	#$310,2(a0)
00011202 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
0001120A                            
0001120A                            loc_107E8:
0001120A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001120E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011212 4881                       		ext.w	d1
00011214 E741                       		asl.w	#3,d1		; multiply by 8
00011216 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
0001121A 1028 0022                  		move.b	$22(a0),d0
0001121E E418                       		ror.b	#2,d0
00011220 0200 00C0                  		andi.b	#-$40,d0
00011224 1140 0026                  		move.b	d0,$26(a0)
00011228 45E8 0029                  		lea	$29(a0),a2
0001122C 1228 0028                  		move.b	$28(a0),d1	; get object type
00011230 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00011234 14FC 0000                  		move.b	#0,(a2)+
00011238 3601                       		move.w	d1,d3
0001123A E94B                       		lsl.w	#4,d3
0001123C 1143 003C                  		move.b	d3,$3C(a0)
00011240 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011242 6500                       		bcs.s	loc_10894
00011244 0828 0003 0028             		btst	#3,$28(a0)
0001124A 6700                       		beq.s	Obj57_MakeChain
0001124C 5341                       		subq.w	#1,d1
0001124E 6500                       		bcs.s	loc_10894
00011250                            
00011250                            Obj57_MakeChain:
00011250 6100 D266                  		bsr.w	SingleObjLoad
00011254 6600                       		bne.s	loc_10894
00011256 5228 0029                  		addq.b	#1,$29(a0)
0001125A 3A09                       		move.w	a1,d5
0001125C 0445 D000                  		subi.w	#-$3000,d5
00011260 EC4D                       		lsr.w	#6,d5
00011262 0245 007F                  		andi.w	#$7F,d5
00011266 14C5                       		move.b	d5,(a2)+
00011268 137C 0004 0024             		move.b	#4,$24(a1)
0001126E 1290                       		move.b	0(a0),0(a1)
00011270 2368 0004 0004             		move.l	4(a0),4(a1)
00011276 3368 0002 0002             		move.w	2(a0),2(a1)
0001127C 1368 0001 0001             		move.b	1(a0),1(a1)
00011282 1368 0018 0018             		move.b	$18(a0),$18(a1)
00011288 1368 0019 0019             		move.b	$19(a0),$19(a1)
0001128E 1368 0020 0020             		move.b	$20(a0),$20(a1)
00011294 0403 0010                  		subi.b	#$10,d3
00011298 1343 003C                  		move.b	d3,$3C(a1)
0001129C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000112A2 6600                       		bne.s	loc_10890
000112A4 4A03                       		tst.b	d3
000112A6 6600                       		bne.s	loc_10890
000112A8 137C 0002 001A             		move.b	#2,$1A(a1)
000112AE                            
000112AE                            loc_10890:
000112AE 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000112B2                            
000112B2                            loc_10894:
000112B2 3A08                       		move.w	a0,d5
000112B4 0445 D000                  		subi.w	#-$3000,d5
000112B8 EC4D                       		lsr.w	#6,d5
000112BA 0245 007F                  		andi.w	#$7F,d5
000112BE 14C5                       		move.b	d5,(a2)+
000112C0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000112C6 6600                       		bne.s	Obj57_Move
000112C8 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000112CE 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000112D4                            
000112D4                            Obj57_Move:				; XREF: Obj57_Index
000112D4 6100 0000                  		bsr.w	Obj57_MoveSub
000112D8 6000 0000                  		bra.w	Obj57_ChkDel
000112DC                            ; ===========================================================================
000112DC                            
000112DC                            Obj57_MoveSub:				; XREF: Obj57_Move
000112DC 3028 003E                  		move.w	$3E(a0),d0
000112E0 D168 0026                  		add.w	d0,$26(a0)
000112E4 1028 0026                  		move.b	$26(a0),d0
000112E8 4EB9 0000 2D6C             		jsr	(CalcSine).l
000112EE 3428 0038                  		move.w	$38(a0),d2
000112F2 3628 003A                  		move.w	$3A(a0),d3
000112F6 45E8 0029                  		lea	$29(a0),a2
000112FA 7C00                       		moveq	#0,d6
000112FC 1C1A                       		move.b	(a2)+,d6
000112FE                            
000112FE                            Obj57_MoveLoop:
000112FE 7800                       		moveq	#0,d4
00011300 181A                       		move.b	(a2)+,d4
00011302 ED4C                       		lsl.w	#6,d4
00011304 0684 00FF D000             		addi.l	#$FFD000,d4
0001130A 2244                       		movea.l	d4,a1
0001130C 7800                       		moveq	#0,d4
0001130E 1829 003C                  		move.b	$3C(a1),d4
00011312 2A04                       		move.l	d4,d5
00011314 C9C0                       		muls.w	d0,d4
00011316 E084                       		asr.l	#8,d4
00011318 CBC1                       		muls.w	d1,d5
0001131A E085                       		asr.l	#8,d5
0001131C D842                       		add.w	d2,d4
0001131E DA43                       		add.w	d3,d5
00011320 3344 000C                  		move.w	d4,$C(a1)
00011324 3345 0008                  		move.w	d5,8(a1)
00011328 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
0001132C 4E75                       		rts	
0001132E                            ; ===========================================================================
0001132E                            
0001132E                            Obj57_ChkDel:				; XREF: Obj57_Move
0001132E 3028 003A                  		move.w	$3A(a0),d0
00011332 0240 FF80                  		andi.w	#$FF80,d0
00011336 3238 F700                  		move.w	($FFFFF700).w,d1
0001133A 0441 0080                  		subi.w	#$80,d1
0001133E 0241 FF80                  		andi.w	#$FF80,d1
00011342 9041                       		sub.w	d1,d0
00011344 0C40 0280                  		cmpi.w	#$280,d0
00011348 6200 0000                  		bhi.w	Obj57_Delete
0001134C 6000 CCE4                  		bra.w	DisplaySprite
00011350                            ; ===========================================================================
00011350                            
00011350                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011350 7400                       		moveq	#0,d2
00011352 45E8 0029                  		lea	$29(a0),a2
00011356 141A                       		move.b	(a2)+,d2
00011358                            
00011358                            Obj57_DelLoop:
00011358 7000                       		moveq	#0,d0
0001135A 101A                       		move.b	(a2)+,d0
0001135C ED48                       		lsl.w	#6,d0
0001135E 0680 00FF D000             		addi.l	#$FFD000,d0
00011364 2240                       		movea.l	d0,a1
00011366 6100 CD08                  		bsr.w	DeleteObject2
0001136A 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001136E                            
0001136E 4E75                       		rts	
00011370                            ; ===========================================================================
00011370                            
00011370                            Obj57_Display:				; XREF: Obj57_Index
00011370 6000 CCC0                  		bra.w	DisplaySprite
00011374                            ; ===========================================================================
00011374                            ; ---------------------------------------------------------------------------
00011374                            ; Sprite mappings - chain of spiked balls (SYZ)
00011374                            ; ---------------------------------------------------------------------------
00011374                            Map_obj57:
00011374                            	include "_maps\obj57syz.asm"
00011374                            ; ---------------------------------------------------------------------------
00011374                            ; Sprite mappings - chain of spiked balls (SYZ)
00011374                            ; ---------------------------------------------------------------------------
00011374 0000                       		dc.w byte_10958-Map_obj57
00011376 01                         byte_10958:	dc.b 1
00011377 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001137C                            		even
0001137C                            		even
0001137C                            
0001137C                            ; ---------------------------------------------------------------------------
0001137C                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001137C                            ; ---------------------------------------------------------------------------
0001137C                            Map_obj57a:
0001137C                            	include "_maps\obj57lz.asm"
0001137C                            ; ---------------------------------------------------------------------------
0001137C                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001137C                            ; ---------------------------------------------------------------------------
0001137C 0000                       		dc.w byte_10964-Map_obj57a
0001137E 0000                       		dc.w byte_1096A-Map_obj57a
00011380 0000                       		dc.w byte_10970-Map_obj57a
00011382 01                         byte_10964:	dc.b 1
00011383 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011388 01                         byte_1096A:	dc.b 1
00011389 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001138E 01                         byte_10970:	dc.b 1
0001138F F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00011394                            		even
00011394                            		even
00011394                            
00011394                            ; ===========================================================================
00011394                            ; ---------------------------------------------------------------------------
00011394                            ; Object 58 - giant spiked balls (SYZ)
00011394                            ; ---------------------------------------------------------------------------
00011394                            
00011394                            Obj58:					; XREF: Obj_Index
00011394 7000                       		moveq	#0,d0
00011396 1028 0024                  		move.b	$24(a0),d0
0001139A 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0001139E 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000113A2                            ; ===========================================================================
000113A2 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000113A4 0000                       		dc.w Obj58_Move-Obj58_Index
000113A6                            ; ===========================================================================
000113A6                            
000113A6                            Obj58_Main:				; XREF: Obj58_Index
000113A6 5428 0024                  		addq.b	#2,$24(a0)
000113AA 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
000113B2 317C 0396 0002             		move.w	#$396,2(a0)
000113B8 117C 0004 0001             		move.b	#4,1(a0)
000113BE 117C 0004 0018             		move.b	#4,$18(a0)
000113C4 117C 0018 0019             		move.b	#$18,$19(a0)
000113CA 3168 0008 003A             		move.w	8(a0),$3A(a0)
000113D0 3168 000C 0038             		move.w	$C(a0),$38(a0)
000113D6 117C 0086 0020             		move.b	#$86,$20(a0)
000113DC 1228 0028                  		move.b	$28(a0),d1	; get object type
000113E0 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000113E4 4881                       		ext.w	d1
000113E6 E741                       		asl.w	#3,d1		; multiply by 8
000113E8 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000113EC 1028 0022                  		move.b	$22(a0),d0
000113F0 E418                       		ror.b	#2,d0
000113F2 0200 00C0                  		andi.b	#$C0,d0
000113F6 1140 0026                  		move.b	d0,$26(a0)
000113FA 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011400                            
00011400                            Obj58_Move:				; XREF: Obj58_Index
00011400 7000                       		moveq	#0,d0
00011402 1028 0028                  		move.b	$28(a0),d0	; get object type
00011406 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
0001140A D040                       		add.w	d0,d0
0001140C 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011410 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011414 3028 003A                  		move.w	$3A(a0),d0
00011418 0240 FF80                  		andi.w	#$FF80,d0
0001141C 3238 F700                  		move.w	($FFFFF700).w,d1
00011420 0441 0080                  		subi.w	#$80,d1
00011424 0241 FF80                  		andi.w	#$FF80,d1
00011428 9041                       		sub.w	d1,d0
0001142A 0C40 0280                  		cmpi.w	#$280,d0
0001142E 6200 CC3E                  		bhi.w	DeleteObject
00011432 6000 CBFE                  		bra.w	DisplaySprite
00011436                            ; ===========================================================================
00011436 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011438 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
0001143A 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
0001143C 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001143E                            ; ===========================================================================
0001143E                            
0001143E                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001143E 4E75                       		rts	
00011440                            ; ===========================================================================
00011440                            
00011440                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011440 323C 0060                  		move.w	#$60,d1
00011444 7000                       		moveq	#0,d0
00011446 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001144A 0828 0000 0022             		btst	#0,$22(a0)
00011450 6700                       		beq.s	loc_10A38
00011452 4440                       		neg.w	d0
00011454 D041                       		add.w	d1,d0
00011456                            
00011456                            loc_10A38:
00011456 3228 003A                  		move.w	$3A(a0),d1
0001145A 9240                       		sub.w	d0,d1
0001145C 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011460 4E75                       		rts	
00011462                            ; ===========================================================================
00011462                            
00011462                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011462 323C 0060                  		move.w	#$60,d1
00011466 7000                       		moveq	#0,d0
00011468 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001146C 0828 0000 0022             		btst	#0,$22(a0)
00011472 6700                       		beq.s	loc_10A5C
00011474 4440                       		neg.w	d0
00011476 0640 0080                  		addi.w	#$80,d0
0001147A                            
0001147A                            loc_10A5C:
0001147A 3228 0038                  		move.w	$38(a0),d1
0001147E 9240                       		sub.w	d0,d1
00011480 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011484 4E75                       		rts	
00011486                            ; ===========================================================================
00011486                            
00011486                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011486 3028 003E                  		move.w	$3E(a0),d0
0001148A D168 0026                  		add.w	d0,$26(a0)
0001148E 1028 0026                  		move.b	$26(a0),d0
00011492 4EB9 0000 2D6C             		jsr	(CalcSine).l
00011498 3428 0038                  		move.w	$38(a0),d2
0001149C 3628 003A                  		move.w	$3A(a0),d3
000114A0 7800                       		moveq	#0,d4
000114A2 1828 003C                  		move.b	$3C(a0),d4
000114A6 2A04                       		move.l	d4,d5
000114A8 C9C0                       		muls.w	d0,d4
000114AA E084                       		asr.l	#8,d4
000114AC CBC1                       		muls.w	d1,d5
000114AE E085                       		asr.l	#8,d5
000114B0 D842                       		add.w	d2,d4
000114B2 DA43                       		add.w	d3,d5
000114B4 3144 000C                  		move.w	d4,$C(a0)
000114B8 3145 0008                  		move.w	d5,8(a0)
000114BC 4E75                       		rts	
000114BE                            ; ===========================================================================
000114BE                            ; ---------------------------------------------------------------------------
000114BE                            ; Sprite mappings - SBZ	spiked ball on a chain
000114BE                            ; ---------------------------------------------------------------------------
000114BE                            Map_obj15b:
000114BE                            	include "_maps\obj15sbz.asm"
000114BE                            ; ---------------------------------------------------------------------------
000114BE                            ; Sprite mappings - spiked ball on a chain (SBZ)
000114BE                            ; ---------------------------------------------------------------------------
000114BE 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000114C2 0000                       		dc.w byte_10AC6-Map_obj15b
000114C4 05                         byte_10AA6:	dc.b 5
000114C5 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000114CA F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000114CF F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000114D4 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000114D9 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000114DE 01                         byte_10AC0:	dc.b 1
000114DF F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000114E4 02                         byte_10AC6:	dc.b 2
000114E5 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000114EA E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000114F0 00                         		even
000114F0 00                         		even
000114F0                            
000114F0                            ; ===========================================================================
000114F0                            ; ---------------------------------------------------------------------------
000114F0                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000114F0                            ; ---------------------------------------------------------------------------
000114F0                            
000114F0                            Obj59:					; XREF: Obj_Index
000114F0 7000                       		moveq	#0,d0
000114F2 1028 0024                  		move.b	$24(a0),d0
000114F6 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000114FA 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000114FE 3028 0032                  		move.w	$32(a0),d0
00011502 0240 FF80                  		andi.w	#$FF80,d0
00011506 3238 F700                  		move.w	($FFFFF700).w,d1
0001150A 0441 0080                  		subi.w	#$80,d1
0001150E 0241 FF80                  		andi.w	#$FF80,d1
00011512 9041                       		sub.w	d1,d0
00011514 0C40 0280                  		cmpi.w	#$280,d0
00011518 6200 CB54                  		bhi.w	DeleteObject
0001151C 6000 CB14                  		bra.w	DisplaySprite
00011520                            ; ===========================================================================
00011520 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011522 0000                       		dc.w Obj59_Platform-Obj59_Index
00011524 0000                       		dc.w Obj59_Action-Obj59_Index
00011526 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011528                            
00011528 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
0001152A                            
0001152A 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
0001152C 2001                       		dc.b $20, 1
0001152E 3401                       		dc.b $34, 1
00011530 1003                       		dc.b $10, 3
00011532 2003                       		dc.b $20, 3
00011534 3403                       		dc.b $34, 3
00011536 1401                       		dc.b $14, 1
00011538 2401                       		dc.b $24, 1
0001153A 2C01                       		dc.b $2C, 1
0001153C 1403                       		dc.b $14, 3
0001153E 2403                       		dc.b $24, 3
00011540 2C03                       		dc.b $2C, 3
00011542 2005                       		dc.b $20, 5
00011544 2007                       		dc.b $20, 7
00011546 3009                       		dc.b $30, 9
00011548                            ; ===========================================================================
00011548                            
00011548                            Obj59_Main:				; XREF: Obj59_Index
00011548 5428 0024                  		addq.b	#2,$24(a0)
0001154C 7000                       		moveq	#0,d0
0001154E 1028 0028                  		move.b	$28(a0),d0
00011552 6A00                       		bpl.s	Obj59_Main2
00011554 5828 0024                  		addq.b	#4,$24(a0)
00011558 0240 007F                  		andi.w	#$7F,d0
0001155C C0FC 0006                  		mulu.w	#6,d0
00011560 3140 003C                  		move.w	d0,$3C(a0)
00011564 3140 003E                  		move.w	d0,$3E(a0)
00011568 588F                       		addq.l	#4,sp
0001156A 4E75                       		rts	
0001156C                            ; ===========================================================================
0001156C                            
0001156C                            Obj59_Main2:
0001156C E648                       		lsr.w	#3,d0
0001156E 0240 001E                  		andi.w	#$1E,d0
00011572 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011576 115A 0019                  		move.b	(a2)+,$19(a0)
0001157A 115A 001A                  		move.b	(a2)+,$1A(a0)
0001157E 7000                       		moveq	#0,d0
00011580 1028 0028                  		move.b	$28(a0),d0
00011584 D040                       		add.w	d0,d0
00011586 0240 001E                  		andi.w	#$1E,d0
0001158A 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001158E 101A                       		move.b	(a2)+,d0
00011590 E548                       		lsl.w	#2,d0
00011592 3140 003C                  		move.w	d0,$3C(a0)
00011596 115A 0028                  		move.b	(a2)+,$28(a0)
0001159A 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000115A2 317C 4000 0002             		move.w	#$4000,2(a0)
000115A8 117C 0004 0001             		move.b	#4,1(a0)
000115AE 117C 0004 0018             		move.b	#4,$18(a0)
000115B4 3168 0008 0032             		move.w	8(a0),$32(a0)
000115BA 3168 000C 0030             		move.w	$C(a0),$30(a0)
000115C0                            
000115C0                            Obj59_Platform:				; XREF: Obj59_Index
000115C0 7200                       		moveq	#0,d1
000115C2 1228 0019                  		move.b	$19(a0),d1
000115C6 4EB9 0000 7C4C             		jsr	(PlatformObject).l
000115CC 6000 0000                  		bra.w	Obj59_Types
000115D0                            ; ===========================================================================
000115D0                            
000115D0                            Obj59_Action:				; XREF: Obj59_Index
000115D0 7200                       		moveq	#0,d1
000115D2 1228 0019                  		move.b	$19(a0),d1
000115D6 4EB9 0000 7DC0             		jsr	(ExitPlatform).l
000115DC 3F28 0008                  		move.w	8(a0),-(sp)
000115E0 6100 0000                  		bsr.w	Obj59_Types
000115E4 341F                       		move.w	(sp)+,d2
000115E6 4A10                       		tst.b	0(a0)
000115E8 6700                       		beq.s	locret_10BD4
000115EA 4EF9 0000 832A             		jmp	(MvSonicOnPtfm2).l
000115F0                            ; ===========================================================================
000115F0                            
000115F0                            locret_10BD4:
000115F0 4E75                       		rts	
000115F2                            ; ===========================================================================
000115F2                            
000115F2                            Obj59_Types:
000115F2 7000                       		moveq	#0,d0
000115F4 1028 0028                  		move.b	$28(a0),d0
000115F8 0240 000F                  		andi.w	#$F,d0
000115FC D040                       		add.w	d0,d0
000115FE 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011602 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011606                            ; ===========================================================================
00011606 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001160A 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001160E 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011612 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011616 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
0001161A                            ; ===========================================================================
0001161A                            
0001161A                            Obj59_Type00:				; XREF: Obj59_TypeIndex
0001161A 4E75                       		rts	
0001161C                            ; ===========================================================================
0001161C                            
0001161C                            Obj59_Type01:				; XREF: Obj59_TypeIndex
0001161C 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011622 6600                       		bne.s	locret_10C0C
00011624 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011628                            
00011628                            locret_10C0C:
00011628 4E75                       		rts	
0001162A                            ; ===========================================================================
0001162A                            
0001162A                            Obj59_Type02:				; XREF: Obj59_TypeIndex
0001162A 6100 0000                  		bsr.w	Obj59_Move
0001162E 3028 0034                  		move.w	$34(a0),d0
00011632 4440                       		neg.w	d0
00011634 D068 0030                  		add.w	$30(a0),d0
00011638 3140 000C                  		move.w	d0,$C(a0)
0001163C 4E75                       		rts	
0001163E                            ; ===========================================================================
0001163E                            
0001163E                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001163E 6100 0000                  		bsr.w	Obj59_Move
00011642 3028 0034                  		move.w	$34(a0),d0
00011646 D068 0030                  		add.w	$30(a0),d0
0001164A 3140 000C                  		move.w	d0,$C(a0)
0001164E 4E75                       		rts	
00011650                            ; ===========================================================================
00011650                            
00011650                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011650 6100 0000                  		bsr.w	Obj59_Move
00011654 3028 0034                  		move.w	$34(a0),d0
00011658 E240                       		asr.w	#1,d0
0001165A 4440                       		neg.w	d0
0001165C D068 0030                  		add.w	$30(a0),d0
00011660 3140 000C                  		move.w	d0,$C(a0)
00011664 3028 0034                  		move.w	$34(a0),d0
00011668 D068 0032                  		add.w	$32(a0),d0
0001166C 3140 0008                  		move.w	d0,8(a0)
00011670 4E75                       		rts	
00011672                            ; ===========================================================================
00011672                            
00011672                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011672 6100 0000                  		bsr.w	Obj59_Move
00011676 3028 0034                  		move.w	$34(a0),d0
0001167A E240                       		asr.w	#1,d0
0001167C D068 0030                  		add.w	$30(a0),d0
00011680 3140 000C                  		move.w	d0,$C(a0)
00011684 3028 0034                  		move.w	$34(a0),d0
00011688 4440                       		neg.w	d0
0001168A D068 0032                  		add.w	$32(a0),d0
0001168E 3140 0008                  		move.w	d0,8(a0)
00011692 4E75                       		rts	
00011694                            ; ===========================================================================
00011694                            
00011694                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00011694 6100 0000                  		bsr.w	Obj59_Move
00011698 3028 0034                  		move.w	$34(a0),d0
0001169C 4440                       		neg.w	d0
0001169E D068 0030                  		add.w	$30(a0),d0
000116A2 3140 000C                  		move.w	d0,$C(a0)
000116A6 4A28 0028                  		tst.b	$28(a0)
000116AA 6700 0000                  		beq.w	loc_10C94
000116AE 4E75                       		rts	
000116B0                            ; ===========================================================================
000116B0                            
000116B0                            loc_10C94:
000116B0 0828 0003 0022             		btst	#3,$22(a0)
000116B6 6700                       		beq.s	Obj59_Delete
000116B8 08E9 0001 0022             		bset	#1,$22(a1)
000116BE 08A9 0003 0022             		bclr	#3,$22(a1)
000116C4 137C 0002 0024             		move.b	#2,$24(a1)
000116CA                            
000116CA                            Obj59_Delete:
000116CA 6000 C9A2                  		bra.w	DeleteObject
000116CE                            
000116CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000116CE                            
000116CE                            
000116CE                            Obj59_Move:				; XREF: Obj59_Type02; et al
000116CE 3028 0038                  		move.w	$38(a0),d0
000116D2 4A28 003A                  		tst.b	$3A(a0)
000116D6 6600                       		bne.s	loc_10CC8
000116D8 0C40 0800                  		cmpi.w	#$800,d0
000116DC 6400                       		bcc.s	loc_10CD0
000116DE 0640 0010                  		addi.w	#$10,d0
000116E2 6000                       		bra.s	loc_10CD0
000116E4                            ; ===========================================================================
000116E4                            
000116E4                            loc_10CC8:
000116E4 4A40                       		tst.w	d0
000116E6 6700                       		beq.s	loc_10CD0
000116E8 0440 0010                  		subi.w	#$10,d0
000116EC                            
000116EC                            loc_10CD0:
000116EC 3140 0038                  		move.w	d0,$38(a0)
000116F0 48C0                       		ext.l	d0
000116F2 E180                       		asl.l	#8,d0
000116F4 D0A8 0034                  		add.l	$34(a0),d0
000116F8 2140 0034                  		move.l	d0,$34(a0)
000116FC 4840                       		swap	d0
000116FE 3428 003C                  		move.w	$3C(a0),d2
00011702 B042                       		cmp.w	d2,d0
00011704 6300                       		bls.s	loc_10CF0
00011706 117C 0001 003A             		move.b	#1,$3A(a0)
0001170C                            
0001170C                            loc_10CF0:
0001170C D442                       		add.w	d2,d2
0001170E B042                       		cmp.w	d2,d0
00011710 6600                       		bne.s	locret_10CFA
00011712 4228 0028                  		clr.b	$28(a0)
00011716                            
00011716                            locret_10CFA:
00011716 4E75                       		rts	
00011718                            ; End of function Obj59_Move
00011718                            
00011718                            ; ===========================================================================
00011718                            
00011718                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011718 5368 003C                  		subq.w	#1,$3C(a0)
0001171C 6600                       		bne.s	Obj59_ChkDel
0001171E 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011724 6100 CD92                  		bsr.w	SingleObjLoad
00011728 6600                       		bne.s	Obj59_ChkDel
0001172A 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0001172E 3368 0008 0008             		move.w	8(a0),8(a1)
00011734 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001173A 137C 000E 0028             		move.b	#$E,$28(a1)
00011740                            
00011740                            Obj59_ChkDel:
00011740 588F                       		addq.l	#4,sp
00011742 3028 0008                  		move.w	8(a0),d0
00011746 0240 FF80                  		andi.w	#$FF80,d0
0001174A 3238 F700                  		move.w	($FFFFF700).w,d1
0001174E 0441 0080                  		subi.w	#$80,d1
00011752 0241 FF80                  		andi.w	#$FF80,d1
00011756 9041                       		sub.w	d1,d0
00011758 0C40 0280                  		cmpi.w	#$280,d0
0001175C 6200 C910                  		bhi.w	DeleteObject
00011760 4E75                       		rts	
00011762                            ; ===========================================================================
00011762                            ; ---------------------------------------------------------------------------
00011762                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011762                            ; ---------------------------------------------------------------------------
00011762                            Map_obj59:
00011762                            	include "_maps\obj59.asm"
00011762                            ; ---------------------------------------------------------------------------
00011762                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011762                            ; ---------------------------------------------------------------------------
00011762 0000                       		dc.w byte_10D4A-Map_obj59
00011764 03                         byte_10D4A:	dc.b 3
00011765 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
0001176A F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001176F F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011774                            		even
00011774                            		even
00011774                            
00011774                            ; ===========================================================================
00011774                            ; ---------------------------------------------------------------------------
00011774                            ; Object 5A - platforms	moving in circles (SLZ)
00011774                            ; ---------------------------------------------------------------------------
00011774                            
00011774                            Obj5A:					; XREF: Obj_Index
00011774 7000                       		moveq	#0,d0
00011776 1028 0024                  		move.b	$24(a0),d0
0001177A 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001177E 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011782 3028 0032                  		move.w	$32(a0),d0
00011786 0240 FF80                  		andi.w	#$FF80,d0
0001178A 3238 F700                  		move.w	($FFFFF700).w,d1
0001178E 0441 0080                  		subi.w	#$80,d1
00011792 0241 FF80                  		andi.w	#$FF80,d1
00011796 9041                       		sub.w	d1,d0
00011798 0C40 0280                  		cmpi.w	#$280,d0
0001179C 6200 C8D0                  		bhi.w	DeleteObject
000117A0 6000 C890                  		bra.w	DisplaySprite
000117A4                            ; ===========================================================================
000117A4 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000117A6 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000117A8 0000                       		dc.w Obj5A_Action-Obj5A_Index
000117AA                            ; ===========================================================================
000117AA                            
000117AA                            Obj5A_Main:				; XREF: Obj5A_Index
000117AA 5428 0024                  		addq.b	#2,$24(a0)
000117AE 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000117B6 317C 4000 0002             		move.w	#$4000,2(a0)
000117BC 117C 0004 0001             		move.b	#4,1(a0)
000117C2 117C 0004 0018             		move.b	#4,$18(a0)
000117C8 117C 0018 0019             		move.b	#$18,$19(a0)
000117CE 3168 0008 0032             		move.w	8(a0),$32(a0)
000117D4 3168 000C 0030             		move.w	$C(a0),$30(a0)
000117DA                            
000117DA                            Obj5A_Platform:				; XREF: Obj5A_Index
000117DA 7200                       		moveq	#0,d1
000117DC 1228 0019                  		move.b	$19(a0),d1
000117E0 4EB9 0000 7C4C             		jsr	(PlatformObject).l
000117E6 6000 0000                  		bra.w	Obj5A_Types
000117EA                            ; ===========================================================================
000117EA                            
000117EA                            Obj5A_Action:				; XREF: Obj5A_Index
000117EA 7200                       		moveq	#0,d1
000117EC 1228 0019                  		move.b	$19(a0),d1
000117F0 4EB9 0000 7DC0             		jsr	(ExitPlatform).l
000117F6 3F28 0008                  		move.w	8(a0),-(sp)
000117FA 6100 0000                  		bsr.w	Obj5A_Types
000117FE 341F                       		move.w	(sp)+,d2
00011800 4EF9 0000 832A             		jmp	(MvSonicOnPtfm2).l
00011806                            ; ===========================================================================
00011806                            
00011806                            Obj5A_Types:
00011806 7000                       		moveq	#0,d0
00011808 1028 0028                  		move.b	$28(a0),d0
0001180C 0240 000C                  		andi.w	#$C,d0
00011810 E248                       		lsr.w	#1,d0
00011812 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011816 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
0001181A                            ; ===========================================================================
0001181A 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
0001181C 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0001181E                            ; ===========================================================================
0001181E                            
0001181E                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0001181E 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011822 0401 0050                  		subi.b	#$50,d1
00011826 4881                       		ext.w	d1
00011828 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001182C 0402 0050                  		subi.b	#$50,d2
00011830 4882                       		ext.w	d2
00011832 0828 0000 0028             		btst	#0,$28(a0)
00011838 6700                       		beq.s	loc_10E24
0001183A 4441                       		neg.w	d1
0001183C 4442                       		neg.w	d2
0001183E                            
0001183E                            loc_10E24:
0001183E 0828 0001 0028             		btst	#1,$28(a0)
00011844 6700                       		beq.s	loc_10E30
00011846 4441                       		neg.w	d1
00011848 C342                       		exg	d1,d2
0001184A                            
0001184A                            loc_10E30:
0001184A D268 0032                  		add.w	$32(a0),d1
0001184E 3141 0008                  		move.w	d1,8(a0)
00011852 D468 0030                  		add.w	$30(a0),d2
00011856 3142 000C                  		move.w	d2,$C(a0)
0001185A 4E75                       		rts	
0001185C                            ; ===========================================================================
0001185C                            
0001185C                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
0001185C 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011860 0401 0050                  		subi.b	#$50,d1
00011864 4881                       		ext.w	d1
00011866 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001186A 0402 0050                  		subi.b	#$50,d2
0001186E 4882                       		ext.w	d2
00011870 0828 0000 0028             		btst	#0,$28(a0)
00011876 6700                       		beq.s	loc_10E62
00011878 4441                       		neg.w	d1
0001187A 4442                       		neg.w	d2
0001187C                            
0001187C                            loc_10E62:
0001187C 0828 0001 0028             		btst	#1,$28(a0)
00011882 6700                       		beq.s	loc_10E6E
00011884 4441                       		neg.w	d1
00011886 C342                       		exg	d1,d2
00011888                            
00011888                            loc_10E6E:
00011888 4441                       		neg.w	d1
0001188A D268 0032                  		add.w	$32(a0),d1
0001188E 3141 0008                  		move.w	d1,8(a0)
00011892 D468 0030                  		add.w	$30(a0),d2
00011896 3142 000C                  		move.w	d2,$C(a0)
0001189A 4E75                       		rts	
0001189C                            ; ===========================================================================
0001189C                            ; ---------------------------------------------------------------------------
0001189C                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001189C                            ; ---------------------------------------------------------------------------
0001189C                            Map_obj5A:
0001189C                            	include "_maps\obj5A.asm"
0001189C                            ; ---------------------------------------------------------------------------
0001189C                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001189C                            ; ---------------------------------------------------------------------------
0001189C 0000                       		dc.w byte_10E84-Map_obj5A
0001189E 02                         byte_10E84:	dc.b 2
0001189F F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000118A4 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000118AA 00                         		even
000118AA 00                         		even
000118AA                            
000118AA                            ; ===========================================================================
000118AA                            ; ---------------------------------------------------------------------------
000118AA                            ; Object 5B - blocks that form a staircase (SLZ)
000118AA                            ; ---------------------------------------------------------------------------
000118AA                            
000118AA                            Obj5B:					; XREF: Obj_Index
000118AA 7000                       		moveq	#0,d0
000118AC 1028 0024                  		move.b	$24(a0),d0
000118B0 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000118B4 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000118B8 3028 0030                  		move.w	$30(a0),d0
000118BC 0240 FF80                  		andi.w	#$FF80,d0
000118C0 3238 F700                  		move.w	($FFFFF700).w,d1
000118C4 0441 0080                  		subi.w	#$80,d1
000118C8 0241 FF80                  		andi.w	#$FF80,d1
000118CC 9041                       		sub.w	d1,d0
000118CE 0C40 0280                  		cmpi.w	#$280,d0
000118D2 6200 C79A                  		bhi.w	DeleteObject
000118D6 6000 C75A                  		bra.w	DisplaySprite
000118DA                            ; ===========================================================================
000118DA 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000118DC 0000                       		dc.w Obj5B_Move-Obj5B_Index
000118DE 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000118E0                            ; ===========================================================================
000118E0                            
000118E0                            Obj5B_Main:				; XREF: Obj5B_Index
000118E0 5428 0024                  		addq.b	#2,$24(a0)
000118E4 7638                       		moveq	#$38,d3
000118E6 7801                       		moveq	#1,d4
000118E8 0828 0000 0022             		btst	#0,$22(a0)
000118EE 6700                       		beq.s	loc_10EDA
000118F0 763B                       		moveq	#$3B,d3
000118F2 78FF                       		moveq	#-1,d4
000118F4                            
000118F4                            loc_10EDA:
000118F4 3428 0008                  		move.w	8(a0),d2
000118F8 2248                       		movea.l	a0,a1
000118FA 7203                       		moveq	#3,d1
000118FC 6000                       		bra.s	Obj5B_MakeBlocks
000118FE                            ; ===========================================================================
000118FE                            
000118FE                            Obj5B_Loop:
000118FE 6100 CBCE                  		bsr.w	SingleObjLoad2
00011902 6600 0000                  		bne.w	Obj5B_Move
00011906 137C 0004 0024             		move.b	#4,$24(a1)
0001190C                            
0001190C                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001190C 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011910 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011918 337C 4000 0002             		move.w	#$4000,2(a1)
0001191E 137C 0004 0001             		move.b	#4,1(a1)
00011924 137C 0003 0018             		move.b	#3,$18(a1)
0001192A 137C 0010 0019             		move.b	#$10,$19(a1)
00011930 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011936 3342 0008                  		move.w	d2,8(a1)
0001193A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011940 3368 0008 0030             		move.w	8(a0),$30(a1)
00011946 3369 000C 0032             		move.w	$C(a1),$32(a1)
0001194C 0642 0020                  		addi.w	#$20,d2
00011950 1343 0037                  		move.b	d3,$37(a1)
00011954 2348 003C                  		move.l	a0,$3C(a1)
00011958 D604                       		add.b	d4,d3
0001195A 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0001195E                            
0001195E                            Obj5B_Move:				; XREF: Obj5B_Index
0001195E 7000                       		moveq	#0,d0
00011960 1028 0028                  		move.b	$28(a0),d0
00011964 0240 0007                  		andi.w	#7,d0
00011968 D040                       		add.w	d0,d0
0001196A 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
0001196E 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011972                            
00011972                            Obj5B_Solid:				; XREF: Obj5B_Index
00011972 2468 003C                  		movea.l	$3C(a0),a2
00011976 7000                       		moveq	#0,d0
00011978 1028 0037                  		move.b	$37(a0),d0
0001197C 1032 0000                  		move.b	(a2,d0.w),d0
00011980 D068 0032                  		add.w	$32(a0),d0
00011984 3140 000C                  		move.w	d0,$C(a0)
00011988 7200                       		moveq	#0,d1
0001198A 1228 0019                  		move.b	$19(a0),d1
0001198E 0641 000B                  		addi.w	#$B,d1
00011992 343C 0010                  		move.w	#$10,d2
00011996 363C 0011                  		move.w	#$11,d3
0001199A 3828 0008                  		move.w	8(a0),d4
0001199E 6100 EA62                  		bsr.w	SolidObject
000119A2 4A04                       		tst.b	d4
000119A4 6A00                       		bpl.s	loc_10F92
000119A6 1544 0036                  		move.b	d4,$36(a2)
000119AA                            
000119AA                            loc_10F92:
000119AA 0828 0003 0022             		btst	#3,$22(a0)
000119B0 6700                       		beq.s	locret_10FA0
000119B2 157C 0001 0036             		move.b	#1,$36(a2)
000119B8                            
000119B8                            locret_10FA0:
000119B8 4E75                       		rts	
000119BA                            ; ===========================================================================
000119BA 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000119BC 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000119BE 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000119C0 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000119C2                            ; ===========================================================================
000119C2                            
000119C2                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000119C2 4A68 0034                  		tst.w	$34(a0)
000119C6 6600                       		bne.s	loc_10FC0
000119C8 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000119CE 6600                       		bne.s	locret_10FBE
000119D0 317C 001E 0034             		move.w	#$1E,$34(a0)
000119D6                            
000119D6                            locret_10FBE:
000119D6 4E75                       		rts	
000119D8                            ; ===========================================================================
000119D8                            
000119D8                            loc_10FC0:
000119D8 5368 0034                  		subq.w	#1,$34(a0)
000119DC 66F8                       		bne.s	locret_10FBE
000119DE 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000119E2 4E75                       		rts	
000119E4                            ; ===========================================================================
000119E4                            
000119E4                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000119E4 4A68 0034                  		tst.w	$34(a0)
000119E8 6600                       		bne.s	loc_10FE0
000119EA 4A28 0036                  		tst.b	$36(a0)
000119EE 6A00                       		bpl.s	locret_10FDE
000119F0 317C 003C 0034             		move.w	#$3C,$34(a0)
000119F6                            
000119F6                            locret_10FDE:
000119F6 4E75                       		rts	
000119F8                            ; ===========================================================================
000119F8                            
000119F8                            loc_10FE0:
000119F8 5368 0034                  		subq.w	#1,$34(a0)
000119FC 6600                       		bne.s	loc_10FEC
000119FE 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011A02 4E75                       		rts	
00011A04                            ; ===========================================================================
00011A04                            
00011A04                            loc_10FEC:
00011A04 43E8 0038                  		lea	$38(a0),a1
00011A08 3028 0034                  		move.w	$34(a0),d0
00011A0C E408                       		lsr.b	#2,d0
00011A0E 0200 0001                  		andi.b	#1,d0
00011A12 12C0                       		move.b	d0,(a1)+
00011A14 0A00 0001                  		eori.b	#1,d0
00011A18 12C0                       		move.b	d0,(a1)+
00011A1A 0A00 0001                  		eori.b	#1,d0
00011A1E 12C0                       		move.b	d0,(a1)+
00011A20 0A00 0001                  		eori.b	#1,d0
00011A24 12C0                       		move.b	d0,(a1)+
00011A26 4E75                       		rts	
00011A28                            ; ===========================================================================
00011A28                            
00011A28                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011A28 43E8 0038                  		lea	$38(a0),a1
00011A2C 0C11 0080                  		cmpi.b	#$80,(a1)
00011A30 6700                       		beq.s	locret_11038
00011A32 5211                       		addq.b	#1,(a1)
00011A34 7200                       		moveq	#0,d1
00011A36 1219                       		move.b	(a1)+,d1
00011A38 4841                       		swap	d1
00011A3A E289                       		lsr.l	#1,d1
00011A3C 2401                       		move.l	d1,d2
00011A3E E289                       		lsr.l	#1,d1
00011A40 2601                       		move.l	d1,d3
00011A42 D682                       		add.l	d2,d3
00011A44 4841                       		swap	d1
00011A46 4842                       		swap	d2
00011A48 4843                       		swap	d3
00011A4A 12C3                       		move.b	d3,(a1)+
00011A4C 12C2                       		move.b	d2,(a1)+
00011A4E 12C1                       		move.b	d1,(a1)+
00011A50                            
00011A50                            locret_11038:
00011A50 4E75                       		rts	
00011A52 4E75                       		rts	
00011A54                            ; ===========================================================================
00011A54                            ; ---------------------------------------------------------------------------
00011A54                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011A54                            ; ---------------------------------------------------------------------------
00011A54                            Map_obj5B:
00011A54                            	include "_maps\obj5B.asm"
00011A54                            ; ---------------------------------------------------------------------------
00011A54                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011A54                            ; ---------------------------------------------------------------------------
00011A54 0000                       		dc.w byte_1103E-Map_obj5B
00011A56 01                         byte_1103E:	dc.b 1
00011A57 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011A5C                            		even
00011A5C                            		even
00011A5C                            
00011A5C                            ; ===========================================================================
00011A5C                            ; ---------------------------------------------------------------------------
00011A5C                            ; Object 5C - metal girders in foreground (SLZ)
00011A5C                            ; ---------------------------------------------------------------------------
00011A5C                            
00011A5C                            Obj5C:					; XREF: Obj_Index
00011A5C 7000                       		moveq	#0,d0
00011A5E 1028 0024                  		move.b	$24(a0),d0
00011A62 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011A66 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011A6A                            ; ===========================================================================
00011A6A 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011A6C 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011A6E                            ; ===========================================================================
00011A6E                            
00011A6E                            Obj5C_Main:				; XREF: Obj5C_Index
00011A6E 5428 0024                  		addq.b	#2,$24(a0)
00011A72 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011A7A 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011A80 117C 0010 0019             		move.b	#$10,$19(a0)
00011A86                            
00011A86                            Obj5C_Display:				; XREF: Obj5C_Index
00011A86 2238 F700                  		move.l	($FFFFF700).w,d1
00011A8A D281                       		add.l	d1,d1
00011A8C 4841                       		swap	d1
00011A8E 4441                       		neg.w	d1
00011A90 3141 0008                  		move.w	d1,8(a0)
00011A94 2238 F704                  		move.l	($FFFFF704).w,d1
00011A98 D281                       		add.l	d1,d1
00011A9A 4841                       		swap	d1
00011A9C 0241 003F                  		andi.w	#$3F,d1
00011AA0 4441                       		neg.w	d1
00011AA2 0641 0100                  		addi.w	#$100,d1
00011AA6 3141 000A                  		move.w	d1,$A(a0)
00011AAA 6000 C586                  		bra.w	DisplaySprite
00011AAE                            ; ===========================================================================
00011AAE                            ; ---------------------------------------------------------------------------
00011AAE                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011AAE                            ; ---------------------------------------------------------------------------
00011AAE                            Map_obj5C:
00011AAE                            	include "_maps\obj5C.asm"
00011AAE                            ; ---------------------------------------------------------------------------
00011AAE                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011AAE                            ; ---------------------------------------------------------------------------
00011AAE 0000                       		dc.w byte_11098-Map_obj5C
00011AB0 09                         byte_11098:	dc.b 9
00011AB1 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011AB6 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011ABB C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011AC0 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011AC5 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011ACA 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011ACF 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011AD4 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011AD9 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011ADE                            		even
00011ADE                            		even
00011ADE                            
00011ADE                            ; ===========================================================================
00011ADE                            ; ---------------------------------------------------------------------------
00011ADE                            ; Object 1B - water surface (LZ)
00011ADE                            ; ---------------------------------------------------------------------------
00011ADE                            
00011ADE                            Obj1B:					; XREF: Obj_Index
00011ADE 7000                       		moveq	#0,d0
00011AE0 1028 0024                  		move.b	$24(a0),d0
00011AE4 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011AE8 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011AEC                            ; ===========================================================================
00011AEC 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011AEE 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011AF0                            ; ===========================================================================
00011AF0                            
00011AF0                            Obj1B_Main:				; XREF: Obj1B_Index
00011AF0 5428 0024                  		addq.b	#2,$24(a0)
00011AF4 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011AFC 317C C300 0002             		move.w	#$C300,2(a0)
00011B02 117C 0004 0001             		move.b	#4,1(a0)
00011B08 117C 0080 0019             		move.b	#$80,$19(a0)
00011B0E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011B14                            
00011B14                            Obj1B_Action:				; XREF: Obj1B_Index
00011B14 3238 F700                  		move.w	($FFFFF700).w,d1
00011B18 0241 FFE0                  		andi.w	#$FFE0,d1
00011B1C D268 0030                  		add.w	$30(a0),d1
00011B20 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011B26 6700                       		beq.s	loc_11114
00011B28 0641 0020                  		addi.w	#$20,d1
00011B2C                            
00011B2C                            loc_11114:
00011B2C 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011B30 3238 F646                  		move.w	($FFFFF646).w,d1
00011B34 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011B38 4A28 0032                  		tst.b	$32(a0)
00011B3C 6600                       		bne.s	Obj1B_Animate
00011B3E 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011B44 6700                       		beq.s	loc_1114A	; if not, branch
00011B46 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011B4A 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011B50 6000                       		bra.s	Obj1B_Display
00011B52                            ; ===========================================================================
00011B52                            
00011B52                            Obj1B_Animate:				; XREF: loc_11114
00011B52 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011B56 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011B58 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011B5E 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011B62                            
00011B62                            loc_1114A:				; XREF: loc_11114
00011B62 5328 001E                  		subq.b	#1,$1E(a0)
00011B66 6A00                       		bpl.s	Obj1B_Display
00011B68 117C 0007 001E             		move.b	#7,$1E(a0)
00011B6E 5228 001A                  		addq.b	#1,$1A(a0)
00011B72 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011B78 6500                       		bcs.s	Obj1B_Display
00011B7A 117C 0000 001A             		move.b	#0,$1A(a0)
00011B80                            
00011B80                            Obj1B_Display:
00011B80 6000 C4B0                  		bra.w	DisplaySprite
00011B84                            ; ===========================================================================
00011B84                            ; ---------------------------------------------------------------------------
00011B84                            ; Sprite mappings - water surface (LZ)
00011B84                            ; ---------------------------------------------------------------------------
00011B84                            Map_obj1B:
00011B84                            	include "_maps\obj1B.asm"
00011B84                            ; ---------------------------------------------------------------------------
00011B84                            ; Sprite mappings - water surface (LZ)
00011B84                            ; ---------------------------------------------------------------------------
00011B84 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011B88 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011B8C 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011B90 03                         byte_11178:	dc.b 3
00011B91 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011B96 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011B9B FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011BA0 03                         byte_11188:	dc.b 3
00011BA1 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011BA6 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011BAB FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011BB0 03                         byte_11198:	dc.b 3
00011BB1 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011BB6 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011BBB FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011BC0 06                         byte_111A8:	dc.b 6
00011BC1 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011BC6 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011BCB FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011BD0 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011BD5 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011BDA FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011BDF 06                         byte_111C7:	dc.b 6
00011BE0 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011BE5 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011BEA FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011BEF FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011BF4 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011BF9 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011BFE 06                         byte_111E6:	dc.b 6
00011BFF FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011C04 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011C09 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011C0E FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011C13 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011C18 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011C1E 00                         		even
00011C1E 00                         		even
00011C1E                            
00011C1E                            ; ===========================================================================
00011C1E                            ; ---------------------------------------------------------------------------
00011C1E                            ; Object 0B - pole that	breaks (LZ)
00011C1E                            ; ---------------------------------------------------------------------------
00011C1E                            
00011C1E                            Obj0B:					; XREF: Obj_Index
00011C1E 7000                       		moveq	#0,d0
00011C20 1028 0024                  		move.b	$24(a0),d0
00011C24 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011C28 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011C2C                            ; ===========================================================================
00011C2C 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011C2E 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011C30 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011C32                            ; ===========================================================================
00011C32                            
00011C32                            Obj0B_Main:				; XREF: Obj0B_Index
00011C32 5428 0024                  		addq.b	#2,$24(a0)
00011C36 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011C3E 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011C44 117C 0004 0001             		move.b	#4,1(a0)
00011C4A 117C 0008 0019             		move.b	#8,$19(a0)
00011C50 117C 0004 0018             		move.b	#4,$18(a0)
00011C56 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011C5C 7000                       		moveq	#0,d0
00011C5E 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C62 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011C66 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011C6A                            
00011C6A                            Obj0B_Action:				; XREF: Obj0B_Index
00011C6A 4A28 0032                  		tst.b	$32(a0)
00011C6E 6700                       		beq.s	Obj0B_Grab
00011C70 4A68 0030                  		tst.w	$30(a0)
00011C74 6700                       		beq.s	Obj0B_MoveUp
00011C76 5368 0030                  		subq.w	#1,$30(a0)
00011C7A 6600                       		bne.s	Obj0B_MoveUp
00011C7C 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011C82 6000                       		bra.s	Obj0B_Release
00011C84                            ; ===========================================================================
00011C84                            
00011C84                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011C84 43F8 D000                  		lea	($FFFFD000).w,a1
00011C88 3028 000C                  		move.w	$C(a0),d0
00011C8C 0440 0018                  		subi.w	#$18,d0
00011C90 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011C96 6700                       		beq.s	Obj0B_MoveDown
00011C98 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011C9C B069 000C                  		cmp.w	$C(a1),d0
00011CA0 6500                       		bcs.s	Obj0B_MoveDown
00011CA2 3340 000C                  		move.w	d0,$C(a1)
00011CA6                            
00011CA6                            Obj0B_MoveDown:
00011CA6 0640 0024                  		addi.w	#$24,d0
00011CAA 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011CB0 6700                       		beq.s	Obj0B_LetGo
00011CB2 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011CB6 B069 000C                  		cmp.w	$C(a1),d0
00011CBA 6400                       		bcc.s	Obj0B_LetGo
00011CBC 3340 000C                  		move.w	d0,$C(a1)
00011CC0                            
00011CC0                            Obj0B_LetGo:
00011CC0 1038 F603                  		move.b	($FFFFF603).w,d0
00011CC4 0240 0070                  		andi.w	#$70,d0
00011CC8 6700                       		beq.s	Obj0B_Display
00011CCA                            
00011CCA                            Obj0B_Release:				; XREF: Obj0B_Action
00011CCA 4228 0020                  		clr.b	$20(a0)
00011CCE 5428 0024                  		addq.b	#2,$24(a0)
00011CD2 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011CD6 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011CDA 4228 0032                  		clr.b	$32(a0)
00011CDE 6000                       		bra.s	Obj0B_Display
00011CE0                            ; ===========================================================================
00011CE0                            
00011CE0                            Obj0B_Grab:				; XREF: Obj0B_Action
00011CE0 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011CE4 6700                       		beq.s	Obj0B_Display	; if not, branch
00011CE6 43F8 D000                  		lea	($FFFFD000).w,a1
00011CEA 3028 0008                  		move.w	8(a0),d0
00011CEE 0640 0014                  		addi.w	#$14,d0
00011CF2 B069 0008                  		cmp.w	8(a1),d0
00011CF6 6400                       		bcc.s	Obj0B_Display
00011CF8 4228 0021                  		clr.b	$21(a0)
00011CFC 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011D02 6400                       		bcc.s	Obj0B_Display
00011D04 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011D08 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011D0C 3028 0008                  		move.w	8(a0),d0
00011D10 0640 0014                  		addi.w	#$14,d0
00011D14 3340 0008                  		move.w	d0,8(a1)
00011D18 08A9 0000 0022             		bclr	#0,$22(a1)
00011D1E 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011D24 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011D2A 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011D30 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011D36                            
00011D36                            Obj0B_Display:				; XREF: Obj0B_Index
00011D36 6000 E3A2                  		bra.w	MarkObjGone
00011D3A                            ; ===========================================================================
00011D3A                            ; ---------------------------------------------------------------------------
00011D3A                            ; Sprite mappings - pole that breaks (LZ)
00011D3A                            ; ---------------------------------------------------------------------------
00011D3A                            Map_obj0B:
00011D3A                            	include "_maps\obj0B.asm"
00011D3A                            ; ---------------------------------------------------------------------------
00011D3A                            ; Sprite mappings - pole that breaks (LZ)
00011D3A                            ; ---------------------------------------------------------------------------
00011D3A 0000                       		dc.w byte_11326-Map_obj0B
00011D3C 0000                       		dc.w byte_11331-Map_obj0B
00011D3E 02                         byte_11326:	dc.b 2			; normal pole
00011D3F E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011D44 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011D49 04                         byte_11331:	dc.b 4			; broken pole
00011D4A E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011D4F F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011D54 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011D59 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011D5E                            		even
00011D5E                            		even
00011D5E                            
00011D5E                            ; ===========================================================================
00011D5E                            ; ---------------------------------------------------------------------------
00011D5E                            ; Object 0C - flapping door (LZ)
00011D5E                            ; ---------------------------------------------------------------------------
00011D5E                            
00011D5E                            Obj0C:					; XREF: Obj_Index
00011D5E 7000                       		moveq	#0,d0
00011D60 1028 0024                  		move.b	$24(a0),d0
00011D64 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011D68 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011D6C                            ; ===========================================================================
00011D6C 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011D6E 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011D70                            ; ===========================================================================
00011D70                            
00011D70                            Obj0C_Main:				; XREF: Obj0C_Index
00011D70 5428 0024                  		addq.b	#2,$24(a0)
00011D74 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011D7C 317C 4328 0002             		move.w	#$4328,2(a0)
00011D82 0028 0004 0001             		ori.b	#4,1(a0)
00011D88 117C 0028 0019             		move.b	#$28,$19(a0)
00011D8E 7000                       		moveq	#0,d0
00011D90 1028 0028                  		move.b	$28(a0),d0	; get object type
00011D94 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011D98 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011D9C                            
00011D9C                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011D9C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011DA0 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011DA2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011DA8 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011DAE 4A28 0001                  		tst.b	1(a0)
00011DB2 6A00                       		bpl.s	Obj0C_Solid
00011DB4 303C 00BB                  		move.w	#$BB,d0
00011DB8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play door sound
00011DBE                            
00011DBE                            Obj0C_Solid:
00011DBE 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011DC4 6100 92CA                  		bsr.w	AnimateSprite
00011DC8 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011DCC 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011DD0 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011DD2 3038 D008                  		move.w	($FFFFD008).w,d0
00011DD6 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011DDA 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011DDC 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011DE2 323C 0013                  		move.w	#$13,d1
00011DE6 343C 0020                  		move.w	#$20,d2
00011DEA 3602                       		move.w	d2,d3
00011DEC 5243                       		addq.w	#1,d3
00011DEE 3828 0008                  		move.w	8(a0),d4
00011DF2 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011DF6                            
00011DF6                            Obj0C_Display:
00011DF6 6000 E2E2                  		bra.w	MarkObjGone
00011DFA                            ; ===========================================================================
00011DFA                            Ani_obj0C:
00011DFA                            	include "_anim\obj0C.asm"
00011DFA                            ; ---------------------------------------------------------------------------
00011DFA                            ; Animation script - flapping door (LZ)
00011DFA                            ; ---------------------------------------------------------------------------
00011DFA 0000                       		dc.w byte_113E6-Ani_obj0C
00011DFC 0000                       		dc.w byte_113EC-Ani_obj0C
00011DFE 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011E04 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011E0A                            		even
00011E0A                            		even
00011E0A                            
00011E0A                            ; ---------------------------------------------------------------------------
00011E0A                            ; Sprite mappings - flapping door (LZ)
00011E0A                            ; ---------------------------------------------------------------------------
00011E0A                            Map_obj0C:
00011E0A                            	include "_maps\obj0C.asm"
00011E0A                            ; ---------------------------------------------------------------------------
00011E0A                            ; Sprite mappings - flapping door (LZ)
00011E0A                            ; ---------------------------------------------------------------------------
00011E0A 0000                       		dc.w byte_113F8-Map_obj0C
00011E0C 0000                       		dc.w byte_11403-Map_obj0C
00011E0E 0000                       		dc.w byte_1140E-Map_obj0C
00011E10 02                         byte_113F8:	dc.b 2
00011E11 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011E16 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011E1B 02                         byte_11403:	dc.b 2
00011E1C DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011E21 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011E26 02                         byte_1140E:	dc.b 2
00011E27 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011E2C 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011E32 00                         		even
00011E32 00                         		even
00011E32                            
00011E32                            ; ===========================================================================
00011E32                            ; ---------------------------------------------------------------------------
00011E32                            ; Object 71 - invisible	solid blocks
00011E32                            ; ---------------------------------------------------------------------------
00011E32                            
00011E32                            Obj71:					; XREF: Obj_Index
00011E32 7000                       		moveq	#0,d0
00011E34 1028 0024                  		move.b	$24(a0),d0
00011E38 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011E3C 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011E40                            ; ===========================================================================
00011E40 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011E42 0000                       		dc.w Obj71_Solid-Obj71_Index
00011E44                            ; ===========================================================================
00011E44                            
00011E44                            Obj71_Main:				; XREF: Obj71_Index
00011E44 5428 0024                  		addq.b	#2,$24(a0)
00011E48 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011E50 317C 8680 0002             		move.w	#$8680,2(a0)
00011E56 0028 0004 0001             		ori.b	#4,1(a0)
00011E5C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011E60 1200                       		move.b	d0,d1
00011E62 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011E66 0640 0010                  		addi.w	#$10,d0
00011E6A E248                       		lsr.w	#1,d0
00011E6C 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011E70 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011E74 5241                       		addq.w	#1,d1
00011E76 E749                       		lsl.w	#3,d1
00011E78 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011E7C                            
00011E7C                            Obj71_Solid:				; XREF: Obj71_Index
00011E7C 6100 C42E                  		bsr.w	ChkObjOnScreen
00011E80 6600                       		bne.s	Obj71_ChkDel
00011E82 7200                       		moveq	#0,d1
00011E84 1228 0019                  		move.b	$19(a0),d1
00011E88 0641 000B                  		addi.w	#$B,d1
00011E8C 7400                       		moveq	#0,d2
00011E8E 1428 0016                  		move.b	$16(a0),d2
00011E92 3602                       		move.w	d2,d3
00011E94 5243                       		addq.w	#1,d3
00011E96 3828 0008                  		move.w	8(a0),d4
00011E9A 6100 E5A8                  		bsr.w	SolidObject71
00011E9E                            
00011E9E                            Obj71_ChkDel:
00011E9E 3028 0008                  		move.w	8(a0),d0
00011EA2 0240 FF80                  		andi.w	#$FF80,d0
00011EA6 3238 F700                  		move.w	($FFFFF700).w,d1
00011EAA 0441 0080                  		subi.w	#$80,d1
00011EAE 0241 FF80                  		andi.w	#$FF80,d1
00011EB2 9041                       		sub.w	d1,d0
00011EB4 0C40 0280                  		cmpi.w	#$280,d0
00011EB8 6200                       		bhi.s	Obj71_Delete
00011EBA 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011EBE 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011EC0 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011EC4                            ; ===========================================================================
00011EC4                            
00011EC4                            Obj71_NoDisplay:
00011EC4 4E75                       		rts	
00011EC6                            ; ===========================================================================
00011EC6                            
00011EC6                            Obj71_Delete:
00011EC6 4EFA C1A6                  		jmp	DeleteObject
00011ECA                            ; ===========================================================================
00011ECA                            ; ---------------------------------------------------------------------------
00011ECA                            ; Sprite mappings - invisible solid blocks
00011ECA                            ; ---------------------------------------------------------------------------
00011ECA                            Map_obj71:
00011ECA                            	include "_maps\obj71.asm"
00011ECA                            ; ---------------------------------------------------------------------------
00011ECA                            ; Sprite mappings - invisible solid blocks
00011ECA                            ; ---------------------------------------------------------------------------
00011ECA 0000                       		dc.w byte_114BC-Map_obj71
00011ECC 0000                       		dc.w byte_114D1-Map_obj71
00011ECE 0000                       		dc.w byte_114E6-Map_obj71
00011ED0 04                         byte_114BC:	dc.b 4
00011ED1 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011ED6 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011EDB 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011EE0 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011EE5 04                         byte_114D1:	dc.b 4
00011EE6 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011EEB E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011EF0 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011EF5 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011EFA 04                         byte_114E6:	dc.b 4
00011EFB E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011F00 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011F05 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011F0A 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011F10 00                         		even
00011F10 00                         		even
00011F10                            
00011F10                            ; ===========================================================================
00011F10                            ; ---------------------------------------------------------------------------
00011F10                            ; Object 5D - fans (SLZ)
00011F10                            ; ---------------------------------------------------------------------------
00011F10                            
00011F10                            Obj5D:					; XREF: Obj_Index
00011F10 7000                       		moveq	#0,d0
00011F12 1028 0024                  		move.b	$24(a0),d0
00011F16 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011F1A 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011F1E                            ; ===========================================================================
00011F1E 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011F20 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011F22                            ; ===========================================================================
00011F22                            
00011F22                            Obj5D_Main:				; XREF: Obj5D_Index
00011F22 5428 0024                  		addq.b	#2,$24(a0)
00011F26 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011F2E 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011F34 0028 0004 0001             		ori.b	#4,1(a0)
00011F3A 117C 0010 0019             		move.b	#$10,$19(a0)
00011F40 117C 0004 0018             		move.b	#4,$18(a0)
00011F46                            
00011F46                            Obj5D_Delay:				; XREF: Obj5D_Index
00011F46 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011F4C 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011F4E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011F52 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011F54 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011F5A 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011F60 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011F62 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011F68                            
00011F68                            Obj5D_Blow:
00011F68 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011F6C 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011F70 43F8 D000                  		lea	($FFFFD000).w,a1
00011F74 3029 0008                  		move.w	8(a1),d0
00011F78 9068 0008                  		sub.w	8(a0),d0
00011F7C 0828 0000 0022             		btst	#0,$22(a0)
00011F82 6600                       		bne.s	Obj5D_ChkSonic
00011F84 4440                       		neg.w	d0
00011F86                            
00011F86                            Obj5D_ChkSonic:
00011F86 0640 0050                  		addi.w	#$50,d0
00011F8A 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011F8E 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011F90 3229 000C                  		move.w	$C(a1),d1
00011F94 0641 0060                  		addi.w	#$60,d1
00011F98 9268 000C                  		sub.w	$C(a0),d1
00011F9C 6500                       		bcs.s	Obj5D_Animate
00011F9E 0C41 0070                  		cmpi.w	#$70,d1
00011FA2 6400                       		bcc.s	Obj5D_Animate
00011FA4 0440 0050                  		subi.w	#$50,d0
00011FA8 6400                       		bcc.s	loc_1159A
00011FAA 4640                       		not.w	d0
00011FAC D040                       		add.w	d0,d0
00011FAE                            
00011FAE                            loc_1159A:
00011FAE 0640 0060                  		addi.w	#$60,d0
00011FB2 0828 0000 0022             		btst	#0,$22(a0)
00011FB8 6600                       		bne.s	loc_115A8
00011FBA 4440                       		neg.w	d0
00011FBC                            
00011FBC                            loc_115A8:
00011FBC 4400                       		neg.b	d0
00011FBE E840                       		asr.w	#4,d0
00011FC0 0828 0000 0028             		btst	#0,$28(a0)
00011FC6 6700                       		beq.s	Obj5D_MoveSonic
00011FC8 4440                       		neg.w	d0
00011FCA                            
00011FCA                            Obj5D_MoveSonic:
00011FCA D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011FCE                            
00011FCE                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011FCE 5328 001E                  		subq.b	#1,$1E(a0)
00011FD2 6A00                       		bpl.s	Obj5D_ChkDel
00011FD4 117C 0000 001E             		move.b	#0,$1E(a0)
00011FDA 5228 001B                  		addq.b	#1,$1B(a0)
00011FDE 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011FE4 6500                       		bcs.s	loc_115D8
00011FE6 117C 0000 001B             		move.b	#0,$1B(a0)
00011FEC                            
00011FEC                            loc_115D8:
00011FEC 7000                       		moveq	#0,d0
00011FEE 0828 0000 0028             		btst	#0,$28(a0)
00011FF4 6700                       		beq.s	loc_115E4
00011FF6 7002                       		moveq	#2,d0
00011FF8                            
00011FF8                            loc_115E4:
00011FF8 D028 001B                  		add.b	$1B(a0),d0
00011FFC 1140 001A                  		move.b	d0,$1A(a0)
00012000                            
00012000                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012000 6100 C030                  		bsr.w	DisplaySprite
00012004 3028 0008                  		move.w	8(a0),d0
00012008 0240 FF80                  		andi.w	#$FF80,d0
0001200C 3238 F700                  		move.w	($FFFFF700).w,d1
00012010 0441 0080                  		subi.w	#$80,d1
00012014 0241 FF80                  		andi.w	#$FF80,d1
00012018 9041                       		sub.w	d1,d0
0001201A 0C40 0280                  		cmpi.w	#$280,d0
0001201E 6200 C04E                  		bhi.w	DeleteObject
00012022 4E75                       		rts	
00012024                            ; ===========================================================================
00012024                            ; ---------------------------------------------------------------------------
00012024                            ; Sprite mappings - fans (SLZ)
00012024                            ; ---------------------------------------------------------------------------
00012024                            Map_obj5D:
00012024                            	include "_maps\obj5D.asm"
00012024                            ; ---------------------------------------------------------------------------
00012024                            ; Sprite mappings - fans (SLZ)
00012024                            ; ---------------------------------------------------------------------------
00012024 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00012028 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
0001202C 0000                       		dc.w byte_1161A-Map_obj5D
0001202E 02                         byte_1161A:	dc.b 2
0001202F F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00012034 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00012039 02                         byte_11625:	dc.b 2
0001203A F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
0001203F 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00012044 02                         byte_11630:	dc.b 2
00012045 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
0001204A 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012050 00                         		even
00012050 00                         		even
00012050                            
00012050                            ; ===========================================================================
00012050                            ; ---------------------------------------------------------------------------
00012050                            ; Object 5E - seesaws (SLZ)
00012050                            ; ---------------------------------------------------------------------------
00012050                            
00012050                            Obj5E:					; XREF: Obj_Index
00012050 7000                       		moveq	#0,d0
00012052 1028 0024                  		move.b	$24(a0),d0
00012056 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
0001205A 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
0001205E 3028 0030                  		move.w	$30(a0),d0
00012062 0240 FF80                  		andi.w	#$FF80,d0
00012066 3238 F700                  		move.w	($FFFFF700).w,d1
0001206A 0441 0080                  		subi.w	#$80,d1
0001206E 0241 FF80                  		andi.w	#$FF80,d1
00012072 9041                       		sub.w	d1,d0
00012074 6B00 BFF8                  		bmi.w	DeleteObject
00012078 0C40 0280                  		cmpi.w	#$280,d0
0001207C 6200 BFF0                  		bhi.w	DeleteObject
00012080 6000 BFB0                  		bra.w	DisplaySprite
00012084                            ; ===========================================================================
00012084 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00012086 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00012088 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
0001208A 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
0001208C 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
0001208E 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00012090                            ; ===========================================================================
00012090                            
00012090                            Obj5E_Main:				; XREF: Obj5E_Index
00012090 5428 0024                  		addq.b	#2,$24(a0)
00012094 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
0001209C 317C 0374 0002             		move.w	#$374,2(a0)
000120A2 0028 0004 0001             		ori.b	#4,1(a0)
000120A8 117C 0004 0018             		move.b	#4,$18(a0)
000120AE 117C 0030 0019             		move.b	#$30,$19(a0)
000120B4 3168 0008 0030             		move.w	8(a0),$30(a0)
000120BA 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000120BE 6600                       		bne.s	loc_116D2	; if not, branch
000120C0 6100 C40C                  		bsr.w	SingleObjLoad2
000120C4 6600                       		bne.s	loc_116D2
000120C6 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000120CA 5C29 0024                  		addq.b	#6,$24(a1)
000120CE 3368 0008 0008             		move.w	8(a0),8(a1)
000120D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000120DA 1368 0022 0022             		move.b	$22(a0),$22(a1)
000120E0 2348 003C                  		move.l	a0,$3C(a1)
000120E4                            
000120E4                            loc_116D2:
000120E4 0828 0000 0022             		btst	#0,$22(a0)
000120EA 6700                       		beq.s	loc_116E0
000120EC 117C 0002 001A             		move.b	#2,$1A(a0)
000120F2                            
000120F2                            loc_116E0:
000120F2 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
000120F8                            
000120F8                            Obj5E_Slope:				; XREF: Obj5E_Index
000120F8 1228 003A                  		move.b	$3A(a0),d1
000120FC 6100 0000                  		bsr.w	loc_11766
00012100 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012106 0828 0000 001A             		btst	#0,$1A(a0)
0001210C 6700                       		beq.s	loc_11702
0001210E 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012114                            
00012114                            loc_11702:
00012114 43F8 D000                  		lea	($FFFFD000).w,a1
00012118 3169 0012 0038             		move.w	$12(a1),$38(a0)
0001211E 323C 0030                  		move.w	#$30,d1
00012122 4EB9 0000 7D20             		jsr	(SlopeObject).l
00012128 4E75                       		rts	
0001212A                            ; ===========================================================================
0001212A                            
0001212A                            Obj5E_Slope2:				; XREF: Obj5E_Index
0001212A 6100 0000                  		bsr.w	loc_1174A
0001212E 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012134 0828 0000 001A             		btst	#0,$1A(a0)
0001213A 6700                       		beq.s	loc_11730
0001213C 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012142                            
00012142                            loc_11730:
00012142 323C 0030                  		move.w	#$30,d1
00012146 4EB9 0000 7DC0             		jsr	(ExitPlatform).l
0001214C 323C 0030                  		move.w	#$30,d1
00012150 3428 0008                  		move.w	8(a0),d2
00012154 4EB9 0000 8DB0             		jsr	SlopeObject2
0001215A 4E75                       		rts	
0001215C                            ; ===========================================================================
0001215C                            
0001215C                            loc_1174A:				; XREF: Obj5E_Slope2
0001215C 7202                       		moveq	#2,d1
0001215E 43F8 D000                  		lea	($FFFFD000).w,a1
00012162 3028 0008                  		move.w	8(a0),d0
00012166 9069 0008                  		sub.w	8(a1),d0
0001216A 6400                       		bcc.s	loc_1175E
0001216C 4440                       		neg.w	d0
0001216E 7200                       		moveq	#0,d1
00012170                            
00012170                            loc_1175E:
00012170 0C40 0008                  		cmpi.w	#8,d0
00012174 6400                       		bcc.s	loc_11766
00012176 7201                       		moveq	#1,d1
00012178                            
00012178                            loc_11766:
00012178 1028 001A                  		move.b	$1A(a0),d0
0001217C B001                       		cmp.b	d1,d0
0001217E 6700                       		beq.s	locret_11790
00012180 6400                       		bcc.s	loc_11772
00012182 5400                       		addq.b	#2,d0
00012184                            
00012184                            loc_11772:
00012184 5300                       		subq.b	#1,d0
00012186 1140 001A                  		move.b	d0,$1A(a0)
0001218A 1141 003A                  		move.b	d1,$3A(a0)
0001218E 08A8 0000 0001             		bclr	#0,1(a0)
00012194 0828 0001 001A             		btst	#1,$1A(a0)
0001219A 6700                       		beq.s	locret_11790
0001219C 08E8 0000 0001             		bset	#0,1(a0)
000121A2                            
000121A2                            locret_11790:
000121A2 4E75                       		rts	
000121A4                            ; ===========================================================================
000121A4                            
000121A4                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000121A4 5428 0024                  		addq.b	#2,$24(a0)
000121A8 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000121B0 317C 04F0 0002             		move.w	#$4F0,2(a0)
000121B6 0028 0004 0001             		ori.b	#4,1(a0)
000121BC 117C 0004 0018             		move.b	#4,$18(a0)
000121C2 117C 008B 0020             		move.b	#$8B,$20(a0)
000121C8 117C 000C 0019             		move.b	#$C,$19(a0)
000121CE 3168 0008 0030             		move.w	8(a0),$30(a0)
000121D4 0668 0028 0008             		addi.w	#$28,8(a0)
000121DA 3168 000C 0034             		move.w	$C(a0),$34(a0)
000121E0 117C 0001 001A             		move.b	#1,$1A(a0)
000121E6 0828 0000 0022             		btst	#0,$22(a0)
000121EC 6700                       		beq.s	Obj5E_MoveSpike
000121EE 0468 0050 0008             		subi.w	#$50,8(a0)
000121F4 117C 0002 003A             		move.b	#2,$3A(a0)
000121FA                            
000121FA                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
000121FA 2268 003C                  		movea.l	$3C(a0),a1
000121FE 7000                       		moveq	#0,d0
00012200 1028 003A                  		move.b	$3A(a0),d0
00012204 9029 003A                  		sub.b	$3A(a1),d0
00012208 6700                       		beq.s	loc_1183E
0001220A 6400                       		bcc.s	loc_117FC
0001220C 4400                       		neg.b	d0
0001220E                            
0001220E                            loc_117FC:
0001220E 323C F7E8                  		move.w	#-$818,d1
00012212 343C FEEC                  		move.w	#-$114,d2
00012216 0C00 0001                  		cmpi.b	#1,d0
0001221A 6700                       		beq.s	loc_11822
0001221C 323C F510                  		move.w	#-$AF0,d1
00012220 343C FF34                  		move.w	#-$CC,d2
00012224 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0001222A 6D00                       		blt.s	loc_11822
0001222C 323C F200                  		move.w	#-$E00,d1
00012230 343C FF60                  		move.w	#-$A0,d2
00012234                            
00012234                            loc_11822:
00012234 3141 0012                  		move.w	d1,$12(a0)
00012238 3142 0010                  		move.w	d2,$10(a0)
0001223C 3028 0008                  		move.w	8(a0),d0
00012240 9068 0030                  		sub.w	$30(a0),d0
00012244 6400                       		bcc.s	loc_11838
00012246 4468 0010                  		neg.w	$10(a0)
0001224A                            
0001224A                            loc_11838:
0001224A 5428 0024                  		addq.b	#2,$24(a0)
0001224E 6000                       		bra.s	Obj5E_SpikeFall
00012250                            ; ===========================================================================
00012250                            
00012250                            loc_1183E:				; XREF: Obj5E_MoveSpike
00012250 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012256 7000                       		moveq	#0,d0
00012258 1029 001A                  		move.b	$1A(a1),d0
0001225C 343C 0028                  		move.w	#$28,d2
00012260 3228 0008                  		move.w	8(a0),d1
00012264 9268 0030                  		sub.w	$30(a0),d1
00012268 6400                       		bcc.s	loc_1185C
0001226A 4442                       		neg.w	d2
0001226C 5440                       		addq.w	#2,d0
0001226E                            
0001226E                            loc_1185C:
0001226E D040                       		add.w	d0,d0
00012270 3228 0034                  		move.w	$34(a0),d1
00012274 D272 0000                  		add.w	(a2,d0.w),d1
00012278 3141 000C                  		move.w	d1,$C(a0)
0001227C D468 0030                  		add.w	$30(a0),d2
00012280 3142 0008                  		move.w	d2,8(a0)
00012284 4268 000E                  		clr.w	$E(a0)
00012288 4268 000A                  		clr.w	$A(a0)
0001228C 4E75                       		rts	
0001228E                            ; ===========================================================================
0001228E                            
0001228E                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
0001228E 4A68 0012                  		tst.w	$12(a0)
00012292 6A00                       		bpl.s	loc_1189A
00012294 6100 BD04                  		bsr.w	ObjectFall
00012298 3028 0034                  		move.w	$34(a0),d0
0001229C 0440 002F                  		subi.w	#$2F,d0
000122A0 B068 000C                  		cmp.w	$C(a0),d0
000122A4 6E00                       		bgt.s	locret_11898
000122A6 6100 BCF2                  		bsr.w	ObjectFall
000122AA                            
000122AA                            locret_11898:
000122AA 4E75                       		rts	
000122AC                            ; ===========================================================================
000122AC                            
000122AC                            loc_1189A:				; XREF: Obj5E_SpikeFall
000122AC 6100 BCEC                  		bsr.w	ObjectFall
000122B0 2268 003C                  		movea.l	$3C(a0),a1
000122B4 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000122BA 7000                       		moveq	#0,d0
000122BC 1029 001A                  		move.b	$1A(a1),d0
000122C0 3228 0008                  		move.w	8(a0),d1
000122C4 9268 0030                  		sub.w	$30(a0),d1
000122C8 6400                       		bcc.s	loc_118BA
000122CA 5440                       		addq.w	#2,d0
000122CC                            
000122CC                            loc_118BA:
000122CC D040                       		add.w	d0,d0
000122CE 3228 0034                  		move.w	$34(a0),d1
000122D2 D272 0000                  		add.w	(a2,d0.w),d1
000122D6 B268 000C                  		cmp.w	$C(a0),d1
000122DA 6E00                       		bgt.s	locret_11938
000122DC 2268 003C                  		movea.l	$3C(a0),a1
000122E0 7202                       		moveq	#2,d1
000122E2 4A68 0010                  		tst.w	$10(a0)
000122E6 6B00                       		bmi.s	Obj5E_Spring
000122E8 7200                       		moveq	#0,d1
000122EA                            
000122EA                            Obj5E_Spring:
000122EA 1341 003A                  		move.b	d1,$3A(a1)
000122EE 1141 003A                  		move.b	d1,$3A(a0)
000122F2 B229 001A                  		cmp.b	$1A(a1),d1
000122F6 6700                       		beq.s	loc_1192C
000122F8 08A9 0003 0022             		bclr	#3,$22(a1)
000122FE 6700                       		beq.s	loc_1192C
00012300 4229 0025                  		clr.b	$25(a1)
00012304 137C 0002 0024             		move.b	#2,$24(a1)
0001230A 45F8 D000                  		lea	($FFFFD000).w,a2
0001230E 3568 0012 0012             		move.w	$12(a0),$12(a2)
00012314 446A 0012                  		neg.w	$12(a2)
00012318 08EA 0001 0022             		bset	#1,$22(a2)
0001231E 08AA 0003 0022             		bclr	#3,$22(a2)
00012324 422A 003C                  		clr.b	$3C(a2)
00012328 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001232E 157C 0002 0024             		move.b	#2,$24(a2)
00012334 303C 00CC                  		move.w	#$CC,d0
00012338 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0001233E                            
0001233E                            loc_1192C:
0001233E 4268 0010                  		clr.w	$10(a0)
00012342 4268 0012                  		clr.w	$12(a0)
00012346 5528 0024                  		subq.b	#2,$24(a0)
0001234A                            
0001234A                            locret_11938:
0001234A 4E75                       		rts	
0001234C                            ; ===========================================================================
0001234C FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012356                            
00012356                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00012386                            		even
00012386                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000123B6                            		even
000123B6                            ; ---------------------------------------------------------------------------
000123B6                            ; Sprite mappings - seesaws (SLZ)
000123B6                            ; ---------------------------------------------------------------------------
000123B6                            Map_obj5E:
000123B6                            	include "_maps\obj5E.asm"
000123B6                            ; ---------------------------------------------------------------------------
000123B6                            ; Sprite mappings - seesaws (SLZ)
000123B6                            ; ---------------------------------------------------------------------------
000123B6 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000123BA 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000123BE 07                         byte_119AC:	dc.b 7
000123BF D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000123C4 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000123C9 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000123CE EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000123D3 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000123D8 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000123DD FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000123E2 04                         byte_119D0:	dc.b 4
000123E3 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000123E8 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000123ED E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000123F2 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000123F8 00                         		even
000123F8 00                         		even
000123F8                            
000123F8                            ; ---------------------------------------------------------------------------
000123F8                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000123F8                            ; ---------------------------------------------------------------------------
000123F8                            Map_obj5Ea:
000123F8                            	include "_maps\obj5Eballs.asm"
000123F8                            ; ---------------------------------------------------------------------------
000123F8                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000123F8                            ; ---------------------------------------------------------------------------
000123F8 0000                       		dc.w byte_119EA-Map_obj5Ea
000123FA 0000                       		dc.w byte_119F0-Map_obj5Ea
000123FC 01                         byte_119EA:	dc.b 1
000123FD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012402 01                         byte_119F0:	dc.b 1
00012403 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00012408                            		even
00012408                            		even
00012408                            
00012408                            ; ===========================================================================
00012408                            ; ---------------------------------------------------------------------------
00012408                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00012408                            ; ---------------------------------------------------------------------------
00012408                            
00012408                            Obj5F:					; XREF: Obj_Index
00012408 7000                       		moveq	#0,d0
0001240A 1028 0024                  		move.b	$24(a0),d0
0001240E 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012412 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00012416                            ; ===========================================================================
00012416 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00012418 0000                       		dc.w Obj5F_Action-Obj5F_Index
0001241A 0000                       		dc.w Obj5F_Display-Obj5F_Index
0001241C 0000                       		dc.w Obj5F_End-Obj5F_Index
0001241E                            ; ===========================================================================
0001241E                            
0001241E                            Obj5F_Main:				; XREF: Obj5F_Index
0001241E 5428 0024                  		addq.b	#2,$24(a0)
00012422 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
0001242A 317C 0400 0002             		move.w	#$400,2(a0)
00012430 0028 0004 0001             		ori.b	#4,1(a0)
00012436 117C 0003 0018             		move.b	#3,$18(a0)
0001243C 117C 000C 0019             		move.b	#$C,$19(a0)
00012442 1028 0028                  		move.b	$28(a0),d0
00012446 6700                       		beq.s	loc_11A3C
00012448 1140 0024                  		move.b	d0,$24(a0)
0001244C 4E75                       		rts	
0001244E                            ; ===========================================================================
0001244E                            
0001244E                            loc_11A3C:
0001244E 117C 009A 0020             		move.b	#$9A,$20(a0)
00012454 0868 0000 0022             		bchg	#0,$22(a0)
0001245A                            
0001245A                            Obj5F_Action:				; XREF: Obj5F_Index
0001245A 7000                       		moveq	#0,d0
0001245C 1028 0025                  		move.b	$25(a0),d0
00012460 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012464 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012468 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001246E 6100 8C20                  		bsr.w	AnimateSprite
00012472 6000 DC66                  		bra.w	MarkObjGone
00012476                            ; ===========================================================================
00012476 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012478 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
0001247A 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
0001247C                            ; ===========================================================================
0001247C                            
0001247C                            Obj5F_Walk:				; XREF: Obj5F_Index2
0001247C 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012480 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012484 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012486 5428 0025                  		addq.b	#2,$25(a0)
0001248A 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012490 317C 0010 0010             		move.w	#$10,$10(a0)
00012496 117C 0001 001C             		move.b	#1,$1C(a0)
0001249C 0868 0000 0022             		bchg	#0,$22(a0)
000124A2 6700                       		beq.s	locret_11A96
000124A4 4468 0010                  		neg.w	$10(a0)		; change direction
000124A8                            
000124A8                            locret_11A96:
000124A8 4E75                       		rts	
000124AA                            ; ===========================================================================
000124AA                            
000124AA                            Obj5F_Wait:				; XREF: Obj5F_Index2
000124AA 6100 0000                  		bsr.w	Obj5F_ChkSonic
000124AE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000124B2 6B00                       		bmi.s	loc_11AA8
000124B4 6100 BB56                  		bsr.w	SpeedToPos
000124B8 4E75                       		rts	
000124BA                            ; ===========================================================================
000124BA                            
000124BA                            loc_11AA8:
000124BA 5528 0025                  		subq.b	#2,$25(a0)
000124BE 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000124C4 4268 0010                  		clr.w	$10(a0)		; stop walking
000124C8 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000124CE 4E75                       		rts	
000124D0                            ; ===========================================================================
000124D0                            
000124D0                            Obj5F_Explode:				; XREF: Obj5F_Index2
000124D0 5368 0030                  		subq.w	#1,$30(a0)
000124D4 6A00                       		bpl.s	locret_11AD0
000124D6 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000124DA 117C 0000 0024             		move.b	#0,$24(a0)
000124E0                            
000124E0                            locret_11AD0:
000124E0 4E75                       		rts	
000124E2                            ; ===========================================================================
000124E2                            
000124E2                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000124E2 3038 D008                  		move.w	($FFFFD008).w,d0
000124E6 9068 0008                  		sub.w	8(a0),d0
000124EA 6400                       		bcc.s	loc_11ADE
000124EC 4440                       		neg.w	d0
000124EE                            
000124EE                            loc_11ADE:
000124EE 0C40 0060                  		cmpi.w	#$60,d0
000124F2 6400                       		bcc.s	locret_11B5E
000124F4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000124F8 9068 000C                  		sub.w	$C(a0),d0
000124FC 6400                       		bcc.s	Obj5F_MakeFuse
000124FE 4440                       		neg.w	d0
00012500                            
00012500                            Obj5F_MakeFuse:
00012500 0C40 0060                  		cmpi.w	#$60,d0
00012504 6400                       		bcc.s	locret_11B5E
00012506 4A78 FE08                  		tst.w	($FFFFFE08).w
0001250A 6600                       		bne.s	locret_11B5E
0001250C 117C 0004 0025             		move.b	#4,$25(a0)
00012512 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012518 4268 0010                  		clr.w	$10(a0)
0001251C 117C 0002 001C             		move.b	#2,$1C(a0)
00012522 6100 BFAA                  		bsr.w	SingleObjLoad2
00012526 6600                       		bne.s	locret_11B5E
00012528 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001252C 3368 0008 0008             		move.w	8(a0),8(a1)
00012532 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012538 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001253E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012544 137C 0004 0028             		move.b	#4,$28(a1)
0001254A 137C 0003 001C             		move.b	#3,$1C(a1)
00012550 337C 0010 0012             		move.w	#$10,$12(a1)
00012556 0828 0001 0022             		btst	#1,$22(a0)
0001255C 6700                       		beq.s	loc_11B54
0001255E 4469 0012                  		neg.w	$12(a1)
00012562                            
00012562                            loc_11B54:
00012562 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012568 2348 003C                  		move.l	a0,$3C(a1)
0001256C                            
0001256C                            locret_11B5E:
0001256C 4E75                       		rts	
0001256E                            ; ===========================================================================
0001256E                            
0001256E                            Obj5F_Display:				; XREF: Obj5F_Index
0001256E 6100                       		bsr.s	loc_11B70
00012570 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012576 6100 8B18                  		bsr.w	AnimateSprite
0001257A 6000 DB5E                  		bra.w	MarkObjGone
0001257E                            ; ===========================================================================
0001257E                            
0001257E                            loc_11B70:
0001257E 5368 0030                  		subq.w	#1,$30(a0)
00012582 6B00                       		bmi.s	loc_11B7C
00012584 6100 BA86                  		bsr.w	SpeedToPos
00012588 4E75                       		rts	
0001258A                            ; ===========================================================================
0001258A                            
0001258A                            loc_11B7C:
0001258A 4268 0030                  		clr.w	$30(a0)
0001258E 4228 0024                  		clr.b	$24(a0)
00012592 3168 0034 000C             		move.w	$34(a0),$C(a0)
00012598 7203                       		moveq	#3,d1
0001259A 2248                       		movea.l	a0,a1
0001259C 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000125A2 6000                       		bra.s	Obj5F_MakeShrap
000125A4                            ; ===========================================================================
000125A4                            
000125A4                            Obj5F_Loop:
000125A4 6100 BF28                  		bsr.w	SingleObjLoad2
000125A8 6600                       		bne.s	loc_11BCE
000125AA                            
000125AA                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000125AA 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000125AE 3368 0008 0008             		move.w	8(a0),8(a1)
000125B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000125BA 137C 0006 0028             		move.b	#6,$28(a1)
000125C0 137C 0004 001C             		move.b	#4,$1C(a1)
000125C6 335A 0010                  		move.w	(a2)+,$10(a1)
000125CA 335A 0012                  		move.w	(a2)+,$12(a1)
000125CE 137C 0098 0020             		move.b	#$98,$20(a1)
000125D4 08E9 0007 0001             		bset	#7,1(a1)
000125DA                            
000125DA                            loc_11BCE:
000125DA 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000125DE                            
000125DE 117C 0006 0024             		move.b	#6,$24(a0)
000125E4                            
000125E4                            Obj5F_End:				; XREF: Obj5F_Index
000125E4 6100 BA26                  		bsr.w	SpeedToPos
000125E8 0668 0018 0012             		addi.w	#$18,$12(a0)
000125EE 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000125F4 6100 8A9A                  		bsr.w	AnimateSprite
000125F8 4A28 0001                  		tst.b	1(a0)
000125FC 6A00 BA70                  		bpl.w	DeleteObject
00012600 6000 BA30                  		bra.w	DisplaySprite
00012604                            ; ===========================================================================
00012604 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012614                            
00012614                            Ani_obj5F:
00012614                            	include "_anim\obj5F.asm"
00012614                            ; ---------------------------------------------------------------------------
00012614                            ; Animation script - Bomb enemy
00012614                            ; ---------------------------------------------------------------------------
00012614 0000                       		dc.w byte_11C12-Ani_obj5F
00012616 0000                       		dc.w byte_11C16-Ani_obj5F
00012618 0000                       		dc.w byte_11C1C-Ani_obj5F
0001261A 0000                       		dc.w byte_11C20-Ani_obj5F
0001261C 0000                       		dc.w byte_11C24-Ani_obj5F
0001261E 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012622 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012628 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001262C 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012630 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012634                            		even
00012634                            		even
00012634                            
00012634                            ; ---------------------------------------------------------------------------
00012634                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012634                            ; ---------------------------------------------------------------------------
00012634                            Map_obj5F:
00012634                            	include "_maps\obj5F.asm"
00012634                            ; ---------------------------------------------------------------------------
00012634                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012634                            ; ---------------------------------------------------------------------------
00012634 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012638 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001263C 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012640 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012644 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012648 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001264C 03                         byte_11C40:	dc.b 3
0001264D F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012652 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012657 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001265C 03                         byte_11C50:	dc.b 3
0001265D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012662 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012667 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001266C 03                         byte_11C60:	dc.b 3
0001266D F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012672 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012677 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001267C 03                         byte_11C70:	dc.b 3
0001267D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012682 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012687 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001268C 03                         byte_11C80:	dc.b 3
0001268D F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012692 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00012697 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001269C 03                         byte_11C90:	dc.b 3
0001269D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000126A2 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000126A7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000126AC 02                         byte_11CA0:	dc.b 2
000126AD F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000126B2 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000126B7 02                         byte_11CAB:	dc.b 2
000126B8 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000126BD 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000126C2 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000126C3 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000126C8 01                         byte_11CBC:	dc.b 1			; fuse
000126C9 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000126CE 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000126CF FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000126D4 01                         byte_11CC8:	dc.b 1			; fireball
000126D5 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000126DA                            		even
000126DA                            		even
000126DA                            
000126DA                            ; ===========================================================================
000126DA                            ; ---------------------------------------------------------------------------
000126DA                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000126DA                            ; ---------------------------------------------------------------------------
000126DA                            
000126DA                            Obj60:					; XREF: Obj_Index
000126DA 7000                       		moveq	#0,d0
000126DC 1028 0024                  		move.b	$24(a0),d0
000126E0 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000126E4 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000126E8                            ; ===========================================================================
000126E8 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000126EA 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000126EC 0000                       		dc.w Obj60_Display-Obj60_Index
000126EE 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000126F0 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000126F2                            ; ===========================================================================
000126F2                            
000126F2                            Obj60_Main:				; XREF: Obj60_Index
000126F2 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000126FA 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012700 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012706 6700                       		beq.s	loc_11D02
00012708 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001270E                            
0001270E                            loc_11D02:
0001270E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012714 6600                       		bne.s	loc_11D10
00012716 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001271C                            
0001271C                            loc_11D10:
0001271C 0028 0004 0001             		ori.b	#4,1(a0)
00012722 117C 0004 0018             		move.b	#4,$18(a0)
00012728 117C 000B 0020             		move.b	#$B,$20(a0)
0001272E 117C 000C 0019             		move.b	#$C,$19(a0)
00012734 7400                       		moveq	#0,d2
00012736 45E8 0037                  		lea	$37(a0),a2
0001273A 264A                       		movea.l	a2,a3
0001273C 524A                       		addq.w	#1,a2
0001273E 7203                       		moveq	#3,d1
00012740                            
00012740                            Obj60_MakeOrbs:
00012740 6100 BD8C                  		bsr.w	SingleObjLoad2
00012744 6600                       		bne.s	loc_11D90
00012746 5213                       		addq.b	#1,(a3)
00012748 3A09                       		move.w	a1,d5
0001274A 0445 D000                  		subi.w	#-$3000,d5
0001274E EC4D                       		lsr.w	#6,d5
00012750 0245 007F                  		andi.w	#$7F,d5
00012754 14C5                       		move.b	d5,(a2)+
00012756 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012758 137C 0006 0024             		move.b	#6,$24(a1)
0001275E 2368 0004 0004             		move.l	4(a0),4(a1)
00012764 3368 0002 0002             		move.w	2(a0),2(a1)
0001276A 0029 0004 0001             		ori.b	#4,1(a1)
00012770 137C 0004 0018             		move.b	#4,$18(a1)
00012776 137C 0008 0019             		move.b	#8,$19(a1)
0001277C 137C 0003 001A             		move.b	#3,$1A(a1)
00012782 137C 0098 0020             		move.b	#$98,$20(a1)
00012788 1342 0026                  		move.b	d2,$26(a1)
0001278C 0602 0040                  		addi.b	#$40,d2
00012790 2348 003C                  		move.l	a0,$3C(a1)
00012794 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00012798                            
00012798                            loc_11D90:
00012798 7001                       		moveq	#1,d0
0001279A 0828 0000 0022             		btst	#0,$22(a0)
000127A0 6700                       		beq.s	Obj60_Move
000127A2 4440                       		neg.w	d0
000127A4                            
000127A4                            Obj60_Move:
000127A4 1140 0036                  		move.b	d0,$36(a0)
000127A8 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000127AE 5428 0024                  		addq.b	#2,$24(a0)
000127B2 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000127B8 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000127BE 6700                       		beq.s	locret_11DBC	; if not, branch
000127C0 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000127C4                            
000127C4                            locret_11DBC:
000127C4 4E75                       		rts	
000127C6                            ; ===========================================================================
000127C6                            
000127C6                            Obj60_ChkSonic:				; XREF: Obj60_Index
000127C6 3038 D008                  		move.w	($FFFFD008).w,d0
000127CA 9068 0008                  		sub.w	8(a0),d0
000127CE 6400                       		bcc.s	loc_11DCA
000127D0 4440                       		neg.w	d0
000127D2                            
000127D2                            loc_11DCA:
000127D2 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000127D6 6400                       		bcc.s	Obj60_Animate	; if not, branch
000127D8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000127DC 9068 000C                  		sub.w	$C(a0),d0
000127E0 6400                       		bcc.s	loc_11DDC
000127E2 4440                       		neg.w	d0
000127E4                            
000127E4                            loc_11DDC:
000127E4 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000127E8 6400                       		bcc.s	Obj60_Animate	; if not, branch
000127EA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000127EE 6600                       		bne.s	Obj60_Animate	; if yes, branch
000127F0 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000127F6                            
000127F6                            Obj60_Animate:
000127F6 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000127FC 6100 8892                  		bsr.w	AnimateSprite
00012800 6000 0000                  		bra.w	Obj60_ChkDel
00012804                            ; ===========================================================================
00012804                            
00012804                            Obj60_Display:				; XREF: Obj60_Index
00012804 6100 B806                  		bsr.w	SpeedToPos
00012808                            
00012808                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012808 3028 0008                  		move.w	8(a0),d0
0001280C 0240 FF80                  		andi.w	#$FF80,d0
00012810 3238 F700                  		move.w	($FFFFF700).w,d1
00012814 0441 0080                  		subi.w	#$80,d1
00012818 0241 FF80                  		andi.w	#$FF80,d1
0001281C 9041                       		sub.w	d1,d0
0001281E 0C40 0280                  		cmpi.w	#$280,d0
00012822 6200 0000                  		bhi.w	Obj60_ChkGone
00012826 6000 B80A                  		bra.w	DisplaySprite
0001282A                            ; ===========================================================================
0001282A                            
0001282A                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
0001282A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001282E 7000                       		moveq	#0,d0
00012830 1028 0023                  		move.b	$23(a0),d0
00012834 6700                       		beq.s	loc_11E34
00012836 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001283C                            
0001283C                            loc_11E34:
0001283C 45E8 0037                  		lea	$37(a0),a2
00012840 7400                       		moveq	#0,d2
00012842 141A                       		move.b	(a2)+,d2
00012844 5342                       		subq.w	#1,d2
00012846 6500                       		bcs.s	Obj60_Delete
00012848                            
00012848                            loc_11E40:
00012848 7000                       		moveq	#0,d0
0001284A 101A                       		move.b	(a2)+,d0
0001284C ED48                       		lsl.w	#6,d0
0001284E 0680 00FF D000             		addi.l	#$FFD000,d0
00012854 2240                       		movea.l	d0,a1
00012856 6100 B818                  		bsr.w	DeleteObject2
0001285A 51CA FFEC                  		dbf	d2,loc_11E40
0001285E                            
0001285E                            Obj60_Delete:
0001285E 6000 B80E                  		bra.w	DeleteObject
00012862                            ; ===========================================================================
00012862                            
00012862                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012862 2268 003C                  		movea.l	$3C(a0),a1
00012866 0C11 0060                  		cmpi.b	#$60,0(a1)
0001286A 6600 B802                  		bne.w	DeleteObject
0001286E 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012874 6600                       		bne.s	Obj60_Circle
00012876 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
0001287C 6600                       		bne.s	Obj60_Circle
0001287E 5428 0024                  		addq.b	#2,$24(a0)
00012882 5329 0037                  		subq.b	#1,$37(a1)
00012886 6600                       		bne.s	Obj60_FireOrb
00012888 5429 0024                  		addq.b	#2,$24(a1)
0001288C                            
0001288C                            Obj60_FireOrb:
0001288C 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012892 0829 0000 0022             		btst	#0,$22(a1)
00012898 6700                       		beq.s	Obj60_Display2
0001289A 4468 0010                  		neg.w	$10(a0)
0001289E                            
0001289E                            Obj60_Display2:
0001289E 6000 B792                  		bra.w	DisplaySprite
000128A2                            ; ===========================================================================
000128A2                            
000128A2                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000128A2 1028 0026                  		move.b	$26(a0),d0
000128A6 4EB9 0000 2D6C             		jsr	(CalcSine).l
000128AC E841                       		asr.w	#4,d1
000128AE D269 0008                  		add.w	8(a1),d1
000128B2 3141 0008                  		move.w	d1,8(a0)
000128B6 E840                       		asr.w	#4,d0
000128B8 D069 000C                  		add.w	$C(a1),d0
000128BC 3140 000C                  		move.w	d0,$C(a0)
000128C0 1029 0036                  		move.b	$36(a1),d0
000128C4 D128 0026                  		add.b	d0,$26(a0)
000128C8 6000 B768                  		bra.w	DisplaySprite
000128CC                            ; ===========================================================================
000128CC                            
000128CC                            Obj60_ChkDel2:				; XREF: Obj60_Index
000128CC 6100 B73E                  		bsr.w	SpeedToPos
000128D0 4A28 0001                  		tst.b	1(a0)
000128D4 6A00 B798                  		bpl.w	DeleteObject
000128D8 6000 B758                  		bra.w	DisplaySprite
000128DC                            ; ===========================================================================
000128DC                            Ani_obj60:
000128DC                            	include "_anim\obj60.asm"
000128DC                            ; ---------------------------------------------------------------------------
000128DC                            ; Animation script - Orbinaut enemy
000128DC                            ; ---------------------------------------------------------------------------
000128DC 0000                       		dc.w byte_11EDA-Ani_obj60
000128DE 0000                       		dc.w byte_11EDE-Ani_obj60
000128E0 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000128E4 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000128EA                            		even
000128EA                            		even
000128EA                            
000128EA                            ; ---------------------------------------------------------------------------
000128EA                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000128EA                            ; ---------------------------------------------------------------------------
000128EA                            Map_obj60:
000128EA                            	include "_maps\obj60.asm"
000128EA                            ; ---------------------------------------------------------------------------
000128EA                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000128EA                            ; ---------------------------------------------------------------------------
000128EA 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000128EE 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000128F2 01                         byte_11EEC:	dc.b 1
000128F3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000128F8 01                         byte_11EF2:	dc.b 1
000128F9 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000128FE 01                         byte_11EF8:	dc.b 1
000128FF F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012904 01                         byte_11EFE:	dc.b 1
00012905 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001290A                            		even
0001290A                            		even
0001290A                            
0001290A                            ; ===========================================================================
0001290A                            ; ---------------------------------------------------------------------------
0001290A                            ; Object 16 - harpoon (LZ)
0001290A                            ; ---------------------------------------------------------------------------
0001290A                            
0001290A                            Obj16:					; XREF: Obj_Index
0001290A 7000                       		moveq	#0,d0
0001290C 1028 0024                  		move.b	$24(a0),d0
00012910 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012914 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012918                            ; ===========================================================================
00012918 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
0001291A 0000                       		dc.w Obj16_Move-Obj16_Index
0001291C 0000                       		dc.w Obj16_Wait-Obj16_Index
0001291E                            ; ===========================================================================
0001291E                            
0001291E                            Obj16_Main:				; XREF: Obj16_Index
0001291E 5428 0024                  		addq.b	#2,$24(a0)
00012922 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
0001292A 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012930 0028 0004 0001             		ori.b	#4,1(a0)
00012936 117C 0004 0018             		move.b	#4,$18(a0)
0001293C 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012942 117C 0014 0019             		move.b	#$14,$19(a0)
00012948 317C 003C 0030             		move.w	#60,$30(a0)
0001294E                            
0001294E                            Obj16_Move:				; XREF: Obj16_Index
0001294E 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012954 6100 873A                  		bsr.w	AnimateSprite
00012958 7000                       		moveq	#0,d0
0001295A 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0001295E 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012964 6000 D774                  		bra.w	MarkObjGone
00012968                            ; ===========================================================================
00012968 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001296E                            ; ===========================================================================
0001296E                            
0001296E                            Obj16_Wait:				; XREF: Obj16_Index
0001296E 5368 0030                  		subq.w	#1,$30(a0)
00012972 6A00                       		bpl.s	Obj16_ChkDel
00012974 317C 003C 0030             		move.w	#60,$30(a0)
0001297A 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
0001297E 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012984                            
00012984                            Obj16_ChkDel:
00012984 6000 D754                  		bra.w	MarkObjGone
00012988                            ; ===========================================================================
00012988                            Ani_obj16:
00012988                            	include "_anim\obj16.asm"
00012988                            ; ---------------------------------------------------------------------------
00012988                            ; Animation script - harpoon (LZ)
00012988                            ; ---------------------------------------------------------------------------
00012988 0000                       		dc.w byte_11F8A-Ani_obj16
0001298A 0000                       		dc.w byte_11F8E-Ani_obj16
0001298C 0000                       		dc.w byte_11F92-Ani_obj16
0001298E 0000                       		dc.w byte_11F96-Ani_obj16
00012990 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012994 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012998 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
0001299C 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000129A0                            		even
000129A0                            		even
000129A0                            
000129A0                            ; ---------------------------------------------------------------------------
000129A0                            ; Sprite mappings - harpoon (LZ)
000129A0                            ; ---------------------------------------------------------------------------
000129A0                            Map_obj16:
000129A0                            	include "_maps\obj16.asm"
000129A0                            ; ---------------------------------------------------------------------------
000129A0                            ; Sprite mappings - harpoon (LZ)
000129A0                            ; ---------------------------------------------------------------------------
000129A0 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000129A4 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000129A8 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000129AC 01                         byte_11FA6:	dc.b 1
000129AD FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000129B2 01                         byte_11FAC:	dc.b 1
000129B3 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000129B8 02                         byte_11FB2:	dc.b 2
000129B9 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000129BE FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000129C3 01                         byte_11FBD:	dc.b 1
000129C4 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000129C9 01                         byte_11FC3:	dc.b 1
000129CA E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000129CF 02                         byte_11FC9:	dc.b 2
000129D0 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000129D5 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000129DA                            		even
000129DA                            		even
000129DA                            
000129DA                            ; ===========================================================================
000129DA                            ; ---------------------------------------------------------------------------
000129DA                            ; Object 61 - blocks (LZ)
000129DA                            ; ---------------------------------------------------------------------------
000129DA                            
000129DA                            Obj61:					; XREF: Obj_Index
000129DA 7000                       		moveq	#0,d0
000129DC 1028 0024                  		move.b	$24(a0),d0
000129E0 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000129E4 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000129E8                            ; ===========================================================================
000129E8 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000129EA 0000                       		dc.w Obj61_Action-Obj61_Index
000129EC                            
000129EC 1010                       Obj61_Var:	dc.b $10, $10		; width, height
000129EE 200C                       		dc.b $20, $C
000129F0 1010                       		dc.b $10, $10
000129F2 1010                       		dc.b $10, $10
000129F4                            ; ===========================================================================
000129F4                            
000129F4                            Obj61_Main:				; XREF: Obj61_Index
000129F4 5428 0024                  		addq.b	#2,$24(a0)
000129F8 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012A00 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012A06 117C 0004 0001             		move.b	#4,1(a0)
00012A0C 117C 0003 0018             		move.b	#3,$18(a0)
00012A12 7000                       		moveq	#0,d0
00012A14 1028 0028                  		move.b	$28(a0),d0
00012A18 E648                       		lsr.w	#3,d0
00012A1A 0240 000E                  		andi.w	#$E,d0
00012A1E 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012A22 115A 0019                  		move.b	(a2)+,$19(a0)
00012A26 1152 0016                  		move.b	(a2),$16(a0)
00012A2A E248                       		lsr.w	#1,d0
00012A2C 1140 001A                  		move.b	d0,$1A(a0)
00012A30 3168 0008 0034             		move.w	8(a0),$34(a0)
00012A36 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012A3C 1028 0028                  		move.b	$28(a0),d0
00012A40 0200 000F                  		andi.b	#$F,d0
00012A44 6700                       		beq.s	Obj61_Action
00012A46 0C00 0007                  		cmpi.b	#7,d0
00012A4A 6700                       		beq.s	Obj61_Action
00012A4C 117C 0001 0038             		move.b	#1,$38(a0)
00012A52                            
00012A52                            Obj61_Action:				; XREF: Obj61_Index
00012A52 3F28 0008                  		move.w	8(a0),-(sp)
00012A56 7000                       		moveq	#0,d0
00012A58 1028 0028                  		move.b	$28(a0),d0
00012A5C 0240 000F                  		andi.w	#$F,d0
00012A60 D040                       		add.w	d0,d0
00012A62 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012A66 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012A6A 381F                       		move.w	(sp)+,d4
00012A6C 4A28 0001                  		tst.b	1(a0)
00012A70 6A00                       		bpl.s	Obj61_ChkDel
00012A72 7200                       		moveq	#0,d1
00012A74 1228 0019                  		move.b	$19(a0),d1
00012A78 0641 000B                  		addi.w	#$B,d1
00012A7C 7400                       		moveq	#0,d2
00012A7E 1428 0016                  		move.b	$16(a0),d2
00012A82 3602                       		move.w	d2,d3
00012A84 5243                       		addq.w	#1,d3
00012A86 6100 D97A                  		bsr.w	SolidObject
00012A8A 1144 003F                  		move.b	d4,$3F(a0)
00012A8E 6100 0000                  		bsr.w	loc_12180
00012A92                            
00012A92                            Obj61_ChkDel:
00012A92 3028 0034                  		move.w	$34(a0),d0
00012A96 0240 FF80                  		andi.w	#$FF80,d0
00012A9A 3238 F700                  		move.w	($FFFFF700).w,d1
00012A9E 0441 0080                  		subi.w	#$80,d1
00012AA2 0241 FF80                  		andi.w	#$FF80,d1
00012AA6 9041                       		sub.w	d1,d0
00012AA8 0C40 0280                  		cmpi.w	#$280,d0
00012AAC 6200 B5C0                  		bhi.w	DeleteObject
00012AB0 6000 B580                  		bra.w	DisplaySprite
00012AB4                            ; ===========================================================================
00012AB4 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012AB8 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012ABC 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012AC0 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012AC4                            ; ===========================================================================
00012AC4                            
00012AC4                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012AC4 4E75                       		rts	
00012AC6                            ; ===========================================================================
00012AC6                            
00012AC6                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012AC6 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012ACA 6600                       		bne.s	loc_120D6	; if yes, branch
00012ACC 0828 0003 0022             		btst	#3,$22(a0)
00012AD2 6700                       		beq.s	locret_120D4
00012AD4 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012ADA                            
00012ADA                            locret_120D4:
00012ADA 4E75                       		rts	
00012ADC                            ; ===========================================================================
00012ADC                            
00012ADC                            loc_120D6:
00012ADC 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012AE0 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012AE2 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012AE6 4228 0038                  		clr.b	$38(a0)
00012AEA 4E75                       		rts	
00012AEC                            ; ===========================================================================
00012AEC                            
00012AEC                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012AEC 6100 B51E                  		bsr.w	SpeedToPos
00012AF0 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012AF4 6100 0000                  		bsr.w	ObjHitFloor
00012AF8 4A41                       		tst.w	d1
00012AFA 6A00 0000                  		bpl.w	locret_12106
00012AFE 5241                       		addq.w	#1,d1
00012B00 D368 000C                  		add.w	d1,$C(a0)
00012B04 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012B08 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012B0C                            
00012B0C                            locret_12106:
00012B0C 4E75                       		rts	
00012B0E                            ; ===========================================================================
00012B0E                            
00012B0E                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012B0E 6100 B4FC                  		bsr.w	SpeedToPos
00012B12 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012B16 6100 0000                  		bsr.w	ObjHitCeiling
00012B1A 4A41                       		tst.w	d1
00012B1C 6A00 0000                  		bpl.w	locret_12126
00012B20 9368 000C                  		sub.w	d1,$C(a0)
00012B24 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012B28 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012B2C                            
00012B2C                            locret_12126:
00012B2C 4E75                       		rts	
00012B2E                            ; ===========================================================================
00012B2E                            
00012B2E                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012B2E 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012B34 6600                       		bne.s	locret_12138	; if not, branch
00012B36 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012B3A 4228 0038                  		clr.b	$38(a0)
00012B3E                            
00012B3E                            locret_12138:
00012B3E 4E75                       		rts	
00012B40                            ; ===========================================================================
00012B40                            
00012B40                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012B40 3038 F646                  		move.w	($FFFFF646).w,d0
00012B44 9068 000C                  		sub.w	$C(a0),d0
00012B48 6700                       		beq.s	locret_1217E
00012B4A 6400                       		bcc.s	loc_12162
00012B4C 0C40 FFFE                  		cmpi.w	#-2,d0
00012B50 6C00                       		bge.s	loc_1214E
00012B52 70FE                       		moveq	#-2,d0
00012B54                            
00012B54                            loc_1214E:
00012B54 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012B58 6100 0000                  		bsr.w	ObjHitCeiling
00012B5C 4A41                       		tst.w	d1
00012B5E 6A00 0000                  		bpl.w	locret_12160
00012B62 9368 000C                  		sub.w	d1,$C(a0)
00012B66                            
00012B66                            locret_12160:
00012B66 4E75                       		rts	
00012B68                            ; ===========================================================================
00012B68                            
00012B68                            loc_12162:				; XREF: Obj61_Type07
00012B68 0C40 0002                  		cmpi.w	#2,d0
00012B6C 6F00                       		ble.s	loc_1216A
00012B6E 7002                       		moveq	#2,d0
00012B70                            
00012B70                            loc_1216A:
00012B70 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012B74 6100 0000                  		bsr.w	ObjHitFloor
00012B78 4A41                       		tst.w	d1
00012B7A 6A00 0000                  		bpl.w	locret_1217E
00012B7E 5241                       		addq.w	#1,d1
00012B80 D368 000C                  		add.w	d1,$C(a0)
00012B84                            
00012B84                            locret_1217E:
00012B84 4E75                       		rts	
00012B86                            ; ===========================================================================
00012B86                            
00012B86                            loc_12180:				; XREF: Obj61_Action
00012B86 4A28 0038                  		tst.b	$38(a0)
00012B8A 6700                       		beq.s	locret_121C0
00012B8C 0828 0003 0022             		btst	#3,$22(a0)
00012B92 6600                       		bne.s	loc_1219A
00012B94 4A28 003E                  		tst.b	$3E(a0)
00012B98 6700                       		beq.s	locret_121C0
00012B9A 5928 003E                  		subq.b	#4,$3E(a0)
00012B9E 6000                       		bra.s	loc_121A6
00012BA0                            ; ===========================================================================
00012BA0                            
00012BA0                            loc_1219A:
00012BA0 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012BA6 6700                       		beq.s	locret_121C0
00012BA8 5828 003E                  		addq.b	#4,$3E(a0)
00012BAC                            
00012BAC                            loc_121A6:
00012BAC 1028 003E                  		move.b	$3E(a0),d0
00012BB0 4EB9 0000 2D6C             		jsr	(CalcSine).l
00012BB6 323C 0400                  		move.w	#$400,d1
00012BBA C1C1                       		muls.w	d1,d0
00012BBC 4840                       		swap	d0
00012BBE D068 0030                  		add.w	$30(a0),d0
00012BC2 3140 000C                  		move.w	d0,$C(a0)
00012BC6                            
00012BC6                            locret_121C0:
00012BC6 4E75                       		rts	
00012BC8                            ; ===========================================================================
00012BC8                            ; ---------------------------------------------------------------------------
00012BC8                            ; Sprite mappings - blocks (LZ)
00012BC8                            ; ---------------------------------------------------------------------------
00012BC8                            Map_obj61:
00012BC8                            	include "_maps\obj61.asm"
00012BC8                            ; ---------------------------------------------------------------------------
00012BC8                            ; Sprite mappings - blocks (LZ)
00012BC8                            ; ---------------------------------------------------------------------------
00012BC8 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012BCC 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012BD0 01                         byte_121CA:	dc.b 1
00012BD1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012BD6 02                         byte_121D0:	dc.b 2
00012BD7 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012BDC F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012BE1 01                         byte_121DB:	dc.b 1
00012BE2 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012BE7 01                         byte_121E1:	dc.b 1
00012BE8 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012BEE 00                         		even
00012BEE 00                         		even
00012BEE                            
00012BEE                            ; ===========================================================================
00012BEE                            ; ---------------------------------------------------------------------------
00012BEE                            ; Object 62 - gargoyle head (LZ)
00012BEE                            ; ---------------------------------------------------------------------------
00012BEE                            
00012BEE                            Obj62:					; XREF: Obj_Index
00012BEE 7000                       		moveq	#0,d0
00012BF0 1028 0024                  		move.b	$24(a0),d0
00012BF4 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012BF8 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012BFC 6000 D4DC                  		bra.w	MarkObjGone
00012C00                            ; ===========================================================================
00012C00 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012C02 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012C04 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012C06 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012C08                            
00012C08 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012C10                            ; ===========================================================================
00012C10                            
00012C10                            Obj62_Main:				; XREF: Obj62_Index
00012C10 5428 0024                  		addq.b	#2,$24(a0)
00012C14 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012C1C 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012C22 0028 0004 0001             		ori.b	#4,1(a0)
00012C28 117C 0003 0018             		move.b	#3,$18(a0)
00012C2E 117C 0010 0019             		move.b	#$10,$19(a0)
00012C34 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C38 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012C3C 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012C42 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012C48 0228 000F 0028             		andi.b	#$F,$28(a0)
00012C4E                            
00012C4E                            Obj62_MakeFire:				; XREF: Obj62_Index
00012C4E 5328 001E                  		subq.b	#1,$1E(a0)
00012C52 6600                       		bne.s	Obj62_NoFire
00012C54 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012C5A 6100 B650                  		bsr.w	ChkObjOnScreen
00012C5E 6600                       		bne.s	Obj62_NoFire
00012C60 6100 B856                  		bsr.w	SingleObjLoad
00012C64 6600                       		bne.s	Obj62_NoFire
00012C66 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012C6A 5829 0024                  		addq.b	#4,$24(a1)
00012C6E 3368 0008 0008             		move.w	8(a0),8(a1)
00012C74 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012C7A 1368 0001 0001             		move.b	1(a0),1(a1)
00012C80 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012C86                            
00012C86                            Obj62_NoFire:
00012C86 4E75                       		rts	
00012C88                            ; ===========================================================================
00012C88                            
00012C88                            Obj62_FireBall:				; XREF: Obj62_Index
00012C88 5428 0024                  		addq.b	#2,$24(a0)
00012C8C 117C 0008 0016             		move.b	#8,$16(a0)
00012C92 117C 0008 0017             		move.b	#8,$17(a0)
00012C98 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012CA0 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012CA6 0028 0004 0001             		ori.b	#4,1(a0)
00012CAC 117C 0004 0018             		move.b	#4,$18(a0)
00012CB2 117C 0098 0020             		move.b	#$98,$20(a0)
00012CB8 117C 0008 0019             		move.b	#8,$19(a0)
00012CBE 117C 0002 001A             		move.b	#2,$1A(a0)
00012CC4 5068 000C                  		addq.w	#8,$C(a0)
00012CC8 317C 0200 0010             		move.w	#$200,$10(a0)
00012CCE 0828 0000 0022             		btst	#0,$22(a0)
00012CD4 6600                       		bne.s	Obj62_Sound
00012CD6 4468 0010                  		neg.w	$10(a0)
00012CDA                            
00012CDA                            Obj62_Sound:
00012CDA 303C 00AE                  		move.w	#$AE,d0
00012CDE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012CE4                            
00012CE4                            Obj62_AniFire:				; XREF: Obj62_Index
00012CE4 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012CE8 0200 0007                  		andi.b	#7,d0
00012CEC 6600                       		bne.s	Obj62_StopFire
00012CEE 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012CF4                            
00012CF4                            Obj62_StopFire:
00012CF4 6100 B316                  		bsr.w	SpeedToPos
00012CF8 0828 0000 0022             		btst	#0,$22(a0)
00012CFE 6600                       		bne.s	Obj62_StopFire2
00012D00 76F8                       		moveq	#-8,d3
00012D02 6100 0000                  		bsr.w	ObjHitWallLeft
00012D06 4A41                       		tst.w	d1
00012D08 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012D0C 4E75                       		rts	
00012D0E                            ; ===========================================================================
00012D0E                            
00012D0E                            Obj62_StopFire2:
00012D0E 7608                       		moveq	#8,d3
00012D10 6100 0000                  		bsr.w	ObjHitWallRight
00012D14 4A41                       		tst.w	d1
00012D16 6B00 B356                  		bmi.w	DeleteObject
00012D1A 4E75                       		rts	
00012D1C                            ; ===========================================================================
00012D1C                            ; ---------------------------------------------------------------------------
00012D1C                            ; Sprite mappings - gargoyle head (LZ)
00012D1C                            ; ---------------------------------------------------------------------------
00012D1C                            Map_obj62:
00012D1C                            	include "_maps\obj62.asm"
00012D1C                            ; ---------------------------------------------------------------------------
00012D1C                            ; Sprite mappings - gargoyle head (LZ)
00012D1C                            ; ---------------------------------------------------------------------------
00012D1C 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012D20 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012D24 03                         byte_12320:	dc.b 3
00012D25 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012D2A F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012D2F 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012D34 01                         byte_12330:	dc.b 1
00012D35 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012D3A 01                         byte_12336:	dc.b 1
00012D3B FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012D40                            		even
00012D40                            		even
00012D40                            
00012D40                            ; ===========================================================================
00012D40                            ; ---------------------------------------------------------------------------
00012D40                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012D40                            ; ---------------------------------------------------------------------------
00012D40                            
00012D40                            Obj63:					; XREF: Obj_Index
00012D40 7000                       		moveq	#0,d0
00012D42 1028 0024                  		move.b	$24(a0),d0
00012D46 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012D4A 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012D4E 3028 0030                  		move.w	$30(a0),d0
00012D52 0240 FF80                  		andi.w	#$FF80,d0
00012D56 3238 F700                  		move.w	($FFFFF700).w,d1
00012D5A 0441 0080                  		subi.w	#$80,d1
00012D5E 0241 FF80                  		andi.w	#$FF80,d1
00012D62 9041                       		sub.w	d1,d0
00012D64 0C40 0280                  		cmpi.w	#$280,d0
00012D68 6200                       		bhi.s	loc_1236A
00012D6A                            
00012D6A                            Obj63_Display:				; XREF: loc_1236A
00012D6A 6000 B2C6                  		bra.w	DisplaySprite
00012D6E                            ; ===========================================================================
00012D6E                            
00012D6E                            loc_1236A:				; XREF: Obj63
00012D6E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012D74 6600                       		bne.s	loc_12378
00012D76 0C40 FF80                  		cmpi.w	#-$80,d0
00012D7A 64EE                       		bcc.s	Obj63_Display
00012D7C                            
00012D7C                            loc_12378:
00012D7C 1028 002F                  		move.b	$2F(a0),d0
00012D80 6A00 B2EC                  		bpl.w	DeleteObject
00012D84 0240 007F                  		andi.w	#$7F,d0
00012D88 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012D8C 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012D92 6000 B2DA                  		bra.w	DeleteObject
00012D96                            ; ===========================================================================
00012D96 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012D98 0000                       		dc.w loc_124B2-Obj63_Index
00012D9A 0000                       		dc.w loc_124C2-Obj63_Index
00012D9C 0000                       		dc.w loc_124DE-Obj63_Index
00012D9E                            ; ===========================================================================
00012D9E                            
00012D9E                            Obj63_Main:				; XREF: Obj63_Index
00012D9E 1028 0028                  		move.b	$28(a0),d0
00012DA2 6B00 0000                  		bmi.w	loc_12460
00012DA6 5428 0024                  		addq.b	#2,$24(a0)
00012DAA 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012DB2 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012DB8 0028 0004 0001             		ori.b	#4,1(a0)
00012DBE 117C 0010 0019             		move.b	#$10,$19(a0)
00012DC4 117C 0004 0018             		move.b	#4,$18(a0)
00012DCA 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012DD0 6600                       		bne.s	loc_123E2
00012DD2 5828 0024                  		addq.b	#4,$24(a0)
00012DD6 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012DDC 117C 0001 0018             		move.b	#1,$18(a0)
00012DE2 6000 0000                  		bra.w	loc_124DE
00012DE6                            ; ===========================================================================
00012DE6                            
00012DE6                            loc_123E2:
00012DE6 117C 0004 001A             		move.b	#4,$1A(a0)
00012DEC 7000                       		moveq	#0,d0
00012DEE 1028 0028                  		move.b	$28(a0),d0
00012DF2 3200                       		move.w	d0,d1
00012DF4 E648                       		lsr.w	#3,d0
00012DF6 0240 001E                  		andi.w	#$1E,d0
00012DFA 45FA 0000                  		lea	Obj63_Data(pc),a2
00012DFE D4F2 0000                  		adda.w	(a2,d0.w),a2
00012E02 315A 0038                  		move.w	(a2)+,$38(a0)
00012E06 315A 0030                  		move.w	(a2)+,$30(a0)
00012E0A 214A 003C                  		move.l	a2,$3C(a0)
00012E0E 0241 000F                  		andi.w	#$F,d1
00012E12 E549                       		lsl.w	#2,d1
00012E14 1141 0038                  		move.b	d1,$38(a0)
00012E18 117C 0004 003A             		move.b	#4,$3A(a0)
00012E1E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012E22 6700                       		beq.s	loc_1244C
00012E24 117C 0001 003B             		move.b	#1,$3B(a0)
00012E2A 4428 003A                  		neg.b	$3A(a0)
00012E2E 7200                       		moveq	#0,d1
00012E30 1228 0038                  		move.b	$38(a0),d1
00012E34 D228 003A                  		add.b	$3A(a0),d1
00012E38 B228 0039                  		cmp.b	$39(a0),d1
00012E3C 6500                       		bcs.s	loc_12448
00012E3E 1001                       		move.b	d1,d0
00012E40 7200                       		moveq	#0,d1
00012E42 4A00                       		tst.b	d0
00012E44 6A00                       		bpl.s	loc_12448
00012E46 1228 0039                  		move.b	$39(a0),d1
00012E4A 5901                       		subq.b	#4,d1
00012E4C                            
00012E4C                            loc_12448:
00012E4C 1141 0038                  		move.b	d1,$38(a0)
00012E50                            
00012E50                            loc_1244C:
00012E50 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012E56 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012E5C 6100 0000                  		bsr.w	Obj63_ChangeDir
00012E60 6000 0000                  		bra.w	loc_124B2
00012E64                            ; ===========================================================================
00012E64                            
00012E64                            loc_12460:				; XREF: Obj63_Main
00012E64 1140 002F                  		move.b	d0,$2F(a0)
00012E68 0240 007F                  		andi.w	#$7F,d0
00012E6C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012E70 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012E76 6600 B1F6                  		bne.w	DeleteObject
00012E7A D040                       		add.w	d0,d0
00012E7C 0240 001E                  		andi.w	#$1E,d0
00012E80 0640 0070                  		addi.w	#$70,d0
00012E84 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012E8A D4F2 0000                  		adda.w	(a2,d0.w),a2
00012E8E 321A                       		move.w	(a2)+,d1
00012E90 2248                       		movea.l	a0,a1
00012E92 6000                       		bra.s	Obj63_MakePtfms
00012E94                            ; ===========================================================================
00012E94                            
00012E94                            Obj63_Loop:
00012E94 6100 B622                  		bsr.w	SingleObjLoad
00012E98 6600                       		bne.s	loc_124AA
00012E9A                            
00012E9A                            Obj63_MakePtfms:			; XREF: loc_12460
00012E9A 12BC 0063                  		move.b	#$63,0(a1)
00012E9E 335A 0008                  		move.w	(a2)+,8(a1)
00012EA2 335A 000C                  		move.w	(a2)+,$C(a1)
00012EA6 301A                       		move.w	(a2)+,d0
00012EA8 1340 0028                  		move.b	d0,$28(a1)
00012EAC                            
00012EAC                            loc_124AA:
00012EAC 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012EB0                            
00012EB0 588F                       		addq.l	#4,sp
00012EB2 4E75                       		rts	
00012EB4                            ; ===========================================================================
00012EB4                            
00012EB4                            loc_124B2:				; XREF: Obj63_Index
00012EB4 7200                       		moveq	#0,d1
00012EB6 1228 0019                  		move.b	$19(a0),d1
00012EBA 4EB9 0000 7C4C             		jsr	(PlatformObject).l
00012EC0 6000 0000                  		bra.w	sub_12502
00012EC4                            ; ===========================================================================
00012EC4                            
00012EC4                            loc_124C2:				; XREF: Obj63_Index
00012EC4 7200                       		moveq	#0,d1
00012EC6 1228 0019                  		move.b	$19(a0),d1
00012ECA 4EB9 0000 7DC0             		jsr	(ExitPlatform).l
00012ED0 3F28 0008                  		move.w	8(a0),-(sp)
00012ED4 6100 0000                  		bsr.w	sub_12502
00012ED8 341F                       		move.w	(sp)+,d2
00012EDA 4EF9 0000 832A             		jmp	(MvSonicOnPtfm2).l
00012EE0                            ; ===========================================================================
00012EE0                            
00012EE0                            loc_124DE:				; XREF: Obj63_Index
00012EE0 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012EE4 0240 0003                  		andi.w	#3,d0
00012EE8 6600                       		bne.s	loc_124FC
00012EEA 7201                       		moveq	#1,d1
00012EEC 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012EF0 6700                       		beq.s	loc_124F2
00012EF2 4401                       		neg.b	d1
00012EF4                            
00012EF4                            loc_124F2:
00012EF4 D328 001A                  		add.b	d1,$1A(a0)
00012EF8 0228 0003 001A             		andi.b	#3,$1A(a0)
00012EFE                            
00012EFE                            loc_124FC:
00012EFE 588F                       		addq.l	#4,sp
00012F00 6000 D1D8                  		bra.w	MarkObjGone
00012F04                            
00012F04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F04                            
00012F04                            
00012F04                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012F04 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012F08 6700                       		beq.s	loc_12520
00012F0A 4A28 003B                  		tst.b	$3B(a0)
00012F0E 6600                       		bne.s	loc_12520
00012F10 117C 0001 003B             		move.b	#1,$3B(a0)
00012F16 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012F1C 4428 003A                  		neg.b	$3A(a0)
00012F20 6000                       		bra.s	loc_12534
00012F22                            ; ===========================================================================
00012F22                            
00012F22                            loc_12520:
00012F22 3028 0008                  		move.w	8(a0),d0
00012F26 B068 0034                  		cmp.w	$34(a0),d0
00012F2A 6600                       		bne.s	loc_1256A
00012F2C 3028 000C                  		move.w	$C(a0),d0
00012F30 B068 0036                  		cmp.w	$36(a0),d0
00012F34 6600                       		bne.s	loc_1256A
00012F36                            
00012F36                            loc_12534:
00012F36 7200                       		moveq	#0,d1
00012F38 1228 0038                  		move.b	$38(a0),d1
00012F3C D228 003A                  		add.b	$3A(a0),d1
00012F40 B228 0039                  		cmp.b	$39(a0),d1
00012F44 6500                       		bcs.s	loc_12552
00012F46 1001                       		move.b	d1,d0
00012F48 7200                       		moveq	#0,d1
00012F4A 4A00                       		tst.b	d0
00012F4C 6A00                       		bpl.s	loc_12552
00012F4E 1228 0039                  		move.b	$39(a0),d1
00012F52 5901                       		subq.b	#4,d1
00012F54                            
00012F54                            loc_12552:
00012F54 1141 0038                  		move.b	d1,$38(a0)
00012F58 2268 003C                  		movea.l	$3C(a0),a1
00012F5C 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012F62 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012F68 6100 0000                  		bsr.w	Obj63_ChangeDir
00012F6C                            
00012F6C                            loc_1256A:
00012F6C 6100 B09E                  		bsr.w	SpeedToPos
00012F70 4E75                       		rts	
00012F72                            ; End of function sub_12502
00012F72                            
00012F72                            
00012F72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F72                            
00012F72                            
00012F72                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012F72 7000                       		moveq	#0,d0
00012F74 343C FF00                  		move.w	#-$100,d2
00012F78 3028 0008                  		move.w	8(a0),d0
00012F7C 9068 0034                  		sub.w	$34(a0),d0
00012F80 6400                       		bcc.s	loc_12584
00012F82 4440                       		neg.w	d0
00012F84 4442                       		neg.w	d2
00012F86                            
00012F86                            loc_12584:
00012F86 7200                       		moveq	#0,d1
00012F88 363C FF00                  		move.w	#-$100,d3
00012F8C 3228 000C                  		move.w	$C(a0),d1
00012F90 9268 0036                  		sub.w	$36(a0),d1
00012F94 6400                       		bcc.s	loc_12598
00012F96 4441                       		neg.w	d1
00012F98 4443                       		neg.w	d3
00012F9A                            
00012F9A                            loc_12598:
00012F9A B240                       		cmp.w	d0,d1
00012F9C 6500                       		bcs.s	loc_125C2
00012F9E 3028 0008                  		move.w	8(a0),d0
00012FA2 9068 0034                  		sub.w	$34(a0),d0
00012FA6 6700                       		beq.s	loc_125AE
00012FA8 48C0                       		ext.l	d0
00012FAA E180                       		asl.l	#8,d0
00012FAC 81C1                       		divs.w	d1,d0
00012FAE 4440                       		neg.w	d0
00012FB0                            
00012FB0                            loc_125AE:
00012FB0 3140 0010                  		move.w	d0,$10(a0)
00012FB4 3143 0012                  		move.w	d3,$12(a0)
00012FB8 4840                       		swap	d0
00012FBA 3140 000A                  		move.w	d0,$A(a0)
00012FBE 4268 000E                  		clr.w	$E(a0)
00012FC2 4E75                       		rts	
00012FC4                            ; ===========================================================================
00012FC4                            
00012FC4                            loc_125C2:				; XREF: Obj63_ChangeDir
00012FC4 3228 000C                  		move.w	$C(a0),d1
00012FC8 9268 0036                  		sub.w	$36(a0),d1
00012FCC 6700                       		beq.s	loc_125D4
00012FCE 48C1                       		ext.l	d1
00012FD0 E181                       		asl.l	#8,d1
00012FD2 83C0                       		divs.w	d0,d1
00012FD4 4441                       		neg.w	d1
00012FD6                            
00012FD6                            loc_125D4:
00012FD6 3141 0012                  		move.w	d1,$12(a0)
00012FDA 3142 0010                  		move.w	d2,$10(a0)
00012FDE 4841                       		swap	d1
00012FE0 3141 000E                  		move.w	d1,$E(a0)
00012FE4 4268 000A                  		clr.w	$A(a0)
00012FE8 4E75                       		rts	
00012FEA                            ; End of function Obj63_ChangeDir
00012FEA                            
00012FEA                            ; ===========================================================================
00012FEA 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012FEC 0000                       		dc.w word_12610-Obj63_Data
00012FEE 0000                       		dc.w word_12628-Obj63_Data
00012FF0 0000                       		dc.w word_1263C-Obj63_Data
00012FF2 0000                       		dc.w word_12650-Obj63_Data
00012FF4 0000                       		dc.w word_12668-Obj63_Data
00012FF6 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00013006 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013012 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013022 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001302A 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
0001303E 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013052 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
0001306A 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
0001307E                            
0001307E                            ; ---------------------------------------------------------------------------
0001307E                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001307E                            ; ---------------------------------------------------------------------------
0001307E                            Map_obj63:
0001307E                            	include "_maps\obj63.asm"
0001307E                            ; ---------------------------------------------------------------------------
0001307E                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001307E                            ; ---------------------------------------------------------------------------
0001307E 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00013082 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00013086 0000                       		dc.w byte_1269E-Map_obj63
00013088 01                         byte_12686:	dc.b 1
00013089 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001308E 01                         byte_1268C:	dc.b 1
0001308F F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00013094 01                         byte_12692:	dc.b 1
00013095 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0001309A 01                         byte_12698:	dc.b 1
0001309B F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000130A0 01                         byte_1269E:	dc.b 1
000130A1 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000130A6                            		even
000130A6                            		even
000130A6                            
000130A6                            ; ===========================================================================
000130A6                            ; ---------------------------------------------------------------------------
000130A6                            ; Object 64 - bubbles (LZ)
000130A6                            ; ---------------------------------------------------------------------------
000130A6                            
000130A6                            Obj64:					; XREF: Obj_Index
000130A6 7000                       		moveq	#0,d0
000130A8 1028 0024                  		move.b	$24(a0),d0
000130AC 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000130B0 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000130B4                            ; ===========================================================================
000130B4 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000130B6 0000                       		dc.w Obj64_Animate-Obj64_Index
000130B8 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000130BA 0000                       		dc.w Obj64_Display2-Obj64_Index
000130BC 0000                       		dc.w Obj64_Delete3-Obj64_Index
000130BE 0000                       		dc.w Obj64_BblMaker-Obj64_Index
000130C0                            ; ===========================================================================
000130C0                            
000130C0                            Obj64_Main:				; XREF: Obj64_Index
000130C0 5428 0024                  		addq.b	#2,$24(a0)
000130C4 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
000130CC 317C 8348 0002             		move.w	#$8348,2(a0)
000130D2 117C 0084 0001             		move.b	#$84,1(a0)
000130D8 117C 0010 0019             		move.b	#$10,$19(a0)
000130DE 117C 0001 0018             		move.b	#1,$18(a0)
000130E4 1028 0028                  		move.b	$28(a0),d0	; get object type
000130E8 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
000130EA 5028 0024                  		addq.b	#8,$24(a0)
000130EE 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000130F2 1140 0032                  		move.b	d0,$32(a0)
000130F6 1140 0033                  		move.b	d0,$33(a0)
000130FA 117C 0006 001C             		move.b	#6,$1C(a0)
00013100 6000 0000                  		bra.w	Obj64_BblMaker
00013104                            ; ===========================================================================
00013104                            
00013104                            Obj64_Bubble:				; XREF: Obj64_Main
00013104 1140 001C                  		move.b	d0,$1C(a0)
00013108 3168 0008 0030             		move.w	8(a0),$30(a0)
0001310E 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00013114 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001311A 1140 0026                  		move.b	d0,$26(a0)
0001311E                            
0001311E                            Obj64_Animate:				; XREF: Obj64_Index
0001311E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013124 4EB9 0000 B090             		jsr	AnimateSprite
0001312A 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00013130 6600                       		bne.s	Obj64_ChkWater
00013132 117C 0001 002E             		move.b	#1,$2E(a0)
00013138                            
00013138                            Obj64_ChkWater:				; XREF: Obj64_Index
00013138 3038 F646                  		move.w	($FFFFF646).w,d0
0001313C B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00013140 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00013142                            
00013142                            Obj64_Burst:				; XREF: Obj64_Wobble
00013142 117C 0006 0024             		move.b	#6,$24(a0)
00013148 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
0001314C 6000 0000                  		bra.w	Obj64_Display2
00013150                            ; ===========================================================================
00013150                            
00013150                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00013150 1028 0026                  		move.b	$26(a0),d0
00013154 5228 0026                  		addq.b	#1,$26(a0)
00013158 0240 007F                  		andi.w	#$7F,d0
0001315C 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013162 1031 0000                  		move.b	(a1,d0.w),d0
00013166 4880                       		ext.w	d0
00013168 D068 0030                  		add.w	$30(a0),d0
0001316C 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00013170 4A28 002E                  		tst.b	$2E(a0)
00013174 6700                       		beq.s	Obj64_Display
00013176 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
0001317A 6700                       		beq.s	Obj64_Display	; if not, branch
0001317C                            
0001317C 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00013180 303C 00AD                  		move.w	#$AD,d0
00013184 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
0001318A 43F8 D000                  		lea	($FFFFD000).w,a1
0001318E 4269 0010                  		clr.w	$10(a1)
00013192 4269 0012                  		clr.w	$12(a1)
00013196 4269 0014                  		clr.w	$14(a1)
0001319A 137C 0015 001C             		move.b	#$15,$1C(a1)
000131A0 337C 0023 003E             		move.w	#$23,$3E(a1)
000131A6 137C 0000 003C             		move.b	#0,$3C(a1)
000131AC 08A9 0005 0022             		bclr	#5,$22(a1)
000131B2 08A9 0004 0022             		bclr	#4,$22(a1)
000131B8 0829 0002 0022             		btst	#2,$22(a1)
000131BE 6700 FF82                  		beq.w	Obj64_Burst
000131C2 08A9 0002 0022             		bclr	#2,$22(a1)
000131C8 137C 0013 0016             		move.b	#$13,$16(a1)
000131CE 137C 0009 0017             		move.b	#9,$17(a1)
000131D4 5B69 000C                  		subq.w	#5,$C(a1)
000131D8 6000 FF68                  		bra.w	Obj64_Burst
000131DC                            ; ===========================================================================
000131DC                            
000131DC                            Obj64_Display:				; XREF: Obj64_Wobble
000131DC 6100 AE2E                  		bsr.w	SpeedToPos
000131E0 4A28 0001                  		tst.b	1(a0)
000131E4 6A00                       		bpl.s	Obj64_Delete
000131E6 4EFA AE4A                  		jmp	DisplaySprite
000131EA                            ; ===========================================================================
000131EA                            
000131EA                            Obj64_Delete:
000131EA 4EFA AE82                  		jmp	DeleteObject
000131EE                            ; ===========================================================================
000131EE                            
000131EE                            Obj64_Display2:				; XREF: Obj64_Index
000131EE 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000131F4 4EB9 0000 B090             		jsr	AnimateSprite
000131FA 4A28 0001                  		tst.b	1(a0)
000131FE 6A00                       		bpl.s	Obj64_Delete2
00013200 4EFA AE30                  		jmp	DisplaySprite
00013204                            ; ===========================================================================
00013204                            
00013204                            Obj64_Delete2:
00013204 4EFA AE68                  		jmp	DeleteObject
00013208                            ; ===========================================================================
00013208                            
00013208                            Obj64_Delete3:				; XREF: Obj64_Index
00013208 6000 AE64                  		bra.w	DeleteObject
0001320C                            ; ===========================================================================
0001320C                            
0001320C                            Obj64_BblMaker:				; XREF: Obj64_Index
0001320C 4A68 0036                  		tst.w	$36(a0)
00013210 6600                       		bne.s	loc_12874
00013212 3038 F646                  		move.w	($FFFFF646).w,d0
00013216 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
0001321A 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
0001321E 4A28 0001                  		tst.b	1(a0)
00013222 6A00 0000                  		bpl.w	Obj64_ChkDel
00013226 5368 0038                  		subq.w	#1,$38(a0)
0001322A 6A00 0000                  		bpl.w	loc_12914
0001322E 317C 0001 0036             		move.w	#1,$36(a0)
00013234                            
00013234                            loc_1283A:
00013234 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001323A 3200                       		move.w	d0,d1
0001323C 0240 0007                  		andi.w	#7,d0
00013240 0C40 0006                  		cmpi.w	#6,d0
00013244 64EE                       		bcc.s	loc_1283A
00013246                            
00013246 1140 0034                  		move.b	d0,$34(a0)
0001324A 0241 000C                  		andi.w	#$C,d1
0001324E 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013254 D2C1                       		adda.w	d1,a1
00013256 2149 003C                  		move.l	a1,$3C(a0)
0001325A 5328 0032                  		subq.b	#1,$32(a0)
0001325E 6A00                       		bpl.s	loc_12872
00013260 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013266 08E8 0007 0036             		bset	#7,$36(a0)
0001326C                            
0001326C                            loc_12872:
0001326C 6000                       		bra.s	loc_1287C
0001326E                            ; ===========================================================================
0001326E                            
0001326E                            loc_12874:				; XREF: Obj64_BblMaker
0001326E 5368 0038                  		subq.w	#1,$38(a0)
00013272 6A00 0000                  		bpl.w	loc_12914
00013276                            
00013276                            loc_1287C:
00013276 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001327C 0240 001F                  		andi.w	#$1F,d0
00013280 3140 0038                  		move.w	d0,$38(a0)
00013284 6100 B232                  		bsr.w	SingleObjLoad
00013288 6600                       		bne.s	loc_128F8
0001328A 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
0001328E 3368 0008 0008             		move.w	8(a0),8(a1)
00013294 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001329A 0240 000F                  		andi.w	#$F,d0
0001329E 5140                       		subq.w	#8,d0
000132A0 D169 0008                  		add.w	d0,8(a1)
000132A4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000132AA 7000                       		moveq	#0,d0
000132AC 1028 0034                  		move.b	$34(a0),d0
000132B0 2468 003C                  		movea.l	$3C(a0),a2
000132B4 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000132BA 0828 0007 0036             		btst	#7,$36(a0)
000132C0 6700                       		beq.s	loc_128F8
000132C2 4EB9 0000 2D46             		jsr	(RandomNumber).l
000132C8 0240 0003                  		andi.w	#3,d0
000132CC 6600                       		bne.s	loc_128E4
000132CE 08E8 0006 0036             		bset	#6,$36(a0)
000132D4 6600                       		bne.s	loc_128F8
000132D6 137C 0002 0028             		move.b	#2,$28(a1)
000132DC                            
000132DC                            loc_128E4:
000132DC 4A28 0034                  		tst.b	$34(a0)
000132E0 6600                       		bne.s	loc_128F8
000132E2 08E8 0006 0036             		bset	#6,$36(a0)
000132E8 6600                       		bne.s	loc_128F8
000132EA 137C 0002 0028             		move.b	#2,$28(a1)
000132F0                            
000132F0                            loc_128F8:
000132F0 5328 0034                  		subq.b	#1,$34(a0)
000132F4 6A00                       		bpl.s	loc_12914
000132F6 4EB9 0000 2D46             		jsr	(RandomNumber).l
000132FC 0240 007F                  		andi.w	#$7F,d0
00013300 0640 0080                  		addi.w	#$80,d0
00013304 D168 0038                  		add.w	d0,$38(a0)
00013308 4268 0036                  		clr.w	$36(a0)
0001330C                            
0001330C                            loc_12914:
0001330C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013312 4EB9 0000 B090             		jsr	AnimateSprite
00013318                            
00013318                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00013318 3028 0008                  		move.w	8(a0),d0
0001331C 0240 FF80                  		andi.w	#$FF80,d0
00013320 3238 F700                  		move.w	($FFFFF700).w,d1
00013324 0441 0080                  		subi.w	#$80,d1
00013328 0241 FF80                  		andi.w	#$FF80,d1
0001332C 9041                       		sub.w	d1,d0
0001332E 0C40 0280                  		cmpi.w	#$280,d0
00013332 6200 AD3A                  		bhi.w	DeleteObject
00013336 3038 F646                  		move.w	($FFFFF646).w,d0
0001333A B068 000C                  		cmp.w	$C(a0),d0
0001333E 6500 ACF2                  		bcs.w	DisplaySprite
00013342 4E75                       		rts	
00013344                            ; ===========================================================================
00013344                            ; bubble production sequence
00013344                            
00013344                            ; 0 = small bubble, 1 =	large bubble
00013344                            
00013344 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013356                            
00013356                            ; ===========================================================================
00013356                            
00013356                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013356 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001335A 6B00                       		bmi.s	loc_12998
0001335C 43F8 D000                  		lea	($FFFFD000).w,a1
00013360 3029 0008                  		move.w	8(a1),d0
00013364 3228 0008                  		move.w	8(a0),d1
00013368 0441 0010                  		subi.w	#$10,d1
0001336C B240                       		cmp.w	d0,d1
0001336E 6400                       		bcc.s	loc_12998
00013370 0641 0020                  		addi.w	#$20,d1
00013374 B240                       		cmp.w	d0,d1
00013376 6500                       		bcs.s	loc_12998
00013378 3029 000C                  		move.w	$C(a1),d0
0001337C 3228 000C                  		move.w	$C(a0),d1
00013380 B240                       		cmp.w	d0,d1
00013382 6400                       		bcc.s	loc_12998
00013384 0641 0010                  		addi.w	#$10,d1
00013388 B240                       		cmp.w	d0,d1
0001338A 6500                       		bcs.s	loc_12998
0001338C 7001                       		moveq	#1,d0
0001338E 4E75                       		rts	
00013390                            ; ===========================================================================
00013390                            
00013390                            loc_12998:
00013390 7000                       		moveq	#0,d0
00013392 4E75                       		rts	
00013394                            ; ===========================================================================
00013394                            Ani_obj64:
00013394                            	include "_anim\obj64.asm"
00013394                            ; ---------------------------------------------------------------------------
00013394                            ; Animation script - bubbles (LZ)
00013394                            ; ---------------------------------------------------------------------------
00013394 0000                       		dc.w byte_129AA-Ani_obj64
00013396 0000                       		dc.w byte_129B0-Ani_obj64
00013398 0000                       		dc.w byte_129B6-Ani_obj64
0001339A 0000                       		dc.w byte_129BE-Ani_obj64
0001339C 0000                       		dc.w byte_129BE-Ani_obj64
0001339E 0000                       		dc.w byte_129C0-Ani_obj64
000133A0 0000                       		dc.w byte_129C6-Ani_obj64
000133A2 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000133A8 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000133AE 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000133B6 04FC                       byte_129BE:	dc.b 4,	$FC
000133B8 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000133BE 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000133C4 00                         		even
000133C4 00                         		even
000133C4                            
000133C4                            ; ---------------------------------------------------------------------------
000133C4                            ; Sprite mappings - bubbles (LZ)
000133C4                            ; ---------------------------------------------------------------------------
000133C4                            Map_obj64:
000133C4                            	include "_maps\obj64.asm"
000133C4                            ; ---------------------------------------------------------------------------
000133C4                            ; Sprite mappings - bubbles (LZ)
000133C4                            ; ---------------------------------------------------------------------------
000133C4 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
000133C8 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
000133CC 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000133D0 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
000133D4 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000133D8 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000133DC 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
000133E0 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000133E4 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
000133E8 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
000133EC 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
000133F0 0000                       		dc.w byte_12A9C-Map_obj64
000133F2 01                         byte_129FA:	dc.b 1
000133F3 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
000133F8 01                         byte_12A00:	dc.b 1
000133F9 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000133FE 01                         byte_12A06:	dc.b 1
000133FF FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013404 01                         byte_12A0C:	dc.b 1
00013405 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
0001340A 01                         byte_12A12:	dc.b 1
0001340B F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013410 01                         byte_12A18:	dc.b 1
00013411 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013416 01                         byte_12A1E:	dc.b 1
00013417 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
0001341C 04                         byte_12A24:	dc.b 4
0001341D F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013422 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013427 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
0001342C 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013431 04                         byte_12A39:	dc.b 4
00013432 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013437 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
0001343C 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013441 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013446 01                         byte_12A4E:	dc.b 1
00013447 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
0001344C 01                         byte_12A54:	dc.b 1
0001344D F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013452 01                         byte_12A5A:	dc.b 1
00013453 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013458 01                         byte_12A60:	dc.b 1
00013459 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001345E 01                         byte_12A66:	dc.b 1
0001345F F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013464 01                         byte_12A6C:	dc.b 1
00013465 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
0001346A 01                         byte_12A72:	dc.b 1
0001346B F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013470 01                         byte_12A78:	dc.b 1
00013471 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013476 01                         byte_12A7E:	dc.b 1
00013477 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
0001347C 01                         byte_12A84:	dc.b 1
0001347D F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013482 01                         byte_12A8A:	dc.b 1
00013483 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013488 01                         byte_12A90:	dc.b 1
00013489 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
0001348E 01                         byte_12A96:	dc.b 1
0001348F F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00013494 00                         byte_12A9C:	dc.b 0
00013496 00                         		even
00013496 00                         		even
00013496                            
00013496                            ; ===========================================================================
00013496                            ; ---------------------------------------------------------------------------
00013496                            ; Object 65 - waterfalls (LZ)
00013496                            ; ---------------------------------------------------------------------------
00013496                            
00013496                            Obj65:					; XREF: Obj_Index
00013496 7000                       		moveq	#0,d0
00013498 1028 0024                  		move.b	$24(a0),d0
0001349C 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000134A0 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000134A4                            ; ===========================================================================
000134A4 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000134A6 0000                       		dc.w Obj65_Animate-Obj65_Index
000134A8 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000134AA 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000134AC 0000                       		dc.w loc_12B36-Obj65_Index
000134AE                            ; ===========================================================================
000134AE                            
000134AE                            Obj65_Main:				; XREF: Obj65_Index
000134AE 5828 0024                  		addq.b	#4,$24(a0)
000134B2 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000134BA 317C 4259 0002             		move.w	#$4259,2(a0)
000134C0 0028 0004 0001             		ori.b	#4,1(a0)
000134C6 117C 0018 0019             		move.b	#$18,$19(a0)
000134CC 117C 0001 0018             		move.b	#1,$18(a0)
000134D2 1028 0028                  		move.b	$28(a0),d0	; get object type
000134D6 6A00                       		bpl.s	loc_12AE6
000134D8 08E8 0007 0002             		bset	#7,2(a0)
000134DE                            
000134DE                            loc_12AE6:
000134DE 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000134E2 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000134E6 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000134EA 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000134EC 4228 0018                  		clr.b	$18(a0)
000134F0 5528 0024                  		subq.b	#2,$24(a0)
000134F4 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000134FA 6700                       		beq.s	loc_12B0A	; if not, branch
000134FC 117C 0006 0024             		move.b	#6,$24(a0)
00013502                            
00013502                            loc_12B0A:
00013502 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013508 6700                       		beq.s	Obj65_Animate	; if not, branch
0001350A 117C 0008 0024             		move.b	#8,$24(a0)
00013510                            
00013510                            Obj65_Animate:				; XREF: Obj65_Index
00013510 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013516 4EB9 0000 B090             		jsr	AnimateSprite
0001351C                            
0001351C                            Obj65_ChkDel:				; XREF: Obj65_Index
0001351C 6000 CBBC                  		bra.w	MarkObjGone
00013520                            ; ===========================================================================
00013520                            
00013520                            Obj65_FixHeight:			; XREF: Obj65_Index
00013520 3038 F646                  		move.w	($FFFFF646).w,d0
00013524 0440 0010                  		subi.w	#$10,d0
00013528 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
0001352C 60E2                       		bra.s	Obj65_Animate
0001352E                            ; ===========================================================================
0001352E                            
0001352E                            loc_12B36:				; XREF: Obj65_Index
0001352E 08A8 0007 0002             		bclr	#7,2(a0)
00013534 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
0001353A 6600                       		bne.s	Obj65_Animate2
0001353C 08E8 0007 0002             		bset	#7,2(a0)
00013542                            
00013542                            Obj65_Animate2:
00013542 60CC                       		bra.s	Obj65_Animate
00013544                            ; ===========================================================================
00013544                            Ani_obj65:
00013544                            	include "_anim\obj65.asm"
00013544                            ; ---------------------------------------------------------------------------
00013544                            ; Animation script - waterfall (LZ)
00013544                            ; ---------------------------------------------------------------------------
00013544 0000                       		dc.w byte_12B4E-Ani_obj65
00013546 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
0001354C 00                         		even
0001354C 00                         		even
0001354C                            
0001354C                            ; ---------------------------------------------------------------------------
0001354C                            ; Sprite mappings - waterfalls (LZ)
0001354C                            ; ---------------------------------------------------------------------------
0001354C                            Map_obj65:
0001354C                            	include "_maps\obj65.asm"
0001354C                            ; ---------------------------------------------------------------------------
0001354C                            ; Sprite mappings - waterfalls (LZ)
0001354C                            ; ---------------------------------------------------------------------------
0001354C 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013550 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013554 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013558 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
0001355C 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013560 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013564 01                         byte_12B6C:	dc.b 1
00013565 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0001356A 02                         byte_12B72:	dc.b 2
0001356B F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013570 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013575 02                         byte_12B7D:	dc.b 2
00013576 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001357B 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013580 01                         byte_12B88:	dc.b 1
00013581 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013586 02                         byte_12B8E:	dc.b 2
00013587 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001358C 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013591 01                         byte_12B99:	dc.b 1
00013592 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013597 01                         byte_12B9F:	dc.b 1
00013598 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
0001359D 01                         byte_12BA5:	dc.b 1
0001359E F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000135A3 02                         byte_12BAB:	dc.b 2
000135A4 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000135A9 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000135AE 02                         byte_12BB6:	dc.b 2
000135AF F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000135B4 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000135B9 02                         byte_12BC1:	dc.b 2
000135BA F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000135BF F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000135C4 02                         byte_12BCC:	dc.b 2
000135C5 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000135CA F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000135D0 00                         		even
000135D0 00                         		even
000135D0                            
000135D0                            ; ===========================================================================
000135D0                            ; ---------------------------------------------------------------------------
000135D0                            ; Object 01 - Sonic
000135D0                            ; ---------------------------------------------------------------------------
000135D0                            
000135D0                            Obj01:					; XREF: Obj_Index
000135D0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000135D4 6700                       		beq.s	Obj01_Normal	; if not, branch
000135D6 4EF9 0000 0000             		jmp	DebugMode
000135DC                            ; ===========================================================================
000135DC                            
000135DC                            Obj01_Normal:
000135DC 7000                       		moveq	#0,d0
000135DE 1028 0024                  		move.b	$24(a0),d0
000135E2 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000135E6 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000135EA                            ; ===========================================================================
000135EA 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000135EC 0000                       		dc.w Obj01_Control-Obj01_Index
000135EE 0000                       		dc.w Obj01_Hurt-Obj01_Index
000135F0 0000                       		dc.w Obj01_Death-Obj01_Index
000135F2 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000135F4                            ; ===========================================================================
000135F4                            
000135F4                            Player_Maps:
000135F4 0000 0000                  	dc.l	Map_Sonic
000135F8 0000 0000                  	dc.l	Map_Sonic ; gronic
000135FC 0000 0000                  	dc.l	Map_Sonic ; anakama
00013600 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
00013604                            	; insert player mapping here
00013604                            	
00013604                            Obj01_Main:				; XREF: Obj01_Index
00013604 5428 0024                  		addq.b	#2,$24(a0)
00013608 117C 0013 0016             		move.b	#$13,$16(a0)
0001360E 117C 0009 0017             		move.b	#9,$17(a0)
00013614                            		
00013614 7000                       		moveq	#0,d0
00013616 1038 FFE8                  		move.b	(v_character),d0
0001361A E548                       		lsl.w	#2,d0
0001361C 43FA FFD6                  		lea 	Player_Maps(pc),a1
00013620 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
00013626                            		
00013626 317C 0780 0002             		move.w	#$780,2(a0)
0001362C 117C 0002 0018             		move.b	#2,$18(a0)
00013632 117C 0018 0019             		move.b	#$18,$19(a0)
00013638 117C 0004 0001             		move.b	#4,1(a0)
0001363E 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013644 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
0001364A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013650                            
00013650                            Obj01_Control:				; XREF: Obj01_Index
00013650 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013654 6700                       		beq.s	loc_12C58	; if not, branch
00013656 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
0001365C 6700                       		beq.s	loc_12C58	; if not, branch
0001365E 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013664 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013668 4E75                       		rts	
0001366A                            ; ===========================================================================
0001366A                            
0001366A                            loc_12C58:
0001366A 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
0001366E 6600                       		bne.s	loc_12C64	; if yes, branch
00013670 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013676                            
00013676                            loc_12C64:
00013676 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
0001367C 6600                       		bne.s	loc_12C7E	; if yes, branch
0001367E 7000                       		moveq	#0,d0
00013680 1028 0022                  		move.b	$22(a0),d0
00013684 0240 0006                  		andi.w	#6,d0
00013688 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
0001368C 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013690                            
00013690                            loc_12C7E:
00013690 6100                       		bsr.s	Sonic_Display
00013692 6100 0000                  		bsr.w	Sonic_RecordPos
00013696 6100 0000                  		bsr.w	Sonic_Water
0001369A 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000136A0 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000136A6 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000136AA 6700                       		beq.s	loc_12CA6
000136AC 4A28 001C                  		tst.b	$1C(a0)
000136B0 6600                       		bne.s	loc_12CA6
000136B2 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000136B8                            
000136B8                            loc_12CA6:
000136B8 6100 0000                  		bsr.w	Sonic_Animate
000136BC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000136C0 6B00                       		bmi.s	loc_12CB6
000136C2 4EB9 0000 0000             		jsr	TouchResponse
000136C8                            
000136C8                            loc_12CB6:
000136C8 6100 0000                  		bsr.w	Sonic_Loops
000136CC 6100 0000                  		bsr.w	LoadSonicDynPLC
000136D0 4E75                       		rts	
000136D2                            ; ===========================================================================
000136D2 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000136D4 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000136D6 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000136D8 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000136DA                            ; ---------------------------------------------------------------------------
000136DA                            ; Music	to play	after invincibility wears off
000136DA                            ; ---------------------------------------------------------------------------
000136DA                            ; ===========================================================================
000136DA                            
000136DA                            Sonic_Display:				; XREF: loc_12C7E
000136DA 3028 0030                  		move.w	$30(a0),d0
000136DE 6700                       		beq.s	Obj01_Display
000136E0 5368 0030                  		subq.w	#1,$30(a0)
000136E4 E648                       		lsr.w	#3,d0
000136E6 6400                       		bcc.s	Obj01_ChkInvin
000136E8                            
000136E8                            Obj01_Display:
000136E8 4EBA A948                  		jsr	DisplaySprite
000136EC                            
000136EC                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000136EC                             
000136EC                            Obj01_ChkInvin:
000136EC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000136F0 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000136F4 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000136F8 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
000136FC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013700 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013704 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013708 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
0001370C 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013712 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013716 7000                       		moveq	#0,d0
00013718 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001371C                             
0001371C 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013722 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013724 43F9 0000 3DC6             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001372A 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001372C                             
0001372C                            Obj01_GetBgm2:
0001372C 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013732 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013734 43F9 0000 3DCE             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001373A 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001373C                             
0001373C                            Obj01_GetBgm3:
0001373C 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013742 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013744 43F9 0000 3DD6             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0001374A 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001374C                             
0001374C                            Obj01_GetBgm4:
0001374C 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013752 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013754 43F9 0000 3DDE             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001375A                             
0001375A                            Obj01_PlayMusic:
0001375A 1031 0000                  		move.b	(a1,d0.w),d0
0001375E 4EB9 0000 15CC             		jsr	(PlaySound).l	; play normal music
00013764                             
00013764                            ; NineKode ends here.
00013764                            
00013764                            Obj01_RmvInvin:
00013764 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
0001376A                            
0001376A                            Obj01_ChkShoes:
0001376A 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
0001376E 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013770 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013774 6700                       		beq.s	Obj01_ExitChk
00013776 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
0001377A 6600                       		bne.s	Obj01_ExitChk
0001377C 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013782 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013788 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001378E 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013794 303C 00E3                  		move.w	#$E3,d0
00013798 4EF9 0000 15CC             		jmp	(PlaySound).l	; run music at normal speed
0001379E                            ; ===========================================================================
0001379E                            
0001379E                            Obj01_ExitChk:
0001379E 4E75                       		rts	
000137A0                            
000137A0                            ; ---------------------------------------------------------------------------
000137A0                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000137A0                            ; ---------------------------------------------------------------------------
000137A0                            
000137A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137A0                            
000137A0                            
000137A0                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000137A0 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000137A4 43F8 CB00                  		lea	($FFFFCB00).w,a1
000137A8 43F1 0000                  		lea	(a1,d0.w),a1
000137AC 32E8 0008                  		move.w	8(a0),(a1)+
000137B0 32E8 000C                  		move.w	$C(a0),(a1)+
000137B4 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000137B8 4E75                       		rts	
000137BA                            ; End of function Sonic_RecordPos
000137BA                            
000137BA                            ; ---------------------------------------------------------------------------
000137BA                            ; Subroutine for Sonic when he's underwater
000137BA                            ; ---------------------------------------------------------------------------
000137BA                            
000137BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137BA                            
000137BA                            
000137BA                            Sonic_Water:				; XREF: loc_12C7E
000137BA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000137C0 6700                       		beq.s	Obj01_InWater	; if yes, branch
000137C2                            
000137C2                            locret_12D80:
000137C2 4E75                       		rts	
000137C4                            ; ===========================================================================
000137C4                            
000137C4                            Obj01_InWater:
000137C4 3038 F646                  		move.w	($FFFFF646).w,d0
000137C8 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000137CC 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000137CE 08E8 0006 0022             		bset	#6,$22(a0)
000137D4 66EC                       		bne.s	locret_12D80
000137D6 6100 0000                  		bsr.w	ResumeMusic
000137DA 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000137E0 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000137E6 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
000137EC 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000137F2 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000137F8 E0E8 0010                  		asr	$10(a0)
000137FC E0E8 0012                  		asr	$12(a0)
00013800 E0E8 0012                  		asr	$12(a0)
00013804 67BC                       		beq.s	locret_12D80
00013806 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001380C 303C 00AA                  		move.w	#$AA,d0
00013810 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play splash sound
00013816                            ; ===========================================================================
00013816                            
00013816                            Obj01_OutWater:
00013816 08A8 0006 0022             		bclr	#6,$22(a0)
0001381C 67A4                       		beq.s	locret_12D80
0001381E 6100 0000                  		bsr.w	ResumeMusic
00013822 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013828 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001382E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013834 E1E8 0012                  		asl	$12(a0)
00013838 6700 FF88                  		beq.w	locret_12D80
0001383C 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013842 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013848 6E00                       		bgt.s	loc_12E0E
0001384A 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013850                            
00013850                            loc_12E0E:
00013850 303C 00AA                  		move.w	#$AA,d0
00013854 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play splash sound
0001385A                            ; End of function Sonic_Water
0001385A                            
0001385A                            ; ===========================================================================
0001385A                            ; ---------------------------------------------------------------------------
0001385A                            ; Modes	for controlling	Sonic
0001385A                            ; ---------------------------------------------------------------------------
0001385A                            
0001385A                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001385A 6100 0000                  		bsr.w	Sonic_Jump
0001385E 6100 0000                  		bsr.w	Sonic_SlopeResist
00013862 6100 0000                  		bsr.w	Sonic_Move
00013866 6100 0000                  		bsr.w	Sonic_Roll
0001386A 6100 0000                  		bsr.w	Sonic_LevelBound
0001386E 4EBA A79C                  		jsr	SpeedToPos
00013872 6100 0000                  		bsr.w	Sonic_AnglePos
00013876 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001387A 4E75                       		rts	
0001387C                            ; ===========================================================================
0001387C                            
0001387C                            Obj01_MdJump:				; XREF: Obj01_Modes
0001387C 6100 0000                  		bsr.w	Sonic_JumpHeight
00013880 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013884 6100 0000                  		bsr.w	Sonic_LevelBound
00013888 4EBA A710                  		jsr	ObjectFall
0001388C 0828 0006 0022             		btst	#6,$22(a0)
00013892 6700                       		beq.s	loc_12E5C
00013894 0468 0028 0012             		subi.w	#$28,$12(a0)
0001389A                            
0001389A                            loc_12E5C:
0001389A 6100 0000                  		bsr.w	Sonic_JumpAngle
0001389E 6100 0000                  		bsr.w	Sonic_Floor
000138A2 4E75                       		rts	
000138A4                            ; ===========================================================================
000138A4                            
000138A4                            Obj01_MdRoll:				; XREF: Obj01_Modes
000138A4 6100 0000                  		bsr.w	Sonic_Jump
000138A8 6100 0000                  		bsr.w	Sonic_RollRepel
000138AC 6100 0000                  		bsr.w	Sonic_RollSpeed
000138B0 6100 0000                  		bsr.w	Sonic_LevelBound
000138B4 4EBA A756                  		jsr	SpeedToPos
000138B8 6100 0000                  		bsr.w	Sonic_AnglePos
000138BC 6100 0000                  		bsr.w	Sonic_SlopeRepel
000138C0 4E75                       		rts	
000138C2                            ; ===========================================================================
000138C2                            
000138C2                            Obj01_MdJump2:				; XREF: Obj01_Modes
000138C2 6100 0000                  		bsr.w	Sonic_JumpHeight
000138C6 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000138CA 6100 0000                  		bsr.w	Sonic_LevelBound
000138CE 6100 0000                  		bsr.w	Sonic_AirUnroll
000138D2 4EBA A6C6                  		jsr	ObjectFall
000138D6 0828 0006 0022             		btst	#6,$22(a0)
000138DC 6700                       		beq.s	loc_12EA6
000138DE 0468 0028 0012             		subi.w	#$28,$12(a0)
000138E4                            
000138E4                            loc_12EA6:
000138E4 6100 0000                  		bsr.w	Sonic_JumpAngle
000138E8 6100 0000                  		bsr.w	Sonic_Floor
000138EC 4E75                       		rts	
000138EE                            ; ---------------------------------------------------------------------------
000138EE                            ; Subroutine to	make Sonic walk/run
000138EE                            ; ---------------------------------------------------------------------------
000138EE                            
000138EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138EE                            
000138EE                            
000138EE                            Sonic_Move:				; XREF: Obj01_MdNormal
000138EE 3C38 F760                  		move.w	($FFFFF760).w,d6
000138F2 3A38 F762                  		move.w	($FFFFF762).w,d5
000138F6 3838 F764                  		move.w	($FFFFF764).w,d4
000138FA 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000138FE 6600 0000                  		bne.w	loc_12FEE
00013902 4A68 003E                  		tst.w	$3E(a0)
00013906 6600 0000                  		bne.w	Obj01_ResetScr
0001390A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013910 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013912 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013918 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
0001391A 6100 0000                  		bsr.w	Sonic_MoveLeft
0001391E                            
0001391E                            Obj01_NotLeft:
0001391E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013924 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013926 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001392C 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
0001392E 6100 0000                  		bsr.w	Sonic_MoveLeft
00013932 6000                       		bra.s	Obj01_NotRight
00013934                            
00013934                            Obj01_MoveRight:
00013934 6100 0000                  		bsr.w	Sonic_MoveRight
00013938                            
00013938                            Obj01_NotRight:
00013938 1028 0026                  		move.b	$26(a0),d0
0001393C 0600 0020                  		addi.b	#$20,d0
00013940 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013944 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013948 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001394C 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013950 08A8 0005 0022             		bclr	#5,$22(a0)
00013956 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001395C 0828 0003 0022             		btst	#3,$22(a0)
00013962 6700                       		beq.s	Sonic_Balance
00013964 7000                       		moveq	#0,d0
00013966 1028 003D                  		move.b	$3D(a0),d0
0001396A ED48                       		lsl.w	#6,d0
0001396C 43F8 D000                  		lea	($FFFFD000).w,a1
00013970 43F1 0000                  		lea	(a1,d0.w),a1
00013974 4A29 0022                  		tst.b	$22(a1)
00013978 6B00                       		bmi.s	Sonic_LookUp
0001397A 7200                       		moveq	#0,d1
0001397C 1229 0019                  		move.b	$19(a1),d1
00013980 3401                       		move.w	d1,d2
00013982 D442                       		add.w	d2,d2
00013984 5942                       		subq.w	#4,d2
00013986 D268 0008                  		add.w	8(a0),d1
0001398A 9269 0008                  		sub.w	8(a1),d1
0001398E 0C41 0004                  		cmpi.w	#4,d1
00013992 6D00                       		blt.s	loc_12F6A
00013994 B242                       		cmp.w	d2,d1
00013996 6C00                       		bge.s	loc_12F5A
00013998 6000                       		bra.s	Sonic_LookUp
0001399A                            ; ===========================================================================
0001399A                            
0001399A                            Sonic_Balance:
0001399A 4EB9 0000 0000             		jsr	ObjHitFloor
000139A0 0C41 000C                  		cmpi.w	#$C,d1
000139A4 6D00                       		blt.s	Sonic_LookUp
000139A6 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000139AC 6600                       		bne.s	loc_12F62
000139AE                            
000139AE                            loc_12F5A:
000139AE 08A8 0000 0022             		bclr	#0,$22(a0)
000139B4 6000                       		bra.s	loc_12F70
000139B6                            ; ===========================================================================
000139B6                            
000139B6                            loc_12F62:
000139B6 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000139BC 6600                       		bne.s	Sonic_LookUp
000139BE                            
000139BE                            loc_12F6A:
000139BE 08E8 0000 0022             		bset	#0,$22(a0)
000139C4                            
000139C4                            loc_12F70:
000139C4 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000139CA 6000                       		bra.s	Obj01_ResetScr
000139CC                            ; ===========================================================================
000139CC                            
000139CC                            Sonic_LookUp:
000139CC 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000139D2 6700                       		beq.s	Sonic_Duck	; if not, branch
000139D4 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000139DA 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000139E0 6700                       		beq.s	loc_12FC2
000139E2 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000139E6 6000                       		bra.s	loc_12FC2
000139E8                            ; ===========================================================================
000139E8                            
000139E8                            Sonic_Duck:
000139E8 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000139EE 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000139F0 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000139F6 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000139FC 6700                       		beq.s	loc_12FC2
000139FE 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013A02 6000                       		bra.s	loc_12FC2
00013A04                            ; ===========================================================================
00013A04                            
00013A04                            Obj01_ResetScr:
00013A04 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013A0A 6700                       		beq.s	loc_12FC2	; if yes, branch
00013A0C 6400                       		bcc.s	loc_12FBE
00013A0E 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013A12                            
00013A12                            loc_12FBE:
00013A12 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013A16                            
00013A16                            loc_12FC2:
00013A16 1038 F602                  		move.b	($FFFFF602).w,d0
00013A1A 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013A1E 6600                       		bne.s	loc_12FEE	; if yes, branch
00013A20 3028 0014                  		move.w	$14(a0),d0
00013A24 6700                       		beq.s	loc_12FEE
00013A26 6B00                       		bmi.s	loc_12FE2
00013A28 9045                       		sub.w	d5,d0
00013A2A 6400                       		bcc.s	loc_12FDC
00013A2C 303C 0000                  		move.w	#0,d0
00013A30                            
00013A30                            loc_12FDC:
00013A30 3140 0014                  		move.w	d0,$14(a0)
00013A34 6000                       		bra.s	loc_12FEE
00013A36                            ; ===========================================================================
00013A36                            
00013A36                            loc_12FE2:
00013A36 D045                       		add.w	d5,d0
00013A38 6400                       		bcc.s	loc_12FEA
00013A3A 303C 0000                  		move.w	#0,d0
00013A3E                            
00013A3E                            loc_12FEA:
00013A3E 3140 0014                  		move.w	d0,$14(a0)
00013A42                            
00013A42                            loc_12FEE:
00013A42 1028 0026                  		move.b	$26(a0),d0
00013A46 4EB9 0000 2D6C             		jsr	(CalcSine).l
00013A4C C3E8 0014                  		muls.w	$14(a0),d1
00013A50 E081                       		asr.l	#8,d1
00013A52 3141 0010                  		move.w	d1,$10(a0)
00013A56 C1E8 0014                  		muls.w	$14(a0),d0
00013A5A E080                       		asr.l	#8,d0
00013A5C 3140 0012                  		move.w	d0,$12(a0)
00013A60                            
00013A60                            loc_1300C:
00013A60 1028 0026                  		move.b	$26(a0),d0
00013A64 0600 0040                  		addi.b	#$40,d0
00013A68 6B00                       		bmi.s	locret_1307C
00013A6A 123C 0040                  		move.b	#$40,d1
00013A6E 4A68 0014                  		tst.w	$14(a0)
00013A72 6700                       		beq.s	locret_1307C
00013A74 6B00                       		bmi.s	loc_13024
00013A76 4441                       		neg.w	d1
00013A78                            
00013A78                            loc_13024:
00013A78 1028 0026                  		move.b	$26(a0),d0
00013A7C D001                       		add.b	d1,d0
00013A7E 3F00                       		move.w	d0,-(sp)
00013A80 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013A84 301F                       		move.w	(sp)+,d0
00013A86 4A41                       		tst.w	d1
00013A88 6A00                       		bpl.s	locret_1307C
00013A8A E141                       		asl.w	#8,d1
00013A8C 0600 0020                  		addi.b	#$20,d0
00013A90 0200 00C0                  		andi.b	#$C0,d0
00013A94 6700                       		beq.s	loc_13078
00013A96 0C00 0040                  		cmpi.b	#$40,d0
00013A9A 6700                       		beq.s	loc_13066
00013A9C 0C00 0080                  		cmpi.b	#$80,d0
00013AA0 6700                       		beq.s	loc_13060
00013AA2 D368 0010                  		add.w	d1,$10(a0)
00013AA6 08E8 0005 0022             		bset	#5,$22(a0)
00013AAC 317C 0000 0014             		move.w	#0,$14(a0)
00013AB2 4E75                       		rts	
00013AB4                            ; ===========================================================================
00013AB4                            
00013AB4                            loc_13060:
00013AB4 9368 0012                  		sub.w	d1,$12(a0)
00013AB8 4E75                       		rts	
00013ABA                            ; ===========================================================================
00013ABA                            
00013ABA                            loc_13066:
00013ABA 9368 0010                  		sub.w	d1,$10(a0)
00013ABE 08E8 0005 0022             		bset	#5,$22(a0)
00013AC4 317C 0000 0014             		move.w	#0,$14(a0)
00013ACA 4E75                       		rts	
00013ACC                            ; ===========================================================================
00013ACC                            
00013ACC                            loc_13078:
00013ACC D368 0012                  		add.w	d1,$12(a0)
00013AD0                            
00013AD0                            locret_1307C:
00013AD0 4E75                       		rts	
00013AD2                            ; End of function Sonic_Move
00013AD2                            
00013AD2                            
00013AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AD2                            
00013AD2                            
00013AD2                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013AD2 3028 0014                  		move.w	$14(a0),d0
00013AD6 6700                       		beq.s	loc_13086
00013AD8 6A00                       		bpl.s	loc_130B2
00013ADA                            
00013ADA                            loc_13086:
00013ADA 08E8 0000 0022             		bset	#0,$22(a0)
00013AE0 6600                       		bne.s	loc_1309A
00013AE2 08A8 0005 0022             		bclr	#5,$22(a0)
00013AE8 117C 0001 001D             		move.b	#1,$1D(a0)
00013AEE                            
00013AEE                            loc_1309A:
00013AEE 9045                       		sub.w	d5,d0
00013AF0 3206                       		move.w	d6,d1
00013AF2 4441                       		neg.w	d1
00013AF4 B041                       		cmp.w	d1,d0
00013AF6 6E00                       		bgt.s	loc_130A6
00013AF8 3001                       		move.w	d1,d0
00013AFA                            
00013AFA                            loc_130A6:
00013AFA 3140 0014                  		move.w	d0,$14(a0)
00013AFE 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013B04 4E75                       		rts	
00013B06                            ; ===========================================================================
00013B06                            
00013B06                            loc_130B2:				; XREF: Sonic_MoveLeft
00013B06 9044                       		sub.w	d4,d0
00013B08 6400                       		bcc.s	loc_130BA
00013B0A 303C FF80                  		move.w	#-$80,d0
00013B0E                            
00013B0E                            loc_130BA:
00013B0E 3140 0014                  		move.w	d0,$14(a0)
00013B12 1028 0026                  		move.b	$26(a0),d0
00013B16 0600 0020                  		addi.b	#$20,d0
00013B1A 0200 00C0                  		andi.b	#$C0,d0
00013B1E 6600                       		bne.s	locret_130E8
00013B20 0C40 0400                  		cmpi.w	#$400,d0
00013B24 6D00                       		blt.s	locret_130E8
00013B26 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013B2C 08A8 0000 0022             		bclr	#0,$22(a0)
00013B32 303C 00A4                  		move.w	#$A4,d0
00013B36 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stopping sound
00013B3C                            
00013B3C                            locret_130E8:
00013B3C 4E75                       		rts	
00013B3E                            ; End of function Sonic_MoveLeft
00013B3E                            
00013B3E                            
00013B3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B3E                            
00013B3E                            
00013B3E                            Sonic_MoveRight:			; XREF: Sonic_Move
00013B3E 3028 0014                  		move.w	$14(a0),d0
00013B42 6B00                       		bmi.s	loc_13118
00013B44 08A8 0000 0022             		bclr	#0,$22(a0)
00013B4A 6700                       		beq.s	loc_13104
00013B4C 08A8 0005 0022             		bclr	#5,$22(a0)
00013B52 117C 0001 001D             		move.b	#1,$1D(a0)
00013B58                            
00013B58                            loc_13104:
00013B58 D045                       		add.w	d5,d0
00013B5A B046                       		cmp.w	d6,d0
00013B5C 6D00                       		blt.s	loc_1310C
00013B5E 3006                       		move.w	d6,d0
00013B60                            
00013B60                            loc_1310C:
00013B60 3140 0014                  		move.w	d0,$14(a0)
00013B64 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013B6A 4E75                       		rts	
00013B6C                            ; ===========================================================================
00013B6C                            
00013B6C                            loc_13118:				; XREF: Sonic_MoveRight
00013B6C D044                       		add.w	d4,d0
00013B6E 6400                       		bcc.s	loc_13120
00013B70 303C 0080                  		move.w	#$80,d0
00013B74                            
00013B74                            loc_13120:
00013B74 3140 0014                  		move.w	d0,$14(a0)
00013B78 1028 0026                  		move.b	$26(a0),d0
00013B7C 0600 0020                  		addi.b	#$20,d0
00013B80 0200 00C0                  		andi.b	#$C0,d0
00013B84 6600                       		bne.s	locret_1314E
00013B86 0C40 FC00                  		cmpi.w	#-$400,d0
00013B8A 6E00                       		bgt.s	locret_1314E
00013B8C 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013B92 08E8 0000 0022             		bset	#0,$22(a0)
00013B98 303C 00A4                  		move.w	#$A4,d0
00013B9C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stopping sound
00013BA2                            
00013BA2                            locret_1314E:
00013BA2 4E75                       		rts	
00013BA4                            ; End of function Sonic_MoveRight
00013BA4                            
00013BA4                            ; ---------------------------------------------------------------------------
00013BA4                            ; Subroutine to	change Sonic's speed as he rolls
00013BA4                            ; ---------------------------------------------------------------------------
00013BA4                            
00013BA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BA4                            
00013BA4                            
00013BA4                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013BA4 3C38 F760                  		move.w	($FFFFF760).w,d6
00013BA8 E346                       		asl.w	#1,d6
00013BAA 3A38 F762                  		move.w	($FFFFF762).w,d5
00013BAE E245                       		asr.w	#1,d5
00013BB0 3838 F764                  		move.w	($FFFFF764).w,d4
00013BB4 E444                       		asr.w	#2,d4
00013BB6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013BBA 6600 0000                  		bne.w	loc_131CC
00013BBE 4A68 003E                  		tst.w	$3E(a0)
00013BC2 6600                       		bne.s	loc_13188
00013BC4 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013BCA 6700                       		beq.s	loc_1317C	; if not, branch
00013BCC 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013BD2 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013BD4 6100 0000                  		bsr.w	Sonic_RollLeft
00013BD8                            
00013BD8                            loc_1317C:
00013BD8 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013BDE 6700                       		beq.s	loc_13188	; if not, branch
00013BE0 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013BE6 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013BE8 6100 0000                  		bsr.w	Sonic_RollLeft
00013BEC 6000                       		bra.s	loc_13188
00013BEE                            
00013BEE                            SonicRS_RollRight:
00013BEE 6100 0000                  		bsr.w	Sonic_RollRight
00013BF2                            
00013BF2                            loc_13188:
00013BF2 3028 0014                  		move.w	$14(a0),d0
00013BF6 6700                       		beq.s	loc_131AA
00013BF8 6B00                       		bmi.s	loc_1319E
00013BFA 9045                       		sub.w	d5,d0
00013BFC 6400                       		bcc.s	loc_13198
00013BFE 303C 0000                  		move.w	#0,d0
00013C02                            
00013C02                            loc_13198:
00013C02 3140 0014                  		move.w	d0,$14(a0)
00013C06 6000                       		bra.s	loc_131AA
00013C08                            ; ===========================================================================
00013C08                            
00013C08                            loc_1319E:				; XREF: Sonic_RollSpeed
00013C08 D045                       		add.w	d5,d0
00013C0A 6400                       		bcc.s	loc_131A6
00013C0C 303C 0000                  		move.w	#0,d0
00013C10                            
00013C10                            loc_131A6:
00013C10 3140 0014                  		move.w	d0,$14(a0)
00013C14                            
00013C14                            loc_131AA:
00013C14 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013C18 6600                       		bne.s	loc_131CC	; if yes, branch
00013C1A 08A8 0002 0022             		bclr	#2,$22(a0)
00013C20 117C 0013 0016             		move.b	#$13,$16(a0)
00013C26 117C 0009 0017             		move.b	#9,$17(a0)
00013C2C 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013C32 5B68 000C                  		subq.w	#5,$C(a0)
00013C36                            
00013C36                            loc_131CC:
00013C36 1028 0026                  		move.b	$26(a0),d0
00013C3A 4EB9 0000 2D6C             		jsr	(CalcSine).l
00013C40 C1E8 0014                  		muls.w	$14(a0),d0
00013C44 E080                       		asr.l	#8,d0
00013C46 3140 0012                  		move.w	d0,$12(a0)
00013C4A C3E8 0014                  		muls.w	$14(a0),d1
00013C4E E081                       		asr.l	#8,d1
00013C50 0C41 1000                  		cmpi.w	#$1000,d1
00013C54 6F00                       		ble.s	loc_131F0
00013C56 323C 1000                  		move.w	#$1000,d1
00013C5A                            
00013C5A                            loc_131F0:
00013C5A 0C41 F000                  		cmpi.w	#-$1000,d1
00013C5E 6C00                       		bge.s	loc_131FA
00013C60 323C F000                  		move.w	#-$1000,d1
00013C64                            
00013C64                            loc_131FA:
00013C64 3141 0010                  		move.w	d1,$10(a0)
00013C68 6000 FDF6                  		bra.w	loc_1300C
00013C6C                            ; End of function Sonic_RollSpeed
00013C6C                            
00013C6C                            
00013C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C6C                            
00013C6C                            
00013C6C                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013C6C 3028 0014                  		move.w	$14(a0),d0
00013C70 6700                       		beq.s	loc_1320A
00013C72 6A00                       		bpl.s	loc_13218
00013C74                            
00013C74                            loc_1320A:
00013C74 08E8 0000 0022             		bset	#0,$22(a0)
00013C7A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013C80 4E75                       		rts	
00013C82                            ; ===========================================================================
00013C82                            
00013C82                            loc_13218:
00013C82 9044                       		sub.w	d4,d0
00013C84 6400                       		bcc.s	loc_13220
00013C86 303C FF80                  		move.w	#-$80,d0
00013C8A                            
00013C8A                            loc_13220:
00013C8A 3140 0014                  		move.w	d0,$14(a0)
00013C8E 4E75                       		rts	
00013C90                            ; End of function Sonic_RollLeft
00013C90                            
00013C90                            
00013C90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C90                            
00013C90                            
00013C90                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013C90 3028 0014                  		move.w	$14(a0),d0
00013C94 6B00                       		bmi.s	loc_1323A
00013C96 08A8 0000 0022             		bclr	#0,$22(a0)
00013C9C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013CA2 4E75                       		rts	
00013CA4                            ; ===========================================================================
00013CA4                            
00013CA4                            loc_1323A:
00013CA4 D044                       		add.w	d4,d0
00013CA6 6400                       		bcc.s	loc_13242
00013CA8 303C 0080                  		move.w	#$80,d0
00013CAC                            
00013CAC                            loc_13242:
00013CAC 3140 0014                  		move.w	d0,$14(a0)
00013CB0 4E75                       		rts	
00013CB2                            ; End of function Sonic_RollRight
00013CB2                            
00013CB2                            Sonic_AirUnroll:
00013CB2                            		
00013CB2 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013CB6 6600                       		bne.s	@timer
00013CB8 1038 F605                  		move.b	($FFFFF605).w,d0
00013CBC 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013CC0 6700                       		beq.s	@end	; if not, branch
00013CC2 08A8 0002 0022             		bclr	#2,$22(a0)
00013CC8 117C 0013 0016             		move.b	#$13,$16(a0)
00013CCE 117C 0009 0017             		move.b	#9,$17(a0)
00013CD4 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013CDA 303C 00A5                  		move.w	#$A5,d0
00013CDE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play fart sound
00013CE4 2028 0010                  		move.l	$10(a0),d0
00013CE8 D080                       		add.l	d0,d0
00013CEA 2140 0010                  		move.l	d0,$10(a0)
00013CEE 5B68 000C                  		subq.w	#5,$C(a0)
00013CF2                            	@end:
00013CF2 4E75                       		rts
00013CF4                            	@timer:
00013CF4 5328 003A                  		subq.b	#1,$3A(a0)
00013CF8 4E75                       		rts
00013CFA                            
00013CFA                            ; ---------------------------------------------------------------------------
00013CFA                            ; Subroutine to	change Sonic's direction while jumping
00013CFA                            ; ---------------------------------------------------------------------------
00013CFA                            
00013CFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CFA                            
00013CFA                            
00013CFA                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013CFA 3C38 F760                  		move.w	($FFFFF760).w,d6
00013CFE 3A38 F762                  		move.w	($FFFFF762).w,d5
00013D02 E345                       		asl.w	#1,d5
00013D04 0828 0004 0022             		btst	#4,$22(a0)
00013D0A 6600                       		bne.s	Obj01_ResetScr2
00013D0C 3028 0010                  		move.w	$10(a0),d0
00013D10 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013D16 6700                       		beq.s	loc_13278	; if not, branch
00013D18 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013D1E 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013D20 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013D24 6E00                       		bgt.s	loc_13278
00013D26 3001                       		move.w	d1,d0
00013D28                            
00013D28                            loc_13278:
00013D28 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013D2E 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013D30 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013D36 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013D38 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013D3C 6E00                       		bgt.s	Obj01_JumpMove
00013D3E 3001                       		move.w	d1,d0
00013D40 6000                       		bra.s	Obj01_JumpMove
00013D42                            
00013D42                            SonicCJD_JumpLeft:
00013D42 08E8 0000 0022             		bset	#0,$22(a0)
00013D48 9045                       		sub.w	d5,d0
00013D4A 3206                       		move.w	d6,d1
00013D4C 4441                       		neg.w	d1
00013D4E B041                       		cmp.w	d1,d0
00013D50                            		; bgt.s	loc_13278
00013D50                            		; move.w	d1,d0
00013D50 4E75                       		rts
00013D52                            
00013D52                            SonicCJD_JumpRight:
00013D52 08A8 0000 0022             		bclr	#0,$22(a0)
00013D58 D045                       		add.w	d5,d0
00013D5A B046                       		cmp.w	d6,d0
00013D5C 6D00                       		blt.s	Obj01_JumpMove
00013D5E 3006                       		move.w	d6,d0
00013D60                            
00013D60                            Obj01_JumpMove:
00013D60 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013D64                            
00013D64                            Obj01_ResetScr2:
00013D64 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013D6A 6700                       		beq.s	loc_132A4	; if yes, branch
00013D6C 6400                       		bcc.s	loc_132A0
00013D6E 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013D72                            
00013D72                            loc_132A0:
00013D72 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013D76                            
00013D76                            loc_132A4:
00013D76 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013D7C 6500                       		bcs.s	locret_132D2	; if yes, branch
00013D7E 3028 0010                  		move.w	$10(a0),d0
00013D82 3200                       		move.w	d0,d1
00013D84 EA41                       		asr.w	#5,d1
00013D86 6700                       		beq.s	locret_132D2
00013D88 6B00                       		bmi.s	loc_132C6
00013D8A 9041                       		sub.w	d1,d0
00013D8C 6400                       		bcc.s	loc_132C0
00013D8E 303C 0000                  		move.w	#0,d0
00013D92                            
00013D92                            loc_132C0:
00013D92 3140 0010                  		move.w	d0,$10(a0)
00013D96 4E75                       		rts	
00013D98                            ; ===========================================================================
00013D98                            
00013D98                            loc_132C6:
00013D98 9041                       		sub.w	d1,d0
00013D9A 6500                       		bcs.s	loc_132CE
00013D9C 303C 0000                  		move.w	#0,d0
00013DA0                            
00013DA0                            loc_132CE:
00013DA0 3140 0010                  		move.w	d0,$10(a0)
00013DA4                            
00013DA4                            locret_132D2:
00013DA4 4E75                       		rts	
00013DA6                            ; End of function Sonic_ChgJumpDir
00013DA6                            
00013DA6                            ; ===========================================================================
00013DA6                            ; ---------------------------------------------------------------------------
00013DA6                            ; Unused subroutine to squash Sonic
00013DA6                            ; ---------------------------------------------------------------------------
00013DA6 1028 0026                  		move.b	$26(a0),d0
00013DAA 0600 0020                  		addi.b	#$20,d0
00013DAE 0200 00C0                  		andi.b	#$C0,d0
00013DB2 6600                       		bne.s	locret_13302
00013DB4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013DB8 4A41                       		tst.w	d1
00013DBA 6A00                       		bpl.s	locret_13302
00013DBC 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013DC2 317C 0000 0010             		move.w	#0,$10(a0)
00013DC8 317C 0000 0012             		move.w	#0,$12(a0)
00013DCE 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013DD4                            
00013DD4                            locret_13302:
00013DD4 4E75                       		rts	
00013DD6                            ; ---------------------------------------------------------------------------
00013DD6                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013DD6                            ; ---------------------------------------------------------------------------
00013DD6                            
00013DD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DD6                            
00013DD6                            
00013DD6                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013DD6 2228 0008                  		move.l	8(a0),d1
00013DDA 3028 0010                  		move.w	$10(a0),d0
00013DDE 48C0                       		ext.l	d0
00013DE0 E180                       		asl.l	#8,d0
00013DE2 D280                       		add.l	d0,d1
00013DE4 4841                       		swap	d1
00013DE6 3038 F728                  		move.w	($FFFFF728).w,d0
00013DEA 0640 0010                  		addi.w	#$10,d0
00013DEE B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013DF0 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013DF2 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013DF6 0640 0128                  		addi.w	#$128,d0
00013DFA 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013DFE 6600                       		bne.s	loc_13332
00013E00 0640 0040                  		addi.w	#$40,d0
00013E04                            
00013E04                            loc_13332:
00013E04 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013E06 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013E08                            
00013E08                            loc_13336:
00013E08 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013E0C 0640 00E0                  		addi.w	#$E0,d0
00013E10 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013E14 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013E16 4E75                       		rts	
00013E18                            ; ===========================================================================
00013E18                            
00013E18                            Boundary_Bottom:
00013E18 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013E1E 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013E22 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013E28 6500 0000                  		bcs.w	KillSonic
00013E2C 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013E30 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013E36 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013E3C 4E75                       		rts	
00013E3E                            ; ===========================================================================
00013E3E                            
00013E3E                            Boundary_Sides:
00013E3E 3140 0008                  		move.w	d0,8(a0)
00013E42 317C 0000 000A             		move.w	#0,$A(a0)
00013E48 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013E4E 317C 0000 0014             		move.w	#0,$14(a0)
00013E54 60B2                       		bra.s	loc_13336
00013E56                            ; End of function Sonic_LevelBound
00013E56                            
00013E56                            ; ---------------------------------------------------------------------------
00013E56                            ; Subroutine allowing Sonic to roll when he's moving
00013E56                            ; ---------------------------------------------------------------------------
00013E56                            
00013E56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E56                            
00013E56                            
00013E56                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013E56 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013E5A 6600                       		bne.s	Obj01_NoRoll
00013E5C 3028 0014                  		move.w	$14(a0),d0
00013E60 6A00                       		bpl.s	loc_13392
00013E62 4440                       		neg.w	d0
00013E64                            
00013E64                            loc_13392:
00013E64 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013E68 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013E6A 1038 F602                  		move.b	($FFFFF602).w,d0
00013E6E 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013E72 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013E74 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013E7A 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013E7C                            
00013E7C                            Obj01_NoRoll:
00013E7C 4E75                       		rts	
00013E7E                            ; ===========================================================================
00013E7E                            
00013E7E                            Obj01_ChkRoll:
00013E7E 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013E84 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013E86 4E75                       		rts	
00013E88                            ; ===========================================================================
00013E88                            
00013E88                            Obj01_DoRoll:
00013E88 08E8 0002 0022             		bset	#2,$22(a0)
00013E8E 117C 000E 0016             		move.b	#$E,$16(a0)
00013E94 117C 0007 0017             		move.b	#7,$17(a0)
00013E9A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013EA0 5A68 000C                  		addq.w	#5,$C(a0)
00013EA4 303C 00BE                  		move.w	#$BE,d0
00013EA8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rolling sound
00013EAE 4A68 0014                  		tst.w	$14(a0)
00013EB2 6600                       		bne.s	locret_133E8
00013EB4 317C 0200 0014             		move.w	#$200,$14(a0)
00013EBA                            
00013EBA                            locret_133E8:
00013EBA 4E75                       		rts	
00013EBC                            ; End of function Sonic_Roll
00013EBC                            
00013EBC                            ; ---------------------------------------------------------------------------
00013EBC                            ; Subroutine allowing Sonic to jump
00013EBC                            ; ---------------------------------------------------------------------------
00013EBC                            
00013EBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EBC                            
00013EBC                            
00013EBC                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013EBC 1038 F603                  		move.b	($FFFFF603).w,d0
00013EC0 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013EC4 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013EC8 7000                       		moveq	#0,d0
00013ECA 1028 0026                  		move.b	$26(a0),d0
00013ECE 0600 0080                  		addi.b	#$80,d0
00013ED2 6100 0000                  		bsr.w	sub_14D48
00013ED6 0C41 0006                  		cmpi.w	#6,d1
00013EDA 6D00 0000                  		blt.w	locret_1348E
00013EDE 343C 0680                  		move.w	#$680,d2
00013EE2 0828 0006 0022             		btst	#6,$22(a0)
00013EE8 6700                       		beq.s	loc_1341C
00013EEA 343C 0380                  		move.w	#$380,d2
00013EEE                            
00013EEE                            loc_1341C:
00013EEE 7000                       		moveq	#0,d0
00013EF0 1028 0026                  		move.b	$26(a0),d0
00013EF4 0400 0040                  		subi.b	#$40,d0
00013EF8 4EB9 0000 2D6C             		jsr	(CalcSine).l
00013EFE C3C2                       		muls.w	d2,d1
00013F00 E081                       		asr.l	#8,d1
00013F02 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013F06 C1C2                       		muls.w	d2,d0
00013F08 E080                       		asr.l	#8,d0
00013F0A D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013F0E 08E8 0001 0022             		bset	#1,$22(a0)
00013F14 08A8 0005 0022             		bclr	#5,$22(a0)
00013F1A 588F                       		addq.l	#4,sp
00013F1C 117C 0001 003C             		move.b	#1,$3C(a0)
00013F22 4228 0038                  		clr.b	$38(a0)
00013F26 303C 00A0                  		move.w	#$A0,d0
00013F2A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play jumping sound
00013F30 117C 0013 0016             		move.b	#$13,$16(a0)
00013F36 117C 0009 0017             		move.b	#9,$17(a0)
00013F3C 0828 0002 0022             		btst	#2,$22(a0)
00013F42 6600                       		bne.s	loc_13490
00013F44 117C 000E 0016             		move.b	#$E,$16(a0)
00013F4A 117C 0007 0017             		move.b	#7,$17(a0)
00013F50 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013F56 08E8 0002 0022             		bset	#2,$22(a0)
00013F5C 5A68 000C                  		addq.w	#5,$C(a0)
00013F60 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013F66                            
00013F66                            locret_1348E:
00013F66 4E75                       		rts	
00013F68                            ; ===========================================================================
00013F68                            
00013F68                            loc_13490:
00013F68 08E8 0004 0022             		bset	#4,$22(a0)
00013F6E 4E75                       		rts	
00013F70                            ; End of function Sonic_Jump
00013F70                            
00013F70                            
00013F70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F70                            
00013F70                            
00013F70                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013F70 4A28 003C                  		tst.b	$3C(a0)
00013F74 6700                       		beq.s	loc_134C4
00013F76 323C FC00                  		move.w	#-$400,d1
00013F7A 0828 0006 0022             		btst	#6,$22(a0)
00013F80 6700                       		beq.s	loc_134AE
00013F82 323C FE00                  		move.w	#-$200,d1
00013F86                            
00013F86                            loc_134AE:
00013F86 B268 0012                  		cmp.w	$12(a0),d1
00013F8A 6F00                       		ble.s	locret_134C2
00013F8C 1038 F602                  		move.b	($FFFFF602).w,d0
00013F90 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013F94 6600                       		bne.s	locret_134C2	; if yes, branch
00013F96 3141 0012                  		move.w	d1,$12(a0)
00013F9A                            
00013F9A                            locret_134C2:
00013F9A 4E75                       		rts	
00013F9C                            ; ===========================================================================
00013F9C                            
00013F9C                            loc_134C4:
00013F9C 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013FA2 6C00                       		bge.s	locret_134D2
00013FA4 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013FAA                            
00013FAA                            locret_134D2:
00013FAA 4E75                       		rts	
00013FAC                            ; End of function Sonic_JumpHeight
00013FAC                            
00013FAC                            ; ---------------------------------------------------------------------------
00013FAC                            ; Subroutine to	slow Sonic walking up a	slope
00013FAC                            ; ---------------------------------------------------------------------------
00013FAC                            
00013FAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FAC                            
00013FAC                            
00013FAC                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013FAC 1028 0026                  		move.b	$26(a0),d0
00013FB0 0600 0060                  		addi.b	#$60,d0
00013FB4 0C00 00C0                  		cmpi.b	#$C0,d0
00013FB8 6400                       		bcc.s	locret_13508
00013FBA 1028 0026                  		move.b	$26(a0),d0
00013FBE 4EB9 0000 2D6C             		jsr	(CalcSine).l
00013FC4 C1FC 0020                  		muls.w	#$20,d0
00013FC8 E080                       		asr.l	#8,d0
00013FCA 4A68 0014                  		tst.w	$14(a0)
00013FCE 6700                       		beq.s	locret_13508
00013FD0 6B00                       		bmi.s	loc_13504
00013FD2 4A40                       		tst.w	d0
00013FD4 6700                       		beq.s	locret_13502
00013FD6 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013FDA                            
00013FDA                            locret_13502:
00013FDA 4E75                       		rts	
00013FDC                            ; ===========================================================================
00013FDC                            
00013FDC                            loc_13504:
00013FDC D168 0014                  		add.w	d0,$14(a0)
00013FE0                            
00013FE0                            locret_13508:
00013FE0 4E75                       		rts	
00013FE2                            ; End of function Sonic_SlopeResist
00013FE2                            
00013FE2                            ; ---------------------------------------------------------------------------
00013FE2                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013FE2                            ; ---------------------------------------------------------------------------
00013FE2                            
00013FE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FE2                            
00013FE2                            
00013FE2                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013FE2 1028 0026                  		move.b	$26(a0),d0
00013FE6 0600 0060                  		addi.b	#$60,d0
00013FEA 0C00 00C0                  		cmpi.b	#-$40,d0
00013FEE 6400                       		bcc.s	locret_13544
00013FF0 1028 0026                  		move.b	$26(a0),d0
00013FF4 4EB9 0000 2D6C             		jsr	(CalcSine).l
00013FFA C1FC 0050                  		muls.w	#$50,d0
00013FFE E080                       		asr.l	#8,d0
00014000 4A68 0014                  		tst.w	$14(a0)
00014004 6B00                       		bmi.s	loc_1353A
00014006 4A40                       		tst.w	d0
00014008 6A00                       		bpl.s	loc_13534
0001400A E480                       		asr.l	#2,d0
0001400C                            
0001400C                            loc_13534:
0001400C D168 0014                  		add.w	d0,$14(a0)
00014010 4E75                       		rts	
00014012                            ; ===========================================================================
00014012                            
00014012                            loc_1353A:
00014012 4A40                       		tst.w	d0
00014014 6B00                       		bmi.s	loc_13540
00014016 E480                       		asr.l	#2,d0
00014018                            
00014018                            loc_13540:
00014018 D168 0014                  		add.w	d0,$14(a0)
0001401C                            
0001401C                            locret_13544:
0001401C 4E75                       		rts	
0001401E                            ; End of function Sonic_RollRepel
0001401E                            
0001401E                            ; ---------------------------------------------------------------------------
0001401E                            ; Subroutine to	push Sonic down	a slope
0001401E                            ; ---------------------------------------------------------------------------
0001401E                            
0001401E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001401E                            
0001401E                            
0001401E                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
0001401E 4E71                       		nop	
00014020 4A28 0038                  		tst.b	$38(a0)
00014024 6600                       		bne.s	locret_13580
00014026 4A68 003E                  		tst.w	$3E(a0)
0001402A 6600                       		bne.s	loc_13582
0001402C 1028 0026                  		move.b	$26(a0),d0
00014030 0600 0020                  		addi.b	#$20,d0
00014034 0200 00C0                  		andi.b	#$C0,d0
00014038 6700                       		beq.s	locret_13580
0001403A 3028 0014                  		move.w	$14(a0),d0
0001403E 6A00                       		bpl.s	loc_1356A
00014040 4440                       		neg.w	d0
00014042                            
00014042                            loc_1356A:
00014042 0C40 0280                  		cmpi.w	#$280,d0
00014046 6400                       		bcc.s	locret_13580
00014048 4268 0014                  		clr.w	$14(a0)
0001404C 08E8 0001 0022             		bset	#1,$22(a0)
00014052 317C 001E 003E             		move.w	#$1E,$3E(a0)
00014058                            
00014058                            locret_13580:
00014058 4E75                       		rts	
0001405A                            ; ===========================================================================
0001405A                            
0001405A                            loc_13582:
0001405A 5368 003E                  		subq.w	#1,$3E(a0)
0001405E 4E75                       		rts	
00014060                            ; End of function Sonic_SlopeRepel
00014060                            
00014060                            ; ---------------------------------------------------------------------------
00014060                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014060                            ; ---------------------------------------------------------------------------
00014060                            
00014060                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014060                            
00014060                            
00014060                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014060 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014064 6700                       		beq.s	locret_135A2	; if already 0,	branch
00014066 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00014068                            
00014068 5400                       		addq.b	#2,d0		; increase angle
0001406A 6400                       		bcc.s	loc_13596
0001406C 7000                       		moveq	#0,d0
0001406E                            
0001406E                            loc_13596:
0001406E 6000                       		bra.s	loc_1359E
00014070                            ; ===========================================================================
00014070                            
00014070                            loc_13598:
00014070 5500                       		subq.b	#2,d0		; decrease angle
00014072 6400                       		bcc.s	loc_1359E
00014074 7000                       		moveq	#0,d0
00014076                            
00014076                            loc_1359E:
00014076 1140 0026                  		move.b	d0,$26(a0)
0001407A                            
0001407A                            locret_135A2:
0001407A 4E75                       		rts	
0001407C                            ; End of function Sonic_JumpAngle
0001407C                            
0001407C                            ; ---------------------------------------------------------------------------
0001407C                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
0001407C                            ; ---------------------------------------------------------------------------
0001407C                            
0001407C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001407C                            
0001407C                            
0001407C                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
0001407C 3228 0010                  		move.w	$10(a0),d1
00014080 3428 0012                  		move.w	$12(a0),d2
00014084 4EB9 0000 303A             		jsr	(CalcAngle).l
0001408A 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
0001408E 0400 0020                  		subi.b	#$20,d0
00014092 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00014096 0200 00C0                  		andi.b	#$C0,d0
0001409A 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
0001409E 0C00 0040                  		cmpi.b	#$40,d0
000140A2 6700 0000                  		beq.w	loc_13680
000140A6 0C00 0080                  		cmpi.b	#$80,d0
000140AA 6700 0000                  		beq.w	loc_136E2
000140AE 0C00 00C0                  		cmpi.b	#-$40,d0
000140B2 6700 0000                  		beq.w	loc_1373E
000140B6 6100 0000                  		bsr.w	Sonic_HitWall
000140BA 4A41                       		tst.w	d1
000140BC 6A00                       		bpl.s	loc_135F0
000140BE 9368 0008                  		sub.w	d1,8(a0)
000140C2 317C 0000 0010             		move.w	#0,$10(a0)
000140C8                            
000140C8                            loc_135F0:
000140C8 6100 0000                  		bsr.w	sub_14EB4
000140CC 4A41                       		tst.w	d1
000140CE 6A00                       		bpl.s	loc_13602
000140D0 D368 0008                  		add.w	d1,8(a0)
000140D4 317C 0000 0010             		move.w	#0,$10(a0)
000140DA                            
000140DA                            loc_13602:
000140DA 6100 0000                  		bsr.w	Sonic_HitFloor
000140DE 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000140E2 4A41                       		tst.w	d1
000140E4 6A00                       		bpl.s	locret_1367E
000140E6 1428 0012                  		move.b	$12(a0),d2
000140EA 5002                       		addq.b	#8,d2
000140EC 4402                       		neg.b	d2
000140EE B202                       		cmp.b	d2,d1
000140F0 6C00                       		bge.s	loc_1361E
000140F2 B002                       		cmp.b	d2,d0
000140F4 6D00                       		blt.s	locret_1367E
000140F6                            
000140F6                            loc_1361E:
000140F6 D368 000C                  		add.w	d1,$C(a0)
000140FA 1143 0026                  		move.b	d3,$26(a0)
000140FE 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014102 117C 0000 001C             		move.b	#0,$1C(a0)
00014108 1003                       		move.b	d3,d0
0001410A 0600 0020                  		addi.b	#$20,d0
0001410E 0200 0040                  		andi.b	#$40,d0
00014112 6600                       		bne.s	loc_1365C
00014114 1003                       		move.b	d3,d0
00014116 0600 0010                  		addi.b	#$10,d0
0001411A 0200 0020                  		andi.b	#$20,d0
0001411E 6700                       		beq.s	loc_1364E
00014120 E0E8 0012                  		asr	$12(a0)
00014124 6000                       		bra.s	loc_13670
00014126                            ; ===========================================================================
00014126                            
00014126                            loc_1364E:
00014126 317C 0000 0012             		move.w	#0,$12(a0)
0001412C 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014132 4E75                       		rts	
00014134                            ; ===========================================================================
00014134                            
00014134                            loc_1365C:
00014134 317C 0000 0010             		move.w	#0,$10(a0)
0001413A 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00014140 6F00                       		ble.s	loc_13670
00014142 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00014148                            
00014148                            loc_13670:
00014148 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001414E 4A03                       		tst.b	d3
00014150 6A00                       		bpl.s	locret_1367E
00014152 4468 0014                  		neg.w	$14(a0)
00014156                            
00014156                            locret_1367E:
00014156 4E75                       		rts	
00014158                            ; ===========================================================================
00014158                            
00014158                            loc_13680:
00014158 6100 0000                  		bsr.w	Sonic_HitWall
0001415C 4A41                       		tst.w	d1
0001415E 6A00                       		bpl.s	loc_1369A
00014160 9368 0008                  		sub.w	d1,8(a0)
00014164 317C 0000 0010             		move.w	#0,$10(a0)
0001416A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014170 4E75                       		rts	
00014172                            ; ===========================================================================
00014172                            
00014172                            loc_1369A:
00014172 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014176 4A41                       		tst.w	d1
00014178 6A00                       		bpl.s	loc_136B4
0001417A 9368 000C                  		sub.w	d1,$C(a0)
0001417E 4A68 0012                  		tst.w	$12(a0)
00014182 6A00                       		bpl.s	locret_136B2
00014184 317C 0000 0012             		move.w	#0,$12(a0)
0001418A                            
0001418A                            locret_136B2:
0001418A 4E75                       		rts	
0001418C                            ; ===========================================================================
0001418C                            
0001418C                            loc_136B4:
0001418C 4A68 0012                  		tst.w	$12(a0)
00014190 6B00                       		bmi.s	locret_136E0
00014192 6100 0000                  		bsr.w	Sonic_HitFloor
00014196 4A41                       		tst.w	d1
00014198 6A00                       		bpl.s	locret_136E0
0001419A D368 000C                  		add.w	d1,$C(a0)
0001419E 1143 0026                  		move.b	d3,$26(a0)
000141A2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000141A6 117C 0000 001C             		move.b	#0,$1C(a0)
000141AC 317C 0000 0012             		move.w	#0,$12(a0)
000141B2 3168 0010 0014             		move.w	$10(a0),$14(a0)
000141B8                            
000141B8                            locret_136E0:
000141B8 4E75                       		rts	
000141BA                            ; ===========================================================================
000141BA                            
000141BA                            loc_136E2:
000141BA 6100 0000                  		bsr.w	Sonic_HitWall
000141BE 4A41                       		tst.w	d1
000141C0 6A00                       		bpl.s	loc_136F4
000141C2 9368 0008                  		sub.w	d1,8(a0)
000141C6 317C 0000 0010             		move.w	#0,$10(a0)
000141CC                            
000141CC                            loc_136F4:
000141CC 6100 0000                  		bsr.w	sub_14EB4
000141D0 4A41                       		tst.w	d1
000141D2 6A00                       		bpl.s	loc_13706
000141D4 D368 0008                  		add.w	d1,8(a0)
000141D8 317C 0000 0010             		move.w	#0,$10(a0)
000141DE                            
000141DE                            loc_13706:
000141DE 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000141E2 4A41                       		tst.w	d1
000141E4 6A00                       		bpl.s	locret_1373C
000141E6 9368 000C                  		sub.w	d1,$C(a0)
000141EA 1003                       		move.b	d3,d0
000141EC 0600 0020                  		addi.b	#$20,d0
000141F0 0200 0040                  		andi.b	#$40,d0
000141F4 6600                       		bne.s	loc_13726
000141F6 317C 0000 0012             		move.w	#0,$12(a0)
000141FC 4E75                       		rts	
000141FE                            ; ===========================================================================
000141FE                            
000141FE                            loc_13726:
000141FE 1143 0026                  		move.b	d3,$26(a0)
00014202 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014206 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001420C 4A03                       		tst.b	d3
0001420E 6A00                       		bpl.s	locret_1373C
00014210 4468 0014                  		neg.w	$14(a0)
00014214                            
00014214                            locret_1373C:
00014214 4E75                       		rts	
00014216                            ; ===========================================================================
00014216                            
00014216                            loc_1373E:
00014216 6100 0000                  		bsr.w	sub_14EB4
0001421A 4A41                       		tst.w	d1
0001421C 6A00                       		bpl.s	loc_13758
0001421E D368 0008                  		add.w	d1,8(a0)
00014222 317C 0000 0010             		move.w	#0,$10(a0)
00014228 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001422E 4E75                       		rts	
00014230                            ; ===========================================================================
00014230                            
00014230                            loc_13758:
00014230 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014234 4A41                       		tst.w	d1
00014236 6A00                       		bpl.s	loc_13772
00014238 9368 000C                  		sub.w	d1,$C(a0)
0001423C 4A68 0012                  		tst.w	$12(a0)
00014240 6A00                       		bpl.s	locret_13770
00014242 317C 0000 0012             		move.w	#0,$12(a0)
00014248                            
00014248                            locret_13770:
00014248 4E75                       		rts	
0001424A                            ; ===========================================================================
0001424A                            
0001424A                            loc_13772:
0001424A 4A68 0012                  		tst.w	$12(a0)
0001424E 6B00                       		bmi.s	locret_1379E
00014250 6100 0000                  		bsr.w	Sonic_HitFloor
00014254 4A41                       		tst.w	d1
00014256 6A00                       		bpl.s	locret_1379E
00014258 D368 000C                  		add.w	d1,$C(a0)
0001425C 1143 0026                  		move.b	d3,$26(a0)
00014260 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014264 117C 0000 001C             		move.b	#0,$1C(a0)
0001426A 317C 0000 0012             		move.w	#0,$12(a0)
00014270 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014276                            
00014276                            locret_1379E:
00014276 4E75                       		rts	
00014278                            ; End of function Sonic_Floor
00014278                            
00014278                            ; ---------------------------------------------------------------------------
00014278                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00014278                            ; ---------------------------------------------------------------------------
00014278                            
00014278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014278                            
00014278                            
00014278                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00014278 0828 0004 0022             		btst	#4,$22(a0)
0001427E 6700                       		beq.s	loc_137AE
00014280 4E71                       		nop	
00014282 4E71                       		nop	
00014284 4E71                       		nop	
00014286                            
00014286                            loc_137AE:
00014286 08A8 0005 0022             		bclr	#5,$22(a0)
0001428C 08A8 0001 0022             		bclr	#1,$22(a0)
00014292 08A8 0004 0022             		bclr	#4,$22(a0)
00014298 0828 0002 0022             		btst	#2,$22(a0)
0001429E 6700                       		beq.s	loc_137E4
000142A0 08A8 0002 0022             		bclr	#2,$22(a0)
000142A6 117C 0013 0016             		move.b	#$13,$16(a0)
000142AC 117C 0009 0017             		move.b	#9,$17(a0)
000142B2 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000142B8 5B68 000C                  		subq.w	#5,$C(a0)
000142BC                            
000142BC                            loc_137E4:
000142BC 117C 0000 003C             		move.b	#0,$3C(a0)
000142C2 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000142C8 4E75                       		rts	
000142CA                            ; End of function Sonic_ResetOnFloor
000142CA                            
000142CA                            ; ===========================================================================
000142CA                            ; ---------------------------------------------------------------------------
000142CA                            ; Sonic	when he	gets hurt
000142CA                            ; ---------------------------------------------------------------------------
000142CA                            
000142CA                            Obj01_Hurt:				; XREF: Obj01_Index
000142CA 4EBA 9D40                  		jsr	SpeedToPos
000142CE 0668 0030 0012             		addi.w	#$30,$12(a0)
000142D4 0828 0006 0022             		btst	#6,$22(a0)
000142DA 6700                       		beq.s	loc_1380C
000142DC 0468 0020 0012             		subi.w	#$20,$12(a0)
000142E2                            
000142E2                            loc_1380C:
000142E2 6100 0000                  		bsr.w	Sonic_HurtStop
000142E6 6100 FAEE                  		bsr.w	Sonic_LevelBound
000142EA 6100 F4B4                  		bsr.w	Sonic_RecordPos
000142EE 6100 0000                  		bsr.w	Sonic_Animate
000142F2 6100 0000                  		bsr.w	LoadSonicDynPLC
000142F6 4EFA 9D3A                  		jmp	DisplaySprite
000142FA                            
000142FA                            ; ---------------------------------------------------------------------------
000142FA                            ; Subroutine to	stop Sonic falling after he's been hurt
000142FA                            ; ---------------------------------------------------------------------------
000142FA                            
000142FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142FA                            
000142FA                            
000142FA                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000142FA 3038 F72E                  		move.w	($FFFFF72E).w,d0
000142FE 0640 00E0                  		addi.w	#$E0,d0
00014302 B068 000C                  		cmp.w	$C(a0),d0
00014306 6500 0000                  		bcs.w	KillSonic
0001430A 6100 FD70                  		bsr.w	Sonic_Floor
0001430E 0828 0001 0022             		btst	#1,$22(a0)
00014314 6600                       		bne.s	locret_13860
00014316 7000                       		moveq	#0,d0
00014318 3140 0012                  		move.w	d0,$12(a0)
0001431C 3140 0010                  		move.w	d0,$10(a0)
00014320 3140 0014                  		move.w	d0,$14(a0)
00014324 117C 0000 001C             		move.b	#0,$1C(a0)
0001432A 5528 0024                  		subq.b	#2,$24(a0)
0001432E 317C 0078 0030             		move.w	#$78,$30(a0)
00014334                            
00014334                            locret_13860:
00014334 4E75                       		rts	
00014336                            ; End of function Sonic_HurtStop
00014336                            
00014336                            ; ===========================================================================
00014336                            ; ---------------------------------------------------------------------------
00014336                            ; Sonic	when he	dies
00014336                            ; ---------------------------------------------------------------------------
00014336                            
00014336                            Obj01_Death:				; XREF: Obj01_Index
00014336 6100 0000                  		bsr.w	GameOver
0001433A 4EBA 9C5E                  		jsr	ObjectFall
0001433E 6100 F460                  		bsr.w	Sonic_RecordPos
00014342 6100 0000                  		bsr.w	Sonic_Animate
00014346 6100 0000                  		bsr.w	LoadSonicDynPLC
0001434A 4EFA 9CE6                  		jmp	DisplaySprite
0001434E                            
0001434E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001434E                            
0001434E                            
0001434E                            GameOver:				; XREF: Obj01_Death
0001434E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014352 0640 0100                  		addi.w	#$100,d0
00014356 B068 000C                  		cmp.w	$C(a0),d0
0001435A 6400 0000                  		bcc.w	locret_13900
0001435E 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014364 5428 0024                  		addq.b	#2,$24(a0)
00014368 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001436C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014370 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014374 6600                       		bne.s	loc_138D4
00014376 317C 0000 003A             		move.w	#0,$3A(a0)
0001437C 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014382 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014388 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
0001438E 4238 FE1A                  		clr.b	($FFFFFE1A).w
00014392                            
00014392                            loc_138C2:
00014392 303C 008F                  		move.w	#$8F,d0
00014396 4EB9 0000 15CC             		jsr	(PlaySound).l	; play game over music
0001439C 7003                       		moveq	#3,d0
0001439E 4EF9 0000 17B6             		jmp	(LoadPLC).l	; load game over patterns
000143A4                            ; ===========================================================================
000143A4                            
000143A4                            loc_138D4:
000143A4 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000143AA 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000143AE 6700                       		beq.s	locret_13900	; if not, branch
000143B0 317C 0000 003A             		move.w	#0,$3A(a0)
000143B6 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000143BC 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000143C2 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
000143C8 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000143CE 60C2                       		bra.s	loc_138C2
000143D0                            ; ===========================================================================
000143D0                            
000143D0                            locret_13900:
000143D0 4E75                       		rts	
000143D2                            ; End of function GameOver
000143D2                            
000143D2                            ; ===========================================================================
000143D2                            ; ---------------------------------------------------------------------------
000143D2                            ; Sonic	when the level is restarted
000143D2                            ; ---------------------------------------------------------------------------
000143D2                            
000143D2                            Obj01_ResetLevel:			; XREF: Obj01_Index
000143D2 4A68 003A                  		tst.w	$3A(a0)
000143D6 6700                       		beq.s	locret_13914
000143D8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000143DC 6600                       		bne.s	locret_13914
000143DE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000143E4                            
000143E4                            locret_13914:
000143E4 4E75                       		rts	
000143E6                            
000143E6                            ; ---------------------------------------------------------------------------
000143E6                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
000143E6                            ; ---------------------------------------------------------------------------
000143E6                            
000143E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000143E6                            
000143E6                            
000143E6                            Sonic_Loops:				; XREF: Obj01_Control
000143E6                            ;		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
000143E6                            ;		beq.s	loc_13926	; if yes, branch
000143E6                            ;		tst.b	($FFFFFE10).w	; is level GHZ ?
000143E6                            ;		bne.w	locret_139C2	; if not, branch
000143E6                            ;		this is commented out, please do more plane messups id love that
000143E6                            ;loc_13926:
000143E6 3028 000C                  		move.w	$C(a0),d0
000143EA E248                       		lsr.w	#1,d0
000143EC 0240 0380                  		andi.w	#$380,d0
000143F0 1228 0008                  		move.b	8(a0),d1
000143F4 0241 007F                  		andi.w	#$7F,d1
000143F8 D041                       		add.w	d1,d0
000143FA 43F8 A400                  		lea	($FFFFA400).w,a1
000143FE 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014402 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014406 6700 FA76                  		beq.w	Obj01_ChkRoll
0001440A B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
0001440E 6700 FA6E                  		beq.w	Obj01_ChkRoll
00014412 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014416 6700                       		beq.s	loc_13976
00014418 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
0001441C 6700                       		beq.s	loc_13966
0001441E 08A8 0006 0001             		bclr	#6,1(a0)
00014424 4E75                       		rts	
00014426                            ; ===========================================================================
00014426                            
00014426                            loc_13966:
00014426 0828 0001 0022             		btst	#1,$22(a0)
0001442C 6700                       		beq.s	loc_13976
0001442E 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014434 4E75                       		rts	
00014436                            ; ===========================================================================
00014436                            
00014436                            loc_13976:
00014436 3428 0008                  		move.w	8(a0),d2
0001443A 0C02 002C                  		cmpi.b	#$2C,d2
0001443E 6400                       		bcc.s	loc_13988
00014440 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014446 4E75                       		rts	
00014448                            ; ===========================================================================
00014448                            
00014448                            loc_13988:
00014448 0C02 00E0                  		cmpi.b	#-$20,d2
0001444C 6500                       		bcs.s	loc_13996
0001444E 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014454 4E75                       		rts	
00014456                            ; ===========================================================================
00014456                            
00014456                            loc_13996:
00014456 0828 0006 0001             		btst	#6,1(a0)
0001445C 6600                       		bne.s	loc_139B2
0001445E 1228 0026                  		move.b	$26(a0),d1
00014462 6700                       		beq.s	locret_139C2
00014464 0C01 0080                  		cmpi.b	#-$80,d1
00014468 6200                       		bhi.s	locret_139C2
0001446A 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014470 4E75                       		rts	
00014472                            ; ===========================================================================
00014472                            
00014472                            loc_139B2:
00014472 1228 0026                  		move.b	$26(a0),d1
00014476 0C01 0080                  		cmpi.b	#-$80,d1
0001447A 6300                       		bls.s	locret_139C2
0001447C 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014482                            
00014482                            locret_139C2:
00014482 4E75                       		rts	
00014484                            ; End of function Sonic_Loops
00014484                            
00014484                            ; ---------------------------------------------------------------------------
00014484                            ; Subroutine to	animate	Sonic's sprites
00014484                            ; ---------------------------------------------------------------------------
00014484                            
00014484                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014484                            
00014484                            Player_Anim:
00014484 0000 0000                  	dc.l	SonicAniData
00014488 0000 0000                  	dc.l	SonicAniData ; gronic
0001448C 0000 0000                  	dc.l	SonicAniData ; anakama
00014490 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
00014494                            
00014494                            	; Insert more animation data for other characters here
00014494                            	
00014494                            Sonic_Animate:				; XREF: Obj01_Control; et al
00014494 7000                       			moveq	#0,d0
00014496 1038 FFE8                  		move.b	(v_character),d0
0001449A E548                       		lsl.w	#2,d0
0001449C 43FA FFE6                  		lea 	Player_Anim(pc),a1
000144A0                            		
000144A0 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
000144A4                            	
000144A4 7000                       		moveq	#0,d0
000144A6 1028 001C                  		move.b	$1C(a0),d0
000144AA B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000144AE 6700                       		beq.s	SAnim_Do	; if not, branch
000144B0 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000144B4 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000144BA 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
000144C0                            
000144C0                            SAnim_Do:
000144C0 D040                       		add.w	d0,d0
000144C2 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000144C6 1011                       		move.b	(a1),d0
000144C8 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
000144CA 1228 0022                  		move.b	$22(a0),d1
000144CE 0201 0001                  		andi.b	#1,d1
000144D2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000144D8 8328 0001                  		or.b	d1,1(a0)
000144DC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000144E0 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
000144E2 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000144E6                            
000144E6                            SAnim_Do2:
000144E6 7200                       		moveq	#0,d1
000144E8 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000144EC 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000144F0 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
000144F2                            
000144F2                            SAnim_Next:
000144F2 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
000144F6 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000144FA                            
000144FA                            SAnim_Delay:
000144FA 4E75                       		rts	
000144FC                            ; ===========================================================================
000144FC                            
000144FC                            SAnim_End_FF:
000144FC 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000144FE 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014500 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014506 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001450A 60E6                       		bra.s	SAnim_Next
0001450C                            ; ===========================================================================
0001450C                            
0001450C                            SAnim_End_FE:
0001450C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001450E 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014510 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014514 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014518 9200                       		sub.b	d0,d1
0001451A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0001451E 60D2                       		bra.s	SAnim_Next
00014520                            ; ===========================================================================
00014520                            
00014520                            SAnim_End_FD:
00014520 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014522 6600                       		bne.s	SAnim_End	; if not, branch
00014524 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001452A                            
0001452A                            SAnim_End:
0001452A 4E75                       		rts	
0001452C                            ; ===========================================================================
0001452C                            
0001452C                            SAnim_WalkRun:				; XREF: SAnim_Do
0001452C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014530 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014532 5200                       		addq.b	#1,d0		; is animation walking/running?
00014534 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014538 7200                       		moveq	#0,d1
0001453A 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001453E 1428 0022                  		move.b	$22(a0),d2
00014542 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014546 6600                       		bne.s	loc_13A70	; if yes, branch
00014548 4600                       		not.b	d0		; reverse angle
0001454A                            
0001454A                            loc_13A70:
0001454A 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001454E 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014550 7203                       		moveq	#3,d1
00014552                            
00014552                            loc_13A78:
00014552 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014558 B302                       		eor.b	d1,d2
0001455A 8528 0001                  		or.b	d2,1(a0)
0001455E 0828 0005 0022             		btst	#5,$22(a0)
00014564 6600 0000                  		bne.w	SAnim_Push
00014568 E808                       		lsr.b	#4,d0		; divide angle by $10
0001456A 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001456E 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014572 6A00                       		bpl.s	loc_13A9C
00014574 4442                       		neg.w	d2
00014576                            
00014576                            loc_13A9C:
00014576 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
0001457C 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014580 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014582 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014588 1200                       		move.b	d0,d1
0001458A E209                       		lsr.b	#1,d1
0001458C D001                       		add.b	d1,d0
0001458E                            
0001458E                            loc_13AB4:
0001458E D000                       		add.b	d0,d0
00014590 1600                       		move.b	d0,d3
00014592 4442                       		neg.w	d2
00014594 0642 0800                  		addi.w	#$800,d2
00014598 6A00                       		bpl.s	loc_13AC2
0001459A 7400                       		moveq	#0,d2
0001459C                            
0001459C                            loc_13AC2:
0001459C E04A                       		lsr.w	#8,d2
0001459E 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000145A2 6100 FF42                  		bsr.w	SAnim_Do2
000145A6 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000145AA 4E75                       		rts	
000145AC                            ; ===========================================================================
000145AC                            
000145AC                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000145AC 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000145AE 6600                       		bne.s	SAnim_Push	; if not, branch
000145B0 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000145B4 6A00                       		bpl.s	loc_13ADE
000145B6 4442                       		neg.w	d2
000145B8                            
000145B8                            loc_13ADE:
000145B8 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000145BE 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000145C2 6400                       		bcc.s	loc_13AF0	; if yes, branch
000145C4 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000145CA                            
000145CA                            loc_13AF0:
000145CA 4442                       		neg.w	d2
000145CC 0642 0400                  		addi.w	#$400,d2
000145D0 6A00                       		bpl.s	loc_13AFA
000145D2 7400                       		moveq	#0,d2
000145D4                            
000145D4                            loc_13AFA:
000145D4 E04A                       		lsr.w	#8,d2
000145D6 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000145DA 1228 0022                  		move.b	$22(a0),d1
000145DE 0201 0001                  		andi.b	#1,d1
000145E2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000145E8 8328 0001                  		or.b	d1,1(a0)
000145EC 6000 FEF8                  		bra.w	SAnim_Do2
000145F0                            ; ===========================================================================
000145F0                            
000145F0                            SAnim_Push:				; XREF: SAnim_RollJump
000145F0 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000145F4 6B00                       		bmi.s	loc_13B1E
000145F6 4442                       		neg.w	d2
000145F8                            
000145F8                            loc_13B1E:
000145F8 0642 0800                  		addi.w	#$800,d2
000145FC 6A00                       		bpl.s	loc_13B26
000145FE 7400                       		moveq	#0,d2
00014600                            
00014600                            loc_13B26:
00014600 EC4A                       		lsr.w	#6,d2
00014602 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014606 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001460C 1228 0022                  		move.b	$22(a0),d1
00014610 0201 0001                  		andi.b	#1,d1
00014614 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001461A 8328 0001                  		or.b	d1,1(a0)
0001461E 6000 FEC6                  		bra.w	SAnim_Do2
00014622                            ; End of function Sonic_Animate
00014622                            
00014622                            ; ===========================================================================
00014622                            SonicAniData:
00014622                            	include "_anim\Sonic.asm"
00014622                            ; ---------------------------------------------------------------------------
00014622                            ; Animation script - Sonic
00014622                            ; ---------------------------------------------------------------------------
00014622 0000                       		dc.w SonAni_Walk-SonicAniData
00014624 0000                       		dc.w SonAni_Run-SonicAniData
00014626 0000                       		dc.w SonAni_Roll-SonicAniData
00014628 0000                       		dc.w SonAni_Roll2-SonicAniData
0001462A 0000                       		dc.w SonAni_Push-SonicAniData
0001462C 0000                       		dc.w SonAni_Wait-SonicAniData
0001462E 0000                       		dc.w SonAni_Balance-SonicAniData
00014630 0000                       		dc.w SonAni_LookUp-SonicAniData
00014632 0000                       		dc.w SonAni_Duck-SonicAniData
00014634 0000                       		dc.w SonAni_Warp1-SonicAniData
00014636 0000                       		dc.w SonAni_Warp2-SonicAniData
00014638 0000                       		dc.w SonAni_Warp3-SonicAniData
0001463A 0000                       		dc.w SonAni_Warp4-SonicAniData
0001463C 0000                       		dc.w SonAni_Stop-SonicAniData
0001463E 0000                       		dc.w SonAni_Float1-SonicAniData
00014640 0000                       		dc.w SonAni_Float2-SonicAniData
00014642 0000                       		dc.w SonAni_Spring-SonicAniData
00014644 0000                       		dc.w SonAni_LZHang-SonicAniData
00014646 0000                       		dc.w SonAni_Leap1-SonicAniData
00014648 0000                       		dc.w SonAni_Leap2-SonicAniData
0001464A 0000                       		dc.w SonAni_Surf-SonicAniData
0001464C 0000                       		dc.w SonAni_Bubble-SonicAniData
0001464E 0000                       		dc.w SonAni_Death1-SonicAniData
00014650 0000                       		dc.w SonAni_Drown-SonicAniData
00014652 0000                       		dc.w SonAni_Death2-SonicAniData
00014654 0000                       		dc.w SonAni_Shrink-SonicAniData
00014656 0000                       		dc.w SonAni_Hurt-SonicAniData
00014658 0000                       		dc.w SonAni_LZSlide-SonicAniData
0001465A 0000                       		dc.w SonAni_Blank-SonicAniData
0001465C 0000                       		dc.w SonAni_Float3-SonicAniData
0001465E 0000                       		dc.w SonAni_Float4-SonicAniData
00014660 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
0001466A FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014672 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
0001467A FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014682 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
0001468A 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000146A0 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000146A4 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000146A8 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000146AC 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000146B0 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000146B4 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000146B8 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000146BC 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000146C0 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000146C4 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000146CC 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000146D0 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000146D4 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000146DA 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000146E0 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000146E4 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000146EC 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000146F0 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000146F4 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000146F8 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014702 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
00014706 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
0001470A 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001470E 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014716 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
0001471A                            		even
0001471A                            		even
0001471A                            
0001471A                            ; ---------------------------------------------------------------------------
0001471A                            ; Sonic	pattern	loading	subroutine
0001471A                            ; ---------------------------------------------------------------------------
0001471A                            
0001471A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001471A                            Player_DPLC:
0001471A 0000 0000                  	dc.l	SonicDynPLC
0001471E 0000 0000                  	dc.l	SonicDynPLC ; gronic
00014722 0000 0000                  	dc.l	SonicDynPLC ; anakama
00014726 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
0001472A                            	; add pointers for player dplc here
0001472A                            Player_Art:
0001472A 0000 0000                  	dc.l	Art_Sonic
0001472E 0000 0000                  	dc.l	Art_Sonic ; gronic
00014732 0000 0000                  	dc.l	Art_Sonic ; anakama
00014736 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
0001473A                            	; add pointers for player art here
0001473A                            
0001473A                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001473A 7000                       		moveq	#0,d0
0001473C 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014740 B038 F766                  		cmp.b	($FFFFF766).w,d0
00014744 6700                       		beq.s	locret_13C96
00014746 11C0 F766                  		move.b	d0,($FFFFF766).w
0001474A                            		
0001474A 323C 0000                  		move.w	#0,d1
0001474E 1238 FFE8                  		move.b	(v_character),d1
00014752 E549                       		lsl.w	#2,d1
00014754 45FA FFC4                  		lea 	Player_DPLC(pc),a2
00014758                            
00014758 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
0001475C                            		
0001475C D040                       		add.w	d0,d0
0001475E D4F2 0000                  		adda.w	(a2,d0.w),a2
00014762 7200                       		moveq	#0,d1
00014764 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014766 5301                       		subq.b	#1,d1
00014768 6B00                       		bmi.s	locret_13C96
0001476A 47F8 C800                  		lea	($FFFFC800).w,a3
0001476E 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014774                            
00014774                            SPLC_ReadEntry:
00014774 303C 0000                  		move.w	#0,d0
00014778 1038 FFE8                  		move.b	(v_character),d0
0001477C E548                       		lsl.w	#2,d0
0001477E 43FA FFAA                  		lea 	Player_Art(pc),a1
00014782                            
00014782 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
00014786                            
00014786 7400                       		moveq	#0,d2
00014788 141A                       		move.b	(a2)+,d2
0001478A 3002                       		move.w	d2,d0
0001478C E808                       		lsr.b	#4,d0
0001478E E14A                       		lsl.w	#8,d2
00014790 141A                       		move.b	(a2)+,d2
00014792 EB4A                       		lsl.w	#5,d2
00014794 D3C2                       		adda.l	d2,a1
00014796                            
00014796                            SPLC_LoadTile:
00014796 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
0001479A 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
0001479E 47EB 0020                  		lea	$20(a3),a3	; next tile
000147A2 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
000147A6                            
000147A6 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
000147AA                            
000147AA                            locret_13C96:
000147AA 4E75                       		rts	
000147AC                            ; End of function LoadSonicDynPLC
000147AC                            
000147AC                            ; ===========================================================================
000147AC                            ; ---------------------------------------------------------------------------
000147AC                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
000147AC                            ; ---------------------------------------------------------------------------
000147AC                            
000147AC                            Obj0A:					; XREF: Obj_Index
000147AC 7000                       		moveq	#0,d0
000147AE 1028 0024                  		move.b	$24(a0),d0
000147B2 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000147B6 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
000147BA                            ; ===========================================================================
000147BA 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
000147BE 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
000147C2 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
000147C6 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
000147CA 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
000147CC                            ; ===========================================================================
000147CC                            
000147CC                            Obj0A_Main:				; XREF: Obj0A_Index
000147CC 5428 0024                  		addq.b	#2,$24(a0)
000147D0 217C 0001 33C4 0004        		move.l	#Map_obj64,4(a0)
000147D8 317C 8348 0002             		move.w	#$8348,2(a0)
000147DE 117C 0084 0001             		move.b	#$84,1(a0)
000147E4 117C 0010 0019             		move.b	#$10,$19(a0)
000147EA 117C 0001 0018             		move.b	#1,$18(a0)
000147F0 1028 0028                  		move.b	$28(a0),d0
000147F4 6A00                       		bpl.s	loc_13D00
000147F6 5028 0024                  		addq.b	#8,$24(a0)
000147FA 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014802 317C 0440 0002             		move.w	#$440,2(a0)
00014808 0240 007F                  		andi.w	#$7F,d0
0001480C 1140 0033                  		move.b	d0,$33(a0)
00014810 6000 0000                  		bra.w	Obj0A_Countdown
00014814                            ; ===========================================================================
00014814                            
00014814                            loc_13D00:
00014814 1140 001C                  		move.b	d0,$1C(a0)
00014818 3168 0008 0030             		move.w	8(a0),$30(a0)
0001481E 317C FF78 0012             		move.w	#-$88,$12(a0)
00014824                            
00014824                            Obj0A_Animate:				; XREF: Obj0A_Index
00014824 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001482A 4EB9 0000 B090             		jsr	AnimateSprite
00014830                            
00014830                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014830 3038 F646                  		move.w	($FFFFF646).w,d0
00014834 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014838 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
0001483A 117C 0006 0024             		move.b	#6,$24(a0)
00014840 5E28 001C                  		addq.b	#7,$1C(a0)
00014844 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
0001484A 6700                       		beq.s	Obj0A_Display
0001484C 6000                       		bra.s	Obj0A_Display
0001484E                            ; ===========================================================================
0001484E                            
0001484E                            Obj0A_Wobble:
0001484E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014852 6700                       		beq.s	loc_13D44
00014854 5868 0030                  		addq.w	#4,$30(a0)
00014858                            
00014858                            loc_13D44:
00014858 1028 0026                  		move.b	$26(a0),d0
0001485C 5228 0026                  		addq.b	#1,$26(a0)
00014860 0240 007F                  		andi.w	#$7F,d0
00014864 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001486A 1031 0000                  		move.b	(a1,d0.w),d0
0001486E 4880                       		ext.w	d0
00014870 D068 0030                  		add.w	$30(a0),d0
00014874 3140 0008                  		move.w	d0,8(a0)
00014878 6100                       		bsr.s	Obj0A_ShowNumber
0001487A 4EBA 9790                  		jsr	SpeedToPos
0001487E 4A28 0001                  		tst.b	1(a0)
00014882 6A00                       		bpl.s	Obj0A_Delete
00014884 4EFA 97AC                  		jmp	DisplaySprite
00014888                            ; ===========================================================================
00014888                            
00014888                            Obj0A_Delete:
00014888 4EFA 97E4                  		jmp	DeleteObject
0001488C                            ; ===========================================================================
0001488C                            
0001488C                            Obj0A_Display:				; XREF: Obj0A_Index
0001488C 6100                       		bsr.s	Obj0A_ShowNumber
0001488E 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014894 4EB9 0000 B090             		jsr	AnimateSprite
0001489A 4EFA 9796                  		jmp	DisplaySprite
0001489E                            ; ===========================================================================
0001489E                            
0001489E                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001489E 4EFA 97CE                  		jmp	DeleteObject
000148A2                            ; ===========================================================================
000148A2                            
000148A2                            Obj0A_AirLeft:				; XREF: Obj0A_Index
000148A2 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
000148A8 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
000148AA 5368 0038                  		subq.w	#1,$38(a0)
000148AE 6600                       		bne.s	Obj0A_Display2
000148B0 117C 000E 0024             		move.b	#$E,$24(a0)
000148B6 5E28 001C                  		addq.b	#7,$1C(a0)
000148BA 60D0                       		bra.s	Obj0A_Display
000148BC                            ; ===========================================================================
000148BC                            
000148BC                            Obj0A_Display2:
000148BC 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000148C2 4EB9 0000 B090             		jsr	AnimateSprite
000148C8 4A28 0001                  		tst.b	1(a0)
000148CC 6A00                       		bpl.s	Obj0A_Delete3
000148CE 4EFA 9762                  		jmp	DisplaySprite
000148D2                            ; ===========================================================================
000148D2                            
000148D2                            Obj0A_Delete3:
000148D2 4EFA 979A                  		jmp	DeleteObject
000148D6                            ; ===========================================================================
000148D6                            
000148D6                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
000148D6 4A68 0038                  		tst.w	$38(a0)
000148DA 6700                       		beq.s	locret_13E1A
000148DC 5368 0038                  		subq.w	#1,$38(a0)
000148E0 6600                       		bne.s	locret_13E1A
000148E2 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000148E8 6400                       		bcc.s	locret_13E1A
000148EA 317C 000F 0038             		move.w	#$F,$38(a0)
000148F0 4268 0012                  		clr.w	$12(a0)
000148F4 117C 0080 0001             		move.b	#$80,1(a0)
000148FA 3028 0008                  		move.w	8(a0),d0
000148FE 9078 F700                  		sub.w	($FFFFF700).w,d0
00014902 0640 0080                  		addi.w	#$80,d0
00014906 3140 0008                  		move.w	d0,8(a0)
0001490A 3028 000C                  		move.w	$C(a0),d0
0001490E 9078 F704                  		sub.w	($FFFFF704).w,d0
00014912 0640 0080                  		addi.w	#$80,d0
00014916 3140 000A                  		move.w	d0,$A(a0)
0001491A 117C 000C 0024             		move.b	#$C,$24(a0)
00014920                            
00014920                            locret_13E1A:
00014920 4E75                       		rts	
00014922                            ; ===========================================================================
00014922                            Obj0A_WobbleData:
00014922 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014933 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014944 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014955 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014965 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014972 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001497F FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001498C FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014999 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
000149A2                            ; ===========================================================================
000149A2                            
000149A2                            Obj0A_Countdown:			; XREF: Obj0A_Index
000149A2 4A68 002C                  		tst.w	$2C(a0)
000149A6 6600 0000                  		bne.w	loc_13F86
000149AA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000149B0 6400 0000                  		bcc.w	locret_1408C
000149B4 0838 0006 D022             		btst	#6,($FFFFD022).w
000149BA 6700 0000                  		beq.w	locret_1408C
000149BE 5368 0038                  		subq.w	#1,$38(a0)
000149C2 6A00 0000                  		bpl.w	loc_13FAC
000149C6 317C 003B 0038             		move.w	#59,$38(a0)
000149CC 317C 0001 0036             		move.w	#1,$36(a0)
000149D2 4EB9 0000 2D46             		jsr	(RandomNumber).l
000149D8 0240 0001                  		andi.w	#1,d0
000149DC 1140 0034                  		move.b	d0,$34(a0)
000149E0 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
000149E4 0C40 0019                  		cmpi.w	#$19,d0
000149E8 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000149EA 0C40 0014                  		cmpi.w	#$14,d0
000149EE 6700                       		beq.s	Obj0A_WarnSound
000149F0 0C40 000F                  		cmpi.w	#$F,d0
000149F4 6700                       		beq.s	Obj0A_WarnSound
000149F6 0C40 000C                  		cmpi.w	#$C,d0
000149FA 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000149FC 6600                       		bne.s	loc_13F02
000149FE 303C 0092                  		move.w	#$92,d0
00014A02 4EB9 0000 15CC             		jsr	(PlaySound).l	; play countdown music
00014A08                            
00014A08                            loc_13F02:
00014A08 5328 0032                  		subq.b	#1,$32(a0)
00014A0C 6A00                       		bpl.s	Obj0A_ReduceAir
00014A0E 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014A14 08E8 0007 0036             		bset	#7,$36(a0)
00014A1A 6000                       		bra.s	Obj0A_ReduceAir
00014A1C                            ; ===========================================================================
00014A1C                            
00014A1C                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00014A1C 303C 00C2                  		move.w	#$C2,d0
00014A20 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014A26                            
00014A26                            Obj0A_ReduceAir:
00014A26 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014A2A 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014A2E 6100 0000                  		bsr.w	ResumeMusic
00014A32 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014A38 303C 00B2                  		move.w	#$B2,d0
00014A3C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play drowning sound
00014A42 117C 000A 0034             		move.b	#$A,$34(a0)
00014A48 317C 0001 0036             		move.w	#1,$36(a0)
00014A4E 317C 0078 002C             		move.w	#$78,$2C(a0)
00014A54 2F08                       		move.l	a0,-(sp)
00014A56 41F8 D000                  		lea	($FFFFD000).w,a0
00014A5A 6100 F81C                  		bsr.w	Sonic_ResetOnFloor
00014A5E 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014A64 08E8 0001 0022             		bset	#1,$22(a0)
00014A6A 08E8 0007 0002             		bset	#7,2(a0)
00014A70 317C 0000 0012             		move.w	#0,$12(a0)
00014A76 317C 0000 0010             		move.w	#0,$10(a0)
00014A7C 317C 0000 0014             		move.w	#0,$14(a0)
00014A82 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014A88 205F                       		movea.l	(sp)+,a0
00014A8A 4E75                       		rts	
00014A8C                            ; ===========================================================================
00014A8C                            
00014A8C                            loc_13F86:
00014A8C 5368 002C                  		subq.w	#1,$2C(a0)
00014A90 6600                       		bne.s	loc_13F94
00014A92 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014A98 4E75                       		rts	
00014A9A                            ; ===========================================================================
00014A9A                            
00014A9A                            loc_13F94:
00014A9A 2F08                       		move.l	a0,-(sp)
00014A9C 41F8 D000                  		lea	($FFFFD000).w,a0
00014AA0 4EBA 956A                  		jsr	SpeedToPos
00014AA4 0668 0010 0012             		addi.w	#$10,$12(a0)
00014AAA 205F                       		movea.l	(sp)+,a0
00014AAC 6000                       		bra.s	loc_13FAC
00014AAE                            ; ===========================================================================
00014AAE                            
00014AAE                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014AAE 6000                       		bra.s	Obj0A_MakeItem
00014AB0                            ; ===========================================================================
00014AB0                            
00014AB0                            loc_13FAC:
00014AB0 4A68 0036                  		tst.w	$36(a0)
00014AB4 6700 0000                  		beq.w	locret_1408C
00014AB8 5368 003A                  		subq.w	#1,$3A(a0)
00014ABC 6A00 0000                  		bpl.w	locret_1408C
00014AC0                            
00014AC0                            Obj0A_MakeItem:
00014AC0 4EB9 0000 2D46             		jsr	(RandomNumber).l
00014AC6 0240 000F                  		andi.w	#$F,d0
00014ACA 3140 003A                  		move.w	d0,$3A(a0)
00014ACE 4EBA 99E8                  		jsr	SingleObjLoad
00014AD2 6600 0000                  		bne.w	locret_1408C
00014AD6 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014ADA 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014AE0 7006                       		moveq	#6,d0
00014AE2 0838 0000 D022             		btst	#0,($FFFFD022).w
00014AE8 6700                       		beq.s	loc_13FF2
00014AEA 4440                       		neg.w	d0
00014AEC 137C 0040 0026             		move.b	#$40,$26(a1)
00014AF2                            
00014AF2                            loc_13FF2:
00014AF2 D169 0008                  		add.w	d0,8(a1)
00014AF6 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014AFC 137C 0006 0028             		move.b	#6,$28(a1)
00014B02 4A68 002C                  		tst.w	$2C(a0)
00014B06 6700 0000                  		beq.w	loc_1403E
00014B0A 0268 0007 003A             		andi.w	#7,$3A(a0)
00014B10 0668 0000 003A             		addi.w	#0,$3A(a0)
00014B16 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014B1A 0440 000C                  		subi.w	#$C,d0
00014B1E 3340 000C                  		move.w	d0,$C(a1)
00014B22 4EB9 0000 2D46             		jsr	(RandomNumber).l
00014B28 1340 0026                  		move.b	d0,$26(a1)
00014B2C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014B30 0200 0003                  		andi.b	#3,d0
00014B34 6600                       		bne.s	loc_14082
00014B36 137C 000E 0028             		move.b	#$E,$28(a1)
00014B3C 6000                       		bra.s	loc_14082
00014B3E                            ; ===========================================================================
00014B3E                            
00014B3E                            loc_1403E:
00014B3E 0828 0007 0036             		btst	#7,$36(a0)
00014B44 6700                       		beq.s	loc_14082
00014B46 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014B4A E24A                       		lsr.w	#1,d2
00014B4C 4EB9 0000 2D46             		jsr	(RandomNumber).l
00014B52 0240 0003                  		andi.w	#3,d0
00014B56 6600                       		bne.s	loc_1406A
00014B58 08E8 0006 0036             		bset	#6,$36(a0)
00014B5E 6600                       		bne.s	loc_14082
00014B60 1342 0028                  		move.b	d2,$28(a1)
00014B64 337C 001C 0038             		move.w	#$1C,$38(a1)
00014B6A                            
00014B6A                            loc_1406A:
00014B6A 4A28 0034                  		tst.b	$34(a0)
00014B6E 6600                       		bne.s	loc_14082
00014B70 08E8 0006 0036             		bset	#6,$36(a0)
00014B76 6600                       		bne.s	loc_14082
00014B78 1342 0028                  		move.b	d2,$28(a1)
00014B7C 337C 001C 0038             		move.w	#$1C,$38(a1)
00014B82                            
00014B82                            loc_14082:
00014B82 5328 0034                  		subq.b	#1,$34(a0)
00014B86 6A00                       		bpl.s	locret_1408C
00014B88 4268 0036                  		clr.w	$36(a0)
00014B8C                            
00014B8C                            locret_1408C:
00014B8C 4E75                       		rts	
00014B8E                            
00014B8E                            ; ---------------------------------------------------------------------------
00014B8E                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014B8E                            ; ---------------------------------------------------------------------------
00014B8E                            
00014B8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B8E                            
00014B8E                            
00014B8E                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014B8E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014B94                             
00014B94                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014B94                             
00014B94 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014B98                             
00014B98 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014B9E 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014BA0 43F9 0000 3DC6             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014BA6 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014BA8                             
00014BA8                            Air_GetBgm2:
00014BA8 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014BAE 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014BB0 43F9 0000 3DCE             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014BB6 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014BB8                             
00014BB8                            Air_GetBgm3:
00014BB8 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014BBE 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014BC0 43F9 0000 3DD6             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014BC6 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014BC8                             
00014BC8                            Air_GetBgm4:
00014BC8 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014BCE 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014BD0 43F9 0000 3DDE             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014BD6                             
00014BD6                            Air_PlayMusic:
00014BD6 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014BDA                             
00014BDA                            loc_140A6:
00014BDA 4EB9 0000 15CC             		jsr	(PlaySound).l
00014BE0                             
00014BE0                            ; NineKode ends here
00014BE0                            
00014BE0                            loc_140AC:
00014BE0 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014BE6 4238 D372                  		clr.b	($FFFFD372).w
00014BEA 4E75                       		rts	
00014BEC                            ; End of function ResumeMusic
00014BEC                            
00014BEC                            ; ===========================================================================
00014BEC                            Ani_obj0A:
00014BEC                            	include "_anim\obj0A.asm"
00014BEC                            ; ---------------------------------------------------------------------------
00014BEC                            ; Animation script - countdown numbers and bubbles (LZ)
00014BEC                            ; ---------------------------------------------------------------------------
00014BEC 0000                       		dc.w byte_140D6-Ani_obj0A
00014BEE 0000                       		dc.w byte_140E0-Ani_obj0A
00014BF0 0000                       		dc.w byte_140EA-Ani_obj0A
00014BF2 0000                       		dc.w byte_140F4-Ani_obj0A
00014BF4 0000                       		dc.w byte_140FE-Ani_obj0A
00014BF6 0000                       		dc.w byte_14108-Ani_obj0A
00014BF8 0000                       		dc.w byte_14112-Ani_obj0A
00014BFA 0000                       		dc.w byte_14118-Ani_obj0A
00014BFC 0000                       		dc.w byte_14120-Ani_obj0A
00014BFE 0000                       		dc.w byte_14128-Ani_obj0A
00014C00 0000                       		dc.w byte_14130-Ani_obj0A
00014C02 0000                       		dc.w byte_14138-Ani_obj0A
00014C04 0000                       		dc.w byte_14140-Ani_obj0A
00014C06 0000                       		dc.w byte_14148-Ani_obj0A
00014C08 0000                       		dc.w byte_1414A-Ani_obj0A
00014C0A 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014C14 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014C1E 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014C28 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014C32 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014C3C 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014C46 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014C4C 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014C54 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014C5C 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014C64 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014C6C 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014C74 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014C7C 0EFC                       byte_14148:	dc.b $E, $FC
00014C7E 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014C84                            		even
00014C84                            		even
00014C84                            
00014C84                            ; ---------------------------------------------------------------------------
00014C84                            ; Sprite mappings - drowning countdown numbers (LZ)
00014C84                            ; ---------------------------------------------------------------------------
00014C84                            Map_obj0A:
00014C84                            	include "_maps\obj0A.asm"
00014C84                            ; ---------------------------------------------------------------------------
00014C84                            ; Sprite mappings - drowning countdown numbers (LZ)
00014C84                            ; ---------------------------------------------------------------------------
00014C84 0000                       		dc.w byte_14152-Map_obj0A
00014C86 01                         byte_14152:	dc.b 1
00014C87 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014C8C                            		even
00014C8C                            		even
00014C8C                            
00014C8C                            ; ===========================================================================
00014C8C                            ; ---------------------------------------------------------------------------
00014C8C                            ; Object 38 - shield and invincibility stars
00014C8C                            ; ---------------------------------------------------------------------------
00014C8C                            
00014C8C                            Obj38:					; XREF: Obj_Index
00014C8C 7000                       		moveq	#0,d0
00014C8E 1028 0024                  		move.b	$24(a0),d0
00014C92 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014C96 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014C9A                            ; ===========================================================================
00014C9A 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014C9C 0000                       		dc.w Obj38_Shield-Obj38_Index
00014C9E 0000                       		dc.w Obj38_Stars-Obj38_Index
00014CA0                            ; ===========================================================================
00014CA0                            
00014CA0                            Obj38_Main:				; XREF: Obj38_Index
00014CA0 5428 0024                  		addq.b	#2,$24(a0)
00014CA4 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014CAC 117C 0004 0001             		move.b	#4,1(a0)
00014CB2 117C 0001 0018             		move.b	#1,$18(a0)
00014CB8 117C 0010 0019             		move.b	#$10,$19(a0)
00014CBE 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014CC2 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014CC4 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014CCA 4E75                       		rts	
00014CCC                            ; ===========================================================================
00014CCC                            
00014CCC                            Obj38_DoStars:
00014CCC 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014CD0 317C 055C 0002             		move.w	#$55C,2(a0)
00014CD6 4E75                       		rts	
00014CD8                            ; ===========================================================================
00014CD8                            
00014CD8                            Obj38_Shield:				; XREF: Obj38_Index
00014CD8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014CDC 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014CDE 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014CE2 6700                       		beq.s	Obj38_Delete	; if not, branch
00014CE4 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014CEA 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014CF0 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014CF6 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014CFC 4EB9 0000 B090             		jsr	AnimateSprite
00014D02 4EFA 932E                  		jmp	DisplaySprite
00014D06                            ; ===========================================================================
00014D06                            
00014D06                            Obj38_RmvShield:
00014D06 4E75                       		rts	
00014D08                            ; ===========================================================================
00014D08                            
00014D08                            Obj38_Delete:
00014D08 4EFA 9364                  		jmp	DeleteObject
00014D0C                            ; ===========================================================================
00014D0C                            
00014D0C                            Obj38_Stars:				; XREF: Obj38_Index
00014D0C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014D10 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014D12 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014D16 1228 001C                  		move.b	$1C(a0),d1
00014D1A 5301                       		subq.b	#1,d1
00014D1C 6000                       		bra.s	Obj38_StarTrail
00014D1E                            ; ===========================================================================
00014D1E E909                       		lsl.b	#4,d1
00014D20 5801                       		addq.b	#4,d1
00014D22 9001                       		sub.b	d1,d0
00014D24 1228 0030                  		move.b	$30(a0),d1
00014D28 9001                       		sub.b	d1,d0
00014D2A 5801                       		addq.b	#4,d1
00014D2C 0201 000F                  		andi.b	#$F,d1
00014D30 1141 0030                  		move.b	d1,$30(a0)
00014D34 6000                       		bra.s	Obj38_StarTrail2a
00014D36                            ; ===========================================================================
00014D36                            
00014D36                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014D36 E709                       		lsl.b	#3,d1
00014D38 1401                       		move.b	d1,d2
00014D3A D201                       		add.b	d1,d1
00014D3C D202                       		add.b	d2,d1
00014D3E 5801                       		addq.b	#4,d1
00014D40 9001                       		sub.b	d1,d0
00014D42 1228 0030                  		move.b	$30(a0),d1
00014D46 9001                       		sub.b	d1,d0
00014D48 5801                       		addq.b	#4,d1
00014D4A 0C01 0018                  		cmpi.b	#$18,d1
00014D4E 6500                       		bcs.s	Obj38_StarTrail2
00014D50 7200                       		moveq	#0,d1
00014D52                            
00014D52                            Obj38_StarTrail2:
00014D52 1141 0030                  		move.b	d1,$30(a0)
00014D56                            
00014D56                            Obj38_StarTrail2a:
00014D56 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014D5A 43F1 0000                  		lea	(a1,d0.w),a1
00014D5E 3159 0008                  		move.w	(a1)+,8(a0)
00014D62 3159 000C                  		move.w	(a1)+,$C(a0)
00014D66 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014D6C 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014D72 4EB9 0000 B090             		jsr	AnimateSprite
00014D78 4EFA 92B8                  		jmp	DisplaySprite
00014D7C                            ; ===========================================================================
00014D7C                            
00014D7C                            Obj38_Delete2:				; XREF: Obj38_Stars
00014D7C 4EFA 92F0                  		jmp	DeleteObject
00014D80                            ; ===========================================================================
00014D80                            ; ---------------------------------------------------------------------------
00014D80                            ; Object 4A - special stage entry from beta
00014D80                            ; ---------------------------------------------------------------------------
00014D80                            
00014D80                            Obj4A:					; XREF: Obj_Index
00014D80 7000                       		moveq	#0,d0
00014D82 1028 0024                  		move.b	$24(a0),d0
00014D86 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014D8A 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014D8E                            ; ===========================================================================
00014D8E 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014D90 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014D92 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014D94                            ; ===========================================================================
00014D94                            
00014D94                            Obj4A_Main:				; XREF: Obj4A_Index
00014D94 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014D98 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014D9A 4E75                       		rts	
00014D9C                            ; ===========================================================================
00014D9C                            
00014D9C                            Obj4A_Main2:
00014D9C 5428 0024                  		addq.b	#2,$24(a0)
00014DA0 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014DA8 117C 0004 0001             		move.b	#4,1(a0)
00014DAE 117C 0001 0018             		move.b	#1,$18(a0)
00014DB4 117C 0038 0019             		move.b	#$38,$19(a0)
00014DBA 317C 0541 0002             		move.w	#$541,2(a0)
00014DC0 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014DC6                            
00014DC6                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014DC6 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014DCC 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014DD2 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014DD8 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014DDE 4EB9 0000 B090             		jsr	AnimateSprite
00014DE4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014DEA 6600                       		bne.s	Obj4A_Display
00014DEC 4A38 D000                  		tst.b	($FFFFD000).w
00014DF0 6700                       		beq.s	Obj4A_Display
00014DF2 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014DF8 303C 00A8                  		move.w	#$A8,d0
00014DFC 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014E02                            
00014E02                            Obj4A_Display:
00014E02 4EFA 922E                  		jmp	DisplaySprite
00014E06                            ; ===========================================================================
00014E06                            
00014E06                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014E06 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014E0A 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014E0C 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014E12 4EFA 925A                  		jmp	DeleteObject
00014E16                            ; ===========================================================================
00014E16                            
00014E16                            Obj4A_Wait:
00014E16 4E75                       		rts	
00014E18                            ; ===========================================================================
00014E18                            ; ---------------------------------------------------------------------------
00014E18                            ; Object 08 - water splash (LZ)
00014E18                            ; ---------------------------------------------------------------------------
00014E18                            
00014E18                            Obj08:					; XREF: Obj_Index
00014E18 7000                       		moveq	#0,d0
00014E1A 1028 0024                  		move.b	$24(a0),d0
00014E1E 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014E22 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014E26                            ; ===========================================================================
00014E26 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014E28 0000                       		dc.w Obj08_Display-Obj08_Index
00014E2A 0000                       		dc.w Obj08_Delete-Obj08_Index
00014E2C                            ; ===========================================================================
00014E2C                            
00014E2C                            Obj08_Main:				; XREF: Obj08_Index
00014E2C 5428 0024                  		addq.b	#2,$24(a0)
00014E30 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014E38 0028 0004 0001             		ori.b	#4,1(a0)
00014E3E 117C 0001 0018             		move.b	#1,$18(a0)
00014E44 117C 0010 0019             		move.b	#$10,$19(a0)
00014E4A 317C 4259 0002             		move.w	#$4259,2(a0)
00014E50 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014E56                            
00014E56                            Obj08_Display:				; XREF: Obj08_Index
00014E56 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014E5C 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014E62 4EB9 0000 B090             		jsr	AnimateSprite
00014E68 4EFA 91C8                  		jmp	DisplaySprite
00014E6C                            ; ===========================================================================
00014E6C                            
00014E6C                            Obj08_Delete:				; XREF: Obj08_Index
00014E6C 4EFA 9200                  		jmp	DeleteObject	; delete when animation	is complete
00014E70                            ; ===========================================================================
00014E70                            Ani_obj38:
00014E70                            	include "_anim\obj38.asm"
00014E70                            ; ---------------------------------------------------------------------------
00014E70                            ; Animation script - shield and invincibility stars
00014E70                            ; ---------------------------------------------------------------------------
00014E70 0000                       		dc.w byte_14356-Ani_obj38
00014E72 0000                       		dc.w byte_1435E-Ani_obj38
00014E74 0000                       		dc.w byte_14364-Ani_obj38
00014E76 0000                       		dc.w byte_1437E-Ani_obj38
00014E78 0000                       		dc.w byte_14398-Ani_obj38
00014E7A 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014E82 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014E88 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014E99 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014EA2 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014EB3 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014EBC 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014ECD 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014ED6                            		even
00014ED6                            		even
00014ED6                            
00014ED6                            ; ---------------------------------------------------------------------------
00014ED6                            ; Sprite mappings - shield and invincibility stars
00014ED6                            ; ---------------------------------------------------------------------------
00014ED6                            Map_obj38:
00014ED6                            	include "_maps\obj38.asm"
00014ED6                            ; ---------------------------------------------------------------------------
00014ED6                            ; Sprite mappings - shield and invincibility stars
00014ED6                            ; ---------------------------------------------------------------------------
00014ED6 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014EDA 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014EDE 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014EE2 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014EE6 04                         byte_143C2:	dc.b 4
00014EE7 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014EEC E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014EF1 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014EF6 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014EFB 04                         byte_143D7:	dc.b 4
00014EFC E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014F01 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014F06 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014F0B 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014F10 04                         byte_143EC:	dc.b 4
00014F11 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014F16 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014F1B 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014F20 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014F25 04                         byte_14401:	dc.b 4
00014F26 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014F2B E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014F30 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014F35 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014F3A 04                         byte_14416:	dc.b 4
00014F3B E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014F40 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014F45 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014F4A 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014F4F 04                         byte_1442B:	dc.b 4
00014F50 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014F55 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014F5A 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014F5F 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014F64 04                         byte_14440:	dc.b 4
00014F65 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014F6A E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014F6F 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014F74 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014F7A 00                         		even
00014F7A 00                         		even
00014F7A                            
00014F7A                            Ani_obj4A:
00014F7A                            	include "_anim\obj4A.asm"
00014F7A                            ; ---------------------------------------------------------------------------
00014F7A                            ; Animation script - special stage entry effect from beta
00014F7A                            ; ---------------------------------------------------------------------------
00014F7A 0000                       		dc.w byte_14458-Ani_obj4A
00014F7C 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014F90                            		even
00014F90                            		even
00014F90                            
00014F90                            ; ---------------------------------------------------------------------------
00014F90                            ; Sprite mappings - special stage entry	from beta
00014F90                            ; ---------------------------------------------------------------------------
00014F90                            Map_obj4A:
00014F90                            	include "_maps\obj4A.asm"
00014F90                            ; ---------------------------------------------------------------------------
00014F90                            ; Sprite mappings - special stage entry	from beta
00014F90                            ; ---------------------------------------------------------------------------
00014F90 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014F94 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014F98 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014F9C 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014FA0 03                         byte_1447C:	dc.b 3
00014FA1 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014FA6 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014FAB 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014FB0 03                         byte_1448C:	dc.b 3
00014FB1 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014FB6 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014FBB 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014FC0 05                         byte_1449C:	dc.b 5
00014FC1 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014FC6 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014FCB FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014FD0 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014FD5 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014FDA 09                         byte_144B6:	dc.b 9
00014FDB F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014FE0 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014FE5 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014FEA 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014FEF F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014FF4 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014FF9 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014FFE 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00015003 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00015008 12                         byte_144E4:	dc.b $12
00015009 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
0001500E F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00015013 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00015018 0000 0025 00               		dc.b 0,	0, 0, $25, 0
0001501D 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00015022 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00015027 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
0001502C F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00015031 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00015036 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
0001503B 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00015040 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00015045 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
0001504A F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001504F 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00015054 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00015059 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001505E F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00015063 11                         byte_1453F:	dc.b $11
00015064 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00015069 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
0001506E 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00015073 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00015078 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
0001507D F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015082 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00015087 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
0001508C 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00015091 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00015096 0000 0826 38               		dc.b 0,	0, 8, $26, $38
0001509B 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000150A0 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000150A5 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000150AA F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000150AF 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000150B4 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000150B9 09                         byte_14595:	dc.b 9
000150BA FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000150BF 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000150C4 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000150C9 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000150CE FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000150D3 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000150D8 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000150DD 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000150E2 04                         		dc.b 4
000150E3 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
000150E8                            		even
000150E8                            		even
000150E8                            
000150E8                            Ani_obj08:
000150E8                            	include "_anim\obj08.asm"
000150E8                            ; ---------------------------------------------------------------------------
000150E8                            ; Animation script - water splash (LZ)
000150E8                            ; ---------------------------------------------------------------------------
000150E8 0000                       		dc.w byte_145C6-Ani_obj08
000150EA 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000150F0                            		even
000150F0                            		even
000150F0                            
000150F0                            ; ---------------------------------------------------------------------------
000150F0                            ; Sprite mappings - water splash (LZ)
000150F0                            ; ---------------------------------------------------------------------------
000150F0                            Map_obj08:
000150F0                            	include "_maps\obj08.asm"
000150F0                            ; ---------------------------------------------------------------------------
000150F0                            ; Sprite mappings - water splash (LZ)
000150F0                            ; ---------------------------------------------------------------------------
000150F0 0000                       		dc.w byte_145D2-Map_obj08
000150F2 0000                       		dc.w byte_145DD-Map_obj08
000150F4 0000                       		dc.w byte_145E8-Map_obj08
000150F6 02                         byte_145D2:	dc.b 2
000150F7 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000150FC FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00015101 02                         byte_145DD:	dc.b 2
00015102 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00015107 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
0001510C 01                         byte_145E8:	dc.b 1
0001510D E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00015112                            		even
00015112                            		even
00015112                            
00015112                            ; ---------------------------------------------------------------------------
00015112                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00015112                            ; ---------------------------------------------------------------------------
00015112                            
00015112                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015112                            
00015112                            
00015112                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015112 0828 0003 0022             		btst	#3,$22(a0)
00015118 6700                       		beq.s	loc_14602
0001511A 7000                       		moveq	#0,d0
0001511C 11C0 F768                  		move.b	d0,($FFFFF768).w
00015120 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015124 4E75                       		rts	
00015126                            ; ===========================================================================
00015126                            
00015126                            loc_14602:
00015126 7003                       		moveq	#3,d0
00015128 11C0 F768                  		move.b	d0,($FFFFF768).w
0001512C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015130 1028 0026                  		move.b	$26(a0),d0
00015134 0600 0020                  		addi.b	#$20,d0
00015138 6A00                       		bpl.s	loc_14624
0001513A 1028 0026                  		move.b	$26(a0),d0
0001513E 6A00                       		bpl.s	loc_1461E
00015140 5300                       		subq.b	#1,d0
00015142                            
00015142                            loc_1461E:
00015142 0600 0020                  		addi.b	#$20,d0
00015146 6000                       		bra.s	loc_14630
00015148                            ; ===========================================================================
00015148                            
00015148                            loc_14624:
00015148 1028 0026                  		move.b	$26(a0),d0
0001514C 6A00                       		bpl.s	loc_1462C
0001514E 5200                       		addq.b	#1,d0
00015150                            
00015150                            loc_1462C:
00015150 0600 001F                  		addi.b	#$1F,d0
00015154                            
00015154                            loc_14630:
00015154 0200 00C0                  		andi.b	#$C0,d0
00015158 0C00 0040                  		cmpi.b	#$40,d0
0001515C 6700 0000                  		beq.w	Sonic_WalkVertL
00015160 0C00 0080                  		cmpi.b	#$80,d0
00015164 6700 0000                  		beq.w	Sonic_WalkCeiling
00015168 0C00 00C0                  		cmpi.b	#$C0,d0
0001516C 6700 0000                  		beq.w	Sonic_WalkVertR
00015170 3428 000C                  		move.w	$C(a0),d2
00015174 3628 0008                  		move.w	8(a0),d3
00015178 7000                       		moveq	#0,d0
0001517A 1028 0016                  		move.b	$16(a0),d0
0001517E 4880                       		ext.w	d0
00015180 D440                       		add.w	d0,d2
00015182 1028 0017                  		move.b	$17(a0),d0
00015186 4880                       		ext.w	d0
00015188 D640                       		add.w	d0,d3
0001518A 49F8 F768                  		lea	($FFFFF768).w,a4
0001518E 367C 0010                  		movea.w	#$10,a3
00015192 3C3C 0000                  		move.w	#0,d6
00015196 7A0D                       		moveq	#$D,d5
00015198 6100 0000                  		bsr.w	FindFloor
0001519C 3F01                       		move.w	d1,-(sp)
0001519E 3428 000C                  		move.w	$C(a0),d2
000151A2 3628 0008                  		move.w	8(a0),d3
000151A6 7000                       		moveq	#0,d0
000151A8 1028 0016                  		move.b	$16(a0),d0
000151AC 4880                       		ext.w	d0
000151AE D440                       		add.w	d0,d2
000151B0 1028 0017                  		move.b	$17(a0),d0
000151B4 4880                       		ext.w	d0
000151B6 4440                       		neg.w	d0
000151B8 D640                       		add.w	d0,d3
000151BA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000151BE 367C 0010                  		movea.w	#$10,a3
000151C2 3C3C 0000                  		move.w	#0,d6
000151C6 7A0D                       		moveq	#$D,d5
000151C8 6100 0000                  		bsr.w	FindFloor
000151CC 301F                       		move.w	(sp)+,d0
000151CE 6100 0000                  		bsr.w	Sonic_Angle
000151D2 4A41                       		tst.w	d1
000151D4 6700                       		beq.s	locret_146BE
000151D6 6A00                       		bpl.s	loc_146C0
000151D8 0C41 FFF2                  		cmpi.w	#-$E,d1
000151DC 6D00                       		blt.s	locret_146E6
000151DE D368 000C                  		add.w	d1,$C(a0)
000151E2                            
000151E2                            locret_146BE:
000151E2 4E75                       		rts	
000151E4                            ; ===========================================================================
000151E4                            
000151E4                            loc_146C0:
000151E4 0C41 000E                  		cmpi.w	#$E,d1
000151E8 6E00                       		bgt.s	loc_146CC
000151EA                            
000151EA                            loc_146C6:
000151EA D368 000C                  		add.w	d1,$C(a0)
000151EE 4E75                       		rts	
000151F0                            ; ===========================================================================
000151F0                            
000151F0                            loc_146CC:
000151F0 4A28 0038                  		tst.b	$38(a0)
000151F4 66F4                       		bne.s	loc_146C6
000151F6 08E8 0001 0022             		bset	#1,$22(a0)
000151FC 08A8 0005 0022             		bclr	#5,$22(a0)
00015202 117C 0001 001D             		move.b	#1,$1D(a0)
00015208 4E75                       		rts	
0001520A                            ; ===========================================================================
0001520A                            
0001520A                            locret_146E6:
0001520A 4E75                       		rts	
0001520C                            ; End of function Sonic_AnglePos
0001520C                            
0001520C                            ; ===========================================================================
0001520C 2428 0008                  		move.l	8(a0),d2
00015210 3028 0010                  		move.w	$10(a0),d0
00015214 48C0                       		ext.l	d0
00015216 E180                       		asl.l	#8,d0
00015218 9480                       		sub.l	d0,d2
0001521A 2142 0008                  		move.l	d2,8(a0)
0001521E 303C 0038                  		move.w	#$38,d0
00015222 48C0                       		ext.l	d0
00015224 E180                       		asl.l	#8,d0
00015226 9680                       		sub.l	d0,d3
00015228 2143 000C                  		move.l	d3,$C(a0)
0001522C 4E75                       		rts	
0001522E                            ; ===========================================================================
0001522E                            
0001522E                            locret_1470A:
0001522E 4E75                       		rts	
00015230                            ; ===========================================================================
00015230 2628 000C                  		move.l	$C(a0),d3
00015234 3028 0012                  		move.w	$12(a0),d0
00015238 0440 0038                  		subi.w	#$38,d0
0001523C 3140 0012                  		move.w	d0,$12(a0)
00015240 48C0                       		ext.l	d0
00015242 E180                       		asl.l	#8,d0
00015244 9680                       		sub.l	d0,d3
00015246 2143 000C                  		move.l	d3,$C(a0)
0001524A 4E75                       		rts	
0001524C 4E75                       		rts	
0001524E                            ; ===========================================================================
0001524E 2428 0008                  		move.l	8(a0),d2
00015252 2628 000C                  		move.l	$C(a0),d3
00015256 3028 0010                  		move.w	$10(a0),d0
0001525A 48C0                       		ext.l	d0
0001525C E180                       		asl.l	#8,d0
0001525E 9480                       		sub.l	d0,d2
00015260 3028 0012                  		move.w	$12(a0),d0
00015264 48C0                       		ext.l	d0
00015266 E180                       		asl.l	#8,d0
00015268 9680                       		sub.l	d0,d3
0001526A 2142 0008                  		move.l	d2,8(a0)
0001526E 2143 000C                  		move.l	d3,$C(a0)
00015272 4E75                       		rts	
00015274                            
00015274                            ; ---------------------------------------------------------------------------
00015274                            ; Subroutine to	change Sonic's angle as he walks along the floor
00015274                            ; ---------------------------------------------------------------------------
00015274                            
00015274                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015274                            
00015274                            
00015274                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00015274 1438 F76A                  		move.b	($FFFFF76A).w,d2
00015278 B240                       		cmp.w	d0,d1
0001527A 6F00                       		ble.s	loc_1475E
0001527C 1438 F768                  		move.b	($FFFFF768).w,d2
00015280 3200                       		move.w	d0,d1
00015282                            
00015282                            loc_1475E:
00015282 0802 0000                  		btst	#0,d2
00015286 6600                       		bne.s	loc_1476A
00015288 1142 0026                  		move.b	d2,$26(a0)
0001528C 4E75                       		rts	
0001528E                            ; ===========================================================================
0001528E                            
0001528E                            loc_1476A:
0001528E 1428 0026                  		move.b	$26(a0),d2
00015292 0602 0020                  		addi.b	#$20,d2
00015296 0202 00C0                  		andi.b	#$C0,d2
0001529A 1142 0026                  		move.b	d2,$26(a0)
0001529E 4E75                       		rts	
000152A0                            ; End of function Sonic_Angle
000152A0                            
000152A0                            ; ---------------------------------------------------------------------------
000152A0                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000152A0                            ; ---------------------------------------------------------------------------
000152A0                            
000152A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152A0                            
000152A0                            
000152A0                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000152A0 3428 000C                  		move.w	$C(a0),d2
000152A4 3628 0008                  		move.w	8(a0),d3
000152A8 7000                       		moveq	#0,d0
000152AA 1028 0017                  		move.b	$17(a0),d0
000152AE 4880                       		ext.w	d0
000152B0 4440                       		neg.w	d0
000152B2 D440                       		add.w	d0,d2
000152B4 1028 0016                  		move.b	$16(a0),d0
000152B8 4880                       		ext.w	d0
000152BA D640                       		add.w	d0,d3
000152BC 49F8 F768                  		lea	($FFFFF768).w,a4
000152C0 367C 0010                  		movea.w	#$10,a3
000152C4 3C3C 0000                  		move.w	#0,d6
000152C8 7A0D                       		moveq	#$D,d5
000152CA 6100 0000                  		bsr.w	FindWall
000152CE 3F01                       		move.w	d1,-(sp)
000152D0 3428 000C                  		move.w	$C(a0),d2
000152D4 3628 0008                  		move.w	8(a0),d3
000152D8 7000                       		moveq	#0,d0
000152DA 1028 0017                  		move.b	$17(a0),d0
000152DE 4880                       		ext.w	d0
000152E0 D440                       		add.w	d0,d2
000152E2 1028 0016                  		move.b	$16(a0),d0
000152E6 4880                       		ext.w	d0
000152E8 D640                       		add.w	d0,d3
000152EA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000152EE 367C 0010                  		movea.w	#$10,a3
000152F2 3C3C 0000                  		move.w	#0,d6
000152F6 7A0D                       		moveq	#$D,d5
000152F8 6100 0000                  		bsr.w	FindWall
000152FC 301F                       		move.w	(sp)+,d0
000152FE 6100 FF74                  		bsr.w	Sonic_Angle
00015302 4A41                       		tst.w	d1
00015304 6700                       		beq.s	locret_147F0
00015306 6A00                       		bpl.s	loc_147F2
00015308 0C41 FFF2                  		cmpi.w	#-$E,d1
0001530C 6D00 FF20                  		blt.w	locret_1470A
00015310 D368 0008                  		add.w	d1,8(a0)
00015314                            
00015314                            locret_147F0:
00015314 4E75                       		rts	
00015316                            ; ===========================================================================
00015316                            
00015316                            loc_147F2:
00015316 0C41 000E                  		cmpi.w	#$E,d1
0001531A 6E00                       		bgt.s	loc_147FE
0001531C                            
0001531C                            loc_147F8:
0001531C D368 0008                  		add.w	d1,8(a0)
00015320 4E75                       		rts	
00015322                            ; ===========================================================================
00015322                            
00015322                            loc_147FE:
00015322 4A28 0038                  		tst.b	$38(a0)
00015326 66F4                       		bne.s	loc_147F8
00015328 08E8 0001 0022             		bset	#1,$22(a0)
0001532E 08A8 0005 0022             		bclr	#5,$22(a0)
00015334 117C 0001 001D             		move.b	#1,$1D(a0)
0001533A 4E75                       		rts	
0001533C                            ; End of function Sonic_WalkVertR
0001533C                            
0001533C                            ; ---------------------------------------------------------------------------
0001533C                            ; Subroutine allowing Sonic to walk upside-down
0001533C                            ; ---------------------------------------------------------------------------
0001533C                            
0001533C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001533C                            
0001533C                            
0001533C                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0001533C 3428 000C                  		move.w	$C(a0),d2
00015340 3628 0008                  		move.w	8(a0),d3
00015344 7000                       		moveq	#0,d0
00015346 1028 0016                  		move.b	$16(a0),d0
0001534A 4880                       		ext.w	d0
0001534C 9440                       		sub.w	d0,d2
0001534E 0A42 000F                  		eori.w	#$F,d2
00015352 1028 0017                  		move.b	$17(a0),d0
00015356 4880                       		ext.w	d0
00015358 D640                       		add.w	d0,d3
0001535A 49F8 F768                  		lea	($FFFFF768).w,a4
0001535E 367C FFF0                  		movea.w	#-$10,a3
00015362 3C3C 1000                  		move.w	#$1000,d6
00015366 7A0D                       		moveq	#$D,d5
00015368 6100 0000                  		bsr.w	FindFloor
0001536C 3F01                       		move.w	d1,-(sp)
0001536E 3428 000C                  		move.w	$C(a0),d2
00015372 3628 0008                  		move.w	8(a0),d3
00015376 7000                       		moveq	#0,d0
00015378 1028 0016                  		move.b	$16(a0),d0
0001537C 4880                       		ext.w	d0
0001537E 9440                       		sub.w	d0,d2
00015380 0A42 000F                  		eori.w	#$F,d2
00015384 1028 0017                  		move.b	$17(a0),d0
00015388 4880                       		ext.w	d0
0001538A 9640                       		sub.w	d0,d3
0001538C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015390 367C FFF0                  		movea.w	#-$10,a3
00015394 3C3C 1000                  		move.w	#$1000,d6
00015398 7A0D                       		moveq	#$D,d5
0001539A 6100 0000                  		bsr.w	FindFloor
0001539E 301F                       		move.w	(sp)+,d0
000153A0 6100 FED2                  		bsr.w	Sonic_Angle
000153A4 4A41                       		tst.w	d1
000153A6 6700                       		beq.s	locret_14892
000153A8 6A00                       		bpl.s	loc_14894
000153AA 0C41 FFF2                  		cmpi.w	#-$E,d1
000153AE 6D00 FE5A                  		blt.w	locret_146E6
000153B2 9368 000C                  		sub.w	d1,$C(a0)
000153B6                            
000153B6                            locret_14892:
000153B6 4E75                       		rts	
000153B8                            ; ===========================================================================
000153B8                            
000153B8                            loc_14894:
000153B8 0C41 000E                  		cmpi.w	#$E,d1
000153BC 6E00                       		bgt.s	loc_148A0
000153BE                            
000153BE                            loc_1489A:
000153BE 9368 000C                  		sub.w	d1,$C(a0)
000153C2 4E75                       		rts	
000153C4                            ; ===========================================================================
000153C4                            
000153C4                            loc_148A0:
000153C4 4A28 0038                  		tst.b	$38(a0)
000153C8 66F4                       		bne.s	loc_1489A
000153CA 08E8 0001 0022             		bset	#1,$22(a0)
000153D0 08A8 0005 0022             		bclr	#5,$22(a0)
000153D6 117C 0001 001D             		move.b	#1,$1D(a0)
000153DC 4E75                       		rts	
000153DE                            ; End of function Sonic_WalkCeiling
000153DE                            
000153DE                            ; ---------------------------------------------------------------------------
000153DE                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000153DE                            ; ---------------------------------------------------------------------------
000153DE                            
000153DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153DE                            
000153DE                            
000153DE                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000153DE 3428 000C                  		move.w	$C(a0),d2
000153E2 3628 0008                  		move.w	8(a0),d3
000153E6 7000                       		moveq	#0,d0
000153E8 1028 0017                  		move.b	$17(a0),d0
000153EC 4880                       		ext.w	d0
000153EE 9440                       		sub.w	d0,d2
000153F0 1028 0016                  		move.b	$16(a0),d0
000153F4 4880                       		ext.w	d0
000153F6 9640                       		sub.w	d0,d3
000153F8 0A43 000F                  		eori.w	#$F,d3
000153FC 49F8 F768                  		lea	($FFFFF768).w,a4
00015400 367C FFF0                  		movea.w	#-$10,a3
00015404 3C3C 0800                  		move.w	#$800,d6
00015408 7A0D                       		moveq	#$D,d5
0001540A 6100 0000                  		bsr.w	FindWall
0001540E 3F01                       		move.w	d1,-(sp)
00015410 3428 000C                  		move.w	$C(a0),d2
00015414 3628 0008                  		move.w	8(a0),d3
00015418 7000                       		moveq	#0,d0
0001541A 1028 0017                  		move.b	$17(a0),d0
0001541E 4880                       		ext.w	d0
00015420 D440                       		add.w	d0,d2
00015422 1028 0016                  		move.b	$16(a0),d0
00015426 4880                       		ext.w	d0
00015428 9640                       		sub.w	d0,d3
0001542A 0A43 000F                  		eori.w	#$F,d3
0001542E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015432 367C FFF0                  		movea.w	#-$10,a3
00015436 3C3C 0800                  		move.w	#$800,d6
0001543A 7A0D                       		moveq	#$D,d5
0001543C 6100 0000                  		bsr.w	FindWall
00015440 301F                       		move.w	(sp)+,d0
00015442 6100 FE30                  		bsr.w	Sonic_Angle
00015446 4A41                       		tst.w	d1
00015448 6700                       		beq.s	locret_14934
0001544A 6A00                       		bpl.s	loc_14936
0001544C 0C41 FFF2                  		cmpi.w	#-$E,d1
00015450 6D00 FDDC                  		blt.w	locret_1470A
00015454 9368 0008                  		sub.w	d1,8(a0)
00015458                            
00015458                            locret_14934:
00015458 4E75                       		rts	
0001545A                            ; ===========================================================================
0001545A                            
0001545A                            loc_14936:
0001545A 0C41 000E                  		cmpi.w	#$E,d1
0001545E 6E00                       		bgt.s	loc_14942
00015460                            
00015460                            loc_1493C:
00015460 9368 0008                  		sub.w	d1,8(a0)
00015464 4E75                       		rts	
00015466                            ; ===========================================================================
00015466                            
00015466                            loc_14942:
00015466 4A28 0038                  		tst.b	$38(a0)
0001546A 66F4                       		bne.s	loc_1493C
0001546C 08E8 0001 0022             		bset	#1,$22(a0)
00015472 08A8 0005 0022             		bclr	#5,$22(a0)
00015478 117C 0001 001D             		move.b	#1,$1D(a0)
0001547E 4E75                       		rts	
00015480                            ; End of function Sonic_WalkVertL
00015480                            
00015480                            ; ---------------------------------------------------------------------------
00015480                            ; Subroutine to	find which tile	the object is standing on
00015480                            ; ---------------------------------------------------------------------------
00015480                            
00015480                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015480                            
00015480                            
00015480                            Floor_ChkTile:				; XREF: FindFloor; et al
00015480 3002                       		move.w	d2,d0
00015482 E248                       		lsr.w	#1,d0
00015484 0240 0380                  		andi.w	#$380,d0
00015488 3203                       		move.w	d3,d1
0001548A E049                       		lsr.w	#8,d1
0001548C 0241 007F                  		andi.w	#$7F,d1
00015490 D041                       		add.w	d1,d0
00015492 72FF                       		moveq	#-1,d1
00015494 43F8 A400                  		lea	($FFFFA400).w,a1
00015498 1231 0000                  		move.b	(a1,d0.w),d1
0001549C 6700                       		beq.s	loc_14996
0001549E 6B00                       		bmi.s	loc_1499A
000154A0 5301                       		subq.b	#1,d1
000154A2 4881                       		ext.w	d1
000154A4 EE59                       		ror.w	#7,d1
000154A6 3002                       		move.w	d2,d0
000154A8 D040                       		add.w	d0,d0
000154AA 0240 01E0                  		andi.w	#$1E0,d0
000154AE D240                       		add.w	d0,d1
000154B0 3003                       		move.w	d3,d0
000154B2 E648                       		lsr.w	#3,d0
000154B4 0240 001E                  		andi.w	#$1E,d0
000154B8 D240                       		add.w	d0,d1
000154BA                            
000154BA                            loc_14996:
000154BA 2241                       		movea.l	d1,a1
000154BC 4E75                       		rts	
000154BE                            ; ===========================================================================
000154BE                            
000154BE                            loc_1499A:
000154BE 0241 007F                  		andi.w	#$7F,d1
000154C2 0828 0006 0001             		btst	#6,1(a0)
000154C8 6700                       		beq.s	loc_149B2
000154CA 5241                       		addq.w	#1,d1
000154CC 0C41 0029                  		cmpi.w	#$29,d1
000154D0 6600                       		bne.s	loc_149B2
000154D2 323C 0051                  		move.w	#$51,d1
000154D6                            
000154D6                            loc_149B2:
000154D6 5301                       		subq.b	#1,d1
000154D8 EE59                       		ror.w	#7,d1
000154DA 3002                       		move.w	d2,d0
000154DC D040                       		add.w	d0,d0
000154DE 0240 01E0                  		andi.w	#$1E0,d0
000154E2 D240                       		add.w	d0,d1
000154E4 3003                       		move.w	d3,d0
000154E6 E648                       		lsr.w	#3,d0
000154E8 0240 001E                  		andi.w	#$1E,d0
000154EC D240                       		add.w	d0,d1
000154EE 2241                       		movea.l	d1,a1
000154F0 4E75                       		rts	
000154F2                            ; End of function Floor_ChkTile
000154F2                            
000154F2                            
000154F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154F2                            
000154F2                            
000154F2                            FindFloor:				; XREF: Sonic_AnglePos; et al
000154F2 618C                       		bsr.s	Floor_ChkTile
000154F4 3011                       		move.w	(a1),d0
000154F6 3800                       		move.w	d0,d4
000154F8 0240 07FF                  		andi.w	#$7FF,d0
000154FC 6700                       		beq.s	loc_149DE
000154FE 0B04                       		btst	d5,d4
00015500 6600                       		bne.s	loc_149EC
00015502                            
00015502                            loc_149DE:
00015502 D44B                       		add.w	a3,d2
00015504 6100 0000                  		bsr.w	FindFloor2
00015508 944B                       		sub.w	a3,d2
0001550A 0641 0010                  		addi.w	#$10,d1
0001550E 4E75                       		rts	
00015510                            ; ===========================================================================
00015510                            
00015510                            loc_149EC:
00015510 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015514 1032 0000                  		move.b	(a2,d0.w),d0
00015518 0240 00FF                  		andi.w	#$FF,d0
0001551C 67E4                       		beq.s	loc_149DE
0001551E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015524 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015528 E948                       		lsl.w	#4,d0
0001552A 3203                       		move.w	d3,d1
0001552C 0804 000B                  		btst	#$B,d4
00015530 6700                       		beq.s	loc_14A12
00015532 4641                       		not.w	d1
00015534 4414                       		neg.b	(a4)
00015536                            
00015536                            loc_14A12:
00015536 0804 000C                  		btst	#$C,d4
0001553A 6700                       		beq.s	loc_14A22
0001553C 0614 0040                  		addi.b	#$40,(a4)
00015540 4414                       		neg.b	(a4)
00015542 0414 0040                  		subi.b	#$40,(a4)
00015546                            
00015546                            loc_14A22:
00015546 0241 000F                  		andi.w	#$F,d1
0001554A D240                       		add.w	d0,d1
0001554C 45F9 0000 0000             		lea	(CollArray1).l,a2
00015552 1032 1000                  		move.b	(a2,d1.w),d0
00015556 4880                       		ext.w	d0
00015558 BD44                       		eor.w	d6,d4
0001555A 0804 000C                  		btst	#$C,d4
0001555E 6700                       		beq.s	loc_14A3E
00015560 4440                       		neg.w	d0
00015562                            
00015562                            loc_14A3E:
00015562 4A40                       		tst.w	d0
00015564 679C                       		beq.s	loc_149DE
00015566 6B00                       		bmi.s	loc_14A5A
00015568 0C00 0010                  		cmpi.b	#$10,d0
0001556C 6700                       		beq.s	loc_14A66
0001556E 3202                       		move.w	d2,d1
00015570 0241 000F                  		andi.w	#$F,d1
00015574 D041                       		add.w	d1,d0
00015576 323C 000F                  		move.w	#$F,d1
0001557A 9240                       		sub.w	d0,d1
0001557C 4E75                       		rts	
0001557E                            ; ===========================================================================
0001557E                            
0001557E                            loc_14A5A:
0001557E 3202                       		move.w	d2,d1
00015580 0241 000F                  		andi.w	#$F,d1
00015584 D041                       		add.w	d1,d0
00015586 6A00 FF7A                  		bpl.w	loc_149DE
0001558A                            
0001558A                            loc_14A66:
0001558A 944B                       		sub.w	a3,d2
0001558C 6100 0000                  		bsr.w	FindFloor2
00015590 D44B                       		add.w	a3,d2
00015592 0441 0010                  		subi.w	#$10,d1
00015596 4E75                       		rts	
00015598                            ; End of function FindFloor
00015598                            
00015598                            
00015598                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015598                            
00015598                            
00015598                            FindFloor2:				; XREF: FindFloor
00015598 6100 FEE6                  		bsr.w	Floor_ChkTile
0001559C 3011                       		move.w	(a1),d0
0001559E 3800                       		move.w	d0,d4
000155A0 0240 07FF                  		andi.w	#$7FF,d0
000155A4 6700                       		beq.s	loc_14A86
000155A6 0B04                       		btst	d5,d4
000155A8 6600                       		bne.s	loc_14A94
000155AA                            
000155AA                            loc_14A86:
000155AA 323C 000F                  		move.w	#$F,d1
000155AE 3002                       		move.w	d2,d0
000155B0 0240 000F                  		andi.w	#$F,d0
000155B4 9240                       		sub.w	d0,d1
000155B6 4E75                       		rts	
000155B8                            ; ===========================================================================
000155B8                            
000155B8                            loc_14A94:
000155B8 2478 F796                  		movea.l	($FFFFF796).w,a2
000155BC 1032 0000                  		move.b	(a2,d0.w),d0
000155C0 0240 00FF                  		andi.w	#$FF,d0
000155C4 67E4                       		beq.s	loc_14A86
000155C6 45F9 0000 0000             		lea	(AngleMap).l,a2
000155CC 18B2 0000                  		move.b	(a2,d0.w),(a4)
000155D0 E948                       		lsl.w	#4,d0
000155D2 3203                       		move.w	d3,d1
000155D4 0804 000B                  		btst	#$B,d4
000155D8 6700                       		beq.s	loc_14ABA
000155DA 4641                       		not.w	d1
000155DC 4414                       		neg.b	(a4)
000155DE                            
000155DE                            loc_14ABA:
000155DE 0804 000C                  		btst	#$C,d4
000155E2 6700                       		beq.s	loc_14ACA
000155E4 0614 0040                  		addi.b	#$40,(a4)
000155E8 4414                       		neg.b	(a4)
000155EA 0414 0040                  		subi.b	#$40,(a4)
000155EE                            
000155EE                            loc_14ACA:
000155EE 0241 000F                  		andi.w	#$F,d1
000155F2 D240                       		add.w	d0,d1
000155F4 45F9 0000 0000             		lea	(CollArray1).l,a2
000155FA 1032 1000                  		move.b	(a2,d1.w),d0
000155FE 4880                       		ext.w	d0
00015600 BD44                       		eor.w	d6,d4
00015602 0804 000C                  		btst	#$C,d4
00015606 6700                       		beq.s	loc_14AE6
00015608 4440                       		neg.w	d0
0001560A                            
0001560A                            loc_14AE6:
0001560A 4A40                       		tst.w	d0
0001560C 679C                       		beq.s	loc_14A86
0001560E 6B00                       		bmi.s	loc_14AFC
00015610 3202                       		move.w	d2,d1
00015612 0241 000F                  		andi.w	#$F,d1
00015616 D041                       		add.w	d1,d0
00015618 323C 000F                  		move.w	#$F,d1
0001561C 9240                       		sub.w	d0,d1
0001561E 4E75                       		rts	
00015620                            ; ===========================================================================
00015620                            
00015620                            loc_14AFC:
00015620 3202                       		move.w	d2,d1
00015622 0241 000F                  		andi.w	#$F,d1
00015626 D041                       		add.w	d1,d0
00015628 6A00 FF80                  		bpl.w	loc_14A86
0001562C 4641                       		not.w	d1
0001562E 4E75                       		rts	
00015630                            ; End of function FindFloor2
00015630                            
00015630                            
00015630                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015630                            
00015630                            
00015630                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015630 6100 FE4E                  		bsr.w	Floor_ChkTile
00015634 3011                       		move.w	(a1),d0
00015636 3800                       		move.w	d0,d4
00015638 0240 07FF                  		andi.w	#$7FF,d0
0001563C 6700                       		beq.s	loc_14B1E
0001563E 0B04                       		btst	d5,d4
00015640 6600                       		bne.s	loc_14B2C
00015642                            
00015642                            loc_14B1E:
00015642 D64B                       		add.w	a3,d3
00015644 6100 0000                  		bsr.w	FindWall2
00015648 964B                       		sub.w	a3,d3
0001564A 0641 0010                  		addi.w	#$10,d1
0001564E 4E75                       		rts	
00015650                            ; ===========================================================================
00015650                            
00015650                            loc_14B2C:
00015650 2478 F796                  		movea.l	($FFFFF796).w,a2
00015654 1032 0000                  		move.b	(a2,d0.w),d0
00015658 0240 00FF                  		andi.w	#$FF,d0
0001565C 67E4                       		beq.s	loc_14B1E
0001565E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015664 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015668 E948                       		lsl.w	#4,d0
0001566A 3202                       		move.w	d2,d1
0001566C 0804 000C                  		btst	#$C,d4
00015670 6700                       		beq.s	loc_14B5A
00015672 4641                       		not.w	d1
00015674 0614 0040                  		addi.b	#$40,(a4)
00015678 4414                       		neg.b	(a4)
0001567A 0414 0040                  		subi.b	#$40,(a4)
0001567E                            
0001567E                            loc_14B5A:
0001567E 0804 000B                  		btst	#$B,d4
00015682 6700                       		beq.s	loc_14B62
00015684 4414                       		neg.b	(a4)
00015686                            
00015686                            loc_14B62:
00015686 0241 000F                  		andi.w	#$F,d1
0001568A D240                       		add.w	d0,d1
0001568C 45F9 0000 0000             		lea	(CollArray2).l,a2
00015692 1032 1000                  		move.b	(a2,d1.w),d0
00015696 4880                       		ext.w	d0
00015698 BD44                       		eor.w	d6,d4
0001569A 0804 000B                  		btst	#$B,d4
0001569E 6700                       		beq.s	loc_14B7E
000156A0 4440                       		neg.w	d0
000156A2                            
000156A2                            loc_14B7E:
000156A2 4A40                       		tst.w	d0
000156A4 679C                       		beq.s	loc_14B1E
000156A6 6B00                       		bmi.s	loc_14B9A
000156A8 0C00 0010                  		cmpi.b	#$10,d0
000156AC 6700                       		beq.s	loc_14BA6
000156AE 3203                       		move.w	d3,d1
000156B0 0241 000F                  		andi.w	#$F,d1
000156B4 D041                       		add.w	d1,d0
000156B6 323C 000F                  		move.w	#$F,d1
000156BA 9240                       		sub.w	d0,d1
000156BC 4E75                       		rts	
000156BE                            ; ===========================================================================
000156BE                            
000156BE                            loc_14B9A:
000156BE 3203                       		move.w	d3,d1
000156C0 0241 000F                  		andi.w	#$F,d1
000156C4 D041                       		add.w	d1,d0
000156C6 6A00 FF7A                  		bpl.w	loc_14B1E
000156CA                            
000156CA                            loc_14BA6:
000156CA 964B                       		sub.w	a3,d3
000156CC 6100 0000                  		bsr.w	FindWall2
000156D0 D64B                       		add.w	a3,d3
000156D2 0441 0010                  		subi.w	#$10,d1
000156D6 4E75                       		rts	
000156D8                            ; End of function FindWall
000156D8                            
000156D8                            
000156D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156D8                            
000156D8                            
000156D8                            FindWall2:				; XREF: FindWall
000156D8 6100 FDA6                  		bsr.w	Floor_ChkTile
000156DC 3011                       		move.w	(a1),d0
000156DE 3800                       		move.w	d0,d4
000156E0 0240 07FF                  		andi.w	#$7FF,d0
000156E4 6700                       		beq.s	loc_14BC6
000156E6 0B04                       		btst	d5,d4
000156E8 6600                       		bne.s	loc_14BD4
000156EA                            
000156EA                            loc_14BC6:
000156EA 323C 000F                  		move.w	#$F,d1
000156EE 3003                       		move.w	d3,d0
000156F0 0240 000F                  		andi.w	#$F,d0
000156F4 9240                       		sub.w	d0,d1
000156F6 4E75                       		rts	
000156F8                            ; ===========================================================================
000156F8                            
000156F8                            loc_14BD4:
000156F8 2478 F796                  		movea.l	($FFFFF796).w,a2
000156FC 1032 0000                  		move.b	(a2,d0.w),d0
00015700 0240 00FF                  		andi.w	#$FF,d0
00015704 67E4                       		beq.s	loc_14BC6
00015706 45F9 0000 0000             		lea	(AngleMap).l,a2
0001570C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015710 E948                       		lsl.w	#4,d0
00015712 3202                       		move.w	d2,d1
00015714 0804 000C                  		btst	#$C,d4
00015718 6700                       		beq.s	loc_14C02
0001571A 4641                       		not.w	d1
0001571C 0614 0040                  		addi.b	#$40,(a4)
00015720 4414                       		neg.b	(a4)
00015722 0414 0040                  		subi.b	#$40,(a4)
00015726                            
00015726                            loc_14C02:
00015726 0804 000B                  		btst	#$B,d4
0001572A 6700                       		beq.s	loc_14C0A
0001572C 4414                       		neg.b	(a4)
0001572E                            
0001572E                            loc_14C0A:
0001572E 0241 000F                  		andi.w	#$F,d1
00015732 D240                       		add.w	d0,d1
00015734 45F9 0000 0000             		lea	(CollArray2).l,a2
0001573A 1032 1000                  		move.b	(a2,d1.w),d0
0001573E 4880                       		ext.w	d0
00015740 BD44                       		eor.w	d6,d4
00015742 0804 000B                  		btst	#$B,d4
00015746 6700                       		beq.s	loc_14C26
00015748 4440                       		neg.w	d0
0001574A                            
0001574A                            loc_14C26:
0001574A 4A40                       		tst.w	d0
0001574C 679C                       		beq.s	loc_14BC6
0001574E 6B00                       		bmi.s	loc_14C3C
00015750 3203                       		move.w	d3,d1
00015752 0241 000F                  		andi.w	#$F,d1
00015756 D041                       		add.w	d1,d0
00015758 323C 000F                  		move.w	#$F,d1
0001575C 9240                       		sub.w	d0,d1
0001575E 4E75                       		rts	
00015760                            ; ===========================================================================
00015760                            
00015760                            loc_14C3C:
00015760 3203                       		move.w	d3,d1
00015762 0241 000F                  		andi.w	#$F,d1
00015766 D041                       		add.w	d1,d0
00015768 6A00 FF80                  		bpl.w	loc_14BC6
0001576C 4641                       		not.w	d1
0001576E 4E75                       		rts	
00015770                            ; End of function FindWall2
00015770                            
00015770                            ; ---------------------------------------------------------------------------
00015770                            ; Unused floor/wall subroutine - logs something	to do with collision
00015770                            ; ---------------------------------------------------------------------------
00015770                            
00015770                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015770                            
00015770                            
00015770                            FloorLog_Unk:				; XREF: Level
00015770 4E75                       		rts	
00015772                            
00015772 43F9 0000 0000             		lea	(CollArray1).l,a1
00015778 45F9 0000 0000             		lea	(CollArray1).l,a2
0001577E 363C 00FF                  		move.w	#$FF,d3
00015782                            
00015782                            loc_14C5E:
00015782 7A10                       		moveq	#$10,d5
00015784 343C 000F                  		move.w	#$F,d2
00015788                            
00015788                            loc_14C64:
00015788 7800                       		moveq	#0,d4
0001578A 323C 000F                  		move.w	#$F,d1
0001578E                            
0001578E                            loc_14C6A:
0001578E 3019                       		move.w	(a1)+,d0
00015790 EAA8                       		lsr.l	d5,d0
00015792 D944                       		addx.w	d4,d4
00015794 51C9 FFF8                  		dbf	d1,loc_14C6A
00015798                            
00015798 34C4                       		move.w	d4,(a2)+
0001579A 92FC 0020                  		suba.w	#$20,a1
0001579E 5345                       		subq.w	#1,d5
000157A0 51CA FFE6                  		dbf	d2,loc_14C64
000157A4                            
000157A4 D2FC 0020                  		adda.w	#$20,a1
000157A8 51CB FFD8                  		dbf	d3,loc_14C5E
000157AC                            
000157AC 43F9 0000 0000             		lea	(CollArray1).l,a1
000157B2 45F9 0000 0000             		lea	(CollArray2).l,a2
000157B8 6100                       		bsr.s	FloorLog_Unk2
000157BA 43F9 0000 0000             		lea	(CollArray1).l,a1
000157C0 45F9 0000 0000             		lea	(CollArray1).l,a2
000157C6                            
000157C6                            ; End of function FloorLog_Unk
000157C6                            
000157C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157C6                            
000157C6                            
000157C6                            FloorLog_Unk2:				; XREF: FloorLog_Unk
000157C6 363C 0FFF                  		move.w	#$FFF,d3
000157CA                            
000157CA                            loc_14CA6:
000157CA 7400                       		moveq	#0,d2
000157CC 323C 000F                  		move.w	#$F,d1
000157D0 3019                       		move.w	(a1)+,d0
000157D2 6700                       		beq.s	loc_14CD4
000157D4 6B00                       		bmi.s	loc_14CBE
000157D6                            
000157D6                            loc_14CB2:
000157D6 E248                       		lsr.w	#1,d0
000157D8 6400                       		bcc.s	loc_14CB8
000157DA 5202                       		addq.b	#1,d2
000157DC                            
000157DC                            loc_14CB8:
000157DC 51C9 FFF8                  		dbf	d1,loc_14CB2
000157E0                            
000157E0 6000                       		bra.s	loc_14CD6
000157E2                            ; ===========================================================================
000157E2                            
000157E2                            loc_14CBE:
000157E2 0C40 FFFF                  		cmpi.w	#-1,d0
000157E6 6700                       		beq.s	loc_14CD0
000157E8                            
000157E8                            loc_14CC4:
000157E8 E348                       		lsl.w	#1,d0
000157EA 6400                       		bcc.s	loc_14CCA
000157EC 5302                       		subq.b	#1,d2
000157EE                            
000157EE                            loc_14CCA:
000157EE 51C9 FFF8                  		dbf	d1,loc_14CC4
000157F2                            
000157F2 6000                       		bra.s	loc_14CD6
000157F4                            ; ===========================================================================
000157F4                            
000157F4                            loc_14CD0:
000157F4 303C 0010                  		move.w	#$10,d0
000157F8                            
000157F8                            loc_14CD4:
000157F8 3400                       		move.w	d0,d2
000157FA                            
000157FA                            loc_14CD6:
000157FA 14C2                       		move.b	d2,(a2)+
000157FC 51CB FFCC                  		dbf	d3,loc_14CA6
00015800                            
00015800 4E75                       		rts	
00015802                            
00015802                            ; End of function FloorLog_Unk2
00015802                            
00015802                            
00015802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015802                            
00015802                            
00015802                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015802 2628 0008                  		move.l	8(a0),d3
00015806 2428 000C                  		move.l	$C(a0),d2
0001580A 3228 0010                  		move.w	$10(a0),d1
0001580E 48C1                       		ext.l	d1
00015810 E181                       		asl.l	#8,d1
00015812 D681                       		add.l	d1,d3
00015814 3228 0012                  		move.w	$12(a0),d1
00015818 48C1                       		ext.l	d1
0001581A E181                       		asl.l	#8,d1
0001581C D481                       		add.l	d1,d2
0001581E 4842                       		swap	d2
00015820 4843                       		swap	d3
00015822 11C0 F768                  		move.b	d0,($FFFFF768).w
00015826 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001582A 1200                       		move.b	d0,d1
0001582C 0600 0020                  		addi.b	#$20,d0
00015830 6A00                       		bpl.s	loc_14D1A
00015832 1001                       		move.b	d1,d0
00015834 6A00                       		bpl.s	loc_14D14
00015836 5300                       		subq.b	#1,d0
00015838                            
00015838                            loc_14D14:
00015838 0600 0020                  		addi.b	#$20,d0
0001583C 6000                       		bra.s	loc_14D24
0001583E                            ; ===========================================================================
0001583E                            
0001583E                            loc_14D1A:
0001583E 1001                       		move.b	d1,d0
00015840 6A00                       		bpl.s	loc_14D20
00015842 5200                       		addq.b	#1,d0
00015844                            
00015844                            loc_14D20:
00015844 0600 001F                  		addi.b	#$1F,d0
00015848                            
00015848                            loc_14D24:
00015848 0200 00C0                  		andi.b	#$C0,d0
0001584C 6700 0000                  		beq.w	loc_14DF0
00015850 0C00 0080                  		cmpi.b	#$80,d0
00015854 6700 0000                  		beq.w	loc_14F7C
00015858 0201 0038                  		andi.b	#$38,d1
0001585C 6600                       		bne.s	loc_14D3C
0001585E 5042                       		addq.w	#8,d2
00015860                            
00015860                            loc_14D3C:
00015860 0C00 0040                  		cmpi.b	#$40,d0
00015864 6700 0000                  		beq.w	loc_1504A
00015868 6000 0000                  		bra.w	loc_14EBC
0001586C                            
0001586C                            ; End of function Sonic_WalkSpeed
0001586C                            
0001586C                            
0001586C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001586C                            
0001586C                            
0001586C                            sub_14D48:				; XREF: Sonic_Jump
0001586C 11C0 F768                  		move.b	d0,($FFFFF768).w
00015870 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015874 0600 0020                  		addi.b	#$20,d0
00015878 0200 00C0                  		andi.b	#$C0,d0
0001587C 0C00 0040                  		cmpi.b	#$40,d0
00015880 6700 0000                  		beq.w	loc_14FD6
00015884 0C00 0080                  		cmpi.b	#$80,d0
00015888 6700 0000                  		beq.w	Sonic_DontRunOnWalls
0001588C 0C00 00C0                  		cmpi.b	#$C0,d0
00015890 6700 0000                  		beq.w	sub_14E50
00015894                            
00015894                            ; End of function sub_14D48
00015894                            
00015894                            ; ---------------------------------------------------------------------------
00015894                            ; Subroutine to	make Sonic land	on the floor after jumping
00015894                            ; ---------------------------------------------------------------------------
00015894                            
00015894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015894                            
00015894                            
00015894                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015894 3428 000C                  		move.w	$C(a0),d2
00015898 3628 0008                  		move.w	8(a0),d3
0001589C 7000                       		moveq	#0,d0
0001589E 1028 0016                  		move.b	$16(a0),d0
000158A2 4880                       		ext.w	d0
000158A4 D440                       		add.w	d0,d2
000158A6 1028 0017                  		move.b	$17(a0),d0
000158AA 4880                       		ext.w	d0
000158AC D640                       		add.w	d0,d3
000158AE 49F8 F768                  		lea	($FFFFF768).w,a4
000158B2 367C 0010                  		movea.w	#$10,a3
000158B6 3C3C 0000                  		move.w	#0,d6
000158BA 7A0D                       		moveq	#$D,d5
000158BC 6100 FC34                  		bsr.w	FindFloor
000158C0 3F01                       		move.w	d1,-(sp)
000158C2 3428 000C                  		move.w	$C(a0),d2
000158C6 3628 0008                  		move.w	8(a0),d3
000158CA 7000                       		moveq	#0,d0
000158CC 1028 0016                  		move.b	$16(a0),d0
000158D0 4880                       		ext.w	d0
000158D2 D440                       		add.w	d0,d2
000158D4 1028 0017                  		move.b	$17(a0),d0
000158D8 4880                       		ext.w	d0
000158DA 9640                       		sub.w	d0,d3
000158DC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000158E0 367C 0010                  		movea.w	#$10,a3
000158E4 3C3C 0000                  		move.w	#0,d6
000158E8 7A0D                       		moveq	#$D,d5
000158EA 6100 FC06                  		bsr.w	FindFloor
000158EE 301F                       		move.w	(sp)+,d0
000158F0 143C 0000                  		move.b	#0,d2
000158F4                            
000158F4                            loc_14DD0:
000158F4 1638 F76A                  		move.b	($FFFFF76A).w,d3
000158F8 B240                       		cmp.w	d0,d1
000158FA 6F00                       		ble.s	loc_14DDE
000158FC 1638 F768                  		move.b	($FFFFF768).w,d3
00015900 C141                       		exg	d0,d1
00015902                            
00015902                            loc_14DDE:
00015902 0803 0000                  		btst	#0,d3
00015906 6700                       		beq.s	locret_14DE6
00015908 1602                       		move.b	d2,d3
0001590A                            
0001590A                            locret_14DE6:
0001590A 4E75                       		rts	
0001590C                            
0001590C                            ; End of function Sonic_HitFloor
0001590C                            
0001590C                            ; ===========================================================================
0001590C 3428 000C                  		move.w	$C(a0),d2
00015910 3628 0008                  		move.w	8(a0),d3
00015914                            
00015914                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015914 0642 000A                  		addi.w	#$A,d2
00015918 49F8 F768                  		lea	($FFFFF768).w,a4
0001591C 367C 0010                  		movea.w	#$10,a3
00015920 3C3C 0000                  		move.w	#0,d6
00015924 7A0E                       		moveq	#$E,d5
00015926 6100 FBCA                  		bsr.w	FindFloor
0001592A 143C 0000                  		move.b	#0,d2
0001592E                            
0001592E                            loc_14E0A:				; XREF: sub_14EB4
0001592E 1638 F768                  		move.b	($FFFFF768).w,d3
00015932 0803 0000                  		btst	#0,d3
00015936 6700                       		beq.s	locret_14E16
00015938 1602                       		move.b	d2,d3
0001593A                            
0001593A                            locret_14E16:
0001593A 4E75                       		rts	
0001593C                            
0001593C                            ; ---------------------------------------------------------------------------
0001593C                            ; Subroutine allowing objects to interact with the floor
0001593C                            ; ---------------------------------------------------------------------------
0001593C                            
0001593C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001593C                            
0001593C                            
0001593C                            ObjHitFloor:
0001593C 3628 0008                  		move.w	8(a0),d3
00015940                            
00015940                            ; End of function ObjHitFloor
00015940                            
00015940                            
00015940                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015940                            
00015940                            
00015940                            ObjHitFloor2:
00015940 3428 000C                  		move.w	$C(a0),d2
00015944 7000                       		moveq	#0,d0
00015946 1028 0016                  		move.b	$16(a0),d0
0001594A 4880                       		ext.w	d0
0001594C D440                       		add.w	d0,d2
0001594E 49F8 F768                  		lea	($FFFFF768).w,a4
00015952 18BC 0000                  		move.b	#0,(a4)
00015956 367C 0010                  		movea.w	#$10,a3
0001595A 3C3C 0000                  		move.w	#0,d6
0001595E 7A0D                       		moveq	#$D,d5
00015960 6100 FB90                  		bsr.w	FindFloor
00015964 1638 F768                  		move.b	($FFFFF768).w,d3
00015968 0803 0000                  		btst	#0,d3
0001596C 6700                       		beq.s	locret_14E4E
0001596E 163C 0000                  		move.b	#0,d3
00015972                            
00015972                            locret_14E4E:
00015972 4E75                       		rts	
00015974                            ; End of function ObjHitFloor2
00015974                            
00015974                            
00015974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015974                            
00015974                            
00015974                            sub_14E50:				; XREF: sub_14D48
00015974 3428 000C                  		move.w	$C(a0),d2
00015978 3628 0008                  		move.w	8(a0),d3
0001597C 7000                       		moveq	#0,d0
0001597E 1028 0017                  		move.b	$17(a0),d0
00015982 4880                       		ext.w	d0
00015984 9440                       		sub.w	d0,d2
00015986 1028 0016                  		move.b	$16(a0),d0
0001598A 4880                       		ext.w	d0
0001598C D640                       		add.w	d0,d3
0001598E 49F8 F768                  		lea	($FFFFF768).w,a4
00015992 367C 0010                  		movea.w	#$10,a3
00015996 3C3C 0000                  		move.w	#0,d6
0001599A 7A0E                       		moveq	#$E,d5
0001599C 6100 FC92                  		bsr.w	FindWall
000159A0 3F01                       		move.w	d1,-(sp)
000159A2 3428 000C                  		move.w	$C(a0),d2
000159A6 3628 0008                  		move.w	8(a0),d3
000159AA 7000                       		moveq	#0,d0
000159AC 1028 0017                  		move.b	$17(a0),d0
000159B0 4880                       		ext.w	d0
000159B2 D440                       		add.w	d0,d2
000159B4 1028 0016                  		move.b	$16(a0),d0
000159B8 4880                       		ext.w	d0
000159BA D640                       		add.w	d0,d3
000159BC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000159C0 367C 0010                  		movea.w	#$10,a3
000159C4 3C3C 0000                  		move.w	#0,d6
000159C8 7A0E                       		moveq	#$E,d5
000159CA 6100 FC64                  		bsr.w	FindWall
000159CE 301F                       		move.w	(sp)+,d0
000159D0 143C 00C0                  		move.b	#-$40,d2
000159D4 6000 FF1E                  		bra.w	loc_14DD0
000159D8                            
000159D8                            ; End of function sub_14E50
000159D8                            
000159D8                            
000159D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159D8                            
000159D8                            
000159D8                            sub_14EB4:				; XREF: Sonic_Floor
000159D8 3428 000C                  		move.w	$C(a0),d2
000159DC 3628 0008                  		move.w	8(a0),d3
000159E0                            
000159E0                            loc_14EBC:
000159E0 0643 000A                  		addi.w	#$A,d3
000159E4 49F8 F768                  		lea	($FFFFF768).w,a4
000159E8 367C 0010                  		movea.w	#$10,a3
000159EC 3C3C 0000                  		move.w	#0,d6
000159F0 7A0E                       		moveq	#$E,d5
000159F2 6100 FC3C                  		bsr.w	FindWall
000159F6 143C 00C0                  		move.b	#-$40,d2
000159FA 6000 FF32                  		bra.w	loc_14E0A
000159FE                            
000159FE                            ; End of function sub_14EB4
000159FE                            
000159FE                            ; ---------------------------------------------------------------------------
000159FE                            ; Subroutine to	detect when an object hits a wall to its right
000159FE                            ; ---------------------------------------------------------------------------
000159FE                            
000159FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159FE                            
000159FE                            
000159FE                            ObjHitWallRight:
000159FE D668 0008                  		add.w	8(a0),d3
00015A02 3428 000C                  		move.w	$C(a0),d2
00015A06 49F8 F768                  		lea	($FFFFF768).w,a4
00015A0A 18BC 0000                  		move.b	#0,(a4)
00015A0E 367C 0010                  		movea.w	#$10,a3
00015A12 3C3C 0000                  		move.w	#0,d6
00015A16 7A0E                       		moveq	#$E,d5
00015A18 6100 FC16                  		bsr.w	FindWall
00015A1C 1638 F768                  		move.b	($FFFFF768).w,d3
00015A20 0803 0000                  		btst	#0,d3
00015A24 6700                       		beq.s	locret_14F06
00015A26 163C 00C0                  		move.b	#-$40,d3
00015A2A                            
00015A2A                            locret_14F06:
00015A2A 4E75                       		rts	
00015A2C                            
00015A2C                            ; End of function ObjHitWallRight
00015A2C                            
00015A2C                            ; ---------------------------------------------------------------------------
00015A2C                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015A2C                            ; touches them
00015A2C                            ; ---------------------------------------------------------------------------
00015A2C                            
00015A2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A2C                            
00015A2C                            
00015A2C                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015A2C 3428 000C                  		move.w	$C(a0),d2
00015A30 3628 0008                  		move.w	8(a0),d3
00015A34 7000                       		moveq	#0,d0
00015A36 1028 0016                  		move.b	$16(a0),d0
00015A3A 4880                       		ext.w	d0
00015A3C 9440                       		sub.w	d0,d2
00015A3E 0A42 000F                  		eori.w	#$F,d2
00015A42 1028 0017                  		move.b	$17(a0),d0
00015A46 4880                       		ext.w	d0
00015A48 D640                       		add.w	d0,d3
00015A4A 49F8 F768                  		lea	($FFFFF768).w,a4
00015A4E 367C FFF0                  		movea.w	#-$10,a3
00015A52 3C3C 1000                  		move.w	#$1000,d6
00015A56 7A0E                       		moveq	#$E,d5
00015A58 6100 FA98                  		bsr.w	FindFloor
00015A5C 3F01                       		move.w	d1,-(sp)
00015A5E 3428 000C                  		move.w	$C(a0),d2
00015A62 3628 0008                  		move.w	8(a0),d3
00015A66 7000                       		moveq	#0,d0
00015A68 1028 0016                  		move.b	$16(a0),d0
00015A6C 4880                       		ext.w	d0
00015A6E 9440                       		sub.w	d0,d2
00015A70 0A42 000F                  		eori.w	#$F,d2
00015A74 1028 0017                  		move.b	$17(a0),d0
00015A78 4880                       		ext.w	d0
00015A7A 9640                       		sub.w	d0,d3
00015A7C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015A80 367C FFF0                  		movea.w	#-$10,a3
00015A84 3C3C 1000                  		move.w	#$1000,d6
00015A88 7A0E                       		moveq	#$E,d5
00015A8A 6100 FA66                  		bsr.w	FindFloor
00015A8E 301F                       		move.w	(sp)+,d0
00015A90 143C 0080                  		move.b	#-$80,d2
00015A94 6000 FE5E                  		bra.w	loc_14DD0
00015A98                            ; End of function Sonic_DontRunOnWalls
00015A98                            
00015A98                            ; ===========================================================================
00015A98 3428 000C                  		move.w	$C(a0),d2
00015A9C 3628 0008                  		move.w	8(a0),d3
00015AA0                            
00015AA0                            loc_14F7C:
00015AA0 0442 000A                  		subi.w	#$A,d2
00015AA4 0A42 000F                  		eori.w	#$F,d2
00015AA8 49F8 F768                  		lea	($FFFFF768).w,a4
00015AAC 367C FFF0                  		movea.w	#-$10,a3
00015AB0 3C3C 1000                  		move.w	#$1000,d6
00015AB4 7A0E                       		moveq	#$E,d5
00015AB6 6100 FA3A                  		bsr.w	FindFloor
00015ABA 143C 0080                  		move.b	#-$80,d2
00015ABE 6000 FE6E                  		bra.w	loc_14E0A
00015AC2                            
00015AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AC2                            
00015AC2                            
00015AC2                            ObjHitCeiling:
00015AC2 3428 000C                  		move.w	$C(a0),d2
00015AC6 3628 0008                  		move.w	8(a0),d3
00015ACA 7000                       		moveq	#0,d0
00015ACC 1028 0016                  		move.b	$16(a0),d0
00015AD0 4880                       		ext.w	d0
00015AD2 9440                       		sub.w	d0,d2
00015AD4 0A42 000F                  		eori.w	#$F,d2
00015AD8 49F8 F768                  		lea	($FFFFF768).w,a4
00015ADC 367C FFF0                  		movea.w	#-$10,a3
00015AE0 3C3C 1000                  		move.w	#$1000,d6
00015AE4 7A0E                       		moveq	#$E,d5
00015AE6 6100 FA0A                  		bsr.w	FindFloor
00015AEA 1638 F768                  		move.b	($FFFFF768).w,d3
00015AEE 0803 0000                  		btst	#0,d3
00015AF2 6700                       		beq.s	locret_14FD4
00015AF4 163C 0080                  		move.b	#-$80,d3
00015AF8                            
00015AF8                            locret_14FD4:
00015AF8 4E75                       		rts	
00015AFA                            ; End of function ObjHitCeiling
00015AFA                            
00015AFA                            ; ===========================================================================
00015AFA                            
00015AFA                            loc_14FD6:				; XREF: sub_14D48
00015AFA 3428 000C                  		move.w	$C(a0),d2
00015AFE 3628 0008                  		move.w	8(a0),d3
00015B02 7000                       		moveq	#0,d0
00015B04 1028 0017                  		move.b	$17(a0),d0
00015B08 4880                       		ext.w	d0
00015B0A 9440                       		sub.w	d0,d2
00015B0C 1028 0016                  		move.b	$16(a0),d0
00015B10 4880                       		ext.w	d0
00015B12 9640                       		sub.w	d0,d3
00015B14 0A43 000F                  		eori.w	#$F,d3
00015B18 49F8 F768                  		lea	($FFFFF768).w,a4
00015B1C 367C FFF0                  		movea.w	#-$10,a3
00015B20 3C3C 0800                  		move.w	#$800,d6
00015B24 7A0E                       		moveq	#$E,d5
00015B26 6100 FB08                  		bsr.w	FindWall
00015B2A 3F01                       		move.w	d1,-(sp)
00015B2C 3428 000C                  		move.w	$C(a0),d2
00015B30 3628 0008                  		move.w	8(a0),d3
00015B34 7000                       		moveq	#0,d0
00015B36 1028 0017                  		move.b	$17(a0),d0
00015B3A 4880                       		ext.w	d0
00015B3C D440                       		add.w	d0,d2
00015B3E 1028 0016                  		move.b	$16(a0),d0
00015B42 4880                       		ext.w	d0
00015B44 9640                       		sub.w	d0,d3
00015B46 0A43 000F                  		eori.w	#$F,d3
00015B4A 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015B4E 367C FFF0                  		movea.w	#-$10,a3
00015B52 3C3C 0800                  		move.w	#$800,d6
00015B56 7A0E                       		moveq	#$E,d5
00015B58 6100 FAD6                  		bsr.w	FindWall
00015B5C 301F                       		move.w	(sp)+,d0
00015B5E 143C 0040                  		move.b	#$40,d2
00015B62 6000 FD90                  		bra.w	loc_14DD0
00015B66                            
00015B66                            ; ---------------------------------------------------------------------------
00015B66                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015B66                            ; ---------------------------------------------------------------------------
00015B66                            
00015B66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B66                            
00015B66                            
00015B66                            Sonic_HitWall:				; XREF: Sonic_Floor
00015B66 3428 000C                  		move.w	$C(a0),d2
00015B6A 3628 0008                  		move.w	8(a0),d3
00015B6E                            
00015B6E                            loc_1504A:
00015B6E 0443 000A                  		subi.w	#$A,d3
00015B72 0A43 000F                  		eori.w	#$F,d3
00015B76 49F8 F768                  		lea	($FFFFF768).w,a4
00015B7A 367C FFF0                  		movea.w	#-$10,a3
00015B7E 3C3C 0800                  		move.w	#$800,d6
00015B82 7A0E                       		moveq	#$E,d5
00015B84 6100 FAAA                  		bsr.w	FindWall
00015B88 143C 0040                  		move.b	#$40,d2
00015B8C 6000 FDA0                  		bra.w	loc_14E0A
00015B90                            ; End of function Sonic_HitWall
00015B90                            
00015B90                            ; ---------------------------------------------------------------------------
00015B90                            ; Subroutine to	detect when an object hits a wall to its left
00015B90                            ; ---------------------------------------------------------------------------
00015B90                            
00015B90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B90                            
00015B90                            
00015B90                            ObjHitWallLeft:
00015B90 D668 0008                  		add.w	8(a0),d3
00015B94 3428 000C                  		move.w	$C(a0),d2
00015B98 49F8 F768                  		lea	($FFFFF768).w,a4
00015B9C 18BC 0000                  		move.b	#0,(a4)
00015BA0 367C FFF0                  		movea.w	#-$10,a3
00015BA4 3C3C 0800                  		move.w	#$800,d6
00015BA8 7A0E                       		moveq	#$E,d5
00015BAA 6100 FA84                  		bsr.w	FindWall
00015BAE 1638 F768                  		move.b	($FFFFF768).w,d3
00015BB2 0803 0000                  		btst	#0,d3
00015BB6 6700                       		beq.s	locret_15098
00015BB8 163C 0040                  		move.b	#$40,d3
00015BBC                            
00015BBC                            locret_15098:
00015BBC 4E75                       		rts	
00015BBE                            ; End of function ObjHitWallLeft
00015BBE                            
00015BBE                            ; ===========================================================================
00015BBE                            ; ---------------------------------------------------------------------------
00015BBE                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015BBE                            ; ---------------------------------------------------------------------------
00015BBE                            
00015BBE                            Obj66:					; XREF: Obj_Index
00015BBE 7000                       		moveq	#0,d0
00015BC0 1028 0024                  		move.b	$24(a0),d0
00015BC4 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015BC8 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015BCC                            ; ===========================================================================
00015BCC 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015BCE 0000                       		dc.w Obj66_Action-Obj66_Index
00015BD0 0000                       		dc.w Obj66_Display-Obj66_Index
00015BD2 0000                       		dc.w Obj66_Release-Obj66_Index
00015BD4                            ; ===========================================================================
00015BD4                            
00015BD4                            Obj66_Main:				; XREF: Obj66_Index
00015BD4 5428 0024                  		addq.b	#2,$24(a0)
00015BD8 323C 0001                  		move.w	#1,d1
00015BDC 2248                       		movea.l	a0,a1
00015BDE 6000                       		bra.s	Obj66_MakeItem
00015BE0                            ; ===========================================================================
00015BE0                            
00015BE0                            Obj66_Loop:
00015BE0 6100 88D6                  		bsr.w	SingleObjLoad
00015BE4 6600                       		bne.s	loc_150FE
00015BE6 12BC 0066                  		move.b	#$66,0(a1)
00015BEA 5829 0024                  		addq.b	#4,$24(a1)
00015BEE 3368 0008 0008             		move.w	8(a0),8(a1)
00015BF4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015BFA 137C 0003 0018             		move.b	#3,$18(a1)
00015C00 137C 0010 001A             		move.b	#$10,$1A(a1)
00015C06                            
00015C06                            Obj66_MakeItem:				; XREF: Obj66_Main
00015C06 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015C0E 337C 4348 0002             		move.w	#$4348,2(a1)
00015C14 0029 0004 0001             		ori.b	#4,1(a1)
00015C1A 137C 0038 0019             		move.b	#$38,$19(a1)
00015C20                            
00015C20                            loc_150FE:
00015C20 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015C24                            
00015C24 117C 0030 0019             		move.b	#$30,$19(a0)
00015C2A 117C 0004 0018             		move.b	#4,$18(a0)
00015C30 317C 003C 0030             		move.w	#$3C,$30(a0)
00015C36 117C 0001 0034             		move.b	#1,$34(a0)
00015C3C 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015C42                            
00015C42                            Obj66_Action:				; XREF: Obj66_Index
00015C42 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015C46 4A28 0001                  		tst.b	1(a0)
00015C4A 6A00 0000                  		bpl.w	Obj66_Display
00015C4E 323C 0030                  		move.w	#$30,d1
00015C52 3401                       		move.w	d1,d2
00015C54 3602                       		move.w	d2,d3
00015C56 5243                       		addq.w	#1,d3
00015C58 3828 0008                  		move.w	8(a0),d4
00015C5C 6100 A7A4                  		bsr.w	SolidObject
00015C60 0828 0005 0022             		btst	#5,$22(a0)
00015C66 6700 0000                  		beq.w	Obj66_Display
00015C6A 43F8 D000                  		lea	($FFFFD000).w,a1
00015C6E 720E                       		moveq	#$E,d1
00015C70 3029 0008                  		move.w	8(a1),d0
00015C74 B068 0008                  		cmp.w	8(a0),d0
00015C78 6500                       		bcs.s	Obj66_GrabSonic
00015C7A 7207                       		moveq	#7,d1
00015C7C                            
00015C7C                            Obj66_GrabSonic:
00015C7C B228 001A                  		cmp.b	$1A(a0),d1
00015C80 6600                       		bne.s	Obj66_Display
00015C82 1141 0032                  		move.b	d1,$32(a0)
00015C86 5828 0024                  		addq.b	#4,$24(a0)
00015C8A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015C90 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015C96 337C 0800 0014             		move.w	#$800,$14(a1)
00015C9C 337C 0000 0010             		move.w	#0,$10(a1)
00015CA2 337C 0000 0012             		move.w	#0,$12(a1)
00015CA8 08A8 0005 0022             		bclr	#5,$22(a0)
00015CAE 08A9 0005 0022             		bclr	#5,$22(a1)
00015CB4 08E9 0001 0022             		bset	#1,$22(a1)
00015CBA 3429 0008                  		move.w	8(a1),d2
00015CBE 3629 000C                  		move.w	$C(a1),d3
00015CC2 6100 0000                  		bsr.w	Obj66_ChgPos
00015CC6 D569 0008                  		add.w	d2,8(a1)
00015CCA D769 000C                  		add.w	d3,$C(a1)
00015CCE E0E9 0008                  		asr	8(a1)
00015CD2 E0E9 000C                  		asr	$C(a1)
00015CD6                            
00015CD6                            Obj66_Display:				; XREF: Obj66_Index
00015CD6 6000 A402                  		bra.w	MarkObjGone
00015CDA                            ; ===========================================================================
00015CDA                            
00015CDA                            Obj66_Release:				; XREF: Obj66_Index
00015CDA 1028 001A                  		move.b	$1A(a0),d0
00015CDE 0C00 0004                  		cmpi.b	#4,d0
00015CE2 6700                       		beq.s	loc_151C8
00015CE4 0C00 0007                  		cmpi.b	#7,d0
00015CE8 6600                       		bne.s	loc_151F8
00015CEA                            
00015CEA                            loc_151C8:
00015CEA B028 0032                  		cmp.b	$32(a0),d0
00015CEE 6700                       		beq.s	loc_151F8
00015CF0 43F8 D000                  		lea	($FFFFD000).w,a1
00015CF4 337C 0000 0010             		move.w	#0,$10(a1)
00015CFA 337C 0800 0012             		move.w	#$800,$12(a1)
00015D00 0C00 0004                  		cmpi.b	#4,d0
00015D04 6700                       		beq.s	loc_151F0
00015D06 337C 0800 0010             		move.w	#$800,$10(a1)
00015D0C 337C 0800 0012             		move.w	#$800,$12(a1)
00015D12                            
00015D12                            loc_151F0:
00015D12 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015D16 5928 0024                  		subq.b	#4,$24(a0)
00015D1A                            
00015D1A                            loc_151F8:
00015D1A 6100                       		bsr.s	Obj66_ChkSwitch
00015D1C 6100                       		bsr.s	Obj66_ChgPos
00015D1E 6000 A3BA                  		bra.w	MarkObjGone
00015D22                            
00015D22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D22                            
00015D22                            
00015D22                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015D22 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015D26 7000                       		moveq	#0,d0
00015D28 1028 0038                  		move.b	$38(a0),d0
00015D2C 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015D32 6700                       		beq.s	loc_15224	; if not, branch
00015D34 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015D38 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015D3A 4428 0034                  		neg.b	$34(a0)
00015D3E 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015D44 6000                       		bra.s	Obj66_Animate
00015D46                            ; ===========================================================================
00015D46                            
00015D46                            loc_15224:
00015D46 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015D4A                            
00015D4A                            Obj66_Animate:
00015D4A 5328 001E                  		subq.b	#1,$1E(a0)
00015D4E 6A00                       		bpl.s	locret_15246
00015D50 117C 0007 001E             		move.b	#7,$1E(a0)
00015D56 1228 0034                  		move.b	$34(a0),d1
00015D5A 1028 001A                  		move.b	$1A(a0),d0
00015D5E D001                       		add.b	d1,d0
00015D60 0200 000F                  		andi.b	#$F,d0
00015D64 1140 001A                  		move.b	d0,$1A(a0)
00015D68                            
00015D68                            locret_15246:
00015D68 4E75                       		rts	
00015D6A                            ; End of function Obj66_ChkSwitch
00015D6A                            
00015D6A                            
00015D6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D6A                            
00015D6A                            
00015D6A                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015D6A 43F8 D000                  		lea	($FFFFD000).w,a1
00015D6E 7000                       		moveq	#0,d0
00015D70 1028 001A                  		move.b	$1A(a0),d0
00015D74 D040                       		add.w	d0,d0
00015D76 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015D7A 101A                       		move.b	(a2)+,d0
00015D7C 4880                       		ext.w	d0
00015D7E D068 0008                  		add.w	8(a0),d0
00015D82 3340 0008                  		move.w	d0,8(a1)
00015D86 101A                       		move.b	(a2)+,d0
00015D88 4880                       		ext.w	d0
00015D8A D068 000C                  		add.w	$C(a0),d0
00015D8E 3340 000C                  		move.w	d0,$C(a1)
00015D92 4E75                       		rts	
00015D94                            ; End of function Obj66_ChgPos
00015D94                            
00015D94                            ; ===========================================================================
00015D94 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015D98 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015D9C 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015DA0 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015DA4 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015DA8 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015DAC 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015DB0 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015DB4                            ; ---------------------------------------------------------------------------
00015DB4                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015DB4                            ; ---------------------------------------------------------------------------
00015DB4                            Map_obj66:
00015DB4                            	include "_maps\obj66.asm"
00015DB4                            ; ---------------------------------------------------------------------------
00015DB4                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015DB4                            ; ---------------------------------------------------------------------------
00015DB4 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015DB8 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015DBC 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015DC0 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015DC4 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015DC8 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015DCC 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015DD0 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015DD4 0000                       		dc.w byte_154A4-Map_obj66
00015DD6 06                         byte_152B4:	dc.b 6
00015DD7 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015DDC 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015DE1 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015DE6 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015DEB 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015DF0 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015DF5 06                         byte_152D3:	dc.b 6
00015DF6 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015DFB 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015E00 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015E05 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015E0A 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015E0F 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015E14 06                         byte_152F2:	dc.b 6
00015E15 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015E1A 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015E1F 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015E24 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015E29 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015E2E 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015E33 06                         byte_15311:	dc.b 6
00015E34 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015E39 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015E3E 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015E43 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015E48 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015E4D 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015E52 06                         byte_15330:	dc.b 6
00015E53 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015E58 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015E5D 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015E62 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015E67 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015E6C 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015E71 06                         byte_1534F:	dc.b 6
00015E72 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015E77 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015E7C 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015E81 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015E86 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015E8B 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015E90 06                         byte_1536E:	dc.b 6
00015E91 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015E96 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015E9B 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015EA0 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015EA5 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015EAA 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015EAF 06                         byte_1538D:	dc.b 6
00015EB0 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015EB5 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015EBA F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015EBF F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015EC4 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015EC9 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015ECE 06                         byte_153AC:	dc.b 6
00015ECF E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015ED4 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015ED9 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015EDE E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015EE3 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015EE8 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015EED 06                         byte_153CB:	dc.b 6
00015EEE D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015EF3 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015EF8 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015EFD DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015F02 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015F07 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015F0C 06                         byte_153EA:	dc.b 6
00015F0D D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015F12 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015F17 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015F1C D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015F21 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015F26 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015F2B 06                         byte_15409:	dc.b 6
00015F2C D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015F31 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015F36 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015F3B CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015F40 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015F45 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015F4A 06                         byte_15428:	dc.b 6
00015F4B D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015F50 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015F55 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015F5A C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015F5F E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015F64 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015F69 06                         byte_15447:	dc.b 6
00015F6A D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015F6F D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015F74 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015F79 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015F7E E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015F83 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015F88 06                         byte_15466:	dc.b 6
00015F89 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015F8E D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015F93 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015F98 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015F9D E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015FA2 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015FA7 06                         byte_15485:	dc.b 6
00015FA8 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015FAD D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015FB2 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015FB7 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015FBC F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015FC1 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015FC6 0C                         byte_154A4:	dc.b $C
00015FC7 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015FCC D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015FD1 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015FD6 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015FDB D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015FE0 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015FE5 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015FEA 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015FEF 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015FF4 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015FF9 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015FFE 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00016004 00                         		even
00016004 00                         		even
00016004                            
00016004                            ; ===========================================================================
00016004                            ; ---------------------------------------------------------------------------
00016004                            ; Object 67 - disc that	you run	around (SBZ)
00016004                            ; ---------------------------------------------------------------------------
00016004                            
00016004                            Obj67:					; XREF: Obj_Index
00016004 7000                       		moveq	#0,d0
00016006 1028 0024                  		move.b	$24(a0),d0
0001600A 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
0001600E 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00016012                            ; ===========================================================================
00016012 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00016014 0000                       		dc.w Obj67_Action-Obj67_Index
00016016                            ; ===========================================================================
00016016                            
00016016                            Obj67_Main:				; XREF: Obj67_Index
00016016 5428 0024                  		addq.b	#2,$24(a0)
0001601A 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00016022 317C C344 0002             		move.w	#$C344,2(a0)
00016028 117C 0004 0001             		move.b	#4,1(a0)
0001602E 117C 0004 0018             		move.b	#4,$18(a0)
00016034 117C 0008 0019             		move.b	#8,$19(a0)
0001603A 3168 0008 0032             		move.w	8(a0),$32(a0)
00016040 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016046 117C 0018 0034             		move.b	#$18,$34(a0)
0001604C 117C 0048 0038             		move.b	#$48,$38(a0)
00016052 1228 0028                  		move.b	$28(a0),d1	; get object type
00016056 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001605A 6700                       		beq.s	loc_15546
0001605C 117C 0010 0034             		move.b	#$10,$34(a0)
00016062 117C 0038 0038             		move.b	#$38,$38(a0)
00016068                            
00016068                            loc_15546:
00016068 1228 0028                  		move.b	$28(a0),d1	; get object type
0001606C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016070 4881                       		ext.w	d1
00016072 E741                       		asl.w	#3,d1
00016074 3141 0036                  		move.w	d1,$36(a0)
00016078 1028 0022                  		move.b	$22(a0),d0
0001607C E418                       		ror.b	#2,d0
0001607E 0200 00C0                  		andi.b	#-$40,d0
00016082 1140 0026                  		move.b	d0,$26(a0)
00016086                            
00016086                            Obj67_Action:				; XREF: Obj67_Index
00016086 6100 0000                  		bsr.w	Obj67_MoveSonic
0001608A 6100 0000                  		bsr.w	Obj67_MoveSpot
0001608E 6000 0000                  		bra.w	Obj67_ChkDel
00016092                            ; ===========================================================================
00016092                            
00016092                            Obj67_MoveSonic:			; XREF: Obj67_Action
00016092 7400                       		moveq	#0,d2
00016094 1428 0038                  		move.b	$38(a0),d2
00016098 3602                       		move.w	d2,d3
0001609A D643                       		add.w	d3,d3
0001609C 43F8 D000                  		lea	($FFFFD000).w,a1
000160A0 3029 0008                  		move.w	8(a1),d0
000160A4 9068 0032                  		sub.w	$32(a0),d0
000160A8 D042                       		add.w	d2,d0
000160AA B043                       		cmp.w	d3,d0
000160AC 6400                       		bcc.s	loc_155A8
000160AE 3229 000C                  		move.w	$C(a1),d1
000160B2 9268 0030                  		sub.w	$30(a0),d1
000160B6 D242                       		add.w	d2,d1
000160B8 B243                       		cmp.w	d3,d1
000160BA 6400                       		bcc.s	loc_155A8
000160BC 0829 0001 0022             		btst	#1,$22(a1)
000160C2 6700                       		beq.s	loc_155B8
000160C4 4228 003A                  		clr.b	$3A(a0)
000160C8 4E75                       		rts	
000160CA                            ; ===========================================================================
000160CA                            
000160CA                            loc_155A8:
000160CA 4A28 003A                  		tst.b	$3A(a0)
000160CE 6700                       		beq.s	locret_155B6
000160D0 4229 0038                  		clr.b	$38(a1)
000160D4 4228 003A                  		clr.b	$3A(a0)
000160D8                            
000160D8                            locret_155B6:
000160D8 4E75                       		rts	
000160DA                            ; ===========================================================================
000160DA                            
000160DA                            loc_155B8:
000160DA 4A28 003A                  		tst.b	$3A(a0)
000160DE 6600                       		bne.s	loc_155E2
000160E0 117C 0001 003A             		move.b	#1,$3A(a0)
000160E6 0829 0002 0022             		btst	#2,$22(a1)
000160EC 6600                       		bne.s	loc_155D0
000160EE 4229 001C                  		clr.b	$1C(a1)
000160F2                            
000160F2                            loc_155D0:
000160F2 08A9 0005 0022             		bclr	#5,$22(a1)
000160F8 137C 0001 001D             		move.b	#1,$1D(a1)
000160FE 137C 0001 0038             		move.b	#1,$38(a1)
00016104                            
00016104                            loc_155E2:
00016104 3029 0014                  		move.w	$14(a1),d0
00016108 4A68 0036                  		tst.w	$36(a0)
0001610C 6A00                       		bpl.s	loc_15608
0001610E 0C40 FC00                  		cmpi.w	#-$400,d0
00016112 6F00                       		ble.s	loc_155FA
00016114 337C FC00 0014             		move.w	#-$400,$14(a1)
0001611A 4E75                       		rts	
0001611C                            ; ===========================================================================
0001611C                            
0001611C                            loc_155FA:
0001611C 0C40 F100                  		cmpi.w	#-$F00,d0
00016120 6C00                       		bge.s	locret_15606
00016122 337C F100 0014             		move.w	#-$F00,$14(a1)
00016128                            
00016128                            locret_15606:
00016128 4E75                       		rts	
0001612A                            ; ===========================================================================
0001612A                            
0001612A                            loc_15608:
0001612A 0C40 0400                  		cmpi.w	#$400,d0
0001612E 6C00                       		bge.s	loc_15616
00016130 337C 0400 0014             		move.w	#$400,$14(a1)
00016136 4E75                       		rts	
00016138                            ; ===========================================================================
00016138                            
00016138                            loc_15616:
00016138 0C40 0F00                  		cmpi.w	#$F00,d0
0001613C 6F00                       		ble.s	locret_15622
0001613E 337C 0F00 0014             		move.w	#$F00,$14(a1)
00016144                            
00016144                            locret_15622:
00016144 4E75                       		rts	
00016146                            ; ===========================================================================
00016146                            
00016146                            Obj67_MoveSpot:				; XREF: Obj67_Action
00016146 3028 0036                  		move.w	$36(a0),d0
0001614A D168 0026                  		add.w	d0,$26(a0)
0001614E 1028 0026                  		move.b	$26(a0),d0
00016152 4EB9 0000 2D6C             		jsr	(CalcSine).l
00016158 3428 0030                  		move.w	$30(a0),d2
0001615C 3628 0032                  		move.w	$32(a0),d3
00016160 7800                       		moveq	#0,d4
00016162 1828 0034                  		move.b	$34(a0),d4
00016166 E14C                       		lsl.w	#8,d4
00016168 2A04                       		move.l	d4,d5
0001616A C9C0                       		muls.w	d0,d4
0001616C 4844                       		swap	d4
0001616E CBC1                       		muls.w	d1,d5
00016170 4845                       		swap	d5
00016172 D842                       		add.w	d2,d4
00016174 DA43                       		add.w	d3,d5
00016176 3144 000C                  		move.w	d4,$C(a0)
0001617A 3145 0008                  		move.w	d5,8(a0)
0001617E 4E75                       		rts	
00016180                            ; ===========================================================================
00016180                            
00016180                            Obj67_ChkDel:				; XREF: Obj67_Action
00016180 3028 0032                  		move.w	$32(a0),d0
00016184 0240 FF80                  		andi.w	#-$80,d0
00016188 3238 F700                  		move.w	($FFFFF700).w,d1
0001618C 0441 0080                  		subi.w	#$80,d1
00016190 0241 FF80                  		andi.w	#-$80,d1
00016194 9041                       		sub.w	d1,d0
00016196 0C40 0280                  		cmpi.w	#$280,d0
0001619A 6200                       		bhi.s	Obj67_Delete
0001619C 4EF9 0000 E032             		jmp	DisplaySprite
000161A2                            ; ===========================================================================
000161A2                            
000161A2                            Obj67_Delete:
000161A2 4EF9 0000 E06E             		jmp	DeleteObject
000161A8                            ; ===========================================================================
000161A8                            ; ---------------------------------------------------------------------------
000161A8                            ; Sprite mappings - disc that you run around (SBZ)
000161A8                            ; (It's just a small blob that moves around in a circle. The disc itself is
000161A8                            ; part of the level tiles.)
000161A8                            ; ---------------------------------------------------------------------------
000161A8                            Map_obj67:
000161A8                            	include "_maps\obj67.asm"
000161A8                            ; ---------------------------------------------------------------------------
000161A8                            ; Sprite mappings - disc that you run around (SBZ)
000161A8                            ; (It's just a small blob that moves around in a circle. The disc itself is
000161A8                            ; part of the level tiles.)
000161A8                            ; ---------------------------------------------------------------------------
000161A8 0000                       		dc.w byte_15688-Map_obj67
000161AA 01                         byte_15688:	dc.b 1
000161AB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000161B0                            		even
000161B0                            		even
000161B0                            
000161B0                            ; ===========================================================================
000161B0                            ; ---------------------------------------------------------------------------
000161B0                            ; Object 68 - conveyor belts (SBZ)
000161B0                            ; ---------------------------------------------------------------------------
000161B0                            
000161B0                            Obj68:					; XREF: Obj_Index
000161B0 7000                       		moveq	#0,d0
000161B2 1028 0024                  		move.b	$24(a0),d0
000161B6 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000161BA 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000161BE                            ; ===========================================================================
000161BE 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000161C0 0000                       		dc.w Obj68_Action-Obj68_Index
000161C2                            ; ===========================================================================
000161C2                            
000161C2                            Obj68_Main:				; XREF: Obj68_Index
000161C2 5428 0024                  		addq.b	#2,$24(a0)
000161C6 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000161CC 1228 0028                  		move.b	$28(a0),d1	; get object type
000161D0 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000161D4 6700                       		beq.s	loc_156BA	; if zero, branch
000161D6 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000161DC                            
000161DC                            loc_156BA:
000161DC 1228 0028                  		move.b	$28(a0),d1	; get object type
000161E0 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000161E4 4881                       		ext.w	d1
000161E6 E841                       		asr.w	#4,d1
000161E8 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000161EC                            
000161EC                            Obj68_Action:				; XREF: Obj68_Index
000161EC 6100                       		bsr.s	Obj68_MoveSonic
000161EE 3028 0008                  		move.w	8(a0),d0
000161F2 0240 FF80                  		andi.w	#$FF80,d0
000161F6 3238 F700                  		move.w	($FFFFF700).w,d1
000161FA 0441 0080                  		subi.w	#$80,d1
000161FE 0241 FF80                  		andi.w	#$FF80,d1
00016202 9041                       		sub.w	d1,d0
00016204 0C40 0280                  		cmpi.w	#$280,d0
00016208 6200                       		bhi.s	Obj68_Delete
0001620A 4E75                       		rts	
0001620C                            ; ===========================================================================
0001620C                            
0001620C                            Obj68_Delete:
0001620C 4EF9 0000 E06E             		jmp	DeleteObject
00016212                            ; ===========================================================================
00016212                            
00016212                            Obj68_MoveSonic:			; XREF: Obj68_Action
00016212 7400                       		moveq	#0,d2
00016214 1428 0038                  		move.b	$38(a0),d2
00016218 3602                       		move.w	d2,d3
0001621A D643                       		add.w	d3,d3
0001621C 43F8 D000                  		lea	($FFFFD000).w,a1
00016220 3029 0008                  		move.w	8(a1),d0
00016224 9068 0008                  		sub.w	8(a0),d0
00016228 D042                       		add.w	d2,d0
0001622A B043                       		cmp.w	d3,d0
0001622C 6400                       		bcc.s	locret_1572E
0001622E 3229 000C                  		move.w	$C(a1),d1
00016232 9268 000C                  		sub.w	$C(a0),d1
00016236 0641 0030                  		addi.w	#$30,d1
0001623A 0C41 0030                  		cmpi.w	#$30,d1
0001623E 6400                       		bcc.s	locret_1572E
00016240 0829 0001 0022             		btst	#1,$22(a1)
00016246 6600                       		bne.s	locret_1572E
00016248 3028 0036                  		move.w	$36(a0),d0
0001624C D169 0008                  		add.w	d0,8(a1)
00016250                            
00016250                            locret_1572E:
00016250 4E75                       		rts	
00016252                            
00016252                            ; ===========================================================================
00016252                            ; ---------------------------------------------------------------------------
00016252                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00016252                            ; ---------------------------------------------------------------------------
00016252                            
00016252                            Obj69:					; XREF: Obj_Index
00016252 7000                       		moveq	#0,d0
00016254 1028 0024                  		move.b	$24(a0),d0
00016258 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
0001625C 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00016260                            ; ===========================================================================
00016260 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00016262 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00016264 0000                       		dc.w Obj69_Spinner-Obj69_Index
00016266                            ; ===========================================================================
00016266                            
00016266                            Obj69_Main:				; XREF: Obj69_Index
00016266 5428 0024                  		addq.b	#2,$24(a0)
0001626A 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00016272 317C 4492 0002             		move.w	#$4492,2(a0)
00016278 0028 0004 0001             		ori.b	#4,1(a0)
0001627E 117C 0080 0019             		move.b	#$80,$19(a0)
00016284 7000                       		moveq	#0,d0
00016286 1028 0028                  		move.b	$28(a0),d0
0001628A 0240 000F                  		andi.w	#$F,d0
0001628E C0FC 003C                  		mulu.w	#$3C,d0
00016292 3140 0032                  		move.w	d0,$32(a0)
00016296 4A28 0028                  		tst.b	$28(a0)
0001629A 6A00                       		bpl.s	Obj69_Trapdoor
0001629C 5428 0024                  		addq.b	#2,$24(a0)
000162A0 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000162A8 317C 04DF 0002             		move.w	#$4DF,2(a0)
000162AE 117C 0010 0019             		move.b	#$10,$19(a0)
000162B4 117C 0002 001C             		move.b	#2,$1C(a0)
000162BA 7000                       		moveq	#0,d0
000162BC 1028 0028                  		move.b	$28(a0),d0	; get object type
000162C0 3200                       		move.w	d0,d1
000162C2 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000162C6 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000162CA 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000162CE 3140 0032                  		move.w	d0,$32(a0)
000162D2 0241 0070                  		andi.w	#$70,d1
000162D6 0641 0010                  		addi.w	#$10,d1
000162DA E549                       		lsl.w	#2,d1
000162DC 5341                       		subq.w	#1,d1
000162DE 3141 0036                  		move.w	d1,$36(a0)
000162E2 6000                       		bra.s	Obj69_Spinner
000162E4                            ; ===========================================================================
000162E4                            
000162E4                            Obj69_Trapdoor:				; XREF: Obj69_Index
000162E4 5368 0030                  		subq.w	#1,$30(a0)
000162E8 6A00                       		bpl.s	Obj69_Animate
000162EA 3168 0032 0030             		move.w	$32(a0),$30(a0)
000162F0 0868 0000 001C             		bchg	#0,$1C(a0)
000162F6 4A28 0001                  		tst.b	1(a0)
000162FA 6A00                       		bpl.s	Obj69_Animate
000162FC 303C 00BB                  		move.w	#$BB,d0
00016300 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play door sound
00016306                            
00016306                            Obj69_Animate:
00016306 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001630C 4EB9 0000 B090             		jsr	AnimateSprite
00016312 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00016316 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00016318 323C 004B                  		move.w	#$4B,d1
0001631C 343C 000C                  		move.w	#$C,d2
00016320 3602                       		move.w	d2,d3
00016322 5243                       		addq.w	#1,d3
00016324 3828 0008                  		move.w	8(a0),d4
00016328 6100 A0D8                  		bsr.w	SolidObject
0001632C 6000 9DAC                  		bra.w	MarkObjGone
00016330                            ; ===========================================================================
00016330                            
00016330                            Obj69_NotSolid:
00016330 0828 0003 0022             		btst	#3,$22(a0)
00016336 6700                       		beq.s	Obj69_Display
00016338 43F8 D000                  		lea	($FFFFD000).w,a1
0001633C 08A9 0003 0022             		bclr	#3,$22(a1)
00016342 08A8 0003 0022             		bclr	#3,$22(a0)
00016348 4228 0025                  		clr.b	$25(a0)
0001634C                            
0001634C                            Obj69_Display:
0001634C 6000 9D8C                  		bra.w	MarkObjGone
00016350                            ; ===========================================================================
00016350                            
00016350                            Obj69_Spinner:				; XREF: Obj69_Index
00016350 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016354 C068 0036                  		and.w	$36(a0),d0
00016358 6600                       		bne.s	Obj69_Delay
0001635A 117C 0001 0034             		move.b	#1,$34(a0)
00016360                            
00016360                            Obj69_Delay:
00016360 4A28 0034                  		tst.b	$34(a0)
00016364 6700                       		beq.s	Obj69_Animate2
00016366 5368 0030                  		subq.w	#1,$30(a0)
0001636A 6A00                       		bpl.s	Obj69_Animate2
0001636C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016372 4228 0034                  		clr.b	$34(a0)
00016376 0868 0000 001C             		bchg	#0,$1C(a0)
0001637C                            
0001637C                            Obj69_Animate2:
0001637C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016382 4EB9 0000 B090             		jsr	AnimateSprite
00016388 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
0001638C 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
0001638E 323C 001B                  		move.w	#$1B,d1
00016392 343C 0007                  		move.w	#7,d2
00016396 3602                       		move.w	d2,d3
00016398 5243                       		addq.w	#1,d3
0001639A 3828 0008                  		move.w	8(a0),d4
0001639E 6100 A062                  		bsr.w	SolidObject
000163A2 6000 9D36                  		bra.w	MarkObjGone
000163A6                            ; ===========================================================================
000163A6                            
000163A6                            Obj69_NotSolid2:
000163A6 0828 0003 0022             		btst	#3,$22(a0)
000163AC 6700                       		beq.s	Obj69_Display2
000163AE 43F8 D000                  		lea	($FFFFD000).w,a1
000163B2 08A9 0003 0022             		bclr	#3,$22(a1)
000163B8 08A8 0003 0022             		bclr	#3,$22(a0)
000163BE 4228 0025                  		clr.b	$25(a0)
000163C2                            
000163C2                            Obj69_Display2:
000163C2 6000 9D16                  		bra.w	MarkObjGone
000163C6                            ; ===========================================================================
000163C6                            Ani_obj69:
000163C6                            	include "_anim\obj69.asm"
000163C6                            ; ---------------------------------------------------------------------------
000163C6                            ; Animation script - trapdoor (SBZ)
000163C6                            ; ---------------------------------------------------------------------------
000163C6 0000                       		dc.w byte_158AC-Ani_obj69
000163C8 0000                       		dc.w byte_158B2-Ani_obj69
000163CA 0000                       		dc.w byte_158B8-Ani_obj69
000163CC 0000                       		dc.w byte_158CC-Ani_obj69
000163CE 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000163D4 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000163DA 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000163E7 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000163EE 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000163FB 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016402                            		even
00016402                            		even
00016402                            
00016402                            ; ---------------------------------------------------------------------------
00016402                            ; Sprite mappings - trapdoor (SBZ)
00016402                            ; ---------------------------------------------------------------------------
00016402                            Map_obj69:
00016402                            	include "_maps\obj69.asm"
00016402                            ; ---------------------------------------------------------------------------
00016402                            ; Sprite mappings - trapdoor (SBZ)
00016402                            ; ---------------------------------------------------------------------------
00016402 0000                       		dc.w byte_158E6-Map_obj69
00016404 0000                       		dc.w byte_158FB-Map_obj69
00016406 0000                       		dc.w byte_15924-Map_obj69
00016408 04                         byte_158E6:	dc.b 4
00016409 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001640E F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016413 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00016418 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0001641D 08                         byte_158FB:	dc.b 8
0001641E F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00016423 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00016428 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0001642D 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016432 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016437 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001643C 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016441 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016446 04                         byte_15924:	dc.b 4
00016447 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001644C 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016451 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016456 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001645C 00                         		even
0001645C 00                         		even
0001645C                            
0001645C                            ; ---------------------------------------------------------------------------
0001645C                            ; Sprite mappings - spinning platforms (SBZ)
0001645C                            ; ---------------------------------------------------------------------------
0001645C                            Map_obj69a:
0001645C                            	include "_maps\obj69a.asm"
0001645C                            ; ---------------------------------------------------------------------------
0001645C                            ; Sprite mappings - spinning platforms (SBZ)
0001645C                            ; ---------------------------------------------------------------------------
0001645C 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00016460 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016464 0000                       		dc.w byte_15970-Map_obj69a
00016466 02                         byte_15944:	dc.b 2
00016467 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001646C F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00016471 02                         byte_1594F:	dc.b 2
00016472 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016477 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
0001647C 02                         byte_1595A:	dc.b 2
0001647D F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00016482 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00016487 02                         byte_15965:	dc.b 2
00016488 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
0001648D 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00016492 02                         byte_15970:	dc.b 2
00016493 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00016498 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
0001649E 00                         		even
0001649E 00                         		even
0001649E                            
0001649E                            ; ===========================================================================
0001649E                            ; ---------------------------------------------------------------------------
0001649E                            ; Object 6A - ground saws and pizza cutters (SBZ)
0001649E                            ; ---------------------------------------------------------------------------
0001649E                            
0001649E                            Obj6A:					; XREF: Obj_Index
0001649E 7000                       		moveq	#0,d0
000164A0 1028 0024                  		move.b	$24(a0),d0
000164A4 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000164A8 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000164AC                            ; ===========================================================================
000164AC 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000164AE 0000                       		dc.w Obj6A_Action-Obj6A_Index
000164B0                            ; ===========================================================================
000164B0                            
000164B0                            Obj6A_Main:				; XREF: Obj6A_Index
000164B0 5428 0024                  		addq.b	#2,$24(a0)
000164B4 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000164BC 317C 43B5 0002             		move.w	#$43B5,2(a0)
000164C2 117C 0004 0001             		move.b	#4,1(a0)
000164C8 117C 0004 0018             		move.b	#4,$18(a0)
000164CE 117C 0020 0019             		move.b	#$20,$19(a0)
000164D4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000164DA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000164E0 0C28 0003 0028             		cmpi.b	#3,$28(a0)
000164E6 6400                       		bcc.s	Obj6A_Action
000164E8 117C 00A2 0020             		move.b	#$A2,$20(a0)
000164EE                            
000164EE                            Obj6A_Action:				; XREF: Obj6A_Index
000164EE 7000                       		moveq	#0,d0
000164F0 1028 0028                  		move.b	$28(a0),d0
000164F4 0240 0007                  		andi.w	#7,d0
000164F8 D040                       		add.w	d0,d0
000164FA 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000164FE 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016502 3028 003A                  		move.w	$3A(a0),d0
00016506 0240 FF80                  		andi.w	#$FF80,d0
0001650A 3238 F700                  		move.w	($FFFFF700).w,d1
0001650E 0441 0080                  		subi.w	#$80,d1
00016512 0241 FF80                  		andi.w	#$FF80,d1
00016516 9041                       		sub.w	d1,d0
00016518 0C40 0280                  		cmpi.w	#$280,d0
0001651C 6200                       		bhi.s	Obj6A_Delete
0001651E 4EF9 0000 E032             		jmp	DisplaySprite
00016524                            ; ===========================================================================
00016524                            
00016524                            Obj6A_Delete:
00016524 4EF9 0000 E06E             		jmp	DeleteObject
0001652A                            ; ===========================================================================
0001652A 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
0001652E 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016532 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016534                            ; ===========================================================================
00016534                            
00016534                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016534 4E75                       		rts	
00016536                            ; ===========================================================================
00016536                            
00016536                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016536 323C 0060                  		move.w	#$60,d1
0001653A 7000                       		moveq	#0,d0
0001653C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016540 0828 0000 0022             		btst	#0,$22(a0)
00016546 6700                       		beq.s	Obj6A_Animate01
00016548 4440                       		neg.w	d0
0001654A D041                       		add.w	d1,d0
0001654C                            
0001654C                            Obj6A_Animate01:
0001654C 3228 003A                  		move.w	$3A(a0),d1
00016550 9240                       		sub.w	d0,d1
00016552 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016556 5328 001E                  		subq.b	#1,$1E(a0)
0001655A 6A00                       		bpl.s	loc_15A46
0001655C 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016562 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016568                            
00016568                            loc_15A46:
00016568 4A28 0001                  		tst.b	1(a0)
0001656C 6A00                       		bpl.s	locret_15A60
0001656E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016572 0240 000F                  		andi.w	#$F,d0
00016576 6600                       		bne.s	locret_15A60
00016578 303C 00B0                  		move.w	#$B0,d0
0001657C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
00016582                            
00016582                            locret_15A60:
00016582 4E75                       		rts	
00016584                            ; ===========================================================================
00016584                            
00016584                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016584 323C 0030                  		move.w	#$30,d1
00016588 7000                       		moveq	#0,d0
0001658A 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001658E 0828 0000 0022             		btst	#0,$22(a0)
00016594 6700                       		beq.s	Obj6A_Animate02
00016596 4440                       		neg.w	d0
00016598 0640 0080                  		addi.w	#$80,d0
0001659C                            
0001659C                            Obj6A_Animate02:
0001659C 3228 0038                  		move.w	$38(a0),d1
000165A0 9240                       		sub.w	d0,d1
000165A2 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000165A6 5328 001E                  		subq.b	#1,$1E(a0)
000165AA 6A00                       		bpl.s	loc_15A96
000165AC 117C 0002 001E             		move.b	#2,$1E(a0)
000165B2 0868 0000 001A             		bchg	#0,$1A(a0)
000165B8                            
000165B8                            loc_15A96:
000165B8 4A28 0001                  		tst.b	1(a0)
000165BC 6A00                       		bpl.s	locret_15AB0
000165BE 1038 FE64                  		move.b	($FFFFFE64).w,d0
000165C2 0C00 0018                  		cmpi.b	#$18,d0
000165C6 6600                       		bne.s	locret_15AB0
000165C8 303C 00B0                  		move.w	#$B0,d0
000165CC 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
000165D2                            
000165D2                            locret_15AB0:
000165D2 4E75                       		rts	
000165D4                            ; ===========================================================================
000165D4                            
000165D4                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000165D4 4A28 003D                  		tst.b	$3D(a0)
000165D8 6600                       		bne.s	Obj6A_Animate03
000165DA 3038 D008                  		move.w	($FFFFD008).w,d0
000165DE 0440 00C0                  		subi.w	#$C0,d0
000165E2 6500                       		bcs.s	loc_15B02
000165E4 9068 0008                  		sub.w	8(a0),d0
000165E8 6500                       		bcs.s	loc_15B02
000165EA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000165EE 0440 0080                  		subi.w	#$80,d0
000165F2 B068 000C                  		cmp.w	$C(a0),d0
000165F6 6400                       		bcc.s	locret_15B04
000165F8 0640 0100                  		addi.w	#$100,d0
000165FC B068 000C                  		cmp.w	$C(a0),d0
00016600 6500                       		bcs.s	locret_15B04
00016602 117C 0001 003D             		move.b	#1,$3D(a0)
00016608 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
0001660E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016614 117C 0002 001A             		move.b	#2,$1A(a0)
0001661A 303C 00B0                  		move.w	#$B0,d0
0001661E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
00016624                            
00016624                            loc_15B02:
00016624 588F                       		addq.l	#4,sp
00016626                            
00016626                            locret_15B04:
00016626 4E75                       		rts	
00016628                            ; ===========================================================================
00016628                            
00016628                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00016628 4EB9 0000 E00C             		jsr	SpeedToPos
0001662E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016634 5328 001E                  		subq.b	#1,$1E(a0)
00016638 6A00                       		bpl.s	locret_15B24
0001663A 117C 0002 001E             		move.b	#2,$1E(a0)
00016640 0868 0000 001A             		bchg	#0,$1A(a0)
00016646                            
00016646                            locret_15B24:
00016646 4E75                       		rts	
00016648                            ; ===========================================================================
00016648                            
00016648                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016648 4A28 003D                  		tst.b	$3D(a0)
0001664C 6600                       		bne.s	Obj6A_Animate04
0001664E 3038 D008                  		move.w	($FFFFD008).w,d0
00016652 0640 00E0                  		addi.w	#$E0,d0
00016656 9068 0008                  		sub.w	8(a0),d0
0001665A 6400                       		bcc.s	loc_15B74
0001665C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016660 0440 0080                  		subi.w	#$80,d0
00016664 B068 000C                  		cmp.w	$C(a0),d0
00016668 6400                       		bcc.s	locret_15B76
0001666A 0640 0100                  		addi.w	#$100,d0
0001666E B068 000C                  		cmp.w	$C(a0),d0
00016672 6500                       		bcs.s	locret_15B76
00016674 117C 0001 003D             		move.b	#1,$3D(a0)
0001667A 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016680 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016686 117C 0002 001A             		move.b	#2,$1A(a0)
0001668C 303C 00B0                  		move.w	#$B0,d0
00016690 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
00016696                            
00016696                            loc_15B74:
00016696 588F                       		addq.l	#4,sp
00016698                            
00016698                            locret_15B76:
00016698 4E75                       		rts	
0001669A                            ; ===========================================================================
0001669A                            
0001669A                            Obj6A_Animate04:
0001669A 4EB9 0000 E00C             		jsr	SpeedToPos
000166A0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000166A6 5328 001E                  		subq.b	#1,$1E(a0)
000166AA 6A00                       		bpl.s	locret_15B96
000166AC 117C 0002 001E             		move.b	#2,$1E(a0)
000166B2 0868 0000 001A             		bchg	#0,$1A(a0)
000166B8                            
000166B8                            locret_15B96:
000166B8 4E75                       		rts	
000166BA                            ; ===========================================================================
000166BA                            ; ---------------------------------------------------------------------------
000166BA                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000166BA                            ; ---------------------------------------------------------------------------
000166BA                            Map_obj6A:
000166BA                            	include "_maps\obj6A.asm"
000166BA                            ; ---------------------------------------------------------------------------
000166BA                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000166BA                            ; ---------------------------------------------------------------------------
000166BA 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000166BE 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
000166C2 07                         byte_15BA0:	dc.b 7
000166C3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000166C8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000166CD E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000166D2 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000166D7 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000166DC 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000166E1 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000166E6 07                         byte_15BC4:	dc.b 7
000166E7 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000166EC D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000166F1 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000166F6 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000166FB E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016700 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016705 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001670A 04                         byte_15BE8:	dc.b 4
0001670B E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016710 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016715 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001671A 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001671F 04                         byte_15BFD:	dc.b 4
00016720 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016725 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001672A 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001672F 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016734                            		even
00016734                            		even
00016734                            
00016734                            ; ===========================================================================
00016734                            ; ---------------------------------------------------------------------------
00016734                            ; Object 6B - stomper (SBZ)
00016734                            ; ---------------------------------------------------------------------------
00016734                            
00016734                            Obj6B:					; XREF: Obj_Index
00016734 7000                       		moveq	#0,d0
00016736 1028 0024                  		move.b	$24(a0),d0
0001673A 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
0001673E 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016742                            ; ===========================================================================
00016742 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016744 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016746                            
00016746 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0001674A 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001674E 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016752 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016756 8040 0005                  		dc.b  $80, $40,	  0,   5
0001675A                            ; ===========================================================================
0001675A                            
0001675A                            Obj6B_Main:				; XREF: Obj6B_Index
0001675A 5428 0024                  		addq.b	#2,$24(a0)
0001675E 7000                       		moveq	#0,d0
00016760 1028 0028                  		move.b	$28(a0),d0
00016764 E448                       		lsr.w	#2,d0
00016766 0240 001C                  		andi.w	#$1C,d0
0001676A 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001676E 115B 0019                  		move.b	(a3)+,$19(a0)
00016772 115B 0016                  		move.b	(a3)+,$16(a0)
00016776 E448                       		lsr.w	#2,d0
00016778 1140 001A                  		move.b	d0,$1A(a0)
0001677C 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016784 317C 22C0 0002             		move.w	#$22C0,2(a0)
0001678A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016790 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00016792 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016798 6700                       		beq.s	Obj6B_SBZ3
0001679A                            
0001679A                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
0001679A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001679E 7000                       		moveq	#0,d0
000167A0 1028 0023                  		move.b	$23(a0),d0
000167A4 6700                       		beq.s	Obj6B_Delete
000167A6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000167AC                            
000167AC                            Obj6B_Delete:
000167AC 4EF9 0000 E06E             		jmp	DeleteObject
000167B2                            ; ===========================================================================
000167B2                            
000167B2                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000167B2 317C 41F0 0002             		move.w	#$41F0,2(a0)
000167B8 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
000167BE 6600                       		bne.s	Obj6B_SBZ12
000167C0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167C4 7000                       		moveq	#0,d0
000167C6 1028 0023                  		move.b	$23(a0),d0
000167CA 6700                       		beq.s	Obj6B_SBZ12
000167CC 0832 0000 0002             		btst	#0,2(a2,d0.w)
000167D2 6700                       		beq.s	Obj6B_SBZ12
000167D4 4238 F7CB                  		clr.b	($FFFFF7CB).w
000167D8 60C0                       		bra.s	Obj6B_ChkGone
000167DA                            ; ===========================================================================
000167DA                            
000167DA                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000167DA 0028 0004 0001             		ori.b	#4,1(a0)
000167E0 117C 0004 0018             		move.b	#4,$18(a0)
000167E6 3168 0008 0034             		move.w	8(a0),$34(a0)
000167EC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000167F2 7000                       		moveq	#0,d0
000167F4 101B                       		move.b	(a3)+,d0
000167F6 3140 003C                  		move.w	d0,$3C(a0)
000167FA 7000                       		moveq	#0,d0
000167FC 1028 0028                  		move.b	$28(a0),d0
00016800 6A00                       		bpl.s	Obj6B_Action
00016802 0200 000F                  		andi.b	#$F,d0
00016806 1140 003E                  		move.b	d0,$3E(a0)
0001680A 1153 0028                  		move.b	(a3),$28(a0)
0001680E 0C13 0005                  		cmpi.b	#5,(a3)
00016812 6600                       		bne.s	Obj6B_ChkGone2
00016814 08E8 0004 0001             		bset	#4,1(a0)
0001681A                            
0001681A                            Obj6B_ChkGone2:
0001681A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001681E 7000                       		moveq	#0,d0
00016820 1028 0023                  		move.b	$23(a0),d0
00016824 6700                       		beq.s	Obj6B_Action
00016826 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001682C                            
0001682C                            Obj6B_Action:				; XREF: Obj6B_Index
0001682C 3F28 0008                  		move.w	8(a0),-(sp)
00016830 7000                       		moveq	#0,d0
00016832 1028 0028                  		move.b	$28(a0),d0
00016836 0240 000F                  		andi.w	#$F,d0
0001683A D040                       		add.w	d0,d0
0001683C 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016840 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016844 381F                       		move.w	(sp)+,d4
00016846 4A28 0001                  		tst.b	1(a0)
0001684A 6A00                       		bpl.s	Obj6B_ChkDel
0001684C 7200                       		moveq	#0,d1
0001684E 1228 0019                  		move.b	$19(a0),d1
00016852 0641 000B                  		addi.w	#$B,d1
00016856 7400                       		moveq	#0,d2
00016858 1428 0016                  		move.b	$16(a0),d2
0001685C 3602                       		move.w	d2,d3
0001685E 5243                       		addq.w	#1,d3
00016860 6100 9BA0                  		bsr.w	SolidObject
00016864                            
00016864                            Obj6B_ChkDel:
00016864 3028 0034                  		move.w	$34(a0),d0
00016868 0240 FF80                  		andi.w	#$FF80,d0
0001686C 3238 F700                  		move.w	($FFFFF700).w,d1
00016870 0441 0080                  		subi.w	#$80,d1
00016874 0241 FF80                  		andi.w	#$FF80,d1
00016878 9041                       		sub.w	d1,d0
0001687A 0C40 0280                  		cmpi.w	#$280,d0
0001687E 6200                       		bhi.s	loc_15D64
00016880 4EF9 0000 E032             		jmp	DisplaySprite
00016886                            ; ===========================================================================
00016886                            
00016886                            loc_15D64:
00016886 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001688C 6600                       		bne.s	Obj6B_Delete2
0001688E 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016892 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016896 7000                       		moveq	#0,d0
00016898 1028 0023                  		move.b	$23(a0),d0
0001689C 6700                       		beq.s	Obj6B_Delete2
0001689E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000168A4                            
000168A4                            Obj6B_Delete2:
000168A4 4EF9 0000 E06E             		jmp	DeleteObject
000168AA                            ; ===========================================================================
000168AA 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
000168AE 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
000168B2 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
000168B6                            ; ===========================================================================
000168B6                            
000168B6                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
000168B6 4E75                       		rts	
000168B8                            ; ===========================================================================
000168B8                            
000168B8                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
000168B8 4A28 0038                  		tst.b	$38(a0)
000168BC 6600                       		bne.s	loc_15DB4
000168BE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000168C2 7000                       		moveq	#0,d0
000168C4 1028 003E                  		move.b	$3E(a0),d0
000168C8 0832 0000 0000             		btst	#0,(a2,d0.w)
000168CE 6700                       		beq.s	loc_15DC2
000168D0 117C 0001 0038             		move.b	#1,$38(a0)
000168D6                            
000168D6                            loc_15DB4:
000168D6 3028 003C                  		move.w	$3C(a0),d0
000168DA B068 003A                  		cmp.w	$3A(a0),d0
000168DE 6700                       		beq.s	loc_15DE0
000168E0 5468 003A                  		addq.w	#2,$3A(a0)
000168E4                            
000168E4                            loc_15DC2:
000168E4 3028 003A                  		move.w	$3A(a0),d0
000168E8 0828 0000 0022             		btst	#0,$22(a0)
000168EE 6700                       		beq.s	loc_15DD4
000168F0 4440                       		neg.w	d0
000168F2 0640 0080                  		addi.w	#$80,d0
000168F6                            
000168F6                            loc_15DD4:
000168F6 3228 0034                  		move.w	$34(a0),d1
000168FA 9240                       		sub.w	d0,d1
000168FC 3141 0008                  		move.w	d1,8(a0)
00016900 4E75                       		rts	
00016902                            ; ===========================================================================
00016902                            
00016902                            loc_15DE0:
00016902 5228 0028                  		addq.b	#1,$28(a0)
00016906 317C 00B4 0036             		move.w	#$B4,$36(a0)
0001690C 4228 0038                  		clr.b	$38(a0)
00016910 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016914 7000                       		moveq	#0,d0
00016916 1028 0023                  		move.b	$23(a0),d0
0001691A 67C8                       		beq.s	loc_15DC2
0001691C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016922 60C0                       		bra.s	loc_15DC2
00016924                            ; ===========================================================================
00016924                            
00016924                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016924 4A28 0038                  		tst.b	$38(a0)
00016928 6600                       		bne.s	loc_15E14
0001692A 5368 0036                  		subq.w	#1,$36(a0)
0001692E 6600                       		bne.s	loc_15E1E
00016930 117C 0001 0038             		move.b	#1,$38(a0)
00016936                            
00016936                            loc_15E14:
00016936 4A68 003A                  		tst.w	$3A(a0)
0001693A 6700                       		beq.s	loc_15E3C
0001693C 5568 003A                  		subq.w	#2,$3A(a0)
00016940                            
00016940                            loc_15E1E:
00016940 3028 003A                  		move.w	$3A(a0),d0
00016944 0828 0000 0022             		btst	#0,$22(a0)
0001694A 6700                       		beq.s	loc_15E30
0001694C 4440                       		neg.w	d0
0001694E 0640 0080                  		addi.w	#$80,d0
00016952                            
00016952                            loc_15E30:
00016952 3228 0034                  		move.w	$34(a0),d1
00016956 9240                       		sub.w	d0,d1
00016958 3141 0008                  		move.w	d1,8(a0)
0001695C 4E75                       		rts	
0001695E                            ; ===========================================================================
0001695E                            
0001695E                            loc_15E3C:
0001695E 5328 0028                  		subq.b	#1,$28(a0)
00016962 4228 0038                  		clr.b	$38(a0)
00016966 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001696A 7000                       		moveq	#0,d0
0001696C 1028 0023                  		move.b	$23(a0),d0
00016970 67CE                       		beq.s	loc_15E1E
00016972 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016978 60C6                       		bra.s	loc_15E1E
0001697A                            ; ===========================================================================
0001697A                            
0001697A                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
0001697A 4A28 0038                  		tst.b	$38(a0)
0001697E 6600                       		bne.s	loc_15E7C
00016980 4A68 003A                  		tst.w	$3A(a0)
00016984 6700                       		beq.s	loc_15E6A
00016986 5368 003A                  		subq.w	#1,$3A(a0)
0001698A 6000                       		bra.s	loc_15E8E
0001698C                            ; ===========================================================================
0001698C                            
0001698C                            loc_15E6A:
0001698C 5368 0036                  		subq.w	#1,$36(a0)
00016990 6A00                       		bpl.s	loc_15E8E
00016992 317C 003C 0036             		move.w	#$3C,$36(a0)
00016998 117C 0001 0038             		move.b	#1,$38(a0)
0001699E                            
0001699E                            loc_15E7C:
0001699E 5068 003A                  		addq.w	#8,$3A(a0)
000169A2 3028 003A                  		move.w	$3A(a0),d0
000169A6 B068 003C                  		cmp.w	$3C(a0),d0
000169AA 6600                       		bne.s	loc_15E8E
000169AC 4228 0038                  		clr.b	$38(a0)
000169B0                            
000169B0                            loc_15E8E:
000169B0 3028 003A                  		move.w	$3A(a0),d0
000169B4 0828 0000 0022             		btst	#0,$22(a0)
000169BA 6700                       		beq.s	loc_15EA0
000169BC 4440                       		neg.w	d0
000169BE 0640 0038                  		addi.w	#$38,d0
000169C2                            
000169C2                            loc_15EA0:
000169C2 3228 0030                  		move.w	$30(a0),d1
000169C6 D240                       		add.w	d0,d1
000169C8 3141 000C                  		move.w	d1,$C(a0)
000169CC 4E75                       		rts	
000169CE                            ; ===========================================================================
000169CE                            
000169CE                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000169CE 4A28 0038                  		tst.b	$38(a0)
000169D2 6600                       		bne.s	loc_15ED0
000169D4 4A68 003A                  		tst.w	$3A(a0)
000169D8 6700                       		beq.s	loc_15EBE
000169DA 5168 003A                  		subq.w	#8,$3A(a0)
000169DE 6000                       		bra.s	loc_15EF0
000169E0                            ; ===========================================================================
000169E0                            
000169E0                            loc_15EBE:
000169E0 5368 0036                  		subq.w	#1,$36(a0)
000169E4 6A00                       		bpl.s	loc_15EF0
000169E6 317C 003C 0036             		move.w	#$3C,$36(a0)
000169EC 117C 0001 0038             		move.b	#1,$38(a0)
000169F2                            
000169F2                            loc_15ED0:
000169F2 3028 003A                  		move.w	$3A(a0),d0
000169F6 B068 003C                  		cmp.w	$3C(a0),d0
000169FA 6700                       		beq.s	loc_15EE0
000169FC 5068 003A                  		addq.w	#8,$3A(a0)
00016A00 6000                       		bra.s	loc_15EF0
00016A02                            ; ===========================================================================
00016A02                            
00016A02                            loc_15EE0:
00016A02 5368 0036                  		subq.w	#1,$36(a0)
00016A06 6A00                       		bpl.s	loc_15EF0
00016A08 317C 003C 0036             		move.w	#$3C,$36(a0)
00016A0E 4228 0038                  		clr.b	$38(a0)
00016A12                            
00016A12                            loc_15EF0:
00016A12 3028 003A                  		move.w	$3A(a0),d0
00016A16 0828 0000 0022             		btst	#0,$22(a0)
00016A1C 6700                       		beq.s	loc_15F02
00016A1E 4440                       		neg.w	d0
00016A20 0640 0038                  		addi.w	#$38,d0
00016A24                            
00016A24                            loc_15F02:
00016A24 3228 0030                  		move.w	$30(a0),d1
00016A28 D240                       		add.w	d0,d1
00016A2A 3141 000C                  		move.w	d1,$C(a0)
00016A2E 4E75                       		rts	
00016A30                            ; ===========================================================================
00016A30                            
00016A30                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016A30 4A28 0038                  		tst.b	$38(a0)
00016A34 6600                       		bne.s	loc_15F3E
00016A36 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016A3A 7000                       		moveq	#0,d0
00016A3C 1028 003E                  		move.b	$3E(a0),d0
00016A40 0832 0000 0000             		btst	#0,(a2,d0.w)
00016A46 6700                       		beq.s	locret_15F5C
00016A48 117C 0001 0038             		move.b	#1,$38(a0)
00016A4E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016A52 7000                       		moveq	#0,d0
00016A54 1028 0023                  		move.b	$23(a0),d0
00016A58 6700                       		beq.s	loc_15F3E
00016A5A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016A60                            
00016A60                            loc_15F3E:
00016A60 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016A68 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016A70 3168 0008 0034             		move.w	8(a0),$34(a0)
00016A76 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016A7C 6700                       		beq.s	loc_15F5E
00016A7E                            
00016A7E                            locret_15F5C:
00016A7E 4E75                       		rts	
00016A80                            ; ===========================================================================
00016A80                            
00016A80                            loc_15F5E:
00016A80 4228 0028                  		clr.b	$28(a0)
00016A84 4228 0038                  		clr.b	$38(a0)
00016A88 4E75                       		rts	
00016A8A                            ; ===========================================================================
00016A8A                            ; ---------------------------------------------------------------------------
00016A8A                            ; Sprite mappings - stomper and	platforms (SBZ)
00016A8A                            ; ---------------------------------------------------------------------------
00016A8A                            Map_obj6B:
00016A8A                            	include "_maps\obj6B.asm"
00016A8A                            ; ---------------------------------------------------------------------------
00016A8A                            ; Sprite mappings - stomper and	platforms (SBZ)
00016A8A                            ; ---------------------------------------------------------------------------
00016A8A 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016A8E 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016A92 0000                       		dc.w byte_15FB0-Map_obj6B
00016A94 04                         byte_15F72:	dc.b 4
00016A95 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016A9A F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016A9F F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016AA4 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016AA9 08                         byte_15F87:	dc.b 8
00016AAA E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016AAF E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016AB4 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016AB9 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016ABE 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016AC3 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016AC8 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016ACD 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016AD2 0E                         byte_15FB0:	dc.b $E
00016AD3 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016AD8 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016ADD C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016AE2 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016AE7 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016AEC C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016AF1 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016AF6 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016AFB E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016B00 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016B05 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016B0A 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016B0F 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016B14 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016B1A 00                         		even
00016B1A 00                         		even
00016B1A                            
00016B1A                            ; ===========================================================================
00016B1A                            ; ---------------------------------------------------------------------------
00016B1A                            ; Object 6C - vanishing	platforms (SBZ)
00016B1A                            ; ---------------------------------------------------------------------------
00016B1A                            
00016B1A                            Obj6C:					; XREF: Obj_Index
00016B1A 7000                       		moveq	#0,d0
00016B1C 1028 0024                  		move.b	$24(a0),d0
00016B20 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016B24 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016B28                            ; ===========================================================================
00016B28 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016B2A 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016B2C 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016B2E 0000                       		dc.w loc_16068-Obj6C_Index
00016B30                            ; ===========================================================================
00016B30                            
00016B30                            Obj6C_Main:				; XREF: Obj6C_Index
00016B30 5C28 0024                  		addq.b	#6,$24(a0)
00016B34 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016B3C 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016B42 0028 0004 0001             		ori.b	#4,1(a0)
00016B48 117C 0010 0019             		move.b	#$10,$19(a0)
00016B4E 117C 0004 0018             		move.b	#4,$18(a0)
00016B54 7000                       		moveq	#0,d0
00016B56 1028 0028                  		move.b	$28(a0),d0	; get object type
00016B5A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016B5E 5240                       		addq.w	#1,d0		; add 1
00016B60 EF48                       		lsl.w	#7,d0		; multiply by $80
00016B62 3200                       		move.w	d0,d1
00016B64 5340                       		subq.w	#1,d0
00016B66 3140 0030                  		move.w	d0,$30(a0)
00016B6A 3140 0032                  		move.w	d0,$32(a0)
00016B6E 7000                       		moveq	#0,d0
00016B70 1028 0028                  		move.b	$28(a0),d0	; get object type
00016B74 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016B78 0641 0080                  		addi.w	#$80,d1
00016B7C C0C1                       		mulu.w	d1,d0
00016B7E E088                       		lsr.l	#8,d0
00016B80 3140 0036                  		move.w	d0,$36(a0)
00016B84 5341                       		subq.w	#1,d1
00016B86 3141 0038                  		move.w	d1,$38(a0)
00016B8A                            
00016B8A                            loc_16068:				; XREF: Obj6C_Index
00016B8A 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016B8E 9068 0036                  		sub.w	$36(a0),d0
00016B92 C068 0038                  		and.w	$38(a0),d0
00016B96 6600                       		bne.s	Obj6C_Animate
00016B98 5928 0024                  		subq.b	#4,$24(a0)
00016B9C 6000                       		bra.s	Obj6C_Vanish
00016B9E                            ; ===========================================================================
00016B9E                            
00016B9E                            Obj6C_Animate:
00016B9E 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016BA4 4EB9 0000 B090             		jsr	AnimateSprite
00016BAA 6000 952E                  		bra.w	MarkObjGone
00016BAE                            ; ===========================================================================
00016BAE                            
00016BAE                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016BAE 5368 0030                  		subq.w	#1,$30(a0)
00016BB2 6A00                       		bpl.s	loc_160AA
00016BB4 317C 007F 0030             		move.w	#127,$30(a0)
00016BBA 4A28 001C                  		tst.b	$1C(a0)
00016BBE 6700                       		beq.s	loc_160A4
00016BC0 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016BC6                            
00016BC6                            loc_160A4:
00016BC6 0868 0000 001C             		bchg	#0,$1C(a0)
00016BCC                            
00016BCC                            loc_160AA:
00016BCC 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016BD2 4EB9 0000 B090             		jsr	AnimateSprite
00016BD8 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016BDE 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016BE0 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016BE6 6600                       		bne.s	loc_160D6
00016BE8 7200                       		moveq	#0,d1
00016BEA 1228 0019                  		move.b	$19(a0),d1
00016BEE 4EB9 0000 7C4C             		jsr	(PlatformObject).l
00016BF4 6000 94E4                  		bra.w	MarkObjGone
00016BF8                            ; ===========================================================================
00016BF8                            
00016BF8                            loc_160D6:
00016BF8 7200                       		moveq	#0,d1
00016BFA 1228 0019                  		move.b	$19(a0),d1
00016BFE 4EB9 0000 7DC0             		jsr	(ExitPlatform).l
00016C04 3428 0008                  		move.w	8(a0),d2
00016C08 4EB9 0000 832A             		jsr	(MvSonicOnPtfm2).l
00016C0E 6000 94CA                  		bra.w	MarkObjGone
00016C12                            ; ===========================================================================
00016C12                            
00016C12                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016C12 0828 0003 0022             		btst	#3,$22(a0)
00016C18 6700                       		beq.s	Obj6C_Display
00016C1A 43F8 D000                  		lea	($FFFFD000).w,a1
00016C1E 08A9 0003 0022             		bclr	#3,$22(a1)
00016C24 08A8 0003 0022             		bclr	#3,$22(a0)
00016C2A 117C 0002 0024             		move.b	#2,$24(a0)
00016C30 4228 0025                  		clr.b	$25(a0)
00016C34                            
00016C34                            Obj6C_Display:
00016C34 6000 94A4                  		bra.w	MarkObjGone
00016C38                            ; ===========================================================================
00016C38                            Ani_obj6C:
00016C38                            	include "_anim\obj6C.asm"
00016C38                            ; ---------------------------------------------------------------------------
00016C38                            ; Animation script - vanishing platforms (SBZ)
00016C38                            ; ---------------------------------------------------------------------------
00016C38 0000                       		dc.w byte_1611A-Ani_obj6C
00016C3A 0000                       		dc.w byte_16122-Ani_obj6C
00016C3C 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016C44 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016C4C                            		even
00016C4C                            		even
00016C4C                            
00016C4C                            ; ---------------------------------------------------------------------------
00016C4C                            ; Sprite mappings - vanishing platforms	(SBZ)
00016C4C                            ; ---------------------------------------------------------------------------
00016C4C                            Map_obj6C:
00016C4C                            	include "_maps\obj6C.asm"
00016C4C                            ; ---------------------------------------------------------------------------
00016C4C                            ; Sprite mappings - vanishing platforms	(SBZ)
00016C4C                            ; ---------------------------------------------------------------------------
00016C4C 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016C50 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016C54 01                         byte_16132:	dc.b 1
00016C55 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016C5A 01                         byte_16138:	dc.b 1
00016C5B F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016C60 01                         byte_1613E:	dc.b 1
00016C61 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016C66 00                         byte_16144:	dc.b 0
00016C68 00                         		even
00016C68 00                         		even
00016C68                            
00016C68                            ; ===========================================================================
00016C68                            ; ---------------------------------------------------------------------------
00016C68                            ; Object 6E - electrocution orbs (SBZ)
00016C68                            ; ---------------------------------------------------------------------------
00016C68                            
00016C68                            Obj6E:					; XREF: Obj_Index
00016C68 7000                       		moveq	#0,d0
00016C6A 1028 0024                  		move.b	$24(a0),d0
00016C6E 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016C72 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016C76                            ; ===========================================================================
00016C76 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016C78 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016C7A                            ; ===========================================================================
00016C7A                            
00016C7A                            Obj6E_Main:				; XREF: Obj6E_Index
00016C7A 5428 0024                  		addq.b	#2,$24(a0)
00016C7E 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016C86 317C 047E 0002             		move.w	#$47E,2(a0)
00016C8C 0028 0004 0001             		ori.b	#4,1(a0)
00016C92 117C 0028 0019             		move.b	#$28,$19(a0)
00016C98 7000                       		moveq	#0,d0
00016C9A 1028 0028                  		move.b	$28(a0),d0	; read object type
00016C9E E948                       		lsl.w	#4,d0		; multiply by $10
00016CA0 5340                       		subq.w	#1,d0
00016CA2 3140 0034                  		move.w	d0,$34(a0)
00016CA6                            
00016CA6                            Obj6E_Shock:				; XREF: Obj6E_Index
00016CA6 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016CAA C068 0034                  		and.w	$34(a0),d0
00016CAE 6600                       		bne.s	Obj6E_Animate
00016CB0 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016CB6 4A28 0001                  		tst.b	1(a0)
00016CBA 6A00                       		bpl.s	Obj6E_Animate
00016CBC 303C 00B1                  		move.w	#$B1,d0
00016CC0 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play electricity sound
00016CC6                            
00016CC6                            Obj6E_Animate:
00016CC6 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016CCC 4EB9 0000 B090             		jsr	AnimateSprite
00016CD2 117C 0000 0020             		move.b	#0,$20(a0)
00016CD8 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016CDE 6600                       		bne.s	Obj6E_Display	; if not, branch
00016CE0 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016CE6                            
00016CE6                            Obj6E_Display:
00016CE6 6000 93F2                  		bra.w	MarkObjGone
00016CEA                            ; ===========================================================================
00016CEA                            Ani_obj6E:
00016CEA                            	include "_anim\obj6E.asm"
00016CEA                            ; ---------------------------------------------------------------------------
00016CEA                            ; Animation script - electrocution orbs (SBZ)
00016CEA                            ; ---------------------------------------------------------------------------
00016CEA 0000                       		dc.w byte_161CC-Ani_obj6E
00016CEC 0000                       		dc.w byte_161D0-Ani_obj6E
00016CEE 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016CF2 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016D02                            		even
00016D02                            		even
00016D02                            
00016D02                            ; ---------------------------------------------------------------------------
00016D02                            ; Sprite mappings - electrocution orbs (SBZ)
00016D02                            ; ---------------------------------------------------------------------------
00016D02                            Map_obj6E:
00016D02                            	include "_maps\obj6E.asm"
00016D02                            Map_26ed:
00016D02 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016D04 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016D06 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016D08 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016D0A 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016D0C 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016D0E 01                         Map_26ed_C: 	dc.b $1
00016D0F 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016D14 02                         Map_26ed_12: 	dc.b $2
00016D15 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D1A 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D1F 06                         Map_26ed_1D: 	dc.b $6
00016D20 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D25 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D2A F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016D2F F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D34 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D39 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016D3E 08                         Map_26ed_3C: 	dc.b $8
00016D3F F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D44 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D49 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016D4E F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D53 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016D58 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D5D F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D62 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D67 06                         Map_26ed_65: 	dc.b $6
00016D68 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D6D 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D72 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D77 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D7C F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D81 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D86 04                         Map_26ed_84: 	dc.b $4
00016D87 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D8C 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D91 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D96 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D9C 00                         	even
00016D9C 00                         	even
00016D9C                            
00016D9C                            ; ===========================================================================
00016D9C                            ; ---------------------------------------------------------------------------
00016D9C                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016D9C                            ; ---------------------------------------------------------------------------
00016D9C                            
00016D9C                            Obj6F:					; XREF: Obj_Index
00016D9C 7000                       		moveq	#0,d0
00016D9E 1028 0024                  		move.b	$24(a0),d0
00016DA2 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016DA6 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016DAA 3028 0030                  		move.w	$30(a0),d0
00016DAE 0240 FF80                  		andi.w	#$FF80,d0
00016DB2 3238 F700                  		move.w	($FFFFF700).w,d1
00016DB6 0441 0080                  		subi.w	#$80,d1
00016DBA 0241 FF80                  		andi.w	#$FF80,d1
00016DBE 9041                       		sub.w	d1,d0
00016DC0 0C40 0280                  		cmpi.w	#$280,d0
00016DC4 6200                       		bhi.s	loc_1629A
00016DC6                            
00016DC6                            Obj6F_Display:
00016DC6 4EF9 0000 E032             		jmp	DisplaySprite
00016DCC                            ; ===========================================================================
00016DCC                            
00016DCC                            loc_1629A:
00016DCC 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016DD2 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016DD4 0C40 FF80                  		cmpi.w	#-$80,d0
00016DD8 64EC                       		bcc.s	Obj6F_Display
00016DDA                            
00016DDA                            Obj6F_Act1or2:
00016DDA 1028 002F                  		move.b	$2F(a0),d0
00016DDE 6A00                       		bpl.s	Obj6F_Delete
00016DE0 0240 007F                  		andi.w	#$7F,d0
00016DE4 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016DE8 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016DEE                            
00016DEE                            Obj6F_Delete:
00016DEE 4EF9 0000 E06E             		jmp	DeleteObject
00016DF4                            ; ===========================================================================
00016DF4 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016DF6 0000                       		dc.w loc_163D8-Obj6F_Index
00016DF8                            ; ===========================================================================
00016DF8                            
00016DF8                            Obj6F_Main:				; XREF: Obj6F_Index
00016DF8 1028 0028                  		move.b	$28(a0),d0
00016DFC 6B00 0000                  		bmi.w	loc_16380
00016E00 5428 0024                  		addq.b	#2,$24(a0)
00016E04 217C 0001 645C 0004        		move.l	#Map_obj69a,4(a0)
00016E0C 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016E12 117C 0010 0019             		move.b	#$10,$19(a0)
00016E18 0028 0004 0001             		ori.b	#4,1(a0)
00016E1E 117C 0004 0018             		move.b	#4,$18(a0)
00016E24 7000                       		moveq	#0,d0
00016E26 1028 0028                  		move.b	$28(a0),d0
00016E2A 3200                       		move.w	d0,d1
00016E2C E648                       		lsr.w	#3,d0
00016E2E 0240 001E                  		andi.w	#$1E,d0
00016E32 45FA 0000                  		lea	off_164A6(pc),a2
00016E36 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016E3A 315A 0038                  		move.w	(a2)+,$38(a0)
00016E3E 315A 0030                  		move.w	(a2)+,$30(a0)
00016E42 214A 003C                  		move.l	a2,$3C(a0)
00016E46 0241 000F                  		andi.w	#$F,d1
00016E4A E549                       		lsl.w	#2,d1
00016E4C 1141 0038                  		move.b	d1,$38(a0)
00016E50 117C 0004 003A             		move.b	#4,$3A(a0)
00016E56 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016E5A 6700                       		beq.s	loc_16356
00016E5C 117C 0001 003B             		move.b	#1,$3B(a0)
00016E62 4428 003A                  		neg.b	$3A(a0)
00016E66 7200                       		moveq	#0,d1
00016E68 1228 0038                  		move.b	$38(a0),d1
00016E6C D228 003A                  		add.b	$3A(a0),d1
00016E70 B228 0039                  		cmp.b	$39(a0),d1
00016E74 6500                       		bcs.s	loc_16352
00016E76 1001                       		move.b	d1,d0
00016E78 7200                       		moveq	#0,d1
00016E7A 4A00                       		tst.b	d0
00016E7C 6A00                       		bpl.s	loc_16352
00016E7E 1228 0039                  		move.b	$39(a0),d1
00016E82 5901                       		subq.b	#4,d1
00016E84                            
00016E84                            loc_16352:
00016E84 1141 0038                  		move.b	d1,$38(a0)
00016E88                            
00016E88                            loc_16356:
00016E88 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016E8E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016E94 4A41                       		tst.w	d1
00016E96 6600                       		bne.s	loc_1636C
00016E98 117C 0001 001C             		move.b	#1,$1C(a0)
00016E9E                            
00016E9E                            loc_1636C:
00016E9E 0C41 0008                  		cmpi.w	#8,d1
00016EA2 6600                       		bne.s	loc_16378
00016EA4 117C 0000 001C             		move.b	#0,$1C(a0)
00016EAA                            
00016EAA                            loc_16378:
00016EAA 6100 C0C6                  		bsr.w	Obj63_ChangeDir
00016EAE 6000 0000                  		bra.w	loc_163D8
00016EB2                            ; ===========================================================================
00016EB2                            
00016EB2                            loc_16380:				; XREF: Obj6F_Main
00016EB2 1140 002F                  		move.b	d0,$2F(a0)
00016EB6 0240 007F                  		andi.w	#$7F,d0
00016EBA 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016EBE 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016EC4 6700                       		beq.s	loc_1639A
00016EC6 4EF9 0000 E06E             		jmp	DeleteObject
00016ECC                            ; ===========================================================================
00016ECC                            
00016ECC                            loc_1639A:
00016ECC D040                       		add.w	d0,d0
00016ECE 0240 001E                  		andi.w	#$1E,d0
00016ED2 0640 0080                  		addi.w	#$80,d0
00016ED6 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016EDC D4F2 0000                  		adda.w	(a2,d0.w),a2
00016EE0 321A                       		move.w	(a2)+,d1
00016EE2 2248                       		movea.l	a0,a1
00016EE4 6000                       		bra.s	Obj6F_LoadPform
00016EE6                            ; ===========================================================================
00016EE6                            
00016EE6                            Obj6F_Loop:
00016EE6 4EB9 0000 E4B8             		jsr	SingleObjLoad
00016EEC 6600                       		bne.s	loc_163D0
00016EEE                            
00016EEE                            Obj6F_LoadPform:			; XREF: loc_1639A
00016EEE 12BC 006F                  		move.b	#$6F,0(a1)
00016EF2 335A 0008                  		move.w	(a2)+,8(a1)
00016EF6 335A 000C                  		move.w	(a2)+,$C(a1)
00016EFA 301A                       		move.w	(a2)+,d0
00016EFC 1340 0028                  		move.b	d0,$28(a1)
00016F00                            
00016F00                            loc_163D0:
00016F00 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016F04                            
00016F04 588F                       		addq.l	#4,sp
00016F06 4E75                       		rts	
00016F08                            ; ===========================================================================
00016F08                            
00016F08                            loc_163D8:				; XREF: Obj6F_Index
00016F08 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016F0E 4EB9 0000 B090             		jsr	AnimateSprite
00016F14 4A28 001A                  		tst.b	$1A(a0)
00016F18 6600                       		bne.s	loc_16404
00016F1A 3F28 0008                  		move.w	8(a0),-(sp)
00016F1E 6100 0000                  		bsr.w	loc_16424
00016F22 323C 001B                  		move.w	#$1B,d1
00016F26 343C 0007                  		move.w	#7,d2
00016F2A 3602                       		move.w	d2,d3
00016F2C 5243                       		addq.w	#1,d3
00016F2E 381F                       		move.w	(sp)+,d4
00016F30 6000 94D0                  		bra.w	SolidObject
00016F34                            ; ===========================================================================
00016F34                            
00016F34                            loc_16404:
00016F34 0828 0003 0022             		btst	#3,$22(a0)
00016F3A 6700                       		beq.s	loc_16420
00016F3C 43F8 D000                  		lea	($FFFFD000).w,a1
00016F40 08A9 0003 0022             		bclr	#3,$22(a1)
00016F46 08A8 0003 0022             		bclr	#3,$22(a0)
00016F4C 4228 0025                  		clr.b	$25(a0)
00016F50                            
00016F50                            loc_16420:
00016F50 6000 0002                  		bra.w	*+4
00016F54                            
00016F54                            loc_16424:
00016F54 3028 0008                  		move.w	8(a0),d0
00016F58 B068 0034                  		cmp.w	$34(a0),d0
00016F5C 6600                       		bne.s	loc_16484
00016F5E 3028 000C                  		move.w	$C(a0),d0
00016F62 B068 0036                  		cmp.w	$36(a0),d0
00016F66 6600                       		bne.s	loc_16484
00016F68 7200                       		moveq	#0,d1
00016F6A 1228 0038                  		move.b	$38(a0),d1
00016F6E D228 003A                  		add.b	$3A(a0),d1
00016F72 B228 0039                  		cmp.b	$39(a0),d1
00016F76 6500                       		bcs.s	loc_16456
00016F78 1001                       		move.b	d1,d0
00016F7A 7200                       		moveq	#0,d1
00016F7C 4A00                       		tst.b	d0
00016F7E 6A00                       		bpl.s	loc_16456
00016F80 1228 0039                  		move.b	$39(a0),d1
00016F84 5901                       		subq.b	#4,d1
00016F86                            
00016F86                            loc_16456:
00016F86 1141 0038                  		move.b	d1,$38(a0)
00016F8A 2268 003C                  		movea.l	$3C(a0),a1
00016F8E 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016F94 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016F9A 4A41                       		tst.w	d1
00016F9C 6600                       		bne.s	loc_16474
00016F9E 117C 0001 001C             		move.b	#1,$1C(a0)
00016FA4                            
00016FA4                            loc_16474:
00016FA4 0C41 0008                  		cmpi.w	#8,d1
00016FA8 6600                       		bne.s	loc_16480
00016FAA 117C 0000 001C             		move.b	#0,$1C(a0)
00016FB0                            
00016FB0                            loc_16480:
00016FB0 6100 BFC0                  		bsr.w	Obj63_ChangeDir
00016FB4                            
00016FB4                            loc_16484:
00016FB4 4EF9 0000 E00C             		jmp	SpeedToPos
00016FBA                            ; ===========================================================================
00016FBA                            Ani_obj6F:
00016FBA                            	include "_anim\obj6F.asm"
00016FBA                            ; ---------------------------------------------------------------------------
00016FBA                            ; Animation script - platform on conveyor belt (SBZ)
00016FBA                            ; ---------------------------------------------------------------------------
00016FBA 0000                       		dc.w byte_1648E-Ani_obj6F
00016FBC 0000                       		dc.w byte_164A2-Ani_obj6F
00016FBE 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016FCB 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016FD2 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016FD6 00                         		even
00016FD6 00                         		even
00016FD6                            
00016FD6 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016FDC 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016FE2 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016FF6 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001700A 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001701E 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00017032 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00017046 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001705A                            ; ===========================================================================
0001705A                            ; ---------------------------------------------------------------------------
0001705A                            ; Object 70 - large girder block (SBZ)
0001705A                            ; ---------------------------------------------------------------------------
0001705A                            
0001705A                            Obj70:					; XREF: Obj_Index
0001705A 7000                       		moveq	#0,d0
0001705C 1028 0024                  		move.b	$24(a0),d0
00017060 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00017064 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00017068                            ; ===========================================================================
00017068 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
0001706A 0000                       		dc.w Obj70_Action-Obj70_Index
0001706C                            ; ===========================================================================
0001706C                            
0001706C                            Obj70_Main:				; XREF: Obj70_Index
0001706C 5428 0024                  		addq.b	#2,$24(a0)
00017070 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00017078 317C 42F0 0002             		move.w	#$42F0,2(a0)
0001707E 0028 0004 0001             		ori.b	#4,1(a0)
00017084 117C 0004 0018             		move.b	#4,$18(a0)
0001708A 117C 0060 0019             		move.b	#$60,$19(a0)
00017090 117C 0018 0016             		move.b	#$18,$16(a0)
00017096 3168 0008 0032             		move.w	8(a0),$32(a0)
0001709C 3168 000C 0030             		move.w	$C(a0),$30(a0)
000170A2 6100 0000                  		bsr.w	Obj70_Move2
000170A6                            
000170A6                            Obj70_Action:				; XREF: Obj70_Index
000170A6 3F28 0008                  		move.w	8(a0),-(sp)
000170AA 4A68 003A                  		tst.w	$3A(a0)
000170AE 6700                       		beq.s	Obj70_Move
000170B0 5368 003A                  		subq.w	#1,$3A(a0)
000170B4 6600                       		bne.s	Obj70_Solid
000170B6                            
000170B6                            Obj70_Move:
000170B6 4EB9 0000 E00C             		jsr	SpeedToPos
000170BC 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000170C0 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000170C2 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000170C6                            
000170C6                            Obj70_Solid:
000170C6 381F                       		move.w	(sp)+,d4
000170C8 4A28 0001                  		tst.b	1(a0)
000170CC 6A00                       		bpl.s	Obj70_ChkDel
000170CE 7200                       		moveq	#0,d1
000170D0 1228 0019                  		move.b	$19(a0),d1
000170D4 0641 000B                  		addi.w	#$B,d1
000170D8 7400                       		moveq	#0,d2
000170DA 1428 0016                  		move.b	$16(a0),d2
000170DE 3602                       		move.w	d2,d3
000170E0 5243                       		addq.w	#1,d3
000170E2 6100 931E                  		bsr.w	SolidObject
000170E6                            
000170E6                            Obj70_ChkDel:
000170E6 3028 0032                  		move.w	$32(a0),d0
000170EA 0240 FF80                  		andi.w	#$FF80,d0
000170EE 3238 F700                  		move.w	($FFFFF700).w,d1
000170F2 0441 0080                  		subi.w	#$80,d1
000170F6 0241 FF80                  		andi.w	#$FF80,d1
000170FA 9041                       		sub.w	d1,d0
000170FC 0C40 0280                  		cmpi.w	#$280,d0
00017100 6200                       		bhi.s	Obj70_Delete
00017102 4EF9 0000 E032             		jmp	DisplaySprite
00017108                            ; ===========================================================================
00017108                            
00017108                            Obj70_Delete:
00017108 4EF9 0000 E06E             		jmp	DeleteObject
0001710E                            ; ===========================================================================
0001710E                            
0001710E                            Obj70_Move2:				; XREF: Obj70_Main
0001710E 1028 0038                  		move.b	$38(a0),d0
00017112 0240 0018                  		andi.w	#$18,d0
00017116 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
0001711C 43F1 0000                  		lea	(a1,d0.w),a1
00017120 3159 0010                  		move.w	(a1)+,$10(a0)
00017124 3159 0012                  		move.w	(a1)+,$12(a0)
00017128 3159 0034                  		move.w	(a1)+,$34(a0)
0001712C 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00017130 317C 0007 003A             		move.w	#7,$3A(a0)
00017136 4E75                       		rts	
00017138                            ; ===========================================================================
00017138 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00017140 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00017148 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00017150 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00017158                            ; ---------------------------------------------------------------------------
00017158                            ; Sprite mappings - large girder block (SBZ)
00017158                            ; ---------------------------------------------------------------------------
00017158                            Map_obj70:
00017158                            	include "_maps\obj70.asm"
00017158                            ; ---------------------------------------------------------------------------
00017158                            ; Sprite mappings - large girder block (SBZ)
00017158                            ; ---------------------------------------------------------------------------
00017158 0000                       		dc.w byte_1662A-Map_obj70
0001715A 0C                         byte_1662A:	dc.b $C
0001715B E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00017160 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00017165 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001716A 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001716F E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00017174 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00017179 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001717E 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00017183 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00017188 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001718D E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00017192 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00017198 00                         		even
00017198 00                         		even
00017198                            
00017198                            ; ===========================================================================
00017198                            ; ---------------------------------------------------------------------------
00017198                            ; Object 72 - teleporter (SBZ)
00017198                            ; ---------------------------------------------------------------------------
00017198                            
00017198                            Obj72:					; XREF: Obj_Index
00017198 7000                       		moveq	#0,d0
0001719A 1028 0024                  		move.b	$24(a0),d0
0001719E 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000171A2 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000171A6 3028 0008                  		move.w	8(a0),d0
000171AA 0240 FF80                  		andi.w	#$FF80,d0
000171AE 3238 F700                  		move.w	($FFFFF700).w,d1
000171B2 0441 0080                  		subi.w	#$80,d1
000171B6 0241 FF80                  		andi.w	#$FF80,d1
000171BA 9041                       		sub.w	d1,d0
000171BC 0C40 0280                  		cmpi.w	#$280,d0
000171C0 6200                       		bhi.s	Obj72_Delete
000171C2 4E75                       		rts	
000171C4                            ; ===========================================================================
000171C4                            
000171C4                            Obj72_Delete:
000171C4 4EF9 0000 E06E             		jmp	DeleteObject
000171CA                            ; ===========================================================================
000171CA 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000171CC 0000                       		dc.w loc_166C8-Obj72_Index
000171CE 0000                       		dc.w loc_1675E-Obj72_Index
000171D0 0000                       		dc.w loc_16798-Obj72_Index
000171D2                            ; ===========================================================================
000171D2                            
000171D2                            Obj72_Main:				; XREF: Obj72_Index
000171D2 5428 0024                  		addq.b	#2,$24(a0)
000171D6 1028 0028                  		move.b	$28(a0),d0
000171DA D040                       		add.w	d0,d0
000171DC 0240 001E                  		andi.w	#$1E,d0
000171E0 45FA 0000                  		lea	Obj72_Data(pc),a2
000171E4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000171E8 315A 003A                  		move.w	(a2)+,$3A(a0)
000171EC 214A 003C                  		move.l	a2,$3C(a0)
000171F0 315A 0036                  		move.w	(a2)+,$36(a0)
000171F4 315A 0038                  		move.w	(a2)+,$38(a0)
000171F8                            
000171F8                            loc_166C8:				; XREF: Obj72_Index
000171F8 43F8 D000                  		lea	($FFFFD000).w,a1
000171FC 3029 0008                  		move.w	8(a1),d0
00017200 9068 0008                  		sub.w	8(a0),d0
00017204 0828 0000 0022             		btst	#0,$22(a0)
0001720A 6700                       		beq.s	loc_166E0
0001720C 0640 000F                  		addi.w	#$F,d0
00017210                            
00017210                            loc_166E0:
00017210 0C40 0010                  		cmpi.w	#$10,d0
00017214 6400                       		bcc.s	locret_1675C
00017216 3229 000C                  		move.w	$C(a1),d1
0001721A 9268 000C                  		sub.w	$C(a0),d1
0001721E 0641 0020                  		addi.w	#$20,d1
00017222 0C41 0040                  		cmpi.w	#$40,d1
00017226 6400                       		bcc.s	locret_1675C
00017228 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001722C 6600                       		bne.s	locret_1675C
0001722E 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00017234 6600                       		bne.s	loc_1670E
00017236 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001723C 6500                       		bcs.s	locret_1675C
0001723E                            
0001723E                            loc_1670E:
0001723E 5428 0024                  		addq.b	#2,$24(a0)
00017242 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00017248 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
0001724E 337C 0800 0014             		move.w	#$800,$14(a1)
00017254 337C 0000 0010             		move.w	#0,$10(a1)
0001725A 337C 0000 0012             		move.w	#0,$12(a1)
00017260 08A8 0005 0022             		bclr	#5,$22(a0)
00017266 08A9 0005 0022             		bclr	#5,$22(a1)
0001726C 08E9 0001 0022             		bset	#1,$22(a1)
00017272 3368 0008 0008             		move.w	8(a0),8(a1)
00017278 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001727E 4228 0032                  		clr.b	$32(a0)
00017282 303C 00BE                  		move.w	#$BE,d0
00017286 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
0001728C                            
0001728C                            locret_1675C:
0001728C 4E75                       		rts	
0001728E                            ; ===========================================================================
0001728E                            
0001728E                            loc_1675E:				; XREF: Obj72_Index
0001728E 43F8 D000                  		lea	($FFFFD000).w,a1
00017292 1028 0032                  		move.b	$32(a0),d0
00017296 5428 0032                  		addq.b	#2,$32(a0)
0001729A 4EB9 0000 2D6C             		jsr	(CalcSine).l
000172A0 EA40                       		asr.w	#5,d0
000172A2 3428 000C                  		move.w	$C(a0),d2
000172A6 9440                       		sub.w	d0,d2
000172A8 3342 000C                  		move.w	d2,$C(a1)
000172AC 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000172B2 6600                       		bne.s	locret_16796
000172B4 6100 0000                  		bsr.w	sub_1681C
000172B8 5428 0024                  		addq.b	#2,$24(a0)
000172BC 303C 00BC                  		move.w	#$BC,d0
000172C0 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play teleport sound
000172C6                            
000172C6                            locret_16796:
000172C6 4E75                       		rts	
000172C8                            ; ===========================================================================
000172C8                            
000172C8                            loc_16798:				; XREF: Obj72_Index
000172C8 588F                       		addq.l	#4,sp
000172CA 43F8 D000                  		lea	($FFFFD000).w,a1
000172CE 5328 002E                  		subq.b	#1,$2E(a0)
000172D2 6A00                       		bpl.s	loc_167DA
000172D4 3368 0036 0008             		move.w	$36(a0),8(a1)
000172DA 3368 0038 000C             		move.w	$38(a0),$C(a1)
000172E0 7200                       		moveq	#0,d1
000172E2 1228 003A                  		move.b	$3A(a0),d1
000172E6 5801                       		addq.b	#4,d1
000172E8 B228 003B                  		cmp.b	$3B(a0),d1
000172EC 6500                       		bcs.s	loc_167C2
000172EE 7200                       		moveq	#0,d1
000172F0 6000                       		bra.s	loc_16800
000172F2                            ; ===========================================================================
000172F2                            
000172F2                            loc_167C2:
000172F2 1141 003A                  		move.b	d1,$3A(a0)
000172F6 2468 003C                  		movea.l	$3C(a0),a2
000172FA 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00017300 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00017306 6000 0000                  		bra.w	sub_1681C
0001730A                            ; ===========================================================================
0001730A                            
0001730A                            loc_167DA:
0001730A 2429 0008                  		move.l	8(a1),d2
0001730E 2629 000C                  		move.l	$C(a1),d3
00017312 3029 0010                  		move.w	$10(a1),d0
00017316 48C0                       		ext.l	d0
00017318 E180                       		asl.l	#8,d0
0001731A D480                       		add.l	d0,d2
0001731C 3029 0012                  		move.w	$12(a1),d0
00017320 48C0                       		ext.l	d0
00017322 E180                       		asl.l	#8,d0
00017324 D680                       		add.l	d0,d3
00017326 2342 0008                  		move.l	d2,8(a1)
0001732A 2343 000C                  		move.l	d3,$C(a1)
0001732E 4E75                       		rts	
00017330                            ; ===========================================================================
00017330                            
00017330                            loc_16800:
00017330 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017336 4228 0024                  		clr.b	$24(a0)
0001733A 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001733E 337C 0000 0010             		move.w	#0,$10(a1)
00017344 337C 0200 0012             		move.w	#$200,$12(a1)
0001734A 4E75                       		rts	
0001734C                            
0001734C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001734C                            
0001734C                            
0001734C                            sub_1681C:
0001734C 7000                       		moveq	#0,d0
0001734E 343C 1000                  		move.w	#$1000,d2
00017352 3028 0036                  		move.w	$36(a0),d0
00017356 9069 0008                  		sub.w	8(a1),d0
0001735A 6C00                       		bge.s	loc_16830
0001735C 4440                       		neg.w	d0
0001735E 4442                       		neg.w	d2
00017360                            
00017360                            loc_16830:
00017360 7200                       		moveq	#0,d1
00017362 363C 1000                  		move.w	#$1000,d3
00017366 3228 0038                  		move.w	$38(a0),d1
0001736A 9269 000C                  		sub.w	$C(a1),d1
0001736E 6C00                       		bge.s	loc_16844
00017370 4441                       		neg.w	d1
00017372 4443                       		neg.w	d3
00017374                            
00017374                            loc_16844:
00017374 B240                       		cmp.w	d0,d1
00017376 6500                       		bcs.s	loc_1687A
00017378 7200                       		moveq	#0,d1
0001737A 3228 0038                  		move.w	$38(a0),d1
0001737E 9269 000C                  		sub.w	$C(a1),d1
00017382 4841                       		swap	d1
00017384 83C3                       		divs.w	d3,d1
00017386 7000                       		moveq	#0,d0
00017388 3028 0036                  		move.w	$36(a0),d0
0001738C 9069 0008                  		sub.w	8(a1),d0
00017390 6700                       		beq.s	loc_16866
00017392 4840                       		swap	d0
00017394 81C1                       		divs.w	d1,d0
00017396                            
00017396                            loc_16866:
00017396 3340 0010                  		move.w	d0,$10(a1)
0001739A 3343 0012                  		move.w	d3,$12(a1)
0001739E 4A41                       		tst.w	d1
000173A0 6A00                       		bpl.s	loc_16874
000173A2 4441                       		neg.w	d1
000173A4                            
000173A4                            loc_16874:
000173A4 3141 002E                  		move.w	d1,$2E(a0)
000173A8 4E75                       		rts	
000173AA                            ; ===========================================================================
000173AA                            
000173AA                            loc_1687A:
000173AA 7000                       		moveq	#0,d0
000173AC 3028 0036                  		move.w	$36(a0),d0
000173B0 9069 0008                  		sub.w	8(a1),d0
000173B4 4840                       		swap	d0
000173B6 81C2                       		divs.w	d2,d0
000173B8 7200                       		moveq	#0,d1
000173BA 3228 0038                  		move.w	$38(a0),d1
000173BE 9269 000C                  		sub.w	$C(a1),d1
000173C2 6700                       		beq.s	loc_16898
000173C4 4841                       		swap	d1
000173C6 83C0                       		divs.w	d0,d1
000173C8                            
000173C8                            loc_16898:
000173C8 3341 0012                  		move.w	d1,$12(a1)
000173CC 3342 0010                  		move.w	d2,$10(a1)
000173D0 4A40                       		tst.w	d0
000173D2 6A00                       		bpl.s	loc_168A6
000173D4 4440                       		neg.w	d0
000173D6                            
000173D6                            loc_168A6:
000173D6 3140 002E                  		move.w	d0,$2E(a0)
000173DA 4E75                       		rts	
000173DC                            ; End of function sub_1681C
000173DC                            
000173DC                            ; ===========================================================================
000173DC 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000173E2 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000173E8 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000173EC 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
000173F2 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000173F8 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000173FE 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00017404 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001740A 0884 0298 0894             		dc.w $884, $298, $894
00017410 0270 0894 0190             		dc.w $270, $894, $190
00017416 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
0001741C 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00017422 1184 0498 1158             		dc.w $1184, $498, $1158
00017428 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001742E 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017434 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001743A 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017440 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017446 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001744C FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017452 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017458 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001745E 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017464                            ; ===========================================================================
00017464                            ; ---------------------------------------------------------------------------
00017464                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017464                            ; ---------------------------------------------------------------------------
00017464                            
00017464                            Obj78:					; XREF: Obj_Index
00017464 7000                       		moveq	#0,d0
00017466 1028 0024                  		move.b	$24(a0),d0
0001746A 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001746E 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00017472                            ; ===========================================================================
00017472 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00017474 0000                       		dc.w Obj78_Action-Obj78_Index
00017476 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017478 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
0001747A 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001747C 0000                       		dc.w Obj78_Delete-Obj78_Index
0001747E 0000                       		dc.w loc_16CC0-Obj78_Index
00017480                            ; ===========================================================================
00017480                            
00017480                            locret_16950:
00017480 4E75                       		rts	
00017482                            ; ===========================================================================
00017482                            
00017482                            Obj78_Main:				; XREF: Obj78_Index
00017482 117C 0007 0016             		move.b	#7,$16(a0)
00017488 117C 0008 0017             		move.b	#8,$17(a0)
0001748E 4EB9 0000 DF9A             		jsr	ObjectFall
00017494 4EBA E4A6                  		jsr	ObjHitFloor
00017498 4A41                       		tst.w	d1
0001749A 6AE4                       		bpl.s	locret_16950
0001749C D368 000C                  		add.w	d1,$C(a0)
000174A0 4268 0012                  		clr.w	$12(a0)
000174A4 5428 0024                  		addq.b	#2,$24(a0)
000174A8 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000174B0 317C 22B0 0002             		move.w	#$22B0,2(a0)
000174B6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000174BC 6700                       		beq.s	loc_16996
000174BE 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000174C4                            
000174C4                            loc_16996:
000174C4 0228 0003 0001             		andi.b	#3,1(a0)
000174CA 0028 0004 0001             		ori.b	#4,1(a0)
000174D0 1168 0001 0022             		move.b	1(a0),$22(a0)
000174D6 117C 0004 0018             		move.b	#4,$18(a0)
000174DC 117C 0008 0019             		move.b	#8,$19(a0)
000174E2 117C 000B 0020             		move.b	#$B,$20(a0)
000174E8 3428 0008                  		move.w	8(a0),d2
000174EC 7A0C                       		moveq	#$C,d5
000174EE 0828 0000 0022             		btst	#0,$22(a0)
000174F4 6700                       		beq.s	loc_169CA
000174F6 4445                       		neg.w	d5
000174F8                            
000174F8                            loc_169CA:
000174F8 1C3C 0004                  		move.b	#4,d6
000174FC 7600                       		moveq	#0,d3
000174FE 7804                       		moveq	#4,d4
00017500 2448                       		movea.l	a0,a2
00017502 7202                       		moveq	#2,d1
00017504                            
00017504                            Obj78_LoadBody:
00017504 4EB9 0000 E4CE             		jsr	SingleObjLoad2
0001750A 6600                       		bne.s	Obj78_QuitLoad
0001750C 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017510 1346 0024                  		move.b	d6,$24(a1)
00017514 5406                       		addq.b	#2,d6
00017516 2368 0004 0004             		move.l	4(a0),4(a1)
0001751C 3368 0002 0002             		move.w	2(a0),2(a1)
00017522 137C 0005 0018             		move.b	#5,$18(a1)
00017528 137C 0008 0019             		move.b	#8,$19(a1)
0001752E 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017534 D445                       		add.w	d5,d2
00017536 3342 0008                  		move.w	d2,8(a1)
0001753A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017540 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017546 1368 0022 0001             		move.b	$22(a0),1(a1)
0001754C 137C 0008 001A             		move.b	#8,$1A(a1)
00017552 234A 003C                  		move.l	a2,$3C(a1)
00017556 1344 003C                  		move.b	d4,$3C(a1)
0001755A 5804                       		addq.b	#4,d4
0001755C 2449                       		movea.l	a1,a2
0001755E                            
0001755E                            Obj78_QuitLoad:
0001755E 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017562                            
00017562 117C 0007 002A             		move.b	#7,$2A(a0)
00017568 4228 003C                  		clr.b	$3C(a0)
0001756C                            
0001756C                            Obj78_Action:				; XREF: Obj78_Index
0001756C 4A28 0022                  		tst.b	$22(a0)
00017570 6B00 0000                  		bmi.w	loc_16C96
00017574 7000                       		moveq	#0,d0
00017576 1028 0025                  		move.b	$25(a0),d0
0001757A 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001757E 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017582 1228 002B                  		move.b	$2B(a0),d1
00017586 6A00                       		bpl.s	Obj78_Display
00017588 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001758E 1028 0026                  		move.b	$26(a0),d0
00017592 0240 007F                  		andi.w	#$7F,d0
00017596 5828 0026                  		addq.b	#4,$26(a0)
0001759A 1031 0000                  		move.b	(a1,d0.w),d0
0001759E 6A00                       		bpl.s	Obj78_AniHead
000175A0 08A8 0007 002B             		bclr	#7,$2B(a0)
000175A6 6000                       		bra.s	Obj78_Display
000175A8                            ; ===========================================================================
000175A8                            
000175A8                            Obj78_AniHead:
000175A8 0201 0010                  		andi.b	#$10,d1
000175AC D001                       		add.b	d1,d0
000175AE 1140 001A                  		move.b	d0,$1A(a0)
000175B2                            
000175B2                            Obj78_Display:
000175B2 3028 0008                  		move.w	8(a0),d0
000175B6 0240 FF80                  		andi.w	#$FF80,d0
000175BA 3238 F700                  		move.w	($FFFFF700).w,d1
000175BE 0441 0080                  		subi.w	#$80,d1
000175C2 0241 FF80                  		andi.w	#$FF80,d1
000175C6 9041                       		sub.w	d1,d0
000175C8 0C40 0280                  		cmpi.w	#$280,d0
000175CC 6200 0000                  		bhi.w	Obj78_ChkGone
000175D0 4EF9 0000 E032             		jmp	DisplaySprite
000175D6                            ; ===========================================================================
000175D6                            
000175D6                            Obj78_ChkGone:
000175D6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000175DA 7000                       		moveq	#0,d0
000175DC 1028 0023                  		move.b	$23(a0),d0
000175E0 6700                       		beq.s	loc_16ABC
000175E2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000175E8                            
000175E8                            loc_16ABC:
000175E8 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000175EE 4E75                       		rts	
000175F0                            ; ===========================================================================
000175F0                            
000175F0                            Obj78_Delete:				; XREF: Obj78_Index
000175F0 4EF9 0000 E06E             		jmp	DeleteObject
000175F6                            ; ===========================================================================
000175F6 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000175F8 0000                       		dc.w loc_16B02-Obj78_Index2
000175FA                            ; ===========================================================================
000175FA                            
000175FA                            Obj78_Move:				; XREF: Obj78_Index2
000175FA 5328 002A                  		subq.b	#1,$2A(a0)
000175FE 6B00                       		bmi.s	Obj78_Move2
00017600 4E75                       		rts	
00017602                            ; ===========================================================================
00017602                            
00017602                            Obj78_Move2:
00017602 5428 0025                  		addq.b	#2,$25(a0)
00017606 117C 0010 002A             		move.b	#$10,$2A(a0)
0001760C 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017612 317C 0040 0014             		move.w	#$40,$14(a0)
00017618 0868 0004 002B             		bchg	#4,$2B(a0)
0001761E 6600                       		bne.s	loc_16AFC
00017620 4268 0010                  		clr.w	$10(a0)
00017624 4468 0014                  		neg.w	$14(a0)
00017628                            
00017628                            loc_16AFC:
00017628 08E8 0007 002B             		bset	#7,$2B(a0)
0001762E                            
0001762E                            loc_16B02:				; XREF: Obj78_Index2
0001762E 5328 002A                  		subq.b	#1,$2A(a0)
00017632 6B00                       		bmi.s	loc_16B5E
00017634 2F28 0008                  		move.l	8(a0),-(sp)
00017638 2428 0008                  		move.l	8(a0),d2
0001763C 3028 0010                  		move.w	$10(a0),d0
00017640 0828 0000 0022             		btst	#0,$22(a0)
00017646 6700                       		beq.s	loc_16B1E
00017648 4440                       		neg.w	d0
0001764A                            
0001764A                            loc_16B1E:
0001764A 48C0                       		ext.l	d0
0001764C E180                       		asl.l	#8,d0
0001764E D480                       		add.l	d0,d2
00017650 2142 0008                  		move.l	d2,8(a0)
00017654 4EBA E2E6                  		jsr	ObjHitFloor
00017658 241F                       		move.l	(sp)+,d2
0001765A 0C41 FFF8                  		cmpi.w	#-8,d1
0001765E 6D00                       		blt.s	loc_16B70
00017660 0C41 000C                  		cmpi.w	#$C,d1
00017664 6C00                       		bge.s	loc_16B70
00017666 D368 000C                  		add.w	d1,$C(a0)
0001766A 4842                       		swap	d2
0001766C B468 0008                  		cmp.w	8(a0),d2
00017670 6700                       		beq.s	locret_16B5C
00017672 7000                       		moveq	#0,d0
00017674 1028 003C                  		move.b	$3C(a0),d0
00017678 5228 003C                  		addq.b	#1,$3C(a0)
0001767C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017682 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017686                            
00017686                            locret_16B5C:
00017686 4E75                       		rts	
00017688                            ; ===========================================================================
00017688                            
00017688                            loc_16B5E:
00017688 5528 0025                  		subq.b	#2,$25(a0)
0001768C 117C 0007 002A             		move.b	#7,$2A(a0)
00017692 317C 0000 0010             		move.w	#0,$10(a0)
00017698 4E75                       		rts	
0001769A                            ; ===========================================================================
0001769A                            
0001769A                            loc_16B70:
0001769A 2142 0008                  		move.l	d2,8(a0)
0001769E 0868 0000 0022             		bchg	#0,$22(a0)
000176A4 1168 0022 0001             		move.b	$22(a0),1(a0)
000176AA 7000                       		moveq	#0,d0
000176AC 1028 003C                  		move.b	$3C(a0),d0
000176B0 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
000176B6 5228 003C                  		addq.b	#1,$3C(a0)
000176BA 0228 000F 003C             		andi.b	#$F,$3C(a0)
000176C0 4E75                       		rts	
000176C2                            ; ===========================================================================
000176C2                            
000176C2                            Obj78_BodySeg2:				; XREF: Obj78_Index
000176C2 2268 003C                  		movea.l	$3C(a0),a1
000176C6 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000176CC 6A00                       		bpl.s	Obj78_BodySeg1
000176CE 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000176D4 1028 0026                  		move.b	$26(a0),d0
000176D8 0240 007F                  		andi.w	#$7F,d0
000176DC 5828 0026                  		addq.b	#4,$26(a0)
000176E0 4A31 0004                  		tst.b	4(a1,d0.w)
000176E4 6A00                       		bpl.s	Obj78_AniBody
000176E6 5828 0026                  		addq.b	#4,$26(a0)
000176EA                            
000176EA                            Obj78_AniBody:
000176EA 1031 0000                  		move.b	(a1,d0.w),d0
000176EE 5000                       		addq.b	#8,d0
000176F0 1140 001A                  		move.b	d0,$1A(a0)
000176F4                            
000176F4                            Obj78_BodySeg1:				; XREF: Obj78_Index
000176F4 2268 003C                  		movea.l	$3C(a0),a1
000176F8 4A28 0022                  		tst.b	$22(a0)
000176FC 6B00 0000                  		bmi.w	loc_16C90
00017700 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017706 1169 0025 0025             		move.b	$25(a1),$25(a0)
0001770C 6700 0000                  		beq.w	loc_16C64
00017710 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017716 3029 0010                  		move.w	$10(a1),d0
0001771A D069 0014                  		add.w	$14(a1),d0
0001771E 3140 0010                  		move.w	d0,$10(a0)
00017722 2428 0008                  		move.l	8(a0),d2
00017726 2602                       		move.l	d2,d3
00017728 3028 0010                  		move.w	$10(a0),d0
0001772C 0828 0000 0022             		btst	#0,$22(a0)
00017732 6700                       		beq.s	loc_16C0C
00017734 4440                       		neg.w	d0
00017736                            
00017736                            loc_16C0C:
00017736 48C0                       		ext.l	d0
00017738 E180                       		asl.l	#8,d0
0001773A D480                       		add.l	d0,d2
0001773C 2142 0008                  		move.l	d2,8(a0)
00017740 4843                       		swap	d3
00017742 B668 0008                  		cmp.w	8(a0),d3
00017746 6700                       		beq.s	loc_16C64
00017748 7000                       		moveq	#0,d0
0001774A 1028 003C                  		move.b	$3C(a0),d0
0001774E 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017752 0C01 0080                  		cmpi.b	#-$80,d1
00017756 6600                       		bne.s	loc_16C50
00017758 4843                       		swap	d3
0001775A 2143 0008                  		move.l	d3,8(a0)
0001775E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017762 0868 0000 0022             		bchg	#0,$22(a0)
00017768 1168 0022 0001             		move.b	$22(a0),1(a0)
0001776E 5228 003C                  		addq.b	#1,$3C(a0)
00017772 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017778 6000                       		bra.s	loc_16C64
0001777A                            ; ===========================================================================
0001777A                            
0001777A                            loc_16C50:
0001777A 4881                       		ext.w	d1
0001777C D368 000C                  		add.w	d1,$C(a0)
00017780 5228 003C                  		addq.b	#1,$3C(a0)
00017784 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001778A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001778E                            
0001778E                            loc_16C64:
0001778E 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017794 6700                       		beq.s	loc_16C90
00017796 0C11 0027                  		cmpi.b	#$27,0(a1)
0001779A 6700                       		beq.s	loc_16C7C
0001779C 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000177A2 6600                       		bne.s	loc_16C82
000177A4                            
000177A4                            loc_16C7C:
000177A4 117C 000A 0024             		move.b	#$A,$24(a0)
000177AA                            
000177AA                            loc_16C82:
000177AA 4EF9 0000 E032             		jmp	DisplaySprite
000177B0                            
000177B0                            ; ===========================================================================
000177B0 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000177B8                            ; ===========================================================================
000177B8                            
000177B8                            loc_16C90:
000177B8 08E9 0007 0022             		bset	#7,$22(a1)
000177BE                            
000177BE                            loc_16C96:
000177BE 7000                       		moveq	#0,d0
000177C0 1028 0024                  		move.b	$24(a0),d0
000177C4 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000177C8 0828 0000 0022             		btst	#0,$22(a0)
000177CE 6700                       		beq.s	loc_16CAA
000177D0 4440                       		neg.w	d0
000177D2                            
000177D2                            loc_16CAA:
000177D2 3140 0010                  		move.w	d0,$10(a0)
000177D6 317C FC00 0012             		move.w	#-$400,$12(a0)
000177DC 117C 000C 0024             		move.b	#$C,$24(a0)
000177E2 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000177E8                            
000177E8                            loc_16CC0:				; XREF: Obj78_Index
000177E8 4EB9 0000 DF9A             		jsr	ObjectFall
000177EE 4A68 0012                  		tst.w	$12(a0)
000177F2 6B00                       		bmi.s	loc_16CE0
000177F4 4EBA E146                  		jsr	ObjHitFloor
000177F8 4A41                       		tst.w	d1
000177FA 6A00                       		bpl.s	loc_16CE0
000177FC D368 000C                  		add.w	d1,$C(a0)
00017800 317C FC00 0012             		move.w	#-$400,$12(a0)
00017806                            
00017806                            loc_16CE0:
00017806 4A28 0001                  		tst.b	1(a0)
0001780A 6A00 FDCA                  		bpl.w	Obj78_ChkGone
0001780E 4EF9 0000 E032             		jmp	DisplaySprite
00017814                            ; ===========================================================================
00017814                            Ani_obj78:
00017814                            	include "_anim\obj78.asm"
00017814                            ; ---------------------------------------------------------------------------
00017814                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017814                            ; ---------------------------------------------------------------------------
00017814 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017824 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017834 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017844 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017854 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017864 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017874 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017884 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017894                            	even
00017894                            	even
00017894                            
00017894                            ; ---------------------------------------------------------------------------
00017894                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017894                            ; ---------------------------------------------------------------------------
00017894                            Map_obj78:
00017894                            	include "_maps\obj78.asm"
00017894                            ; ---------------------------------------------------------------------------
00017894                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017894                            ; ---------------------------------------------------------------------------
00017894 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017898 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
0001789C 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
000178A0 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
000178A4 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
000178A8 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
000178AC 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
000178B0 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
000178B4 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
000178B8 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
000178BC 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
000178C0 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
000178C4 01                         byte_16D9E:	dc.b 1
000178C5 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
000178CA 01                         byte_16DA4:	dc.b 1
000178CB F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
000178D0 01                         byte_16DAA:	dc.b 1
000178D1 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
000178D6 01                         byte_16DB0:	dc.b 1
000178D7 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000178DC 01                         byte_16DB6:	dc.b 1
000178DD EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
000178E2 01                         byte_16DBC:	dc.b 1
000178E3 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000178E8 01                         byte_16DC2:	dc.b 1
000178E9 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000178EE 01                         byte_16DC8:	dc.b 1
000178EF EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000178F4 01                         byte_16DCE:	dc.b 1
000178F5 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000178FA 01                         byte_16DD4:	dc.b 1
000178FB F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017900 01                         byte_16DDA:	dc.b 1
00017901 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00017906 01                         byte_16DE0:	dc.b 1
00017907 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001790C 01                         byte_16DE6:	dc.b 1
0001790D F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017912 01                         byte_16DEC:	dc.b 1
00017913 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00017918 01                         byte_16DF2:	dc.b 1
00017919 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001791E 01                         byte_16DF8:	dc.b 1
0001791F F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00017924 01                         byte_16DFE:	dc.b 1
00017925 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001792A 01                         byte_16E04:	dc.b 1
0001792B F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017930 01                         byte_16E0A:	dc.b 1
00017931 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017936 01                         byte_16E10:	dc.b 1
00017937 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001793C 01                         byte_16E16:	dc.b 1
0001793D EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017942 01                         byte_16E1C:	dc.b 1
00017943 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017948 01                         byte_16E22:	dc.b 1
00017949 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001794E 01                         byte_16E28:	dc.b 1
0001794F EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017954                            		even
00017954                            		even
00017954                            
00017954                            ; ===========================================================================
00017954                            ; ---------------------------------------------------------------------------
00017954                            ; Object 79 - lamppost
00017954                            ; ---------------------------------------------------------------------------
00017954                            
00017954                            Obj79:					; XREF: Obj_Index
00017954 7000                       		moveq	#0,d0
00017956 1028 0024                  		move.b	$24(a0),d0
0001795A 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001795E 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017962 4EFA 8776                  		jmp	MarkObjGone
00017966                            ; ===========================================================================
00017966 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017968 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
0001796A 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001796C 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001796E                            ; ===========================================================================
0001796E                            
0001796E                            Obj79_Main:				; XREF: Obj79_Index
0001796E 5428 0024                  		addq.b	#2,$24(a0)
00017972 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
0001797A 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017980 117C 0004 0001             		move.b	#4,1(a0)
00017986 117C 0008 0019             		move.b	#8,$19(a0)
0001798C 117C 0005 0018             		move.b	#5,$18(a0)
00017992 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017996 7000                       		moveq	#0,d0
00017998 1028 0023                  		move.b	$23(a0),d0
0001799C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000179A2 0832 0000 0002             		btst	#0,2(a2,d0.w)
000179A8 6600                       		bne.s	Obj79_RedLamp
000179AA 1238 FE30                  		move.b	($FFFFFE30).w,d1
000179AE 0201 007F                  		andi.b	#$7F,d1
000179B2 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
000179B6 0202 007F                  		andi.b	#$7F,d2
000179BA B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
000179BC 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
000179BE                            
000179BE                            Obj79_RedLamp:
000179BE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000179C4 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
000179CA 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
000179D0 4E75                       		rts	
000179D2                            ; ===========================================================================
000179D2                            
000179D2                            Obj79_BlueLamp:				; XREF: Obj79_Index
000179D2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000179D6 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000179DA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000179DE 6B00 0000                  		bmi.w	locret_16F90
000179E2 1238 FE30                  		move.b	($FFFFFE30).w,d1
000179E6 0201 007F                  		andi.b	#$7F,d1
000179EA 1428 0028                  		move.b	$28(a0),d2
000179EE 0202 007F                  		andi.b	#$7F,d2
000179F2 B202                       		cmp.b	d2,d1
000179F4 6500                       		bcs.s	Obj79_HitLamp
000179F6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000179FA 7000                       		moveq	#0,d0
000179FC 1028 0023                  		move.b	$23(a0),d0
00017A00 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017A06 117C 0004 0024             		move.b	#4,$24(a0)
00017A0C 117C 0003 001A             		move.b	#3,$1A(a0)
00017A12 6000 0000                  		bra.w	locret_16F90
00017A16                            ; ===========================================================================
00017A16                            
00017A16                            Obj79_HitLamp:
00017A16 3038 D008                  		move.w	($FFFFD008).w,d0
00017A1A 9068 0008                  		sub.w	8(a0),d0
00017A1E 5040                       		addq.w	#8,d0
00017A20 0C40 0010                  		cmpi.w	#$10,d0
00017A24 6400 0000                  		bcc.w	locret_16F90
00017A28 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017A2C 9068 000C                  		sub.w	$C(a0),d0
00017A30 0640 0040                  		addi.w	#$40,d0
00017A34 0C40 0068                  		cmpi.w	#$68,d0
00017A38 6400                       		bcc.s	locret_16F90
00017A3A 303C 00A1                  		move.w	#$A1,d0
00017A3E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017A44 5428 0024                  		addq.b	#2,$24(a0)
00017A48 4EB9 0000 E4B8             		jsr	SingleObjLoad
00017A4E 6600                       		bne.s	loc_16F76
00017A50 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017A54 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017A5A 3368 0008 0030             		move.w	8(a0),$30(a1)
00017A60 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017A66 0469 0018 0032             		subi.w	#$18,$32(a1)
00017A6C 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017A74 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017A7A 137C 0004 0001             		move.b	#4,1(a1)
00017A80 137C 0008 0019             		move.b	#8,$19(a1)
00017A86 137C 0004 0018             		move.b	#4,$18(a1)
00017A8C 137C 0002 001A             		move.b	#2,$1A(a1)
00017A92 337C 0020 0036             		move.w	#$20,$36(a1)
00017A98                            
00017A98                            loc_16F76:
00017A98 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017A9E 6100 0000                  		bsr.w	Obj79_StoreInfo
00017AA2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017AA6 7000                       		moveq	#0,d0
00017AA8 1028 0023                  		move.b	$23(a0),d0
00017AAC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017AB2                            
00017AB2                            locret_16F90:
00017AB2 4E75                       		rts	
00017AB4                            ; ===========================================================================
00017AB4                            
00017AB4                            Obj79_AfterHit:				; XREF: Obj79_Index
00017AB4 4E75                       		rts	
00017AB6                            ; ===========================================================================
00017AB6                            
00017AB6                            Obj79_Twirl:				; XREF: Obj79_Index
00017AB6 5368 0036                  		subq.w	#1,$36(a0)
00017ABA 6A00                       		bpl.s	loc_16FA0
00017ABC 117C 0004 0024             		move.b	#4,$24(a0)
00017AC2                            
00017AC2                            loc_16FA0:
00017AC2 1028 0026                  		move.b	$26(a0),d0
00017AC6 0428 0010 0026             		subi.b	#$10,$26(a0)
00017ACC 0400 0040                  		subi.b	#$40,d0
00017AD0 4EB9 0000 2D6C             		jsr	(CalcSine).l
00017AD6 C3FC 0C00                  		muls.w	#$C00,d1
00017ADA 4841                       		swap	d1
00017ADC D268 0030                  		add.w	$30(a0),d1
00017AE0 3141 0008                  		move.w	d1,8(a0)
00017AE4 C1FC 0C00                  		muls.w	#$C00,d0
00017AE8 4840                       		swap	d0
00017AEA D068 0032                  		add.w	$32(a0),d0
00017AEE 3140 000C                  		move.w	d0,$C(a0)
00017AF2 4E75                       		rts	
00017AF4                            ; ===========================================================================
00017AF4                            ; ---------------------------------------------------------------------------
00017AF4                            ; Subroutine to	store information when you hit a lamppost
00017AF4                            ; ---------------------------------------------------------------------------
00017AF4                            
00017AF4                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017AF4 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017AFA 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017B00 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017B06 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017B0C 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017B12 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017B18 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017B1E 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017B24 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017B2A 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017B30 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017B36 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017B3C 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017B42 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017B48 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017B4E 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017B54 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017B5A 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017B60 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017B66 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017B6C 4E75                       		rts	
00017B6E                            
00017B6E                            ; ---------------------------------------------------------------------------
00017B6E                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017B6E                            ; ---------------------------------------------------------------------------
00017B6E                            
00017B6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B6E                            
00017B6E                            
00017B6E                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017B6E 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017B74 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017B7A 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017B80 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017B86 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017B8C 4278 FE20                  		clr.w	($FFFFFE20).w
00017B90 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017B94 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017B9A 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017BA0 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017BA4 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017BAA 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017BB0 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017BB6 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017BBC 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017BC2 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017BC8 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017BCE 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017BD4 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017BDA 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017BE0 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017BE6 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017BEC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017BF2 6600                       		bne.s	loc_170E4
00017BF4 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017BFA 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017C00 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017C06                            
00017C06                            loc_170E4:
00017C06 4A38 FE30                  		tst.b	($FFFFFE30).w
00017C0A 6A00                       		bpl.s	locret_170F6
00017C0C 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017C10 0440 00A0                  		subi.w	#$A0,d0
00017C14 31C0 F728                  		move.w	d0,($FFFFF728).w
00017C18                            
00017C18                            locret_170F6:
00017C18 4E75                       		rts	
00017C1A                            ; End of function Obj79_LoadInfo
00017C1A                            
00017C1A                            ; ===========================================================================
00017C1A                            ; ---------------------------------------------------------------------------
00017C1A                            ; Sprite mappings - lamppost
00017C1A                            ; ---------------------------------------------------------------------------
00017C1A                            Map_obj79:
00017C1A                            	include "_maps\obj79.asm"
00017C1A                            ; ---------------------------------------------------------------------------
00017C1A                            ; Sprite mappings - lamppost
00017C1A                            ; ---------------------------------------------------------------------------
00017C1A 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017C1E 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017C22 06                         byte_17100:	dc.b 6
00017C23 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C28 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C2D F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C32 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C37 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017C3C D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017C41 04                         byte_1711F:	dc.b 4
00017C42 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C47 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C4C F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C51 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C56 02                         byte_17134:	dc.b 2
00017C57 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017C5C F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017C61 06                         byte_1713F:	dc.b 6
00017C62 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C67 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C6C F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C71 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C76 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017C7B D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017C80                            		even
00017C80                            		even
00017C80                            
00017C80                            ; ===========================================================================
00017C80                            ; ---------------------------------------------------------------------------
00017C80                            ; Object 7D - hidden points at the end of a level
00017C80                            ; ---------------------------------------------------------------------------
00017C80                            
00017C80                            Obj7D:					; XREF: Obj_Index
00017C80 7000                       		moveq	#0,d0
00017C82 1028 0024                  		move.b	$24(a0),d0
00017C86 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017C8A 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017C8E                            ; ===========================================================================
00017C8E 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017C90 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017C92                            ; ===========================================================================
00017C92                            
00017C92                            Obj7D_Main:				; XREF: Obj7D_Index
00017C92 7410                       		moveq	#$10,d2
00017C94 3602                       		move.w	d2,d3
00017C96 D643                       		add.w	d3,d3
00017C98 43F8 D000                  		lea	($FFFFD000).w,a1
00017C9C 3029 0008                  		move.w	8(a1),d0
00017CA0 9068 0008                  		sub.w	8(a0),d0
00017CA4 D042                       		add.w	d2,d0
00017CA6 B043                       		cmp.w	d3,d0
00017CA8 6400                       		bcc.s	Obj7D_ChkDel
00017CAA 3229 000C                  		move.w	$C(a1),d1
00017CAE 9268 000C                  		sub.w	$C(a0),d1
00017CB2 D242                       		add.w	d2,d1
00017CB4 B243                       		cmp.w	d3,d1
00017CB6 6400                       		bcc.s	Obj7D_ChkDel
00017CB8 4A78 FE08                  		tst.w	($FFFFFE08).w
00017CBC 6600                       		bne.s	Obj7D_ChkDel
00017CBE 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017CC2 6600                       		bne.s	Obj7D_ChkDel
00017CC4 5428 0024                  		addq.b	#2,$24(a0)
00017CC8 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017CD0 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017CD6 0028 0004 0001             		ori.b	#4,1(a0)
00017CDC 117C 0000 0018             		move.b	#0,$18(a0)
00017CE2 117C 0010 0019             		move.b	#$10,$19(a0)
00017CE8 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017CEE 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017CF4 303C 00C9                  		move.w	#$C9,d0
00017CF8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play bonus sound
00017CFE 7000                       		moveq	#0,d0
00017D00 1028 0028                  		move.b	$28(a0),d0
00017D04 D040                       		add.w	d0,d0
00017D06 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017D0A 4EB9 0000 0000             		jsr	AddPoints
00017D10                            
00017D10                            Obj7D_ChkDel:
00017D10 3028 0008                  		move.w	8(a0),d0
00017D14 0240 FF80                  		andi.w	#$FF80,d0
00017D18 3238 F700                  		move.w	($FFFFF700).w,d1
00017D1C 0441 0080                  		subi.w	#$80,d1
00017D20 0241 FF80                  		andi.w	#$FF80,d1
00017D24 9041                       		sub.w	d1,d0
00017D26 0C40 0280                  		cmpi.w	#$280,d0
00017D2A 6200                       		bhi.s	Obj7D_Delete
00017D2C 4E75                       		rts	
00017D2E                            ; ===========================================================================
00017D2E                            
00017D2E                            Obj7D_Delete:
00017D2E 4EF9 0000 E06E             		jmp	DeleteObject
00017D34                            ; ===========================================================================
00017D34 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017D36 03E8                       		dc.w 1000
00017D38 0064                       		dc.w 100
00017D3A 0001                       		dc.w 1
00017D3C                            ; ===========================================================================
00017D3C                            
00017D3C                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017D3C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017D40 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017D42 3028 0008                  		move.w	8(a0),d0
00017D46 0240 FF80                  		andi.w	#-$80,d0
00017D4A 3238 F700                  		move.w	($FFFFF700).w,d1
00017D4E 0441 0080                  		subi.w	#$80,d1
00017D52 0241 FF80                  		andi.w	#-$80,d1
00017D56 9041                       		sub.w	d1,d0
00017D58 0C40 0280                  		cmpi.w	#$280,d0
00017D5C 6200                       		bhi.s	Obj7D_Delete2
00017D5E 4EF9 0000 E032             		jmp	DisplaySprite
00017D64                            ; ===========================================================================
00017D64                            
00017D64                            Obj7D_Delete2:
00017D64 4EF9 0000 E06E             		jmp	DeleteObject
00017D6A                            ; ===========================================================================
00017D6A                            ; ---------------------------------------------------------------------------
00017D6A                            ; Sprite mappings - hidden points at the end of	a level
00017D6A                            ; ---------------------------------------------------------------------------
00017D6A                            Map_obj7D:
00017D6A                            	include "_maps\obj7D.asm"
00017D6A                            ; ---------------------------------------------------------------------------
00017D6A                            ; Sprite mappings - hidden points at the end of	a level
00017D6A                            ; ---------------------------------------------------------------------------
00017D6A 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017D6E 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017D72 00                         byte_17250:	dc.b 0
00017D73 01                         byte_17251:	dc.b 1
00017D74 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017D79 01                         byte_17257:	dc.b 1
00017D7A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017D7F 01                         byte_1725D:	dc.b 1
00017D80 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017D86 00                         		even
00017D86 00                         		even
00017D86                            
00017D86                            ; ===========================================================================
00017D86                            ; ---------------------------------------------------------------------------
00017D86                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017D86                            ; ---------------------------------------------------------------------------
00017D86                            
00017D86                            Obj8A:					; XREF: Obj_Index
00017D86 7000                       		moveq	#0,d0
00017D88 1028 0024                  		move.b	$24(a0),d0
00017D8C 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017D90 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017D94                            ; ===========================================================================
00017D94 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017D96 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017D98                            ; ===========================================================================
00017D98                            
00017D98                            Obj8A_Main:				; XREF: Obj8A_Index
00017D98 5428 0024                  		addq.b	#2,$24(a0)
00017D9C 317C 0120 0008             		move.w	#$120,8(a0)
00017DA2 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017DA8 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017DB0 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017DB6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017DBA 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017DBE 117C 0000 0001             		move.b	#0,1(a0)
00017DC4 117C 0000 0018             		move.b	#0,$18(a0)
00017DCA 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017DD0 6600                       		bne.s	Obj8A_Display	; if not, branch
00017DD2 317C 00A6 0002             		move.w	#$A6,2(a0)
00017DD8 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017DDE 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017DE2 6700                       		beq.s	Obj8A_Display	; if not, branch
00017DE4 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017DEA 6600                       		bne.s	Obj8A_Display	; if not, branch
00017DEC 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017DF2 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017DF8 4EF9 0000 E06E             		jmp	DeleteObject
00017DFE                            ; ===========================================================================
00017DFE                            
00017DFE                            Obj8A_Display:				; XREF: Obj8A_Index
00017DFE 4EF9 0000 E032             		jmp	DisplaySprite
00017E04                            ; ===========================================================================
00017E04                            ; ---------------------------------------------------------------------------
00017E04                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017E04                            ; ---------------------------------------------------------------------------
00017E04                            Map_obj8A:
00017E04                            	include "_maps\obj8A.asm"
00017E04                            Map_ca8f:
00017E04 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00017E06 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
00017E08 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
00017E0A 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
00017E0C 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00017E0E 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00017E10 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00017E12 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00017E14 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00017E16 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
00017E18 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
00017E1A 08                         Map_ca8f_16: 	dc.b $8
00017E1B CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00017E20 E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
00017E25 F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
00017E2A 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00017E2F B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
00017E34 B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
00017E39 B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00017E3E B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00017E43 10                         Map_ca8f_3F: 	dc.b $10
00017E44 D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017E49 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017E4E D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017E53 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017E58 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017E5D D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017E62 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017E67 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017E6C 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017E71 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017E76 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017E7B 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017E80 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017E85 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017E8A 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017E8F 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017E94 0A                         Map_ca8f_90: 	dc.b $A
00017E95 D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017E9A D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017E9F D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017EA4 D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017EA9 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017EAE D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017EB3 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017EB8 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017EBD 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017EC2 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017EC7 18                         Map_ca8f_C3: 	dc.b $18
00017EC8 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017ECD D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017ED2 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017ED7 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017EDC D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017EE1 D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017EE6 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017EEB D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017EF0 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017EF5 D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017EFA D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017EFF D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017F04 D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017F09 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017F0E D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017F13 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017F18 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017F1D 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017F22 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017F27 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017F2C 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017F31 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017F36 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017F3B 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017F40 14                         Map_ca8f_13C: 	dc.b $14
00017F41 D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017F46 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017F4B D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017F50 D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017F55 D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017F5A D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017F5F 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017F64 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017F69 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017F6E 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017F73 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017F78 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017F7D 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017F82 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017F87 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017F8C 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017F91 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017F96 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017F9B 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017FA0 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017FA5 1A                         Map_ca8f_1A1: 	dc.b $1A
00017FA6 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017FAB D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017FB0 D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017FB5 D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017FBA D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017FBF D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017FC4 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017FC9 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017FCE D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017FD3 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017FD8 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017FDD D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017FE2 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017FE7 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017FEC 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017FF1 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017FF6 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017FFB 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00018000 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00018005 0805 0004 08               	dc.b $8, $5, $0, $4, $8
0001800A 0805 0058 18               	dc.b $8, $5, $0, $58, $18
0001800F 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00018014 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00018019 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
0001801E 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00018023 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00018028 17                         Map_ca8f_224: 	dc.b $17
00018029 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
0001802E D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00018033 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00018038 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
0001803D D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00018042 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00018047 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
0001804C D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00018051 D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00018056 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
0001805B D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00018060 D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00018065 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
0001806A 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
0001806F 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00018074 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00018079 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
0001807E 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00018083 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00018088 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
0001808D 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00018092 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00018097 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
0001809C 1F                         Map_ca8f_298: 	dc.b $1F
0001809D D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
000180A2 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
000180A7 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
000180AC D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
000180B1 D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
000180B6 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
000180BB D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
000180C0 D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
000180C5 D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
000180CA D805 0004 18               	dc.b $D8, $5, $0, $4, $18
000180CF D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
000180D4 D805 0058 38               	dc.b $D8, $5, $0, $58, $38
000180D9 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
000180DE 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
000180E3 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
000180E8 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
000180ED 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
000180F2 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
000180F7 0009 0008 00               	dc.b $0, $9, $0, $8, $0
000180FC 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00018101 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00018106 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
0001810B 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00018110 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00018115 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
0001811A 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
0001811F 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00018124 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00018129 2005 0004 08               	dc.b $20, $5, $0, $4, $8
0001812E 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00018133 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00018138 0F                         Map_ca8f_334: 	dc.b $F
00018139 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
0001813E F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00018143 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00018148 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0001814D F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00018152 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00018157 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
0001815C F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00018161 F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00018166 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
0001816B F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00018170 F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00018175 F805 000E 50               	dc.b $F8, $5, $0, $E, $50
0001817A F805 0000 60               	dc.b $F8, $5, $0, $0, $60
0001817F F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00018184 08                         Map_ca8f_380: 	dc.b $8
00018185 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
0001818A 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
0001818F 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00018194 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00018199 3005 0000 08               	dc.b $30, $5, $0, $0, $8
0001819E 3005 0004 18               	dc.b $30, $5, $0, $4, $18
000181A3 3001 0046 28               	dc.b $30, $1, $0, $46, $28
000181A8 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
000181AD 20                         Map_ca8f_3A9: 	dc.b $20
000181AE ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
000181B3 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
000181B8 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
000181BD ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
000181C2 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
000181C7 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
000181CC ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
000181D1 FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
000181D6 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
000181DB FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
000181E0 FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
000181E5 FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
000181EA FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
000181EF 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
000181F4 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
000181F9 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
000181FE 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00018203 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00018208 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
0001820D 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00018212 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00018217 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
0001821C 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00018221 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
00018226 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
0001822B 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00018230 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
00018235 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
0001823A 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
0001823F 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00018244 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00018249 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
0001824E                            	even
0001824E                            	even
0001824E                            
0001824E                            ; ===========================================================================
0001824E                            ; ---------------------------------------------------------------------------
0001824E                            ; Object 3D - matthew boss - modified by GK89
0001824E                            ; ---------------------------------------------------------------------------
0001824E                            
0001824E                            Obj3D:					; XREF: Obj_Index
0001824E 7000                       		moveq	#0,d0
00018250 1028 0024                  		move.b	$24(a0),d0
00018254 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00018258 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0001825C                            ; ===========================================================================
0001825C 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
0001825E 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00018260 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018262 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00018264                            
00018264 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00018266 0401                       		dc.b 4,	1
00018268 0607                       		dc.b 6,	7
0001826A                            ; ===========================================================================
0001826A                            
0001826A                            Obj3D_Main:				; XREF: Obj3D_Index
0001826A 45F9 0001 8264             		lea	(Obj3D_ObjData).l,a2
00018270 2248                       		movea.l	a0,a1
00018272 7202                       		moveq	#2,d1
00018274 6000                       		bra.s	Obj3D_LoadBoss
00018276                            ; ===========================================================================
00018276                            
00018276                            Obj3D_Loop:
00018276 4EB9 0000 E4CE             		jsr	SingleObjLoad2
0001827C 6600                       		bne.s	loc_17772
0001827E                            
0001827E                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
0001827E 135A 0024                  		move.b	(a2)+,$24(a1)
00018282 12BC 003D                  		move.b	#$3D,0(a1)
00018286 3368 0008 0008             		move.w	8(a0),8(a1)
0001828C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018292 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
0001829A 337C 0400 0002             		move.w	#$400,2(a1)
000182A0 137C 0004 0001             		move.b	#4,1(a1)
000182A6 137C 0020 0019             		move.b	#$20,$19(a1)
000182AC 137C 0003 0018             		move.b	#3,$18(a1)
000182B2 135A 001C                  		move.b	(a2)+,$1C(a1)
000182B6 2348 0034                  		move.l	a0,$34(a1)
000182BA 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
000182BE                            
000182BE                            loc_17772:
000182BE 3168 0008 0030             		move.w	8(a0),$30(a0)
000182C4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000182CA 117C 000F 0020             		move.b	#$F,$20(a0)
000182D0 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
000182D6                            
000182D6                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000182D6 7000                       		moveq	#0,d0
000182D8 1028 0025                  		move.b	$25(a0),d0
000182DC 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000182E0 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000182E4 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000182EA 4EB9 0000 B090             		jsr	AnimateSprite
000182F0 1028 0022                  		move.b	$22(a0),d0
000182F4 0200 0003                  		andi.b	#3,d0
000182F8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000182FE 8128 0001                  		or.b	d0,1(a0)
00018302 4EF9 0000 E032             		jmp	DisplaySprite
00018308                            ; ===========================================================================
00018308 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
0001830A 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
0001830C 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
0001830E 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00018310 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00018312 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00018314 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00018316                            ; ===========================================================================
00018316                            
00018316                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00018316 4EB9 0000 0000             		jsr    Obj3D_ShipMove
0001831C 6100 0000                  		bsr.w	BossMove
00018320 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00018326 6600                       		bne.s	loc_177E6
00018328 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001832E 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018332                            
00018332                            loc_177E6:
00018332 1028 003F                  		move.b	$3F(a0),d0
00018336 4EB9 0000 2D6C             		jsr	(CalcSine).l
0001833C EC40                       		asr.w	#6,d0
0001833E D068 0038                  		add.w	$38(a0),d0
00018342 3140 000C                  		move.w	d0,$C(a0)
00018346 3168 0030 0008             		move.w	$30(a0),8(a0)
0001834C 5428 003F                  		addq.b	#2,$3F(a0)
00018350 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018356 6400                       		bcc.s	locret_1784A
00018358 4A28 0022                  		tst.b	$22(a0)
0001835C 6B00                       		bmi.s	loc_1784C
0001835E 4A28 0020                  		tst.b	$20(a0)
00018362 6600                       		bne.s	locret_1784A
00018364 4A28 003E                  		tst.b	$3E(a0)
00018368 6600                       		bne.s	Obj3D_ShipFlash
0001836A 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00018370 303C 00AC                  		move.w	#$AC,d0
00018374 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001837A                            
0001837A                            Obj3D_ShipFlash:
0001837A 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001837E 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018380 4A51                       		tst.w	(a1)
00018382 6600                       		bne.s	loc_1783C
00018384 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018388                            
00018388                            loc_1783C:
00018388 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001838A 5328 003E                  		subq.b	#1,$3E(a0)
0001838E 6600                       		bne.s	locret_1784A
00018390 117C 000F 0020             		move.b	#$F,$20(a0)
00018396                            
00018396                            locret_1784A:
00018396 4E75                       		rts	
00018398                            ; ===========================================================================
00018398                            
00018398                            loc_1784C:				; XREF: loc_177E6
00018398 7064                       		moveq	#100,d0
0001839A 6100 0000                  		bsr.w	AddPoints
0001839E 117C 0008 0025             		move.b	#8,$25(a0)
000183A4 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000183AA 4E75                       		rts	
000183AC                            
000183AC                            ; ---------------------------------------------------------------------------
000183AC                            ; Defeated boss	subroutine
000183AC                            ; ---------------------------------------------------------------------------
000183AC                            
000183AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000183AC                            
000183AC                            
000183AC                            BossDefeated:
000183AC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000183B0 0200 0007                  		andi.b	#7,d0
000183B4 6600                       		bne.s	locret_178A2
000183B6 4EB9 0000 E4B8             		jsr	SingleObjLoad
000183BC 6600                       		bne.s	locret_178A2
000183BE 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000183C2 3368 0008 0008             		move.w	8(a0),8(a1)
000183C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000183CE 4EB9 0000 2D46             		jsr	(RandomNumber).l
000183D4 3200                       		move.w	d0,d1
000183D6 7200                       		moveq	#0,d1
000183D8 1200                       		move.b	d0,d1
000183DA E409                       		lsr.b	#2,d1
000183DC 0441 0020                  		subi.w	#$20,d1
000183E0 D369 0008                  		add.w	d1,8(a1)
000183E4 E048                       		lsr.w	#8,d0
000183E6 E608                       		lsr.b	#3,d0
000183E8 D169 000C                  		add.w	d0,$C(a1)
000183EC                            
000183EC                            locret_178A2:
000183EC 4E75                       		rts	
000183EE                            ; End of function BossDefeated
000183EE                            
000183EE                            ; ---------------------------------------------------------------------------
000183EE                            ; Subroutine to	move a boss
000183EE                            ; ---------------------------------------------------------------------------
000183EE                            
000183EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000183EE                            
000183EE                            
000183EE                            BossMove:
000183EE 2428 0030                  		move.l	$30(a0),d2
000183F2 2628 0038                  		move.l	$38(a0),d3
000183F6 3028 0010                  		move.w	$10(a0),d0
000183FA 48C0                       		ext.l	d0
000183FC E180                       		asl.l	#8,d0
000183FE D480                       		add.l	d0,d2
00018400 3028 0012                  		move.w	$12(a0),d0
00018404 48C0                       		ext.l	d0
00018406 E180                       		asl.l	#8,d0
00018408 D680                       		add.l	d0,d3
0001840A 2142 0030                  		move.l	d2,$30(a0)
0001840E 2143 0038                  		move.l	d3,$38(a0)
00018412 4E75                       		rts	
00018414                            ; End of function BossMove
00018414                            
00018414                            ; ===========================================================================
00018414                            
00018414                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
00018414 6100 FFD8                  		bsr.w	BossMove
00018418 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001841E 6600                       		bne.s	loc_17916
00018420 317C 0000 0010             		move.w	#0,$10(a0)
00018426 317C 0000 0012             		move.w	#0,$12(a0)
0001842C 5428 0025                  		addq.b	#2,$25(a0)
00018430 4EB9 0000 E4CE             		jsr	SingleObjLoad2
00018436 6600                       		bne.s	loc_17910
00018438 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
0001843C 3368 0030 0008             		move.w	$30(a0),8(a1)
00018442 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018448 2348 0034                  		move.l	a0,$34(a1)
0001844C                            
0001844C                            loc_17910:
0001844C 317C 0077 003C             		move.w	#$77,$3C(a0)
00018452                            
00018452                            loc_17916:
00018452 6000 FEDE                  		bra.w	loc_177E6
00018456                            ; ===========================================================================
00018456                            
00018456                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018456 5368 003C                  		subq.w	#1,$3C(a0)
0001845A 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
00018460 5428 0025                  		addq.b	#2,$25(a0)
00018464 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001846A 3038 D008                  		move.w	($FFFFD008).w,d0	 
0001846E 9068 0008                  		sub.w	8(a0),d0		 
00018472 6A00                       		bpl.s	Obj3D_left			 
00018474 08A8 0000 0022             		bclr	#0,$22(a0)		 
0001847A 6000                       		bra.s	Obj3D_right		 
0001847C 08A8 0005 0022             		bclr	#5,$22(a0)
00018482 4EB9 0000 0000              		jsr     loc_17950
00018488 4E75                       		rts
0001848A                            ; ===========================================================================
0001848A                            
0001848A                            Obj3D_right:
0001848A 317C FF00 0010             		move.w	#-$100,$10(a0)	
00018490 4E75                       		Rts
00018492                            
00018492                            Obj3D_left:
00018492 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018498 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
0001849E 6600                       		bne.s	RTSboss  	; if not, branch
000184A0 0868 0000 0022              		bchg	#0,$22(a0)
000184A6                            
000184A6                            RTSboss:	    
000184A6 4E75                       		rts
000184A8                             ; ===========================================================================
000184A8                            
000184A8                            Obj3D_UpStuff:
000184A8 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
000184AC 9068 000C                  		sub.w	$C(a0),d0		 
000184B0 6A00                       		bpl.s	Obj3D_down			 
000184B2 6000                        		bra.s	Obj3D_up		 
000184B4 08A8 0005 0022             		bclr	#5,$22(a0)
000184BA                             
000184BA                            Obj3D_up:		
000184BA 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
000184C0 4E75                        	    rts
000184C2                            
000184C2                            Obj3D_down:
000184C2 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
000184C8                            
000184C8                            loc_17950:
000184C8 6000 FE68                  		bra.w	loc_177E6
000184CC                            ; ===========================================================================
000184CC                            
000184CC                            loc_17954:				; XREF: Obj3D_ShipIndex
000184CC 5368 003C                  		subq.w	#1,$3C(a0)
000184D0 6B00                       		bmi.s	loc_17960
000184D2 6100 FF1A                  		bsr.w	BossMove
000184D6 6000                       		bra.s	loc_17976
000184D8                            ; ===========================================================================
000184D8                            
000184D8                            loc_17960:
000184D8 0868 0000 0022             		bchg	#0,$22(a0)
000184DE 317C 003F 003C             		move.w	#$3F,$3C(a0)
000184E4 5528 0025                  		subq.b	#2,$25(a0)
000184E8 317C 0000 0010             		move.w	#0,$10(a0)
000184EE                            
000184EE                            loc_17976:
000184EE 6000 FE42                  		bra.w	loc_177E6
000184F2                            ; ===========================================================================
000184F2                            
000184F2                            loc_1797A:				; XREF: Obj3D_ShipIndex
000184F2 5368 003C                  		subq.w	#1,$3C(a0)
000184F6 6B00                       		bmi.s	loc_17984
000184F8 6000 FEB2                  		bra.w	BossDefeated
000184FC                            ; ===========================================================================
000184FC                            
000184FC                            loc_17984:
000184FC 08E8 0000 0022             		bset	#0,$22(a0)
00018502 08A8 0007 0022             		bclr	#7,$22(a0)
00018508 4268 0010                  		clr.w	$10(a0)
0001850C 5428 0025                  		addq.b	#2,$25(a0)
00018510 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018516 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001851A 6600                       		bne.s	locret_179AA
0001851C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018522 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00018528 6000 FE82                  		bra.w	BossDefeated
0001852C                            
0001852C                            locret_179AA:
0001852C 4E75                       		rts	
0001852E                            ; ===========================================================================
0001852E                            
0001852E                            loc_179AC:				; XREF: Obj3D_ShipIndex
0001852E 4EB9 0000 DF9A             		jsr ObjectFall		
00018534 5268 003C                  		addq.w	#1,$3C(a0)
00018538 6700                       		beq.s	loc_179BC
0001853A 6A00                       		bpl.s	loc_179C2
0001853C 6000                       		bra.s	loc_179EE
0001853E                            ; ===========================================================================
0001853E                            
0001853E                            loc_179BC:
0001853E 4268 0012                  		clr.w	$12(a0)
00018542 6000                       		bra.s	loc_179EE
00018544                            ; ===========================================================================
00018544                            
00018544                            loc_179C2:
00018544 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001854A 6500                       		bcs.s	loc_179DA
0001854C 6700                       		beq.s	loc_179E0
0001854E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018554 6500                       		bcs.s	loc_179EE
00018556 5428 0025                  		addq.b	#2,$25(a0)
0001855A 6000                       		bra.s	loc_179EE
0001855C                            ; ===========================================================================
0001855C                            
0001855C                            loc_179DA:
0001855C 5168 0012                  		subq.w	#8,$12(a0)
00018560 6000                       		bra.s	loc_179EE
00018562 6000 FE48                  		bra.w	BossDefeated
00018566                            ; ===========================================================================
00018566                            
00018566                            loc_179E0:
00018566 4268 0012                  		clr.w	$12(a0)
0001856A 303C 0081                  		move.w	#$81,d0
0001856E 4EB9 0000 15CC             		jsr	(PlaySound).l	; play GHZ music
00018574                            
00018574                            loc_179EE:
00018574 6100 FE78                  		bsr.w	BossMove
00018578 6000 FDB8                  		bra.w	loc_177E6
0001857C                            ; ===========================================================================
0001857C                            
0001857C                            loc_179F6:				; XREF: Obj3D_ShipIndex
0001857C 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018582 6700                       		beq.s	loc_17A10
00018584 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018588 6000                       		bra.s	loc_17A16
0001858A                            ; ===========================================================================
0001858A                            
0001858A                            loc_17A10:
0001858A 4A28 0001                  		tst.b	1(a0)
0001858E 6A00                       		bpl.s	Obj3D_ShipDel
00018590                            
00018590                            loc_17A16:
00018590 6100 FE5C                  		bsr.w	BossMove
00018594 6000 FD9C                  		bra.w	loc_177E6
00018598                            ; ===========================================================================
00018598                            
00018598                            Obj3D_ShipDel:
00018598 4EF9 0000 E06E             		jmp	DeleteObject
0001859E                            ; ===========================================================================
0001859E                            
0001859E                            Obj3D_FaceMain:				; XREF: Obj3D_Index
0001859E 7000                       		moveq	#0,d0
000185A0 7201                       		moveq	#1,d1
000185A2 2268 0034                  		movea.l	$34(a0),a1
000185A6 1029 0025                  		move.b	$25(a1),d0
000185AA 5900                       		subq.b	#4,d0
000185AC 6600                       		bne.s	loc_17A3E
000185AE 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
000185B4 6600                       		bne.s	loc_17A46
000185B6 7204                       		moveq	#4,d1
000185B8                            
000185B8                            loc_17A3E:
000185B8 5D00                       		subq.b	#6,d0
000185BA 6B00                       		bmi.s	loc_17A46
000185BC 720A                       		moveq	#$A,d1
000185BE 6000                       		bra.s	loc_17A5A
000185C0                            ; ===========================================================================
000185C0                            
000185C0                            loc_17A46:
000185C0 4A29 0020                  		tst.b	$20(a1)
000185C4 6600                       		bne.s	loc_17A50
000185C6 7205                       		moveq	#5,d1
000185C8 6000                       		bra.s	loc_17A5A
000185CA                            ; ===========================================================================
000185CA                            
000185CA                            loc_17A50:
000185CA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000185D0 6500                       		bcs.s	loc_17A5A
000185D2 7204                       		moveq	#4,d1
000185D4                            
000185D4                            loc_17A5A:
000185D4 1141 001C                  		move.b	d1,$1C(a0)
000185D8 5500                       		subq.b	#2,d0
000185DA 6600                       		bne.s	Obj3D_FaceDisp
000185DC 117C 0006 001C             		move.b	#6,$1C(a0)
000185E2 4A28 0001                  		tst.b	1(a0)
000185E6 6A00                       		bpl.s	Obj3D_FaceDel
000185E8                            
000185E8                            Obj3D_FaceDisp:
000185E8 6000                       		bra.s	Obj3D_Display
000185EA                            ; ===========================================================================
000185EA                            
000185EA                            Obj3D_FaceDel:
000185EA 4EF9 0000 E06E             		jmp	DeleteObject
000185F0                            ; ===========================================================================
000185F0                            
000185F0                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000185F0 117C 0007 001C             		move.b	#7,$1C(a0)
000185F6 2268 0034                  		movea.l	$34(a0),a1
000185FA 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00018600 6600                       		bne.s	loc_17A96
00018602 117C 000B 001C             		move.b	#$B,$1C(a0)
00018608 4A28 0001                  		tst.b	1(a0)
0001860C 6A00                       		bpl.s	Obj3D_FlameDel
0001860E 6000                       		bra.s	Obj3D_FlameDisp
00018610                            ; ===========================================================================
00018610                            
00018610                            loc_17A96:
00018610 3029 0010                  		move.w	$10(a1),d0
00018614 6700                       		beq.s	Obj3D_FlameDisp
00018616 117C 0008 001C             		move.b	#8,$1C(a0)
0001861C                            
0001861C                            Obj3D_FlameDisp:
0001861C 6000                       		bra.s	Obj3D_Display
0001861E                            ; ===========================================================================
0001861E                            
0001861E                            Obj3D_FlameDel:
0001861E 4EF9 0000 E06E             		jmp	DeleteObject
00018624                            ; ===========================================================================
00018624                            
00018624                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00018624 2268 0034                  		movea.l	$34(a0),a1
00018628 3169 0008 0008             		move.w	8(a1),8(a0)
0001862E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018634 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001863A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018640 4EB9 0000 B090             		jsr	AnimateSprite
00018646 1028 0022                  		move.b	$22(a0),d0
0001864A 0200 0003                  		andi.b	#3,d0
0001864E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018654 8128 0001                  		or.b	d0,1(a0)
00018658 4EF9 0000 E032             		jmp	DisplaySprite
0001865E                            ; ===========================================================================
0001865E                            ; ---------------------------------------------------------------------------
0001865E                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001865E                            ; ---------------------------------------------------------------------------
0001865E                            
0001865E                            Obj48:					; XREF: Obj_Index
0001865E 7000                       		moveq	#0,d0
00018660 1028 0024                  		move.b	$24(a0),d0
00018664 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018668 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001866C                            ; ===========================================================================
0001866C 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
0001866E 0000                       		dc.w Obj48_Base-Obj48_Index
00018670 0000                       		dc.w Obj48_Display2-Obj48_Index
00018672 0000                       		dc.w loc_17C68-Obj48_Index
00018674 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018676                            ; ===========================================================================
00018676                            
00018676                            Obj48_Main:				; XREF: Obj48_Index
00018676 5428 0024                  		addq.b	#2,$24(a0)
0001867A 317C 4080 0026             		move.w	#$4080,$26(a0)
00018680 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018686 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0001868E 317C 046C 0002             		move.w	#$46C,2(a0)
00018694 45E8 0028                  		lea	$28(a0),a2
00018698 14FC 0000                  		move.b	#0,(a2)+
0001869C 7205                       		moveq	#5,d1
0001869E 2248                       		movea.l	a0,a1
000186A0 6000                       		bra.s	loc_17B60
000186A2                            ; ===========================================================================
000186A2                            
000186A2                            Obj48_MakeLinks:
000186A2 4EB9 0000 E4CE             		jsr	SingleObjLoad2
000186A8 6600                       		bne.s	Obj48_MakeBall
000186AA 3368 0008 0008             		move.w	8(a0),8(a1)
000186B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000186B6 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
000186BA 137C 0006 0024             		move.b	#6,$24(a1)
000186C0 237C 0000 8444 0004        		move.l	#Map_obj15,4(a1)
000186C8 337C 0380 0002             		move.w	#$380,2(a1)
000186CE 137C 0001 001A             		move.b	#1,$1A(a1)
000186D4 5228 0028                  		addq.b	#1,$28(a0)
000186D8                            
000186D8                            loc_17B60:				; XREF: Obj48_Main
000186D8 3A09                       		move.w	a1,d5
000186DA 0445 D000                  		subi.w	#$D000,d5
000186DE EC4D                       		lsr.w	#6,d5
000186E0 0245 007F                  		andi.w	#$7F,d5
000186E4 14C5                       		move.b	d5,(a2)+
000186E6 137C 0004 0001             		move.b	#4,1(a1)
000186EC 137C 0008 0019             		move.b	#8,$19(a1)
000186F2 137C 0006 0018             		move.b	#6,$18(a1)
000186F8 2368 0034 0034             		move.l	$34(a0),$34(a1)
000186FE 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00018702                            
00018702                            Obj48_MakeBall:
00018702 137C 0008 0024             		move.b	#8,$24(a1)
00018708 237C 0000 8A34 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00018710 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00018716 137C 0001 001A             		move.b	#1,$1A(a1)
0001871C 137C 0005 0018             		move.b	#5,$18(a1)
00018722 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00018728 4E75                       		rts	
0001872A                            ; ===========================================================================
0001872A                            
0001872A 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00018730                            
00018730                            ; ===========================================================================
00018730                            
00018730                            Obj48_Base:				; XREF: Obj48_Index
00018730 47F9 0001 872A             		lea	(Obj48_PosData).l,a3
00018736 45E8 0028                  		lea	$28(a0),a2
0001873A 7C00                       		moveq	#0,d6
0001873C 1C1A                       		move.b	(a2)+,d6
0001873E                            
0001873E                            loc_17BC6:
0001873E 7800                       		moveq	#0,d4
00018740 181A                       		move.b	(a2)+,d4
00018742 ED4C                       		lsl.w	#6,d4
00018744 0684 00FF D000             		addi.l	#$FFD000,d4
0001874A 2244                       		movea.l	d4,a1
0001874C 101B                       		move.b	(a3)+,d0
0001874E B029 003C                  		cmp.b	$3C(a1),d0
00018752 6700                       		beq.s	loc_17BE0
00018754 5229 003C                  		addq.b	#1,$3C(a1)
00018758                            
00018758                            loc_17BE0:
00018758 51CE FFE4                  		dbf	d6,loc_17BC6
0001875C                            
0001875C B029 003C                  		cmp.b	$3C(a1),d0
00018760 6600                       		bne.s	loc_17BFA
00018762 2268 0034                  		movea.l	$34(a0),a1
00018766 0C29 0006 0025             		cmpi.b	#6,$25(a1)
0001876C 6600                       		bne.s	loc_17BFA
0001876E 5428 0024                  		addq.b	#2,$24(a0)
00018772                            
00018772                            loc_17BFA:
00018772 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018778 6700                       		beq.s	Obj48_Display
0001877A 5268 0032                  		addq.w	#1,$32(a0)
0001877E                            
0001877E                            Obj48_Display:
0001877E 6100 0000                  		bsr.w	sub_17C2A
00018782 1028 0026                  		move.b	$26(a0),d0
00018786 4EB9 0000 83B6             		jsr	(Obj15_Move2).l
0001878C 4EF9 0000 E032             		jmp	DisplaySprite
00018792                            ; ===========================================================================
00018792                            
00018792                            Obj48_Display2:				; XREF: Obj48_Index
00018792 6100 0000                  		bsr.w	sub_17C2A
00018796 4EB9 0000 8376             		jsr	(Obj48_Move).l
0001879C 4EF9 0000 E032             		jmp	DisplaySprite
000187A2                            
000187A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000187A2                            
000187A2                            
000187A2                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
000187A2 2268 0034                  		movea.l	$34(a0),a1
000187A6 0628 0020 001B             		addi.b	#$20,$1B(a0)
000187AC 6400                       		bcc.s	loc_17C3C
000187AE 0868 0000 001A             		bchg	#0,$1A(a0)
000187B4                            
000187B4                            loc_17C3C:
000187B4 3169 0008 003A             		move.w	8(a1),$3A(a0)
000187BA 3029 000C                  		move.w	$C(a1),d0
000187BE D068 0032                  		add.w	$32(a0),d0
000187C2 3140 0038                  		move.w	d0,$38(a0)
000187C6 1169 0022 0022             		move.b	$22(a1),$22(a0)
000187CC 4A29 0022                  		tst.b	$22(a1)
000187D0 6A00                       		bpl.s	locret_17C66
000187D2 10BC 003F                  		move.b	#$3F,0(a0)
000187D6 117C 0000 0024             		move.b	#0,$24(a0)
000187DC                            
000187DC                            locret_17C66:
000187DC 4E75                       		rts	
000187DE                            ; End of function sub_17C2A
000187DE                            
000187DE                            ; ===========================================================================
000187DE                            
000187DE                            loc_17C68:				; XREF: Obj48_Index
000187DE 2268 0034                  		movea.l	$34(a0),a1
000187E2 4A29 0022                  		tst.b	$22(a1)
000187E6 6A00                       		bpl.s	Obj48_Display3
000187E8 10BC 003F                  		move.b	#$3F,0(a0)
000187EC 117C 0000 0024             		move.b	#0,$24(a0)
000187F2                            
000187F2                            Obj48_Display3:
000187F2 4EF9 0000 E032             		jmp	DisplaySprite
000187F8                            ; ===========================================================================
000187F8                            
000187F8                            Obj48_ChkVanish:			; XREF: Obj48_Index
000187F8 7000                       		moveq	#0,d0
000187FA 4A28 001A                  		tst.b	$1A(a0)
000187FE 6600                       		bne.s	Obj48_Vanish
00018800 5200                       		addq.b	#1,d0
00018802                            
00018802                            Obj48_Vanish:
00018802 1140 001A                  		move.b	d0,$1A(a0)
00018806 2268 0034                  		movea.l	$34(a0),a1
0001880A 4A29 0022                  		tst.b	$22(a1)
0001880E 6A00                       		bpl.s	Obj48_Display4
00018810 117C 0000 0020             		move.b	#0,$20(a0)
00018816 6100 FB94                  		bsr.w	BossDefeated
0001881A 5328 003C                  		subq.b	#1,$3C(a0)
0001881E 6A00                       		bpl.s	Obj48_Display4
00018820 10BC 003F                  		move.b	#$3F,(a0)
00018824 117C 0000 0024             		move.b	#0,$24(a0)
0001882A                            
0001882A                            Obj48_Display4:
0001882A 4EF9 0000 E032             		jmp	DisplaySprite
00018830                            ; ===========================================================================
00018830                            Ani_Eggman:
00018830                            	include "_anim\Eggman.asm"
00018830                            ; ---------------------------------------------------------------------------
00018830                            ; Animation script - Eggman (bosses)
00018830                            ; ---------------------------------------------------------------------------
00018830 0000                       		dc.w byte_17CD4-Ani_Eggman
00018832 0000                       		dc.w byte_17CD8-Ani_Eggman
00018834 0000                       		dc.w byte_17CDC-Ani_Eggman
00018836 0000                       		dc.w byte_17CE0-Ani_Eggman
00018838 0000                       		dc.w byte_17CE4-Ani_Eggman
0001883A 0000                       		dc.w byte_17CE8-Ani_Eggman
0001883C 0000                       		dc.w byte_17CEC-Ani_Eggman
0001883E 0000                       		dc.w byte_17CF0-Ani_Eggman
00018840 0000                       		dc.w byte_17CF4-Ani_Eggman
00018842 0000                       		dc.w byte_17CF8-Ani_Eggman
00018844 0000                       		dc.w byte_17CFC-Ani_Eggman
00018846 0000                       		dc.w byte_17D00-Ani_Eggman
00018848 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
0001884C 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00018850 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018854 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018858 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
0001885C 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00018860 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018864 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018868 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001886C 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00018870 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00018874 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018880                            		even
00018880                            		even
00018880                            Ani_TetoB:
00018880                            	include "_anim\TetoB.asm"
00018880                            ; ---------------------------------------------------------------------------
00018880                            ; Animation script - Eggman (bosses)
00018880                            ; ---------------------------------------------------------------------------
00018880 0000                       		dc.w spin-Ani_TetoB
00018882 0000                       		dc.w static-Ani_TetoB
00018884 0000                       		dc.w static2-Ani_TetoB
00018886 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
0001888D 0500 FF                    static:	dc.b 5,	0, $FF
00018890 0501 FF                    static2:	dc.b 5,	1, $FF
00018894 00                         		even
00018894 00                         		even
00018894                            ; ---------------------------------------------------------------------------
00018894                            ; Sprite mappings - Eggman (boss levels)
00018894                            ; ---------------------------------------------------------------------------
00018894                            Map_Eggman:
00018894                            	include "_maps\Eggman.asm"
00018894                            Map_dc7e:
00018894 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00018896 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00018898 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
0001889A 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
0001889C 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
0001889E 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
000188A0 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
000188A2 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
000188A4 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
000188A6 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
000188A8 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
000188AA 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
000188AC 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
000188AE 06                         Map_dc7e_1A: 	dc.b $6
000188AF EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
000188B4 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
000188B9 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
000188BE FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
000188C3 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
000188C8 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
000188CD 02                         Map_dc7e_39: 	dc.b $2
000188CE E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000188D3 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
000188D8 02                         Map_dc7e_44: 	dc.b $2
000188D9 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000188DE EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000188E3 03                         Map_dc7e_4F: 	dc.b $3
000188E4 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
000188E9 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
000188EE EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
000188F3 03                         Map_dc7e_5F: 	dc.b $3
000188F4 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
000188F9 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
000188FE EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00018903 03                         Map_dc7e_6F: 	dc.b $3
00018904 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018909 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
0001890E EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018913 03                         Map_dc7e_7F: 	dc.b $3
00018914 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00018919 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001891E EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018923 04                         Map_dc7e_8F: 	dc.b $4
00018924 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00018929 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
0001892E EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018933 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018938 01                         Map_dc7e_A4: 	dc.b $1
00018939 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
0001893E 01                         Map_dc7e_AA: 	dc.b $1
0001893F 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00018944 00                         Map_dc7e_B0: 	dc.b $0
00018945 02                         Map_dc7e_B1: 	dc.b $2
00018946 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
0001894B 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00018950 02                         Map_dc7e_BC: 	dc.b $2
00018951 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00018956 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
0001895C 00                         	even
0001895C 00                         	even
0001895C                            
0001895C                            ; ---------------------------------------------------------------------------
0001895C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001895C                            ; ---------------------------------------------------------------------------
0001895C                            Map_BossItems:
0001895C                            	include "_maps\Boss items.asm"
0001895C                            ; ---------------------------------------------------------------------------
0001895C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001895C                            ; ---------------------------------------------------------------------------
0001895C 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00018960 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00018964 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018968 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
0001896C 01                         byte_17DE4:	dc.b 1
0001896D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018972 02                         byte_17DEA:	dc.b 2
00018973 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018978 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001897D 00                         		dc.b 0
0001897E 01                         byte_17DF6:	dc.b 1
0001897F FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00018984 01                         byte_17DFC:	dc.b 1
00018985 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
0001898A 01                         byte_17E02:	dc.b 1
0001898B 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018990 04                         byte_17E08:	dc.b 4
00018991 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018996 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001899B F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000189A0 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000189A5 00                         		dc.b 0
000189A6 02                         byte_17E1E:	dc.b 2
000189A7 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000189AC 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000189B1 00                         		dc.b 0
000189B2 02                         byte_17E2A:	dc.b 2
000189B3 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000189B8 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000189BE 00                         		even
000189BE 00                         		even
000189BE                            
000189BE                            ; ===========================================================================
000189BE                            ; ---------------------------------------------------------------------------
000189BE                            ; Object 77 - Fatass teto boss fight in LZ -STDH
000189BE                            ; ---------------------------------------------------------------------------
000189BE                            
000189BE                            
000189BE                            obj77:					; XREF: Obj_Index
000189BE 7000                       		moveq	#0,d0
000189C0 1028 0024                  		move.b	$24(a0),d0
000189C4 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
000189C8 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
000189CC                            ; ===========================================================================
000189CC 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
000189CE 0000                       		dc.w obj77_ShipMain-obj77_Index
000189D0 0000                       		dc.w obj77_FaceMain-obj77_Index
000189D2 0000                       		dc.w obj77_FlameMain-obj77_Index
000189D4                            
000189D4 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
000189D6 0401                       		dc.b 4,	1
000189D8 0607                       		dc.b 6,	7
000189DA                            ; ===========================================================================
000189DA                            
000189DA                            obj77_Main:				; XREF: obj77_Index
000189DA 45F9 0001 89D4             		lea	(obj77_ObjData).l,a2
000189E0 2248                       		movea.l	a0,a1
000189E2 7202                       		moveq	#2,d1
000189E4 6000                       		bra.s	obj77_LoadBoss
000189E6                            ; ===========================================================================
000189E6                            
000189E6                            obj77_Loop:
000189E6 4EB9 0000 E4CE             		jsr	SingleObjLoad2
000189EC 6600                       		bne.s	loc2_17772
000189EE                            
000189EE                            obj77_LoadBoss:				; XREF: obj77_Main
000189EE 135A 0024                  		move.b	(a2)+,$24(a1)
000189F2 12BC 0077                  		move.b	#$77,0(a1)
000189F6 3368 0008 0008             		move.w	8(a0),8(a1)
000189FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018A02 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
00018A0A 337C 0400 0002             		move.w	#$400,2(a1)
00018A10 137C 0004 0001             		move.b	#4,1(a1)
00018A16 137C 0020 0019             		move.b	#$20,$19(a1)
00018A1C 137C 0003 0018             		move.b	#3,$18(a1)
00018A22 135A 001C                  		move.b	(a2)+,$1C(a1)
00018A26 2348 0034                  		move.l	a0,$34(a1)
00018A2A 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
00018A2E                            
00018A2E                            loc2_17772:
00018A2E 3168 0008 0030             		move.w	8(a0),$30(a0)
00018A34 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018A3A 117C 000F 0020             		move.b	#$F,$20(a0)
00018A40 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018A46                            
00018A46                            obj77_ShipMain:				; XREF: obj77_Index
00018A46 7000                       		moveq	#0,d0
00018A48 1028 0025                  		move.b	$25(a0),d0
00018A4C 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00018A50 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
00018A54 43F9 0001 8880             		lea	(Ani_TetoB).l,a1
00018A5A 4EB9 0000 B090             		jsr	AnimateSprite
00018A60 1028 0022                  		move.b	$22(a0),d0
00018A64 0200 0003                  		andi.b	#3,d0
00018A68 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018A6E 8128 0001                  		or.b	d0,1(a0)
00018A72 4EF9 0000 E032             		jmp	DisplaySprite
00018A78                            ; ===========================================================================
00018A78 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
00018A7A 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00018A7C 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00018A7E 0000                       		dc.w loc2_17954-obj77_ShipIndex
00018A80 0000                       		dc.w fatassruns-obj77_ShipIndex		
00018A82 0000                       		dc.w loc2_1797A-obj77_ShipIndex
00018A84 0000                       		dc.w loc2_179AC-obj77_ShipIndex
00018A86 0000                       		dc.w loc2_179F6-obj77_ShipIndex
00018A88                            ; ===========================================================================
00018A88                            
00018A88                            obj77_ShipStart:			; XREF: obj77_ShipIndex
00018A88                            	;	move.w	#$100,$12(a0)	; move ship down
00018A88 6100 F964                  		bsr.w	BossMove
00018A8C 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00018A92 6600                       		bne.s	loc2_177E6
00018A94 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018A9A 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018A9E                            
00018A9E                            loc2_177E6:
00018A9E                            ;		move.b	$3F(a0),d0
00018A9E                            ;		jsr	(CalcSine).l
00018A9E EC40                       		asr.w	#6,d0
00018AA0 D068 0038                  		add.w	$38(a0),d0
00018AA4 3140 000C                  		move.w	d0,$C(a0)
00018AA8 3168 0030 0008             		move.w	$30(a0),8(a0)
00018AAE 5428 003F                  		addq.b	#2,$3F(a0)
00018AB2 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
00018AB8 6400                       		bcc.s	locret_1784A2
00018ABA 4A28 0022                  		tst.b	$22(a0)
00018ABE 6B00                       		bmi.s	loc2_1784C
00018AC0 4A28 0020                  		tst.b	$20(a0)
00018AC4 6600                       		bne.s	locret_1784A2
00018AC6 4A28 003E                  		tst.b	$3E(a0)
00018ACA 6600                       		bne.s	obj77_ShipFlash
00018ACC 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00018AD2 303C 00AC                  		move.w	#$AC,d0
00018AD6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018ADC                            
00018ADC                            obj77_ShipFlash:
00018ADC 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018AE0 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018AE2 4A51                       		tst.w	(a1)
00018AE4 6600                       		bne.s	loc2_1783C
00018AE6 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018AEA                            
00018AEA                            loc2_1783C:
00018AEA 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018AEC 5328 003E                  		subq.b	#1,$3E(a0)
00018AF0 6600                       		bne.s	locret_1784A2
00018AF2 117C 000F 0020             		move.b	#$F,$20(a0)
00018AF8                            
00018AF8                            locret_1784A2:
00018AF8 4E75                       		rts	
00018AFA                            ; ===========================================================================
00018AFA                            
00018AFA                            loc2_1784C:				; XREF: loc2_177E6
00018AFA 7064                       		moveq	#100,d0
00018AFC 6100 0000                  		bsr.w	AddPoints
00018B00 117C 000A 0025             		move.b	#$A,$25(a0)
00018B06 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018B0C 4E75                       		rts	
00018B0E                            ; ===========================================================================
00018B0E                            
00018B0E                            obj77_MakeBall:				; XREF: obj77_ShipIndex
00018B0E 317C FF00 0010             		move.w	#-$100,$10(a0)
00018B14 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00018B1A 6100 F8D2                  		bsr.w	BossMove
00018B1E 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
00018B24 6600                       		bne.s	loc2_17916
00018B26 317C 0000 0010             		move.w	#0,$10(a0)
00018B2C 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00018B32 317C 0000 0012             		move.w	#0,$12(a0)
00018B38 5428 0025                  		addq.b	#2,$25(a0)
00018B3C                            
00018B3C                            loc2_17910:
00018B3C 317C 0077 003C             		move.w	#$77,$3C(a0)
00018B42                            
00018B42                            loc2_17916:
00018B42 6000 FF5A                  		bra.w	loc2_177E6
00018B46                            ; ===========================================================================
00018B46                            
00018B46                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018B46 6100 F8A6                  		bsr.w	BossMove
00018B4A 5368 003C                  		subq.w	#1,$3C(a0)
00018B4E 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00018B50 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00018B56 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
00018B5C 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00018B62 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
00018B68 6600                       		bne.s	loc2_17950 ; if not branch
00018B6A                            
00018B6A                            fatass_attack:
00018B6A 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00018B70 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
00018B76 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
00018B7C 6600                       		bne.s	loc2_17950    ; if not you know the drill
00018B7E 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018B82 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018B88                            
00018B88                            loc2_17950:
00018B88 6000 FF14                  		bra.w	loc2_177E6
00018B8C                            ; ===========================================================================
00018B8C                            
00018B8C                            loc2_17954:				; XREF: obj77_ShipIndex
00018B8C 6100 F860                  		bsr.w	BossMove
00018B90 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
00018B96                            		; i suck at programming
00018B96 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
00018B9C 6600                       		bne.s	loc2_17976    ; if not blah blah
00018B9E 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018BA4 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018BA8 303C 00B9                  		move.w	#$B9,d0
00018BAC 4EB9 0000 15CC             		jsr	(PlaySound).l	; play the earthquake sound
00018BB2                            
00018BB2                            Peartobombs:	
00018BB2 4EB9 0000 E4CE                		jsr	SingleObjLoad2
00018BB8 6600                       		bne.s	secondone
00018BBA 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00018BBE 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018BC4 337C 0670 000C             		move.w	#$670,$C(a1)
00018BCA                            secondone:		
00018BCA 4EB9 0000 E4CE                		jsr	SingleObjLoad2
00018BD0 6600                       		bne.s	loc2_17976		
00018BD2 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018BD6 337C 1D20 0008             		move.w	#$1D20,8(a1)
00018BDC 337C 0670 000C             		move.w	#$670,$C(a1)
00018BE2                            lastone:
00018BE2 4EB9 0000 E4CE                		jsr	SingleObjLoad2
00018BE8 6600                       		bne.s	loc2_17976		
00018BEA 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00018BEE 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018BF4 337C 0670 000C             		move.w	#$670,$C(a1)
00018BFA                            		
00018BFA                            loc2_17976:
00018BFA 6000 FEA2                  		bra.w	loc2_177E6
00018BFE                            		
00018BFE                            ; ===========================================================================
00018BFE                            Fatassruns:
00018BFE 6100 F7EE                   		bsr.w	BossMove
00018C02 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018C08 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
00018C0E 6600                       		bne.s	processstuff ; is not go here
00018C10 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018C16 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00018C1C 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00018C20 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018C26 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018C2C                            		
00018C2C                            		
00018C2C                            processstuff:
00018C2C 6000 FE70                  		bra.w	loc2_177E6
00018C30                            ; ===========================================================================
00018C30                            
00018C30                            loc2_1797A:				; XREF: obj77_ShipIndex
00018C30 5368 003C                  		subq.w	#1,$3C(a0)
00018C34 6B00                       		bmi.s	loc2_17984
00018C36 6000 F774                  		bra.w	BossDefeated
00018C3A                            ; ===========================================================================
00018C3A                            
00018C3A                            loc2_17984:
00018C3A 08E8 0000 0022             		bset	#0,$22(a0)
00018C40 08A8 0007 0022             		bclr	#7,$22(a0)
00018C46 4268 0010                  		clr.w	$10(a0)
00018C4A 5428 0025                  		addq.b	#2,$25(a0)
00018C4E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018C54 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018C58 6600                       		bne.s	locret_179AA2
00018C5A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018C60                            
00018C60                            locret_179AA2:
00018C60 4E75                       		rts	
00018C62                            ; ===========================================================================
00018C62                            
00018C62                            loc2_179AC:				; XREF: obj77_ShipIndex
00018C62 5268 003C                  		addq.w	#1,$3C(a0)
00018C66 6700                       		beq.s	loc2_179BC
00018C68 6A00                       		bpl.s	loc2_179C2
00018C6A 0668 0018 0012             		addi.w	#$18,$12(a0)
00018C70 6000                       		bra.s	loc2_179EE
00018C72                            ; ===========================================================================
00018C72                            
00018C72                            loc2_179BC:
00018C72 4268 0012                  		clr.w	$12(a0)
00018C76 6000                       		bra.s	loc2_179EE
00018C78                            ; ===========================================================================
00018C78                            
00018C78                            loc2_179C2:
00018C78 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018C7E 6500                       		bcs.s	loc2_179DA
00018C80 6700                       		beq.s	loc2_179E0
00018C82 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018C88 6500                       		bcs.s	loc2_179EE
00018C8A 5428 0025                  		addq.b	#2,$25(a0)
00018C8E 6000                       		bra.s	loc2_179EE
00018C90                            ; ===========================================================================
00018C90                            
00018C90                            loc2_179DA:
00018C90 5168 0012                  		subq.w	#8,$12(a0)
00018C94 6000                       		bra.s	loc2_179EE
00018C96                            ; ===========================================================================
00018C96                            
00018C96                            loc2_179E0:
00018C96 4268 0012                  		clr.w	$12(a0)
00018C9A 303C 0097                  		move.w	#$97,d0
00018C9E 4EB9 0000 15CC             		jsr	(PlaySound).l	; play lz3 music
00018CA4                            
00018CA4                            loc2_179EE:
00018CA4 6100 F748                  		bsr.w	BossMove
00018CA8 6000 FDF4                  		bra.w	loc2_177E6
00018CAC                            ; ===========================================================================
00018CAC                            
00018CAC                            loc2_179F6:				; XREF: obj77_ShipIndex
00018CAC 317C 0400 0010             		move.w	#$400,$10(a0)
00018CB2 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018CB8 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018CBE 6700                       		beq.s	loc2_17A10
00018CC0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018CC4 6000                       		bra.s	loc2_17A16
00018CC6                            ; ===========================================================================
00018CC6                            
00018CC6                            loc2_17A10:
00018CC6 4A28 0001                  		tst.b	1(a0)
00018CCA 6A00                       		bpl.s	obj77_ShipDel
00018CCC                            
00018CCC                            loc2_17A16:
00018CCC 6100 F720                  		bsr.w	BossMove
00018CD0 6000 FDCC                  		bra.w	loc2_177E6
00018CD4                            ; ===========================================================================
00018CD4                            
00018CD4                            obj77_ShipDel:
00018CD4 4EF9 0000 E06E             		jmp	DeleteObject
00018CDA                            ; ===========================================================================
00018CDA                            
00018CDA                            obj77_FaceMain:				; XREF: obj77_Index
00018CDA 4E75                       		rts
00018CDC                            ; ===========================================================================
00018CDC                            
00018CDC                            obj77_FlameMain:			; XREF: obj77_Index
00018CDC 4E75                       		rts
00018CDE                            ; ===========================================================================
00018CDE                            
00018CDE                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018CDE 43F9 0001 8880             		lea	(Ani_TetoB).l,a1
00018CE4 4EB9 0000 B090             		jsr	AnimateSprite
00018CEA 4EF9 0000 E032             		jmp	DisplaySprite
00018CF0                            ; ---------------------------------------------------------------------------
00018CF0                            ; Sprite mappings - Fatass teto boss
00018CF0                            ; ---------------------------------------------------------------------------
00018CF0                            Map_TetoBoss:
00018CF0                            	include "_maps\tetoboss.asm"
00018CF0                            Map_f09a:
00018CF0 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018CF2 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018CF4 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018CF6 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018CF8 03                         Map_f09a_8: 	dc.b $3
00018CF9 E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018CFE 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018D03 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018D08 06                         Map_f09a_18: 	dc.b $6
00018D09 EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018D0E 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018D13 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018D18 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018D1D EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018D22 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018D27 03                         Map_f09a_37: 	dc.b $3
00018D28 E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018D2D 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018D32 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018D37 06                         Map_f09a_47: 	dc.b $6
00018D38 ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018D3D 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018D42 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018D47 DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018D4C ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018D51 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018D56                            	even
00018D56                            	even
00018D56                            ; ===========================================================================
00018D56                            ; ---------------------------------------------------------------------------
00018D56                            ; Object 73 - Eggman (MZ)
00018D56                            ; ---------------------------------------------------------------------------
00018D56                            
00018D56                            Obj73:					; XREF: Obj_Index
00018D56 7000                       		moveq	#0,d0
00018D58 1028 0024                  		move.b	$24(a0),d0
00018D5C 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018D60 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018D64                            ; ===========================================================================
00018D64 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018D66 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018D68 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018D6A 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018D6C 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018D6E                            
00018D6E 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018D71 0401 04                    		dc.b 4,	1, 4
00018D74 0607 04                    		dc.b 6,	7, 4
00018D77 0800 03                    		dc.b 8,	0, 3
00018D7A                            ; ===========================================================================
00018D7A                            
00018D7A                            Obj73_Main:				; XREF: Obj73_Index
00018D7A 3168 0008 0030             		move.w	8(a0),$30(a0)
00018D80 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018D86 117C 000F 0020             		move.b	#$F,$20(a0)
00018D8C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018D92 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018D96 2248                       		movea.l	a0,a1
00018D98 7203                       		moveq	#3,d1
00018D9A 6000                       		bra.s	Obj73_LoadBoss
00018D9C                            ; ===========================================================================
00018D9C                            
00018D9C                            Obj73_Loop:
00018D9C 4EB9 0000 E4CE             		jsr	SingleObjLoad2
00018DA2 6600                       		bne.s	Obj73_ShipMain
00018DA4 12BC 0073                  		move.b	#$73,0(a1)
00018DA8 3368 0008 0008             		move.w	8(a0),8(a1)
00018DAE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018DB4                            
00018DB4                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018DB4 08A8 0000 0022             		bclr	#0,$22(a0)
00018DBA 4229 0025                  		clr.b	$25(a1)
00018DBE 135A 0024                  		move.b	(a2)+,$24(a1)
00018DC2 135A 001C                  		move.b	(a2)+,$1C(a1)
00018DC6 135A 0018                  		move.b	(a2)+,$18(a1)
00018DCA 237C 0001 8894 0004        		move.l	#Map_Eggman,4(a1)
00018DD2 337C 0400 0002             		move.w	#$400,2(a1)
00018DD8 137C 0004 0001             		move.b	#4,1(a1)
00018DDE 137C 0020 0019             		move.b	#$20,$19(a1)
00018DE4 2348 0034                  		move.l	a0,$34(a1)
00018DE8 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018DEC                            
00018DEC                            Obj73_ShipMain:
00018DEC 7000                       		moveq	#0,d0
00018DEE 1028 0025                  		move.b	$25(a0),d0
00018DF2 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018DF6 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018DFA 43F9 0001 8830             		lea	(Ani_Eggman).l,a1
00018E00 4EB9 0000 B090             		jsr	AnimateSprite
00018E06 7003                       		moveq	#3,d0
00018E08 C028 0022                  		and.b	$22(a0),d0
00018E0C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018E12 8128 0001                  		or.b	d0,1(a0)
00018E16 4EF9 0000 E032             		jmp	DisplaySprite
00018E1C                            ; ===========================================================================
00018E1C 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018E1E 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018E20 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018E22 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018E24 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018E26                            ; ===========================================================================
00018E26                            
00018E26                            loc_18302:				; XREF: Obj73_ShipIndex
00018E26 1028 003F                  		move.b	$3F(a0),d0
00018E2A 5428 003F                  		addq.b	#2,$3F(a0)
00018E2E 4EB9 0000 2D6C             		jsr	(CalcSine).l
00018E34 E440                       		asr.w	#2,d0
00018E36 3140 0012                  		move.w	d0,$12(a0)
00018E3A 317C FF00 0010             		move.w	#-$100,$10(a0)
00018E40 6100 F5AC                  		bsr.w	BossMove
00018E44 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018E4A 6600                       		bne.s	loc_18334
00018E4C 5428 0025                  		addq.b	#2,$25(a0)
00018E50 4228 0028                  		clr.b	$28(a0)
00018E54 42A8 0010                  		clr.l	$10(a0)
00018E58                            
00018E58                            loc_18334:
00018E58 4EB9 0000 2D46             		jsr	(RandomNumber).l
00018E5E 1140 0034                  		move.b	d0,$34(a0)
00018E62                            
00018E62                            loc_1833E:
00018E62 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018E68 3168 0030 0008             		move.w	$30(a0),8(a0)
00018E6E 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018E74 6400                       		bcc.s	locret_18390
00018E76 4A28 0022                  		tst.b	$22(a0)
00018E7A 6B00                       		bmi.s	loc_18392
00018E7C 4A28 0020                  		tst.b	$20(a0)
00018E80 6600                       		bne.s	locret_18390
00018E82 4A28 003E                  		tst.b	$3E(a0)
00018E86 6600                       		bne.s	loc_18374
00018E88 117C 0028 003E             		move.b	#$28,$3E(a0)
00018E8E 303C 00AC                  		move.w	#$AC,d0
00018E92 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018E98                            
00018E98                            loc_18374:
00018E98 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018E9C 7000                       		moveq	#0,d0
00018E9E 4A51                       		tst.w	(a1)
00018EA0 6600                       		bne.s	loc_18382
00018EA2 303C 0EEE                  		move.w	#$EEE,d0
00018EA6                            
00018EA6                            loc_18382:
00018EA6 3280                       		move.w	d0,(a1)
00018EA8 5328 003E                  		subq.b	#1,$3E(a0)
00018EAC 6600                       		bne.s	locret_18390
00018EAE 117C 000F 0020             		move.b	#$F,$20(a0)
00018EB4                            
00018EB4                            locret_18390:
00018EB4 4E75                       		rts	
00018EB6                            ; ===========================================================================
00018EB6                            
00018EB6                            loc_18392:				; XREF: loc_1833E
00018EB6 7064                       		moveq	#100,d0
00018EB8 6100 0000                  		bsr.w	AddPoints
00018EBC 117C 0004 0025             		move.b	#4,$25(a0)
00018EC2 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018EC8 4268 0010                  		clr.w	$10(a0)
00018ECC 4E75                       		rts	
00018ECE                            ; ===========================================================================
00018ECE                            
00018ECE                            loc_183AA:				; XREF: Obj73_ShipIndex
00018ECE 7000                       		moveq	#0,d0
00018ED0 1028 0028                  		move.b	$28(a0),d0
00018ED4 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018ED8 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018EDC 0228 0006 0028             		andi.b	#6,$28(a0)
00018EE2 6000 FF7E                  		bra.w	loc_1833E
00018EE6                            ; ===========================================================================
00018EE6 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018EE8 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018EEA 0000                       		dc.w loc_183CA-off_183C2
00018EEC 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018EEE                            ; ===========================================================================
00018EEE                            
00018EEE                            loc_183CA:				; XREF: off_183C2
00018EEE 4A68 0010                  		tst.w	$10(a0)
00018EF2 6600                       		bne.s	loc_183FE
00018EF4 7040                       		moveq	#$40,d0
00018EF6 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018EFC 6700                       		beq.s	loc_183E6
00018EFE 6500                       		bcs.s	loc_183DE
00018F00 4440                       		neg.w	d0
00018F02                            
00018F02                            loc_183DE:
00018F02 3140 0012                  		move.w	d0,$12(a0)
00018F06 6000 F4E6                  		bra.w	BossMove
00018F0A                            ; ===========================================================================
00018F0A                            
00018F0A                            loc_183E6:
00018F0A 317C 0200 0010             		move.w	#$200,$10(a0)
00018F10 317C 0100 0012             		move.w	#$100,$12(a0)
00018F16 0828 0000 0022             		btst	#0,$22(a0)
00018F1C 6600                       		bne.s	loc_183FE
00018F1E 4468 0010                  		neg.w	$10(a0)
00018F22                            
00018F22                            loc_183FE:
00018F22 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018F28 6400                       		bcc.s	Obj73_MakeLava
00018F2A 6100 F4C2                  		bsr.w	BossMove
00018F2E 5968 0012                  		subq.w	#4,$12(a0)
00018F32                            
00018F32                            Obj73_MakeLava:
00018F32 5328 0034                  		subq.b	#1,$34(a0)
00018F36 6400                       		bcc.s	loc_1845C
00018F38 4EB9 0000 E4B8             		jsr	SingleObjLoad
00018F3E 6600                       		bne.s	loc_1844A
00018F40 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018F44 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018F4A 4EB9 0000 2D46             		jsr	(RandomNumber).l
00018F50 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018F56 80FC 0050                  		divu.w	#$50,d0
00018F5A 4840                       		swap	d0
00018F5C 0640 1878                  		addi.w	#$1878,d0
00018F60 3340 0008                  		move.w	d0,8(a1)
00018F64 EE09                       		lsr.b	#7,d1
00018F66 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018F6C                            
00018F6C                            loc_1844A:
00018F6C 4EB9 0000 2D46             		jsr	(RandomNumber).l
00018F72 0200 001F                  		andi.b	#$1F,d0
00018F76 0600 0040                  		addi.b	#$40,d0
00018F7A 1140 0034                  		move.b	d0,$34(a0)
00018F7E                            
00018F7E                            loc_1845C:
00018F7E 0828 0000 0022             		btst	#0,$22(a0)
00018F84 6700                       		beq.s	loc_18474
00018F86 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018F8C 6D00                       		blt.s	locret_1849C
00018F8E 317C 1910 0030             		move.w	#$1910,$30(a0)
00018F94 6000                       		bra.s	loc_18482
00018F96                            ; ===========================================================================
00018F96                            
00018F96                            loc_18474:
00018F96 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018F9C 6E00                       		bgt.s	locret_1849C
00018F9E 317C 1830 0030             		move.w	#$1830,$30(a0)
00018FA4                            
00018FA4                            loc_18482:
00018FA4 4268 0010                  		clr.w	$10(a0)
00018FA8 317C FE80 0012             		move.w	#-$180,$12(a0)
00018FAE 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018FB4 6400                       		bcc.s	loc_18498
00018FB6 4468 0012                  		neg.w	$12(a0)
00018FBA                            
00018FBA                            loc_18498:
00018FBA 5428 0028                  		addq.b	#2,$28(a0)
00018FBE                            
00018FBE                            locret_1849C:
00018FBE 4E75                       		rts	
00018FC0                            ; ===========================================================================
00018FC0                            
00018FC0                            Obj73_MakeLava2:			; XREF: off_183C2
00018FC0 6100 F42C                  		bsr.w	BossMove
00018FC4 3028 0038                  		move.w	$38(a0),d0
00018FC8 0440 022C                  		subi.w	#$22C,d0
00018FCC 6E00                       		bgt.s	locret_184F4
00018FCE 303C 022C                  		move.w	#$22C,d0
00018FD2 4A68 0012                  		tst.w	$12(a0)
00018FD6 6700                       		beq.s	loc_184EA
00018FD8 4268 0012                  		clr.w	$12(a0)
00018FDC 317C 0050 003C             		move.w	#$50,$3C(a0)
00018FE2 0868 0000 0022             		bchg	#0,$22(a0)
00018FE8 4EB9 0000 E4B8             		jsr	SingleObjLoad
00018FEE 6600                       		bne.s	loc_184EA
00018FF0 3368 0030 0008             		move.w	$30(a0),8(a1)
00018FF6 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018FFC 0669 0018 000C             		addi.w	#$18,$C(a1)
00019002 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00019006 137C 0001 0028             		move.b	#1,$28(a1)
0001900C                            
0001900C                            loc_184EA:
0001900C 5368 003C                  		subq.w	#1,$3C(a0)
00019010 6600                       		bne.s	locret_184F4
00019012 5428 0028                  		addq.b	#2,$28(a0)
00019016                            
00019016                            locret_184F4:
00019016 4E75                       		rts	
00019018                            ; ===========================================================================
00019018                            
00019018                            loc_184F6:				; XREF: Obj73_ShipIndex
00019018 5368 003C                  		subq.w	#1,$3C(a0)
0001901C 6B00                       		bmi.s	loc_18500
0001901E 6000 F38C                  		bra.w	BossDefeated
00019022                            ; ===========================================================================
00019022                            
00019022                            loc_18500:
00019022 08E8 0000 0022             		bset	#0,$22(a0)
00019028 08A8 0007 0022             		bclr	#7,$22(a0)
0001902E 4268 0010                  		clr.w	$10(a0)
00019032 5428 0025                  		addq.b	#2,$25(a0)
00019036 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001903C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019040 6600                       		bne.s	locret_1852A
00019042 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019048 4268 0012                  		clr.w	$12(a0)
0001904C                            
0001904C                            locret_1852A:
0001904C 4E75                       		rts	
0001904E                            ; ===========================================================================
0001904E                            
0001904E                            loc_1852C:				; XREF: Obj73_ShipIndex
0001904E 5268 003C                  		addq.w	#1,$3C(a0)
00019052 6700                       		beq.s	loc_18544
00019054 6A00                       		bpl.s	loc_1854E
00019056 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001905C 6400                       		bcc.s	loc_18544
0001905E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019064 6000                       		bra.s	loc_1857A
00019066                            ; ===========================================================================
00019066                            
00019066                            loc_18544:
00019066 4268 0012                  		clr.w	$12(a0)
0001906A 4268 003C                  		clr.w	$3C(a0)
0001906E 6000                       		bra.s	loc_1857A
00019070                            ; ===========================================================================
00019070                            
00019070                            loc_1854E:
00019070 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019076 6500                       		bcs.s	loc_18566
00019078 6700                       		beq.s	loc_1856C
0001907A 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019080 6500                       		bcs.s	loc_1857A
00019082 5428 0025                  		addq.b	#2,$25(a0)
00019086 6000                       		bra.s	loc_1857A
00019088                            ; ===========================================================================
00019088                            
00019088                            loc_18566:
00019088 5168 0012                  		subq.w	#8,$12(a0)
0001908C 6000                       		bra.s	loc_1857A
0001908E                            ; ===========================================================================
0001908E                            
0001908E                            loc_1856C:
0001908E 4268 0012                  		clr.w	$12(a0)
00019092 303C 0083                  		move.w	#$83,d0
00019096 4EB9 0000 15CC             		jsr	(PlaySound).l	; play MZ music
0001909C                            
0001909C                            loc_1857A:
0001909C 6100 F350                  		bsr.w	BossMove
000190A0 6000 FDC0                  		bra.w	loc_1833E
000190A4                            ; ===========================================================================
000190A4                            
000190A4                            loc_18582:				; XREF: Obj73_ShipIndex
000190A4 317C 0500 0010             		move.w	#$500,$10(a0)
000190AA 317C FFC0 0012             		move.w	#-$40,$12(a0)
000190B0 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
000190B6 6400                       		bcc.s	loc_1859C
000190B8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000190BC 6000                       		bra.s	loc_185A2
000190BE                            ; ===========================================================================
000190BE                            
000190BE                            loc_1859C:
000190BE 4A28 0001                  		tst.b	1(a0)
000190C2 6A00                       		bpl.s	Obj73_ShipDel
000190C4                            
000190C4                            loc_185A2:
000190C4 6100 F328                  		bsr.w	BossMove
000190C8 6000 FD98                  		bra.w	loc_1833E
000190CC                            ; ===========================================================================
000190CC                            
000190CC                            Obj73_ShipDel:
000190CC 4EF9 0000 E06E             		jmp	DeleteObject
000190D2                            ; ===========================================================================
000190D2                            
000190D2                            Obj73_FaceMain:				; XREF: Obj73_Index
000190D2 7000                       		moveq	#0,d0
000190D4 7201                       		moveq	#1,d1
000190D6 2268 0034                  		movea.l	$34(a0),a1
000190DA 1029 0025                  		move.b	$25(a1),d0
000190DE 5540                       		subq.w	#2,d0
000190E0 6600                       		bne.s	loc_185D2
000190E2 0829 0001 0028             		btst	#1,$28(a1)
000190E8 6700                       		beq.s	loc_185DA
000190EA 4A69 0012                  		tst.w	$12(a1)
000190EE 6600                       		bne.s	loc_185DA
000190F0 7204                       		moveq	#4,d1
000190F2 6000                       		bra.s	loc_185EE
000190F4                            ; ===========================================================================
000190F4                            
000190F4                            loc_185D2:
000190F4 5500                       		subq.b	#2,d0
000190F6 6B00                       		bmi.s	loc_185DA
000190F8 720A                       		moveq	#$A,d1
000190FA 6000                       		bra.s	loc_185EE
000190FC                            ; ===========================================================================
000190FC                            
000190FC                            loc_185DA:
000190FC 4A29 0020                  		tst.b	$20(a1)
00019100 6600                       		bne.s	loc_185E4
00019102 7205                       		moveq	#5,d1
00019104 6000                       		bra.s	loc_185EE
00019106                            ; ===========================================================================
00019106                            
00019106                            loc_185E4:
00019106 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001910C 6500                       		bcs.s	loc_185EE
0001910E 7204                       		moveq	#4,d1
00019110                            
00019110                            loc_185EE:
00019110 1141 001C                  		move.b	d1,$1C(a0)
00019114 5900                       		subq.b	#4,d0
00019116 6600                       		bne.s	loc_18602
00019118 117C 0006 001C             		move.b	#6,$1C(a0)
0001911E 4A28 0001                  		tst.b	1(a0)
00019122 6A00                       		bpl.s	Obj73_FaceDel
00019124                            
00019124                            loc_18602:
00019124 6000                       		bra.s	Obj73_Display
00019126                            ; ===========================================================================
00019126                            
00019126                            Obj73_FaceDel:
00019126 4EF9 0000 E06E             		jmp	DeleteObject
0001912C                            ; ===========================================================================
0001912C                            
0001912C                            Obj73_FlameMain:			; XREF: Obj73_Index
0001912C 117C 0007 001C             		move.b	#7,$1C(a0)
00019132 2268 0034                  		movea.l	$34(a0),a1
00019136 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001913C 6D00                       		blt.s	loc_1862A
0001913E 117C 000B 001C             		move.b	#$B,$1C(a0)
00019144 4A28 0001                  		tst.b	1(a0)
00019148 6A00                       		bpl.s	Obj73_FlameDel
0001914A 6000                       		bra.s	loc_18636
0001914C                            ; ===========================================================================
0001914C                            
0001914C                            loc_1862A:
0001914C 4A69 0010                  		tst.w	$10(a1)
00019150 6700                       		beq.s	loc_18636
00019152 117C 0008 001C             		move.b	#8,$1C(a0)
00019158                            
00019158                            loc_18636:
00019158 6000                       		bra.s	Obj73_Display
0001915A                            ; ===========================================================================
0001915A                            
0001915A                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001915A 4EF9 0000 E06E             		jmp	DeleteObject
00019160                            ; ===========================================================================
00019160                            
00019160                            Obj73_Display:
00019160 43F9 0001 8830             		lea	(Ani_Eggman).l,a1
00019166 4EB9 0000 B090             		jsr	AnimateSprite
0001916C                            
0001916C                            loc_1864A:
0001916C 2268 0034                  		movea.l	$34(a0),a1
00019170 3169 0008 0008             		move.w	8(a1),8(a0)
00019176 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001917C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019182 7003                       		moveq	#3,d0
00019184 C028 0022                  		and.b	$22(a0),d0
00019188 0228 00FC 0001             		andi.b	#-4,1(a0)
0001918E 8128 0001                  		or.b	d0,1(a0)
00019192 4EF9 0000 E032             		jmp	DisplaySprite
00019198                            ; ===========================================================================
00019198                            
00019198                            Obj73_TubeMain:				; XREF: Obj73_Index
00019198 2268 0034                  		movea.l	$34(a0),a1
0001919C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000191A2 6600                       		bne.s	loc_18688
000191A4 4A28 0001                  		tst.b	1(a0)
000191A8 6A00                       		bpl.s	Obj73_TubeDel
000191AA                            
000191AA                            loc_18688:
000191AA 217C 0001 895C 0004        		move.l	#Map_BossItems,4(a0)
000191B2 317C 246C 0002             		move.w	#$246C,2(a0)
000191B8 117C 0004 001A             		move.b	#4,$1A(a0)
000191BE 60AC                       		bra.s	loc_1864A
000191C0                            ; ===========================================================================
000191C0                            
000191C0                            Obj73_TubeDel:
000191C0 4EF9 0000 E06E             		jmp	DeleteObject
000191C6                            ; ===========================================================================
000191C6                            ; ---------------------------------------------------------------------------
000191C6                            ; Object 74 - lava that	Eggman drops (MZ)
000191C6                            ; ---------------------------------------------------------------------------
000191C6                            
000191C6                            Obj74:					; XREF: Obj_Index
000191C6 7000                       		moveq	#0,d0
000191C8 1028 0024                  		move.b	$24(a0),d0
000191CC 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
000191D0 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
000191D4 4EF9 0000 E032             		jmp	DisplaySprite
000191DA                            ; ===========================================================================
000191DA 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
000191DC 0000                       		dc.w Obj74_Action-Obj74_Index
000191DE 0000                       		dc.w loc_18886-Obj74_Index
000191E0 0000                       		dc.w Obj74_Delete3-Obj74_Index
000191E2                            ; ===========================================================================
000191E2                            
000191E2                            Obj74_Main:				; XREF: Obj74_Index
000191E2 117C 0008 0016             		move.b	#8,$16(a0)
000191E8 117C 0008 0017             		move.b	#8,$17(a0)
000191EE 217C 0000 BC8E 0004        		move.l	#Map_obj14,4(a0)
000191F6 317C 0345 0002             		move.w	#$345,2(a0)
000191FC 117C 0004 0001             		move.b	#4,1(a0)
00019202 117C 0005 0018             		move.b	#5,$18(a0)
00019208 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001920E 117C 0008 0019             		move.b	#8,$19(a0)
00019214 5428 0024                  		addq.b	#2,$24(a0)
00019218 4A28 0028                  		tst.b	$28(a0)
0001921C 6600                       		bne.s	loc_1870A
0001921E 117C 008B 0020             		move.b	#$8B,$20(a0)
00019224 5428 0024                  		addq.b	#2,$24(a0)
00019228 6000 0000                  		bra.w	loc_18886
0001922C                            ; ===========================================================================
0001922C                            
0001922C                            loc_1870A:
0001922C 117C 001E 0029             		move.b	#$1E,$29(a0)
00019232 303C 00AE                  		move.w	#$AE,d0
00019236 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lava sound
0001923C                            
0001923C                            Obj74_Action:				; XREF: Obj74_Index
0001923C 7000                       		moveq	#0,d0
0001923E 1028 0025                  		move.b	$25(a0),d0
00019242 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00019246 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001924A 4EB9 0000 E00C             		jsr	SpeedToPos
00019250 43F9 0000 EEEC             		lea	(Ani_obj14).l,a1
00019256 4EB9 0000 B090             		jsr	AnimateSprite
0001925C 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00019262 6200                       		bhi.s	Obj74_Delete
00019264 4E75                       		rts	
00019266                            ; ===========================================================================
00019266                            
00019266                            Obj74_Delete:
00019266 4EF9 0000 E06E             		jmp	DeleteObject
0001926C                            ; ===========================================================================
0001926C 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001926E 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00019270 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00019272 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00019274                            ; ===========================================================================
00019274                            
00019274                            Obj74_Drop:				; XREF: Obj74_Index2
00019274 08E8 0001 0022             		bset	#1,$22(a0)
0001927A 5328 0029                  		subq.b	#1,$29(a0)
0001927E 6A00                       		bpl.s	locret_18780
00019280 117C 008B 0020             		move.b	#$8B,$20(a0)
00019286 4228 0028                  		clr.b	$28(a0)
0001928A 0668 0018 0012             		addi.w	#$18,$12(a0)
00019290 08A8 0001 0022             		bclr	#1,$22(a0)
00019296 6100 C6A4                  		bsr.w	ObjHitFloor
0001929A 4A41                       		tst.w	d1
0001929C 6A00                       		bpl.s	locret_18780
0001929E 5428 0025                  		addq.b	#2,$25(a0)
000192A2                            
000192A2                            locret_18780:
000192A2 4E75                       		rts	
000192A4                            ; ===========================================================================
000192A4                            
000192A4                            Obj74_MakeFlame:			; XREF: Obj74_Index2
000192A4 5568 000C                  		subq.w	#2,$C(a0)
000192A8 08E8 0007 0002             		bset	#7,2(a0)
000192AE 317C 00A0 0010             		move.w	#$A0,$10(a0)
000192B4 4268 0012                  		clr.w	$12(a0)
000192B8 3168 0008 0030             		move.w	8(a0),$30(a0)
000192BE 3168 000C 0038             		move.w	$C(a0),$38(a0)
000192C4 117C 0003 0029             		move.b	#3,$29(a0)
000192CA 4EB9 0000 E4CE             		jsr	SingleObjLoad2
000192D0 6600                       		bne.s	loc_187CA
000192D2 47D1                       		lea	(a1),a3
000192D4 45D0                       		lea	(a0),a2
000192D6 7003                       		moveq	#3,d0
000192D8                            
000192D8                            Obj74_Loop:
000192D8 26DA                       		move.l	(a2)+,(a3)+
000192DA 26DA                       		move.l	(a2)+,(a3)+
000192DC 26DA                       		move.l	(a2)+,(a3)+
000192DE 26DA                       		move.l	(a2)+,(a3)+
000192E0 51C8 FFF6                  		dbf	d0,Obj74_Loop
000192E4                            
000192E4 4469 0010                  		neg.w	$10(a1)
000192E8 5429 0025                  		addq.b	#2,$25(a1)
000192EC                            
000192EC                            loc_187CA:
000192EC 5428 0025                  		addq.b	#2,$25(a0)
000192F0 4E75                       		rts	
000192F2                            
000192F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000192F2                            
000192F2                            
000192F2                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000192F2 4EB9 0000 E4CE             		jsr	SingleObjLoad2
000192F8 6600                       		bne.s	locret_187EE
000192FA 3368 0008 0008             		move.w	8(a0),8(a1)
00019300 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019306 12BC 0074                  		move.b	#$74,(a1)
0001930A 337C 0067 0028             		move.w	#$67,$28(a1)
00019310                            
00019310                            locret_187EE:
00019310 4E75                       		rts	
00019312                            ; End of function Obj74_Duplicate2
00019312                            
00019312                            ; ===========================================================================
00019312                            
00019312                            Obj74_Duplicate:			; XREF: Obj74_Index2
00019312 6100 C628                  		bsr.w	ObjHitFloor
00019316 4A41                       		tst.w	d1
00019318 6A00                       		bpl.s	loc_18826
0001931A 3028 0008                  		move.w	8(a0),d0
0001931E 0C40 1940                  		cmpi.w	#$1940,d0
00019322 6E00                       		bgt.s	loc_1882C
00019324 3228 0030                  		move.w	$30(a0),d1
00019328 B240                       		cmp.w	d0,d1
0001932A 6700                       		beq.s	loc_1881E
0001932C 0240 0010                  		andi.w	#$10,d0
00019330 0241 0010                  		andi.w	#$10,d1
00019334 B240                       		cmp.w	d0,d1
00019336 6700                       		beq.s	loc_1881E
00019338 61B8                       		bsr.s	Obj74_Duplicate2
0001933A 3168 0008 0032             		move.w	8(a0),$32(a0)
00019340                            
00019340                            loc_1881E:
00019340 3168 0008 0030             		move.w	8(a0),$30(a0)
00019346 4E75                       		rts	
00019348                            ; ===========================================================================
00019348                            
00019348                            loc_18826:
00019348 5428 0025                  		addq.b	#2,$25(a0)
0001934C 4E75                       		rts	
0001934E                            ; ===========================================================================
0001934E                            
0001934E                            loc_1882C:
0001934E 5428 0024                  		addq.b	#2,$24(a0)
00019352 4E75                       		rts	
00019354                            ; ===========================================================================
00019354                            
00019354                            Obj74_FallEdge:				; XREF: Obj74_Index2
00019354 08A8 0001 0022             		bclr	#1,$22(a0)
0001935A 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00019360 3028 0008                  		move.w	8(a0),d0
00019364 9068 0032                  		sub.w	$32(a0),d0
00019368 6A00                       		bpl.s	loc_1884A
0001936A 4440                       		neg.w	d0
0001936C                            
0001936C                            loc_1884A:
0001936C 0C40 0012                  		cmpi.w	#$12,d0
00019370 6600                       		bne.s	loc_18856
00019372 08A8 0007 0002             		bclr	#7,2(a0)
00019378                            
00019378                            loc_18856:
00019378 6100 C5C2                  		bsr.w	ObjHitFloor
0001937C 4A41                       		tst.w	d1
0001937E 6A00                       		bpl.s	locret_1887E
00019380 5328 0029                  		subq.b	#1,$29(a0)
00019384 6700                       		beq.s	Obj74_Delete2
00019386 4268 0012                  		clr.w	$12(a0)
0001938A 3168 0032 0008             		move.w	$32(a0),8(a0)
00019390 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019396 08E8 0007 0002             		bset	#7,2(a0)
0001939C 5528 0025                  		subq.b	#2,$25(a0)
000193A0                            
000193A0                            locret_1887E:
000193A0 4E75                       		rts	
000193A2                            ; ===========================================================================
000193A2                            
000193A2                            Obj74_Delete2:
000193A2 4EF9 0000 E06E             		jmp	DeleteObject
000193A8                            ; ===========================================================================
000193A8                            
000193A8                            loc_18886:				; XREF: Obj74_Index
000193A8 08E8 0007 0002             		bset	#7,2(a0)
000193AE 5328 0029                  		subq.b	#1,$29(a0)
000193B2 6600                       		bne.s	Obj74_Animate
000193B4 117C 0001 001C             		move.b	#1,$1C(a0)
000193BA 5968 000C                  		subq.w	#4,$C(a0)
000193BE 4228 0020                  		clr.b	$20(a0)
000193C2                            
000193C2                            Obj74_Animate:
000193C2 43F9 0000 EEEC             		lea	(Ani_obj14).l,a1
000193C8 4EF9 0000 B090             		jmp	AnimateSprite
000193CE                            ; ===========================================================================
000193CE                            
000193CE                            Obj74_Delete3:				; XREF: Obj74_Index
000193CE 4EF9 0000 E06E             		jmp	DeleteObject
000193D4                            ; ===========================================================================
000193D4                            
000193D4                            Obj7A_Delete:
000193D4 4EF9 0000 E06E             		jmp	DeleteObject
000193DA                            ; ===========================================================================
000193DA                            ; ---------------------------------------------------------------------------
000193DA                            ; Object 7A - Eggman (SLZ)
000193DA                            ; ---------------------------------------------------------------------------
000193DA                            
000193DA                            Obj7A:					; XREF: Obj_Index
000193DA 7000                       		moveq	#0,d0
000193DC 1028 0024                  		move.b	$24(a0),d0
000193E0 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000193E4 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000193E8                            ; ===========================================================================
000193E8 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000193EA 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000193EC 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000193EE 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000193F0 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000193F2                            
000193F2 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000193F5 0401 04                    		dc.b 4,	1, 4
000193F8 0607 04                    		dc.b 6,	7, 4
000193FB 0800 03                    		dc.b 8,	0, 3
000193FE                            ; ===========================================================================
000193FE                            
000193FE                            Obj7A_Main:				; XREF: Obj7A_Index
000193FE 317C 2188 0008             		move.w	#$2188,8(a0)
00019404 317C 0228 000C             		move.w	#$228,$C(a0)
0001940A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019410 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019416 117C 000F 0020             		move.b	#$F,$20(a0)
0001941C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019422 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00019426 2248                       		movea.l	a0,a1
00019428 7203                       		moveq	#3,d1
0001942A 6000                       		bra.s	Obj7A_LoadBoss
0001942C                            ; ===========================================================================
0001942C                            
0001942C                            Obj7A_Loop:
0001942C 4EB9 0000 E4CE             		jsr	SingleObjLoad2
00019432 6600                       		bne.s	loc_1895C
00019434 12BC 007A                  		move.b	#$7A,0(a1)
00019438 3368 0008 0008             		move.w	8(a0),8(a1)
0001943E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019444                            
00019444                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00019444 08A8 0000 0022             		bclr	#0,$22(a0)
0001944A 4229 0025                  		clr.b	$25(a1)
0001944E 135A 0024                  		move.b	(a2)+,$24(a1)
00019452 135A 001C                  		move.b	(a2)+,$1C(a1)
00019456 135A 0018                  		move.b	(a2)+,$18(a1)
0001945A 237C 0001 8894 0004        		move.l	#Map_Eggman,4(a1)
00019462 337C 0400 0002             		move.w	#$400,2(a1)
00019468 137C 0004 0001             		move.b	#4,1(a1)
0001946E 137C 0020 0019             		move.b	#$20,$19(a1)
00019474 2348 0034                  		move.l	a0,$34(a1)
00019478 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001947C                            
0001947C                            loc_1895C:
0001947C 43F8 D040                  		lea	($FFFFD040).w,a1
00019480 45E8 002A                  		lea	$2A(a0),a2
00019484 705E                       		moveq	#$5E,d0
00019486 723E                       		moveq	#$3E,d1
00019488                            
00019488                            loc_18968:
00019488 B011                       		cmp.b	(a1),d0
0001948A 6600                       		bne.s	loc_18974
0001948C 4A29 0028                  		tst.b	$28(a1)
00019490 6700                       		beq.s	loc_18974
00019492 34C9                       		move.w	a1,(a2)+
00019494                            
00019494                            loc_18974:
00019494 D2FC 0040                  		adda.w	#$40,a1
00019498 51C9 FFEE                  		dbf	d1,loc_18968
0001949C                            
0001949C                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001949C 7000                       		moveq	#0,d0
0001949E 1028 0025                  		move.b	$25(a0),d0
000194A2 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
000194A6 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
000194AA 43F9 0001 8830             		lea	(Ani_Eggman).l,a1
000194B0 4EB9 0000 B090             		jsr	AnimateSprite
000194B6 7003                       		moveq	#3,d0
000194B8 C028 0022                  		and.b	$22(a0),d0
000194BC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000194C2 8128 0001                  		or.b	d0,1(a0)
000194C6 4EF9 0000 E032             		jmp	DisplaySprite
000194CC                            ; ===========================================================================
000194CC 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
000194CE 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
000194D0 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
000194D2 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
000194D4 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000194D6 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000194D8                            ; ===========================================================================
000194D8                            
000194D8                            loc_189B8:				; XREF: Obj7A_ShipIndex
000194D8 317C FF00 0010             		move.w	#-$100,$10(a0)
000194DE 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000194E4 6400                       		bcc.s	loc_189CA
000194E6 5428 0025                  		addq.b	#2,$25(a0)
000194EA                            
000194EA                            loc_189CA:
000194EA 6100 EF02                  		bsr.w	BossMove
000194EE 1028 003F                  		move.b	$3F(a0),d0
000194F2 5428 003F                  		addq.b	#2,$3F(a0)
000194F6 4EB9 0000 2D6C             		jsr	(CalcSine).l
000194FC EC40                       		asr.w	#6,d0
000194FE D068 0038                  		add.w	$38(a0),d0
00019502 3140 000C                  		move.w	d0,$C(a0)
00019506 3168 0030 0008             		move.w	$30(a0),8(a0)
0001950C 6000                       		bra.s	loc_189FE
0001950E                            ; ===========================================================================
0001950E                            
0001950E                            loc_189EE:
0001950E 6100 EEDE                  		bsr.w	BossMove
00019512 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019518 3168 0030 0008             		move.w	$30(a0),8(a0)
0001951E                            
0001951E                            loc_189FE:
0001951E 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019524 6400                       		bcc.s	locret_18A44
00019526 4A28 0022                  		tst.b	$22(a0)
0001952A 6B00                       		bmi.s	loc_18A46
0001952C 4A28 0020                  		tst.b	$20(a0)
00019530 6600                       		bne.s	locret_18A44
00019532 4A28 003E                  		tst.b	$3E(a0)
00019536 6600                       		bne.s	loc_18A28
00019538 117C 0020 003E             		move.b	#$20,$3E(a0)
0001953E 303C 00AC                  		move.w	#$AC,d0
00019542 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019548                            
00019548                            loc_18A28:
00019548 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001954C 7000                       		moveq	#0,d0
0001954E 4A51                       		tst.w	(a1)
00019550 6600                       		bne.s	loc_18A36
00019552 303C 0EEE                  		move.w	#$EEE,d0
00019556                            
00019556                            loc_18A36:
00019556 3280                       		move.w	d0,(a1)
00019558 5328 003E                  		subq.b	#1,$3E(a0)
0001955C 6600                       		bne.s	locret_18A44
0001955E 117C 000F 0020             		move.b	#$F,$20(a0)
00019564                            
00019564                            locret_18A44:
00019564 4E75                       		rts	
00019566                            ; ===========================================================================
00019566                            
00019566                            loc_18A46:
00019566 7064                       		moveq	#100,d0
00019568 6100 0000                  		bsr.w	AddPoints
0001956C 117C 0006 0025             		move.b	#6,$25(a0)
00019572 117C 0078 003C             		move.b	#$78,$3C(a0)
00019578 4268 0010                  		clr.w	$10(a0)
0001957C 4E75                       		rts	
0001957E                            ; ===========================================================================
0001957E                            
0001957E                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001957E 3028 0030                  		move.w	$30(a0),d0
00019582 317C 0200 0010             		move.w	#$200,$10(a0)
00019588 0828 0000 0022             		btst	#0,$22(a0)
0001958E 6600                       		bne.s	loc_18A7C
00019590 4468 0010                  		neg.w	$10(a0)
00019594 0C40 2008                  		cmpi.w	#$2008,d0
00019598 6E00                       		bgt.s	loc_18A88
0001959A 6000                       		bra.s	loc_18A82
0001959C                            ; ===========================================================================
0001959C                            
0001959C                            loc_18A7C:
0001959C 0C40 2138                  		cmpi.w	#$2138,d0
000195A0 6D00                       		blt.s	loc_18A88
000195A2                            
000195A2                            loc_18A82:
000195A2 0868 0000 0022             		bchg	#0,$22(a0)
000195A8                            
000195A8                            loc_18A88:
000195A8 3028 0008                  		move.w	8(a0),d0
000195AC 72FF                       		moveq	#-1,d1
000195AE 7402                       		moveq	#2,d2
000195B0 45E8 002A                  		lea	$2A(a0),a2
000195B4 7828                       		moveq	#$28,d4
000195B6 4A68 0010                  		tst.w	$10(a0)
000195BA 6A00                       		bpl.s	loc_18A9E
000195BC 4444                       		neg.w	d4
000195BE                            
000195BE                            loc_18A9E:
000195BE 321A                       		move.w	(a2)+,d1
000195C0 2641                       		movea.l	d1,a3
000195C2 082B 0003 0022             		btst	#3,$22(a3)
000195C8 6600                       		bne.s	loc_18AB4
000195CA 362B 0008                  		move.w	8(a3),d3
000195CE D644                       		add.w	d4,d3
000195D0 9640                       		sub.w	d0,d3
000195D2 6700                       		beq.s	loc_18AC0
000195D4                            
000195D4                            loc_18AB4:
000195D4 51CA FFE8                  		dbf	d2,loc_18A9E
000195D8                            
000195D8 1142 0028                  		move.b	d2,$28(a0)
000195DC 6000 FF0C                  		bra.w	loc_189CA
000195E0                            ; ===========================================================================
000195E0                            
000195E0                            loc_18AC0:
000195E0 1142 0028                  		move.b	d2,$28(a0)
000195E4 5428 0025                  		addq.b	#2,$25(a0)
000195E8 117C 0028 003C             		move.b	#$28,$3C(a0)
000195EE 6000 FEFA                  		bra.w	loc_189CA
000195F2                            ; ===========================================================================
000195F2                            
000195F2                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000195F2 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000195F8 6600                       		bne.s	loc_18B36
000195FA 70FF                       		moveq	#-1,d0
000195FC 1028 0028                  		move.b	$28(a0),d0
00019600 4880                       		ext.w	d0
00019602 6B00                       		bmi.s	loc_18B40
00019604 5540                       		subq.w	#2,d0
00019606 4440                       		neg.w	d0
00019608 D040                       		add.w	d0,d0
0001960A 43E8 002A                  		lea	$2A(a0),a1
0001960E 3031 0000                  		move.w	(a1,d0.w),d0
00019612 2440                       		movea.l	d0,a2
00019614 43F8 D040                  		lea	($FFFFD040).w,a1
00019618 723E                       		moveq	#$3E,d1
0001961A                            
0001961A                            loc_18AFA:
0001961A B0A9 003C                  		cmp.l	$3C(a1),d0
0001961E 6700                       		beq.s	loc_18B40
00019620 D2FC 0040                  		adda.w	#$40,a1
00019624 51C9 FFF4                  		dbf	d1,loc_18AFA
00019628                            
00019628 2F08                       		move.l	a0,-(sp)
0001962A 41D2                       		lea	(a2),a0
0001962C 4EB9 0000 E4CE             		jsr	SingleObjLoad2
00019632 205F                       		movea.l	(sp)+,a0
00019634 6600                       		bne.s	loc_18B40
00019636 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001963A 3368 0008 0008             		move.w	8(a0),8(a1)
00019640 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019646 0669 0020 000C             		addi.w	#$20,$C(a1)
0001964C 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019652 234A 003C                  		move.l	a2,$3C(a1)
00019656                            
00019656                            loc_18B36:
00019656 5328 003C                  		subq.b	#1,$3C(a0)
0001965A 6700                       		beq.s	loc_18B40
0001965C 6000 FEC0                  		bra.w	loc_189FE
00019660                            ; ===========================================================================
00019660                            
00019660                            loc_18B40:
00019660 5528 0025                  		subq.b	#2,$25(a0)
00019664 6000 FE84                  		bra.w	loc_189CA
00019668                            ; ===========================================================================
00019668                            
00019668                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019668 5328 003C                  		subq.b	#1,$3C(a0)
0001966C 6B00                       		bmi.s	loc_18B52
0001966E 6000 ED3C                  		bra.w	BossDefeated
00019672                            ; ===========================================================================
00019672                            
00019672                            loc_18B52:
00019672 5428 0025                  		addq.b	#2,$25(a0)
00019676 4268 0012                  		clr.w	$12(a0)
0001967A 08E8 0000 0022             		bset	#0,$22(a0)
00019680 08A8 0007 0022             		bclr	#7,$22(a0)
00019686 4268 0010                  		clr.w	$10(a0)
0001968A 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019690 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019694 6600                       		bne.s	loc_18B7C
00019696 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001969C                            
0001969C                            loc_18B7C:
0001969C 6000 FE80                  		bra.w	loc_189FE
000196A0                            ; ===========================================================================
000196A0                            
000196A0                            loc_18B80:				; XREF: Obj7A_ShipIndex
000196A0 5228 003C                  		addq.b	#1,$3C(a0)
000196A4 6700                       		beq.s	loc_18B90
000196A6 6A00                       		bpl.s	loc_18B96
000196A8 0668 0018 0012             		addi.w	#$18,$12(a0)
000196AE 6000                       		bra.s	loc_18BC2
000196B0                            ; ===========================================================================
000196B0                            
000196B0                            loc_18B90:
000196B0 4268 0012                  		clr.w	$12(a0)
000196B4 6000                       		bra.s	loc_18BC2
000196B6                            ; ===========================================================================
000196B6                            
000196B6                            loc_18B96:
000196B6 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000196BC 6500                       		bcs.s	loc_18BAE
000196BE 6700                       		beq.s	loc_18BB4
000196C0 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
000196C6 6500                       		bcs.s	loc_18BC2
000196C8 5428 0025                  		addq.b	#2,$25(a0)
000196CC 6000                       		bra.s	loc_18BC2
000196CE                            ; ===========================================================================
000196CE                            
000196CE                            loc_18BAE:
000196CE 5168 0012                  		subq.w	#8,$12(a0)
000196D2 6000                       		bra.s	loc_18BC2
000196D4                            ; ===========================================================================
000196D4                            
000196D4                            loc_18BB4:
000196D4 4268 0012                  		clr.w	$12(a0)
000196D8 303C 0084                  		move.w	#$84,d0
000196DC 4EB9 0000 15CC             		jsr	(PlaySound).l	; play SLZ music
000196E2                            
000196E2                            loc_18BC2:
000196E2 6000 FE2A                  		bra.w	loc_189EE
000196E6                            ; ===========================================================================
000196E6                            
000196E6                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000196E6 317C 0400 0010             		move.w	#$400,$10(a0)
000196EC 317C FFC0 0012             		move.w	#-$40,$12(a0)
000196F2 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000196F8 6400                       		bcc.s	loc_18BE0
000196FA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000196FE 6000                       		bra.s	loc_18BE8
00019700                            ; ===========================================================================
00019700                            
00019700                            loc_18BE0:
00019700 4A28 0001                  		tst.b	1(a0)
00019704 6A00 FCCE                  		bpl.w	Obj7A_Delete
00019708                            
00019708                            loc_18BE8:
00019708 6100 ECE4                  		bsr.w	BossMove
0001970C 6000 FDDC                  		bra.w	loc_189CA
00019710                            ; ===========================================================================
00019710                            
00019710                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00019710 7000                       		moveq	#0,d0
00019712 7201                       		moveq	#1,d1
00019714 2268 0034                  		movea.l	$34(a0),a1
00019718 1029 0025                  		move.b	$25(a1),d0
0001971C 0C00 0006                  		cmpi.b	#6,d0
00019720 6B00                       		bmi.s	loc_18C06
00019722 720A                       		moveq	#$A,d1
00019724 6000                       		bra.s	loc_18C1A
00019726                            ; ===========================================================================
00019726                            
00019726                            loc_18C06:
00019726 4A29 0020                  		tst.b	$20(a1)
0001972A 6600                       		bne.s	loc_18C10
0001972C 7205                       		moveq	#5,d1
0001972E 6000                       		bra.s	loc_18C1A
00019730                            ; ===========================================================================
00019730                            
00019730                            loc_18C10:
00019730 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019736 6500                       		bcs.s	loc_18C1A
00019738 7204                       		moveq	#4,d1
0001973A                            
0001973A                            loc_18C1A:
0001973A 1141 001C                  		move.b	d1,$1C(a0)
0001973E 0C00 000A                  		cmpi.b	#$A,d0
00019742 6600                       		bne.s	loc_18C32
00019744 117C 0006 001C             		move.b	#6,$1C(a0)
0001974A 4A28 0001                  		tst.b	1(a0)
0001974E 6A00 FC84                  		bpl.w	Obj7A_Delete
00019752                            
00019752                            loc_18C32:
00019752 6000                       		bra.s	loc_18C6C
00019754                            ; ===========================================================================
00019754                            
00019754                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019754 117C 0008 001C             		move.b	#8,$1C(a0)
0001975A 2268 0034                  		movea.l	$34(a0),a1
0001975E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019764 6600                       		bne.s	loc_18C56
00019766 4A28 0001                  		tst.b	1(a0)
0001976A 6A00 FC68                  		bpl.w	Obj7A_Delete
0001976E 117C 000B 001C             		move.b	#$B,$1C(a0)
00019774 6000                       		bra.s	loc_18C6C
00019776                            ; ===========================================================================
00019776                            
00019776                            loc_18C56:
00019776 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001977C 6E00                       		bgt.s	loc_18C6C
0001977E 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019784 6D00                       		blt.s	loc_18C6C
00019786 117C 0007 001C             		move.b	#7,$1C(a0)
0001978C                            
0001978C                            loc_18C6C:
0001978C 43F9 0001 8830             		lea	(Ani_Eggman).l,a1
00019792 4EB9 0000 B090             		jsr	AnimateSprite
00019798                            
00019798                            loc_18C78:
00019798 2268 0034                  		movea.l	$34(a0),a1
0001979C 3169 0008 0008             		move.w	8(a1),8(a0)
000197A2 3169 000C 000C             		move.w	$C(a1),$C(a0)
000197A8 1169 0022 0022             		move.b	$22(a1),$22(a0)
000197AE 7003                       		moveq	#3,d0
000197B0 C028 0022                  		and.b	$22(a0),d0
000197B4 0228 00FC 0001             		andi.b	#-4,1(a0)
000197BA 8128 0001                  		or.b	d0,1(a0)
000197BE 4EF9 0000 E032             		jmp	DisplaySprite
000197C4                            ; ===========================================================================
000197C4                            
000197C4                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000197C4 2268 0034                  		movea.l	$34(a0),a1
000197C8 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000197CE 6600                       		bne.s	loc_18CB8
000197D0 4A28 0001                  		tst.b	1(a0)
000197D4 6A00 FBFE                  		bpl.w	Obj7A_Delete
000197D8                            
000197D8                            loc_18CB8:
000197D8 217C 0001 895C 0004        		move.l	#Map_BossItems,4(a0)
000197E0 317C 246C 0002             		move.w	#$246C,2(a0)
000197E6 117C 0003 001A             		move.b	#3,$1A(a0)
000197EC 60AA                       		bra.s	loc_18C78
000197EE                            ; ===========================================================================
000197EE                            ; ---------------------------------------------------------------------------
000197EE                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000197EE                            ; ---------------------------------------------------------------------------
000197EE                            
000197EE                            Obj7B:					; XREF: Obj_Index
000197EE 7000                       		moveq	#0,d0
000197F0 1028 0024                  		move.b	$24(a0),d0
000197F4 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000197F8 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000197FC 3028 0030                  		move.w	$30(a0),d0
00019800 0240 FF80                  		andi.w	#$FF80,d0
00019804 3238 F700                  		move.w	($FFFFF700).w,d1
00019808 0441 0080                  		subi.w	#$80,d1
0001980C 0241 FF80                  		andi.w	#$FF80,d1
00019810 9041                       		sub.w	d1,d0
00019812 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019816 0C40 0280                  		cmpi.w	#$280,d0
0001981A 6200 FBB8                  		bhi.w	Obj7A_Delete
0001981E 4EF9 0000 E032             		jmp	DisplaySprite
00019824                            ; ===========================================================================
00019824 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00019826 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019828 0000                       		dc.w loc_18DC6-Obj7B_Index
0001982A 0000                       		dc.w loc_18EAA-Obj7B_Index
0001982C 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001982E 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019830                            ; ===========================================================================
00019830                            
00019830                            Obj7B_Main:				; XREF: Obj7B_Index
00019830 217C 0001 23F8 0004        		move.l	#Map_obj5Ea,4(a0)
00019838 317C 0518 0002             		move.w	#$518,2(a0)
0001983E 117C 0001 001A             		move.b	#1,$1A(a0)
00019844 0028 0004 0001             		ori.b	#4,1(a0)
0001984A 117C 0004 0018             		move.b	#4,$18(a0)
00019850 117C 008B 0020             		move.b	#$8B,$20(a0)
00019856 117C 000C 0019             		move.b	#$C,$19(a0)
0001985C 2268 003C                  		movea.l	$3C(a0),a1
00019860 3169 0008 0030             		move.w	8(a1),$30(a0)
00019866 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001986C 08E8 0000 0022             		bset	#0,$22(a0)
00019872 3028 0008                  		move.w	8(a0),d0
00019876 B069 0008                  		cmp.w	8(a1),d0
0001987A 6E00                       		bgt.s	loc_18D68
0001987C 08A8 0000 0022             		bclr	#0,$22(a0)
00019882 117C 0002 003A             		move.b	#2,$3A(a0)
00019888                            
00019888                            loc_18D68:
00019888 5428 0024                  		addq.b	#2,$24(a0)
0001988C                            
0001988C                            Obj7B_Fall:				; XREF: Obj7B_Index
0001988C 4EB9 0000 DF9A             		jsr	ObjectFall
00019892 2268 003C                  		movea.l	$3C(a0),a1
00019896 45F9 0000 0000             		lea	(word_19018).l,a2
0001989C 7000                       		moveq	#0,d0
0001989E 1029 001A                  		move.b	$1A(a1),d0
000198A2 3228 0008                  		move.w	8(a0),d1
000198A6 9268 0030                  		sub.w	$30(a0),d1
000198AA 6400                       		bcc.s	loc_18D8E
000198AC 5440                       		addq.w	#2,d0
000198AE                            
000198AE                            loc_18D8E:
000198AE D040                       		add.w	d0,d0
000198B0 3228 0034                  		move.w	$34(a0),d1
000198B4 D272 0000                  		add.w	(a2,d0.w),d1
000198B8 B268 000C                  		cmp.w	$C(a0),d1
000198BC 6E00                       		bgt.s	locret_18DC4
000198BE 2268 003C                  		movea.l	$3C(a0),a1
000198C2 7202                       		moveq	#2,d1
000198C4 0828 0000 0022             		btst	#0,$22(a0)
000198CA 6700                       		beq.s	loc_18DAE
000198CC 7200                       		moveq	#0,d1
000198CE                            
000198CE                            loc_18DAE:
000198CE 317C 00F0 0028             		move.w	#$F0,$28(a0)
000198D4 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000198DA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000198E0 6000 0000                  		bra.w	loc_18FA2
000198E4                            ; ===========================================================================
000198E4                            
000198E4                            locret_18DC4:
000198E4 4E75                       		rts	
000198E6                            ; ===========================================================================
000198E6                            
000198E6                            loc_18DC6:				; XREF: Obj7B_Index
000198E6 2268 003C                  		movea.l	$3C(a0),a1
000198EA 7000                       		moveq	#0,d0
000198EC 1028 003A                  		move.b	$3A(a0),d0
000198F0 9029 003A                  		sub.b	$3A(a1),d0
000198F4 6700                       		beq.s	loc_18E2A
000198F6 6400                       		bcc.s	loc_18DDA
000198F8 4400                       		neg.b	d0
000198FA                            
000198FA                            loc_18DDA:
000198FA 323C F7E8                  		move.w	#-$818,d1
000198FE 343C FEEC                  		move.w	#-$114,d2
00019902 0C00 0001                  		cmpi.b	#1,d0
00019906 6700                       		beq.s	loc_18E00
00019908 323C F6A0                  		move.w	#-$960,d1
0001990C 343C FF0C                  		move.w	#-$F4,d2
00019910 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00019916 6D00                       		blt.s	loc_18E00
00019918 323C F5E0                  		move.w	#-$A20,d1
0001991C 343C FF80                  		move.w	#-$80,d2
00019920                            
00019920                            loc_18E00:
00019920 3141 0012                  		move.w	d1,$12(a0)
00019924 3142 0010                  		move.w	d2,$10(a0)
00019928 3028 0008                  		move.w	8(a0),d0
0001992C 9068 0030                  		sub.w	$30(a0),d0
00019930 6400                       		bcc.s	loc_18E16
00019932 4468 0010                  		neg.w	$10(a0)
00019936                            
00019936                            loc_18E16:
00019936 117C 0001 001A             		move.b	#1,$1A(a0)
0001993C 317C 0020 0028             		move.w	#$20,$28(a0)
00019942 5428 0024                  		addq.b	#2,$24(a0)
00019946 6000 0000                  		bra.w	loc_18EAA
0001994A                            ; ===========================================================================
0001994A                            
0001994A                            loc_18E2A:				; XREF: loc_18DC6
0001994A 45F9 0000 0000             		lea	(word_19018).l,a2
00019950 7000                       		moveq	#0,d0
00019952 1029 001A                  		move.b	$1A(a1),d0
00019956 343C 0028                  		move.w	#$28,d2
0001995A 3228 0008                  		move.w	8(a0),d1
0001995E 9268 0030                  		sub.w	$30(a0),d1
00019962 6400                       		bcc.s	loc_18E48
00019964 4442                       		neg.w	d2
00019966 5440                       		addq.w	#2,d0
00019968                            
00019968                            loc_18E48:
00019968 D040                       		add.w	d0,d0
0001996A 3228 0034                  		move.w	$34(a0),d1
0001996E D272 0000                  		add.w	(a2,d0.w),d1
00019972 3141 000C                  		move.w	d1,$C(a0)
00019976 D468 0030                  		add.w	$30(a0),d2
0001997A 3142 0008                  		move.w	d2,8(a0)
0001997E 4268 000E                  		clr.w	$E(a0)
00019982 4268 000A                  		clr.w	$A(a0)
00019986 5368 0028                  		subq.w	#1,$28(a0)
0001998A 6600                       		bne.s	loc_18E7A
0001998C 317C 0020 0028             		move.w	#$20,$28(a0)
00019992 117C 0008 0024             		move.b	#8,$24(a0)
00019998 4E75                       		rts	
0001999A                            ; ===========================================================================
0001999A                            
0001999A                            loc_18E7A:
0001999A 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
000199A0 6600                       		bne.s	loc_18E88
000199A2 117C 0005 001F             		move.b	#5,$1F(a0)
000199A8                            
000199A8                            loc_18E88:
000199A8 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
000199AE 6600                       		bne.s	loc_18E96
000199B0 117C 0002 001F             		move.b	#2,$1F(a0)
000199B6                            
000199B6                            loc_18E96:
000199B6 5328 001E                  		subq.b	#1,$1E(a0)
000199BA 6E00                       		bgt.s	locret_18EA8
000199BC 0868 0000 001A             		bchg	#0,$1A(a0)
000199C2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000199C8                            
000199C8                            locret_18EA8:
000199C8 4E75                       		rts	
000199CA                            ; ===========================================================================
000199CA                            
000199CA                            loc_18EAA:				; XREF: Obj7B_Index
000199CA 43F8 D040                  		lea	($FFFFD040).w,a1
000199CE 707A                       		moveq	#$7A,d0
000199D0 7240                       		moveq	#$40,d1
000199D2 743E                       		moveq	#$3E,d2
000199D4                            
000199D4                            loc_18EB4:
000199D4 B011                       		cmp.b	(a1),d0
000199D6 6700                       		beq.s	loc_18EC0
000199D8 D2C1                       		adda.w	d1,a1
000199DA 51CA FFF8                  		dbf	d2,loc_18EB4
000199DE                            
000199DE 6000                       		bra.s	loc_18F38
000199E0                            ; ===========================================================================
000199E0                            
000199E0                            loc_18EC0:
000199E0 3029 0008                  		move.w	8(a1),d0
000199E4 3229 000C                  		move.w	$C(a1),d1
000199E8 3428 0008                  		move.w	8(a0),d2
000199EC 3628 000C                  		move.w	$C(a0),d3
000199F0 45FA 0000                  		lea	byte_19022(pc),a2
000199F4 47FA 0000                  		lea	byte_19026(pc),a3
000199F8 181A                       		move.b	(a2)+,d4
000199FA 4884                       		ext.w	d4
000199FC D044                       		add.w	d4,d0
000199FE 181B                       		move.b	(a3)+,d4
00019A00 4884                       		ext.w	d4
00019A02 D444                       		add.w	d4,d2
00019A04 B440                       		cmp.w	d0,d2
00019A06 6500                       		bcs.s	loc_18F38
00019A08 181A                       		move.b	(a2)+,d4
00019A0A 4884                       		ext.w	d4
00019A0C D044                       		add.w	d4,d0
00019A0E 181B                       		move.b	(a3)+,d4
00019A10 4884                       		ext.w	d4
00019A12 D444                       		add.w	d4,d2
00019A14 B042                       		cmp.w	d2,d0
00019A16 6500                       		bcs.s	loc_18F38
00019A18 181A                       		move.b	(a2)+,d4
00019A1A 4884                       		ext.w	d4
00019A1C D244                       		add.w	d4,d1
00019A1E 181B                       		move.b	(a3)+,d4
00019A20 4884                       		ext.w	d4
00019A22 D644                       		add.w	d4,d3
00019A24 B641                       		cmp.w	d1,d3
00019A26 6500                       		bcs.s	loc_18F38
00019A28 181A                       		move.b	(a2)+,d4
00019A2A 4884                       		ext.w	d4
00019A2C D244                       		add.w	d4,d1
00019A2E 181B                       		move.b	(a3)+,d4
00019A30 4884                       		ext.w	d4
00019A32 D644                       		add.w	d4,d3
00019A34 B243                       		cmp.w	d3,d1
00019A36 6500                       		bcs.s	loc_18F38
00019A38 5428 0024                  		addq.b	#2,$24(a0)
00019A3C 4268 0028                  		clr.w	$28(a0)
00019A40 4229 0020                  		clr.b	$20(a1)
00019A44 5329 0021                  		subq.b	#1,$21(a1)
00019A48 6600                       		bne.s	loc_18F38
00019A4A 08E9 0007 0022             		bset	#7,$22(a1)
00019A50 4268 0010                  		clr.w	$10(a0)
00019A54 4268 0012                  		clr.w	$12(a0)
00019A58                            
00019A58                            loc_18F38:
00019A58 4A68 0012                  		tst.w	$12(a0)
00019A5C 6A00                       		bpl.s	loc_18F5C
00019A5E 4EB9 0000 DF9A             		jsr	ObjectFall
00019A64 3028 0034                  		move.w	$34(a0),d0
00019A68 0440 002F                  		subi.w	#$2F,d0
00019A6C B068 000C                  		cmp.w	$C(a0),d0
00019A70 6E00                       		bgt.s	loc_18F58
00019A72 4EB9 0000 DF9A             		jsr	ObjectFall
00019A78                            
00019A78                            loc_18F58:
00019A78 6000 FF20                  		bra.w	loc_18E7A
00019A7C                            ; ===========================================================================
00019A7C                            
00019A7C                            loc_18F5C:
00019A7C 4EB9 0000 DF9A             		jsr	ObjectFall
00019A82 2268 003C                  		movea.l	$3C(a0),a1
00019A86 45F9 0000 0000             		lea	(word_19018).l,a2
00019A8C 7000                       		moveq	#0,d0
00019A8E 1029 001A                  		move.b	$1A(a1),d0
00019A92 3228 0008                  		move.w	8(a0),d1
00019A96 9268 0030                  		sub.w	$30(a0),d1
00019A9A 6400                       		bcc.s	loc_18F7E
00019A9C 5440                       		addq.w	#2,d0
00019A9E                            
00019A9E                            loc_18F7E:
00019A9E D040                       		add.w	d0,d0
00019AA0 3228 0034                  		move.w	$34(a0),d1
00019AA4 D272 0000                  		add.w	(a2,d0.w),d1
00019AA8 B268 000C                  		cmp.w	$C(a0),d1
00019AAC 6ECA                       		bgt.s	loc_18F58
00019AAE 2268 003C                  		movea.l	$3C(a0),a1
00019AB2 7202                       		moveq	#2,d1
00019AB4 4A68 0010                  		tst.w	$10(a0)
00019AB8 6B00                       		bmi.s	loc_18F9C
00019ABA 7200                       		moveq	#0,d1
00019ABC                            
00019ABC                            loc_18F9C:
00019ABC 317C 0000 0028             		move.w	#0,$28(a0)
00019AC2                            
00019AC2                            loc_18FA2:
00019AC2 1341 003A                  		move.b	d1,$3A(a1)
00019AC6 1141 003A                  		move.b	d1,$3A(a0)
00019ACA B229 001A                  		cmp.b	$1A(a1),d1
00019ACE 6700                       		beq.s	loc_19008
00019AD0 08A9 0003 0022             		bclr	#3,$22(a1)
00019AD6 6700                       		beq.s	loc_19008
00019AD8 4229 0025                  		clr.b	$25(a1)
00019ADC 137C 0002 0024             		move.b	#2,$24(a1)
00019AE2 45F8 D000                  		lea	($FFFFD000).w,a2
00019AE6 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019AEC 446A 0012                  		neg.w	$12(a2)
00019AF0 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019AF6 6600                       		bne.s	loc_18FDC
00019AF8 E0EA 0012                  		asr	$12(a2)
00019AFC                            
00019AFC                            loc_18FDC:
00019AFC 08EA 0001 0022             		bset	#1,$22(a2)
00019B02 08AA 0003 0022             		bclr	#3,$22(a2)
00019B08 422A 003C                  		clr.b	$3C(a2)
00019B0C 2F08                       		move.l	a0,-(sp)
00019B0E 41D2                       		lea	(a2),a0
00019B10 4EBA A36C                  		jsr	Obj01_ChkRoll
00019B14 205F                       		movea.l	(sp)+,a0
00019B16 157C 0002 0024             		move.b	#2,$24(a2)
00019B1C 303C 00CC                  		move.w	#$CC,d0
00019B20 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019B26                            
00019B26                            loc_19008:
00019B26 4268 0010                  		clr.w	$10(a0)
00019B2A 4268 0012                  		clr.w	$12(a0)
00019B2E 5428 0024                  		addq.b	#2,$24(a0)
00019B32 6000 FE66                  		bra.w	loc_18E7A
00019B36                            ; ===========================================================================
00019B36 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019B40                            		even
00019B40 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019B44                            		even
00019B44 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019B48                            		even
00019B48                            ; ===========================================================================
00019B48                            
00019B48                            Obj7B_Explode:				; XREF: Obj7B_Index
00019B48 10BC 003F                  		move.b	#$3F,(a0)
00019B4C 4228 0024                  		clr.b	$24(a0)
00019B50 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019B56 6700                       		beq.s	Obj7B_MakeFrag
00019B58 4E75                       		rts	
00019B5A                            ; ===========================================================================
00019B5A                            
00019B5A                            Obj7B_MakeFrag:
00019B5A 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019B60 7203                       		moveq	#3,d1
00019B62 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019B66                            
00019B66                            Obj7B_Loop:
00019B66 4EB9 0000 E4B8             		jsr	SingleObjLoad
00019B6C 6600                       		bne.s	loc_1909A
00019B6E 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019B72 137C 000A 0024             		move.b	#$A,$24(a1)
00019B78 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019B80 137C 0003 0018             		move.b	#3,$18(a1)
00019B86 337C 0518 0002             		move.w	#$518,2(a1)
00019B8C 3368 0008 0008             		move.w	8(a0),8(a1)
00019B92 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019B98 335A 0010                  		move.w	(a2)+,$10(a1)
00019B9C 335A 0012                  		move.w	(a2)+,$12(a1)
00019BA0 137C 0098 0020             		move.b	#$98,$20(a1)
00019BA6 0029 0004 0001             		ori.b	#4,1(a1)
00019BAC 08E9 0007 0001             		bset	#7,1(a1)
00019BB2 137C 000C 0019             		move.b	#$C,$19(a1)
00019BB8                            
00019BB8                            loc_1909A:
00019BB8 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019BBC                            
00019BBC 4E75                       		rts	
00019BBE                            ; ===========================================================================
00019BBE FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019BC2 FF60 FDC0                  		dc.w $FF60, $FDC0
00019BC6 0100 FCC0                  		dc.w $100, $FCC0
00019BCA 00A0 FDC0                  		dc.w $A0, $FDC0
00019BCE                            ; ===========================================================================
00019BCE                            
00019BCE                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019BCE 4EB9 0000 E00C             		jsr	SpeedToPos
00019BD4 3168 0008 0030             		move.w	8(a0),$30(a0)
00019BDA 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019BE0 0668 0018 0012             		addi.w	#$18,$12(a0)
00019BE6 7004                       		moveq	#4,d0
00019BE8 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019BEC E448                       		lsr.w	#2,d0
00019BEE 1140 001A                  		move.b	d0,$1A(a0)
00019BF2 4A28 0001                  		tst.b	1(a0)
00019BF6 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019BFA 4E75                       		rts	
00019BFC                            ; ===========================================================================
00019BFC                            ; ---------------------------------------------------------------------------
00019BFC                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019BFC                            ; ---------------------------------------------------------------------------
00019BFC                            Map_obj7B:
00019BFC                            	include "_maps\obj7B.asm"
00019BFC                            ; ---------------------------------------------------------------------------
00019BFC                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019BFC                            ; ---------------------------------------------------------------------------
00019BFC 0000                       		dc.w byte_190E2-Map_obj7B
00019BFE 0000                       		dc.w byte_190E8-Map_obj7B
00019C00 01                         byte_190E2:	dc.b 1
00019C01 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019C06 01                         byte_190E8:	dc.b 1
00019C07 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019C0C                            		even
00019C0C                            		even
00019C0C                            
00019C0C                            ; ===========================================================================
00019C0C                            ; ---------------------------------------------------------------------------
00019C0C                            ; Object 75 - Eggman (SYZ)
00019C0C                            ; ---------------------------------------------------------------------------
00019C0C                            
00019C0C                            Obj75:					; XREF: Obj_Index
00019C0C 7000                       		moveq	#0,d0
00019C0E 1028 0024                  		move.b	$24(a0),d0
00019C12 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019C16 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019C1A                            ; ===========================================================================
00019C1A 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019C1C 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019C1E 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019C20 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019C22 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019C24                            
00019C24 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019C27 0401 05                    		dc.b 4,	1, 5
00019C2A 0607 05                    		dc.b 6,	7, 5
00019C2D 0800 05                    		dc.b 8,	0, 5
00019C30                            ; ===========================================================================
00019C30                            
00019C30                            Obj75_Main:				; XREF: Obj75_Index
00019C30 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019C36 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019C3C 3168 0008 0030             		move.w	8(a0),$30(a0)
00019C42 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019C48 117C 000F 0020             		move.b	#$F,$20(a0)
00019C4E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019C54 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019C58 2248                       		movea.l	a0,a1
00019C5A 7203                       		moveq	#3,d1
00019C5C 6000                       		bra.s	Obj75_LoadBoss
00019C5E                            ; ===========================================================================
00019C5E                            
00019C5E                            Obj75_Loop:
00019C5E 4EB9 0000 E4CE             		jsr	SingleObjLoad2
00019C64 6600                       		bne.s	Obj75_ShipMain
00019C66 12BC 0075                  		move.b	#$75,(a1)
00019C6A 3368 0008 0008             		move.w	8(a0),8(a1)
00019C70 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C76                            
00019C76                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019C76 08A8 0000 0022             		bclr	#0,$22(a0)
00019C7C 4229 0025                  		clr.b	$25(a1)
00019C80 135A 0024                  		move.b	(a2)+,$24(a1)
00019C84 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C88 135A 0018                  		move.b	(a2)+,$18(a1)
00019C8C 237C 0001 8894 0004        		move.l	#Map_Eggman,4(a1)
00019C94 337C 0400 0002             		move.w	#$400,2(a1)
00019C9A 137C 0004 0001             		move.b	#4,1(a1)
00019CA0 137C 0020 0019             		move.b	#$20,$19(a1)
00019CA6 2348 0034                  		move.l	a0,$34(a1)
00019CAA 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019CAE                            
00019CAE                            Obj75_ShipMain:				; XREF: Obj75_Index
00019CAE 7000                       		moveq	#0,d0
00019CB0 1028 0025                  		move.b	$25(a0),d0
00019CB4 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019CB8 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019CBC 43F9 0001 8830             		lea	(Ani_Eggman).l,a1
00019CC2 4EB9 0000 B090             		jsr	AnimateSprite
00019CC8 7003                       		moveq	#3,d0
00019CCA C028 0022                  		and.b	$22(a0),d0
00019CCE 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019CD4 8128 0001                  		or.b	d0,1(a0)
00019CD8 4EF9 0000 E032             		jmp	DisplaySprite
00019CDE                            ; ===========================================================================
00019CDE 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019CE2 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019CE6 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019CEA                            ; ===========================================================================
00019CEA                            
00019CEA                            loc_191CC:				; XREF: Obj75_ShipIndex
00019CEA 317C FF00 0010             		move.w	#-$100,$10(a0)
00019CF0 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019CF6 6400                       		bcc.s	loc_191DE
00019CF8 5428 0025                  		addq.b	#2,$25(a0)
00019CFC                            
00019CFC                            loc_191DE:
00019CFC 1028 003F                  		move.b	$3F(a0),d0
00019D00 5428 003F                  		addq.b	#2,$3F(a0)
00019D04 4EB9 0000 2D6C             		jsr	(CalcSine).l
00019D0A E440                       		asr.w	#2,d0
00019D0C 3140 0012                  		move.w	d0,$12(a0)
00019D10                            
00019D10                            loc_191F2:
00019D10 6100 E6DC                  		bsr.w	BossMove
00019D14 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019D1A 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D20                            
00019D20                            loc_19202:
00019D20 3028 0008                  		move.w	8(a0),d0
00019D24 0440 2C00                  		subi.w	#$2C00,d0
00019D28 EA48                       		lsr.w	#5,d0
00019D2A 1140 0034                  		move.b	d0,$34(a0)
00019D2E 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019D34 6400                       		bcc.s	locret_19256
00019D36 4A28 0022                  		tst.b	$22(a0)
00019D3A 6B00                       		bmi.s	loc_19258
00019D3C 4A28 0020                  		tst.b	$20(a0)
00019D40 6600                       		bne.s	locret_19256
00019D42 4A28 003E                  		tst.b	$3E(a0)
00019D46 6600                       		bne.s	loc_1923A
00019D48 117C 0020 003E             		move.b	#$20,$3E(a0)
00019D4E 303C 00AC                  		move.w	#$AC,d0
00019D52 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019D58                            
00019D58                            loc_1923A:
00019D58 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019D5C 7000                       		moveq	#0,d0
00019D5E 4A51                       		tst.w	(a1)
00019D60 6600                       		bne.s	loc_19248
00019D62 303C 0EEE                  		move.w	#$EEE,d0
00019D66                            
00019D66                            loc_19248:
00019D66 3280                       		move.w	d0,(a1)
00019D68 5328 003E                  		subq.b	#1,$3E(a0)
00019D6C 6600                       		bne.s	locret_19256
00019D6E 117C 000F 0020             		move.b	#$F,$20(a0)
00019D74                            
00019D74                            locret_19256:
00019D74 4E75                       		rts	
00019D76                            ; ===========================================================================
00019D76                            
00019D76                            loc_19258:				; XREF: loc_19202
00019D76 7064                       		moveq	#100,d0
00019D78 6100 0000                  		bsr.w	AddPoints
00019D7C 117C 0006 0025             		move.b	#6,$25(a0)
00019D82 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019D88 4268 0010                  		clr.w	$10(a0)
00019D8C 4E75                       		rts	
00019D8E                            ; ===========================================================================
00019D8E                            
00019D8E                            loc_19270:				; XREF: Obj75_ShipIndex
00019D8E 3028 0030                  		move.w	$30(a0),d0
00019D92 317C 0140 0010             		move.w	#$140,$10(a0)
00019D98 0828 0000 0022             		btst	#0,$22(a0)
00019D9E 6600                       		bne.s	loc_1928E
00019DA0 4468 0010                  		neg.w	$10(a0)
00019DA4 0C40 2C08                  		cmpi.w	#$2C08,d0
00019DA8 6E00                       		bgt.s	loc_1929E
00019DAA 6000                       		bra.s	loc_19294
00019DAC                            ; ===========================================================================
00019DAC                            
00019DAC                            loc_1928E:
00019DAC 0C40 2D38                  		cmpi.w	#$2D38,d0
00019DB0 6D00                       		blt.s	loc_1929E
00019DB2                            
00019DB2                            loc_19294:
00019DB2 0868 0000 0022             		bchg	#0,$22(a0)
00019DB8 4228 003D                  		clr.b	$3D(a0)
00019DBC                            
00019DBC                            loc_1929E:
00019DBC 0440 2C10                  		subi.w	#$2C10,d0
00019DC0 0240 001F                  		andi.w	#$1F,d0
00019DC4 0440 001F                  		subi.w	#$1F,d0
00019DC8 6A00                       		bpl.s	loc_192AE
00019DCA 4440                       		neg.w	d0
00019DCC                            
00019DCC                            loc_192AE:
00019DCC 5340                       		subq.w	#1,d0
00019DCE 6E00                       		bgt.s	loc_192E8
00019DD0 4A28 003D                  		tst.b	$3D(a0)
00019DD4 6600                       		bne.s	loc_192E8
00019DD6 3238 D008                  		move.w	($FFFFD008).w,d1
00019DDA 0441 2C00                  		subi.w	#$2C00,d1
00019DDE EA41                       		asr.w	#5,d1
00019DE0 B228 0034                  		cmp.b	$34(a0),d1
00019DE4 6600                       		bne.s	loc_192E8
00019DE6 7000                       		moveq	#0,d0
00019DE8 1028 0034                  		move.b	$34(a0),d0
00019DEC EB40                       		asl.w	#5,d0
00019DEE 0640 2C10                  		addi.w	#$2C10,d0
00019DF2 3140 0030                  		move.w	d0,$30(a0)
00019DF6 6100 0000                  		bsr.w	Obj75_FindBlocks
00019DFA 5428 0025                  		addq.b	#2,$25(a0)
00019DFE 4268 0028                  		clr.w	$28(a0)
00019E02 4268 0010                  		clr.w	$10(a0)
00019E06                            
00019E06                            loc_192E8:
00019E06 6000 FEF4                  		bra.w	loc_191DE
00019E0A                            ; ===========================================================================
00019E0A                            
00019E0A                            loc_192EC:				; XREF: Obj75_ShipIndex
00019E0A 7000                       		moveq	#0,d0
00019E0C 1028 0028                  		move.b	$28(a0),d0
00019E10 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019E14 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019E18                            ; ===========================================================================
00019E18 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019E1A 0000                       		dc.w loc_19348-off_192FA
00019E1C 0000                       		dc.w loc_1938E-off_192FA
00019E1E 0000                       		dc.w loc_193D0-off_192FA
00019E20                            ; ===========================================================================
00019E20                            
00019E20                            loc_19302:				; XREF: off_192FA
00019E20 317C 0180 0012             		move.w	#$180,$12(a0)
00019E26 3028 0038                  		move.w	$38(a0),d0
00019E2A 0C40 0556                  		cmpi.w	#$556,d0
00019E2E 6500                       		bcs.s	loc_19344
00019E30 317C 0556 0038             		move.w	#$556,$38(a0)
00019E36 4268 003C                  		clr.w	$3C(a0)
00019E3A 70FF                       		moveq	#-1,d0
00019E3C 3028 0036                  		move.w	$36(a0),d0
00019E40 6700                       		beq.s	loc_1933C
00019E42 2240                       		movea.l	d0,a1
00019E44 137C 00FF 0029             		move.b	#-1,$29(a1)
00019E4A 117C 00FF 0029             		move.b	#-1,$29(a0)
00019E50 2348 0034                  		move.l	a0,$34(a1)
00019E54 317C 0032 003C             		move.w	#$32,$3C(a0)
00019E5A                            
00019E5A                            loc_1933C:
00019E5A 4268 0012                  		clr.w	$12(a0)
00019E5E 5428 0028                  		addq.b	#2,$28(a0)
00019E62                            
00019E62                            loc_19344:
00019E62 6000 FEAC                  		bra.w	loc_191F2
00019E66                            ; ===========================================================================
00019E66                            
00019E66                            loc_19348:				; XREF: off_192FA
00019E66 5368 003C                  		subq.w	#1,$3C(a0)
00019E6A 6A00                       		bpl.s	loc_19366
00019E6C 5428 0028                  		addq.b	#2,$28(a0)
00019E70 317C F800 0012             		move.w	#-$800,$12(a0)
00019E76 4A68 0036                  		tst.w	$36(a0)
00019E7A 6600                       		bne.s	loc_19362
00019E7C E0E8 0012                  		asr	$12(a0)
00019E80                            
00019E80                            loc_19362:
00019E80 7000                       		moveq	#0,d0
00019E82 6000                       		bra.s	loc_1937C
00019E84                            ; ===========================================================================
00019E84                            
00019E84                            loc_19366:
00019E84 7000                       		moveq	#0,d0
00019E86 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019E8C 6E00                       		bgt.s	loc_1937C
00019E8E 7002                       		moveq	#2,d0
00019E90 0828 0001 003D             		btst	#1,$3D(a0)
00019E96 6700                       		beq.s	loc_1937C
00019E98 4440                       		neg.w	d0
00019E9A                            
00019E9A                            loc_1937C:
00019E9A D068 0038                  		add.w	$38(a0),d0
00019E9E 3140 000C                  		move.w	d0,$C(a0)
00019EA2 3168 0030 0008             		move.w	$30(a0),8(a0)
00019EA8 6000 FE76                  		bra.w	loc_19202
00019EAC                            ; ===========================================================================
00019EAC                            
00019EAC                            loc_1938E:				; XREF: off_192FA
00019EAC 303C 04DA                  		move.w	#$4DA,d0
00019EB0 4A68 0036                  		tst.w	$36(a0)
00019EB4 6700                       		beq.s	loc_1939C
00019EB6 0440 0018                  		subi.w	#$18,d0
00019EBA                            
00019EBA                            loc_1939C:
00019EBA B068 0038                  		cmp.w	$38(a0),d0
00019EBE 6D00                       		blt.s	loc_193BE
00019EC0 317C 0008 003C             		move.w	#8,$3C(a0)
00019EC6 4A68 0036                  		tst.w	$36(a0)
00019ECA 6700                       		beq.s	loc_193B4
00019ECC 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019ED2                            
00019ED2                            loc_193B4:
00019ED2 5428 0028                  		addq.b	#2,$28(a0)
00019ED6 4268 0012                  		clr.w	$12(a0)
00019EDA 6000                       		bra.s	loc_193CC
00019EDC                            ; ===========================================================================
00019EDC                            
00019EDC                            loc_193BE:
00019EDC 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019EE2 6C00                       		bge.s	loc_193CC
00019EE4 0668 000C 0012             		addi.w	#$C,$12(a0)
00019EEA                            
00019EEA                            loc_193CC:
00019EEA 6000 FE24                  		bra.w	loc_191F2
00019EEE                            ; ===========================================================================
00019EEE                            
00019EEE                            loc_193D0:				; XREF: off_192FA
00019EEE 5368 003C                  		subq.w	#1,$3C(a0)
00019EF2 6E00                       		bgt.s	loc_19406
00019EF4 6B00                       		bmi.s	loc_193EE
00019EF6 70FF                       		moveq	#-1,d0
00019EF8 3028 0036                  		move.w	$36(a0),d0
00019EFC 6700                       		beq.s	loc_193E8
00019EFE 2240                       		movea.l	d0,a1
00019F00 137C 000A 0029             		move.b	#$A,$29(a1)
00019F06                            
00019F06                            loc_193E8:
00019F06 4268 0036                  		clr.w	$36(a0)
00019F0A 6000                       		bra.s	loc_19406
00019F0C                            ; ===========================================================================
00019F0C                            
00019F0C                            loc_193EE:
00019F0C 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019F12 6600                       		bne.s	loc_19406
00019F14 4228 0029                  		clr.b	$29(a0)
00019F18 5528 0025                  		subq.b	#2,$25(a0)
00019F1C 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019F22 6000                       		bra.s	loc_19446
00019F24                            ; ===========================================================================
00019F24                            
00019F24                            loc_19406:
00019F24 7001                       		moveq	#1,d0
00019F26 4A68 0036                  		tst.w	$36(a0)
00019F2A 6700                       		beq.s	loc_19410
00019F2C 7002                       		moveq	#2,d0
00019F2E                            
00019F2E                            loc_19410:
00019F2E 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019F34 6700                       		beq.s	loc_19424
00019F36 6D00                       		blt.s	loc_1941C
00019F38 4440                       		neg.w	d0
00019F3A                            
00019F3A                            loc_1941C:
00019F3A 4A68 0036                  		tst.w	$36(a0)
00019F3E D168 0038                  		add.w	d0,$38(a0)
00019F42                            
00019F42                            loc_19424:
00019F42 7000                       		moveq	#0,d0
00019F44 4A68 0036                  		tst.w	$36(a0)
00019F48 6700                       		beq.s	loc_19438
00019F4A 7002                       		moveq	#2,d0
00019F4C 0828 0000 003D             		btst	#0,$3D(a0)
00019F52 6700                       		beq.s	loc_19438
00019F54 4440                       		neg.w	d0
00019F56                            
00019F56                            loc_19438:
00019F56 D068 0038                  		add.w	$38(a0),d0
00019F5A 3140 000C                  		move.w	d0,$C(a0)
00019F5E 3168 0030 0008             		move.w	$30(a0),8(a0)
00019F64                            
00019F64                            loc_19446:
00019F64 6000 FDBA                  		bra.w	loc_19202
00019F68                            
00019F68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019F68                            
00019F68                            
00019F68                            Obj75_FindBlocks:			; XREF: loc_192AE
00019F68 4268 0036                  		clr.w	$36(a0)
00019F6C 43F8 D040                  		lea	($FFFFD040).w,a1
00019F70 703E                       		moveq	#$3E,d0
00019F72 7276                       		moveq	#$76,d1
00019F74 1428 0034                  		move.b	$34(a0),d2
00019F78                            
00019F78                            Obj75_FindLoop:
00019F78 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019F7A 6600                       		bne.s	loc_1946A	; if not, branch
00019F7C B429 0028                  		cmp.b	$28(a1),d2
00019F80 6600                       		bne.s	loc_1946A
00019F82 3149 0036                  		move.w	a1,$36(a0)
00019F86 6000                       		bra.s	locret_19472
00019F88                            ; ===========================================================================
00019F88                            
00019F88                            loc_1946A:
00019F88 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019F8C 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019F90                            
00019F90                            locret_19472:
00019F90 4E75                       		rts	
00019F92                            ; End of function Obj75_FindBlocks
00019F92                            
00019F92                            ; ===========================================================================
00019F92                            
00019F92                            loc_19474:				; XREF: Obj75_ShipIndex
00019F92 5368 003C                  		subq.w	#1,$3C(a0)
00019F96 6B00                       		bmi.s	loc_1947E
00019F98 6000 E412                  		bra.w	BossDefeated
00019F9C                            ; ===========================================================================
00019F9C                            
00019F9C                            loc_1947E:
00019F9C 5428 0025                  		addq.b	#2,$25(a0)
00019FA0 4268 0012                  		clr.w	$12(a0)
00019FA4 08E8 0000 0022             		bset	#0,$22(a0)
00019FAA 08A8 0007 0022             		bclr	#7,$22(a0)
00019FB0 4268 0010                  		clr.w	$10(a0)
00019FB4 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019FBA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019FBE 6600                       		bne.s	loc_194A8
00019FC0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019FC6                            
00019FC6                            loc_194A8:
00019FC6 6000 FD58                  		bra.w	loc_19202
00019FCA                            ; ===========================================================================
00019FCA                            
00019FCA                            loc_194AC:				; XREF: Obj75_ShipIndex
00019FCA 5268 003C                  		addq.w	#1,$3C(a0)
00019FCE 6700                       		beq.s	loc_194BC
00019FD0 6A00                       		bpl.s	loc_194C2
00019FD2 0668 0018 0012             		addi.w	#$18,$12(a0)
00019FD8 6000                       		bra.s	loc_194EE
00019FDA                            ; ===========================================================================
00019FDA                            
00019FDA                            loc_194BC:
00019FDA 4268 0012                  		clr.w	$12(a0)
00019FDE 6000                       		bra.s	loc_194EE
00019FE0                            ; ===========================================================================
00019FE0                            
00019FE0                            loc_194C2:
00019FE0 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019FE6 6500                       		bcs.s	loc_194DA
00019FE8 6700                       		beq.s	loc_194E0
00019FEA 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019FF0 6500                       		bcs.s	loc_194EE
00019FF2 5428 0025                  		addq.b	#2,$25(a0)
00019FF6 6000                       		bra.s	loc_194EE
00019FF8                            ; ===========================================================================
00019FF8                            
00019FF8                            loc_194DA:
00019FF8 5168 0012                  		subq.w	#8,$12(a0)
00019FFC 6000                       		bra.s	loc_194EE
00019FFE                            ; ===========================================================================
00019FFE                            
00019FFE                            loc_194E0:
00019FFE 4268 0012                  		clr.w	$12(a0)
0001A002 303C 0085                  		move.w	#$85,d0
0001A006 4EB9 0000 15CC             		jsr	(PlaySound).l	; play SYZ music
0001A00C                            
0001A00C                            loc_194EE:
0001A00C 6000 FD02                  		bra.w	loc_191F2
0001A010                            ; ===========================================================================
0001A010                            
0001A010                            loc_194F2:				; XREF: Obj75_ShipIndex
0001A010 317C 0400 0010             		move.w	#$400,$10(a0)
0001A016 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A01C 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001A022 6400                       		bcc.s	loc_1950C
0001A024 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A028 6000                       		bra.s	loc_19512
0001A02A                            ; ===========================================================================
0001A02A                            
0001A02A                            loc_1950C:
0001A02A 4A28 0001                  		tst.b	1(a0)
0001A02E 6A00                       		bpl.s	Obj75_ShipDelete
0001A030                            
0001A030                            loc_19512:
0001A030 6100 E3BC                  		bsr.w	BossMove
0001A034 6000 FCC6                  		bra.w	loc_191DE
0001A038                            ; ===========================================================================
0001A038                            
0001A038                            Obj75_ShipDelete:
0001A038 4EF9 0000 E06E             		jmp	DeleteObject
0001A03E                            ; ===========================================================================
0001A03E                            
0001A03E                            Obj75_FaceMain:				; XREF: Obj75_Index
0001A03E 7201                       		moveq	#1,d1
0001A040 2268 0034                  		movea.l	$34(a0),a1
0001A044 7000                       		moveq	#0,d0
0001A046 1029 0025                  		move.b	$25(a1),d0
0001A04A 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001A04E 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001A052 1141 001C                  		move.b	d1,$1C(a0)
0001A056 1010                       		move.b	(a0),d0
0001A058 B011                       		cmp.b	(a1),d0
0001A05A 6600                       		bne.s	Obj75_FaceDelete
0001A05C 6000                       		bra.s	loc_195BE
0001A05E                            ; ===========================================================================
0001A05E                            
0001A05E                            Obj75_FaceDelete:
0001A05E 4EF9 0000 E06E             		jmp	DeleteObject
0001A064                            ; ===========================================================================
0001A064 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001A068 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001A06C 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001A070                            ; ===========================================================================
0001A070                            
0001A070                            loc_19552:				; XREF: off_19546
0001A070 720A                       		moveq	#$A,d1
0001A072 4E75                       		rts	
0001A074                            ; ===========================================================================
0001A074                            
0001A074                            loc_19556:				; XREF: off_19546
0001A074 7206                       		moveq	#6,d1
0001A076 4E75                       		rts	
0001A078                            ; ===========================================================================
0001A078                            
0001A078                            loc_1955A:				; XREF: off_19546
0001A078 7000                       		moveq	#0,d0
0001A07A 1029 0028                  		move.b	$28(a1),d0
0001A07E 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001A082 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001A086                            ; ===========================================================================
0001A086 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001A08A 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001A08E                            ; ===========================================================================
0001A08E                            
0001A08E                            loc_19570:				; XREF: off_19568
0001A08E 6000                       		bra.s	loc_19574
0001A090                            ; ===========================================================================
0001A090                            
0001A090                            loc_19572:				; XREF: off_19568
0001A090 7206                       		moveq	#6,d1
0001A092                            
0001A092                            loc_19574:				; XREF: off_19546
0001A092 4A29 0020                  		tst.b	$20(a1)
0001A096 6600                       		bne.s	loc_1957E
0001A098 7205                       		moveq	#5,d1
0001A09A 4E75                       		rts	
0001A09C                            ; ===========================================================================
0001A09C                            
0001A09C                            loc_1957E:
0001A09C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A0A2 6500                       		bcs.s	locret_19588
0001A0A4 7204                       		moveq	#4,d1
0001A0A6                            
0001A0A6                            locret_19588:
0001A0A6 4E75                       		rts	
0001A0A8                            ; ===========================================================================
0001A0A8                            
0001A0A8                            Obj75_FlameMain:			; XREF: Obj75_Index
0001A0A8 117C 0007 001C             		move.b	#7,$1C(a0)
0001A0AE 2268 0034                  		movea.l	$34(a0),a1
0001A0B2 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A0B8 6600                       		bne.s	loc_195AA
0001A0BA 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A0C0 4A28 0001                  		tst.b	1(a0)
0001A0C4 6A00                       		bpl.s	Obj75_FlameDelete
0001A0C6 6000                       		bra.s	loc_195B6
0001A0C8                            ; ===========================================================================
0001A0C8                            
0001A0C8                            loc_195AA:
0001A0C8 4A69 0010                  		tst.w	$10(a1)
0001A0CC 6700                       		beq.s	loc_195B6
0001A0CE 117C 0008 001C             		move.b	#8,$1C(a0)
0001A0D4                            
0001A0D4                            loc_195B6:
0001A0D4 6000                       		bra.s	loc_195BE
0001A0D6                            ; ===========================================================================
0001A0D6                            
0001A0D6                            Obj75_FlameDelete:
0001A0D6 4EF9 0000 E06E             		jmp	DeleteObject
0001A0DC                            ; ===========================================================================
0001A0DC                            
0001A0DC                            loc_195BE:
0001A0DC 43F9 0001 8830             		lea	(Ani_Eggman).l,a1
0001A0E2 4EB9 0000 B090             		jsr	AnimateSprite
0001A0E8 2268 0034                  		movea.l	$34(a0),a1
0001A0EC 3169 0008 0008             		move.w	8(a1),8(a0)
0001A0F2 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A0F8                            
0001A0F8                            loc_195DA:
0001A0F8 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A0FE 7003                       		moveq	#3,d0
0001A100 C028 0022                  		and.b	$22(a0),d0
0001A104 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A10A 8128 0001                  		or.b	d0,1(a0)
0001A10E 4EF9 0000 E032             		jmp	DisplaySprite
0001A114                            ; ===========================================================================
0001A114                            
0001A114                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001A114 217C 0001 895C 0004        		move.l	#Map_BossItems,4(a0)
0001A11C 317C 246C 0002             		move.w	#$246C,2(a0)
0001A122 117C 0005 001A             		move.b	#5,$1A(a0)
0001A128 2268 0034                  		movea.l	$34(a0),a1
0001A12C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A132 6600                       		bne.s	loc_1961C
0001A134 4A28 0001                  		tst.b	1(a0)
0001A138 6A00                       		bpl.s	Obj75_SpikeDelete
0001A13A                            
0001A13A                            loc_1961C:
0001A13A 3169 0008 0008             		move.w	8(a1),8(a0)
0001A140 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A146 3028 003C                  		move.w	$3C(a0),d0
0001A14A 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A150 6600                       		bne.s	loc_19652
0001A152 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A158 6700                       		beq.s	loc_1964C
0001A15A 4A29 0028                  		tst.b	$28(a1)
0001A15E 6600                       		bne.s	loc_19658
0001A160 0C40 0094                  		cmpi.w	#$94,d0
0001A164 6C00                       		bge.s	loc_19658
0001A166 5E40                       		addq.w	#7,d0
0001A168 6000                       		bra.s	loc_19658
0001A16A                            ; ===========================================================================
0001A16A                            
0001A16A                            loc_1964C:
0001A16A 4A69 003C                  		tst.w	$3C(a1)
0001A16E 6A00                       		bpl.s	loc_19658
0001A170                            
0001A170                            loc_19652:
0001A170 4A40                       		tst.w	d0
0001A172 6F00                       		ble.s	loc_19658
0001A174 5B40                       		subq.w	#5,d0
0001A176                            
0001A176                            loc_19658:
0001A176 3140 003C                  		move.w	d0,$3C(a0)
0001A17A E440                       		asr.w	#2,d0
0001A17C D168 000C                  		add.w	d0,$C(a0)
0001A180 117C 0008 0019             		move.b	#8,$19(a0)
0001A186 117C 000C 0016             		move.b	#$C,$16(a0)
0001A18C 4228 0020                  		clr.b	$20(a0)
0001A190 2268 0034                  		movea.l	$34(a0),a1
0001A194 4A29 0020                  		tst.b	$20(a1)
0001A198 6700                       		beq.s	loc_19688
0001A19A 4A29 0029                  		tst.b	$29(a1)
0001A19E 6600                       		bne.s	loc_19688
0001A1A0 117C 0084 0020             		move.b	#$84,$20(a0)
0001A1A6                            
0001A1A6                            loc_19688:
0001A1A6 6000 FF50                  		bra.w	loc_195DA
0001A1AA                            ; ===========================================================================
0001A1AA                            
0001A1AA                            Obj75_SpikeDelete:
0001A1AA 4EF9 0000 E06E             		jmp	DeleteObject
0001A1B0                            ; ===========================================================================
0001A1B0                            ; ---------------------------------------------------------------------------
0001A1B0                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A1B0                            ; ---------------------------------------------------------------------------
0001A1B0                            
0001A1B0                            Obj76:					; XREF: Obj_Index
0001A1B0 7000                       		moveq	#0,d0
0001A1B2 1028 0024                  		move.b	$24(a0),d0
0001A1B6 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A1BA 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A1BE                            ; ===========================================================================
0001A1BE 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A1C0 0000                       		dc.w Obj76_Action-Obj76_Index
0001A1C2 0000                       		dc.w loc_19762-Obj76_Index
0001A1C4                            ; ===========================================================================
0001A1C4                            
0001A1C4                            Obj76_Main:				; XREF: Obj76_Index
0001A1C4 7800                       		moveq	#0,d4
0001A1C6 3A3C 2C10                  		move.w	#$2C10,d5
0001A1CA 7C09                       		moveq	#9,d6
0001A1CC 43D0                       		lea	(a0),a1
0001A1CE 6000                       		bra.s	Obj76_MakeBlock
0001A1D0                            ; ===========================================================================
0001A1D0                            
0001A1D0                            Obj76_Loop:
0001A1D0 4EB9 0000 E4B8             		jsr	SingleObjLoad
0001A1D6 6600                       		bne.s	Obj76_ExitLoop
0001A1D8                            
0001A1D8                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A1D8 12BC 0076                  		move.b	#$76,(a1)
0001A1DC 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A1E4 337C 4000 0002             		move.w	#$4000,2(a1)
0001A1EA 137C 0004 0001             		move.b	#4,1(a1)
0001A1F0 137C 0010 0019             		move.b	#$10,$19(a1)
0001A1F6 137C 0010 0016             		move.b	#$10,$16(a1)
0001A1FC 137C 0003 0018             		move.b	#3,$18(a1)
0001A202 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A206 337C 0582 000C             		move.w	#$582,$C(a1)
0001A20C 3344 0028                  		move.w	d4,$28(a1)
0001A210 0644 0101                  		addi.w	#$101,d4
0001A214 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A218 5429 0024                  		addq.b	#2,$24(a1)
0001A21C 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A220                            
0001A220                            Obj76_ExitLoop:
0001A220 4E75                       		rts	
0001A222                            ; ===========================================================================
0001A222                            
0001A222                            Obj76_Action:				; XREF: Obj76_Index
0001A222 1028 0029                  		move.b	$29(a0),d0
0001A226 B028 0028                  		cmp.b	$28(a0),d0
0001A22A 6700                       		beq.s	Obj76_Solid
0001A22C 4A00                       		tst.b	d0
0001A22E 6B00                       		bmi.s	loc_19718
0001A230                            
0001A230                            loc_19712:
0001A230 6100 0000                  		bsr.w	Obj76_Break
0001A234 6000                       		bra.s	Obj76_Display
0001A236                            ; ===========================================================================
0001A236                            
0001A236                            loc_19718:
0001A236 2268 0034                  		movea.l	$34(a0),a1
0001A23A 4A29 0021                  		tst.b	$21(a1)
0001A23E 67F0                       		beq.s	loc_19712
0001A240 3169 0008 0008             		move.w	8(a1),8(a0)
0001A246 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A24C 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A252 B2C8                       		cmpa.w	a0,a1
0001A254 6500                       		bcs.s	Obj76_Display
0001A256 3029 0012                  		move.w	$12(a1),d0
0001A25A 48C0                       		ext.l	d0
0001A25C E080                       		asr.l	#8,d0
0001A25E D168 000C                  		add.w	d0,$C(a0)
0001A262 6000                       		bra.s	Obj76_Display
0001A264                            ; ===========================================================================
0001A264                            
0001A264                            Obj76_Solid:				; XREF: Obj76_Action
0001A264 323C 001B                  		move.w	#$1B,d1
0001A268 343C 0010                  		move.w	#$10,d2
0001A26C 363C 0011                  		move.w	#$11,d3
0001A270 3828 0008                  		move.w	8(a0),d4
0001A274 4EB9 0001 0402             		jsr	SolidObject
0001A27A                            
0001A27A                            Obj76_Display:				; XREF: Obj76_Action
0001A27A 4EF9 0000 E032             		jmp	DisplaySprite
0001A280                            ; ===========================================================================
0001A280                            
0001A280                            loc_19762:				; XREF: Obj76_Index
0001A280 4A28 0001                  		tst.b	1(a0)
0001A284 6A00                       		bpl.s	Obj76_Delete
0001A286 4EB9 0000 DF9A             		jsr	ObjectFall
0001A28C 4EF9 0000 E032             		jmp	DisplaySprite
0001A292                            ; ===========================================================================
0001A292                            
0001A292                            Obj76_Delete:
0001A292 4EF9 0000 E06E             		jmp	DeleteObject
0001A298                            
0001A298                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A298                            
0001A298                            
0001A298                            Obj76_Break:				; XREF: Obj76_Action
0001A298 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A29C 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A2A0 7801                       		moveq	#1,d4
0001A2A2 7203                       		moveq	#3,d1
0001A2A4 7438                       		moveq	#$38,d2
0001A2A6 5428 0024                  		addq.b	#2,$24(a0)
0001A2AA 117C 0008 0019             		move.b	#8,$19(a0)
0001A2B0 117C 0008 0016             		move.b	#8,$16(a0)
0001A2B6 43D0                       		lea	(a0),a1
0001A2B8 6000                       		bra.s	Obj76_MakeFrag
0001A2BA                            ; ===========================================================================
0001A2BA                            
0001A2BA                            Obj76_LoopFrag:
0001A2BA 4EB9 0000 E4CE             		jsr	SingleObjLoad2
0001A2C0 6600                       		bne.s	loc_197D4
0001A2C2                            
0001A2C2                            Obj76_MakeFrag:
0001A2C2 45D0                       		lea	(a0),a2
0001A2C4 47D1                       		lea	(a1),a3
0001A2C6 7603                       		moveq	#3,d3
0001A2C8                            
0001A2C8                            loc_197AA:
0001A2C8 26DA                       		move.l	(a2)+,(a3)+
0001A2CA 26DA                       		move.l	(a2)+,(a3)+
0001A2CC 26DA                       		move.l	(a2)+,(a3)+
0001A2CE 26DA                       		move.l	(a2)+,(a3)+
0001A2D0 51CB FFF6                  		dbf	d3,loc_197AA
0001A2D4                            
0001A2D4 335C 0010                  		move.w	(a4)+,$10(a1)
0001A2D8 335C 0012                  		move.w	(a4)+,$12(a1)
0001A2DC 361D                       		move.w	(a5)+,d3
0001A2DE D769 0008                  		add.w	d3,8(a1)
0001A2E2 361D                       		move.w	(a5)+,d3
0001A2E4 D769 000C                  		add.w	d3,$C(a1)
0001A2E8 1344 001A                  		move.b	d4,$1A(a1)
0001A2EC 5244                       		addq.w	#1,d4
0001A2EE 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A2F2                            
0001A2F2                            loc_197D4:
0001A2F2 303C 00CB                  		move.w	#$CB,d0
0001A2F6 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A2FC                            ; End of function Obj76_Break
0001A2FC                            
0001A2FC                            ; ===========================================================================
0001A2FC FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A300 0180 FE00                  		dc.w $180, $FE00
0001A304 FF00 FF00                  		dc.w $FF00, $FF00
0001A308 0100 FF00                  		dc.w $100, $FF00
0001A30C FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A310 0010 0000                  		dc.w $10, 0
0001A314 0000 0010                  		dc.w 0,	$10
0001A318 0010 0010                  		dc.w $10, $10
0001A31C                            ; ---------------------------------------------------------------------------
0001A31C                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A31C                            ; ---------------------------------------------------------------------------
0001A31C                            Map_obj76:
0001A31C                            	include "_maps\obj76.asm"
0001A31C                            ; ---------------------------------------------------------------------------
0001A31C                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A31C                            ; ---------------------------------------------------------------------------
0001A31C 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A320 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A324 0000                       		dc.w byte_19826-Map_obj76
0001A326 02                         byte_19808:	dc.b 2
0001A327 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A32C 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A331 00                         		dc.b 0
0001A332 01                         byte_19814:	dc.b 1
0001A333 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A338 01                         byte_1981A:	dc.b 1
0001A339 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A33E 01                         byte_19820:	dc.b 1
0001A33F F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A344 01                         byte_19826:	dc.b 1
0001A345 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A34A                            		even
0001A34A                            		even
0001A34A                            
0001A34A                            ; ===========================================================================
0001A34A                            
0001A34A                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A34A 4EF9 0000 E06E             		jmp	DeleteObject
0001A350                            ; ===========================================================================
0001A350                            ; ---------------------------------------------------------------------------
0001A350                            ; Object 82 - Eggman (SBZ2)
0001A350                            ; ---------------------------------------------------------------------------
0001A350                            
0001A350                            Obj82:					; XREF: Obj_Index
0001A350 7000                       		moveq	#0,d0
0001A352 1028 0024                  		move.b	$24(a0),d0
0001A356 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A35A 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A35E                            ; ===========================================================================
0001A35E 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A360 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A362 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A364                            
0001A364 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A367 0400 03                    		dc.b 4,	0, 3
0001A36A                            ; ===========================================================================
0001A36A                            
0001A36A                            Obj82_Main:				; XREF: Obj82_Index
0001A36A 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A36E 317C 2160 0008             		move.w	#$2160,8(a0)
0001A374 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A37A 117C 000F 0020             		move.b	#$F,$20(a0)
0001A380 117C 0010 0021             		move.b	#$10,$21(a0)
0001A386 08A8 0000 0022             		bclr	#0,$22(a0)
0001A38C 4228 0025                  		clr.b	$25(a0)
0001A390 115A 0024                  		move.b	(a2)+,$24(a0)
0001A394 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A398 115A 0018                  		move.b	(a2)+,$18(a0)
0001A39C 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A3A4 317C 0400 0002             		move.w	#$400,2(a0)
0001A3AA 117C 0004 0001             		move.b	#4,1(a0)
0001A3B0 08E8 0007 0001             		bset	#7,1(a0)
0001A3B6 117C 0020 0019             		move.b	#$20,$19(a0)
0001A3BC 4EB9 0000 E4CE             		jsr	SingleObjLoad2
0001A3C2 6600                       		bne.s	Obj82_Eggman
0001A3C4 2348 0034                  		move.l	a0,$34(a1)
0001A3C8 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A3CC 337C 2130 0008             		move.w	#$2130,8(a1)
0001A3D2 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A3D8 4228 0025                  		clr.b	$25(a0)
0001A3DC 135A 0024                  		move.b	(a2)+,$24(a1)
0001A3E0 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A3E4 135A 0018                  		move.b	(a2)+,$18(a1)
0001A3E8 237C 0000 C7C4 0004        		move.l	#Map_obj32,4(a1)
0001A3F0 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A3F6 137C 0004 0001             		move.b	#4,1(a1)
0001A3FC 08E9 0007 0001             		bset	#7,1(a1)
0001A402 137C 0010 0019             		move.b	#$10,$19(a1)
0001A408 137C 0000 001A             		move.b	#0,$1A(a1)
0001A40E                            
0001A40E                            Obj82_Eggman:				; XREF: Obj82_Index
0001A40E 7000                       		moveq	#0,d0
0001A410 1028 0025                  		move.b	$25(a0),d0
0001A414 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A418 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A41C 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A420 4EB9 0000 B090             		jsr	AnimateSprite
0001A426 4EF9 0000 E032             		jmp	DisplaySprite
0001A42C                            ; ===========================================================================
0001A42C 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A42E 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A430 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A432 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A434                            ; ===========================================================================
0001A434                            
0001A434                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A434 3028 0008                  		move.w	8(a0),d0
0001A438 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A43C 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A440 6400                       		bcc.s	loc_19934	; if not, branch
0001A442 5428 0025                  		addq.b	#2,$25(a0)
0001A446 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A44C 117C 0001 001C             		move.b	#1,$1C(a0)
0001A452                            
0001A452                            loc_19934:				; XREF: Obj82_EggIndex
0001A452 4EF9 0000 E00C             		jmp	SpeedToPos
0001A458                            ; ===========================================================================
0001A458                            
0001A458                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A458 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A45C 6600                       		bne.s	loc_19954	; if time remains, branch
0001A45E 5428 0025                  		addq.b	#2,$25(a0)
0001A462 117C 0002 001C             		move.b	#2,$1C(a0)
0001A468 5868 000C                  		addq.w	#4,$C(a0)
0001A46C 317C 000F 003C             		move.w	#15,$3C(a0)
0001A472                            
0001A472                            loc_19954:
0001A472 60DE                       		bra.s	loc_19934
0001A474                            ; ===========================================================================
0001A474                            
0001A474                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A474 5368 003C                  		subq.w	#1,$3C(a0)
0001A478 6E00                       		bgt.s	loc_199D0
0001A47A 6600                       		bne.s	loc_1996A
0001A47C 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A482 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A488                            
0001A488                            loc_1996A:
0001A488 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A48E 6E00                       		bgt.s	loc_19976
0001A490 4268 0010                  		clr.w	$10(a0)
0001A494                            
0001A494                            loc_19976:
0001A494 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A49A 4A68 0012                  		tst.w	$12(a0)
0001A49E 6B00                       		bmi.s	Obj82_FindBlocks
0001A4A0 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A4A6 6500                       		bcs.s	Obj82_FindBlocks
0001A4A8 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A4AE 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A4B4 6500                       		bcs.s	Obj82_FindBlocks
0001A4B6 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A4BC 4268 0012                  		clr.w	$12(a0)
0001A4C0                            
0001A4C0                            Obj82_FindBlocks:
0001A4C0 3028 0010                  		move.w	$10(a0),d0
0001A4C4 8068 0012                  		or.w	$12(a0),d0
0001A4C8 6600                       		bne.s	loc_199D0
0001A4CA 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A4CE 703E                       		moveq	#$3E,d0
0001A4D0 7240                       		moveq	#$40,d1
0001A4D2                            
0001A4D2                            Obj82_FindLoop:	
0001A4D2 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A4D4 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A4D8 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A4DC                            
0001A4DC 6600                       		bne.s	loc_199D0
0001A4DE 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A4E4 5428 0025                  		addq.b	#2,$25(a0)
0001A4E8 117C 0001 001C             		move.b	#1,$1C(a0)
0001A4EE                            
0001A4EE                            loc_199D0:
0001A4EE 6000 FF62                  		bra.w	loc_19934
0001A4F2                            ; ===========================================================================
0001A4F2                            
0001A4F2                            Obj82_Switch:				; XREF: Obj82_Index
0001A4F2 7000                       		moveq	#0,d0
0001A4F4 1028 0025                  		move.b	$25(a0),d0
0001A4F8 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A4FC 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A500                            ; ===========================================================================
0001A500 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A502 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A504                            ; ===========================================================================
0001A504                            
0001A504                            loc_199E6:				; XREF: Obj82_SwIndex
0001A504 2268 0034                  		movea.l	$34(a0),a1
0001A508 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A50E 6600                       		bne.s	Obj82_SwDisplay
0001A510 117C 0001 001A             		move.b	#1,$1A(a0)
0001A516 5428 0025                  		addq.b	#2,$25(a0)
0001A51A                            
0001A51A                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A51A 4EF9 0000 E032             		jmp	DisplaySprite
0001A520                            ; ===========================================================================
0001A520                            Ani_obj82:
0001A520                            	include "_anim\obj82.asm"
0001A520                            ; ---------------------------------------------------------------------------
0001A520                            ; Animation script - Eggman (SBZ2)
0001A520                            ; ---------------------------------------------------------------------------
0001A520 0000                       		dc.w byte_19A10-Ani_obj82
0001A522 0000                       		dc.w byte_19A14-Ani_obj82
0001A524 0000                       		dc.w byte_19A18-Ani_obj82
0001A526 0000                       		dc.w byte_19A20-Ani_obj82
0001A528 0000                       		dc.w byte_19A24-Ani_obj82
0001A52A 0000                       		dc.w byte_19A2A-Ani_obj82
0001A52C 0000                       		dc.w byte_19A30-Ani_obj82
0001A52E 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A532 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A536 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A53E 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A542 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A548 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A54E 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A552                            		even
0001A552                            		even
0001A552                            
0001A552                            ; ---------------------------------------------------------------------------
0001A552                            ; Sprite mappings - Eggman (SBZ2)
0001A552                            ; ---------------------------------------------------------------------------
0001A552                            Map_obj82:
0001A552                            	include "_maps\obj82.asm"
0001A552                            ; ================================================================================
0001A552                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A552                            ; ================================================================================
0001A552                            
0001A552                            DATAA16Z12RYSAF:
0001A552 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A556 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A55A 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A55E 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A562 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A566 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A568 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A569 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A56E E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A573 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A578 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A579 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A57E E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A583 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A588 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A58D 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A58E E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A593 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A598 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A59D FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A5A2 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A5A3 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A5A8 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A5AD F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A5B2 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A5B3 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A5B8 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A5BD 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A5C2 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A5C7 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A5C8 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A5CD E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A5D2 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A5D7 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A5DC 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A5DD E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A5E2 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A5E7 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A5EC 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A5F1 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A5F6 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A5FB F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A600 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A601 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A606 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A60B 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A610 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A615 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A616 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A61B E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A620 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A625 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A62A EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A62F 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A630 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A635 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A63A E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A63F 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A644 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A649 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A64E 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A653 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A658 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A659 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A65E F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A663 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A668                            	even
0001A668                            	even
0001A668                            
0001A668                            ; ===========================================================================
0001A668                            ; ---------------------------------------------------------------------------
0001A668                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A668                            ; ---------------------------------------------------------------------------
0001A668                            
0001A668                            Obj83:					; XREF: Obj_Index
0001A668 7000                       		moveq	#0,d0
0001A66A 1028 0024                  		move.b	$24(a0),d0
0001A66E 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A672 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A676                            ; ===========================================================================
0001A676 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A678 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A67A 0000                       		dc.w loc_19C36-Obj83_Index
0001A67C 0000                       		dc.w loc_19C62-Obj83_Index
0001A67E 0000                       		dc.w loc_19C72-Obj83_Index
0001A680 0000                       		dc.w loc_19C80-Obj83_Index
0001A682                            ; ===========================================================================
0001A682                            
0001A682                            Obj83_Main:				; XREF: Obj83_Index
0001A682 317C 2080 0008             		move.w	#$2080,8(a0)
0001A688 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A68E 117C 0080 0019             		move.b	#$80,$19(a0)
0001A694 117C 0010 0016             		move.b	#$10,$16(a0)
0001A69A 117C 0004 0001             		move.b	#4,1(a0)
0001A6A0 08E8 0007 0001             		bset	#7,1(a0)
0001A6A6 7800                       		moveq	#0,d4
0001A6A8 3A3C 2010                  		move.w	#$2010,d5
0001A6AC 7C07                       		moveq	#7,d6
0001A6AE 45E8 0030                  		lea	$30(a0),a2
0001A6B2                            
0001A6B2                            Obj83_MakeBlock:
0001A6B2 4EB9 0000 E4B8             		jsr	SingleObjLoad
0001A6B8 6600                       		bne.s	Obj83_ExitMake
0001A6BA 34C9                       		move.w	a1,(a2)+
0001A6BC 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A6C0 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A6C8 337C 4518 0002             		move.w	#$4518,2(a1)
0001A6CE 137C 0004 0001             		move.b	#4,1(a1)
0001A6D4 137C 0010 0019             		move.b	#$10,$19(a1)
0001A6DA 137C 0010 0016             		move.b	#$10,$16(a1)
0001A6E0 137C 0003 0018             		move.b	#3,$18(a1)
0001A6E6 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A6EA 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A6F0 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A6F4 137C 0008 0024             		move.b	#8,$24(a1)
0001A6FA 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A6FE                            
0001A6FE                            Obj83_ExitMake:
0001A6FE 5428 0024                  		addq.b	#2,$24(a0)
0001A702 4E75                       		rts	
0001A704                            ; ===========================================================================
0001A704                            
0001A704                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A704 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A70A 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A70C 4228 001A                  		clr.b	$1A(a0)
0001A710 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A714                            
0001A714                            Obj83_Solid:
0001A714 7000                       		moveq	#0,d0
0001A716 1028 001A                  		move.b	$1A(a0),d0
0001A71A 4400                       		neg.b	d0
0001A71C 4880                       		ext.w	d0
0001A71E 5040                       		addq.w	#8,d0
0001A720 E940                       		asl.w	#4,d0
0001A722 383C 2100                  		move.w	#$2100,d4
0001A726 9840                       		sub.w	d0,d4
0001A728 1140 0019                  		move.b	d0,$19(a0)
0001A72C 3144 0008                  		move.w	d4,8(a0)
0001A730 720B                       		moveq	#$B,d1
0001A732 D240                       		add.w	d0,d1
0001A734 7410                       		moveq	#$10,d2
0001A736 7611                       		moveq	#$11,d3
0001A738 4EF9 0001 0402             		jmp	SolidObject
0001A73E                            ; ===========================================================================
0001A73E                            
0001A73E                            loc_19C36:				; XREF: Obj83_Index
0001A73E 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A744 6400                       		bcc.s	Obj83_Solid2
0001A746 70FF                       		moveq	#-1,d0
0001A748 1028 001A                  		move.b	$1A(a0),d0
0001A74C 4880                       		ext.w	d0
0001A74E D040                       		add.w	d0,d0
0001A750 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A754 2240                       		movea.l	d0,a1
0001A756 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A75C 5228 001A                  		addq.b	#1,$1A(a0)
0001A760 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A766 6700                       		beq.s	loc_19C62
0001A768                            
0001A768                            Obj83_Solid2:
0001A768 60AA                       		bra.s	Obj83_Solid
0001A76A                            ; ===========================================================================
0001A76A                            
0001A76A                            loc_19C62:				; XREF: Obj83_Index
0001A76A 08A8 0003 0022             		bclr	#3,$22(a0)
0001A770 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A776 6000 FBD2                  		bra.w	loc_1982C
0001A77A                            ; ===========================================================================
0001A77A                            
0001A77A                            loc_19C72:				; XREF: Obj83_Index
0001A77A 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A780 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A782 4EF9 0000 E032             		jmp	DisplaySprite
0001A788                            ; ===========================================================================
0001A788                            
0001A788                            loc_19C80:				; XREF: Obj83_Index
0001A788 4A28 0001                  		tst.b	1(a0)
0001A78C 6A00 FBBC                  		bpl.w	loc_1982C
0001A790 4EB9 0000 DF9A             		jsr	ObjectFall
0001A796 4EF9 0000 E032             		jmp	DisplaySprite
0001A79C                            ; ===========================================================================
0001A79C                            
0001A79C                            Obj83_Break:				; XREF: loc_19C72
0001A79C 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A7A0 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A7A4 7801                       		moveq	#1,d4
0001A7A6 7203                       		moveq	#3,d1
0001A7A8 7438                       		moveq	#$38,d2
0001A7AA 5428 0024                  		addq.b	#2,$24(a0)
0001A7AE 117C 0008 0019             		move.b	#8,$19(a0)
0001A7B4 117C 0008 0016             		move.b	#8,$16(a0)
0001A7BA 43D0                       		lea	(a0),a1
0001A7BC 6000                       		bra.s	Obj83_MakeFrag
0001A7BE                            ; ===========================================================================
0001A7BE                            
0001A7BE                            Obj83_LoopFrag:
0001A7BE 4EB9 0000 E4CE             		jsr	SingleObjLoad2
0001A7C4 6600                       		bne.s	Obj83_BreakSnd
0001A7C6                            
0001A7C6                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A7C6 45D0                       		lea	(a0),a2
0001A7C8 47D1                       		lea	(a1),a3
0001A7CA 7603                       		moveq	#3,d3
0001A7CC                            
0001A7CC                            loc_19CC4:
0001A7CC 26DA                       		move.l	(a2)+,(a3)+
0001A7CE 26DA                       		move.l	(a2)+,(a3)+
0001A7D0 26DA                       		move.l	(a2)+,(a3)+
0001A7D2 26DA                       		move.l	(a2)+,(a3)+
0001A7D4 51CB FFF6                  		dbf	d3,loc_19CC4
0001A7D8                            
0001A7D8 335C 0012                  		move.w	(a4)+,$12(a1)
0001A7DC 361D                       		move.w	(a5)+,d3
0001A7DE D769 0008                  		add.w	d3,8(a1)
0001A7E2 361D                       		move.w	(a5)+,d3
0001A7E4 D769 000C                  		add.w	d3,$C(a1)
0001A7E8 1344 001A                  		move.b	d4,$1A(a1)
0001A7EC 5244                       		addq.w	#1,d4
0001A7EE 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A7F2                            
0001A7F2                            Obj83_BreakSnd:
0001A7F2 303C 00CB                  		move.w	#$CB,d0
0001A7F6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A7FC 4EF9 0000 E032             		jmp	DisplaySprite
0001A802                            ; ===========================================================================
0001A802 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A806 0120 00C0                  		dc.w $120, $C0
0001A80A FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A80E 0010 0000                  		dc.w $10, 0
0001A812 0000 0010                  		dc.w 0,	$10
0001A816 0010 0010                  		dc.w $10, $10
0001A81A                            ; ---------------------------------------------------------------------------
0001A81A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A81A                            ; ---------------------------------------------------------------------------
0001A81A                            Map_obj83:
0001A81A                            	include "_maps\obj83.asm"
0001A81A                            ; ---------------------------------------------------------------------------
0001A81A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A81A                            ; ---------------------------------------------------------------------------
0001A81A 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A81E 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A822 0000                       		dc.w byte_19D46-Map_obj83
0001A824 01                         byte_19D1C:	dc.b 1
0001A825 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A82A 02                         byte_19D22:	dc.b 2
0001A82B F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A830 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A835 00                         		dc.b 0
0001A836 02                         byte_19D2E:	dc.b 2
0001A837 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A83C F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A841 00                         		dc.b 0
0001A842 02                         byte_19D3A:	dc.b 2
0001A843 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A848 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A84D 00                         		dc.b 0
0001A84E 02                         byte_19D46:	dc.b 2
0001A84F F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A854 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A85A 00                         		even
0001A85A 00                         		even
0001A85A                            
0001A85A                            ; ===========================================================================
0001A85A                            ; ---------------------------------------------------------------------------
0001A85A                            ; Object 85 - Eggman (FZ)
0001A85A                            ; ---------------------------------------------------------------------------
0001A85A                            
0001A85A                            Obj85_Delete:
0001A85A 4EF9 0000 E06E             		jmp	DeleteObject
0001A860                            ; ===========================================================================
0001A860                            
0001A860                            Obj85:					; XREF: Obj_Index
0001A860 7000                       		moveq	#0,d0
0001A862 1028 0024                  		move.b	$24(a0),d0
0001A866 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A86A 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A86E                            ; ===========================================================================
0001A86E 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A870 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A872 0000                       		dc.w loc_1A38E-Obj85_Index
0001A874 0000                       		dc.w loc_1A346-Obj85_Index
0001A876 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A878 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A87A 0000                       		dc.w loc_1A264-Obj85_Index
0001A87C                            
0001A87C 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A882 0001 A552                  		dc.l Map_obj82		; mappings pointer
0001A886 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A88C 0000 0000                  		dc.l Map_obj84
0001A890 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A896 0000 0000                  		dc.l Map_FZBoss
0001A89A 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A8A0 0001 A552                  		dc.l Map_obj82
0001A8A4 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A8AA 0001 8894                  		dc.l Map_Eggman
0001A8AE 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A8B4 0001 8894                  		dc.l Map_Eggman
0001A8B8                            
0001A8B8 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A8BD 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A8C2 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A8C7 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A8CC 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A8D1 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A8D6                            ; ===========================================================================
0001A8D6                            
0001A8D6                            Obj85_Main:				; XREF: Obj85_Index
0001A8D6 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A8DA 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A8DE 2248                       		movea.l	a0,a1
0001A8E0 7205                       		moveq	#5,d1
0001A8E2 6000                       		bra.s	Obj85_LoadBoss
0001A8E4                            ; ===========================================================================
0001A8E4                            
0001A8E4                            Obj85_Loop:
0001A8E4 4EB9 0000 E4CE             		jsr	SingleObjLoad2
0001A8EA 6600                       		bne.s	loc_19E20
0001A8EC                            
0001A8EC                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A8EC 12BC 0085                  		move.b	#$85,(a1)
0001A8F0 335A 0008                  		move.w	(a2)+,8(a1)
0001A8F4 335A 000C                  		move.w	(a2)+,$C(a1)
0001A8F8 335A 0002                  		move.w	(a2)+,2(a1)
0001A8FC 235A 0004                  		move.l	(a2)+,4(a1)
0001A900 135B 0024                  		move.b	(a3)+,$24(a1)
0001A904 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A908 135B 0018                  		move.b	(a3)+,$18(a1)
0001A90C 135B 0017                  		move.b	(a3)+,$17(a1)
0001A910 135B 0016                  		move.b	(a3)+,$16(a1)
0001A914 137C 0004 0001             		move.b	#4,1(a1)
0001A91A 08E8 0007 0001             		bset	#7,1(a0)
0001A920 2348 0034                  		move.l	a0,$34(a1)
0001A924 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A928                            
0001A928                            loc_19E20:
0001A928 45E8 0036                  		lea	$36(a0),a2
0001A92C 4EB9 0000 E4B8             		jsr	SingleObjLoad
0001A932 6600                       		bne.s	loc_19E5A
0001A934 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A938 3489                       		move.w	a1,(a2)
0001A93A 2348 0034                  		move.l	a0,$34(a1)
0001A93E 45E8 0038                  		lea	$38(a0),a2
0001A942 7400                       		moveq	#0,d2
0001A944 7203                       		moveq	#3,d1
0001A946                            
0001A946                            loc_19E3E:
0001A946 4EB9 0000 E4CE             		jsr	SingleObjLoad2
0001A94C 6600                       		bne.s	loc_19E5A
0001A94E 34C9                       		move.w	a1,(a2)+
0001A950 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A954 2348 0034                  		move.l	a0,$34(a1)
0001A958 1342 0028                  		move.b	d2,$28(a1)
0001A95C 5442                       		addq.w	#2,d2
0001A95E 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A962                            
0001A962                            loc_19E5A:
0001A962 317C 0000 0034             		move.w	#0,$34(a0)
0001A968 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A96E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A974                            
0001A974                            Obj85_Eggman:				; XREF: Obj85_Index
0001A974 7000                       		moveq	#0,d0
0001A976 1028 0034                  		move.b	$34(a0),d0
0001A97A 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A97E 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A982 4EF9 0000 E032             		jmp	DisplaySprite
0001A988                            ; ===========================================================================
0001A988 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A98C 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A990 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A994 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A998                            ; ===========================================================================
0001A998                            
0001A998                            loc_19E90:				; XREF: off_19E80
0001A998 4AB8 F680                  		tst.l	($FFFFF680).w
0001A99C 6600                       		bne.s	loc_19EA2
0001A99E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A9A4 6500                       		bcs.s	loc_19EA2
0001A9A6 5428 0034                  		addq.b	#2,$34(a0)
0001A9AA                            
0001A9AA                            loc_19EA2:
0001A9AA 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A9AE 4E75                       		rts	
0001A9B0                            ; ===========================================================================
0001A9B0                            
0001A9B0                            loc_19EA8:				; XREF: off_19E80
0001A9B0 4A68 0030                  		tst.w	$30(a0)
0001A9B4 6A00                       		bpl.s	loc_19F10
0001A9B6 4268 0030                  		clr.w	$30(a0)
0001A9BA 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001A9C0 0240 000C                  		andi.w	#$C,d0
0001A9C4 3200                       		move.w	d0,d1
0001A9C6 5441                       		addq.w	#2,d1
0001A9C8 4A80                       		tst.l	d0
0001A9CA 6A00                       		bpl.s	loc_19EC6
0001A9CC C141                       		exg	d1,d0
0001A9CE                            
0001A9CE                            loc_19EC6:
0001A9CE 43FA 0000                  		lea	word_19FD6(pc),a1
0001A9D2 3031 0000                  		move.w	(a1,d0.w),d0
0001A9D6 3231 1000                  		move.w	(a1,d1.w),d1
0001A9DA 3140 0030                  		move.w	d0,$30(a0)
0001A9DE 74FF                       		moveq	#-1,d2
0001A9E0 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A9E4 2242                       		movea.l	d2,a1
0001A9E6 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A9EC 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A9F2 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A9F6 2242                       		movea.l	d2,a1
0001A9F8 137C 0001 0029             		move.b	#1,$29(a1)
0001A9FE 337C 0000 0030             		move.w	#0,$30(a1)
0001AA04 317C 0001 0032             		move.w	#1,$32(a0)
0001AA0A 4228 0035                  		clr.b	$35(a0)
0001AA0E 303C 00B7                  		move.w	#$B7,d0
0001AA12 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001AA18                            
0001AA18                            loc_19F10:
0001AA18 4A68 0032                  		tst.w	$32(a0)
0001AA1C 6B00 0000                  		bmi.w	loc_19FA6
0001AA20 08A8 0000 0022             		bclr	#0,$22(a0)
0001AA26 3038 D008                  		move.w	($FFFFD008).w,d0
0001AA2A 9068 0008                  		sub.w	8(a0),d0
0001AA2E 6500                       		bcs.s	loc_19F2E
0001AA30 08E8 0000 0022             		bset	#0,$22(a0)
0001AA36                            
0001AA36                            loc_19F2E:
0001AA36 323C 002B                  		move.w	#$2B,d1
0001AA3A 343C 0014                  		move.w	#$14,d2
0001AA3E 363C 0014                  		move.w	#$14,d3
0001AA42 3828 0008                  		move.w	8(a0),d4
0001AA46 4EB9 0001 0402             		jsr	SolidObject
0001AA4C 4A44                       		tst.w	d4
0001AA4E 6E00                       		bgt.s	loc_19F50
0001AA50                            
0001AA50                            loc_19F48:
0001AA50 4A28 0035                  		tst.b	$35(a0)
0001AA54 6600                       		bne.s	loc_19F88
0001AA56 6000                       		bra.s	loc_19F96
0001AA58                            ; ===========================================================================
0001AA58                            
0001AA58                            loc_19F50:
0001AA58 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001AA5C 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001AA62 66EC                       		bne.s	loc_19F48
0001AA64 303C 0300                  		move.w	#$300,d0
0001AA68 0828 0000 0022             		btst	#0,$22(a0)
0001AA6E 6600                       		bne.s	loc_19F6A
0001AA70 4440                       		neg.w	d0
0001AA72                            
0001AA72                            loc_19F6A:
0001AA72 31C0 D010                  		move.w	d0,($FFFFD010).w
0001AA76 4A28 0035                  		tst.b	$35(a0)
0001AA7A 6600                       		bne.s	loc_19F88
0001AA7C 5328 0021                  		subq.b	#1,$21(a0)
0001AA80 117C 0064 0035             		move.b	#$64,$35(a0)
0001AA86 303C 00AC                  		move.w	#$AC,d0
0001AA8A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AA90                            
0001AA90                            loc_19F88:
0001AA90 5328 0035                  		subq.b	#1,$35(a0)
0001AA94 6700                       		beq.s	loc_19F96
0001AA96 117C 0003 001C             		move.b	#3,$1C(a0)
0001AA9C 6000                       		bra.s	loc_19F9C
0001AA9E                            ; ===========================================================================
0001AA9E                            
0001AA9E                            loc_19F96:
0001AA9E 117C 0001 001C             		move.b	#1,$1C(a0)
0001AAA4                            
0001AAA4                            loc_19F9C:
0001AAA4 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001AAA8 4EF9 0000 B090             		jmp	AnimateSprite
0001AAAE                            ; ===========================================================================
0001AAAE                            
0001AAAE                            loc_19FA6:
0001AAAE 4A28 0021                  		tst.b	$21(a0)
0001AAB2 6700                       		beq.s	loc_19FBC
0001AAB4 5428 0034                  		addq.b	#2,$34(a0)
0001AAB8 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AABE 4268 0032                  		clr.w	$32(a0)
0001AAC2 4E75                       		rts	
0001AAC4                            ; ===========================================================================
0001AAC4                            
0001AAC4                            loc_19FBC:
0001AAC4 117C 0006 0034             		move.b	#6,$34(a0)
0001AACA 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001AAD0 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AAD6 117C 0014 0016             		move.b	#$14,$16(a0)
0001AADC 4E75                       		rts	
0001AADE                            ; ===========================================================================
0001AADE 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001AAEE                            ; ===========================================================================
0001AAEE                            
0001AAEE                            loc_19FE6:				; XREF: off_19E80
0001AAEE 70FF                       		moveq	#-1,d0
0001AAF0 3028 0036                  		move.w	$36(a0),d0
0001AAF4 2240                       		movea.l	d0,a1
0001AAF6 4A68 0030                  		tst.w	$30(a0)
0001AAFA 6A00                       		bpl.s	loc_1A000
0001AAFC 4268 0030                  		clr.w	$30(a0)
0001AB00 137C 00FF 0029             		move.b	#-1,$29(a1)
0001AB06 6100                       		bsr.s	loc_1A020
0001AB08                            
0001AB08                            loc_1A000:
0001AB08 700F                       		moveq	#$F,d0
0001AB0A C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001AB0E 6600                       		bne.s	loc_1A00A
0001AB10 6100                       		bsr.s	loc_1A020
0001AB12                            
0001AB12                            loc_1A00A:
0001AB12 4A68 0032                  		tst.w	$32(a0)
0001AB16 6700                       		beq.s	locret_1A01E
0001AB18 5528 0034                  		subq.b	#2,$34(a0)
0001AB1C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AB22 4268 0032                  		clr.w	$32(a0)
0001AB26                            
0001AB26                            locret_1A01E:
0001AB26 4E75                       		rts	
0001AB28                            ; ===========================================================================
0001AB28                            
0001AB28                            loc_1A020:
0001AB28 303C 00B1                  		move.w	#$B1,d0
0001AB2C 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play electricity sound
0001AB32                            ; ===========================================================================
0001AB32                            
0001AB32                            loc_1A02A:				; XREF: off_19E80
0001AB32 117C 0030 0017             		move.b	#$30,$17(a0)
0001AB38 08E8 0000 0022             		bset	#0,$22(a0)
0001AB3E 4EB9 0000 E00C             		jsr	SpeedToPos
0001AB44 117C 0006 001A             		move.b	#6,$1A(a0)
0001AB4A 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AB50 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001AB56 6500                       		bcs.s	loc_1A070
0001AB58 317C 059C 000C             		move.w	#$59C,$C(a0)
0001AB5E 5428 0034                  		addq.b	#2,$34(a0)
0001AB62 117C 0020 0017             		move.b	#$20,$17(a0)
0001AB68 317C 0100 0010             		move.w	#$100,$10(a0)
0001AB6E 317C FF00 0012             		move.w	#-$100,$12(a0)
0001AB74 5438 F742                  		addq.b	#2,($FFFFF742).w
0001AB78                            
0001AB78                            loc_1A070:
0001AB78 6000 0000                  		bra.w	loc_1A166
0001AB7C                            ; ===========================================================================
0001AB7C                            
0001AB7C                            loc_1A074:				; XREF: off_19E80
0001AB7C 08E8 0000 0022             		bset	#0,$22(a0)
0001AB82 117C 0004 001C             		move.b	#4,$1C(a0)
0001AB88 4EB9 0000 E00C             		jsr	SpeedToPos
0001AB8E 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AB94 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001AB9A 6500                       		bcs.s	loc_1A09A
0001AB9C 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001ABA2                            
0001ABA2                            loc_1A09A:
0001ABA2 317C 0400 0010             		move.w	#$400,$10(a0)
0001ABA8 3028 0008                  		move.w	8(a0),d0
0001ABAC 9078 D008                  		sub.w	($FFFFD008).w,d0
0001ABB0 6A00                       		bpl.s	loc_1A0B4
0001ABB2 317C 0500 0010             		move.w	#$500,$10(a0)
0001ABB8 6000 0000                  		bra.w	loc_1A0F2
0001ABBC                            ; ===========================================================================
0001ABBC                            
0001ABBC                            loc_1A0B4:
0001ABBC 0440 0070                  		subi.w	#$70,d0
0001ABC0 6500                       		bcs.s	loc_1A0F2
0001ABC2 0468 0100 0010             		subi.w	#$100,$10(a0)
0001ABC8 5140                       		subq.w	#8,d0
0001ABCA 6500                       		bcs.s	loc_1A0F2
0001ABCC 0468 0100 0010             		subi.w	#$100,$10(a0)
0001ABD2 5140                       		subq.w	#8,d0
0001ABD4 6500                       		bcs.s	loc_1A0F2
0001ABD6 0468 0080 0010             		subi.w	#$80,$10(a0)
0001ABDC 5140                       		subq.w	#8,d0
0001ABDE 6500                       		bcs.s	loc_1A0F2
0001ABE0 0468 0080 0010             		subi.w	#$80,$10(a0)
0001ABE6 5140                       		subq.w	#8,d0
0001ABE8 6500                       		bcs.s	loc_1A0F2
0001ABEA 0468 0080 0010             		subi.w	#$80,$10(a0)
0001ABF0 0440 0038                  		subi.w	#$38,d0
0001ABF4 6500                       		bcs.s	loc_1A0F2
0001ABF6 4268 0010                  		clr.w	$10(a0)
0001ABFA                            
0001ABFA                            loc_1A0F2:
0001ABFA 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001AC00 6500                       		bcs.s	loc_1A110
0001AC02 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001AC08 317C 0240 0010             		move.w	#$240,$10(a0)
0001AC0E 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001AC14 5428 0034                  		addq.b	#2,$34(a0)
0001AC18                            
0001AC18                            loc_1A110:
0001AC18 6000                       		bra.s	loc_1A15C
0001AC1A                            ; ===========================================================================
0001AC1A                            
0001AC1A                            loc_1A112:				; XREF: off_19E80
0001AC1A 4EB9 0000 E00C             		jsr	SpeedToPos
0001AC20 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001AC26 6500                       		bcs.s	loc_1A124
0001AC28 4268 0010                  		clr.w	$10(a0)
0001AC2C                            
0001AC2C                            loc_1A124:
0001AC2C 0668 0034 0012             		addi.w	#$34,$12(a0)
0001AC32 4A68 0012                  		tst.w	$12(a0)
0001AC36 6B00                       		bmi.s	loc_1A142
0001AC38 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001AC3E 6500                       		bcs.s	loc_1A142
0001AC40 317C 0592 000C             		move.w	#$592,$C(a0)
0001AC46 4268 0012                  		clr.w	$12(a0)
0001AC4A                            
0001AC4A                            loc_1A142:
0001AC4A 3028 0010                  		move.w	$10(a0),d0
0001AC4E 8068 0012                  		or.w	$12(a0),d0
0001AC52 6600                       		bne.s	loc_1A15C
0001AC54 5428 0034                  		addq.b	#2,$34(a0)
0001AC58 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AC5E 117C 0001 0021             		move.b	#1,$21(a0)
0001AC64                            
0001AC64                            loc_1A15C:
0001AC64 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001AC68 4EB9 0000 B090             		jsr	AnimateSprite
0001AC6E                            
0001AC6E                            loc_1A166:
0001AC6E 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AC74 6C00                       		bge.s	loc_1A172
0001AC76 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AC7A                            
0001AC7A                            loc_1A172:
0001AC7A 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AC80 6C00                       		bge.s	locret_1A190
0001AC82 323C 001B                  		move.w	#$1B,d1
0001AC86 343C 0070                  		move.w	#$70,d2
0001AC8A 363C 0071                  		move.w	#$71,d3
0001AC8E 3828 0008                  		move.w	8(a0),d4
0001AC92 4EF9 0001 0402             		jmp	SolidObject
0001AC98                            ; ===========================================================================
0001AC98                            
0001AC98                            locret_1A190:
0001AC98 4E75                       		rts	
0001AC9A                            ; ===========================================================================
0001AC9A                            
0001AC9A                            loc_1A192:				; XREF: off_19E80
0001AC9A 217C 0001 8894 0004        		move.l	#Map_Eggman,4(a0)
0001ACA2 317C 0400 0002             		move.w	#$400,2(a0)
0001ACA8 117C 0000 001C             		move.b	#0,$1C(a0)
0001ACAE 08E8 0000 0022             		bset	#0,$22(a0)
0001ACB4 4EB9 0000 E00C             		jsr	SpeedToPos
0001ACBA 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001ACC0 6400                       		bcc.s	loc_1A1D0
0001ACC2 317C 0180 0010             		move.w	#$180,$10(a0)
0001ACC8 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001ACCE 117C 000F 0020             		move.b	#$F,$20(a0)
0001ACD4 5428 0034                  		addq.b	#2,$34(a0)
0001ACD8                            
0001ACD8                            loc_1A1D0:
0001ACD8 6000 FF8A                  		bra.w	loc_1A15C
0001ACDC                            ; ===========================================================================
0001ACDC                            
0001ACDC                            loc_1A1D4:				; XREF: off_19E80
0001ACDC 08E8 0000 0022             		bset	#0,$22(a0)
0001ACE2 4EB9 0000 E00C             		jsr	SpeedToPos
0001ACE8 4A68 0030                  		tst.w	$30(a0)
0001ACEC 6600                       		bne.s	loc_1A1FC
0001ACEE 4A28 0020                  		tst.b	$20(a0)
0001ACF2 6600                       		bne.s	loc_1A216
0001ACF4 317C 001E 0030             		move.w	#$1E,$30(a0)
0001ACFA 303C 00AC                  		move.w	#$AC,d0
0001ACFE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AD04                            
0001AD04                            loc_1A1FC:
0001AD04 5368 0030                  		subq.w	#1,$30(a0)
0001AD08 6600                       		bne.s	loc_1A216
0001AD0A 4A28 0022                  		tst.b	$22(a0)
0001AD0E 6A00                       		bpl.s	loc_1A210
0001AD10 317C 0060 0012             		move.w	#$60,$12(a0)
0001AD16 6000                       		bra.s	loc_1A216
0001AD18                            ; ===========================================================================
0001AD18                            
0001AD18                            loc_1A210:
0001AD18 117C 000F 0020             		move.b	#$F,$20(a0)
0001AD1E                            
0001AD1E                            loc_1A216:
0001AD1E 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AD24 6D00                       		blt.s	loc_1A23A
0001AD26 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AD2C 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AD32 4278 D014                  		clr.w	($FFFFD014).w
0001AD36 4A68 0012                  		tst.w	$12(a0)
0001AD3A 6A00                       		bpl.s	loc_1A248
0001AD3C 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AD42                            
0001AD42                            loc_1A23A:
0001AD42 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AD48 6D00                       		blt.s	loc_1A248
0001AD4A 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AD50                            
0001AD50                            loc_1A248:
0001AD50 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AD56 6500                       		bcs.s	loc_1A260
0001AD58 4A28 0001                  		tst.b	1(a0)
0001AD5C 6B00                       		bmi.s	loc_1A260
0001AD5E 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AD64 6000 FAF4                  		bra.w	Obj85_Delete
0001AD68                            ; ===========================================================================
0001AD68                            
0001AD68                            loc_1A260:
0001AD68 6000 FEFA                  		bra.w	loc_1A15C
0001AD6C                            ; ===========================================================================
0001AD6C                            
0001AD6C                            loc_1A264:				; XREF: Obj85_Index
0001AD6C 2268 0034                  		movea.l	$34(a0),a1
0001AD70 1011                       		move.b	(a1),d0
0001AD72 B010                       		cmp.b	(a0),d0
0001AD74 6600 FAE4                  		bne.w	Obj85_Delete
0001AD78 117C 0007 001C             		move.b	#7,$1C(a0)
0001AD7E 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AD84 6C00                       		bge.s	loc_1A280
0001AD86 6000                       		bra.s	loc_1A2A6
0001AD88                            ; ===========================================================================
0001AD88                            
0001AD88                            loc_1A280:
0001AD88 4A69 0010                  		tst.w	$10(a1)
0001AD8C 6700                       		beq.s	loc_1A28C
0001AD8E 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AD94                            
0001AD94                            loc_1A28C:
0001AD94 43FA DA9A                  		lea	Ani_Eggman(pc),a1
0001AD98 4EB9 0000 B090             		jsr	AnimateSprite
0001AD9E                            
0001AD9E                            loc_1A296:
0001AD9E 2268 0034                  		movea.l	$34(a0),a1
0001ADA2 3169 0008 0008             		move.w	8(a1),8(a0)
0001ADA8 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001ADAE                            
0001ADAE                            loc_1A2A6:
0001ADAE 2268 0034                  		movea.l	$34(a0),a1
0001ADB2 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001ADB8 7003                       		moveq	#3,d0
0001ADBA C028 0022                  		and.b	$22(a0),d0
0001ADBE 0228 00FC 0001             		andi.b	#-4,1(a0)
0001ADC4 8128 0001                  		or.b	d0,1(a0)
0001ADC8 4EF9 0000 E032             		jmp	DisplaySprite
0001ADCE                            ; ===========================================================================
0001ADCE                            
0001ADCE                            loc_1A2C6:				; XREF: Obj85_Index
0001ADCE 2268 0034                  		movea.l	$34(a0),a1
0001ADD2 1011                       		move.b	(a1),d0
0001ADD4 B010                       		cmp.b	(a0),d0
0001ADD6 6600 FA82                  		bne.w	Obj85_Delete
0001ADDA 0CA9 0001 8894 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ADE2 6700                       		beq.s	loc_1A2E4
0001ADE4 117C 000A 001A             		move.b	#$A,$1A(a0)
0001ADEA 60C2                       		bra.s	loc_1A2A6
0001ADEC                            ; ===========================================================================
0001ADEC                            
0001ADEC                            loc_1A2E4:
0001ADEC 117C 0001 001C             		move.b	#1,$1C(a0)
0001ADF2 4A29 0021                  		tst.b	$21(a1)
0001ADF6 6F00                       		ble.s	loc_1A312
0001ADF8 117C 0006 001C             		move.b	#6,$1C(a0)
0001ADFE 217C 0001 8894 0004        		move.l	#Map_Eggman,4(a0)
0001AE06 317C 0400 0002             		move.w	#$400,2(a0)
0001AE0C 43FA DA22                  		lea	Ani_Eggman(pc),a1
0001AE10 4EB9 0000 B090             		jsr	AnimateSprite
0001AE16 6000 FF86                  		bra.w	loc_1A296
0001AE1A                            ; ===========================================================================
0001AE1A                            
0001AE1A                            loc_1A312:
0001AE1A 4A28 0001                  		tst.b	1(a0)
0001AE1E 6A00 FA3A                  		bpl.w	Obj85_Delete
0001AE22 6100 D588                  		bsr.w	BossDefeated
0001AE26 117C 0002 0018             		move.b	#2,$18(a0)
0001AE2C 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE32 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AE3A 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AE40 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AE44 4EB9 0000 B090             		jsr	AnimateSprite
0001AE4A 6000 FF52                  		bra.w	loc_1A296
0001AE4E                            ; ===========================================================================
0001AE4E                            
0001AE4E                            loc_1A346:				; XREF: Obj85_Index
0001AE4E 08E8 0000 0022             		bset	#0,$22(a0)
0001AE54 2268 0034                  		movea.l	$34(a0),a1
0001AE58 0CA9 0001 8894 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AE60 6700                       		beq.s	loc_1A35E
0001AE62 6000 FF4A                  		bra.w	loc_1A2A6
0001AE66                            ; ===========================================================================
0001AE66                            
0001AE66                            loc_1A35E:
0001AE66 3169 0008 0008             		move.w	8(a1),8(a0)
0001AE6C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AE72 4A28 001E                  		tst.b	$1E(a0)
0001AE76 6600                       		bne.s	loc_1A376
0001AE78 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AE7E                            
0001AE7E                            loc_1A376:
0001AE7E 5328 001E                  		subq.b	#1,$1E(a0)
0001AE82 6E00                       		bgt.s	loc_1A38A
0001AE84 5228 001A                  		addq.b	#1,$1A(a0)
0001AE88 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AE8E 6E00 F9CA                  		bgt.w	Obj85_Delete
0001AE92                            
0001AE92                            loc_1A38A:
0001AE92 6000 FF0A                  		bra.w	loc_1A296
0001AE96                            ; ===========================================================================
0001AE96                            
0001AE96                            loc_1A38E:				; XREF: Obj85_Index
0001AE96 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AE9C 3038 D008                  		move.w	($FFFFD008).w,d0
0001AEA0 9068 0008                  		sub.w	8(a0),d0
0001AEA4 6500                       		bcs.s	loc_1A3A6
0001AEA6 4A28 0001                  		tst.b	1(a0)
0001AEAA 6A00 F9AE                  		bpl.w	Obj85_Delete
0001AEAE                            
0001AEAE                            loc_1A3A6:
0001AEAE 4EF9 0000 E032             		jmp	DisplaySprite
0001AEB4                            ; ===========================================================================
0001AEB4                            
0001AEB4                            loc_1A3AC:				; XREF: Obj85_Index
0001AEB4 117C 0000 001A             		move.b	#0,$1A(a0)
0001AEBA 08E8 0000 0022             		bset	#0,$22(a0)
0001AEC0 2268 0034                  		movea.l	$34(a0),a1
0001AEC4 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AECA 6600                       		bne.s	loc_1A3D0
0001AECC 0CA9 0001 8894 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AED4 6700 F984                  		beq.w	Obj85_Delete
0001AED8                            
0001AED8                            loc_1A3D0:
0001AED8 6000 FED4                  		bra.w	loc_1A2A6
0001AEDC                            ; ===========================================================================
0001AEDC                            Ani_obj85:
0001AEDC                            	include "_anim\obj85.asm"
0001AEDC                            ; ---------------------------------------------------------------------------
0001AEDC                            ; Animation script - Eggman (FZ)
0001AEDC                            ; ---------------------------------------------------------------------------
0001AEDC 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AEDE 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AEE2                            		even
0001AEE2                            		even
0001AEE2                            
0001AEE2                            Map_Eggman2:
0001AEE2                            	include "_maps\Eggman2.asm"
0001AEE2                            ; ---------------------------------------------------------------------------
0001AEE2                            ; Sprite mappings - Eggman (FZ)
0001AEE2                            ; ---------------------------------------------------------------------------
0001AEE2 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AEE4 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AEE6 06                         byte_1A3DE:	dc.b 6
0001AEE7 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AEEC EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AEF1 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AEF6 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AEFB FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AF00 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AF05 06                         byte_1A3FD:	dc.b 6
0001AF06 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AF0B EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AF10 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AF15 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AF1A FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AF1F 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AF24                            		even
0001AF24                            		even
0001AF24                            
0001AF24                            Map_FZBoss:
0001AF24                            	include "_maps\FZ boss.asm"
0001AF24                            ; ---------------------------------------------------------------------------
0001AF24                            ; Sprite mappings - boss (FZ)
0001AF24                            ; ---------------------------------------------------------------------------
0001AF24 0000                       		dc.w byte_1A422-Map_FZBoss
0001AF26 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AF28 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AF2A 02                         byte_1A422:	dc.b 2
0001AF2B 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AF30 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AF35 03                         byte_1A42D:	dc.b 3
0001AF36 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AF3B 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AF40 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AF45 02                         byte_1A43D:	dc.b 2
0001AF46 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AF4B 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AF50                            		even
0001AF50                            		even
0001AF50                            
0001AF50                            ; ===========================================================================
0001AF50                            
0001AF50                            Obj84_Delete:
0001AF50 4EF9 0000 E06E             		jmp	DeleteObject
0001AF56                            ; ===========================================================================
0001AF56                            ; ---------------------------------------------------------------------------
0001AF56                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AF56                            ; ---------------------------------------------------------------------------
0001AF56                            
0001AF56                            Obj84:					; XREF: Obj_Index
0001AF56 7000                       		moveq	#0,d0
0001AF58 1028 0024                  		move.b	$24(a0),d0
0001AF5C 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AF60 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AF64                            ; ===========================================================================
0001AF64 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AF66 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AF68 0000                       		dc.w loc_1A57E-Obj84_Index
0001AF6A                            
0001AF6A 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AF6E 2550 0620                  		dc.w $2550, $620
0001AF72 2490 04C0                  		dc.w $2490, $4C0
0001AF76 2510 04C0                  		dc.w $2510, $4C0
0001AF7A                            ; ===========================================================================
0001AF7A                            
0001AF7A                            Obj84_Main:				; XREF: Obj84_Index
0001AF7A 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AF7E 7000                       		moveq	#0,d0
0001AF80 1028 0028                  		move.b	$28(a0),d0
0001AF84 D040                       		add.w	d0,d0
0001AF86 D2C0                       		adda.w	d0,a1
0001AF88 117C 0004 0001             		move.b	#4,1(a0)
0001AF8E 08E8 0007 0001             		bset	#7,1(a0)
0001AF94 08E8 0004 0001             		bset	#4,1(a0)
0001AF9A 317C 0300 0002             		move.w	#$300,2(a0)
0001AFA0 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AFA8 3159 0008                  		move.w	(a1)+,8(a0)
0001AFAC 3151 000C                  		move.w	(a1),$C(a0)
0001AFB0 3159 0038                  		move.w	(a1)+,$38(a0)
0001AFB4 117C 0020 0016             		move.b	#$20,$16(a0)
0001AFBA 117C 0060 0017             		move.b	#$60,$17(a0)
0001AFC0 117C 0020 0019             		move.b	#$20,$19(a0)
0001AFC6 117C 0060 0016             		move.b	#$60,$16(a0)
0001AFCC 117C 0003 0018             		move.b	#3,$18(a0)
0001AFD2 5428 0024                  		addq.b	#2,$24(a0)
0001AFD6                            
0001AFD6                            loc_1A4CE:				; XREF: Obj84_Index
0001AFD6 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AFDC 6F00                       		ble.s	loc_1A4DC
0001AFDE 08E8 0001 0001             		bset	#1,1(a0)
0001AFE4                            
0001AFE4                            loc_1A4DC:
0001AFE4 42A8 003C                  		clr.l	$3C(a0)
0001AFE8 4A28 0029                  		tst.b	$29(a0)
0001AFEC 6700                       		beq.s	loc_1A4EA
0001AFEE 5428 0024                  		addq.b	#2,$24(a0)
0001AFF2                            
0001AFF2                            loc_1A4EA:
0001AFF2 2028 003C                  		move.l	$3C(a0),d0
0001AFF6 2228 0038                  		move.l	$38(a0),d1
0001AFFA D280                       		add.l	d0,d1
0001AFFC 4841                       		swap	d1
0001AFFE 3141 000C                  		move.w	d1,$C(a0)
0001B002 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001B008 6600                       		bne.s	loc_1A524
0001B00A 4A68 0030                  		tst.w	$30(a0)
0001B00E 6A00                       		bpl.s	loc_1A524
0001B010 70F6                       		moveq	#-$A,d0
0001B012 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B018 6F00                       		ble.s	loc_1A514
0001B01A 700E                       		moveq	#$E,d0
0001B01C                            
0001B01C                            loc_1A514:
0001B01C D240                       		add.w	d0,d1
0001B01E 2268 0034                  		movea.l	$34(a0),a1
0001B022 3341 000C                  		move.w	d1,$C(a1)
0001B026 3368 0008 0008             		move.w	8(a0),8(a1)
0001B02C                            
0001B02C                            loc_1A524:
0001B02C 323C 002B                  		move.w	#$2B,d1
0001B030 343C 0060                  		move.w	#$60,d2
0001B034 363C 0061                  		move.w	#$61,d3
0001B038 3828 0008                  		move.w	8(a0),d4
0001B03C 4EB9 0001 0402             		jsr	SolidObject
0001B042 7000                       		moveq	#0,d0
0001B044 3228 003C                  		move.w	$3C(a0),d1
0001B048 6A00                       		bpl.s	loc_1A550
0001B04A 4441                       		neg.w	d1
0001B04C 5141                       		subq.w	#8,d1
0001B04E 6500                       		bcs.s	loc_1A55C
0001B050 5200                       		addq.b	#1,d0
0001B052 E841                       		asr.w	#4,d1
0001B054 D041                       		add.w	d1,d0
0001B056 6000                       		bra.s	loc_1A55C
0001B058                            ; ===========================================================================
0001B058                            
0001B058                            loc_1A550:
0001B058 0441 0027                  		subi.w	#$27,d1
0001B05C 6500                       		bcs.s	loc_1A55C
0001B05E 5200                       		addq.b	#1,d0
0001B060 E841                       		asr.w	#4,d1
0001B062 D041                       		add.w	d1,d0
0001B064                            
0001B064                            loc_1A55C:
0001B064 1140 001A                  		move.b	d0,$1A(a0)
0001B068 3038 D008                  		move.w	($FFFFD008).w,d0
0001B06C 9068 0008                  		sub.w	8(a0),d0
0001B070 6B00                       		bmi.s	loc_1A578
0001B072 0440 0140                  		subi.w	#$140,d0
0001B076 6B00                       		bmi.s	loc_1A578
0001B078 4A28 0001                  		tst.b	1(a0)
0001B07C 6A00 FED2                  		bpl.w	Obj84_Delete
0001B080                            
0001B080                            loc_1A578:
0001B080 4EF9 0000 E032             		jmp	DisplaySprite
0001B086                            ; ===========================================================================
0001B086                            
0001B086                            loc_1A57E:				; XREF: Obj84_Index
0001B086 7000                       		moveq	#0,d0
0001B088 1028 0028                  		move.b	$28(a0),d0
0001B08C 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001B090 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001B094 6000 FF5C                  		bra.w	loc_1A4EA
0001B098                            ; ===========================================================================
0001B098 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001B09A 0000                       		dc.w loc_1A598-off_1A590
0001B09C 0000                       		dc.w loc_1A604-off_1A590
0001B09E 0000                       		dc.w loc_1A604-off_1A590
0001B0A0                            ; ===========================================================================
0001B0A0                            
0001B0A0                            loc_1A598:				; XREF: off_1A590
0001B0A0 4A28 0029                  		tst.b	$29(a0)
0001B0A4 6600                       		bne.s	loc_1A5D4
0001B0A6 2268 0034                  		movea.l	$34(a0),a1
0001B0AA 4A29 0021                  		tst.b	$21(a1)
0001B0AE 6600                       		bne.s	loc_1A5B4
0001B0B0 6100 D2FA                  		bsr.w	BossDefeated
0001B0B4 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001B0BC                            
0001B0BC                            loc_1A5B4:
0001B0BC 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001B0C4 6400                       		bcc.s	locret_1A602
0001B0C6 42A8 003C                  		clr.l	$3C(a0)
0001B0CA 2268 0034                  		movea.l	$34(a0),a1
0001B0CE 5369 0032                  		subq.w	#1,$32(a1)
0001B0D2 4269 0030                  		clr.w	$30(a1)
0001B0D6 5528 0024                  		subq.b	#2,$24(a0)
0001B0DA 4E75                       		rts	
0001B0DC                            ; ===========================================================================
0001B0DC                            
0001B0DC                            loc_1A5D4:
0001B0DC 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001B0E2 6C00                       		bge.s	loc_1A5E4
0001B0E4 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001B0EC                            
0001B0EC                            loc_1A5E4:
0001B0EC 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001B0F4 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001B0FA 6E00                       		bgt.s	locret_1A602
0001B0FC 4268 003E                  		clr.w	$3E(a0)
0001B100 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001B106 4228 0029                  		clr.b	$29(a0)
0001B10A                            
0001B10A                            locret_1A602:
0001B10A 4E75                       		rts	
0001B10C                            ; ===========================================================================
0001B10C                            
0001B10C                            loc_1A604:				; XREF: off_1A590
0001B10C 08E8 0001 0001             		bset	#1,1(a0)
0001B112 4A28 0029                  		tst.b	$29(a0)
0001B116 6600                       		bne.s	loc_1A646
0001B118 2268 0034                  		movea.l	$34(a0),a1
0001B11C 4A29 0021                  		tst.b	$21(a1)
0001B120 6600                       		bne.s	loc_1A626
0001B122 6100 D288                  		bsr.w	BossDefeated
0001B126 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B12E                            
0001B12E                            loc_1A626:
0001B12E 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B136 6400                       		bcc.s	locret_1A674
0001B138 42A8 003C                  		clr.l	$3C(a0)
0001B13C 2268 0034                  		movea.l	$34(a0),a1
0001B140 5369 0032                  		subq.w	#1,$32(a1)
0001B144 4269 0030                  		clr.w	$30(a1)
0001B148 5528 0024                  		subq.b	#2,$24(a0)
0001B14C 4E75                       		rts	
0001B14E                            ; ===========================================================================
0001B14E                            
0001B14E                            loc_1A646:
0001B14E 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B154 6D00                       		blt.s	loc_1A656
0001B156 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B15E                            
0001B15E                            loc_1A656:
0001B15E 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B166 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B16C 6D00                       		blt.s	locret_1A674
0001B16E 4268 003E                  		clr.w	$3E(a0)
0001B172 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B178 4228 0029                  		clr.b	$29(a0)
0001B17C                            
0001B17C                            locret_1A674:
0001B17C 4E75                       		rts	
0001B17E                            ; ===========================================================================
0001B17E                            ; ---------------------------------------------------------------------------
0001B17E                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B17E                            ; ---------------------------------------------------------------------------
0001B17E                            Map_obj84:
0001B17E                            	include "_maps\obj84.asm"
0001B17E                            ; ---------------------------------------------------------------------------
0001B17E                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B17E                            ; ---------------------------------------------------------------------------
0001B17E 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B182 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B186 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B18A 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B18E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B192 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B196 06                         byte_1A68E:	dc.b 6
0001B197 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B19C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B1A1 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B1A6 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B1AB B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B1B0 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B1B5 08                         byte_1A6AD:	dc.b 8
0001B1B6 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B1BB A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B1C0 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B1C5 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B1CA B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B1CF B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B1D4 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B1D9 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B1DE 0A                         byte_1A6D6:	dc.b $A
0001B1DF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B1E4 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B1E9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B1EE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B1F3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B1F8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B1FD D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B202 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B207 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B20C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B211 0C                         byte_1A709:	dc.b $C
0001B212 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B217 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B21C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B221 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B226 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B22B B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B230 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B235 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B23A F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B23F F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B244 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B249 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B24E 0D                         byte_1A746:	dc.b $D
0001B24F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B254 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B259 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B25E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B263 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B268 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B26D D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B272 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B277 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B27C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B281 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B286 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B28B 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B290 0E                         byte_1A788:	dc.b $E
0001B291 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B296 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B29B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B2A0 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B2A5 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B2AA B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B2AF D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B2B4 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B2B9 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B2BE F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B2C3 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B2C8 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B2CD 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B2D2 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B2D7 02                         byte_1A7CF:	dc.b 2
0001B2D8 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B2DD 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B2E2                            		even
0001B2E2                            		even
0001B2E2                            
0001B2E2                            ; ===========================================================================
0001B2E2                            ; ---------------------------------------------------------------------------
0001B2E2                            ; Object 86 - energy balls (FZ)
0001B2E2                            ; ---------------------------------------------------------------------------
0001B2E2                            
0001B2E2                            Obj86:					; XREF: Obj_Index
0001B2E2 7000                       		moveq	#0,d0
0001B2E4 1028 0024                  		move.b	$24(a0),d0
0001B2E8 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B2EC 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B2F0                            ; ===========================================================================
0001B2F0 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B2F2 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B2F4 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B2F6 0000                       		dc.w loc_1A962-Obj86_Index
0001B2F8 0000                       		dc.w loc_1A982-Obj86_Index
0001B2FA                            ; ===========================================================================
0001B2FA                            
0001B2FA                            Obj86_Main:				; XREF: Obj86_Index
0001B2FA 317C 2588 0008             		move.w	#$2588,8(a0)
0001B300 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B306 317C 0300 0002             		move.w	#$300,2(a0)
0001B30C 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B314 117C 0000 001C             		move.b	#0,$1C(a0)
0001B31A 117C 0003 0018             		move.b	#3,$18(a0)
0001B320 117C 0008 0017             		move.b	#8,$17(a0)
0001B326 117C 0008 0016             		move.b	#8,$16(a0)
0001B32C 117C 0004 0001             		move.b	#4,1(a0)
0001B332 08E8 0007 0001             		bset	#7,1(a0)
0001B338 5428 0024                  		addq.b	#2,$24(a0)
0001B33C                            
0001B33C                            Obj86_Generator:			; XREF: Obj86_Index
0001B33C 2268 0034                  		movea.l	$34(a0),a1
0001B340 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B346 6600                       		bne.s	loc_1A850
0001B348 10BC 003F                  		move.b	#$3F,(a0)
0001B34C 117C 0000 0024             		move.b	#0,$24(a0)
0001B352 4EF9 0000 E032             		jmp	DisplaySprite
0001B358                            ; ===========================================================================
0001B358                            
0001B358                            loc_1A850:
0001B358 117C 0000 001C             		move.b	#0,$1C(a0)
0001B35E 4A28 0029                  		tst.b	$29(a0)
0001B362 6700                       		beq.s	loc_1A86C
0001B364 5428 0024                  		addq.b	#2,$24(a0)
0001B368 117C 0001 001C             		move.b	#1,$1C(a0)
0001B36E 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B374                            
0001B374                            loc_1A86C:
0001B374 323C 0013                  		move.w	#$13,d1
0001B378 343C 0008                  		move.w	#8,d2
0001B37C 363C 0011                  		move.w	#$11,d3
0001B380 3828 0008                  		move.w	8(a0),d4
0001B384 4EB9 0001 0402             		jsr	SolidObject
0001B38A 3038 D008                  		move.w	($FFFFD008).w,d0
0001B38E 9068 0008                  		sub.w	8(a0),d0
0001B392 6B00                       		bmi.s	loc_1A89A
0001B394 0440 0140                  		subi.w	#$140,d0
0001B398 6B00                       		bmi.s	loc_1A89A
0001B39A 4A28 0001                  		tst.b	1(a0)
0001B39E 6A00 FBB0                  		bpl.w	Obj84_Delete
0001B3A2                            
0001B3A2                            loc_1A89A:
0001B3A2 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B3A6 4EB9 0000 B090             		jsr	AnimateSprite
0001B3AC 4EF9 0000 E032             		jmp	DisplaySprite
0001B3B2                            ; ===========================================================================
0001B3B2                            
0001B3B2                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B3B2 4A28 0029                  		tst.b	$29(a0)
0001B3B6 6700 0000                  		beq.w	loc_1A954
0001B3BA 4228 0029                  		clr.b	$29(a0)
0001B3BE D068 0030                  		add.w	$30(a0),d0
0001B3C2 0240 001E                  		andi.w	#$1E,d0
0001B3C6 D4C0                       		adda.w	d0,a2
0001B3C8 5868 0030                  		addq.w	#4,$30(a0)
0001B3CC 4268 0032                  		clr.w	$32(a0)
0001B3D0 7403                       		moveq	#3,d2
0001B3D2                            
0001B3D2                            Obj86_Loop:
0001B3D2 4EB9 0000 E4CE             		jsr	SingleObjLoad2
0001B3D8 6600 0000                  		bne.w	loc_1A954
0001B3DC 12BC 0086                  		move.b	#$86,(a1)
0001B3E0 3368 0008 0008             		move.w	8(a0),8(a1)
0001B3E6 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B3EC 137C 0008 0024             		move.b	#8,$24(a1)
0001B3F2 337C 2300 0002             		move.w	#$2300,2(a1)
0001B3F8 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B400 137C 000C 0016             		move.b	#$C,$16(a1)
0001B406 137C 000C 0017             		move.b	#$C,$17(a1)
0001B40C 137C 0000 0020             		move.b	#0,$20(a1)
0001B412 137C 0003 0018             		move.b	#3,$18(a1)
0001B418 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B41E 137C 0004 0001             		move.b	#4,1(a1)
0001B424 08E9 0007 0001             		bset	#7,1(a1)
0001B42A 2348 0034                  		move.l	a0,$34(a1)
0001B42E 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001B434 3228 0032                  		move.w	$32(a0),d1
0001B438 C3FC FFB1                  		muls.w	#-$4F,d1
0001B43C 0641 2578                  		addi.w	#$2578,d1
0001B440 0240 001F                  		andi.w	#$1F,d0
0001B444 0440 0010                  		subi.w	#$10,d0
0001B448 D041                       		add.w	d1,d0
0001B44A 3340 0030                  		move.w	d0,$30(a1)
0001B44E 5268 0032                  		addq.w	#1,$32(a0)
0001B452 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B458 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B45C                            
0001B45C                            loc_1A954:
0001B45C 4A68 0032                  		tst.w	$32(a0)
0001B460 6600                       		bne.s	loc_1A95E
0001B462 5428 0024                  		addq.b	#2,$24(a0)
0001B466                            
0001B466                            loc_1A95E:
0001B466 6000 FF0C                  		bra.w	loc_1A86C
0001B46A                            ; ===========================================================================
0001B46A                            
0001B46A                            loc_1A962:				; XREF: Obj86_Index
0001B46A 117C 0002 001C             		move.b	#2,$1C(a0)
0001B470 4A68 0038                  		tst.w	$38(a0)
0001B474 6600                       		bne.s	loc_1A97E
0001B476 117C 0002 0024             		move.b	#2,$24(a0)
0001B47C 2268 0034                  		movea.l	$34(a0),a1
0001B480 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B486                            
0001B486                            loc_1A97E:
0001B486 6000 FEEC                  		bra.w	loc_1A86C
0001B48A                            ; ===========================================================================
0001B48A                            
0001B48A                            loc_1A982:				; XREF: Obj86_Index
0001B48A 7000                       		moveq	#0,d0
0001B48C 1028 0025                  		move.b	$25(a0),d0
0001B490 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B494 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B498 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B49C 4EB9 0000 B090             		jsr	AnimateSprite
0001B4A2 4EF9 0000 E032             		jmp	DisplaySprite
0001B4A8                            ; ===========================================================================
0001B4A8 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B4AA 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B4AC 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B4AE                            ; ===========================================================================
0001B4AE                            
0001B4AE                            loc_1A9A6:				; XREF: Obj86_Index2
0001B4AE 3028 0030                  		move.w	$30(a0),d0
0001B4B2 9068 0008                  		sub.w	8(a0),d0
0001B4B6 E940                       		asl.w	#4,d0
0001B4B8 3140 0010                  		move.w	d0,$10(a0)
0001B4BC 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B4C2 5428 0025                  		addq.b	#2,$25(a0)
0001B4C6 4E75                       		rts	
0001B4C8                            ; ===========================================================================
0001B4C8                            
0001B4C8                            loc_1A9C0:				; XREF: Obj86_Index2
0001B4C8 4A68 0010                  		tst.w	$10(a0)
0001B4CC 6700                       		beq.s	loc_1A9E6
0001B4CE 4EB9 0000 E00C             		jsr	SpeedToPos
0001B4D4 3028 0008                  		move.w	8(a0),d0
0001B4D8 9068 0030                  		sub.w	$30(a0),d0
0001B4DC 6400                       		bcc.s	loc_1A9E6
0001B4DE 4268 0010                  		clr.w	$10(a0)
0001B4E2 D168 0008                  		add.w	d0,8(a0)
0001B4E6 2268 0034                  		movea.l	$34(a0),a1
0001B4EA 5369 0032                  		subq.w	#1,$32(a1)
0001B4EE                            
0001B4EE                            loc_1A9E6:
0001B4EE 117C 0000 001C             		move.b	#0,$1C(a0)
0001B4F4 5368 0028                  		subq.w	#1,$28(a0)
0001B4F8 6600                       		bne.s	locret_1AA1C
0001B4FA 5428 0025                  		addq.b	#2,$25(a0)
0001B4FE 117C 0001 001C             		move.b	#1,$1C(a0)
0001B504 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B50A 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B510 7000                       		moveq	#0,d0
0001B512 3038 D008                  		move.w	($FFFFD008).w,d0
0001B516 9068 0008                  		sub.w	8(a0),d0
0001B51A 3140 0010                  		move.w	d0,$10(a0)
0001B51E 317C 0140 0012             		move.w	#$140,$12(a0)
0001B524                            
0001B524                            locret_1AA1C:
0001B524 4E75                       		rts	
0001B526                            ; ===========================================================================
0001B526                            
0001B526                            loc_1AA1E:				; XREF: Obj86_Index2
0001B526 4EB9 0000 E00C             		jsr	SpeedToPos
0001B52C 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B532 6400                       		bcc.s	loc_1AA34
0001B534 5368 0028                  		subq.w	#1,$28(a0)
0001B538 6700                       		beq.s	loc_1AA34
0001B53A 4E75                       		rts	
0001B53C                            ; ===========================================================================
0001B53C                            
0001B53C                            loc_1AA34:
0001B53C 2268 0034                  		movea.l	$34(a0),a1
0001B540 5369 0038                  		subq.w	#1,$38(a1)
0001B544 6000 FA0A                  		bra.w	Obj84_Delete
0001B548                            ; ===========================================================================
0001B548                            Ani_obj86:
0001B548                            	include "_anim\obj86.asm"
0001B548                            ; ---------------------------------------------------------------------------
0001B548                            ; Animation script - energy ball launcher (FZ)
0001B548                            ; ---------------------------------------------------------------------------
0001B548 0000                       		dc.w byte_1AA46-Ani_obj86
0001B54A 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B54C 0000                       		dc.w byte_1AA50-Ani_obj86
0001B54E 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B552 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B558 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B55E                            		even
0001B55E                            		even
0001B55E                            
0001B55E                            ; ---------------------------------------------------------------------------
0001B55E                            ; Sprite mappings - energy ball	launcher (FZ)
0001B55E                            ; ---------------------------------------------------------------------------
0001B55E                            Map_obj86:
0001B55E                            	include "_maps\obj86.asm"
0001B55E                            ; ---------------------------------------------------------------------------
0001B55E                            ; Sprite mappings - energy ball	launcher (FZ)
0001B55E                            ; ---------------------------------------------------------------------------
0001B55E 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B562 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B566 01                         byte_1AA5E:	dc.b 1
0001B567 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B56C 01                         byte_1AA64:	dc.b 1
0001B56D F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B572 01                         byte_1AA6A:	dc.b 1
0001B573 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B578 01                         byte_1AA70:	dc.b 1
0001B579 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B57E                            		even
0001B57E                            		even
0001B57E                            
0001B57E                            Ani_obj86a:
0001B57E                            	include "_anim\obj86a.asm"
0001B57E                            ; ---------------------------------------------------------------------------
0001B57E                            ; Animation script - energy balls (FZ)
0001B57E                            ; ---------------------------------------------------------------------------
0001B57E 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B580 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B582 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B591 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B5A0 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B5A4 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B5AE                            		even
0001B5AE                            		even
0001B5AE                            
0001B5AE                            ; ---------------------------------------------------------------------------
0001B5AE                            ; Sprite mappings - energy balls (FZ)
0001B5AE                            ; ---------------------------------------------------------------------------
0001B5AE                            Map_obj86a:
0001B5AE                            	include "_maps\obj86a.asm"
0001B5AE                            ; ---------------------------------------------------------------------------
0001B5AE                            ; Sprite mappings - energy balls (FZ)
0001B5AE                            ; ---------------------------------------------------------------------------
0001B5AE 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B5B2 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B5B6 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B5BA 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B5BE 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B5C2 0000                       		dc.w byte_1AB20-Map_obj86a
0001B5C4 02                         byte_1AABC:	dc.b 2
0001B5C5 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B5CA 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B5CF 02                         byte_1AAC7:	dc.b 2
0001B5D0 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B5D5 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B5DA 02                         byte_1AAD2:	dc.b 2
0001B5DB F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B5E0 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B5E5 02                         byte_1AADD:	dc.b 2
0001B5E6 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B5EB 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B5F0 02                         byte_1AAE8:	dc.b 2
0001B5F1 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B5F6 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B5FB 02                         byte_1AAF3:	dc.b 2
0001B5FC F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B601 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B606 01                         byte_1AAFE:	dc.b 1
0001B607 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B60C 01                         byte_1AB04:	dc.b 1
0001B60D F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B612 02                         byte_1AB0A:	dc.b 2
0001B613 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B618 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B61D 02                         byte_1AB15:	dc.b 2
0001B61E F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B623 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B628 00                         byte_1AB20:	dc.b 0
0001B62A 00                         		even
0001B62A 00                         		even
0001B62A                            
0001B62A                            ; ===========================================================================
0001B62A                            ; ---------------------------------------------------------------------------
0001B62A                            ; Object 3E - prison capsule
0001B62A                            ; ---------------------------------------------------------------------------
0001B62A                            
0001B62A                            Obj3E:					; XREF: Obj_Index
0001B62A 7000                       		moveq	#0,d0
0001B62C 1028 0024                  		move.b	$24(a0),d0
0001B630 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B634 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B638 3028 0008                  		move.w	8(a0),d0
0001B63C 0240 FF80                  		andi.w	#$FF80,d0
0001B640 3238 F700                  		move.w	($FFFFF700).w,d1
0001B644 0441 0080                  		subi.w	#$80,d1
0001B648 0241 FF80                  		andi.w	#$FF80,d1
0001B64C 9041                       		sub.w	d1,d0
0001B64E 0C40 0280                  		cmpi.w	#$280,d0
0001B652 6200                       		bhi.s	Obj3E_Delete
0001B654 4EF9 0000 E032             		jmp	DisplaySprite
0001B65A                            ; ===========================================================================
0001B65A                            
0001B65A                            Obj3E_Delete:
0001B65A 4EF9 0000 E06E             		jmp	DeleteObject
0001B660                            ; ===========================================================================
0001B660 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B662 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B664 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B666 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B668 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B66A 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B66C 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B66E 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B670                            
0001B670 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B674 040C 0501                  		dc.b 4,	$C, 5, 1
0001B678 0610 0403                  		dc.b 6,	$10, 4,	3
0001B67C 0810 0305                  		dc.b 8,	$10, 3,	5
0001B680                            ; ===========================================================================
0001B680                            
0001B680                            Obj3E_Main:				; XREF: Obj3E_Index
0001B680 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B688 317C 049D 0002             		move.w	#$49D,2(a0)
0001B68E 117C 0004 0001             		move.b	#4,1(a0)
0001B694 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B69A 7000                       		moveq	#0,d0
0001B69C 1028 0028                  		move.b	$28(a0),d0
0001B6A0 E548                       		lsl.w	#2,d0
0001B6A2 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B6A6 1159 0024                  		move.b	(a1)+,$24(a0)
0001B6AA 1159 0019                  		move.b	(a1)+,$19(a0)
0001B6AE 1159 0018                  		move.b	(a1)+,$18(a0)
0001B6B2 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B6B6 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B6BA 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B6BC 117C 0006 0020             		move.b	#6,$20(a0)
0001B6C2 117C 0008 0021             		move.b	#8,$21(a0)
0001B6C8                            
0001B6C8                            Obj3E_Not02:
0001B6C8 4E75                       		rts	
0001B6CA                            ; ===========================================================================
0001B6CA                            
0001B6CA                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B6CA 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B6D0 6700                       		beq.s	Obj3E_ChkOpened
0001B6D2 323C 002B                  		move.w	#$2B,d1
0001B6D6 343C 0018                  		move.w	#$18,d2
0001B6DA 363C 0018                  		move.w	#$18,d3
0001B6DE 3828 0008                  		move.w	8(a0),d4
0001B6E2 4EF9 0001 0402             		jmp	SolidObject
0001B6E8                            ; ===========================================================================
0001B6E8                            
0001B6E8                            Obj3E_ChkOpened:
0001B6E8 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B6EC 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B6EE 4228 0025                  		clr.b	$25(a0)
0001B6F2 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B6F8 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B6FE                            
0001B6FE                            Obj3E_DoOpen:
0001B6FE 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B704 4E75                       		rts	
0001B706                            ; ===========================================================================
0001B706                            
0001B706                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B706 323C 0017                  		move.w	#$17,d1
0001B70A 343C 0008                  		move.w	#8,d2
0001B70E 363C 0008                  		move.w	#8,d3
0001B712 3828 0008                  		move.w	8(a0),d4
0001B716 4EB9 0001 0402             		jsr	SolidObject
0001B71C 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B722 4EB9 0000 B090             		jsr	AnimateSprite
0001B728 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B72E 4A28 0025                  		tst.b	$25(a0)
0001B732 6700                       		beq.s	locret_1AC60
0001B734 5068 000C                  		addq.w	#8,$C(a0)
0001B738 117C 000A 0024             		move.b	#$A,$24(a0)
0001B73E 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B744 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B748 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B74C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B752 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B758 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B75A 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B760 6000                       		bra.s	Obj3E_ContinueCode
0001B762                            
0001B762                            Obj3E_MoveLeft:
0001B762 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B768                            
0001B768                            Obj3E_ContinueCode:
0001B768 4228 0025                  		clr.b	$25(a0)
0001B76C 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B772 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B778                            
0001B778                            locret_1AC60:
0001B778 4E75                       		rts	
0001B77A                            ; ===========================================================================
0001B77A                            
0001B77A                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B77A 7007                       		moveq	#7,d0
0001B77C C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B780 6600                       		bne.s	loc_1ACA0
0001B782 4EB9 0000 E4B8             		jsr	SingleObjLoad
0001B788 6600                       		bne.s	loc_1ACA0
0001B78A 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B78E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B794 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B79A 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001B7A0 7200                       		moveq	#0,d1
0001B7A2 1200                       		move.b	d0,d1
0001B7A4 E409                       		lsr.b	#2,d1
0001B7A6 0441 0020                  		subi.w	#$20,d1
0001B7AA D369 0008                  		add.w	d1,8(a1)
0001B7AE E048                       		lsr.w	#8,d0
0001B7B0 E608                       		lsr.b	#3,d0
0001B7B2 D169 000C                  		add.w	d0,$C(a1)
0001B7B6                            
0001B7B6                            loc_1ACA0:
0001B7B6 5368 001E                  		subq.w	#1,$1E(a0)
0001B7BA 6700                       		beq.s	Obj3E_MakeAnimal
0001B7BC 4E75                       		rts	
0001B7BE                            ; ===========================================================================
0001B7BE                            
0001B7BE                            Obj3E_MakeAnimal:
0001B7BE 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B7C4 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B7CA 117C 0006 001A             		move.b	#6,$1A(a0)
0001B7D0 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B7D6 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B7DC 7C07                       		moveq	#7,d6
0001B7DE 3A3C 009A                  		move.w	#$9A,d5
0001B7E2 78E4                       		moveq	#-$1C,d4
0001B7E4                            
0001B7E4                            Obj3E_Loop:
0001B7E4 4EB9 0000 E4B8             		jsr	SingleObjLoad
0001B7EA 6600                       		bne.s	locret_1ACF8
0001B7EC 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B7F0 3368 0008 0008             		move.w	8(a0),8(a1)
0001B7F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B7FC D969 0008                  		add.w	d4,8(a1)
0001B800 5E44                       		addq.w	#7,d4
0001B802 3345 0036                  		move.w	d5,$36(a1)
0001B806 5145                       		subq.w	#8,d5
0001B808 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B80C                            
0001B80C                            locret_1ACF8:
0001B80C 4E75                       		rts	
0001B80E                            ; ===========================================================================
0001B80E                            
0001B80E                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B80E 7007                       		moveq	#7,d0
0001B810 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B814 6600                       		bne.s	loc_1AD38
0001B816 4EB9 0000 E4B8             		jsr	SingleObjLoad
0001B81C 6600                       		bne.s	loc_1AD38
0001B81E 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B822 3368 0008 0008             		move.w	8(a0),8(a1)
0001B828 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B82E 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001B834 0240 001F                  		andi.w	#$1F,d0
0001B838 5D40                       		subq.w	#6,d0
0001B83A 4A41                       		tst.w	d1
0001B83C 6A00                       		bpl.s	loc_1AD2E
0001B83E 4440                       		neg.w	d0
0001B840                            
0001B840                            loc_1AD2E:
0001B840 D169 0008                  		add.w	d0,8(a1)
0001B844 337C 000C 0036             		move.w	#$C,$36(a1)
0001B84A                            
0001B84A                            loc_1AD38:
0001B84A 5368 001E                  		subq.w	#1,$1E(a0)
0001B84E 6600                       		bne.s	locret_1AD48
0001B850 5428 0024                  		addq.b	#2,$24(a0)
0001B854 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B85A                            
0001B85A                            locret_1AD48:
0001B85A 4E75                       		rts	
0001B85C                            ; ===========================================================================
0001B85C                            
0001B85C                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B85C 703E                       		moveq	#$3E,d0
0001B85E 7228                       		moveq	#$28,d1
0001B860 7440                       		moveq	#$40,d2
0001B862 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B866                            
0001B866                            Obj3E_FindObj28:
0001B866 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B868 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B86A D2C2                       		adda.w	d2,a1		; next object RAM
0001B86C 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B870                            
0001B870 4EB9 0000 F6BE             		jsr	GotThroughAct
0001B876 4EF9 0000 E06E             		jmp	DeleteObject
0001B87C                            ; ===========================================================================
0001B87C                            
0001B87C                            Obj3E_Obj28Found:
0001B87C 4E75                       		rts	
0001B87E                            ; ===========================================================================
0001B87E                            Ani_obj3E:
0001B87E                            	include "_anim\obj3E.asm"
0001B87E                            ; ---------------------------------------------------------------------------
0001B87E                            ; Animation script - prison capsule
0001B87E                            ; ---------------------------------------------------------------------------
0001B87E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B880 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B882 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B886                            		even
0001B886                            		even
0001B886                            
0001B886                            ; ---------------------------------------------------------------------------
0001B886                            ; Sprite mappings - prison capsule
0001B886                            ; ---------------------------------------------------------------------------
0001B886                            Map_obj3E:
0001B886                            	include "_maps\obj3E.asm"
0001B886                            ; ---------------------------------------------------------------------------
0001B886                            ; Sprite mappings - prison capsule
0001B886                            ; ---------------------------------------------------------------------------
0001B886 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B88A 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B88E 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B892 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B894 07                         byte_1AD82:	dc.b 7
0001B895 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B89A E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B89F E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B8A4 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B8A9 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B8AE 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B8B3 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B8B8 01                         byte_1ADA6:	dc.b 1
0001B8B9 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B8BE 06                         byte_1ADAC:	dc.b 6
0001B8BF 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B8C4 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B8C9 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B8CE 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B8D3 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B8D8 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B8DD 01                         byte_1ADCB:	dc.b 1
0001B8DE F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B8E3 02                         byte_1ADD1:	dc.b 2
0001B8E4 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B8E9 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B8EE 01                         byte_1ADDC:	dc.b 1
0001B8EF F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B8F4 00                         byte_1ADE2:	dc.b 0
0001B8F6 00                         		even
0001B8F6 00                         		even
0001B8F6                            
0001B8F6                            ; ---------------------------------------------------------------------------
0001B8F6                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B8F6                            ; ---------------------------------------------------------------------------
0001B8F6                            
0001B8F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8F6                            
0001B8F6                            
0001B8F6                            TouchResponse:				; XREF: Obj01
0001B8F6 4E71                       		nop	
0001B8F8 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B8FC 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B900 5142                       		subq.w	#8,d2
0001B902 7A00                       		moveq	#0,d5
0001B904 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B908 5705                       		subq.b	#3,d5
0001B90A 9645                       		sub.w	d5,d3
0001B90C 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B912 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B914 0643 000C                  		addi.w	#$C,d3
0001B918 7A0A                       		moveq	#$A,d5
0001B91A                            
0001B91A                            Touch_NoDuck:
0001B91A 383C 0010                  		move.w	#$10,d4
0001B91E DA45                       		add.w	d5,d5
0001B920 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B924 3C3C 005F                  		move.w	#$5F,d6
0001B928                            
0001B928                            Touch_Loop:
0001B928 4A29 0001                  		tst.b	1(a1)
0001B92C 6A00                       		bpl.s	Touch_NextObj
0001B92E 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B932 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B934                            
0001B934                            Touch_NextObj:
0001B934 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B938 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B93C                            
0001B93C 7000                       		moveq	#0,d0
0001B93E 4E75                       		rts	
0001B940                            ; ===========================================================================
0001B940 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B942 0C14                       		dc.b   $C, $14
0001B944 140C                       		dc.b  $14,  $C
0001B946 0410                       		dc.b	4, $10
0001B948 0C12                       		dc.b   $C, $12
0001B94A 1010                       		dc.b  $10, $10
0001B94C 0606                       		dc.b	6,   6
0001B94E 180C                       		dc.b  $18,  $C
0001B950 0C10                       		dc.b   $C, $10
0001B952 100C                       		dc.b  $10,  $C
0001B954 0808                       		dc.b	8,   8
0001B956 1410                       		dc.b  $14, $10
0001B958 1408                       		dc.b  $14,   8
0001B95A 0E0E                       		dc.b   $E,  $E
0001B95C 1818                       		dc.b  $18, $18
0001B95E 2810                       		dc.b  $28, $10
0001B960 1018                       		dc.b  $10, $18
0001B962 0810                       		dc.b	8, $10
0001B964 2070                       		dc.b  $20, $70
0001B966 4020                       		dc.b  $40, $20
0001B968 8020                       		dc.b  $80, $20
0001B96A 2020                       		dc.b  $20, $20
0001B96C 0808                       		dc.b	8,   8
0001B96E 0404                       		dc.b	4,   4
0001B970 2008                       		dc.b  $20,   8
0001B972 0C0C                       		dc.b   $C,  $C
0001B974 0804                       		dc.b	8,   4
0001B976 1804                       		dc.b  $18,   4
0001B978 2804                       		dc.b  $28,   4
0001B97A 0408                       		dc.b	4,   8
0001B97C 0418                       		dc.b	4, $18
0001B97E 0428                       		dc.b	4, $28
0001B980 0420                       		dc.b	4, $20
0001B982 1818                       		dc.b  $18, $18
0001B984 0C18                       		dc.b   $C, $18
0001B986 4808                       		dc.b  $48,   8
0001B988                            ; ===========================================================================
0001B988                            
0001B988                            Touch_Height:				; XREF: TouchResponse
0001B988 0240 003F                  		andi.w	#$3F,d0
0001B98C D040                       		add.w	d0,d0
0001B98E 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B992 7200                       		moveq	#0,d1
0001B994 121A                       		move.b	(a2)+,d1
0001B996 3029 0008                  		move.w	8(a1),d0
0001B99A 9041                       		sub.w	d1,d0
0001B99C 9042                       		sub.w	d2,d0
0001B99E 6400                       		bcc.s	loc_1AE98
0001B9A0 D241                       		add.w	d1,d1
0001B9A2 D041                       		add.w	d1,d0
0001B9A4 6500                       		bcs.s	Touch_Width
0001B9A6 6000 FF8C                  		bra.w	Touch_NextObj
0001B9AA                            ; ===========================================================================
0001B9AA                            
0001B9AA                            loc_1AE98:
0001B9AA B044                       		cmp.w	d4,d0
0001B9AC 6200 FF86                  		bhi.w	Touch_NextObj
0001B9B0                            
0001B9B0                            Touch_Width:
0001B9B0 7200                       		moveq	#0,d1
0001B9B2 121A                       		move.b	(a2)+,d1
0001B9B4 3029 000C                  		move.w	$C(a1),d0
0001B9B8 9041                       		sub.w	d1,d0
0001B9BA 9043                       		sub.w	d3,d0
0001B9BC 6400                       		bcc.s	loc_1AEB6
0001B9BE D241                       		add.w	d1,d1
0001B9C0 D240                       		add.w	d0,d1
0001B9C2 6500                       		bcs.s	Touch_ChkValue
0001B9C4 6000 FF6E                  		bra.w	Touch_NextObj
0001B9C8                            ; ===========================================================================
0001B9C8                            
0001B9C8                            loc_1AEB6:
0001B9C8 B045                       		cmp.w	d5,d0
0001B9CA 6200 FF68                  		bhi.w	Touch_NextObj
0001B9CE                            
0001B9CE                            Touch_ChkValue:
0001B9CE 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B9D2 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B9D6 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B9DA 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B9DE 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B9E2 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B9E4 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B9E8                            
0001B9E8                            ; touch	response is $40-$7F
0001B9E8                            
0001B9E8 1029 0020                  		move.b	$20(a1),d0
0001B9EC 0200 003F                  		andi.b	#$3F,d0
0001B9F0 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B9F4 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B9F6 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B9FC 6400 0000                  		bcc.w	locret_1AEF2
0001BA00 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001BA04                            
0001BA04                            locret_1AEF2:
0001BA04 4E75                       		rts	
0001BA06                            ; ===========================================================================
0001BA06                            
0001BA06                            Touch_Monitor:
0001BA06 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001BA0A 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001BA0C 3028 000C                  		move.w	$C(a0),d0
0001BA10 0440 0010                  		subi.w	#$10,d0
0001BA14 B069 000C                  		cmp.w	$C(a1),d0
0001BA18 6500                       		bcs.s	locret_1AF2E
0001BA1A 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BA1E 337C FE80 0012             		move.w	#-$180,$12(a1)
0001BA24 4A29 0025                  		tst.b	$25(a1)
0001BA28 6600                       		bne.s	locret_1AF2E
0001BA2A 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001BA2E 4E75                       		rts	
0001BA30                            ; ===========================================================================
0001BA30                            
0001BA30                            loc_1AF1E:
0001BA30 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001BA36 6600                       		bne.s	locret_1AF2E
0001BA38 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BA3C 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001BA40                            
0001BA40                            locret_1AF2E:
0001BA40 4E75                       		rts	
0001BA42                            ; ===========================================================================
0001BA42                            
0001BA42                            Touch_Enemy:				; XREF: Touch_ChkValue
0001BA42 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BA46 6600                       		bne.s	loc_1AF40	; if yes, branch
0001BA48 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001BA4E 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001BA52                            
0001BA52                            loc_1AF40:
0001BA52 4A29 0021                  		tst.b	$21(a1)
0001BA56 6700                       		beq.s	Touch_KillEnemy
0001BA58 4468 0010                  		neg.w	$10(a0)
0001BA5C 4468 0012                  		neg.w	$12(a0)
0001BA60 E0E8 0010                  		asr	$10(a0)
0001BA64 E0E8 0012                  		asr	$12(a0)
0001BA68 137C 0000 0020             		move.b	#0,$20(a1)
0001BA6E 5329 0021                  		subq.b	#1,$21(a1)
0001BA72 6600                       		bne.s	locret_1AF68
0001BA74 08E9 0007 0022             		bset	#7,$22(a1)
0001BA7A                            
0001BA7A                            locret_1AF68:
0001BA7A 4E75                       		rts	
0001BA7C                            ; ===========================================================================
0001BA7C                            
0001BA7C                            Touch_KillEnemy:
0001BA7C 08E9 0007 0022             		bset	#7,$22(a1)
0001BA82 7000                       		moveq	#0,d0
0001BA84 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001BA88 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001BA8C 0C40 0006                  		cmpi.w	#6,d0
0001BA90 6500                       		bcs.s	loc_1AF82
0001BA92 7006                       		moveq	#6,d0
0001BA94                            
0001BA94                            loc_1AF82:
0001BA94 3340 003E                  		move.w	d0,$3E(a1)
0001BA98 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001BA9C 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001BAA2 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001BAA4 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001BAA8 337C 000A 003E             		move.w	#$A,$3E(a1)
0001BAAE                            
0001BAAE                            loc_1AF9C:
0001BAAE 6100 0000                  		bsr.w	AddPoints
0001BAB2 7400                       		moveq	#0,d2	; GMZ
0001BAB4 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001BAB6 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001BAB8                            
0001BAB8                            TouchKE_Explode:
0001BAB8 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BABC 137C 0000 0024             		move.b	#0,$24(a1)
0001BAC2 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001BAC6                            
0001BAC6                            TouchKE_NextExplosion:
0001BAC6 5802                       		addq.b	#4,d2
0001BAC8 4EB9 0000 E4B8             		jsr	SingleObjLoad
0001BACE 6600                       		bne.s	TouchKE_NoExplosion
0001BAD0 336A 0008 0008             		move.w	8(a2),8(a1)
0001BAD6 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001BADC 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001BAE0                            
0001BAE0                            TouchKE_NoExplosion:
0001BAE0 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001BAE2 4A68 0012                  		tst.w	$12(a0)
0001BAE6 6B00                       		bmi.s	loc_1AFC2
0001BAE8 3028 000C                  		move.w	$C(a0),d0
0001BAEC B069 000C                  		cmp.w	$C(a1),d0
0001BAF0 6400                       		bcc.s	loc_1AFCA
0001BAF2 4468 0012                  		neg.w	$12(a0)
0001BAF6 4E75                       		rts	
0001BAF8                            ; ===========================================================================
0001BAF8                            
0001BAF8                            loc_1AFC2:
0001BAF8 0668 0100 0012             		addi.w	#$100,$12(a0)
0001BAFE 4E75                       		rts	
0001BB00                            ; ===========================================================================
0001BB00                            
0001BB00                            loc_1AFCA:
0001BB00 0468 0100 0012             		subi.w	#$100,$12(a0)
0001BB06 4E75                       		rts	
0001BB08                            ; ===========================================================================
0001BB08 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001BB10                            ; ===========================================================================
0001BB10                            
0001BB10                            loc_1AFDA:				; XREF: Touch_CatKiller
0001BB10 08E9 0007 0022             		bset	#7,$22(a1)
0001BB16                            
0001BB16                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001BB16 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BB1A 6700                       		beq.s	Touch_Hurt	; if not, branch
0001BB1C                            
0001BB1C                            loc_1AFE6:				; XREF: Touch_Hurt
0001BB1C 70FF                       		moveq	#-1,d0
0001BB1E 4E75                       		rts	
0001BB20                            ; ===========================================================================
0001BB20                            
0001BB20                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001BB20 4E71                       		nop	
0001BB22 4A68 0030                  		tst.w	$30(a0)
0001BB26 66F4                       		bne.s	loc_1AFE6
0001BB28 2449                       		movea.l	a1,a2
0001BB2A                            
0001BB2A                            ; End of function TouchResponse
0001BB2A                            ; continue straight to HurtSonic
0001BB2A                            
0001BB2A                            ; ---------------------------------------------------------------------------
0001BB2A                            ; Hurting Sonic	subroutine
0001BB2A                            ; ---------------------------------------------------------------------------
0001BB2A                            
0001BB2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB2A                            
0001BB2A                            
0001BB2A                            HurtSonic:
0001BB2A 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001BB2E 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001BB30 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001BB34 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001BB38 4EB9 0000 E4B8             		jsr	SingleObjLoad
0001BB3E 6600                       		bne.s	Hurt_Shield
0001BB40 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001BB44 3368 0008 0008             		move.w	8(a0),8(a1)
0001BB4A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BB50                            
0001BB50                            Hurt_Shield:
0001BB50 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001BB56 117C 0004 0024             		move.b	#4,$24(a0)
0001BB5C 6100 871A                  		bsr.w	Sonic_ResetOnFloor
0001BB60 08E8 0001 0022             		bset	#1,$22(a0)
0001BB66 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001BB6C 317C FE00 0010             		move.w	#-$200,$10(a0)
0001BB72 0828 0006 0022             		btst	#6,$22(a0)
0001BB78 6700                       		beq.s	Hurt_Reverse
0001BB7A 317C FE00 0012             		move.w	#-$200,$12(a0)
0001BB80 317C FF00 0010             		move.w	#-$100,$10(a0)
0001BB86                            
0001BB86                            Hurt_Reverse:
0001BB86 3028 0008                  		move.w	8(a0),d0
0001BB8A B06A 0008                  		cmp.w	8(a2),d0
0001BB8E 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001BB90 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001BB94                            
0001BB94                            Hurt_ChkSpikes:
0001BB94 317C 0000 0014             		move.w	#0,$14(a0)
0001BB9A 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001BBA0 317C 0078 0030             		move.w	#$78,$30(a0)
0001BBA6 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001BBAA 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001BBAE 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BBB0 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001BBB4 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BBB6 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001BBBA                            
0001BBBA                            Hurt_Sound:
0001BBBA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l
0001BBC0 70FF                       		moveq	#-1,d0
0001BBC2 4E75                       		rts	
0001BBC4                            ; ===========================================================================
0001BBC4                            
0001BBC4                            Hurt_NoRings:
0001BBC4 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001BBC8 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001BBCC                            ; End of function HurtSonic
0001BBCC                            
0001BBCC                            ; ---------------------------------------------------------------------------
0001BBCC                            ; Subroutine to	kill Sonic
0001BBCC                            ; ---------------------------------------------------------------------------
0001BBCC                            
0001BBCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBCC                            
0001BBCC                            
0001BBCC                            KillSonic:
0001BBCC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001BBD0 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001BBD2 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001BBD8 117C 0006 0024             		move.b	#6,$24(a0)
0001BBDE 6100 8698                  		bsr.w	Sonic_ResetOnFloor
0001BBE2 08E8 0001 0022             		bset	#1,$22(a0)
0001BBE8 317C F900 0012             		move.w	#-$700,$12(a0)
0001BBEE 317C 0000 0010             		move.w	#0,$10(a0)
0001BBF4 317C 0000 0014             		move.w	#0,$14(a0)
0001BBFA 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BC00 117C 0018 001C             		move.b	#$18,$1C(a0)
0001BC06 08E8 0007 0002             		bset	#7,2(a0)
0001BC0C 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001BC10 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001BC14 6600                       		bne.s	Kill_Sound
0001BC16 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BC1A                            
0001BC1A                            Kill_Sound:
0001BC1A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l
0001BC20                            
0001BC20                            Kill_NoDeath:
0001BC20 70FF                       		moveq	#-1,d0
0001BC22 4E75                       		rts	
0001BC24                            ; End of function KillSonic
0001BC24                            
0001BC24                            
0001BC24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC24                            
0001BC24                            
0001BC24                            Touch_Special:				; XREF: Touch_ChkValue
0001BC24 1229 0020                  		move.b	$20(a1),d1
0001BC28 0201 003F                  		andi.b	#$3F,d1
0001BC2C 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BC30 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BC32 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BC36 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BC38 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BC3C 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BC3E 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BC42 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BC44 4E75                       		rts	
0001BC46                            ; ===========================================================================
0001BC46                            
0001BC46                            Touch_CatKiller:			; XREF: Touch_Special
0001BC46 6000 FEC8                  		bra.w	loc_1AFDA
0001BC4A                            ; ===========================================================================
0001BC4A                            
0001BC4A                            Touch_Yadrin:				; XREF: Touch_Special
0001BC4A 9A40                       		sub.w	d0,d5
0001BC4C 0C45 0008                  		cmpi.w	#8,d5
0001BC50 6400                       		bcc.s	loc_1B144
0001BC52 3029 0008                  		move.w	8(a1),d0
0001BC56 5940                       		subq.w	#4,d0
0001BC58 0829 0000 0022             		btst	#0,$22(a1)
0001BC5E 6700                       		beq.s	loc_1B130
0001BC60 0440 0010                  		subi.w	#$10,d0
0001BC64                            
0001BC64                            loc_1B130:
0001BC64 9042                       		sub.w	d2,d0
0001BC66 6400                       		bcc.s	loc_1B13C
0001BC68 0640 0018                  		addi.w	#$18,d0
0001BC6C 6500                       		bcs.s	loc_1B140
0001BC6E 6000                       		bra.s	loc_1B144
0001BC70                            ; ===========================================================================
0001BC70                            
0001BC70                            loc_1B13C:
0001BC70 B044                       		cmp.w	d4,d0
0001BC72 6200                       		bhi.s	loc_1B144
0001BC74                            
0001BC74                            loc_1B140:
0001BC74 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BC78                            ; ===========================================================================
0001BC78                            
0001BC78                            loc_1B144:
0001BC78 6000 FDC8                  		bra.w	Touch_Enemy
0001BC7C                            ; ===========================================================================
0001BC7C                            
0001BC7C                            Touch_D7orE1:				; XREF: Touch_Special
0001BC7C 5229 0021                  		addq.b	#1,$21(a1)
0001BC80 4E75                       		rts	
0001BC82                            ; End of function Touch_Special
0001BC82                            
0001BC82                            ; ---------------------------------------------------------------------------
0001BC82                            ; Subroutine to	show the special stage layout
0001BC82                            ; ---------------------------------------------------------------------------
0001BC82                            
0001BC82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC82                            
0001BC82                            
0001BC82                            SS_ShowLayout:				; XREF: SpecialStage
0001BC82 6100 0000                  		bsr.w	SS_AniWallsRings
0001BC86 6100 0000                  		bsr.w	SS_AniItems
0001BC8A 3F05                       		move.w	d5,-(sp)
0001BC8C 43F8 8000                  		lea	($FFFF8000).w,a1
0001BC90 1038 F780                  		move.b	($FFFFF780).w,d0
0001BC94 0200 00FC                  		andi.b	#$FC,d0
0001BC98 4EB9 0000 2D6C             		jsr	(CalcSine).l
0001BC9E 3800                       		move.w	d0,d4
0001BCA0 3A01                       		move.w	d1,d5
0001BCA2 C9FC 0018                  		muls.w	#$18,d4
0001BCA6 CBFC 0018                  		muls.w	#$18,d5
0001BCAA 7400                       		moveq	#0,d2
0001BCAC 3438 F700                  		move.w	($FFFFF700).w,d2
0001BCB0 84FC 0018                  		divu.w	#$18,d2
0001BCB4 4842                       		swap	d2
0001BCB6 4442                       		neg.w	d2
0001BCB8 0642 FF4C                  		addi.w	#-$B4,d2
0001BCBC 7600                       		moveq	#0,d3
0001BCBE 3638 F704                  		move.w	($FFFFF704).w,d3
0001BCC2 86FC 0018                  		divu.w	#$18,d3
0001BCC6 4843                       		swap	d3
0001BCC8 4443                       		neg.w	d3
0001BCCA 0643 FF4C                  		addi.w	#-$B4,d3
0001BCCE 3E3C 000F                  		move.w	#$F,d7
0001BCD2                            
0001BCD2                            loc_1B19E:
0001BCD2 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BCD6 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BCDA 4440                       		neg.w	d0
0001BCDC C3C2                       		muls.w	d2,d1
0001BCDE C1C3                       		muls.w	d3,d0
0001BCE0 2C00                       		move.l	d0,d6
0001BCE2 DC81                       		add.l	d1,d6
0001BCE4 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BCE8 C1C2                       		muls.w	d2,d0
0001BCEA C3C3                       		muls.w	d3,d1
0001BCEC D280                       		add.l	d0,d1
0001BCEE 2406                       		move.l	d6,d2
0001BCF0 3C3C 000F                  		move.w	#$F,d6
0001BCF4                            
0001BCF4                            loc_1B1C0:
0001BCF4 2002                       		move.l	d2,d0
0001BCF6 E080                       		asr.l	#8,d0
0001BCF8 32C0                       		move.w	d0,(a1)+
0001BCFA 2001                       		move.l	d1,d0
0001BCFC E080                       		asr.l	#8,d0
0001BCFE 32C0                       		move.w	d0,(a1)+
0001BD00 D485                       		add.l	d5,d2
0001BD02 D284                       		add.l	d4,d1
0001BD04 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BD08                            
0001BD08 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BD0C 0643 0018                  		addi.w	#$18,d3
0001BD10 51CF FFC0                  		dbf	d7,loc_1B19E
0001BD14                            
0001BD14 3A1F                       		move.w	(sp)+,d5
0001BD16 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BD1C 7000                       		moveq	#0,d0
0001BD1E 3038 F704                  		move.w	($FFFFF704).w,d0
0001BD22 80FC 0018                  		divu.w	#$18,d0
0001BD26 C0FC 0080                  		mulu.w	#$80,d0
0001BD2A D1C0                       		adda.l	d0,a0
0001BD2C 7000                       		moveq	#0,d0
0001BD2E 3038 F700                  		move.w	($FFFFF700).w,d0
0001BD32 80FC 0018                  		divu.w	#$18,d0
0001BD36 D0C0                       		adda.w	d0,a0
0001BD38 49F8 8000                  		lea	($FFFF8000).w,a4
0001BD3C 3E3C 000F                  		move.w	#$F,d7
0001BD40                            
0001BD40                            loc_1B20C:
0001BD40 3C3C 000F                  		move.w	#$F,d6
0001BD44                            
0001BD44                            loc_1B210:
0001BD44 7000                       		moveq	#0,d0
0001BD46 1018                       		move.b	(a0)+,d0
0001BD48 6700                       		beq.s	loc_1B268
0001BD4A 0C00 004E                  		cmpi.b	#$4E,d0
0001BD4E 6200                       		bhi.s	loc_1B268
0001BD50 3614                       		move.w	(a4),d3
0001BD52 0643 0120                  		addi.w	#$120,d3
0001BD56 0C43 0070                  		cmpi.w	#$70,d3
0001BD5A 6500                       		bcs.s	loc_1B268
0001BD5C 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BD60 6400                       		bcc.s	loc_1B268
0001BD62 342C 0002                  		move.w	2(a4),d2
0001BD66 0642 00F0                  		addi.w	#$F0,d2
0001BD6A 0C42 0070                  		cmpi.w	#$70,d2
0001BD6E 6500                       		bcs.s	loc_1B268
0001BD70 0C42 0170                  		cmpi.w	#$170,d2
0001BD74 6400                       		bcc.s	loc_1B268
0001BD76 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BD7C E748                       		lsl.w	#3,d0
0001BD7E 4BF5 0000                  		lea	(a5,d0.w),a5
0001BD82 225D                       		movea.l	(a5)+,a1
0001BD84 321D                       		move.w	(a5)+,d1
0001BD86 D241                       		add.w	d1,d1
0001BD88 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BD8C 365D                       		movea.w	(a5)+,a3
0001BD8E 7200                       		moveq	#0,d1
0001BD90 1219                       		move.b	(a1)+,d1
0001BD92 5301                       		subq.b	#1,d1
0001BD94 6B00                       		bmi.s	loc_1B268
0001BD96 4EB9 0000 E190             		jsr	sub_D762
0001BD9C                            
0001BD9C                            loc_1B268:
0001BD9C 584C                       		addq.w	#4,a4
0001BD9E 51CE FFA4                  		dbf	d6,loc_1B210
0001BDA2                            
0001BDA2 41E8 0070                  		lea	$70(a0),a0
0001BDA6 51CF FF98                  		dbf	d7,loc_1B20C
0001BDAA                            
0001BDAA 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BDAE 0C05 0050                  		cmpi.b	#$50,d5
0001BDB2 6700                       		beq.s	loc_1B288
0001BDB4 24BC 0000 0000             		move.l	#0,(a2)
0001BDBA 4E75                       		rts	
0001BDBC                            ; ===========================================================================
0001BDBC                            
0001BDBC                            loc_1B288:
0001BDBC 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BDC2 4E75                       		rts	
0001BDC4                            ; End of function SS_ShowLayout
0001BDC4                            
0001BDC4                            ; ---------------------------------------------------------------------------
0001BDC4                            ; Subroutine to	animate	walls and rings	in the special stage
0001BDC4                            ; ---------------------------------------------------------------------------
0001BDC4                            
0001BDC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDC4                            
0001BDC4                            
0001BDC4                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BDC4 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BDCA 7000                       		moveq	#0,d0
0001BDCC 1038 F780                  		move.b	($FFFFF780).w,d0
0001BDD0 E408                       		lsr.b	#2,d0
0001BDD2 0240 000F                  		andi.w	#$F,d0
0001BDD6 7223                       		moveq	#$23,d1
0001BDD8                            
0001BDD8                            loc_1B2A4:
0001BDD8 3280                       		move.w	d0,(a1)
0001BDDA 5049                       		addq.w	#8,a1
0001BDDC 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BDE0                            
0001BDE0 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BDE6 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BDEA 6A00                       		bpl.s	loc_1B2C8
0001BDEC 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BDF2 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BDF6 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BDFC                            
0001BDFC                            loc_1B2C8:
0001BDFC 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BE02 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BE06 6A00                       		bpl.s	loc_1B2E4
0001BE08 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BE0E 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BE12 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BE18                            
0001BE18                            loc_1B2E4:
0001BE18 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BE1C 1340 0138                  		move.b	d0,$138(a1)
0001BE20 1340 0160                  		move.b	d0,$160(a1)
0001BE24 1340 0148                  		move.b	d0,$148(a1)
0001BE28 1340 0150                  		move.b	d0,$150(a1)
0001BE2C 1340 01D8                  		move.b	d0,$1D8(a1)
0001BE30 1340 01E0                  		move.b	d0,$1E0(a1)
0001BE34 1340 01E8                  		move.b	d0,$1E8(a1)
0001BE38 1340 01F0                  		move.b	d0,$1F0(a1)
0001BE3C 1340 01F8                  		move.b	d0,$1F8(a1)
0001BE40 1340 0200                  		move.b	d0,$200(a1)
0001BE44 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BE48 6A00                       		bpl.s	loc_1B326
0001BE4A 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BE50 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BE54 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BE5A                            
0001BE5A                            loc_1B326:
0001BE5A 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BE5E 1340 0168                  		move.b	d0,$168(a1)
0001BE62 1340 0170                  		move.b	d0,$170(a1)
0001BE66 1340 0178                  		move.b	d0,$178(a1)
0001BE6A 1340 0180                  		move.b	d0,$180(a1)
0001BE6E 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BE72 6A00                       		bpl.s	loc_1B350
0001BE74 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BE7A 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BE7E 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BE84                            
0001BE84                            loc_1B350:
0001BE84 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BE8A 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BE90 7000                       		moveq	#0,d0
0001BE92 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BE96 D040                       		add.w	d0,d0
0001BE98 41F0 0000                  		lea	(a0,d0.w),a0
0001BE9C 3290                       		move.w	(a0),(a1)
0001BE9E 3368 0002 0008             		move.w	2(a0),8(a1)
0001BEA4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BEAA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BEB0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BEB6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BEBC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BEC2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BEC8 D0FC 0020                  		adda.w	#$20,a0
0001BECC D2FC 0048                  		adda.w	#$48,a1
0001BED0 3290                       		move.w	(a0),(a1)
0001BED2 3368 0002 0008             		move.w	2(a0),8(a1)
0001BED8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BEDE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BEE4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BEEA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BEF0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BEF6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BEFC D0FC 0020                  		adda.w	#$20,a0
0001BF00 D2FC 0048                  		adda.w	#$48,a1
0001BF04 3290                       		move.w	(a0),(a1)
0001BF06 3368 0002 0008             		move.w	2(a0),8(a1)
0001BF0C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BF12 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BF18 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BF1E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BF24 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BF2A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BF30 D0FC 0020                  		adda.w	#$20,a0
0001BF34 D2FC 0048                  		adda.w	#$48,a1
0001BF38 3290                       		move.w	(a0),(a1)
0001BF3A 3368 0002 0008             		move.w	2(a0),8(a1)
0001BF40 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BF46 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BF4C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BF52 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BF58 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BF5E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BF64 D0FC 0020                  		adda.w	#$20,a0
0001BF68 D2FC 0048                  		adda.w	#$48,a1
0001BF6C 4E75                       		rts	
0001BF6E                            ; End of function SS_AniWallsRings
0001BF6E                            
0001BF6E                            ; ===========================================================================
0001BF6E 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BF7E 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BF8E 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BF9E 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BFAE 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BFBE 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BFCE 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BFDE 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BFEE                            ; ---------------------------------------------------------------------------
0001BFEE                            ; Subroutine to	remove items when you collect them in the special stage
0001BFEE                            ; ---------------------------------------------------------------------------
0001BFEE                            
0001BFEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BFEE                            
0001BFEE                            
0001BFEE                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BFEE 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BFF4 303C 001F                  		move.w	#$1F,d0
0001BFF8                            
0001BFF8                            loc_1B4C4:
0001BFF8 4A12                       		tst.b	(a2)
0001BFFA 6700                       		beq.s	locret_1B4CE
0001BFFC 504A                       		addq.w	#8,a2
0001BFFE 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001C002                            
0001C002                            locret_1B4CE:
0001C002 4E75                       		rts	
0001C004                            ; End of function SS_RemoveCollectedItem
0001C004                            
0001C004                            ; ---------------------------------------------------------------------------
0001C004                            ; Subroutine to	animate	special	stage items when you touch them
0001C004                            ; ---------------------------------------------------------------------------
0001C004                            
0001C004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C004                            
0001C004                            
0001C004                            SS_AniItems:				; XREF: SS_ShowLayout
0001C004 41F9 00FF 4400             		lea	($FF4400).l,a0
0001C00A 3E3C 001F                  		move.w	#$1F,d7
0001C00E                            
0001C00E                            loc_1B4DA:
0001C00E 7000                       		moveq	#0,d0
0001C010 1010                       		move.b	(a0),d0
0001C012 6700                       		beq.s	loc_1B4E8
0001C014 E548                       		lsl.w	#2,d0
0001C016 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001C01A 4E91                       		jsr	(a1)
0001C01C                            
0001C01C                            loc_1B4E8:
0001C01C 5048                       		addq.w	#8,a0
0001C01E                            
0001C01E                            loc_1B4EA:
0001C01E 51CF FFEE                  		dbf	d7,loc_1B4DA
0001C022                            
0001C022 4E75                       		rts	
0001C024                            ; End of function SS_AniItems
0001C024                            
0001C024                            ; ===========================================================================
0001C024 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001C028 0000 0000                  		dc.l SS_AniBumper
0001C02C 0000 0000                  		dc.l SS_Ani1Up
0001C030 0000 0000                  		dc.l SS_AniReverse
0001C034 0000 0000                  		dc.l SS_AniEmeraldSparks
0001C038 0000 0000                  		dc.l SS_AniGlassBlock
0001C03C                            ; ===========================================================================
0001C03C                            
0001C03C                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001C03C 5328 0002                  		subq.b	#1,2(a0)
0001C040 6A00                       		bpl.s	locret_1B530
0001C042 117C 0005 0002             		move.b	#5,2(a0)
0001C048 7000                       		moveq	#0,d0
0001C04A 1028 0003                  		move.b	3(a0),d0
0001C04E 5228 0003                  		addq.b	#1,3(a0)
0001C052 2268 0004                  		movea.l	4(a0),a1
0001C056 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001C05A 1280                       		move.b	d0,(a1)
0001C05C 6600                       		bne.s	locret_1B530
0001C05E 4290                       		clr.l	(a0)
0001C060 42A8 0004                  		clr.l	4(a0)
0001C064                            
0001C064                            locret_1B530:
0001C064 4E75                       		rts	
0001C066                            ; ===========================================================================
0001C066 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001C06C                            ; ===========================================================================
0001C06C                            
0001C06C                            SS_AniBumper:				; XREF: SS_AniIndex
0001C06C 5328 0002                  		subq.b	#1,2(a0)
0001C070 6A00                       		bpl.s	locret_1B566
0001C072 117C 0007 0002             		move.b	#7,2(a0)
0001C078 7000                       		moveq	#0,d0
0001C07A 1028 0003                  		move.b	3(a0),d0
0001C07E 5228 0003                  		addq.b	#1,3(a0)
0001C082 2268 0004                  		movea.l	4(a0),a1
0001C086 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001C08A 6600                       		bne.s	loc_1B564
0001C08C 4290                       		clr.l	(a0)
0001C08E 42A8 0004                  		clr.l	4(a0)
0001C092 12BC 0025                  		move.b	#$25,(a1)
0001C096 4E75                       		rts	
0001C098                            ; ===========================================================================
0001C098                            
0001C098                            loc_1B564:
0001C098 1280                       		move.b	d0,(a1)
0001C09A                            
0001C09A                            locret_1B566:
0001C09A 4E75                       		rts	
0001C09C                            ; ===========================================================================
0001C09C 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001C0A2                            ; ===========================================================================
0001C0A2                            
0001C0A2                            SS_Ani1Up:				; XREF: SS_AniIndex
0001C0A2 5328 0002                  		subq.b	#1,2(a0)
0001C0A6 6A00                       		bpl.s	locret_1B596
0001C0A8 117C 0005 0002             		move.b	#5,2(a0)
0001C0AE 7000                       		moveq	#0,d0
0001C0B0 1028 0003                  		move.b	3(a0),d0
0001C0B4 5228 0003                  		addq.b	#1,3(a0)
0001C0B8 2268 0004                  		movea.l	4(a0),a1
0001C0BC 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001C0C0 1280                       		move.b	d0,(a1)
0001C0C2 6600                       		bne.s	locret_1B596
0001C0C4 4290                       		clr.l	(a0)
0001C0C6 42A8 0004                  		clr.l	4(a0)
0001C0CA                            
0001C0CA                            locret_1B596:
0001C0CA 4E75                       		rts	
0001C0CC                            ; ===========================================================================
0001C0CC 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001C0D2                            ; ===========================================================================
0001C0D2                            
0001C0D2                            SS_AniReverse:				; XREF: SS_AniIndex
0001C0D2 5328 0002                  		subq.b	#1,2(a0)
0001C0D6 6A00                       		bpl.s	locret_1B5CC
0001C0D8 117C 0007 0002             		move.b	#7,2(a0)
0001C0DE 7000                       		moveq	#0,d0
0001C0E0 1028 0003                  		move.b	3(a0),d0
0001C0E4 5228 0003                  		addq.b	#1,3(a0)
0001C0E8 2268 0004                  		movea.l	4(a0),a1
0001C0EC 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001C0F0 6600                       		bne.s	loc_1B5CA
0001C0F2 4290                       		clr.l	(a0)
0001C0F4 42A8 0004                  		clr.l	4(a0)
0001C0F8 12BC 002B                  		move.b	#$2B,(a1)
0001C0FC 4E75                       		rts	
0001C0FE                            ; ===========================================================================
0001C0FE                            
0001C0FE                            loc_1B5CA:
0001C0FE 1280                       		move.b	d0,(a1)
0001C100                            
0001C100                            locret_1B5CC:
0001C100 4E75                       		rts	
0001C102                            ; ===========================================================================
0001C102 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001C108                            ; ===========================================================================
0001C108                            
0001C108                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001C108 5328 0002                  		subq.b	#1,2(a0)
0001C10C 6A00                       		bpl.s	locret_1B60C
0001C10E 117C 0005 0002             		move.b	#5,2(a0)
0001C114 7000                       		moveq	#0,d0
0001C116 1028 0003                  		move.b	3(a0),d0
0001C11A 5228 0003                  		addq.b	#1,3(a0)
0001C11E 2268 0004                  		movea.l	4(a0),a1
0001C122 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001C126 1280                       		move.b	d0,(a1)
0001C128 6600                       		bne.s	locret_1B60C
0001C12A 4290                       		clr.l	(a0)
0001C12C 42A8 0004                  		clr.l	4(a0)
0001C130 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001C136 303C 00A8                  		move.w	#$A8,d0
0001C13A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001C140                            
0001C140                            locret_1B60C:
0001C140 4E75                       		rts	
0001C142                            ; ===========================================================================
0001C142 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001C148                            ; ===========================================================================
0001C148                            
0001C148                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001C148 5328 0002                  		subq.b	#1,2(a0)
0001C14C 6A00                       		bpl.s	locret_1B640
0001C14E 117C 0001 0002             		move.b	#1,2(a0)
0001C154 7000                       		moveq	#0,d0
0001C156 1028 0003                  		move.b	3(a0),d0
0001C15A 5228 0003                  		addq.b	#1,3(a0)
0001C15E 2268 0004                  		movea.l	4(a0),a1
0001C162 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001C166 1280                       		move.b	d0,(a1)
0001C168 6600                       		bne.s	locret_1B640
0001C16A 12A8 0004                  		move.b	4(a0),(a1)
0001C16E 4290                       		clr.l	(a0)
0001C170 42A8 0004                  		clr.l	4(a0)
0001C174                            
0001C174                            locret_1B640:
0001C174 4E75                       		rts	
0001C176                            ; ===========================================================================
0001C176 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001C180                            ; ---------------------------------------------------------------------------
0001C180                            ; Special stage	layout pointers
0001C180                            ; ---------------------------------------------------------------------------
0001C180                            SS_LayoutIndex:
0001C180                            	include "_inc\Special stage layout pointers.asm"
0001C180                            ; ---------------------------------------------------------------------------
0001C180                            ; Special stage	layout pointers
0001C180                            ; ---------------------------------------------------------------------------
0001C180 0000 0000                  	dc.l SS_1
0001C184 0000 0000                  	dc.l SS_2
0001C188 0000 0000                  	dc.l SS_3
0001C18C 0000 0000                  	dc.l SS_4
0001C190 0000 0000                  	dc.l SS_5
0001C194 0000 0000                  	dc.l SS_6
0001C198                            	even
0001C198                            	even
0001C198                            
0001C198                            ; ---------------------------------------------------------------------------
0001C198                            ; Special stage	start locations
0001C198                            ; ---------------------------------------------------------------------------
0001C198                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001C1B0                            		even
0001C1B0                            
0001C1B0                            ; ---------------------------------------------------------------------------
0001C1B0                            ; Subroutine to	load special stage layout
0001C1B0                            ; ---------------------------------------------------------------------------
0001C1B0                            
0001C1B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1B0                            
0001C1B0                            
0001C1B0                            SS_Load:				; XREF: SpecialStage
0001C1B0 7000                       		moveq	#0,d0
0001C1B2 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001C1B6 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001C1BA 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001C1C0 6500                       		bcs.s	SS_ChkEmldNum
0001C1C2 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001C1C8                            
0001C1C8                            SS_ChkEmldNum:
0001C1C8 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001C1CE 6700                       		beq.s	SS_LoadData	; if yes, branch
0001C1D0 7200                       		moveq	#0,d1
0001C1D2 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001C1D6 5301                       		subq.b	#1,d1
0001C1D8 6500                       		bcs.s	SS_LoadData
0001C1DA 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001C1DE                            
0001C1DE                            SS_ChkEmldLoop:	
0001C1DE B033 1000                  		cmp.b	(a3,d1.w),d0
0001C1E2 6600                       		bne.s	SS_ChkEmldRepeat
0001C1E4 60CA                       		bra.s	SS_Load
0001C1E6                            ; ===========================================================================
0001C1E6                            
0001C1E6                            SS_ChkEmldRepeat:
0001C1E6 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001C1EA                            
0001C1EA                            SS_LoadData:
0001C1EA E548                       		lsl.w	#2,d0
0001C1EC 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001C1F0 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001C1F4 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001C1F8 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001C1FC 43F9 00FF 4000             		lea	($FF4000).l,a1
0001C202 303C 0000                  		move.w	#0,d0
0001C206 4EB9 0000 1954             		jsr	(EniDec).l
0001C20C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C212 303C 0FFF                  		move.w	#$FFF,d0
0001C216                            
0001C216                            SS_ClrRAM3:
0001C216 4299                       		clr.l	(a1)+
0001C218 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C21C                            
0001C21C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C222 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C228 723F                       		moveq	#$3F,d1
0001C22A                            
0001C22A                            loc_1B6F6:
0001C22A 743F                       		moveq	#$3F,d2
0001C22C                            
0001C22C                            loc_1B6F8:
0001C22C 12D8                       		move.b	(a0)+,(a1)+
0001C22E 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C232                            
0001C232 43E9 0040                  		lea	$40(a1),a1
0001C236 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C23A                            
0001C23A 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C240 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C246 724D                       		moveq	#$4D,d1
0001C248                            
0001C248                            loc_1B714:
0001C248 22D8                       		move.l	(a0)+,(a1)+
0001C24A 32FC 0000                  		move.w	#0,(a1)+
0001C24E 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C254 32D8                       		move.w	(a0)+,(a1)+
0001C256 51C9 FFF0                  		dbf	d1,loc_1B714
0001C25A                            
0001C25A 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C260 323C 003F                  		move.w	#$3F,d1
0001C264                            
0001C264                            loc_1B730:
0001C264                            
0001C264 4299                       		clr.l	(a1)+
0001C266 51C9 FFFC                  		dbf	d1,loc_1B730
0001C26A                            
0001C26A 4E75                       		rts	
0001C26C                            ; End of function SS_Load
0001C26C                            
0001C26C                            ; ===========================================================================
0001C26C                            ; ---------------------------------------------------------------------------
0001C26C                            ; Special stage	mappings and VRAM pointers
0001C26C                            ; ---------------------------------------------------------------------------
0001C26C                            SS_MapIndex:
0001C26C                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C26C                            ; ---------------------------------------------------------------------------
0001C26C                            ; Special stage	mappings and VRAM pointers
0001C26C                            ; ---------------------------------------------------------------------------
0001C26C 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C270 0142                       	dc.w $142		; VRAM setting
0001C272 0000 0000                  	dc.l Map_SSWalls
0001C276 0142                       	dc.w $142
0001C278 0000 0000                  	dc.l Map_SSWalls
0001C27C 0142                       	dc.w $142
0001C27E 0000 0000                  	dc.l Map_SSWalls
0001C282 0142                       	dc.w $142
0001C284 0000 0000                  	dc.l Map_SSWalls
0001C288 0142                       	dc.w $142
0001C28A 0000 0000                  	dc.l Map_SSWalls
0001C28E 0142                       	dc.w $142
0001C290 0000 0000                  	dc.l Map_SSWalls
0001C294 0142                       	dc.w $142
0001C296 0000 0000                  	dc.l Map_SSWalls
0001C29A 0142                       	dc.w $142
0001C29C 0000 0000                  	dc.l Map_SSWalls
0001C2A0 0142                       	dc.w $142
0001C2A2 0000 0000                  	dc.l Map_SSWalls
0001C2A6 2142                       	dc.w $2142
0001C2A8 0000 0000                  	dc.l Map_SSWalls
0001C2AC 2142                       	dc.w $2142
0001C2AE 0000 0000                  	dc.l Map_SSWalls
0001C2B2 2142                       	dc.w $2142
0001C2B4 0000 0000                  	dc.l Map_SSWalls
0001C2B8 2142                       	dc.w $2142
0001C2BA 0000 0000                  	dc.l Map_SSWalls
0001C2BE 2142                       	dc.w $2142
0001C2C0 0000 0000                  	dc.l Map_SSWalls
0001C2C4 2142                       	dc.w $2142
0001C2C6 0000 0000                  	dc.l Map_SSWalls
0001C2CA 2142                       	dc.w $2142
0001C2CC 0000 0000                  	dc.l Map_SSWalls
0001C2D0 2142                       	dc.w $2142
0001C2D2 0000 0000                  	dc.l Map_SSWalls
0001C2D6 2142                       	dc.w $2142
0001C2D8 0000 0000                  	dc.l Map_SSWalls
0001C2DC 4142                       	dc.w $4142
0001C2DE 0000 0000                  	dc.l Map_SSWalls
0001C2E2 4142                       	dc.w $4142
0001C2E4 0000 0000                  	dc.l Map_SSWalls
0001C2E8 4142                       	dc.w $4142
0001C2EA 0000 0000                  	dc.l Map_SSWalls
0001C2EE 4142                       	dc.w $4142
0001C2F0 0000 0000                  	dc.l Map_SSWalls
0001C2F4 4142                       	dc.w $4142
0001C2F6 0000 0000                  	dc.l Map_SSWalls
0001C2FA 4142                       	dc.w $4142
0001C2FC 0000 0000                  	dc.l Map_SSWalls
0001C300 4142                       	dc.w $4142
0001C302 0000 0000                  	dc.l Map_SSWalls
0001C306 4142                       	dc.w $4142
0001C308 0000 0000                  	dc.l Map_SSWalls
0001C30C 4142                       	dc.w $4142
0001C30E 0000 0000                  	dc.l Map_SSWalls
0001C312 6142                       	dc.w $6142
0001C314 0000 0000                  	dc.l Map_SSWalls
0001C318 6142                       	dc.w $6142
0001C31A 0000 0000                  	dc.l Map_SSWalls
0001C31E 6142                       	dc.w $6142
0001C320 0000 0000                  	dc.l Map_SSWalls
0001C324 6142                       	dc.w $6142
0001C326 0000 0000                  	dc.l Map_SSWalls
0001C32A 6142                       	dc.w $6142
0001C32C 0000 0000                  	dc.l Map_SSWalls
0001C330 6142                       	dc.w $6142
0001C332 0000 0000                  	dc.l Map_SSWalls
0001C336 6142                       	dc.w $6142
0001C338 0000 0000                  	dc.l Map_SSWalls
0001C33C 6142                       	dc.w $6142
0001C33E 0000 0000                  	dc.l Map_SSWalls
0001C342 6142                       	dc.w $6142
0001C344 0000 F526                  	dc.l Map_obj47
0001C348 023B                       	dc.w $23B
0001C34A 0000 0000                  	dc.l Map_SS_R
0001C34E 0570                       	dc.w $570
0001C350 0000 0000                  	dc.l Map_SS_R
0001C354 0251                       	dc.w $251
0001C356 0000 0000                  	dc.l Map_SS_R
0001C35A 0370                       	dc.w $370
0001C35C 0000 0000                  	dc.l Map_SS_Up
0001C360 0263                       	dc.w $263
0001C362 0000 0000                  	dc.l Map_SS_Down
0001C366 0263                       	dc.w $263
0001C368 0000 0000                  	dc.l Map_SS_R
0001C36C 22F0                       	dc.w $22F0
0001C36E 0000 0000                  	dc.l Map_SS_Glass
0001C372 0470                       	dc.w $470
0001C374 0000 0000                  	dc.l Map_SS_Glass
0001C378 05F0                       	dc.w $5F0
0001C37A 0000 0000                  	dc.l Map_SS_Glass
0001C37E 65F0                       	dc.w $65F0
0001C380 0000 0000                  	dc.l Map_SS_Glass
0001C384 25F0                       	dc.w $25F0
0001C386 0000 0000                  	dc.l Map_SS_Glass
0001C38A 45F0                       	dc.w $45F0
0001C38C 0000 0000                  	dc.l Map_SS_R
0001C390 02F0                       	dc.w $2F0
0001C392 0100 F526                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C396 023B                       	dc.w $23B
0001C398 0200 F526                  	dc.l Map_obj47+$2000000
0001C39C 023B                       	dc.w $23B
0001C39E 0000 0000                  	dc.l Map_SS_R
0001C3A2 0797                       	dc.w $797
0001C3A4 0000 0000                  	dc.l Map_SS_R
0001C3A8 07A0                       	dc.w $7A0
0001C3AA 0000 0000                  	dc.l Map_SS_R
0001C3AE 07A9                       	dc.w $7A9
0001C3B0 0000 0000                  	dc.l Map_SS_R
0001C3B4 0797                       	dc.w $797
0001C3B6 0000 0000                  	dc.l Map_SS_R
0001C3BA 07A0                       	dc.w $7A0
0001C3BC 0000 0000                  	dc.l Map_SS_R
0001C3C0 07A9                       	dc.w $7A9
0001C3C2 0000 A82E                  	dc.l Map_obj25
0001C3C6 27B2                       	dc.w $27B2
0001C3C8 0000 0000                  	dc.l Map_SS_Chaos3
0001C3CC 0770                       	dc.w $770
0001C3CE 0000 0000                  	dc.l Map_SS_Chaos3
0001C3D2 2770                       	dc.w $2770
0001C3D4 0000 0000                  	dc.l Map_SS_Chaos3
0001C3D8 4770                       	dc.w $4770
0001C3DA 0000 0000                  	dc.l Map_SS_Chaos3
0001C3DE 6770                       	dc.w $6770
0001C3E0 0000 0000                  	dc.l Map_SS_Chaos1
0001C3E4 0770                       	dc.w $770
0001C3E6 0000 0000                  	dc.l Map_SS_Chaos2
0001C3EA 0770                       	dc.w $770
0001C3EC 0000 0000                  	dc.l Map_SS_R
0001C3F0 04F0                       	dc.w $4F0
0001C3F2 0400 A82E                  	dc.l Map_obj25+$4000000
0001C3F6 27B2                       	dc.w $27B2
0001C3F8 0500 A82E                  	dc.l Map_obj25+$5000000
0001C3FC 27B2                       	dc.w $27B2
0001C3FE 0600 A82E                  	dc.l Map_obj25+$6000000
0001C402 27B2                       	dc.w $27B2
0001C404 0700 A82E                  	dc.l Map_obj25+$7000000
0001C408 27B2                       	dc.w $27B2
0001C40A 0000 0000                  	dc.l Map_SS_Glass
0001C40E 23F0                       	dc.w $23F0
0001C410 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C414 23F0                       	dc.w $23F0
0001C416 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C41A 23F0                       	dc.w $23F0
0001C41C 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C420 23F0                       	dc.w $23F0
0001C422 0000 0000                  	dc.l Map_SS_R+$2000000
0001C426 04F0                       	dc.w $4F0
0001C428 0000 0000                  	dc.l Map_SS_Glass
0001C42C 05F0                       	dc.w $5F0
0001C42E 0000 0000                  	dc.l Map_SS_Glass
0001C432 65F0                       	dc.w $65F0
0001C434 0000 0000                  	dc.l Map_SS_Glass
0001C438 25F0                       	dc.w $25F0
0001C43A 0000 0000                  	dc.l Map_SS_Glass
0001C43E 45F0                       	dc.w $45F0
0001C43E 45F0                       	dc.w $45F0
0001C440                            
0001C440                            ; ---------------------------------------------------------------------------
0001C440                            ; Sprite mappings - special stage "R" block
0001C440                            ; ---------------------------------------------------------------------------
0001C440                            Map_SS_R:
0001C440                            	include "_maps\SSRblock.asm"
0001C440                            ; ---------------------------------------------------------------------------
0001C440                            ; Sprite mappings - special stage "R" block
0001C440                            ; ---------------------------------------------------------------------------
0001C440 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C444 0000                       		dc.w byte_1B91E-Map_SS_R
0001C446 01                         byte_1B912:	dc.b 1
0001C447 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C44C 01                         byte_1B918:	dc.b 1
0001C44D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C452 00                         byte_1B91E:	dc.b 0
0001C454 00                         		even
0001C454 00                         		even
0001C454                            
0001C454                            ; ---------------------------------------------------------------------------
0001C454                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C454                            ; ---------------------------------------------------------------------------
0001C454                            Map_SS_Glass:
0001C454                            	include "_maps\SSglassblock.asm"
0001C454                            ; ---------------------------------------------------------------------------
0001C454                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C454                            ; ---------------------------------------------------------------------------
0001C454 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C458 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C45C 01                         byte_1B928:	dc.b 1
0001C45D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C462 01                         byte_1B92E:	dc.b 1
0001C463 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C468 01                         byte_1B934:	dc.b 1
0001C469 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C46E 01                         byte_1B93A:	dc.b 1
0001C46F F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C474                            		even
0001C474                            		even
0001C474                            
0001C474                            ; ---------------------------------------------------------------------------
0001C474                            ; Sprite mappings - special stage "UP" block
0001C474                            ; ---------------------------------------------------------------------------
0001C474                            Map_SS_Up:
0001C474                            	include "_maps\SSUPblock.asm"
0001C474                            ; ---------------------------------------------------------------------------
0001C474                            ; Sprite mappings - special stage "UP" block
0001C474                            ; ---------------------------------------------------------------------------
0001C474 0000                       		dc.w byte_1B944-Map_SS_Up
0001C476 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C478 01                         byte_1B944:	dc.b 1
0001C479 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C47E 01                         byte_1B94A:	dc.b 1
0001C47F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C484                            		even
0001C484                            		even
0001C484                            
0001C484                            ; ---------------------------------------------------------------------------
0001C484                            ; Sprite mappings - special stage "DOWN" block
0001C484                            ; ---------------------------------------------------------------------------
0001C484                            Map_SS_Down:
0001C484                            	include "_maps\SSDOWNblock.asm"
0001C484                            ; ---------------------------------------------------------------------------
0001C484                            ; Sprite mappings - special stage "DOWN" block
0001C484                            ; ---------------------------------------------------------------------------
0001C484 0000                       		dc.w byte_1B954-Map_SS_Down
0001C486 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C488 01                         byte_1B954:	dc.b 1
0001C489 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C48E 01                         byte_1B95A:	dc.b 1
0001C48F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C494                            		even
0001C494                            		even
0001C494                            
0001C494                            ; ---------------------------------------------------------------------------
0001C494                            ; Sprite mappings - special stage chaos	emeralds
0001C494                            ; ---------------------------------------------------------------------------
0001C494 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C496 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C498 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C49A 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C49C 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C49E 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C4A0 01                         byte_1B96C:	dc.b 1
0001C4A1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C4A6 01                         byte_1B972:	dc.b 1
0001C4A7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C4AC 01                         byte_1B978:	dc.b 1
0001C4AD F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C4B2 01                         byte_1B97E:	dc.b 1
0001C4B3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C4B8                            		even
0001C4B8                            ; ===========================================================================
0001C4B8                            ; ---------------------------------------------------------------------------
0001C4B8                            ; Object 09 - Sonic (special stage)
0001C4B8                            ; ---------------------------------------------------------------------------
0001C4B8                            
0001C4B8                            Obj09:					; XREF: Obj_Index
0001C4B8                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C4B8                            ;		beq.s	Obj09_Normal	; if not, branch
0001C4B8 6100 0000                  		bsr.w	SS_FixCamera
0001C4BC                            ;		bra.w	DebugMode
0001C4BC                            ; ===========================================================================
0001C4BC                            
0001C4BC                            Obj09_Normal:
0001C4BC 7000                       		moveq	#0,d0
0001C4BE 1028 0024                  		move.b	$24(a0),d0
0001C4C2 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C4C6 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C4CA                            ; ===========================================================================
0001C4CA 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C4CC 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C4CE 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C4D0 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C4D2                            ; ===========================================================================
0001C4D2                            
0001C4D2                            Obj09_Main:				; XREF: Obj09_Index
0001C4D2 5428 0024                  		addq.b	#2,$24(a0)
0001C4D6 117C 000E 0016             		move.b	#$E,$16(a0)
0001C4DC 117C 0007 0017             		move.b	#7,$17(a0)
0001C4E2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C4EA 317C 0780 0002             		move.w	#$780,2(a0)
0001C4F0 117C 0004 0001             		move.b	#4,1(a0)
0001C4F6 117C 0000 0018             		move.b	#0,$18(a0)
0001C4FC 117C 0002 001C             		move.b	#2,$1C(a0)
0001C502 08E8 0002 0022             		bset	#2,$22(a0)
0001C508 08E8 0001 0022             		bset	#1,$22(a0)
0001C50E                            
0001C50E                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C50E                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C50E                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C50E                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001C50E                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C50E                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C50E                            
0001C50E                            Obj09_NoDebug:
0001C50E 117C 0000 0030             		move.b	#0,$30(a0)
0001C514 7000                       		moveq	#0,d0
0001C516 1028 0022                  		move.b	$22(a0),d0
0001C51A 0240 0002                  		andi.w	#2,d0
0001C51E 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C522 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C526 4EBA 8212                  		jsr	LoadSonicDynPLC
0001C52A 4EF9 0000 E032             		jmp	DisplaySprite
0001C530                            ; ===========================================================================
0001C530 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C532 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C534                            ; ===========================================================================
0001C534                            
0001C534                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C534 6100 0000                  		bsr.w	Obj09_Rise
0001C538 6100 0000                  		bsr.w	Obj09_Move
0001C53C 6100 0000                  		bsr.w	Obj09_Fall
0001C540 6000                       		bra.s	Obj09_Display
0001C542                            ; ===========================================================================
0001C542                            
0001C542                            Obj09_InAir:				; XREF: Obj09_Modes
0001C542 6100 0000                  		bsr.w	Obj09_Rise
0001C546 6100 0000                  		bsr.w	Obj09_Move
0001C54A 6100 0000                  		bsr.w	Obj09_Fall
0001C54E                            
0001C54E                            Obj09_Display:				; XREF: Obj09_OnWall
0001C54E 6100 0000                  		bsr.w	Obj09_ChkItems
0001C552 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C556 4EB9 0000 E00C             		jsr	SpeedToPos
0001C55C 6100 0000                  		bsr.w	SS_FixCamera
0001C560 3038 F780                  		move.w	($FFFFF780).w,d0
0001C564 D078 F782                  		add.w	($FFFFF782).w,d0
0001C568 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C56C 4EB9 0001 4494             		jsr	Sonic_Animate
0001C572 4E75                       		rts	
0001C574                            
0001C574                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C574                            
0001C574                            
0001C574                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C574 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C57A 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C57C 4A78 F784                          tst.w   ($FFFFF784).w
0001C580 6600                               bne.s   @corereverse1
0001C582 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C586 6000                               bra.s   Obj09_ChkRight          
0001C588                            
0001C588                            @corereverse1:
0001C588 6100 0000                          bsr.w	Obj09_MoveRight
0001C58C                            
0001C58C                            Obj09_ChkRight:
0001C58C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C592 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001C594 4A78 F784                          tst.w   ($FFFFF784).w
0001C598 6600                               bne.s   @corereverse2
0001C59A 6100 0000                  		bsr.w	Obj09_MoveRight
0001C59E 6000                               bra.s   Obj09_MoveSpeed 
0001C5A0                            
0001C5A0                            @corereverse2:
0001C5A0 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001C5A4                            
0001C5A4                            Obj09_MoveSpeed:
0001C5A4 1038 F602                  		move.b	($FFFFF602).w,d0
0001C5A8 0200 000C                  		andi.b	#$C,d0
0001C5AC 6600                       		bne.s	Obj09_MoveCollision
0001C5AE 3028 0010                  		move.w	$10(a0),d0
0001C5B2 6700                       		beq.s	Obj09_MoveCollision
0001C5B4 317C 0000 0010             		move.w	#0,$10(a0)
0001C5BA                            
0001C5BA                            Obj09_MoveCollision:
0001C5BA 1038 F780                  		move.b	($FFFFF780).w,d0
0001C5BE 0600 0020                  		addi.b	#$20,d0
0001C5C2 0200 00C0                  		andi.b	#$C0,d0
0001C5C6 4400                       		neg.b	d0
0001C5C8 4EB9 0000 2D6C             		jsr	(CalcSine).l
0001C5CE C3E8 0010                  		muls.w	$10(a0),d1
0001C5D2 D3A8 0008                  		add.l	d1,8(a0)
0001C5D6 C1E8 0012                  		muls.w	$12(a0),d0
0001C5DA D1A8 000C                  		add.l	d0,$C(a0)
0001C5DE 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C5E2 2428 000C                  		move.l	$C(a0),d2
0001C5E6 2628 0008                  		move.l	8(a0),d3
0001C5EA 6100 0000                  		bsr.w	sub_1BCE8
0001C5EE 6700                       		beq.s	loc_1BAF2
0001C5F0 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C5F4 93A8 0008                  		sub.l	d1,8(a0)
0001C5F8 91A8 000C                  		sub.l	d0,$C(a0)
0001C5FC 317C 0000 0010             		move.w	#0,$10(a0)
0001C602 4E75                       		rts	
0001C604                            ; ===========================================================================
0001C604                            
0001C604                            loc_1BAF2:
0001C604 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C608 4E75                       		rts	
0001C60A                            ; End of function Obj09_Move
0001C60A                            
0001C60A                            
0001C60A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C60A                            
0001C60A                            
0001C60A                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C60A 08E8 0000 0022             		bset	#0,$22(a0)
0001C610 4240                               clr.w   d0
0001C612 3038 F786                          move.w  ($FFFFF786).w,d0
0001C616 D040                               add.w   d0,d0
0001C618 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C61E 4468 0010                          neg.w   $10(a0)
0001C622 4E75                               rts
0001C624                            
0001C624                            ; End of function Obj09_MoveLeft
0001C624                            
0001C624                            
0001C624                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C624                            
0001C624                            
0001C624                            Obj09_MoveRight:
0001C624 08A8 0000 0022             		bclr	#0,$22(a0)
0001C62A 4240                               clr.w   d0
0001C62C 3038 F786                          move.w  ($FFFFF786).w,d0
0001C630 D040                               add.w   d0,d0
0001C632 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C638 4E75                       		rts
0001C63A                            
0001C63A                            ; End of function Obj09_MoveRight
0001C63A                            
0001C63A                            ; ---------------------------------------------------------------------------
0001C63A                            
0001C63A                            SS_XSpdIndex:
0001C63A 0032                       		dc.w 50
0001C63C 0064                       		dc.w 100
0001C63E 0096                       		dc.w 150
0001C640 00C8                       		dc.w 200
0001C642 00FA                       		dc.w 250
0001C644                            
0001C644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C644                            
0001C644                            
0001C644                            Obj09_Rise:				; XREF: Obj09_OnWall
0001C644 0838 0000 F602             		btst	#0,($FFFFF602).w
0001C64A 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001C64C 4A78 F784                          tst.w   ($FFFFF784).w
0001C650 6600 0000                          bne.w   @corereverse1
0001C654 6100 0000                  		bsr.w	Obj09_MoveUp
0001C658 6000                               bra.s   Obj09_NoRise
0001C65A                            
0001C65A                            @corereverse1:
0001C65A 6100 0000                  		bsr.w	Obj09_Falling 
0001C65E                                    
0001C65E                            Obj09_NoRise:
0001C65E 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001C664 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001C666 4A78 F784                          tst.w   ($FFFFF784).w
0001C66A 6600 0000                          bne.w   @corereverse2
0001C66E 6100 0000                  		bsr.w	Obj09_Falling			;	
0001C672 6000                               bra.s   Obj09_MoveYSpeed
0001C674                            
0001C674                            @corereverse2:
0001C674 6100 0000                  		bsr.w	Obj09_MoveUp
0001C678                            		
0001C678                            Obj09_MoveYSpeed:
0001C678 1038 F602                  		move.b	($FFFFF602).w,d0
0001C67C 0200 0003                  		andi.b	#3,d0
0001C680 6600                       		bne.s	Obj09_MoveYCollision
0001C682 3028 0012                  		move.w	$12(a0),d0
0001C686 6700                       		beq.s	Obj09_MoveYCollision
0001C688 317C 0000 0012             		move.w	#0,$12(a0)
0001C68E                            
0001C68E                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001C68E 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001C692 0600 0020                  		addi.b	#$20,d0					;	?
0001C696 0200 00C0                  		andi.b	#$C0,d0					;	
0001C69A 4400                       		neg.b	d0						;	?
0001C69C 4EB9 0000 2D6C             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001C6A2 C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001C6A6 D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001C6AA C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001C6AE D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001C6B2 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001C6B6 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001C6BA 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001C6BE 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001C6C2 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001C6C6 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001C6CA 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001C6CE 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001C6D2 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001C6D8 4E75                       		rts								;	end routine
0001C6DA                            
0001C6DA                            Obj09_MoveUp:
0001C6DA 4240                               clr.w   d0
0001C6DC 3038 F786                          move.w  ($FFFFF786).w,d0
0001C6E0 D040                               add.w   d0,d0
0001C6E2 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C6E8 4468 0012                          neg.w   $12(a0)
0001C6EC 4E75                               rts
0001C6EE                            
0001C6EE                            Obj09_Falling:
0001C6EE 4240                               clr.w   d0
0001C6F0 3038 F786                          move.w  ($FFFFF786).w,d0
0001C6F4 D040                               add.w   d0,d0
0001C6F6 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C6FC 4E75                       		rts
0001C6FE                            ; End of function Obj09_Jump
0001C6FE                            
0001C6FE                            ; ---------------------------------------------------------------------------
0001C6FE                            SS_YSpdIndex:
0001C6FE 0080                       		dc.w $80
0001C700 0100                       		dc.w $100
0001C702 0180                       		dc.w $180
0001C704 0200                       		dc.w $200
0001C706 0280                       		dc.w $280
0001C708                            
0001C708                            
0001C708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C708                            
0001C708                            
0001C708                            nullsub_2:				; XREF: Obj09_InAir
0001C708 4E75                       		rts	
0001C70A                            ; End of function nullsub_2
0001C70A                            
0001C70A                            ; ===========================================================================
0001C70A                            ; ---------------------------------------------------------------------------
0001C70A                            ; unused subroutine to limit Sonic's upward vertical speed
0001C70A                            ; ---------------------------------------------------------------------------
0001C70A 323C FC00                  		move.w	#-$400,d1
0001C70E B268 0012                  		cmp.w	$12(a0),d1
0001C712 6F00                       		ble.s	locret_1BBB4
0001C714 1038 F602                  		move.b	($FFFFF602).w,d0
0001C718 0200 0070                  		andi.b	#$70,d0
0001C71C 6600                       		bne.s	locret_1BBB4
0001C71E 3141 0012                  		move.w	d1,$12(a0)
0001C722                            
0001C722                            locret_1BBB4:
0001C722 4E75                       		rts	
0001C724                            ; ---------------------------------------------------------------------------
0001C724                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C724                            ; ---------------------------------------------------------------------------
0001C724                            
0001C724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C724                            
0001C724                            
0001C724                            SS_FixCamera:				; XREF: Obj09
0001C724 3428 000C                  		move.w	$C(a0),d2
0001C728 3628 0008                  		move.w	8(a0),d3
0001C72C 3038 F700                  		move.w	($FFFFF700).w,d0
0001C730 0443 00A0                  		subi.w	#$A0,d3
0001C734 6500                       		bcs.s	loc_1BBCE
0001C736 9043                       		sub.w	d3,d0
0001C738 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C73C                            
0001C73C                            loc_1BBCE:
0001C73C 3038 F704                  		move.w	($FFFFF704).w,d0
0001C740 0442 0070                  		subi.w	#$70,d2
0001C744 6500                       		bcs.s	locret_1BBDE
0001C746 9042                       		sub.w	d2,d0
0001C748 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C74C                            
0001C74C                            locret_1BBDE:
0001C74C 4E75                       		rts	
0001C74E                            ; End of function SS_FixCamera
0001C74E                            
0001C74E                            ; ===========================================================================
0001C74E                            
0001C74E                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C74E 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C754 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C75A 6600                       		bne.s	loc_1BBF4
0001C75C 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C762                            
0001C762                            loc_1BBF4:
0001C762 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C768 6D00                       		blt.s	loc_1BC12
0001C76A 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C770                            ;		move.w	#$4000,($FFFFF780).w
0001C770 5428 0024                  		addq.b	#2,$24(a0)
0001C774 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C77A                            
0001C77A                            loc_1BC12:
0001C77A                            ;		move.w	($FFFFF780).w,d0
0001C77A                            ;		add.w	($FFFFF782).w,d0
0001C77A                            ;		move.w	d0,($FFFFF780).w
0001C77A 4EB9 0001 4494             		jsr	Sonic_Animate
0001C780 4EB9 0001 473A             		jsr	LoadSonicDynPLC
0001C786 6100 FF9C                  		bsr.w	SS_FixCamera
0001C78A 4EF9 0000 E032             		jmp	DisplaySprite
0001C790                            ; ===========================================================================
0001C790                            
0001C790                            Obj09_Exit2:				; XREF: Obj09_Index
0001C790 5368 0038                  		subq.w	#1,$38(a0)
0001C794 6600                       		bne.s	loc_1BC40
0001C796 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C79C                            
0001C79C                            loc_1BC40:
0001C79C 4EB9 0001 4494             		jsr	Sonic_Animate
0001C7A2 4EB9 0001 473A             		jsr	LoadSonicDynPLC
0001C7A8 6100 FF7A                  		bsr.w	SS_FixCamera
0001C7AC 4EF9 0000 E032             		jmp	DisplaySprite
0001C7B2                            
0001C7B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7B2                            
0001C7B2                            
0001C7B2                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C7B2 2428 000C                  		move.l	$C(a0),d2
0001C7B6 2628 0008                  		move.l	8(a0),d3
0001C7BA 1038 F780                  		move.b	($FFFFF780).w,d0
0001C7BE 0200 00FC                  		andi.b	#$FC,d0
0001C7C2 4EB9 0000 2D6C             		jsr	(CalcSine).l
0001C7C8 3828 0010                  		move.w	$10(a0),d4
0001C7CC 48C4                       		ext.l	d4
0001C7CE E184                       		asl.l	#8,d4
0001C7D0 C1FC 002A                  		muls.w	#$2A,d0
0001C7D4 D084                       		add.l	d4,d0
0001C7D6 3828 0012                  		move.w	$12(a0),d4
0001C7DA 48C4                       		ext.l	d4
0001C7DC E184                       		asl.l	#8,d4
0001C7DE C3FC 002A                  		muls.w	#$2A,d1
0001C7E2 D284                       		add.l	d4,d1
0001C7E4 7A00                       		moveq	#0,d5
0001C7E6 3A28 0010                  		move.w	$10(a0),d5
0001C7EA 6700                       		beq.s	Obj09_NoXFall
0001C7EC D680                       		add.l	d0,d3
0001C7EE 6100 0000                  		bsr.w	sub_1BCE8
0001C7F2 6700                       		beq.s	loc_1BCB0
0001C7F4 9680                       		sub.l	d0,d3
0001C7F6 7000                       		moveq	#0,d0
0001C7F8 3140 0010                  		move.w	d0,$10(a0)
0001C7FC 08A8 0001 0022             		bclr	#1,$22(a0)
0001C802                            
0001C802                            Obj09_NoXFall
0001C802 7C00                       		moveq	#0,d6
0001C804 3C28 0012                  		move.w	$12(a0),d6
0001C808 6700                       		beq.s	Obj09_NoYFall
0001C80A D481                       		add.l	d1,d2
0001C80C 6100 0000                  		bsr.w	sub_1BCE8
0001C810 6700                       		beq.s	loc_1BCC6
0001C812 9481                       		sub.l	d1,d2
0001C814 7200                       		moveq	#0,d1
0001C816 3141 0012                  		move.w	d1,$12(a0)
0001C81A 4E75                       		rts	
0001C81C                            ; ===========================================================================
0001C81C                            
0001C81C                            loc_1BCB0:
0001C81C 7C00                       		moveq	#0,d6
0001C81E 3C28 0012                  		move.w	$12(a0),d6
0001C822 6700                       		beq.s	Obj09_NoYFall
0001C824 D481                       		add.l	d1,d2
0001C826 6100 0000                  		bsr.w	sub_1BCE8
0001C82A 6700                       		beq.s	loc_1BCD4
0001C82C 9481                       		sub.l	d1,d2
0001C82E 7200                       		moveq	#0,d1
0001C830 3141 0012                  		move.w	d1,$12(a0)
0001C834 08A8 0001 0022             		bclr	#1,$22(a0)
0001C83A                            
0001C83A                            loc_1BCC6:
0001C83A E080                       		asr.l	#8,d0
0001C83C E081                       		asr.l	#8,d1
0001C83E 3140 0010                  		move.w	d0,$10(a0)
0001C842 3141 0012                  		move.w	d1,$12(a0)
0001C846 4E75                       		rts	
0001C848                            ; ===========================================================================
0001C848                            
0001C848                            loc_1BCD4:
0001C848 E080                       		asr.l	#8,d0
0001C84A E081                       		asr.l	#8,d1
0001C84C 3140 0010                  		move.w	d0,$10(a0)
0001C850 3141 0012                  		move.w	d1,$12(a0)
0001C854 08E8 0001 0022             		bset	#1,$22(a0)
0001C85A 4E75                       		rts	
0001C85C                            
0001C85C                            Obj09_NoYFall:
0001C85C 4E75                       		rts
0001C85E                            ; End of function Obj09_Fall
0001C85E                            
0001C85E                            
0001C85E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C85E                            
0001C85E                            
0001C85E                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C85E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C864 7800                       		moveq	#0,d4
0001C866 4842                       		swap	d2
0001C868 3802                       		move.w	d2,d4
0001C86A 4842                       		swap	d2
0001C86C 0644 0044                  		addi.w	#$44,d4
0001C870 88FC 0018                  		divu.w	#$18,d4
0001C874 C8FC 0080                  		mulu.w	#$80,d4
0001C878 D3C4                       		adda.l	d4,a1
0001C87A 7800                       		moveq	#0,d4
0001C87C 4843                       		swap	d3
0001C87E 3803                       		move.w	d3,d4
0001C880 4843                       		swap	d3
0001C882 0644 0014                  		addi.w	#$14,d4
0001C886 88FC 0018                  		divu.w	#$18,d4
0001C88A D2C4                       		adda.w	d4,a1
0001C88C 7A00                       		moveq	#0,d5
0001C88E 1819                       		move.b	(a1)+,d4
0001C890 6100                       		bsr.s	sub_1BD30
0001C892 1819                       		move.b	(a1)+,d4
0001C894 6100                       		bsr.s	sub_1BD30
0001C896 D2FC 007E                  		adda.w	#$7E,a1
0001C89A 1819                       		move.b	(a1)+,d4
0001C89C 6100                       		bsr.s	sub_1BD30
0001C89E 1819                       		move.b	(a1)+,d4
0001C8A0 6100                       		bsr.s	sub_1BD30
0001C8A2 4A05                       		tst.b	d5
0001C8A4 4E75                       		rts	
0001C8A6                            ; End of function sub_1BCE8
0001C8A6                            
0001C8A6                            
0001C8A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8A6                            
0001C8A6                            
0001C8A6                            sub_1BD30:				; XREF: sub_1BCE8
0001C8A6 6700                       		beq.s	locret_1BD44
0001C8A8 0C04 0028                  		cmpi.b	#$28,d4
0001C8AC 6500                       		blo.s	loc_1BD46
0001C8AE 0C04 004B                  		cmpi.b	#$4B,d4
0001C8B2 6400                       		bhs.s	loc_1BD46
0001C8B4 0C04 003A                  		cmpi.b	#$3A,d4
0001C8B8 6400                       		bhs.s	locret_1BD44
0001C8BA 0C04 002C                  		cmpi.b	#$2C,d4
0001C8BE 6400                       		bhs.s	loc_1BD46
0001C8C0                            
0001C8C0                            locret_1BD44:
0001C8C0 4E75                       		rts	
0001C8C2                            ; ===========================================================================
0001C8C2                            
0001C8C2                            loc_1BD46:
0001C8C2 1144 0030                  		move.b	d4,$30(a0)
0001C8C6 2149 0032                  		move.l	a1,$32(a0)
0001C8CA 7AFF                       		moveq	#-1,d5
0001C8CC 4E75                       		rts	
0001C8CE                            ; End of function sub_1BD30
0001C8CE                            
0001C8CE                            
0001C8CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8CE                            
0001C8CE                            
0001C8CE                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C8CE 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C8D4 7800                       		moveq	#0,d4
0001C8D6 3828 000C                  		move.w	$C(a0),d4
0001C8DA 0644 0050                  		addi.w	#$50,d4
0001C8DE 88FC 0018                  		divu.w	#$18,d4
0001C8E2 C8FC 0080                  		mulu.w	#$80,d4
0001C8E6 D3C4                       		adda.l	d4,a1
0001C8E8 7800                       		moveq	#0,d4
0001C8EA 3828 0008                  		move.w	8(a0),d4
0001C8EE 0644 0020                  		addi.w	#$20,d4
0001C8F2 88FC 0018                  		divu.w	#$18,d4
0001C8F6 D2C4                       		adda.w	d4,a1
0001C8F8 1811                       		move.b	(a1),d4
0001C8FA 6600                       		bne.s	Obj09_ChkCont
0001C8FC 4A28 003A                  		tst.b	$3A(a0)
0001C900 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C904 7800                       		moveq	#0,d4
0001C906 4E75                       		rts	
0001C908                            ; ===========================================================================
0001C908                            
0001C908                            Obj09_ChkCont:
0001C908 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C90C 6600                       		bne.s	Obj09_Chk1Up
0001C90E 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001C912 6600                       		bne.s	Obj09_GetCont
0001C914 14BC 0001                  		move.b	#1,(a2)
0001C918 2549 0004                  		move.l	a1,4(a2)
0001C91C                            
0001C91C                            Obj09_GetCont:
0001C91C 4EB9 0000 A516             		jsr	CollectRing
0001C922 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C928 6500                       		bcs.s	Obj09_NoCont
0001C92A 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C930 6600                       		bne.s	Obj09_NoCont
0001C932 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C936 303C 00BF                  		move.w	#$BF,d0
0001C93A 4EB9 0000 15CC             		jsr	(PlaySound).l	; play extra continue sound
0001C940                            
0001C940                            Obj09_NoCont:
0001C940 7800                       		moveq	#0,d4
0001C942 4E75                       		rts	
0001C944                            ; ===========================================================================
0001C944                            
0001C944                            Obj09_Chk1Up:
0001C944 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C948 6600                       		bne.s	Obj09_ChkEmer
0001C94A 6100 F6A2                  		bsr.w	SS_RemoveCollectedItem
0001C94E 6600                       		bne.s	Obj09_Get1Up
0001C950 14BC 0003                  		move.b	#3,(a2)
0001C954 2549 0004                  		move.l	a1,4(a2)
0001C958                            
0001C958                            Obj09_Get1Up:
0001C958 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C95C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C960 303C 0088                  		move.w	#$88,d0
0001C964 4EB9 0000 15CC             		jsr	(PlaySound).l	; play extra life music
0001C96A 7800                       		moveq	#0,d4
0001C96C 4E75                       		rts	
0001C96E                            ; ===========================================================================
0001C96E                            
0001C96E                            Obj09_ChkEmer:
0001C96E 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C972 6500                       		bcs.s	Obj09_UPblock
0001C974 0C04 0040                  		cmpi.b	#$40,d4
0001C978 6200                       		bhi.s	Obj09_UPblock
0001C97A 6100 F672                  		bsr.w	SS_RemoveCollectedItem
0001C97E 6600                       		bne.s	Obj09_GetEmer
0001C980 14BC 0005                  		move.b	#5,(a2)
0001C984 2549 0004                  		move.l	a1,4(a2)
0001C988                            
0001C988                            Obj09_GetEmer:
0001C988 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C98E 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C990 0404 003B                  		subi.b	#$3B,d4
0001C994 7000                       		moveq	#0,d0
0001C996 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C99A 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C99E 1584 0000                  		move.b	d4,(a2,d0.w)
0001C9A2 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C9A6                            
0001C9A6                            Obj09_NoEmer:
0001C9A6 303C 0093                  		move.w	#$93,d0
0001C9AA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play emerald music
0001C9B0 7800                       		moveq	#0,d4
0001C9B2 4E75                       		rts	
0001C9B4                            
0001C9B4                            ; ===========================================================================
0001C9B4                            
0001C9B4                            Obj09_UPblock:
0001C9B4 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001C9B8 6600                       		bne.s	Obj09_DOWNblock
0001C9BA 6100 F632                  		bsr.w	SS_RemoveCollectedItem
0001C9BE 6600                       		bne.s	Obj09_SpeedUp
0001C9C0 14BC 0001                  		move.b	#1,(a2)
0001C9C4 2549 0004                  		move.l	a1,4(a2)
0001C9C8                            
0001C9C8                            Obj09_SpeedUp:
0001C9C8 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001C9CE 6400                       		bhs.s	Obj09_UPsnd
0001C9D0 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001C9D4                            
0001C9D4                            Obj09_UPsnd:
0001C9D4 303C 00A9                  		move.w	#$A9,d0
0001C9D8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l	; play up/down sound
0001C9DE 7800                       		moveq	#0,d4
0001C9E0 4E75                       		rts	
0001C9E2                            ; ===========================================================================
0001C9E2                            
0001C9E2                            Obj09_DOWNblock:
0001C9E2 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001C9E6 6600                       		bne.s	Obj09_Rblock
0001C9E8 6100 F604                  		bsr.w	SS_RemoveCollectedItem
0001C9EC 6600                       		bne.s	Obj09_SpeedDown
0001C9EE 14BC 0001                  		move.b	#1,(a2)
0001C9F2 2549 0004                  		move.l	a1,4(a2)
0001C9F6                            
0001C9F6                            Obj09_SpeedDown:
0001C9F6 4A78 F786                  		tst.w 	($FFFFF786).w
0001C9FA 6700                       		beq.s	Obj09_DOWNsnd
0001C9FC 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001CA00                            
0001CA00                            Obj09_DOWNsnd:
0001CA00 303C 00A9                  		move.w	#$A9,d0
0001CA04 4EB9 0000 15D2             		jsr	(PlaySound_Special).l	; play up/down sound
0001CA0A 7800                       		moveq	#0,d4
0001CA0C 4E75                       		rts	
0001CA0E                            ; ===========================================================================
0001CA0E                            
0001CA0E                            Obj09_Rblock:
0001CA0E 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001CA12 6600                       		bne.s	Obj09_ChkGhost
0001CA14 6100 F5D8                  		bsr.w	SS_RemoveCollectedItem
0001CA18 6600                       		bne.s	Obj09_RevStage
0001CA1A 14BC 0001                  		move.b	#1,(a2)
0001CA1E 2549 0004                  		move.l	a1,4(a2)
0001CA22                            
0001CA22                            Obj09_RevStage:
0001CA22 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001CA28 103C 00A9                  		move.b	#$A9,d0
0001CA2C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l	; play sound
0001CA32 7800                       		moveq	#0,d4
0001CA34 4E75                       		rts	
0001CA36                            
0001CA36                            ; ===========================================================================
0001CA36                            
0001CA36                            Obj09_ChkGhost:
0001CA36 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001CA3A 6600                       		bne.s	Obj09_ChkGhostTag
0001CA3C 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001CA42                            
0001CA42                            Obj09_ChkGhostTag:
0001CA42 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001CA46 6600                       		bne.s	Obj09_NoGhost
0001CA48 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001CA4E 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001CA50 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001CA56                            
0001CA56                            Obj09_NoGhost:
0001CA56 78FF                       		moveq	#-1,d4
0001CA58 4E75                       		rts	
0001CA5A                            ; ===========================================================================
0001CA5A                            
0001CA5A                            Obj09_MakeGhostSolid:
0001CA5A 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001CA60 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001CA62 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CA68 723F                       		moveq	#$3F,d1
0001CA6A                            
0001CA6A                            Obj09_GhostLoop2:
0001CA6A 743F                       		moveq	#$3F,d2
0001CA6C                            
0001CA6C                            Obj09_GhostLoop:
0001CA6C 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001CA70 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001CA72 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001CA76                            
0001CA76                            Obj09_NoReplace:
0001CA76 5249                       		addq.w	#1,a1
0001CA78 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001CA7C 43E9 0040                  		lea	$40(a1),a1
0001CA80 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001CA84                            
0001CA84                            Obj09_GhostNotSolid:
0001CA84 4228 003A                  		clr.b	$3A(a0)
0001CA88 7800                       		moveq	#0,d4
0001CA8A 4E75                       		rts	
0001CA8C                            ; End of function Obj09_ChkItems
0001CA8C                            
0001CA8C                            
0001CA8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA8C                            
0001CA8C                            
0001CA8C                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001CA8C 1028 0030                  		move.b	$30(a0),d0
0001CA90 6600                       		bne.s	Obj09_GOAL
0001CA92 5328 0036                  		subq.b	#1,$36(a0)
0001CA96 6A00                       		bpl.s	loc_1BEA0
0001CA98 117C 0000 0036             		move.b	#0,$36(a0)
0001CA9E                            
0001CA9E                            loc_1BEA0:
0001CA9E 5328 0037                  		subq.b	#1,$37(a0)
0001CAA2 6A00                       		bpl.s	locret_1BEAC
0001CAA4 117C 0000 0037             		move.b	#0,$37(a0)
0001CAAA                            
0001CAAA                            locret_1BEAC:
0001CAAA 4E75                       		rts	
0001CAAC                            ; ===========================================================================
0001CAAC                            
0001CAAC                            ; ===========================================================================
0001CAAC                            
0001CAAC                            Obj09_GOAL:
0001CAAC 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001CAB0 6600                       		bne.s	Obj09_ChkGlass
0001CAB2 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001CAB6 303C 00A8                  		move.w	#$A8,d0		; change item
0001CABA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001CAC0 4E75                       		rts	
0001CAC2                            ; ===========================================================================
0001CAC2                            
0001CAC2                            ; ===========================================================================
0001CAC2                            
0001CAC2                            Obj09_ChkGlass:
0001CAC2 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001CAC6 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001CAC8 0C00 002E                  		cmpi.b	#$2E,d0
0001CACC 6700                       		beq.s	Obj09_Glass
0001CACE 0C00 002F                  		cmpi.b	#$2F,d0
0001CAD2 6700                       		beq.s	Obj09_Glass
0001CAD4 0C00 0030                  		cmpi.b	#$30,d0
0001CAD8 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001CADA                            
0001CADA                            Obj09_Glass:
0001CADA 6100 F512                  		bsr.w	SS_RemoveCollectedItem
0001CADE 6600                       		bne.s	Obj09_GlassSnd
0001CAE0 14BC 0006                  		move.b	#6,(a2)
0001CAE4 2268 0032                  		movea.l	$32(a0),a1
0001CAE8 5389                       		subq.l	#1,a1
0001CAEA 2549 0004                  		move.l	a1,4(a2)
0001CAEE 1011                       		move.b	(a1),d0
0001CAF0 5200                       		addq.b	#1,d0		; change glass type when touched
0001CAF2 0C00 0030                  		cmpi.b	#$30,d0
0001CAF6 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001CAF8 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001CAFA                            
0001CAFA                            Obj09_GlassUpdate:
0001CAFA 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001CAFE                            
0001CAFE                            Obj09_GlassSnd:
0001CAFE 303C 00BA                  		move.w	#$BA,d0
0001CB02 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play glass block sound
0001CB08                            ; ===========================================================================
0001CB08                            
0001CB08                            Obj09_NoGlass:
0001CB08 4E75                       		rts	
0001CB0A                            ; End of function Obj09_ChkItems2
0001CB0A                            
0001CB0A                            ; ===========================================================================
0001CB0A                            ; ---------------------------------------------------------------------------
0001CB0A                            ; Object 10 - blank
0001CB0A                            ; ---------------------------------------------------------------------------
0001CB0A                            
0001CB0A                            Obj10:					; XREF: Obj_Index
0001CB0A 4E75                       		rts	
0001CB0C                            ; ---------------------------------------------------------------------------
0001CB0C                            ; Subroutine to	animate	level graphics
0001CB0C                            ; ---------------------------------------------------------------------------
0001CB0C                            
0001CB0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB0C                            
0001CB0C                            
0001CB0C                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001CB0C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CB10 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001CB12 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CB18 6100 0000                  		bsr.w	AniArt_GiantRing
0001CB1C 7000                       		moveq	#0,d0
0001CB1E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CB22 D040                       		add.w	d0,d0
0001CB24 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001CB28 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001CB2C                            ; ===========================================================================
0001CB2C                            
0001CB2C                            AniArt_Pause:
0001CB2C 4E75                       		rts	
0001CB2E                            ; End of function AniArt_Load
0001CB2E                            
0001CB2E                            ; ===========================================================================
0001CB2E 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001CB32 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001CB36 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001CB3A 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_GHZ-AniArt_Index
0001CB3E                            ; ===========================================================================
0001CB3E                            ; ---------------------------------------------------------------------------
0001CB3E                            ; Animated pattern routine - Green Hill
0001CB3E                            ; ---------------------------------------------------------------------------
0001CB3E                            
0001CB3E                            AniArt_GHZ:				; XREF: AniArt_Index
0001CB3E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CB42 6A00                       		bpl.s	loc_1C08A
0001CB44 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001CB4A 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001CB50 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CB54 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CB58 0240 0001                  		andi.w	#1,d0
0001CB5C 6700                       		beq.s	loc_1C078
0001CB5E 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001CB62                            
0001CB62                            loc_1C078:
0001CB62 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001CB6C 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001CB70 6000 0000                  		bra.w	LoadTiles
0001CB74                            ; ===========================================================================
0001CB74                            
0001CB74                            loc_1C08A:
0001CB74 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CB78 6A00                       		bpl.s	loc_1C0C0
0001CB7A 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001CB80 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CB86 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CB8A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CB8E 0240 0001                  		andi.w	#1,d0
0001CB92 6700                       		beq.s	loc_1C0AE
0001CB94 43E9 0200                  		lea	$200(a1),a1
0001CB98                            
0001CB98                            loc_1C0AE:
0001CB98 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CBA2 323C 000F                  		move.w	#$F,d1
0001CBA6 6000 0000                  		bra.w	LoadTiles
0001CBAA                            ; ===========================================================================
0001CBAA                            
0001CBAA                            loc_1C0C0:
0001CBAA 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CBAE 6A00                       		bpl.s	locret_1C10C
0001CBB0 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CBB6 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CBBA 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CBBE 0240 0003                  		andi.w	#3,d0
0001CBC2 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001CBC6 0800 0000                  		btst	#0,d0
0001CBCA 6600                       		bne.s	loc_1C0E8
0001CBCC 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001CBD2                            
0001CBD2                            loc_1C0E8:
0001CBD2 EF48                       		lsl.w	#7,d0
0001CBD4 3200                       		move.w	d0,d1
0001CBD6 D040                       		add.w	d0,d0
0001CBD8 D041                       		add.w	d1,d0
0001CBDA 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CBE4 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CBEA 43F1 0000                  		lea	(a1,d0.w),a1
0001CBEE 323C 000B                  		move.w	#$B,d1
0001CBF2 6100 0000                  		bsr.w	LoadTiles
0001CBF6                            
0001CBF6                            locret_1C10C:
0001CBF6 4E75                       		rts	
0001CBF8                            ; ===========================================================================
0001CBF8 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CBFC                            ; ===========================================================================
0001CBFC                            ; ---------------------------------------------------------------------------
0001CBFC                            ; Animated pattern routine - Marble
0001CBFC                            ; ---------------------------------------------------------------------------
0001CBFC                            
0001CBFC                            AniArt_MZ:				; XREF: AniArt_Index
0001CBFC 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CC00 6A00                       		bpl.s	loc_1C150
0001CC02 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CC08 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CC0E 7000                       		moveq	#0,d0
0001CC10 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CC14 5200                       		addq.b	#1,d0
0001CC16 0C00 0003                  		cmpi.b	#3,d0
0001CC1A 6600                       		bne.s	loc_1C134
0001CC1C 7000                       		moveq	#0,d0
0001CC1E                            
0001CC1E                            loc_1C134:
0001CC1E 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CC22 C0FC 0100                  		mulu.w	#$100,d0
0001CC26 D2C0                       		adda.w	d0,a1
0001CC28 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CC32 323C 0007                  		move.w	#7,d1
0001CC36 6100 0000                  		bsr.w	LoadTiles
0001CC3A                            
0001CC3A                            loc_1C150:
0001CC3A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CC3E 6A00                       		bpl.s	loc_1C1AE
0001CC40 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CC46 7000                       		moveq	#0,d0
0001CC48 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CC4C 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CC52 EE58                       		ror.w	#7,d0
0001CC54 D8C0                       		adda.w	d0,a4
0001CC56 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CC60 7600                       		moveq	#0,d3
0001CC62 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CC66 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CC6A 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CC6E 343C 0003                  		move.w	#3,d2
0001CC72                            
0001CC72                            loc_1C188:
0001CC72 3003                       		move.w	d3,d0
0001CC74 D040                       		add.w	d0,d0
0001CC76 0240 001E                  		andi.w	#$1E,d0
0001CC7A 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CC80 3033 0000                  		move.w	(a3,d0.w),d0
0001CC84 47F3 0000                  		lea	(a3,d0.w),a3
0001CC88 224C                       		movea.l	a4,a1
0001CC8A 323C 001F                  		move.w	#$1F,d1
0001CC8E 4E93                       		jsr	(a3)
0001CC90 5843                       		addq.w	#4,d3
0001CC92 51CA FFDE                  		dbf	d2,loc_1C188
0001CC96 4E75                       		rts	
0001CC98                            ; ===========================================================================
0001CC98                            
0001CC98                            loc_1C1AE:
0001CC98 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CC9C 6A00 0000                  		bpl.w	locret_1C1EA
0001CCA0 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CCA6 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CCAC 7000                       		moveq	#0,d0
0001CCAE 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CCB2 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CCB6 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CCBC C0FC 00C0                  		mulu.w	#$C0,d0
0001CCC0 D2C0                       		adda.w	d0,a1
0001CCC2 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CCCC 323C 0005                  		move.w	#5,d1
0001CCD0 6000 0000                  		bra.w	LoadTiles
0001CCD4                            ; ===========================================================================
0001CCD4                            
0001CCD4                            locret_1C1EA:
0001CCD4 4E75                       		rts	
0001CCD6                            ; ===========================================================================
0001CCD6                            ; ---------------------------------------------------------------------------
0001CCD6                            ; Animated pattern routine - Scrap Brain
0001CCD6                            ; ---------------------------------------------------------------------------
0001CCD6                            
0001CCD6                            AniArt_SBZ:				; XREF: AniArt_Index
0001CCD6 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CCDA 6700                       		beq.s	loc_1C1F8
0001CCDC 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CCE0 6000                       		bra.s	loc_1C250
0001CCE2                            ; ===========================================================================
0001CCE2                            
0001CCE2                            loc_1C1F8:
0001CCE2 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CCE6 6A00                       		bpl.s	loc_1C250
0001CCE8 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CCEE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CCF4 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CCFE 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CD02 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CD06 0240 0007                  		andi.w	#7,d0
0001CD0A 6700                       		beq.s	loc_1C234
0001CD0C 5340                       		subq.w	#1,d0
0001CD0E C0FC 0180                  		mulu.w	#$180,d0
0001CD12 43F1 0000                  		lea	(a1,d0.w),a1
0001CD16 323C 000B                  		move.w	#$B,d1
0001CD1A 6000 0000                  		bra.w	LoadTiles
0001CD1E                            ; ===========================================================================
0001CD1E                            
0001CD1E                            loc_1C234:
0001CD1E 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CD24                            
0001CD24                            loc_1C23A:
0001CD24 323C 0005                  		move.w	#5,d1
0001CD28 6100 0000                  		bsr.w	LoadTiles
0001CD2C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CD32 323C 0005                  		move.w	#5,d1
0001CD36 6000 0000                  		bra.w	LoadTiles
0001CD3A                            ; ===========================================================================
0001CD3A                            
0001CD3A                            loc_1C250:
0001CD3A 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CD3E 6700                       		beq.s	loc_1C25C
0001CD40 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CD44 6000                       		bra.s	locret_1C2A0
0001CD46                            ; ===========================================================================
0001CD46                            
0001CD46                            loc_1C25C:
0001CD46 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CD4A 6A00                       		bpl.s	locret_1C2A0
0001CD4C 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CD52 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CD58 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CD62 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CD66 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CD6A 0240 0007                  		andi.w	#7,d0
0001CD6E 6700                       		beq.s	loc_1C298
0001CD70 5340                       		subq.w	#1,d0
0001CD72 C0FC 0180                  		mulu.w	#$180,d0
0001CD76 43F1 0000                  		lea	(a1,d0.w),a1
0001CD7A 323C 000B                  		move.w	#$B,d1
0001CD7E 6000 0000                  		bra.w	LoadTiles
0001CD82                            ; ===========================================================================
0001CD82                            
0001CD82                            loc_1C298:
0001CD82 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CD88 609A                       		bra.s	loc_1C23A
0001CD8A                            ; ===========================================================================
0001CD8A                            
0001CD8A                            locret_1C2A0:
0001CD8A 4E75                       		rts	
0001CD8C                            ; ===========================================================================
0001CD8C                            ; ---------------------------------------------------------------------------
0001CD8C                            ; Animated pattern routine - ending sequence
0001CD8C                            ; ---------------------------------------------------------------------------
0001CD8C                            
0001CD8C                            AniArt_Ending:				; XREF: AniArt_Index
0001CD8C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CD90 6A00                       		bpl.s	loc_1C2F4
0001CD92 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CD98 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CD9E 45F8 9400                  		lea	($FFFF9400).w,a2
0001CDA2 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CDA6 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CDAA 0240 0001                  		andi.w	#1,d0
0001CDAE 6700                       		beq.s	loc_1C2CE
0001CDB0 43E9 0200                  		lea	$200(a1),a1
0001CDB4 45EA 0200                  		lea	$200(a2),a2
0001CDB8                            
0001CDB8                            loc_1C2CE:
0001CDB8 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CDC2 323C 000F                  		move.w	#$F,d1
0001CDC6 6100 0000                  		bsr.w	LoadTiles
0001CDCA 224A                       		movea.l	a2,a1
0001CDCC 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CDD6 323C 000F                  		move.w	#$F,d1
0001CDDA 6000 0000                  		bra.w	LoadTiles
0001CDDE                            ; ===========================================================================
0001CDDE                            
0001CDDE                            loc_1C2F4:
0001CDDE 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CDE2 6A00                       		bpl.s	loc_1C33C
0001CDE4 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CDEA 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CDEE 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CDF2 0240 0007                  		andi.w	#7,d0
0001CDF6 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CDFA EF48                       		lsl.w	#7,d0
0001CDFC 3200                       		move.w	d0,d1
0001CDFE D040                       		add.w	d0,d0
0001CE00 D041                       		add.w	d1,d0
0001CE02 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CE0C 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CE12 43F1 0000                  		lea	(a1,d0.w),a1
0001CE16 323C 000B                  		move.w	#$B,d1
0001CE1A 6000 0000                  		bra.w	LoadTiles
0001CE1E                            ; ===========================================================================
0001CE1E 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CE26                            ; ===========================================================================
0001CE26                            
0001CE26                            loc_1C33C:
0001CE26 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CE2A 6A00                       		bpl.s	loc_1C37A
0001CE2C 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CE32 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CE36 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CE3A 0240 0003                  		andi.w	#3,d0
0001CE3E 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CE42 E148                       		lsl.w	#8,d0
0001CE44 D040                       		add.w	d0,d0
0001CE46 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CE50 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CE54 43F1 0000                  		lea	(a1,d0.w),a1
0001CE58 323C 000F                  		move.w	#$F,d1
0001CE5C 6000 0000                  		bra.w	LoadTiles
0001CE60                            ; ===========================================================================
0001CE60 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CE64                            ; ===========================================================================
0001CE64                            
0001CE64                            loc_1C37A:
0001CE64 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CE68 6A00                       		bpl.s	locret_1C3B4
0001CE6A 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CE70 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CE74 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CE78 0240 0003                  		andi.w	#3,d0
0001CE7C 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CE80 E148                       		lsl.w	#8,d0
0001CE82 D040                       		add.w	d0,d0
0001CE84 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CE8E 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CE92 43F1 0000                  		lea	(a1,d0.w),a1
0001CE96 323C 000F                  		move.w	#$F,d1
0001CE9A 6000 0000                  		bra.w	LoadTiles
0001CE9E                            ; ===========================================================================
0001CE9E                            
0001CE9E                            locret_1C3B4:
0001CE9E 4E75                       		rts	
0001CEA0                            ; ===========================================================================
0001CEA0                            
0001CEA0                            AniArt_none:				; XREF: AniArt_Index
0001CEA0 4E75                       		rts	
0001CEA2                            
0001CEA2                            ; ---------------------------------------------------------------------------
0001CEA2                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CEA2                            ; ---------------------------------------------------------------------------
0001CEA2                            
0001CEA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEA2                            
0001CEA2                            
0001CEA2                            LoadTiles:
0001CEA2 2C99                       		move.l	(a1)+,(a6)
0001CEA4 2C99                       		move.l	(a1)+,(a6)
0001CEA6 2C99                       		move.l	(a1)+,(a6)
0001CEA8 2C99                       		move.l	(a1)+,(a6)
0001CEAA 2C99                       		move.l	(a1)+,(a6)
0001CEAC 2C99                       		move.l	(a1)+,(a6)
0001CEAE 2C99                       		move.l	(a1)+,(a6)
0001CEB0 2C99                       		move.l	(a1)+,(a6)
0001CEB2 51C9 FFEE                  		dbf	d1,LoadTiles
0001CEB6 4E75                       		rts	
0001CEB8                            ; End of function LoadTiles
0001CEB8                            
0001CEB8                            ; ===========================================================================
0001CEB8                            ; ---------------------------------------------------------------------------
0001CEB8                            ; Animated pattern routine - more Marble Zone
0001CEB8                            ; ---------------------------------------------------------------------------
0001CEB8 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CEBC 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CEC0 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CEC4 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CEC8 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CECC 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CED0 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CED4 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CED8                            ; ===========================================================================
0001CED8                            
0001CED8                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CED8 2C91                       		move.l	(a1),(a6)
0001CEDA 43E9 0010                  		lea	$10(a1),a1
0001CEDE 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CEE2 4E75                       		rts	
0001CEE4                            ; ===========================================================================
0001CEE4                            
0001CEE4                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CEE4 2029 0002                  		move.l	2(a1),d0
0001CEE8 1029 0001                  		move.b	1(a1),d0
0001CEEC E098                       		ror.l	#8,d0
0001CEEE 2C80                       		move.l	d0,(a6)
0001CEF0 43E9 0010                  		lea	$10(a1),a1
0001CEF4 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CEF8 4E75                       		rts	
0001CEFA                            ; ===========================================================================
0001CEFA                            
0001CEFA                            loc_1C410:				; XREF: AniArt_MZextra
0001CEFA 2CA9 0002                  		move.l	2(a1),(a6)
0001CEFE 43E9 0010                  		lea	$10(a1),a1
0001CF02 51C9 FFF6                  		dbf	d1,loc_1C410
0001CF06 4E75                       		rts	
0001CF08                            ; ===========================================================================
0001CF08                            
0001CF08                            loc_1C41E:				; XREF: AniArt_MZextra
0001CF08 2029 0004                  		move.l	4(a1),d0
0001CF0C 1029 0003                  		move.b	3(a1),d0
0001CF10 E098                       		ror.l	#8,d0
0001CF12 2C80                       		move.l	d0,(a6)
0001CF14 43E9 0010                  		lea	$10(a1),a1
0001CF18 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CF1C 4E75                       		rts	
0001CF1E                            ; ===========================================================================
0001CF1E                            
0001CF1E                            loc_1C434:				; XREF: AniArt_MZextra
0001CF1E 2CA9 0004                  		move.l	4(a1),(a6)
0001CF22 43E9 0010                  		lea	$10(a1),a1
0001CF26 51C9 FFF6                  		dbf	d1,loc_1C434
0001CF2A 4E75                       		rts	
0001CF2C                            ; ===========================================================================
0001CF2C                            
0001CF2C                            loc_1C442:				; XREF: AniArt_MZextra
0001CF2C 2029 0006                  		move.l	6(a1),d0
0001CF30 1029 0005                  		move.b	5(a1),d0
0001CF34 E098                       		ror.l	#8,d0
0001CF36 2C80                       		move.l	d0,(a6)
0001CF38 43E9 0010                  		lea	$10(a1),a1
0001CF3C 51C9 FFEE                  		dbf	d1,loc_1C442
0001CF40 4E75                       		rts	
0001CF42                            ; ===========================================================================
0001CF42                            
0001CF42                            loc_1C458:				; XREF: AniArt_MZextra
0001CF42 2CA9 0006                  		move.l	6(a1),(a6)
0001CF46 43E9 0010                  		lea	$10(a1),a1
0001CF4A 51C9 FFF6                  		dbf	d1,loc_1C458
0001CF4E 4E75                       		rts	
0001CF50                            ; ===========================================================================
0001CF50                            
0001CF50                            loc_1C466:				; XREF: AniArt_MZextra
0001CF50 2029 0008                  		move.l	8(a1),d0
0001CF54 1029 0007                  		move.b	7(a1),d0
0001CF58 E098                       		ror.l	#8,d0
0001CF5A 2C80                       		move.l	d0,(a6)
0001CF5C 43E9 0010                  		lea	$10(a1),a1
0001CF60 51C9 FFEE                  		dbf	d1,loc_1C466
0001CF64 4E75                       		rts	
0001CF66                            ; ===========================================================================
0001CF66                            
0001CF66                            loc_1C47C:				; XREF: AniArt_MZextra
0001CF66 2CA9 0008                  		move.l	8(a1),(a6)
0001CF6A 43E9 0010                  		lea	$10(a1),a1
0001CF6E 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CF72 4E75                       		rts	
0001CF74                            ; ===========================================================================
0001CF74                            
0001CF74                            loc_1C48A:				; XREF: AniArt_MZextra
0001CF74 2029 000A                  		move.l	$A(a1),d0
0001CF78 1029 0009                  		move.b	9(a1),d0
0001CF7C E098                       		ror.l	#8,d0
0001CF7E 2C80                       		move.l	d0,(a6)
0001CF80 43E9 0010                  		lea	$10(a1),a1
0001CF84 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CF88 4E75                       		rts	
0001CF8A                            ; ===========================================================================
0001CF8A                            
0001CF8A                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CF8A 2CA9 000A                  		move.l	$A(a1),(a6)
0001CF8E 43E9 0010                  		lea	$10(a1),a1
0001CF92 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CF96 4E75                       		rts	
0001CF98                            ; ===========================================================================
0001CF98                            
0001CF98                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CF98 2029 000C                  		move.l	$C(a1),d0
0001CF9C 1029 000B                  		move.b	$B(a1),d0
0001CFA0 E098                       		ror.l	#8,d0
0001CFA2 2C80                       		move.l	d0,(a6)
0001CFA4 43E9 0010                  		lea	$10(a1),a1
0001CFA8 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CFAC 4E75                       		rts	
0001CFAE                            ; ===========================================================================
0001CFAE                            
0001CFAE                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CFAE 2CA9 000C                  		move.l	$C(a1),(a6)
0001CFB2 43E9 0010                  		lea	$10(a1),a1
0001CFB6 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CFBA 4E75                       		rts	
0001CFBC                            ; ===========================================================================
0001CFBC                            
0001CFBC                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CFBC 2029 000C                  		move.l	$C(a1),d0
0001CFC0 E198                       		rol.l	#8,d0
0001CFC2 1011                       		move.b	0(a1),d0
0001CFC4 2C80                       		move.l	d0,(a6)
0001CFC6 43E9 0010                  		lea	$10(a1),a1
0001CFCA 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CFCE 4E75                       		rts	
0001CFD0                            ; ===========================================================================
0001CFD0                            
0001CFD0                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CFD0 3CA9 000E                  		move.w	$E(a1),(a6)
0001CFD4 3C91                       		move.w	0(a1),(a6)
0001CFD6 43E9 0010                  		lea	$10(a1),a1
0001CFDA 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CFDE 4E75                       		rts	
0001CFE0                            ; ===========================================================================
0001CFE0                            
0001CFE0                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CFE0 2011                       		move.l	0(a1),d0
0001CFE2 1029 000F                  		move.b	$F(a1),d0
0001CFE6 E098                       		ror.l	#8,d0
0001CFE8 2C80                       		move.l	d0,(a6)
0001CFEA 43E9 0010                  		lea	$10(a1),a1
0001CFEE 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CFF2 4E75                       		rts	
0001CFF4                            
0001CFF4                            ; ---------------------------------------------------------------------------
0001CFF4                            ; Animated pattern routine - giant ring
0001CFF4                            ; ---------------------------------------------------------------------------
0001CFF4                            
0001CFF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFF4                            
0001CFF4                            
0001CFF4                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CFF4 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CFF8 6600                       		bne.s	loc_1C518
0001CFFA 4E75                       		rts	
0001CFFC                            ; ===========================================================================
0001CFFC                            
0001CFFC                            loc_1C518:
0001CFFC 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001D002 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001D008 7000                       		moveq	#0,d0
0001D00A 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001D00E 43F1 0000                  		lea	(a1,d0.w),a1
0001D012 0640 8000                  		addi.w	#$8000,d0
0001D016 E588                       		lsl.l	#2,d0
0001D018 E448                       		lsr.w	#2,d0
0001D01A 0040 4000                  		ori.w	#$4000,d0
0001D01E 4840                       		swap	d0
0001D020 2D40 0004                  		move.l	d0,4(a6)
0001D024 323C 000D                  		move.w	#$D,d1
0001D028 6000 FE78                  		bra.w	LoadTiles
0001D02C                            ; End of function AniArt_GiantRing
0001D02C                            
0001D02C                            ; ===========================================================================
0001D02C                            ; ---------------------------------------------------------------------------
0001D02C                            ; Object 21 - SCORE, TIME, RINGS
0001D02C                            ; ---------------------------------------------------------------------------
0001D02C                            
0001D02C                            Obj21:					; XREF: Obj_Index
0001D02C 7000                       		moveq	#0,d0
0001D02E 1028 0024                  		move.b	$24(a0),d0
0001D032 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001D036 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001D03A                            ; ===========================================================================
0001D03A 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001D03C 0000                       		dc.w Obj21_Flash-Obj21_Index
0001D03E                            ; ===========================================================================
0001D03E                            
0001D03E                            Obj21_Main:				; XREF: Obj21_Main
0001D03E 5428 0024                  		addq.b	#2,$24(a0)
0001D042 317C 0090 0008             		move.w	#$90,8(a0)
0001D048 317C 0108 000A             		move.w	#$108,$A(a0)
0001D04E 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001D056 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001D05C 117C 0000 0001             		move.b	#0,1(a0)
0001D062 117C 0000 0018             		move.b	#0,$18(a0)
0001D068                            
0001D068                            Obj21_Flash:				; XREF: Obj21_Main
0001D068 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001D06C 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001D06E 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001D072 4EF9 0000 E032             		jmp	DisplaySprite
0001D078                            ; ===========================================================================
0001D078                            
0001D078                            Obj21_Flash2:
0001D078 7000                       		moveq	#0,d0
0001D07A 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001D080 6600                       		bne.s	Obj21_Display
0001D082 5240                       		addq.w	#1,d0		; make ring counter flash red
0001D084 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001D08A 6600                       		bne.s	Obj21_Display	; if not, branch
0001D08C 5440                       		addq.w	#2,d0		; make time counter flash red
0001D08E                            
0001D08E                            Obj21_Display:
0001D08E 1140 001A                  		move.b	d0,$1A(a0)
0001D092 4EF9 0000 E032             		jmp	DisplaySprite
0001D098                            ; ===========================================================================
0001D098                            ; ---------------------------------------------------------------------------
0001D098                            ; Sprite mappings - SCORE, TIME, RINGS
0001D098                            ; ---------------------------------------------------------------------------
0001D098                            Map_obj21:
0001D098                            	include "_maps\obj21.asm"
0001D098                            ; ---------------------------------------------------------------------------
0001D098                            ; Sprite mappings - SCORE, TIME, RINGS
0001D098                            ; ---------------------------------------------------------------------------
0001D098 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001D09C 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001D0A0 0A                         byte_1C5BC:	dc.b $A
0001D0A1 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D0A6 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D0AB 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D0B0 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001D0B5 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D0BA A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001D0BF A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001D0C4 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D0C9 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D0CE 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D0D3 00                         		dc.b 0
0001D0D4 0A                         byte_1C5F0:	dc.b $A
0001D0D5 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D0DA 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D0DF 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D0E4 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001D0E9 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D0EE A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001D0F3 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001D0F8 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D0FD 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D102 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D107 00                         		dc.b 0
0001D108 0A                         byte_1C624:	dc.b $A
0001D109 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D10E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D113 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D118 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001D11D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D122 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001D127 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001D12C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D131 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D136 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D13B 00                         		dc.b 0
0001D13C 0A                         byte_1C658:	dc.b $A
0001D13D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D142 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D147 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D14C 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001D151 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D156 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001D15B A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001D160 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D165 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D16A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D170 00                         		even
0001D170 00                         		even
0001D170                            
0001D170                            ; ---------------------------------------------------------------------------
0001D170                            ; Add points subroutine
0001D170                            ; ---------------------------------------------------------------------------
0001D170                            
0001D170                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D170                            
0001D170                            
0001D170                            AddPoints:
0001D170 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001D176 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001D17A 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001D17E D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001D180 223C 000F 423F             		move.l	#999999,d1
0001D186 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001D188 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001D18C 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001D18E 2481                       		move.l	d1,(a2)
0001D190                            
0001D190                            loc_1C6AC:
0001D190 2013                       		move.l	(a3),d0
0001D192 B092                       		cmp.l	(a2),d0
0001D194 6500 0000                  		bcs.w	locret_1C6B6
0001D198 2480                       		move.l	d0,(a2)
0001D19A                            
0001D19A                            locret_1C6B6:
0001D19A 4E75                       		rts	
0001D19C                            ; End of function AddPoints
0001D19C                            
0001D19C                            ; ---------------------------------------------------------------------------
0001D19C                            ; Subroutine to	update the HUD
0001D19C                            ; ---------------------------------------------------------------------------
0001D19C                            
0001D19C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D19C                            
0001D19C                            
0001D19C                            HudUpdate:
0001D19C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001D1A0 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001D1A4 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001D1A8 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001D1AA 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001D1AE 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001D1B4 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001D1B8 6100 0000                  		bsr.w	Hud_Score
0001D1BC                            
0001D1BC                            Hud_ChkRings:
0001D1BC 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D1C0 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001D1C2 6A00                       		bpl.s	loc_1C6E4
0001D1C4 6100 0000                  		bsr.w	Hud_LoadZero
0001D1C8                            
0001D1C8                            loc_1C6E4:
0001D1C8 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D1CC 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D1D2 7200                       		moveq	#0,d1
0001D1D4 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D1D8 6100 0000                  		bsr.w	Hud_Rings
0001D1DC                            
0001D1DC                            Hud_ChkTime:
0001D1DC 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D1E0 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D1E2 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D1E6 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D1E8 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D1EC 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D1F2 6700                       		beq.s	TimeOver	; if yes, branch
0001D1F4 5221                       		addq.b	#1,-(a1)
0001D1F6 0C11 003C                  		cmpi.b	#60,(a1)
0001D1FA 6500                       		bcs.s	Hud_ChkLives
0001D1FC 12BC 0000                  		move.b	#0,(a1)
0001D200 5221                       		addq.b	#1,-(a1)
0001D202 0C11 003C                  		cmpi.b	#60,(a1)
0001D206 6500                       		bcs.s	loc_1C734
0001D208 12BC 0000                  		move.b	#0,(a1)
0001D20C 5221                       		addq.b	#1,-(a1)
0001D20E 0C11 0009                  		cmpi.b	#9,(a1)
0001D212 6500                       		bcs.s	loc_1C734
0001D214 12BC 0009                  		move.b	#9,(a1)
0001D218                            
0001D218                            loc_1C734:
0001D218 203C 5E40 0003             		move.l	#$5E400003,d0
0001D21E 7200                       		moveq	#0,d1
0001D220 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D224 6100 0000                  		bsr.w	Hud_Mins
0001D228 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D22E 7200                       		moveq	#0,d1
0001D230 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D234 6100 0000                  		bsr.w	Hud_Secs
0001D238                            
0001D238                            Hud_ChkLives:
0001D238 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D23C 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D23E 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D242 6100 0000                  		bsr.w	Hud_Lives
0001D246                            
0001D246                            Hud_ChkBonus:
0001D246 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D24A 6700                       		beq.s	Hud_End		; if not, branch
0001D24C 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D250 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D25A 7200                       		moveq	#0,d1
0001D25C 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D260 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D264 7200                       		moveq	#0,d1
0001D266 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D26A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D26E                            
0001D26E                            Hud_End:
0001D26E 4E75                       		rts	
0001D270                            ; ===========================================================================
0001D270                            
0001D270                            TimeOver:				; XREF: Hud_ChkTime
0001D270 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D274 41F8 D000                  		lea	($FFFFD000).w,a0
0001D278 2448                       		movea.l	a0,a2
0001D27A 6100 E950                  		bsr.w	KillSonic
0001D27E 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D284 4E75                       		rts	
0001D286                            ; ===========================================================================
0001D286                            
0001D286                            HudDebug:				; XREF: HudUpdate
0001D286 6100 0000                  		bsr.w	HudDb_XY
0001D28A 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D28E 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D290 6A00                       		bpl.s	HudDb_Rings
0001D292 6100 0000                  		bsr.w	Hud_LoadZero
0001D296                            
0001D296                            HudDb_Rings:
0001D296 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D29A 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D2A0 7200                       		moveq	#0,d1
0001D2A2 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D2A6 6100 0000                  		bsr.w	Hud_Rings
0001D2AA                            
0001D2AA                            HudDb_ObjCount:
0001D2AA 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D2B0 7200                       		moveq	#0,d1
0001D2B2 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D2B6 6100 0000                  		bsr.w	Hud_Secs
0001D2BA 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D2BE 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D2C0 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D2C4 6100 0000                  		bsr.w	Hud_Lives
0001D2C8                            
0001D2C8                            HudDb_ChkBonus:
0001D2C8 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D2CC 6700                       		beq.s	HudDb_End	; if not, branch
0001D2CE 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D2D2 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D2DC 7200                       		moveq	#0,d1
0001D2DE 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D2E2 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D2E6 7200                       		moveq	#0,d1
0001D2E8 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D2EC 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D2F0                            
0001D2F0                            HudDb_End:
0001D2F0 4E75                       		rts	
0001D2F2                            ; End of function HudUpdate
0001D2F2                            
0001D2F2                            ; ---------------------------------------------------------------------------
0001D2F2                            ; Subroutine to	load "0" on the	HUD
0001D2F2                            ; ---------------------------------------------------------------------------
0001D2F2                            
0001D2F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2F2                            
0001D2F2                            
0001D2F2                            Hud_LoadZero:				; XREF: HudUpdate
0001D2F2 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D2FC 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D300 343C 0002                  		move.w	#2,d2
0001D304 6000                       		bra.s	loc_1C83E
0001D306                            ; End of function Hud_LoadZero
0001D306                            
0001D306                            ; ---------------------------------------------------------------------------
0001D306                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D306                            ; ---------------------------------------------------------------------------
0001D306                            
0001D306                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D306                            
0001D306                            
0001D306                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D306 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D30C 6100 0000                  		bsr.w	Hud_Lives
0001D310 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D31A 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D31E 343C 000E                  		move.w	#$E,d2
0001D322                            
0001D322                            loc_1C83E:				; XREF: Hud_LoadZero
0001D322 43FA 0000                  		lea	Art_Hud(pc),a1
0001D326                            
0001D326                            loc_1C842:
0001D326 323C 000F                  		move.w	#$F,d1
0001D32A 101A                       		move.b	(a2)+,d0
0001D32C 6B00                       		bmi.s	loc_1C85E
0001D32E 4880                       		ext.w	d0
0001D330 EB48                       		lsl.w	#5,d0
0001D332 47F1 0000                  		lea	(a1,d0.w),a3
0001D336                            
0001D336                            loc_1C852:
0001D336 2C9B                       		move.l	(a3)+,(a6)
0001D338 51C9 FFFC                  		dbf	d1,loc_1C852
0001D33C                            
0001D33C                            loc_1C858:
0001D33C 51CA FFE8                  		dbf	d2,loc_1C842
0001D340                            
0001D340 4E75                       		rts	
0001D342                            ; ===========================================================================
0001D342                            
0001D342                            loc_1C85E:
0001D342 2CBC 0000 0000             		move.l	#0,(a6)
0001D348 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D34C                            
0001D34C 60EE                       		bra.s	loc_1C858
0001D34E                            ; End of function Hud_Base
0001D34E                            
0001D34E                            ; ===========================================================================
0001D34E 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D35A FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D35E                            ; ---------------------------------------------------------------------------
0001D35E                            ; Subroutine to	load debug mode	numbers	patterns
0001D35E                            ; ---------------------------------------------------------------------------
0001D35E                            
0001D35E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D35E                            
0001D35E                            
0001D35E                            HudDb_XY:				; XREF: HudDebug
0001D35E 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D368 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D36C 4841                       		swap	d1
0001D36E 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D372 6100                       		bsr.s	HudDb_XY2
0001D374 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D378 4841                       		swap	d1
0001D37A 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D37E                            ; End of function HudDb_XY
0001D37E                            
0001D37E                            
0001D37E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D37E                            
0001D37E                            
0001D37E                            HudDb_XY2:
0001D37E 7C07                       		moveq	#7,d6
0001D380 43F9 0000 0606             		lea	(Art_Text).l,a1
0001D386                            
0001D386                            HudDb_XYLoop:
0001D386 E959                       		rol.w	#4,d1
0001D388 3401                       		move.w	d1,d2
0001D38A 0242 000F                  		andi.w	#$F,d2
0001D38E 0C42 000A                  		cmpi.w	#$A,d2
0001D392 6500                       		bcs.s	loc_1C8B2
0001D394 5E42                       		addq.w	#7,d2
0001D396                            
0001D396                            loc_1C8B2:
0001D396 EB4A                       		lsl.w	#5,d2
0001D398 47F1 2000                  		lea	(a1,d2.w),a3
0001D39C 2C9B                       		move.l	(a3)+,(a6)
0001D39E 2C9B                       		move.l	(a3)+,(a6)
0001D3A0 2C9B                       		move.l	(a3)+,(a6)
0001D3A2 2C9B                       		move.l	(a3)+,(a6)
0001D3A4 2C9B                       		move.l	(a3)+,(a6)
0001D3A6 2C9B                       		move.l	(a3)+,(a6)
0001D3A8 2C9B                       		move.l	(a3)+,(a6)
0001D3AA 2C9B                       		move.l	(a3)+,(a6)
0001D3AC 4841                       		swap	d1
0001D3AE 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D3B2                            
0001D3B2 4E75                       		rts	
0001D3B4                            ; End of function HudDb_XY2
0001D3B4                            
0001D3B4                            ; ---------------------------------------------------------------------------
0001D3B4                            ; Subroutine to	load rings numbers patterns
0001D3B4                            ; ---------------------------------------------------------------------------
0001D3B4                            
0001D3B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3B4                            
0001D3B4                            
0001D3B4                            Hud_Rings:				; XREF: HudUpdate
0001D3B4 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D3BA 7C02                       		moveq	#2,d6
0001D3BC 6000                       		bra.s	Hud_LoadArt
0001D3BE                            ; End of function Hud_Rings
0001D3BE                            
0001D3BE                            ; ---------------------------------------------------------------------------
0001D3BE                            ; Subroutine to	load score numbers patterns
0001D3BE                            ; ---------------------------------------------------------------------------
0001D3BE                            
0001D3BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3BE                            
0001D3BE                            
0001D3BE                            Hud_Score:				; XREF: HudUpdate
0001D3BE 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D3C4 7C05                       		moveq	#5,d6
0001D3C6                            
0001D3C6                            Hud_LoadArt:
0001D3C6 7800                       		moveq	#0,d4
0001D3C8 43FA 0000                  		lea	Art_Hud(pc),a1
0001D3CC                            
0001D3CC                            Hud_ScoreLoop:
0001D3CC 7400                       		moveq	#0,d2
0001D3CE 261A                       		move.l	(a2)+,d3
0001D3D0                            
0001D3D0                            loc_1C8EC:
0001D3D0 9283                       		sub.l	d3,d1
0001D3D2 6500                       		bcs.s	loc_1C8F4
0001D3D4 5242                       		addq.w	#1,d2
0001D3D6 60F8                       		bra.s	loc_1C8EC
0001D3D8                            ; ===========================================================================
0001D3D8                            
0001D3D8                            loc_1C8F4:
0001D3D8 D283                       		add.l	d3,d1
0001D3DA 4A42                       		tst.w	d2
0001D3DC 6700                       		beq.s	loc_1C8FE
0001D3DE 383C 0001                  		move.w	#1,d4
0001D3E2                            
0001D3E2                            loc_1C8FE:
0001D3E2 4A44                       		tst.w	d4
0001D3E4 6700                       		beq.s	loc_1C92C
0001D3E6 ED4A                       		lsl.w	#6,d2
0001D3E8 2D40 0004                  		move.l	d0,4(a6)
0001D3EC 47F1 2000                  		lea	(a1,d2.w),a3
0001D3F0 2C9B                       		move.l	(a3)+,(a6)
0001D3F2 2C9B                       		move.l	(a3)+,(a6)
0001D3F4 2C9B                       		move.l	(a3)+,(a6)
0001D3F6 2C9B                       		move.l	(a3)+,(a6)
0001D3F8 2C9B                       		move.l	(a3)+,(a6)
0001D3FA 2C9B                       		move.l	(a3)+,(a6)
0001D3FC 2C9B                       		move.l	(a3)+,(a6)
0001D3FE 2C9B                       		move.l	(a3)+,(a6)
0001D400 2C9B                       		move.l	(a3)+,(a6)
0001D402 2C9B                       		move.l	(a3)+,(a6)
0001D404 2C9B                       		move.l	(a3)+,(a6)
0001D406 2C9B                       		move.l	(a3)+,(a6)
0001D408 2C9B                       		move.l	(a3)+,(a6)
0001D40A 2C9B                       		move.l	(a3)+,(a6)
0001D40C 2C9B                       		move.l	(a3)+,(a6)
0001D40E 2C9B                       		move.l	(a3)+,(a6)
0001D410                            
0001D410                            loc_1C92C:
0001D410 0680 0040 0000             		addi.l	#$400000,d0
0001D416 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D41A                            
0001D41A 4E75                       		rts	
0001D41C                            ; End of function Hud_Score
0001D41C                            
0001D41C                            ; ---------------------------------------------------------------------------
0001D41C                            ; Subroutine to	load countdown numbers on the continue screen
0001D41C                            ; ---------------------------------------------------------------------------
0001D41C                            
0001D41C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D41C                            
0001D41C                            
0001D41C                            ContScrCounter:				; XREF: ContinueScreen
0001D41C 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D426 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D42C 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D432 7C01                       		moveq	#1,d6
0001D434 7800                       		moveq	#0,d4
0001D436 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D43A                            
0001D43A                            ContScr_Loop:
0001D43A 7400                       		moveq	#0,d2
0001D43C 261A                       		move.l	(a2)+,d3
0001D43E                            
0001D43E                            loc_1C95A:
0001D43E 9283                       		sub.l	d3,d1
0001D440 6500                       		bcs.s	loc_1C962
0001D442 5242                       		addq.w	#1,d2
0001D444 60F8                       		bra.s	loc_1C95A
0001D446                            ; ===========================================================================
0001D446                            
0001D446                            loc_1C962:
0001D446 D283                       		add.l	d3,d1
0001D448 ED4A                       		lsl.w	#6,d2
0001D44A 47F1 2000                  		lea	(a1,d2.w),a3
0001D44E 2C9B                       		move.l	(a3)+,(a6)
0001D450 2C9B                       		move.l	(a3)+,(a6)
0001D452 2C9B                       		move.l	(a3)+,(a6)
0001D454 2C9B                       		move.l	(a3)+,(a6)
0001D456 2C9B                       		move.l	(a3)+,(a6)
0001D458 2C9B                       		move.l	(a3)+,(a6)
0001D45A 2C9B                       		move.l	(a3)+,(a6)
0001D45C 2C9B                       		move.l	(a3)+,(a6)
0001D45E 2C9B                       		move.l	(a3)+,(a6)
0001D460 2C9B                       		move.l	(a3)+,(a6)
0001D462 2C9B                       		move.l	(a3)+,(a6)
0001D464 2C9B                       		move.l	(a3)+,(a6)
0001D466 2C9B                       		move.l	(a3)+,(a6)
0001D468 2C9B                       		move.l	(a3)+,(a6)
0001D46A 2C9B                       		move.l	(a3)+,(a6)
0001D46C 2C9B                       		move.l	(a3)+,(a6)
0001D46E 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D472                            
0001D472 4E75                       		rts	
0001D474                            ; End of function ContScrCounter
0001D474                            
0001D474                            ; ===========================================================================
0001D474                            ; ---------------------------------------------------------------------------
0001D474                            ; HUD counter sizes
0001D474                            ; ---------------------------------------------------------------------------
0001D474 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D478 0000 2710                  Hud_10000:	dc.l 10000
0001D47C 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D480 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D484 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D488 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D48C                            
0001D48C                            ; ---------------------------------------------------------------------------
0001D48C                            ; Subroutine to	load time numbers patterns
0001D48C                            ; ---------------------------------------------------------------------------
0001D48C                            
0001D48C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D48C                            
0001D48C                            
0001D48C                            Hud_Mins:				; XREF: Hud_ChkTime
0001D48C 45F9 0001 D488             		lea	(Hud_1).l,a2
0001D492 7C00                       		moveq	#0,d6
0001D494 6000                       		bra.s	loc_1C9BA
0001D496                            ; End of function Hud_Mins
0001D496                            
0001D496                            
0001D496                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D496                            
0001D496                            
0001D496                            Hud_Secs:				; XREF: Hud_ChkTime
0001D496 45F9 0001 D484             		lea	(Hud_10).l,a2
0001D49C 7C01                       		moveq	#1,d6
0001D49E                            
0001D49E                            loc_1C9BA:
0001D49E 7800                       		moveq	#0,d4
0001D4A0 43FA 0000                  		lea	Art_Hud(pc),a1
0001D4A4                            
0001D4A4                            Hud_TimeLoop:
0001D4A4 7400                       		moveq	#0,d2
0001D4A6 261A                       		move.l	(a2)+,d3
0001D4A8                            
0001D4A8                            loc_1C9C4:
0001D4A8 9283                       		sub.l	d3,d1
0001D4AA 6500                       		bcs.s	loc_1C9CC
0001D4AC 5242                       		addq.w	#1,d2
0001D4AE 60F8                       		bra.s	loc_1C9C4
0001D4B0                            ; ===========================================================================
0001D4B0                            
0001D4B0                            loc_1C9CC:
0001D4B0 D283                       		add.l	d3,d1
0001D4B2 4A42                       		tst.w	d2
0001D4B4 6700                       		beq.s	loc_1C9D6
0001D4B6 383C 0001                  		move.w	#1,d4
0001D4BA                            
0001D4BA                            loc_1C9D6:
0001D4BA ED4A                       		lsl.w	#6,d2
0001D4BC 2D40 0004                  		move.l	d0,4(a6)
0001D4C0 47F1 2000                  		lea	(a1,d2.w),a3
0001D4C4 2C9B                       		move.l	(a3)+,(a6)
0001D4C6 2C9B                       		move.l	(a3)+,(a6)
0001D4C8 2C9B                       		move.l	(a3)+,(a6)
0001D4CA 2C9B                       		move.l	(a3)+,(a6)
0001D4CC 2C9B                       		move.l	(a3)+,(a6)
0001D4CE 2C9B                       		move.l	(a3)+,(a6)
0001D4D0 2C9B                       		move.l	(a3)+,(a6)
0001D4D2 2C9B                       		move.l	(a3)+,(a6)
0001D4D4 2C9B                       		move.l	(a3)+,(a6)
0001D4D6 2C9B                       		move.l	(a3)+,(a6)
0001D4D8 2C9B                       		move.l	(a3)+,(a6)
0001D4DA 2C9B                       		move.l	(a3)+,(a6)
0001D4DC 2C9B                       		move.l	(a3)+,(a6)
0001D4DE 2C9B                       		move.l	(a3)+,(a6)
0001D4E0 2C9B                       		move.l	(a3)+,(a6)
0001D4E2 2C9B                       		move.l	(a3)+,(a6)
0001D4E4 0680 0040 0000             		addi.l	#$400000,d0
0001D4EA 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D4EE                            
0001D4EE 4E75                       		rts	
0001D4F0                            ; End of function Hud_Secs
0001D4F0                            
0001D4F0                            ; ---------------------------------------------------------------------------
0001D4F0                            ; Subroutine to	load time/ring bonus numbers patterns
0001D4F0                            ; ---------------------------------------------------------------------------
0001D4F0                            
0001D4F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4F0                            
0001D4F0                            
0001D4F0                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D4F0 45F9 0001 D47C             		lea	(Hud_1000).l,a2
0001D4F6 7C03                       		moveq	#3,d6
0001D4F8 7800                       		moveq	#0,d4
0001D4FA 43FA 0000                  		lea	Art_Hud(pc),a1
0001D4FE                            
0001D4FE                            Hud_BonusLoop:
0001D4FE 7400                       		moveq	#0,d2
0001D500 261A                       		move.l	(a2)+,d3
0001D502                            
0001D502                            loc_1CA1E:
0001D502 9283                       		sub.l	d3,d1
0001D504 6500                       		bcs.s	loc_1CA26
0001D506 5242                       		addq.w	#1,d2
0001D508 60F8                       		bra.s	loc_1CA1E
0001D50A                            ; ===========================================================================
0001D50A                            
0001D50A                            loc_1CA26:
0001D50A D283                       		add.l	d3,d1
0001D50C 4A42                       		tst.w	d2
0001D50E 6700                       		beq.s	loc_1CA30
0001D510 383C 0001                  		move.w	#1,d4
0001D514                            
0001D514                            loc_1CA30:
0001D514 4A44                       		tst.w	d4
0001D516 6700                       		beq.s	Hud_ClrBonus
0001D518 ED4A                       		lsl.w	#6,d2
0001D51A 47F1 2000                  		lea	(a1,d2.w),a3
0001D51E 2C9B                       		move.l	(a3)+,(a6)
0001D520 2C9B                       		move.l	(a3)+,(a6)
0001D522 2C9B                       		move.l	(a3)+,(a6)
0001D524 2C9B                       		move.l	(a3)+,(a6)
0001D526 2C9B                       		move.l	(a3)+,(a6)
0001D528 2C9B                       		move.l	(a3)+,(a6)
0001D52A 2C9B                       		move.l	(a3)+,(a6)
0001D52C 2C9B                       		move.l	(a3)+,(a6)
0001D52E 2C9B                       		move.l	(a3)+,(a6)
0001D530 2C9B                       		move.l	(a3)+,(a6)
0001D532 2C9B                       		move.l	(a3)+,(a6)
0001D534 2C9B                       		move.l	(a3)+,(a6)
0001D536 2C9B                       		move.l	(a3)+,(a6)
0001D538 2C9B                       		move.l	(a3)+,(a6)
0001D53A 2C9B                       		move.l	(a3)+,(a6)
0001D53C 2C9B                       		move.l	(a3)+,(a6)
0001D53E                            
0001D53E                            loc_1CA5A:
0001D53E 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D542                            
0001D542 4E75                       		rts	
0001D544                            ; ===========================================================================
0001D544                            
0001D544                            Hud_ClrBonus:
0001D544 7A0F                       		moveq	#$F,d5
0001D546                            
0001D546                            Hud_ClrBonusLoop:
0001D546 2CBC 0000 0000             		move.l	#0,(a6)
0001D54C 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D550                            
0001D550 60EC                       		bra.s	loc_1CA5A
0001D552                            ; End of function Hud_TimeRingBonus
0001D552                            
0001D552                            ; ---------------------------------------------------------------------------
0001D552                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D552                            ; ---------------------------------------------------------------------------
0001D552                            
0001D552                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D552                            
0001D552                            
0001D552                            Hud_Lives:				; XREF: Hud_ChkLives
0001D552 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D558 7200                       		moveq	#0,d1
0001D55A 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D55E 45F9 0001 D484             		lea	(Hud_10).l,a2
0001D564 7C01                       		moveq	#1,d6
0001D566 7800                       		moveq	#0,d4
0001D568 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D56C                            
0001D56C                            Hud_LivesLoop:
0001D56C 2D40 0004                  		move.l	d0,4(a6)
0001D570 7400                       		moveq	#0,d2
0001D572 261A                       		move.l	(a2)+,d3
0001D574                            
0001D574                            loc_1CA90:
0001D574 9283                       		sub.l	d3,d1
0001D576 6500                       		bcs.s	loc_1CA98
0001D578 5242                       		addq.w	#1,d2
0001D57A 60F8                       		bra.s	loc_1CA90
0001D57C                            ; ===========================================================================
0001D57C                            
0001D57C                            loc_1CA98:
0001D57C D283                       		add.l	d3,d1
0001D57E 4A42                       		tst.w	d2
0001D580 6700                       		beq.s	loc_1CAA2
0001D582 383C 0001                  		move.w	#1,d4
0001D586                            
0001D586                            loc_1CAA2:
0001D586 4A44                       		tst.w	d4
0001D588 6700                       		beq.s	Hud_ClrLives
0001D58A                            
0001D58A                            loc_1CAA6:
0001D58A EB4A                       		lsl.w	#5,d2
0001D58C 47F1 2000                  		lea	(a1,d2.w),a3
0001D590 2C9B                       		move.l	(a3)+,(a6)
0001D592 2C9B                       		move.l	(a3)+,(a6)
0001D594 2C9B                       		move.l	(a3)+,(a6)
0001D596 2C9B                       		move.l	(a3)+,(a6)
0001D598 2C9B                       		move.l	(a3)+,(a6)
0001D59A 2C9B                       		move.l	(a3)+,(a6)
0001D59C 2C9B                       		move.l	(a3)+,(a6)
0001D59E 2C9B                       		move.l	(a3)+,(a6)
0001D5A0                            
0001D5A0                            loc_1CABC:
0001D5A0 0680 0040 0000             		addi.l	#$400000,d0
0001D5A6 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D5AA                            
0001D5AA 4E75                       		rts	
0001D5AC                            ; ===========================================================================
0001D5AC                            
0001D5AC                            Hud_ClrLives:
0001D5AC 4A46                       		tst.w	d6
0001D5AE 67DA                       		beq.s	loc_1CAA6
0001D5B0 7A07                       		moveq	#7,d5
0001D5B2                            
0001D5B2                            Hud_ClrLivesLoop:
0001D5B2 2CBC 0000 0000             		move.l	#0,(a6)
0001D5B8 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D5BC 60E2                       		bra.s	loc_1CABC
0001D5BE                            ; End of function Hud_Lives
0001D5BE                            
0001D5BE                            ; ===========================================================================
0001D5BE                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D8BE                            		even
0001D8BE                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D9FE                            		even
0001D9FE                            ; ===========================================================================
0001D9FE                            ; ---------------------------------------------------------------------------
0001D9FE                            ; When debug mode is currently in use
0001D9FE                            ; ---------------------------------------------------------------------------
0001D9FE                            
0001D9FE                            DebugMode:				; XREF: Obj01; Obj09
0001D9FE 7000                       		moveq	#0,d0
0001DA00 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001DA04 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001DA08 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001DA0C                            ; ===========================================================================
0001DA0C 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001DA0E 0000                       		dc.w Debug_Skip-Debug_Index
0001DA10                            ; ===========================================================================
0001DA10                            
0001DA10                            Debug_Main:				; XREF: Debug_Index
0001DA10 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001DA14 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001DA1A 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001DA20 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001DA26 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001DA2C 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001DA32 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001DA38 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001DA3E 117C 0000 001A             		move.b	#0,$1A(a0)
0001DA44 117C 0000 001C             		move.b	#0,$1C(a0)
0001DA4A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001DA50 6600                       		bne.s	Debug_Zone	; if not, branch
0001DA52 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001DA58 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001DA5E 7006                       		moveq	#6,d0		; use 6th debug	item list
0001DA60 6000                       		bra.s	Debug_UseList
0001DA62                            ; ===========================================================================
0001DA62                            
0001DA62                            Debug_Zone:
0001DA62 7000                       		moveq	#0,d0
0001DA64 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DA68                            
0001DA68                            Debug_UseList:
0001DA68 45F9 0000 0000             		lea	(DebugList).l,a2
0001DA6E D040                       		add.w	d0,d0
0001DA70 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DA74 3C1A                       		move.w	(a2)+,d6
0001DA76 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DA7A 6200                       		bhi.s	loc_1CF9E
0001DA7C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001DA82                            
0001DA82                            loc_1CF9E:
0001DA82 6100 0000                  		bsr.w	Debug_ShowItem
0001DA86 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DA8C 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001DA92                            
0001DA92                            Debug_Skip:				; XREF: Debug_Index
0001DA92 7006                       		moveq	#6,d0
0001DA94 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001DA9A 6700                       		beq.s	loc_1CFBE
0001DA9C 7000                       		moveq	#0,d0
0001DA9E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DAA2                            
0001DAA2                            loc_1CFBE:
0001DAA2 45F9 0000 0000             		lea	(DebugList).l,a2
0001DAA8 D040                       		add.w	d0,d0
0001DAAA D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DAAE 3C1A                       		move.w	(a2)+,d6
0001DAB0 6100 0000                  		bsr.w	Debug_Control
0001DAB4 4EF9 0000 E032             		jmp	DisplaySprite
0001DABA                            
0001DABA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DABA                            
0001DABA                            
0001DABA                            Debug_Control:
0001DABA 7800                       		moveq	#0,d4
0001DABC 323C 0001                  		move.w	#1,d1
0001DAC0 1838 F605                  		move.b	($FFFFF605).w,d4
0001DAC4 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001DAC8 6600                       		bne.s	loc_1D018	; if yes, branch
0001DACA 1038 F604                  		move.b	($FFFFF604).w,d0
0001DACE 0240 000F                  		andi.w	#$F,d0
0001DAD2 6600                       		bne.s	loc_1D000
0001DAD4 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DADA 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001DAE0 6000 0000                  		bra.w	Debug_BackItem
0001DAE4                            ; ===========================================================================
0001DAE4                            
0001DAE4                            loc_1D000:
0001DAE4 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001DAE8 6600                       		bne.s	loc_1D01C
0001DAEA 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001DAF0 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001DAF4 6600                       		bne.s	loc_1D018
0001DAF6 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001DAFC                            
0001DAFC                            loc_1D018:
0001DAFC 1838 F604                  		move.b	($FFFFF604).w,d4
0001DB00                            
0001DB00                            loc_1D01C:
0001DB00 7200                       		moveq	#0,d1
0001DB02 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001DB06 5241                       		addq.w	#1,d1
0001DB08 4841                       		swap	d1
0001DB0A E881                       		asr.l	#4,d1
0001DB0C 2428 000C                  		move.l	$C(a0),d2
0001DB10 2628 0008                  		move.l	8(a0),d3
0001DB14 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001DB18 6700                       		beq.s	loc_1D03C	; if not, branch
0001DB1A 9481                       		sub.l	d1,d2
0001DB1C 6400                       		bcc.s	loc_1D03C
0001DB1E 7400                       		moveq	#0,d2
0001DB20                            
0001DB20                            loc_1D03C:
0001DB20 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001DB24 6700                       		beq.s	loc_1D052	; if not, branch
0001DB26 D481                       		add.l	d1,d2
0001DB28 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001DB2E 6500                       		bcs.s	loc_1D052
0001DB30 243C 07FF 0000             		move.l	#$7FF0000,d2
0001DB36                            
0001DB36                            loc_1D052:
0001DB36 0804 0002                  		btst	#2,d4
0001DB3A 6700                       		beq.s	loc_1D05E
0001DB3C 9681                       		sub.l	d1,d3
0001DB3E 6400                       		bcc.s	loc_1D05E
0001DB40 7600                       		moveq	#0,d3
0001DB42                            
0001DB42                            loc_1D05E:
0001DB42 0804 0003                  		btst	#3,d4
0001DB46 6700                       		beq.s	loc_1D066
0001DB48 D681                       		add.l	d1,d3
0001DB4A                            
0001DB4A                            loc_1D066:
0001DB4A 2142 000C                  		move.l	d2,$C(a0)
0001DB4E 2143 0008                  		move.l	d3,8(a0)
0001DB52                            
0001DB52                            Debug_BackItem:
0001DB52 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001DB58 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DB5A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DB60 6700                       		beq.s	Debug_NextItem	; if not, branch
0001DB62 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001DB66 6400                       		bcc.s	Debug_NoLoop
0001DB68 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001DB6C 6000                       		bra.s	Debug_NoLoop
0001DB6E                            ; ===========================================================================
0001DB6E                            
0001DB6E                            Debug_NextItem:
0001DB6E 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001DB74 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DB76 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001DB7A BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DB7E 6200                       		bhi.s	Debug_NoLoop
0001DB80 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001DB86                            
0001DB86                            Debug_NoLoop:
0001DB86 6000 0000                  		bra.w	Debug_ShowItem
0001DB8A                            ; ===========================================================================
0001DB8A                            
0001DB8A                            Debug_MakeItem:
0001DB8A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DB90 6700                       		beq.s	Debug_Exit	; if not, branch
0001DB92 4EB9 0000 E4B8             		jsr	SingleObjLoad
0001DB98 6600                       		bne.s	Debug_Exit
0001DB9A 3368 0008 0008             		move.w	8(a0),8(a1)
0001DBA0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DBA6 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001DBAA 1368 0001 0001             		move.b	1(a0),1(a1)
0001DBB0 1368 0001 0022             		move.b	1(a0),$22(a1)
0001DBB6 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001DBBC 7000                       		moveq	#0,d0
0001DBBE 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DBC2 E748                       		lsl.w	#3,d0
0001DBC4 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001DBCA 4E75                       		rts	
0001DBCC                            ; ===========================================================================
0001DBCC                            
0001DBCC                            Debug_Exit:
0001DBCC 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DBD2 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001DBD4 7000                       		moveq	#0,d0
0001DBD6 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001DBDA 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DBE2 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DBE8 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DBEC 3140 000A                  		move.w	d0,$A(a0)
0001DBF0 3140 000E                  		move.w	d0,$E(a0)
0001DBF4 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DBFA 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DC00 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DC06 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DC08 4278 F780                  		clr.w	($FFFFF780).w
0001DC0C 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DC12 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DC1A 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DC20 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DC26 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DC2C 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DC32                            
0001DC32                            Debug_DoNothing:
0001DC32 4E75                       		rts	
0001DC34                            ; End of function Debug_Control
0001DC34                            
0001DC34                            
0001DC34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC34                            
0001DC34                            
0001DC34                            Debug_ShowItem:				; XREF: Debug_Main
0001DC34 7000                       		moveq	#0,d0
0001DC36 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DC3A E748                       		lsl.w	#3,d0
0001DC3C 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DC42 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DC48 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DC4E 4E75                       		rts	
0001DC50                            ; End of function Debug_ShowItem
0001DC50                            
0001DC50                            ; ===========================================================================
0001DC50                            ; ---------------------------------------------------------------------------
0001DC50                            ; Debug	list pointers
0001DC50                            ; ---------------------------------------------------------------------------
0001DC50                            DebugList:
0001DC50                            	include "_inc\Debug list pointers.asm"
0001DC50                            ; ---------------------------------------------------------------------------
0001DC50                            ; Debug	list pointers
0001DC50                            ; ---------------------------------------------------------------------------
0001DC50 0000                       	dc.w Debug_GHZ-DebugList
0001DC52 0000                       	dc.w Debug_LZ-DebugList
0001DC54 0000                       	dc.w Debug_MZ-DebugList
0001DC56 0000                       	dc.w Debug_SLZ-DebugList
0001DC58 0000                       	dc.w Debug_SYZ-DebugList
0001DC5A 0000                       	dc.w Debug_SBZ-DebugList
0001DC5C 0000                       	dc.w Debug_Ending-DebugList
0001DC5E 0000                       	dc.w Debug_GHZ-DebugList
0001DC5E 0000                       	dc.w Debug_GHZ-DebugList
0001DC60                            
0001DC60                            ; ---------------------------------------------------------------------------
0001DC60                            ; Debug	list - Green Hill
0001DC60                            ; ---------------------------------------------------------------------------
0001DC60                            Debug_GHZ:
0001DC60                            	include "_inc\Debug list - GHZ.asm"
0001DC60                            ; ---------------------------------------------------------------------------
0001DC60                            ; Debug	list - Green Hill
0001DC60                            ; ---------------------------------------------------------------------------
0001DC60 0010                       	dc.w $10			; number of items in list
0001DC62 2500 A82E                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DC66 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DC6A 2600 AE34                  	dc.l Map_obj26+$26000000
0001DC6E 0000 0680                  	dc.b 0,	0, 6, $80
0001DC72 1F00 A026                  	dc.l Map_obj1F+$1F000000
0001DC76 0000 0400                  	dc.b 0,	0, 4, 0
0001DC7A 2200 A2E2                  	dc.l Map_obj22+$22000000
0001DC7E 0000 0444                  	dc.b 0,	0, 4, $44
0001DC82 2B00 B4A8                  	dc.l Map_obj2B+$2B000000
0001DC86 0000 047B                  	dc.b 0,	0, 4, $7B
0001DC8A 3600 D9D4                  	dc.l Map_obj36+$36000000
0001DC8E 0000 051B                  	dc.b 0,	0, 5, $1B
0001DC92 1800 8934                  	dc.l Map_obj18+$18000000
0001DC96 0000 4000                  	dc.b 0,	0, $40,	0
0001DC9A 3B00 DAFA                  	dc.l Map_obj3B+$3B000000
0001DC9E 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DCA2 4001 01CC                  	dc.l Map_obj40+$40000000
0001DCA6 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DCAA 4100 E746                  	dc.l Map_obj41+$41000000
0001DCAE 0000 0523                  	dc.b 0,	0, 5, $23
0001DCB2 4200 E96C                  	dc.l Map_obj42+$42000000
0001DCB6 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DCBA 4400 EC7A                  	dc.l Map_obj44+$44000000
0001DCBE 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DCC2 1900 8A34                  	dc.l Map_obj48+$19000000
0001DCC6 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DCCA 7901 7C1A                  	dc.l Map_obj79+$79000000
0001DCCE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DCD2 4B00 A86E                  	dc.l Map_obj4B+$4B000000
0001DCD6 0000 2400                  	dc.b 0,	0, $24,	0
0001DCDA 7D01 7D6A                  	dc.l Map_obj7D+$7D000000
0001DCDE 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DCE2                            	even
0001DCE2                            	even
0001DCE2                            
0001DCE2                            ; ---------------------------------------------------------------------------
0001DCE2                            ; Debug	list - Labyrinth
0001DCE2                            ; ---------------------------------------------------------------------------
0001DCE2                            Debug_LZ:
0001DCE2                            	include "_inc\Debug list - LZ.asm"
0001DCE2                            ; ---------------------------------------------------------------------------
0001DCE2                            ; Debug	list - Labyrinth
0001DCE2                            ; ---------------------------------------------------------------------------
0001DCE2 0019                       	dc.w $19
0001DCE4 2500 A82E                  	dc.l Map_obj25+$25000000
0001DCE8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DCEC 2600 AE34                  	dc.l Map_obj26+$26000000
0001DCF0 0000 0680                  	dc.b 0,	0, 6, $80
0001DCF4 4100 E746                  	dc.l Map_obj41+$41000000
0001DCF8 0000 0523                  	dc.b 0,	0, 5, $23
0001DCFC 2C00 B558                  	dc.l Map_obj2C+$2C000000
0001DD00 0800 2486                  	dc.b 8,	0, $24,	$86
0001DD04 2D00 B74C                  	dc.l Map_obj2D+$2D000000
0001DD08 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DD0C 1601 29A0                  	dc.l Map_obj16+$16000000
0001DD10 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DD14 1601 29A0                  	dc.l Map_obj16+$16000000
0001DD18 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DD1C 3300 CC04                  	dc.l Map_obj33+$33000000
0001DD20 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DD24 3200 C7C4                  	dc.l Map_obj32+$32000000
0001DD28 0000 0513                  	dc.b 0,	0, 5, $13
0001DD2C 3600 D9D4                  	dc.l Map_obj36+$36000000
0001DD30 0000 051B                  	dc.b 0,	0, 5, $1B
0001DD34 5201 0AC2                  	dc.l Map_obj52a+$52000000
0001DD38 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DD3C 6101 2BC8                  	dc.l Map_obj61+$61000000
0001DD40 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DD44 6101 2BC8                  	dc.l Map_obj61+$61000000
0001DD48 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DD4C 6101 2BC8                  	dc.l Map_obj61+$61000000
0001DD50 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DD54 6201 2D1C                  	dc.l Map_obj62+$62000000
0001DD58 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DD5C 6101 2BC8                  	dc.l Map_obj61+$61000000
0001DD60 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DD64 6101 2BC8                  	dc.l Map_obj61+$61000000
0001DD68 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DD6C 6301 307E                  	dc.l Map_obj63+$63000000
0001DD70 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DD74 6001 28EA                  	dc.l Map_obj60+$60000000
0001DD78 0000 0467                  	dc.b 0,	0, 4, $67
0001DD7C 6401 33C4                  	dc.l Map_obj64+$64000000
0001DD80 8413 8348                  	dc.b $84, $13, $83, $48
0001DD84 6501 354C                  	dc.l Map_obj65+$65000000
0001DD88 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DD8C 6501 354C                  	dc.l Map_obj65+$65000000
0001DD90 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DD94 0B01 1D3A                  	dc.l Map_obj0B+$B000000
0001DD98 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DD9C 0C01 1E0A                  	dc.l Map_obj0C+$C000000
0001DDA0 0200 4328                  	dc.b 2,	0, $43,	$28
0001DDA4 7901 7C1A                  	dc.l Map_obj79+$79000000
0001DDA8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DDAC                            	even
0001DDAC                            	even
0001DDAC                            
0001DDAC                            ; ---------------------------------------------------------------------------
0001DDAC                            ; Debug	list - Marble
0001DDAC                            ; ---------------------------------------------------------------------------
0001DDAC                            Debug_MZ:
0001DDAC                            	include "_inc\Debug list - MZ.asm"
0001DDAC                            ; ---------------------------------------------------------------------------
0001DDAC                            ; Debug	list - Marble
0001DDAC                            ; ---------------------------------------------------------------------------
0001DDAC 0012                       	dc.w $12
0001DDAE 2500 A82E                  	dc.l Map_obj25+$25000000
0001DDB2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DDB6 2600 AE34                  	dc.l Map_obj26+$26000000
0001DDBA 0000 0680                  	dc.b 0,	0, 6, $80
0001DDBE 2200 A2E2                  	dc.l Map_obj22+$22000000
0001DDC2 0000 0444                  	dc.b 0,	0, 4, $44
0001DDC6 3600 D9D4                  	dc.l Map_obj36+$36000000
0001DDCA 0000 051B                  	dc.b 0,	0, 5, $1B
0001DDCE 4100 E746                  	dc.l Map_obj41+$41000000
0001DDD2 0000 0523                  	dc.b 0,	0, 5, $23
0001DDD6 1300 BC8E                  	dc.l Map_obj14+$13000000
0001DDDA 0000 0345                  	dc.b 0,	0, 3, $45
0001DDDE 4600 F32C                  	dc.l Map_obj46+$46000000
0001DDE2 0000 4000                  	dc.b 0,	0, $40,	0
0001DDE6 4C00 FC78                  	dc.l Map_obj4C+$4C000000
0001DDEA 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DDEE 4E00 FF5C                  	dc.l Map_obj4E+$4E000000
0001DDF2 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DDF6 3300 CC04                  	dc.l Map_obj33+$33000000
0001DDFA 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DDFE 5001 035A                  	dc.l Map_obj50+$50000000
0001DE02 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DE06 5101 07F6                  	dc.l Map_obj51+$51000000
0001DE0A 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DE0E 5201 0A6C                  	dc.l Map_obj52+$52000000
0001DE12 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DE16 5300 8FCC                  	dc.l Map_obj53+$53000000
0001DE1A 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DE1E 5400 FC3E                  	dc.l Map_obj54+$54000000
0001DE22 0000 8680                  	dc.b 0,	0, $86,	$80
0001DE26 5501 0C60                  	dc.l Map_obj55+$55000000
0001DE2A 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DE2E 7801 7894                  	dc.l Map_obj78+$78000000
0001DE32 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DE36 7901 7C1A                  	dc.l Map_obj79+$79000000
0001DE3A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DE3E                            	even
0001DE3E                            	even
0001DE3E                            
0001DE3E                            ; ---------------------------------------------------------------------------
0001DE3E                            ; Debug	list - Star Light
0001DE3E                            ; ---------------------------------------------------------------------------
0001DE3E                            Debug_SLZ:
0001DE3E                            	include "_inc\Debug list - SLZ.asm"
0001DE3E                            ; ---------------------------------------------------------------------------
0001DE3E                            ; Debug	list - Star Light
0001DE3E                            ; ---------------------------------------------------------------------------
0001DE3E 000F                       	dc.w $F
0001DE40 2500 A82E                  	dc.l Map_obj25+$25000000
0001DE44 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DE48 2600 AE34                  	dc.l Map_obj26+$26000000
0001DE4C 0000 0680                  	dc.b 0,	0, 6, $80
0001DE50 5901 1762                  	dc.l Map_obj59+$59000000
0001DE54 0000 4000                  	dc.b 0,	0, $40,	0
0001DE58 5300 8FCC                  	dc.l Map_obj53+$53000000
0001DE5C 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DE60 1800 8992                  	dc.l Map_obj18b+$18000000
0001DE64 0000 4000                  	dc.b 0,	0, $40,	0
0001DE68 5A01 189C                  	dc.l Map_obj5A+$5A000000
0001DE6C 0000 4000                  	dc.b 0,	0, $40,	0
0001DE70 5B01 1A54                  	dc.l Map_obj5B+$5B000000
0001DE74 0000 4000                  	dc.b 0,	0, $40,	0
0001DE78 5D01 2024                  	dc.l Map_obj5D+$5D000000
0001DE7C 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DE80 5E01 23B6                  	dc.l Map_obj5E+$5E000000
0001DE84 0000 0374                  	dc.b 0,	0, 3, $74
0001DE88 4100 E746                  	dc.l Map_obj41+$41000000
0001DE8C 0000 0523                  	dc.b 0,	0, 5, $23
0001DE90 1300 BC8E                  	dc.l Map_obj14+$13000000
0001DE94 0000 0480                  	dc.b 0,	0, 4, $80
0001DE98 1C00 90DC                  	dc.l Map_obj1C+$1C000000
0001DE9C 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DEA0 5F01 2634                  	dc.l Map_obj5F+$5F000000
0001DEA4 0000 0400                  	dc.b 0,	0, 4, 0
0001DEA8 6001 28EA                  	dc.l Map_obj60+$60000000
0001DEAC 0000 2429                  	dc.b 0,	0, $24,	$29
0001DEB0 7901 7C1A                  	dc.l Map_obj79+$79000000
0001DEB4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DEB8                            	even
0001DEB8                            	even
0001DEB8                            
0001DEB8                            ; ---------------------------------------------------------------------------
0001DEB8                            ; Debug	list - Spring Yard
0001DEB8                            ; ---------------------------------------------------------------------------
0001DEB8                            Debug_SYZ:
0001DEB8                            	include "_inc\Debug list - SYZ.asm"
0001DEB8                            ; ---------------------------------------------------------------------------
0001DEB8                            ; Debug	list - Spring Yard
0001DEB8                            ; ---------------------------------------------------------------------------
0001DEB8 000F                       	dc.w $F
0001DEBA 2500 A82E                  	dc.l Map_obj25+$25000000
0001DEBE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DEC2 2600 AE34                  	dc.l Map_obj26+$26000000
0001DEC6 0000 0680                  	dc.b 0,	0, 6, $80
0001DECA 3600 D9D4                  	dc.l Map_obj36+$36000000
0001DECE 0000 051B                  	dc.b 0,	0, 5, $1B
0001DED2 4100 E746                  	dc.l Map_obj41+$41000000
0001DED6 0000 0523                  	dc.b 0,	0, 5, $23
0001DEDA 4300 EBCC                  	dc.l Map_obj43+$43000000
0001DEDE 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DEE2 1200 F3AA                  	dc.l Map_obj12+$12000000
0001DEE6 0000 0000                  	dc.b 0,	0, 0, 0
0001DEEA 4700 F526                  	dc.l Map_obj47+$47000000
0001DEEE 0000 0380                  	dc.b 0,	0, 3, $80
0001DEF2 1F00 A026                  	dc.l Map_obj1F+$1F000000
0001DEF6 0000 0400                  	dc.b 0,	0, 4, 0
0001DEFA 2200 A2E2                  	dc.l Map_obj22+$22000000
0001DEFE 0000 0444                  	dc.b 0,	0, 4, $44
0001DF02 5001 035A                  	dc.l Map_obj50+$50000000
0001DF06 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DF0A 1800 8980                  	dc.l Map_obj18a+$18000000
0001DF0E 0000 4000                  	dc.b 0,	0, $40,	0
0001DF12 5601 1122                  	dc.l Map_obj56+$56000000
0001DF16 0000 4000                  	dc.b 0,	0, $40,	0
0001DF1A 3200 C7C4                  	dc.l Map_obj32+$32000000
0001DF1E 0000 0513                  	dc.b 0,	0, 5, $13
0001DF22 7801 7894                  	dc.l Map_obj78+$78000000
0001DF26 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DF2A 7901 7C1A                  	dc.l Map_obj79+$79000000
0001DF2E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DF32                            	even
0001DF32                            	even
0001DF32                            
0001DF32                            ; ---------------------------------------------------------------------------
0001DF32                            ; Debug	list - Scrap Brain
0001DF32                            ; ---------------------------------------------------------------------------
0001DF32                            Debug_SBZ:
0001DF32                            	include "_inc\Debug list - SBZ.asm"
0001DF32                            ; ---------------------------------------------------------------------------
0001DF32                            ; Debug	list - Scrap Brain
0001DF32                            ; ---------------------------------------------------------------------------
0001DF32 001D                       	dc.w $1D
0001DF34 2500 A82E                  	dc.l Map_obj25+$25000000
0001DF38 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DF3C 2600 AE34                  	dc.l Map_obj26+$26000000
0001DF40 0000 0680                  	dc.b 0,	0, 6, $80
0001DF44 5F01 2634                  	dc.l Map_obj5F+$5F000000
0001DF48 0000 0400                  	dc.b 0,	0, 4, 0
0001DF4C 6001 28EA                  	dc.l Map_obj60+$60000000
0001DF50 0000 0429                  	dc.b 0,	0, 4, $29
0001DF54 7801 7894                  	dc.l Map_obj78+$78000000
0001DF58 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DF5C 1501 14BE                  	dc.l Map_obj15b+$15000000
0001DF60 0702 4391                  	dc.b 7,	2, $43,	$91
0001DF64 6701 61A8                  	dc.l Map_obj67+$67000000
0001DF68 E000 C344                  	dc.b $E0, 0, $C3, $44
0001DF6C 5201 0A6C                  	dc.l Map_obj52+$52000000
0001DF70 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DF74 3200 C7C4                  	dc.l Map_obj32+$32000000
0001DF78 0000 0513                  	dc.b 0,	0, 5, $13
0001DF7C 6901 6402                  	dc.l Map_obj69+$69000000
0001DF80 0300 4492                  	dc.b 3,	0, $44,	$92
0001DF84 6901 645C                  	dc.l Map_obj69a+$69000000
0001DF88 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DF8C 6A01 66BA                  	dc.l Map_obj6A+$6A000000
0001DF90 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DF94 5300 8FCC                  	dc.l Map_obj53+$53000000
0001DF98 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DF9C 5201 0A6C                  	dc.l Map_obj52+$52000000
0001DFA0 3903 4460                  	dc.b $39, 3, $44, $60
0001DFA4 6B01 6A8A                  	dc.l Map_obj6B+$6B000000
0001DFA8 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DFAC 2A00 9272                  	dc.l Map_obj2A+$2A000000
0001DFB0 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DFB4 6B01 6A8A                  	dc.l Map_obj6B+$6B000000
0001DFB8 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DFBC 6A01 66BA                  	dc.l Map_obj6A+$6A000000
0001DFC0 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DFC4 6B01 6A8A                  	dc.l Map_obj6B+$6B000000
0001DFC8 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DFCC 6A01 66BA                  	dc.l Map_obj6A+$6A000000
0001DFD0 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DFD4 6B01 6A8A                  	dc.l Map_obj6B+$6B000000
0001DFD8 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DFDC 6C01 6C4C                  	dc.l Map_obj6C+$6C000000
0001DFE0 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DFE4 6D00 F01C                  	dc.l Map_obj6D+$6D000000
0001DFE8 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DFEC 6D00 F01C                  	dc.l Map_obj6D+$6D000000
0001DFF0 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DFF4 6E01 6D02                  	dc.l Map_obj6E+$6E000000
0001DFF8 0400 047E                  	dc.b 4,	0, 4, $7E
0001DFFC 7001 7158                  	dc.l Map_obj70+$70000000
0001E000 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001E004 7101 1ECA                  	dc.l Map_obj71+$71000000
0001E008 1100 8680                  	dc.b $11, 0, $86, $80
0001E00C 1E00 9730                  	dc.l Map_obj1E+$1E000000
0001E010 0400 2302                  	dc.b 4,	0, $23,	2
0001E014 7901 7C1A                  	dc.l Map_obj79+$79000000
0001E018 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E01C                            	even
0001E01C                            	even
0001E01C                            
0001E01C                            ; ---------------------------------------------------------------------------
0001E01C                            ; Debug	list - ending sequence / special stage
0001E01C                            ; ---------------------------------------------------------------------------
0001E01C                            Debug_Ending:
0001E01C                            	include "_inc\Debug list - Ending and SS.asm"
0001E01C                            ; ---------------------------------------------------------------------------
0001E01C                            ; Debug	list - ending sequence / special stage
0001E01C                            ; ---------------------------------------------------------------------------
0001E01C 000D                       	dc.w $D
0001E01E 2500 A82E                  	dc.l Map_obj25+$25000000
0001E022 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E026 4700 F526                  	dc.l Map_obj47+$47000000
0001E02A 0000 0380                  	dc.b 0,	0, 3, $80
0001E02E 2800 9D58                  	dc.l Map_obj28a+$28000000
0001E032 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001E036 2800 9D58                  	dc.l Map_obj28a+$28000000
0001E03A 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001E03E 2800 9D58                  	dc.l Map_obj28a+$28000000
0001E042 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001E046 2800 9D40                  	dc.l Map_obj28+$28000000
0001E04A 0D00 0553                  	dc.b $D, 0, 5, $53
0001E04E 2800 9D40                  	dc.l Map_obj28+$28000000
0001E052 0E00 0553                  	dc.b $E, 0, 5, $53
0001E056 2800 9D40                  	dc.l Map_obj28+$28000000
0001E05A 0F00 0573                  	dc.b $F, 0, 5, $73
0001E05E 2800 9D40                  	dc.l Map_obj28+$28000000
0001E062 1000 0573                  	dc.b $10, 0, 5,	$73
0001E066 2800 9D58                  	dc.l Map_obj28a+$28000000
0001E06A 1100 0585                  	dc.b $11, 0, 5,	$85
0001E06E 2800 9D70                  	dc.l Map_obj28b+$28000000
0001E072 1200 0593                  	dc.b $12, 0, 5,	$93
0001E076 2800 9D58                  	dc.l Map_obj28a+$28000000
0001E07A 1300 0565                  	dc.b $13, 0, 5,	$65
0001E07E 2800 9D70                  	dc.l Map_obj28b+$28000000
0001E082 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001E086                            	even
0001E086                            	even
0001E086                            
0001E086                            ; ---------------------------------------------------------------------------
0001E086                            ; Main level load blocks
0001E086                            ; ---------------------------------------------------------------------------
0001E086                            MainLoadBlocks:
0001E086                            	include "_inc\Main level load blocks.asm"
0001E086                            ; ---------------------------------------------------------------------------
0001E086                            ; Main level load blocks
0001E086                            ;
0001E086                            ; ===FORMAT===
0001E086                            ; level	patterns + (1st	PLC num	* 10^6)
0001E086                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001E086                            ; 256x256 mappings
0001E086                            ; blank, music (unused), pal index (unused), pal index
0001E086                            ; ---------------------------------------------------------------------------
0001E086 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001E08A 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001E08E 0000 0000                  	dc.l Blk256_GHZ
0001E092 0081 0404                  	dc.b 0,	$81, 4,	4
0001E096 0000 0000                  	dc.l Nem_LZ+$6000000
0001E09A 0000 0000                  	dc.l Blk16_LZ+$7000000
0001E09E 0000 0000                  	dc.l Blk256_LZ
0001E0A2 0082 0505                  	dc.b 0,	$82, 5,	5
0001E0A6 0000 0000                  	dc.l Nem_MZ+$8000000
0001E0AA 0000 0000                  	dc.l Blk16_MZ+$9000000
0001E0AE 0000 0000                  	dc.l Blk256_MZ
0001E0B2 0083 0606                  	dc.b 0,	$83, 6,	6
0001E0B6 0000 0000                  	dc.l Nem_SLZ+$A000000
0001E0BA 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001E0BE 0000 0000                  	dc.l Blk256_SLZ
0001E0C2 0084 0707                  	dc.b 0,	$84, 7,	7
0001E0C6 0000 0000                  	dc.l Nem_SYZ+$C000000
0001E0CA 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001E0CE 0000 0000                  	dc.l Blk256_SYZ
0001E0D2 0085 0808                  	dc.b 0,	$85, 8,	8
0001E0D6 0000 0000                  	dc.l Nem_SBZ+$E000000
0001E0DA 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001E0DE 0000 0000                  	dc.l Blk256_SBZ
0001E0E2 0086 0909                  	dc.b 0,	$86, 9,	9
0001E0E6 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001E0EA 0000 0000                  	dc.l Blk16_GHZ
0001E0EE 0000 0000                  	dc.l Blk256_GHZ
0001E0F2 0086 1313                  	dc.b 0,	$86, $13, $13
0001E0F6                            ; please help everything is incorrect
0001E0F6 0000 0000                  	dc.l Nem_BHZ_2nd+$4000000 ; MAKOTO ZONE
0001E0FA 0000 0000                  	dc.l Blk16_BHZ+$5000000
0001E0FE 0000 0000                  	dc.l Blk256_BHZ
0001E102 009E 2121                  	dc.b 0,	$9E, $21,	$21
0001E106                            	even
0001E106                            	even
0001E106                            
0001E106                            ; ---------------------------------------------------------------------------
0001E106                            ; Pattern load cues
0001E106                            ; ---------------------------------------------------------------------------
0001E106                            ArtLoadCues:
0001E106                            	include "_inc\Pattern load cues.asm"
0001E106                            ; ---------------------------------------------------------------------------
0001E106                            ; Pattern load cues - index
0001E106                            ; ---------------------------------------------------------------------------
0001E106 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001E10A 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001E10E 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001E112 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001E116 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001E11A 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001E11E 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001E122 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001E126 0000 0000                  	dc.w PLC_BHZ-ArtLoadCues, PLC_BHZ2-ArtLoadCues
0001E12A 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001E12E 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001E132 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001E136 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001E13A 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001E13E 0000 0000 0000             	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001E144 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001E148 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001E14C 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001E14E                            ; ---------------------------------------------------------------------------
0001E14E                            ; Pattern load cues - standard block 1
0001E14E                            ; ---------------------------------------------------------------------------
0001E14E 0004                       PLC_Main:	dc.w 4
0001E150 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001E154 F400                       		dc.w $F400
0001E156 0000 0000                  		dc.l Nem_Hud		; HUD
0001E15A D940                       		dc.w $D940
0001E15C 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001E160 FA80                       		dc.w $FA80
0001E162 0000 0000                  		dc.l Nem_Ring		; rings
0001E166 F640                       		dc.w $F640
0001E168 0000 0000                  		dc.l Nem_Points		; points from enemy
0001E16C F2E0                       		dc.w $F2E0
0001E16E                            ; ---------------------------------------------------------------------------
0001E16E                            ; Pattern load cues - standard block 2
0001E16E                            ; ---------------------------------------------------------------------------
0001E16E 0002                       PLC_Main2:	dc.w 2
0001E170 0000 0000                  		dc.l Nem_Monitors	; monitors
0001E174 D000                       		dc.w $D000
0001E176 0000 0000                  		dc.l Nem_Shield		; shield
0001E17A A820                       		dc.w $A820
0001E17C 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001E180 AB80                       		dc.w $AB80
0001E182                            ; ---------------------------------------------------------------------------
0001E182                            ; Pattern load cues - explosion
0001E182                            ; ---------------------------------------------------------------------------
0001E182 0000                       PLC_Explode:	dc.w 0
0001E184 0000 0000                  		dc.l Nem_Explode	; explosion
0001E188 B400                       		dc.w $B400
0001E18A                            ; ---------------------------------------------------------------------------
0001E18A                            ; Pattern load cues - game/time	over
0001E18A                            ; ---------------------------------------------------------------------------
0001E18A 0000                       PLC_GameOver:	dc.w 0
0001E18C 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001E190 ABC0                       		dc.w $ABC0
0001E192                            ; ---------------------------------------------------------------------------
0001E192                            ; Pattern load cues - Green Hill
0001E192                            ; ---------------------------------------------------------------------------
0001E192 000B                       PLC_GHZ:	dc.w $B
0001E194 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E198 0000                       		dc.w 0
0001E19A 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E19E 39A0                       		dc.w $39A0
0001E1A0 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E1A4 6B00                       		dc.w $6B00
0001E1A6 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E1AA 7A00                       		dc.w $7A00
0001E1AC 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E1B0 8000                       		dc.w $8000
0001E1B2 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E1B6 8880                       		dc.w $8880
0001E1B8 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E1BC 8F60                       		dc.w $8F60
0001E1BE 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E1C2 9360                       		dc.w $9360
0001E1C4 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E1C8 9E00                       		dc.w $9E00
0001E1CA 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E1CE A360                       		dc.w $A360
0001E1D0 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E1D4 A460                       		dc.w $A460
0001E1D6 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E1DA A660                       		dc.w $A660
0001E1DC 0005                       PLC_GHZ2:	dc.w 5
0001E1DE 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E1E2 7000                       		dc.w $7000
0001E1E4 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E1E8 71C0                       		dc.w $71C0
0001E1EA 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E1EE 7300                       		dc.w $7300
0001E1F0 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E1F4 7540                       		dc.w $7540
0001E1F6 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E1FA A1E0                       		dc.w $A1E0
0001E1FC 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E200 6980                       		dc.w $6980
0001E202                            ; ---------------------------------------------------------------------------
0001E202                            ; Pattern load cues - Labyrinth
0001E202                            ; ---------------------------------------------------------------------------
0001E202 000B                       PLC_LZ:		dc.w $B
0001E204 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E208 0000                       		dc.w 0
0001E20A 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E20E 3C00                       		dc.w $3C00
0001E210 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E214 3E00                       		dc.w $3E00
0001E216 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E21A 4B20                       		dc.w $4B20
0001E21C 0000 0000                  		dc.l Nem_Water		; water	surface
0001E220 6000                       		dc.w $6000
0001E222 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E226 6200                       		dc.w $6200
0001E228 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E22C 6500                       		dc.w $6500
0001E22E 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E232 6900                       		dc.w $6900
0001E234 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E238 7780                       		dc.w $7780
0001E23A 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E23E 7880                       		dc.w $7880
0001E240 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E244 7980                       		dc.w $7980
0001E246 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E24A 94C0                       		dc.w $94C0
0001E24C 000C                       PLC_LZ2:	dc.w $C
0001E24E 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E252 7BC0                       		dc.w $7BC0
0001E254 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E258 7CC0                       		dc.w $7CC0
0001E25A 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E25E 7EC0                       		dc.w $7EC0
0001E260 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E264 5D20                       		dc.w $5D20
0001E266 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E26A 8800                       		dc.w $8800
0001E26C 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E270 89E0                       		dc.w $89E0
0001E272 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E276 8CE0                       		dc.w $8CE0
0001E278 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E27C 90C0                       		dc.w $90C0
0001E27E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E282 A1E0                       		dc.w $A1E0
0001E284 0000 0000                  		dc.l Nem_Cork		; cork block
0001E288 A000                       		dc.w $A000
0001E28A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E28E A360                       		dc.w $A360
0001E290 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E294 A460                       		dc.w $A460
0001E296 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E29A A660                       		dc.w $A660
0001E29C                            ; ---------------------------------------------------------------------------
0001E29C                            ; Pattern load cues - Marble
0001E29C                            ; ---------------------------------------------------------------------------
0001E29C 0009                       PLC_MZ:		dc.w 9
0001E29E 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E2A2 0000                       		dc.w 0
0001E2A4 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E2A8 6000                       		dc.w $6000
0001E2AA 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E2AE 68A0                       		dc.w $68A0
0001E2B0 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E2B4 7000                       		dc.w $7000
0001E2B6 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E2BA 71C0                       		dc.w $71C0
0001E2BC 0000 0000                  		dc.l Nem_Lava		; lava
0001E2C0 7500                       		dc.w $7500
0001E2C2 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E2C6 8880                       		dc.w $8880
0001E2C8 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E2CC 8F60                       		dc.w $8F60
0001E2CE 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E2D2 9700                       		dc.w $9700
0001E2D4 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E2D8 9FE0                       		dc.w $9FE0
0001E2DA 0004                       PLC_MZ2:	dc.w 4
0001E2DC 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E2E0 A260                       		dc.w $A260
0001E2E2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E2E6 A360                       		dc.w $A360
0001E2E8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E2EC A460                       		dc.w $A460
0001E2EE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E2F2 A660                       		dc.w $A660
0001E2F4 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E2F8 5700                       		dc.w $5700
0001E2FA                            ; ---------------------------------------------------------------------------
0001E2FA                            ; Pattern load cues - Star Light
0001E2FA                            ; ---------------------------------------------------------------------------
0001E2FA 0008                       PLC_SLZ:	dc.w 8
0001E2FC 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E300 0000                       		dc.w 0
0001E302 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E306 8000                       		dc.w $8000
0001E308 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E30C 8520                       		dc.w $8520
0001E30E 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E312 9000                       		dc.w $9000
0001E314 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E318 9C00                       		dc.w $9C00
0001E31A 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E31E A260                       		dc.w $A260
0001E320 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E324 A360                       		dc.w $A360
0001E326 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E32A A460                       		dc.w $A460
0001E32C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E330 A660                       		dc.w $A660
0001E332 0005                       PLC_SLZ2:	dc.w 5
0001E334 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E338 6E80                       		dc.w $6E80
0001E33A 0000 0000                  		dc.l Nem_Fan		; fan
0001E33E 7400                       		dc.w $7400
0001E340 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E344 7980                       		dc.w $7980
0001E346 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E34A 7B80                       		dc.w $7B80
0001E34C 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E350 9B00                       		dc.w $9B00
0001E352 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E356 9E00                       		dc.w $9E00
0001E358                            ; ---------------------------------------------------------------------------
0001E358                            ; Pattern load cues - Spring Yard
0001E358                            ; ---------------------------------------------------------------------------
0001E358 0004                       PLC_SYZ:	dc.w 4
0001E35A 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E35E 0000                       		dc.w 0
0001E360 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E364 8000                       		dc.w $8000
0001E366 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E36A 8880                       		dc.w $8880
0001E36C 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E370 8F60                       		dc.w $8F60
0001E372 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E376 9700                       		dc.w $9700
0001E378 0007                       PLC_SYZ2:	dc.w 7
0001E37A 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E37E 7000                       		dc.w $7000
0001E380 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E384 72C0                       		dc.w $72C0
0001E386 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E38A 7740                       		dc.w $7740
0001E38C 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E390 9FE0                       		dc.w $9FE0
0001E392 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E396 A1E0                       		dc.w $A1E0
0001E398 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E39C A360                       		dc.w $A360
0001E39E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E3A2 A460                       		dc.w $A460
0001E3A4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E3A8 A660                       		dc.w $A660
0001E3AA                            ; ---------------------------------------------------------------------------
0001E3AA                            ; Pattern load cues - Scrap Brain
0001E3AA                            ; ---------------------------------------------------------------------------
0001E3AA 000B                       PLC_SBZ:	dc.w $B
0001E3AC 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E3B0 0000                       		dc.w 0
0001E3B2 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E3B6 5800                       		dc.w $5800
0001E3B8 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E3BC 5D00                       		dc.w $5D00
0001E3BE 0000 0000                  		dc.l Nem_Girder		; girder
0001E3C2 5E00                       		dc.w $5E00
0001E3C4 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E3C8 6040                       		dc.w $6040
0001E3CA 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E3CE 6880                       		dc.w $6880
0001E3D0 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E3D4 6900                       		dc.w $6900
0001E3D6 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E3DA 7220                       		dc.w $7220
0001E3DC 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E3E0 76A0                       		dc.w $76A0
0001E3E2 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E3E6 7B20                       		dc.w $7B20
0001E3E8 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E3EC 7EA0                       		dc.w $7EA0
0001E3EE 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E3F2 9860                       		dc.w $9860
0001E3F4 000C                       PLC_SBZ2:	dc.w $C
0001E3F6 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E3FA 5600                       		dc.w $5600
0001E3FC 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E400 8000                       		dc.w $8000
0001E402 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E406 8520                       		dc.w $8520
0001E408 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E40C 8C00                       		dc.w $8C00
0001E40E 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E412 8DE0                       		dc.w $8DE0
0001E414 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E418 8FC0                       		dc.w $8FC0
0001E41A 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E41E 9240                       		dc.w $9240
0001E420 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E424 7F20                       		dc.w $7F20
0001E426 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E42A 9BE0                       		dc.w $9BE0
0001E42C 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E430 A1E0                       		dc.w $A1E0
0001E432 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E436 A360                       		dc.w $A360
0001E438 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E43C A460                       		dc.w $A460
0001E43E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E442 A660                       		dc.w $A660
0001E444                            ; ---------------------------------------------------------------------------
0001E444                            ; Pattern load cues - DR. Breen Hill
0001E444                            ; ---------------------------------------------------------------------------
0001E444 000B                       PLC_BHZ:	dc.w $B
0001E446 0000 0000                  		dc.l Nem_BHZ_1st	; GHZ main patterns
0001E44A 0000                       		dc.w 0
0001E44C 0000 0000                  		dc.l Nem_BHZ_2nd	; GHZ secondary	patterns
0001E450 39A0                       		dc.w $39A0
0001E452 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E456 6B00                       		dc.w $6B00
0001E458 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E45C 7A00                       		dc.w $7A00
0001E45E 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E462 8000                       		dc.w $8000
0001E464 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E468 8880                       		dc.w $8880
0001E46A 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E46E 8F60                       		dc.w $8F60
0001E470 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E474 9360                       		dc.w $9360
0001E476 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E47A 9E00                       		dc.w $9E00
0001E47C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E480 A360                       		dc.w $A360
0001E482 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E486 A460                       		dc.w $A460
0001E488 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E48C A660                       		dc.w $A660
0001E48E 0005                       PLC_BHZ2:	dc.w 5
0001E490 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E494 7000                       		dc.w $7000
0001E496 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E49A 71C0                       		dc.w $71C0
0001E49C 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E4A0 7300                       		dc.w $7300
0001E4A2 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E4A6 7540                       		dc.w $7540
0001E4A8 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E4AC A1E0                       		dc.w $A1E0
0001E4AE 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E4B2 6980                       		dc.w $6980
0001E4B4                            ; ---------------------------------------------------------------------------
0001E4B4                            ; Pattern load cues - title card
0001E4B4                            ; ---------------------------------------------------------------------------
0001E4B4 0000                       PLC_TitleCard:	dc.w 0
0001E4B6 0000 0000                  		dc.l Nem_TitleCard
0001E4BA B000                       		dc.w $B000
0001E4BC                            ; ---------------------------------------------------------------------------
0001E4BC                            ; Pattern load cues - act 3 boss
0001E4BC                            ; ---------------------------------------------------------------------------
0001E4BC 0005                       PLC_Boss:	dc.w 5
0001E4BE 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E4C2 8000                       		dc.w $8000
0001E4C4 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E4C8 8D80                       		dc.w $8D80
0001E4CA 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E4CE 93A0                       		dc.w $93A0
0001E4D0 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E4D4 A300                       		dc.w $A300
0001E4D6 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E4DA A300                       		dc.w $A300
0001E4DC 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E4E0 A540                       		dc.w $A540
0001E4E2                            ; ---------------------------------------------------------------------------
0001E4E2                            ; Pattern load cues - act 1/2 signpost
0001E4E2                            ; ---------------------------------------------------------------------------
0001E4E2 0002                       PLC_Signpost:	dc.w 2
0001E4E4 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E4E8 D000                       		dc.w $D000
0001E4EA 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E4EE 96C0                       		dc.w $96C0
0001E4F0 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E4F4 8C40                       		dc.w $8C40
0001E4F6                            ; ---------------------------------------------------------------------------
0001E4F6                            ; Pattern load cues - beta special stage warp effect
0001E4F6                            ; ---------------------------------------------------------------------------
0001E4F6 0000                       PLC_Warp:	dc.w 0
0001E4F8 0000 0000                  		dc.l Nem_Warp
0001E4FC A820                       		dc.w $A820
0001E4FE                            ; ---------------------------------------------------------------------------
0001E4FE                            ; Pattern load cues - special stage
0001E4FE                            ; ---------------------------------------------------------------------------
0001E4FE 0010                       PLC_SpeStage:	dc.w $10
0001E500 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E504 0000                       		dc.w 0
0001E506 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E50A 0A20                       		dc.w $A20
0001E50C 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E510 2840                       		dc.w $2840
0001E512 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E516 4760                       		dc.w $4760
0001E518 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E51C 4A20                       		dc.w $4A20
0001E51E 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E522 4C60                       		dc.w $4C60
0001E524 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E528 5E00                       		dc.w $5E00
0001E52A 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E52E 6E00                       		dc.w $6E00
0001E530 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E534 7E00                       		dc.w $7E00
0001E536 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E53A 8E00                       		dc.w $8E00
0001E53C 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E540 9E00                       		dc.w $9E00
0001E542 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E546 AE00                       		dc.w $AE00
0001E548 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E54C BE00                       		dc.w $BE00
0001E54E 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E552 EE00                       		dc.w $EE00
0001E554 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E558 F2E0                       		dc.w $F2E0
0001E55A 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E55E F400                       		dc.w $F400
0001E560 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E564 F520                       		dc.w $F520
0001E566 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E56A F2E0                       		dc.w $F2E0
0001E56C 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E570 F400                       		dc.w $F400
0001E572 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E576 F520                       		dc.w $F520
0001E578                            ; ---------------------------------------------------------------------------
0001E578                            ; Pattern load cues - GHZ animals
0001E578                            ; ---------------------------------------------------------------------------
0001E578 0001                       PLC_GHZAnimals:	dc.w 1
0001E57A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E57E B000                       		dc.w $B000
0001E580 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E584 B240                       		dc.w $B240
0001E586                            ; ---------------------------------------------------------------------------
0001E586                            ; Pattern load cues - LZ animals
0001E586                            ; ---------------------------------------------------------------------------
0001E586 0001                       PLC_LZAnimals:	dc.w 1
0001E588 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E58C B000                       		dc.w $B000
0001E58E 0000 0000                  		dc.l Nem_Seal		; seal
0001E592 B240                       		dc.w $B240
0001E594                            ; ---------------------------------------------------------------------------
0001E594                            ; Pattern load cues - MZ animals
0001E594                            ; ---------------------------------------------------------------------------
0001E594 0001                       PLC_MZAnimals:	dc.w 1
0001E596 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E59A B000                       		dc.w $B000
0001E59C 0000 0000                  		dc.l Nem_Seal		; seal
0001E5A0 B240                       		dc.w $B240
0001E5A2                            ; ---------------------------------------------------------------------------
0001E5A2                            ; Pattern load cues - SLZ animals
0001E5A2                            ; ---------------------------------------------------------------------------
0001E5A2 0001                       PLC_SLZAnimals:	dc.w 1
0001E5A4 0000 0000                  		dc.l Nem_Pig		; pig
0001E5A8 B000                       		dc.w $B000
0001E5AA 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E5AE B240                       		dc.w $B240
0001E5B0                            ; ---------------------------------------------------------------------------
0001E5B0                            ; Pattern load cues - SYZ animals
0001E5B0                            ; ---------------------------------------------------------------------------
0001E5B0 0001                       PLC_SYZAnimals:	dc.w 1
0001E5B2 0000 0000                  		dc.l Nem_Pig		; pig
0001E5B6 B000                       		dc.w $B000
0001E5B8 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E5BC B240                       		dc.w $B240
0001E5BE                            ; ---------------------------------------------------------------------------
0001E5BE                            ; Pattern load cues - SBZ animals
0001E5BE                            ; ---------------------------------------------------------------------------
0001E5BE 0001                       PLC_SBZAnimals:	dc.w 1
0001E5C0 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E5C4 B000                       		dc.w $B000
0001E5C6 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E5CA B240                       		dc.w $B240
0001E5CC                            ; ---------------------------------------------------------------------------
0001E5CC                            ; Pattern load cues - special stage results screen
0001E5CC                            ; ---------------------------------------------------------------------------
0001E5CC 0001                       PLC_SpeStResult:dc.w 1
0001E5CE 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E5D2 A820                       		dc.w $A820
0001E5D4 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E5D8 AA20                       		dc.w $AA20
0001E5DA                            ; ---------------------------------------------------------------------------
0001E5DA                            ; Pattern load cues - ending sequence
0001E5DA                            ; ---------------------------------------------------------------------------
0001E5DA 000E                       PLC_Ending:	dc.w $E
0001E5DC 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E5E0 0000                       		dc.w 0
0001E5E2 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E5E6 39A0                       		dc.w $39A0
0001E5E8 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E5EC 6B00                       		dc.w $6B00
0001E5EE 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E5F2 7400                       		dc.w $7400
0001E5F4 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E5F8 78A0                       		dc.w $78A0
0001E5FA 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E5FE 7C20                       		dc.w $7C20
0001E600 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E604 A480                       		dc.w $A480
0001E606 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E60A AA60                       		dc.w $AA60
0001E60C 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E610 ACA0                       		dc.w $ACA0
0001E612 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E616 AE60                       		dc.w $AE60
0001E618 0000 0000                  		dc.l Nem_Seal		; seal
0001E61C B0A0                       		dc.w $B0A0
0001E61E 0000 0000                  		dc.l Nem_Pig		; pig
0001E622 B260                       		dc.w $B260
0001E624 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E628 B4A0                       		dc.w $B4A0
0001E62A 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E62E B660                       		dc.w $B660
0001E630 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E634 B8A0                       		dc.w $B8A0
0001E636                            ; ---------------------------------------------------------------------------
0001E636                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E636                            ; ---------------------------------------------------------------------------
0001E636 0002                       PLC_TryAgain:	dc.w 2
0001E638 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E63C 78A0                       		dc.w $78A0
0001E63E 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E642 7C20                       		dc.w $7C20
0001E644 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E648 B400                       		dc.w $B400
0001E64A                            ; ---------------------------------------------------------------------------
0001E64A                            ; Pattern load cues - Eggman on SBZ 2
0001E64A                            ; ---------------------------------------------------------------------------
0001E64A 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E64C 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E650 A300                       		dc.w $A300
0001E652 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E656 8000                       		dc.w $8000
0001E658 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E65C 9400                       		dc.w $9400
0001E65E                            ; ---------------------------------------------------------------------------
0001E65E                            ; Pattern load cues - final boss
0001E65E                            ; ---------------------------------------------------------------------------
0001E65E 0004                       PLC_FZBoss:	dc.w 4
0001E660 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E664 7400                       		dc.w $7400
0001E666 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E66A 6000                       		dc.w $6000
0001E66C 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E670 8000                       		dc.w $8000
0001E672 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E676 8E00                       		dc.w $8E00
0001E678 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E67C A540                       		dc.w $A540
0001E67E                            ; ---------------------------------------------------------------------------
0001E67E                            ; Pattern load cues - Teto boss
0001E67E                            ; ---------------------------------------------------------------------------
0001E67E 0002                       PLC_TetoBoss:	dc.w 2
0001E680 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E684 8000                       		dc.w $8000
0001E686 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E68A 93A0                       		dc.w $93A0
0001E68C 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E690 9000                       		dc.w $9000
0001E692                            		even
0001E692                            		even
0001E692                            
0001E692                            		incbin	misc\padding.bin
0001E780                            		even
0001E780                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001EBD6                            		even
0001EBD6                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001EC6E                            		even
0001EC6E                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EDB0                            		even
0001EDB0                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EDFE                            		even
0001EDFE                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001EF12                            		even
0001EF12                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FDDC                            		even
0001FDDC                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023EE2                            		even
00023EE2                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023F16                            		even
00023F16                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023FD4                            		even
00023FD4                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002447C                            		even
0002447C                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
000244DA                            		even
000244DA                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
000250E0                            		even
000250E0                            ; ---------------------------------------------------------------------------
000250E0                            ; Sprite mappings - Sonic
000250E0                            ; ---------------------------------------------------------------------------
000250E0                            Map_Sonic:
000250E0                            	include "_maps\Sonic.asm"
000250E0                            Map_a933:
000250E0 0000                       Map_a933_0: 	dc.w Map_a933_E0-Map_a933
000250E2 0000                       Map_a933_2: 	dc.w Map_a933_E1-Map_a933
000250E4 0000                       Map_a933_4: 	dc.w Map_a933_EC-Map_a933
000250E6 0000                       Map_a933_6: 	dc.w Map_a933_FC-Map_a933
000250E8 0000                       Map_a933_8: 	dc.w Map_a933_10C-Map_a933
000250EA 0000                       Map_a933_A: 	dc.w Map_a933_11C-Map_a933
000250EC 0000                       Map_a933_C: 	dc.w Map_a933_12C-Map_a933
000250EE 0000                       Map_a933_E: 	dc.w Map_a933_141-Map_a933
000250F0 0000                       Map_a933_10: 	dc.w Map_a933_14C-Map_a933
000250F2 0000                       Map_a933_12: 	dc.w Map_a933_157-Map_a933
000250F4 0000                       Map_a933_14: 	dc.w Map_a933_16C-Map_a933
000250F6 0000                       Map_a933_16: 	dc.w Map_a933_177-Map_a933
000250F8 0000                       Map_a933_18: 	dc.w Map_a933_187-Map_a933
000250FA 0000                       Map_a933_1A: 	dc.w Map_a933_1A1-Map_a933
000250FC 0000                       Map_a933_1C: 	dc.w Map_a933_1C0-Map_a933
000250FE 0000                       Map_a933_1E: 	dc.w Map_a933_1D5-Map_a933
00025100 0000                       Map_a933_20: 	dc.w Map_a933_1EF-Map_a933
00025102 0000                       Map_a933_22: 	dc.w Map_a933_204-Map_a933
00025104 0000                       Map_a933_24: 	dc.w Map_a933_21E-Map_a933
00025106 0000                       Map_a933_26: 	dc.w Map_a933_233-Map_a933
00025108 0000                       Map_a933_28: 	dc.w Map_a933_23E-Map_a933
0002510A 0000                       Map_a933_2A: 	dc.w Map_a933_249-Map_a933
0002510C 0000                       Map_a933_2C: 	dc.w Map_a933_25E-Map_a933
0002510E 0000                       Map_a933_2E: 	dc.w Map_a933_269-Map_a933
00025110 0000                       Map_a933_30: 	dc.w Map_a933_279-Map_a933
00025112 0000                       Map_a933_32: 	dc.w Map_a933_298-Map_a933
00025114 0000                       Map_a933_34: 	dc.w Map_a933_2B7-Map_a933
00025116 0000                       Map_a933_36: 	dc.w Map_a933_2CC-Map_a933
00025118 0000                       Map_a933_38: 	dc.w Map_a933_2E6-Map_a933
0002511A 0000                       Map_a933_3A: 	dc.w Map_a933_2FB-Map_a933
0002511C 0000                       Map_a933_3C: 	dc.w Map_a933_315-Map_a933
0002511E 0000                       Map_a933_3E: 	dc.w Map_a933_320-Map_a933
00025120 0000                       Map_a933_40: 	dc.w Map_a933_32B-Map_a933
00025122 0000                       Map_a933_42: 	dc.w Map_a933_336-Map_a933
00025124 0000                       Map_a933_44: 	dc.w Map_a933_341-Map_a933
00025126 0000                       Map_a933_46: 	dc.w Map_a933_356-Map_a933
00025128 0000                       Map_a933_48: 	dc.w Map_a933_366-Map_a933
0002512A 0000                       Map_a933_4A: 	dc.w Map_a933_37B-Map_a933
0002512C 0000                       Map_a933_4C: 	dc.w Map_a933_38B-Map_a933
0002512E 0000                       Map_a933_4E: 	dc.w Map_a933_396-Map_a933
00025130 0000                       Map_a933_50: 	dc.w Map_a933_3A1-Map_a933
00025132 0000                       Map_a933_52: 	dc.w Map_a933_3AC-Map_a933
00025134 0000                       Map_a933_54: 	dc.w Map_a933_3B7-Map_a933
00025136 0000                       Map_a933_56: 	dc.w Map_a933_3CC-Map_a933
00025138 0000                       Map_a933_58: 	dc.w Map_a933_3D7-Map_a933
0002513A 0000                       Map_a933_5A: 	dc.w Map_a933_3EC-Map_a933
0002513C 0000                       Map_a933_5C: 	dc.w Map_a933_3F7-Map_a933
0002513E 0000                       Map_a933_5E: 	dc.w Map_a933_3FD-Map_a933
00025140 0000                       Map_a933_60: 	dc.w Map_a933_403-Map_a933
00025142 0000                       Map_a933_62: 	dc.w Map_a933_409-Map_a933
00025144 0000                       Map_a933_64: 	dc.w Map_a933_40F-Map_a933
00025146 0000                       Map_a933_66: 	dc.w Map_a933_415-Map_a933
00025148 0000                       Map_a933_68: 	dc.w Map_a933_420-Map_a933
0002514A 0000                       Map_a933_6A: 	dc.w Map_a933_426-Map_a933
0002514C 0000                       Map_a933_6C: 	dc.w Map_a933_431-Map_a933
0002514E 0000                       Map_a933_6E: 	dc.w Map_a933_437-Map_a933
00025150 0000                       Map_a933_70: 	dc.w Map_a933_442-Map_a933
00025152 0000                       Map_a933_72: 	dc.w Map_a933_457-Map_a933
00025154 0000                       Map_a933_74: 	dc.w Map_a933_476-Map_a933
00025156 0000                       Map_a933_76: 	dc.w Map_a933_481-Map_a933
00025158 0000                       Map_a933_78: 	dc.w Map_a933_48C-Map_a933
0002515A 0000                       Map_a933_7A: 	dc.w Map_a933_4A1-Map_a933
0002515C 0000                       Map_a933_7C: 	dc.w Map_a933_4AC-Map_a933
0002515E 0000                       Map_a933_7E: 	dc.w Map_a933_4BC-Map_a933
00025160 0000                       Map_a933_80: 	dc.w Map_a933_4D1-Map_a933
00025162 0000                       Map_a933_82: 	dc.w Map_a933_4DC-Map_a933
00025164 0000                       Map_a933_84: 	dc.w Map_a933_4F1-Map_a933
00025166 0000                       Map_a933_86: 	dc.w Map_a933_506-Map_a933
00025168 0000                       Map_a933_88: 	dc.w Map_a933_520-Map_a933
0002516A 0000                       Map_a933_8A: 	dc.w Map_a933_53A-Map_a933
0002516C 0000                       Map_a933_8C: 	dc.w Map_a933_545-Map_a933
0002516E 0000                       Map_a933_8E: 	dc.w Map_a933_555-Map_a933
00025170 0000                       Map_a933_90: 	dc.w Map_a933_560-Map_a933
00025172 0000                       Map_a933_92: 	dc.w Map_a933_570-Map_a933
00025174 0000                       Map_a933_94: 	dc.w Map_a933_57B-Map_a933
00025176 0000                       Map_a933_96: 	dc.w Map_a933_58B-Map_a933
00025178 0000                       Map_a933_98: 	dc.w Map_a933_59B-Map_a933
0002517A 0000                       Map_a933_9A: 	dc.w Map_a933_5B5-Map_a933
0002517C 0000                       Map_a933_9C: 	dc.w Map_a933_5CF-Map_a933
0002517E 0000                       Map_a933_9E: 	dc.w Map_a933_5DA-Map_a933
00025180 0000                       Map_a933_A0: 	dc.w Map_a933_5EA-Map_a933
00025182 0000                       Map_a933_A2: 	dc.w Map_a933_5F0-Map_a933
00025184 0000                       Map_a933_A4: 	dc.w Map_a933_5F6-Map_a933
00025186 0000                       Map_a933_A6: 	dc.w Map_a933_5FC-Map_a933
00025188 0000                       Map_a933_A8: 	dc.w Map_a933_611-Map_a933
0002518A 0000                       Map_a933_AA: 	dc.w Map_a933_621-Map_a933
0002518C 0000                       Map_a933_AC: 	dc.w Map_a933_631-Map_a933
0002518E 0000                       Map_a933_AE: 	dc.w Map_a933_641-Map_a933
00025190 0000                       Map_a933_B0: 	dc.w Map_a933_64C-Map_a933
00025192 0000                       Map_a933_B2: 	dc.w Map_a933_657-Map_a933
00025194 0000                       Map_a933_B4: 	dc.w Map_a933_667-Map_a933
00025196 0000                       Map_a933_B6: 	dc.w Map_a933_672-Map_a933
00025198 0000                       Map_a933_B8: 	dc.w Map_a933_687-Map_a933
0002519A 0000                       Map_a933_BA: 	dc.w Map_a933_688-Map_a933
0002519C 0000                       Map_a933_BC: 	dc.w Map_a933_689-Map_a933
0002519E 0000                       Map_a933_BE: 	dc.w Map_a933_68A-Map_a933
000251A0 0000                       Map_a933_C0: 	dc.w Map_a933_68B-Map_a933
000251A2 0000                       Map_a933_C2: 	dc.w Map_a933_696-Map_a933
000251A4 0000                       Map_a933_C4: 	dc.w Map_a933_697-Map_a933
000251A6 0000                       Map_a933_C6: 	dc.w Map_a933_6A2-Map_a933
000251A8 0000                       Map_a933_C8: 	dc.w Map_a933_6A3-Map_a933
000251AA 0000                       Map_a933_CA: 	dc.w Map_a933_6A4-Map_a933
000251AC 0000                       Map_a933_CC: 	dc.w Map_a933_6A5-Map_a933
000251AE 0000                       Map_a933_CE: 	dc.w Map_a933_6B0-Map_a933
000251B0 0000                       Map_a933_D0: 	dc.w Map_a933_6B1-Map_a933
000251B2 0000                       Map_a933_D2: 	dc.w Map_a933_6BC-Map_a933
000251B4 0000                       Map_a933_D4: 	dc.w Map_a933_6BD-Map_a933
000251B6 0000                       Map_a933_D6: 	dc.w Map_a933_6BE-Map_a933
000251B8 0000                       Map_a933_D8: 	dc.w Map_a933_6BF-Map_a933
000251BA 0000                       Map_a933_DA: 	dc.w Map_a933_6CA-Map_a933
000251BC 0000                       Map_a933_DC: 	dc.w Map_a933_6CB-Map_a933
000251BE 0000                       Map_a933_DE: 	dc.w Map_a933_6D6-Map_a933
000251C0 00                         Map_a933_E0: 	dc.b $0
000251C1 02                         Map_a933_E1: 	dc.b $2
000251C2 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
000251C7 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
000251CC 03                         Map_a933_EC: 	dc.b $3
000251CD EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000251D2 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000251D7 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000251DC 03                         Map_a933_FC: 	dc.b $3
000251DD EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000251E2 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000251E7 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000251EC 03                         Map_a933_10C: 	dc.b $3
000251ED EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000251F2 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000251F7 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000251FC 03                         Map_a933_11C: 	dc.b $3
000251FD EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00025202 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00025207 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002520C 04                         Map_a933_12C: 	dc.b $4
0002520D EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00025212 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00025217 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
0002521C 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00025221 02                         Map_a933_141: 	dc.b $2
00025222 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00025227 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
0002522C 02                         Map_a933_14C: 	dc.b $2
0002522D ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00025232 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00025237 04                         Map_a933_157: 	dc.b $4
00025238 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
0002523D FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00025242 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00025247 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
0002524C 02                         Map_a933_16C: 	dc.b $2
0002524D FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00025252 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00025257 03                         Map_a933_177: 	dc.b $3
00025258 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
0002525D FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00025262 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00025267 05                         Map_a933_187: 	dc.b $5
00025268 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
0002526D EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00025272 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00025277 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
0002527C 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00025281 06                         Map_a933_1A1: 	dc.b $6
00025282 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00025287 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
0002528C FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00025291 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00025296 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
0002529B F400 0016 14               	dc.b $F4, $0, $0, $16, $14
000252A0 04                         Map_a933_1C0: 	dc.b $4
000252A1 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000252A6 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000252AB FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
000252B0 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
000252B5 05                         Map_a933_1D5: 	dc.b $5
000252B6 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
000252BB EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
000252C0 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
000252C5 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
000252CA 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
000252CF 04                         Map_a933_1EF: 	dc.b $4
000252D0 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
000252D5 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
000252DA FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
000252DF 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
000252E4 05                         Map_a933_204: 	dc.b $5
000252E5 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000252EA ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000252EF FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
000252F4 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
000252F9 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
000252FE 04                         Map_a933_21E: 	dc.b $4
000252FF F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00025304 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00025309 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
0002530E 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00025313 02                         Map_a933_233: 	dc.b $2
00025314 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00025319 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
0002531E 02                         Map_a933_23E: 	dc.b $2
0002531F F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00025324 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00025329 04                         Map_a933_249: 	dc.b $4
0002532A F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
0002532F EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00025334 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00025339 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
0002533E 02                         Map_a933_25E: 	dc.b $2
0002533F F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00025344 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00025349 03                         Map_a933_269: 	dc.b $3
0002534A F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
0002534F EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00025354 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00025359 06                         Map_a933_279: 	dc.b $6
0002535A FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002535F ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00025364 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00025369 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
0002536E 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00025373 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00025378 06                         Map_a933_298: 	dc.b $6
00025379 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
0002537E E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00025383 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00025388 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
0002538D F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00025392 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00025397 04                         Map_a933_2B7: 	dc.b $4
00025398 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
0002539D F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
000253A2 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
000253A7 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000253AC 05                         Map_a933_2CC: 	dc.b $5
000253AD FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000253B2 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
000253B7 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
000253BC F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
000253C1 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
000253C6 04                         Map_a933_2E6: 	dc.b $4
000253C7 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000253CC F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
000253D1 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
000253D6 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000253DB 05                         Map_a933_2FB: 	dc.b $5
000253DC FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000253E1 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
000253E6 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
000253EB 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000253F0 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
000253F5 02                         Map_a933_315: 	dc.b $2
000253F6 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000253FB FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025400 02                         Map_a933_320: 	dc.b $2
00025401 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025406 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002540B 02                         Map_a933_32B: 	dc.b $2
0002540C EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025411 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025416 02                         Map_a933_336: 	dc.b $2
00025417 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002541C FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025421 04                         Map_a933_341: 	dc.b $4
00025422 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025427 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002542C FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025431 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025436 03                         Map_a933_356: 	dc.b $3
00025437 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002543C EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025441 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025446 04                         Map_a933_366: 	dc.b $4
00025447 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002544C EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025451 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025456 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
0002545B 03                         Map_a933_37B: 	dc.b $3
0002545C EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025461 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025466 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002546B 02                         Map_a933_38B: 	dc.b $2
0002546C F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025471 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025476 02                         Map_a933_396: 	dc.b $2
00025477 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002547C F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025481 02                         Map_a933_3A1: 	dc.b $2
00025482 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025487 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002548C 02                         Map_a933_3AC: 	dc.b $2
0002548D F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025492 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025497 04                         Map_a933_3B7: 	dc.b $4
00025498 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
0002549D F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000254A2 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000254A7 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000254AC 02                         Map_a933_3CC: 	dc.b $2
000254AD F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000254B2 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000254B7 04                         Map_a933_3D7: 	dc.b $4
000254B8 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000254BD F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000254C2 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000254C7 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000254CC 02                         Map_a933_3EC: 	dc.b $2
000254CD F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000254D2 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000254D7 01                         Map_a933_3F7: 	dc.b $1
000254D8 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000254DD 01                         Map_a933_3FD: 	dc.b $1
000254DE F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000254E3 01                         Map_a933_403: 	dc.b $1
000254E4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000254E9 01                         Map_a933_409: 	dc.b $1
000254EA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000254EF 01                         Map_a933_40F: 	dc.b $1
000254F0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000254F5 02                         Map_a933_415: 	dc.b $2
000254F6 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000254FB F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00025500 01                         Map_a933_420: 	dc.b $1
00025501 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025506 02                         Map_a933_426: 	dc.b $2
00025507 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
0002550C 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00025511 01                         Map_a933_431: 	dc.b $1
00025512 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025517 02                         Map_a933_437: 	dc.b $2
00025518 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
0002551D FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00025522 04                         Map_a933_442: 	dc.b $4
00025523 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00025528 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
0002552D 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00025532 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00025537 06                         Map_a933_457: 	dc.b $6
00025538 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
0002553D FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
00025542 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00025547 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
0002554C FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
00025551 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00025556 02                         Map_a933_476: 	dc.b $2
00025557 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
0002555C EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
00025561 02                         Map_a933_481: 	dc.b $2
00025562 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00025567 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
0002556C 04                         Map_a933_48C: 	dc.b $4
0002556D F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025572 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025577 0408 000C 03               	dc.b $4, $8, $0, $C, $3
0002557C 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025581 02                         Map_a933_4A1: 	dc.b $2
00025582 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00025587 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
0002558C 03                         Map_a933_4AC: 	dc.b $3
0002558D F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
00025592 FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00025597 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
0002559C 04                         Map_a933_4BC: 	dc.b $4
0002559D F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000255A2 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
000255A7 0408 000C 02               	dc.b $4, $8, $0, $C, $2
000255AC 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
000255B1 02                         Map_a933_4D1: 	dc.b $2
000255B2 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000255B7 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
000255BC 04                         Map_a933_4DC: 	dc.b $4
000255BD F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000255C2 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000255C7 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000255CC F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000255D1 04                         Map_a933_4F1: 	dc.b $4
000255D2 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000255D7 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000255DC F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000255E1 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000255E6 05                         Map_a933_506: 	dc.b $5
000255E7 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000255EC F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000255F1 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000255F6 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000255FB 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00025600 05                         Map_a933_520: 	dc.b $5
00025601 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025606 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
0002560B 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025610 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025615 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002561A 02                         Map_a933_53A: 	dc.b $2
0002561B ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00025620 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00025625 03                         Map_a933_545: 	dc.b $3
00025626 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
0002562B 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00025630 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00025635 02                         Map_a933_555: 	dc.b $2
00025636 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002563B 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00025640 03                         Map_a933_560: 	dc.b $3
00025641 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025646 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002564B 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00025650 02                         Map_a933_570: 	dc.b $2
00025651 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025656 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
0002565B 03                         Map_a933_57B: 	dc.b $3
0002565C EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00025661 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00025666 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
0002566B 03                         Map_a933_58B: 	dc.b $3
0002566C E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025671 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025676 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
0002567B 05                         Map_a933_59B: 	dc.b $5
0002567C E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025681 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025686 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002568B 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025690 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025695 05                         Map_a933_5B5: 	dc.b $5
00025696 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002569B E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000256A0 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000256A5 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000256AA 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000256AF 02                         Map_a933_5CF: 	dc.b $2
000256B0 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000256B5 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
000256BA 03                         Map_a933_5DA: 	dc.b $3
000256BB EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000256C0 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
000256C5 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
000256CA 01                         Map_a933_5EA: 	dc.b $1
000256CB F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
000256D0 01                         Map_a933_5F0: 	dc.b $1
000256D1 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
000256D6 01                         Map_a933_5F6: 	dc.b $1
000256D7 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000256DC 04                         Map_a933_5FC: 	dc.b $4
000256DD F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000256E2 F705 0808 04               	dc.b $F7, $5, $8, $8, $4
000256E7 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
000256EC 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
000256F1 03                         Map_a933_611: 	dc.b $3
000256F2 F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
000256F7 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
000256FC 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00025701 03                         Map_a933_621: 	dc.b $3
00025702 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00025707 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0002570C 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00025711 03                         Map_a933_631: 	dc.b $3
00025712 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025717 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
0002571C 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00025721 02                         Map_a933_641: 	dc.b $2
00025722 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00025727 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
0002572C 02                         Map_a933_64C: 	dc.b $2
0002572D F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025732 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025737 03                         Map_a933_657: 	dc.b $3
00025738 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
0002573D 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
00025742 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00025747 02                         Map_a933_667: 	dc.b $2
00025748 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
0002574D EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
00025752 04                         Map_a933_672: 	dc.b $4
00025753 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00025758 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
0002575D F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
00025762 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00025767 00                         Map_a933_687: 	dc.b $0
00025768 00                         Map_a933_688: 	dc.b $0
00025769 00                         Map_a933_689: 	dc.b $0
0002576A 00                         Map_a933_68A: 	dc.b $0
0002576B 02                         Map_a933_68B: 	dc.b $2
0002576C F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025771 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025776 00                         Map_a933_696: 	dc.b $0
00025777 02                         Map_a933_697: 	dc.b $2
00025778 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002577D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025782 00                         Map_a933_6A2: 	dc.b $0
00025783 00                         Map_a933_6A3: 	dc.b $0
00025784 00                         Map_a933_6A4: 	dc.b $0
00025785 02                         Map_a933_6A5: 	dc.b $2
00025786 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002578B EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025790 00                         Map_a933_6B0: 	dc.b $0
00025791 02                         Map_a933_6B1: 	dc.b $2
00025792 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025797 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002579C 00                         Map_a933_6BC: 	dc.b $0
0002579D 00                         Map_a933_6BD: 	dc.b $0
0002579E 00                         Map_a933_6BE: 	dc.b $0
0002579F 02                         Map_a933_6BF: 	dc.b $2
000257A0 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000257A5 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000257AA 00                         Map_a933_6CA: 	dc.b $0
000257AB 02                         Map_a933_6CB: 	dc.b $2
000257AC F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000257B1 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000257B6 00                         Map_a933_6D6: 	dc.b $0
000257B8 00                         	even
000257B8 00                         	even
000257B8                            
000257B8                            ; ---------------------------------------------------------------------------
000257B8                            ; Uncompressed graphics	loading	array for Sonic
000257B8                            ; ---------------------------------------------------------------------------
000257B8                            SonicDynPLC:
000257B8                            	include "_inc\Sonic dynamic pattern load cues.asm"
000257B8                            DPLC_33c5:
000257B8 0000                       DPLC_33c5_0: 	dc.w DPLC_33c5_E0-DPLC_33c5
000257BA 0000                       DPLC_33c5_2: 	dc.w DPLC_33c5_E1-DPLC_33c5
000257BC 0000                       DPLC_33c5_4: 	dc.w DPLC_33c5_E6-DPLC_33c5
000257BE 0000                       DPLC_33c5_6: 	dc.w DPLC_33c5_ED-DPLC_33c5
000257C0 0000                       DPLC_33c5_8: 	dc.w DPLC_33c5_F4-DPLC_33c5
000257C2 0000                       DPLC_33c5_A: 	dc.w DPLC_33c5_FB-DPLC_33c5
000257C4 0000                       DPLC_33c5_C: 	dc.w DPLC_33c5_102-DPLC_33c5
000257C6 0000                       DPLC_33c5_E: 	dc.w DPLC_33c5_10B-DPLC_33c5
000257C8 0000                       DPLC_33c5_10: 	dc.w DPLC_33c5_110-DPLC_33c5
000257CA 0000                       DPLC_33c5_12: 	dc.w DPLC_33c5_115-DPLC_33c5
000257CC 0000                       DPLC_33c5_14: 	dc.w DPLC_33c5_11E-DPLC_33c5
000257CE 0000                       DPLC_33c5_16: 	dc.w DPLC_33c5_123-DPLC_33c5
000257D0 0000                       DPLC_33c5_18: 	dc.w DPLC_33c5_12A-DPLC_33c5
000257D2 0000                       DPLC_33c5_1A: 	dc.w DPLC_33c5_135-DPLC_33c5
000257D4 0000                       DPLC_33c5_1C: 	dc.w DPLC_33c5_142-DPLC_33c5
000257D6 0000                       DPLC_33c5_1E: 	dc.w DPLC_33c5_14B-DPLC_33c5
000257D8 0000                       DPLC_33c5_20: 	dc.w DPLC_33c5_156-DPLC_33c5
000257DA 0000                       DPLC_33c5_22: 	dc.w DPLC_33c5_15F-DPLC_33c5
000257DC 0000                       DPLC_33c5_24: 	dc.w DPLC_33c5_16A-DPLC_33c5
000257DE 0000                       DPLC_33c5_26: 	dc.w DPLC_33c5_173-DPLC_33c5
000257E0 0000                       DPLC_33c5_28: 	dc.w DPLC_33c5_178-DPLC_33c5
000257E2 0000                       DPLC_33c5_2A: 	dc.w DPLC_33c5_17D-DPLC_33c5
000257E4 0000                       DPLC_33c5_2C: 	dc.w DPLC_33c5_186-DPLC_33c5
000257E6 0000                       DPLC_33c5_2E: 	dc.w DPLC_33c5_18B-DPLC_33c5
000257E8 0000                       DPLC_33c5_30: 	dc.w DPLC_33c5_192-DPLC_33c5
000257EA 0000                       DPLC_33c5_32: 	dc.w DPLC_33c5_19F-DPLC_33c5
000257EC 0000                       DPLC_33c5_34: 	dc.w DPLC_33c5_1AC-DPLC_33c5
000257EE 0000                       DPLC_33c5_36: 	dc.w DPLC_33c5_1B5-DPLC_33c5
000257F0 0000                       DPLC_33c5_38: 	dc.w DPLC_33c5_1C0-DPLC_33c5
000257F2 0000                       DPLC_33c5_3A: 	dc.w DPLC_33c5_1C9-DPLC_33c5
000257F4 0000                       DPLC_33c5_3C: 	dc.w DPLC_33c5_1D4-DPLC_33c5
000257F6 0000                       DPLC_33c5_3E: 	dc.w DPLC_33c5_1D9-DPLC_33c5
000257F8 0000                       DPLC_33c5_40: 	dc.w DPLC_33c5_1DE-DPLC_33c5
000257FA 0000                       DPLC_33c5_42: 	dc.w DPLC_33c5_1E3-DPLC_33c5
000257FC 0000                       DPLC_33c5_44: 	dc.w DPLC_33c5_1E8-DPLC_33c5
000257FE 0000                       DPLC_33c5_46: 	dc.w DPLC_33c5_1F1-DPLC_33c5
00025800 0000                       DPLC_33c5_48: 	dc.w DPLC_33c5_1F8-DPLC_33c5
00025802 0000                       DPLC_33c5_4A: 	dc.w DPLC_33c5_201-DPLC_33c5
00025804 0000                       DPLC_33c5_4C: 	dc.w DPLC_33c5_208-DPLC_33c5
00025806 0000                       DPLC_33c5_4E: 	dc.w DPLC_33c5_20D-DPLC_33c5
00025808 0000                       DPLC_33c5_50: 	dc.w DPLC_33c5_212-DPLC_33c5
0002580A 0000                       DPLC_33c5_52: 	dc.w DPLC_33c5_217-DPLC_33c5
0002580C 0000                       DPLC_33c5_54: 	dc.w DPLC_33c5_21C-DPLC_33c5
0002580E 0000                       DPLC_33c5_56: 	dc.w DPLC_33c5_225-DPLC_33c5
00025810 0000                       DPLC_33c5_58: 	dc.w DPLC_33c5_22A-DPLC_33c5
00025812 0000                       DPLC_33c5_5A: 	dc.w DPLC_33c5_233-DPLC_33c5
00025814 0000                       DPLC_33c5_5C: 	dc.w DPLC_33c5_238-DPLC_33c5
00025816 0000                       DPLC_33c5_5E: 	dc.w DPLC_33c5_23B-DPLC_33c5
00025818 0000                       DPLC_33c5_60: 	dc.w DPLC_33c5_23E-DPLC_33c5
0002581A 0000                       DPLC_33c5_62: 	dc.w DPLC_33c5_241-DPLC_33c5
0002581C 0000                       DPLC_33c5_64: 	dc.w DPLC_33c5_244-DPLC_33c5
0002581E 0000                       DPLC_33c5_66: 	dc.w DPLC_33c5_247-DPLC_33c5
00025820 0000                       DPLC_33c5_68: 	dc.w DPLC_33c5_24C-DPLC_33c5
00025822 0000                       DPLC_33c5_6A: 	dc.w DPLC_33c5_24F-DPLC_33c5
00025824 0000                       DPLC_33c5_6C: 	dc.w DPLC_33c5_254-DPLC_33c5
00025826 0000                       DPLC_33c5_6E: 	dc.w DPLC_33c5_257-DPLC_33c5
00025828 0000                       DPLC_33c5_70: 	dc.w DPLC_33c5_25C-DPLC_33c5
0002582A 0000                       DPLC_33c5_72: 	dc.w DPLC_33c5_265-DPLC_33c5
0002582C 0000                       DPLC_33c5_74: 	dc.w DPLC_33c5_26A-DPLC_33c5
0002582E 0000                       DPLC_33c5_76: 	dc.w DPLC_33c5_26F-DPLC_33c5
00025830 0000                       DPLC_33c5_78: 	dc.w DPLC_33c5_274-DPLC_33c5
00025832 0000                       DPLC_33c5_7A: 	dc.w DPLC_33c5_279-DPLC_33c5
00025834 0000                       DPLC_33c5_7C: 	dc.w DPLC_33c5_27C-DPLC_33c5
00025836 0000                       DPLC_33c5_7E: 	dc.w DPLC_33c5_283-DPLC_33c5
00025838 0000                       DPLC_33c5_80: 	dc.w DPLC_33c5_288-DPLC_33c5
0002583A 0000                       DPLC_33c5_82: 	dc.w DPLC_33c5_28B-DPLC_33c5
0002583C 0000                       DPLC_33c5_84: 	dc.w DPLC_33c5_294-DPLC_33c5
0002583E 0000                       DPLC_33c5_86: 	dc.w DPLC_33c5_29D-DPLC_33c5
00025840 0000                       DPLC_33c5_88: 	dc.w DPLC_33c5_2A8-DPLC_33c5
00025842 0000                       DPLC_33c5_8A: 	dc.w DPLC_33c5_2B3-DPLC_33c5
00025844 0000                       DPLC_33c5_8C: 	dc.w DPLC_33c5_2B8-DPLC_33c5
00025846 0000                       DPLC_33c5_8E: 	dc.w DPLC_33c5_2BF-DPLC_33c5
00025848 0000                       DPLC_33c5_90: 	dc.w DPLC_33c5_2C4-DPLC_33c5
0002584A 0000                       DPLC_33c5_92: 	dc.w DPLC_33c5_2CB-DPLC_33c5
0002584C 0000                       DPLC_33c5_94: 	dc.w DPLC_33c5_2D0-DPLC_33c5
0002584E 0000                       DPLC_33c5_96: 	dc.w DPLC_33c5_2D7-DPLC_33c5
00025850 0000                       DPLC_33c5_98: 	dc.w DPLC_33c5_2DE-DPLC_33c5
00025852 0000                       DPLC_33c5_9A: 	dc.w DPLC_33c5_2E9-DPLC_33c5
00025854 0000                       DPLC_33c5_9C: 	dc.w DPLC_33c5_2F4-DPLC_33c5
00025856 0000                       DPLC_33c5_9E: 	dc.w DPLC_33c5_2F9-DPLC_33c5
00025858 0000                       DPLC_33c5_A0: 	dc.w DPLC_33c5_300-DPLC_33c5
0002585A 0000                       DPLC_33c5_A2: 	dc.w DPLC_33c5_303-DPLC_33c5
0002585C 0000                       DPLC_33c5_A4: 	dc.w DPLC_33c5_306-DPLC_33c5
0002585E 0000                       DPLC_33c5_A6: 	dc.w DPLC_33c5_309-DPLC_33c5
00025860 0000                       DPLC_33c5_A8: 	dc.w DPLC_33c5_30E-DPLC_33c5
00025862 0000                       DPLC_33c5_AA: 	dc.w DPLC_33c5_315-DPLC_33c5
00025864 0000                       DPLC_33c5_AC: 	dc.w DPLC_33c5_31C-DPLC_33c5
00025866 0000                       DPLC_33c5_AE: 	dc.w DPLC_33c5_323-DPLC_33c5
00025868 0000                       DPLC_33c5_B0: 	dc.w DPLC_33c5_328-DPLC_33c5
0002586A 0000                       DPLC_33c5_B2: 	dc.w DPLC_33c5_32D-DPLC_33c5
0002586C 0000                       DPLC_33c5_B4: 	dc.w DPLC_33c5_332-DPLC_33c5
0002586E 0000                       DPLC_33c5_B6: 	dc.w DPLC_33c5_337-DPLC_33c5
00025870 0000                       DPLC_33c5_B8: 	dc.w DPLC_33c5_33C-DPLC_33c5
00025872 0000                       DPLC_33c5_BA: 	dc.w DPLC_33c5_33D-DPLC_33c5
00025874 0000                       DPLC_33c5_BC: 	dc.w DPLC_33c5_33E-DPLC_33c5
00025876 0000                       DPLC_33c5_BE: 	dc.w DPLC_33c5_33F-DPLC_33c5
00025878 0000                       DPLC_33c5_C0: 	dc.w DPLC_33c5_340-DPLC_33c5
0002587A 0000                       DPLC_33c5_C2: 	dc.w DPLC_33c5_345-DPLC_33c5
0002587C 0000                       DPLC_33c5_C4: 	dc.w DPLC_33c5_346-DPLC_33c5
0002587E 0000                       DPLC_33c5_C6: 	dc.w DPLC_33c5_34B-DPLC_33c5
00025880 0000                       DPLC_33c5_C8: 	dc.w DPLC_33c5_34C-DPLC_33c5
00025882 0000                       DPLC_33c5_CA: 	dc.w DPLC_33c5_34D-DPLC_33c5
00025884 0000                       DPLC_33c5_CC: 	dc.w DPLC_33c5_34E-DPLC_33c5
00025886 0000                       DPLC_33c5_CE: 	dc.w DPLC_33c5_353-DPLC_33c5
00025888 0000                       DPLC_33c5_D0: 	dc.w DPLC_33c5_354-DPLC_33c5
0002588A 0000                       DPLC_33c5_D2: 	dc.w DPLC_33c5_359-DPLC_33c5
0002588C 0000                       DPLC_33c5_D4: 	dc.w DPLC_33c5_35A-DPLC_33c5
0002588E 0000                       DPLC_33c5_D6: 	dc.w DPLC_33c5_35B-DPLC_33c5
00025890 0000                       DPLC_33c5_D8: 	dc.w DPLC_33c5_35C-DPLC_33c5
00025892 0000                       DPLC_33c5_DA: 	dc.w DPLC_33c5_361-DPLC_33c5
00025894 0000                       DPLC_33c5_DC: 	dc.w DPLC_33c5_362-DPLC_33c5
00025896 0000                       DPLC_33c5_DE: 	dc.w DPLC_33c5_367-DPLC_33c5
00025898 00                         DPLC_33c5_E0: 	dc.b $0
00025899 02                         DPLC_33c5_E1: 	dc.b $2
0002589A F000                       	dc.b $F0, $0
0002589C 1010                       	dc.b $10, $10
0002589E 03                         DPLC_33c5_E6: 	dc.b $3
0002589F 5012                       	dc.b $50, $12
000258A1 5018                       	dc.b $50, $18
000258A3 201E                       	dc.b $20, $1E
000258A5 03                         DPLC_33c5_ED: 	dc.b $3
000258A6 5021                       	dc.b $50, $21
000258A8 5018                       	dc.b $50, $18
000258AA 201E                       	dc.b $20, $1E
000258AC 03                         DPLC_33c5_F4: 	dc.b $3
000258AD 5021                       	dc.b $50, $21
000258AF 5018                       	dc.b $50, $18
000258B1 2027                       	dc.b $20, $27
000258B3 03                         DPLC_33c5_FB: 	dc.b $3
000258B4 802A                       	dc.b $80, $2A
000258B6 2033                       	dc.b $20, $33
000258B8 2036                       	dc.b $20, $36
000258BA 04                         DPLC_33c5_102: 	dc.b $4
000258BB 7039                       	dc.b $70, $39
000258BD 5041                       	dc.b $50, $41
000258BF 5047                       	dc.b $50, $47
000258C1 104D                       	dc.b $10, $4D
000258C3 02                         DPLC_33c5_10B: 	dc.b $2
000258C4 7039                       	dc.b $70, $39
000258C6 B04F                       	dc.b $B0, $4F
000258C8 02                         DPLC_33c5_110: 	dc.b $2
000258C9 505B                       	dc.b $50, $5B
000258CB 8061                       	dc.b $80, $61
000258CD 04                         DPLC_33c5_115: 	dc.b $4
000258CE 505B                       	dc.b $50, $5B
000258D0 506A                       	dc.b $50, $6A
000258D2 5070                       	dc.b $50, $70
000258D4 1076                       	dc.b $10, $76
000258D6 02                         DPLC_33c5_11E: 	dc.b $2
000258D7 F4F0                       	dc.b $F4, $F0
000258D9 1500                       	dc.b $15, $0
000258DB 03                         DPLC_33c5_123: 	dc.b $3
000258DC 7039                       	dc.b $70, $39
000258DE 3078                       	dc.b $30, $78
000258E0 507C                       	dc.b $50, $7C
000258E2 05                         DPLC_33c5_12A: 	dc.b $5
000258E3 5082                       	dc.b $50, $82
000258E5 5088                       	dc.b $50, $88
000258E7 208E                       	dc.b $20, $8E
000258E9 5091                       	dc.b $50, $91
000258EB 0097                       	dc.b $0, $97
000258ED 06                         DPLC_33c5_135: 	dc.b $6
000258EE 5082                       	dc.b $50, $82
000258F0 1098                       	dc.b $10, $98
000258F2 309A                       	dc.b $30, $9A
000258F4 509E                       	dc.b $50, $9E
000258F6 30A4                       	dc.b $30, $A4
000258F8 00A8                       	dc.b $0, $A8
000258FA 04                         DPLC_33c5_142: 	dc.b $4
000258FB 50A9                       	dc.b $50, $A9
000258FD 10AF                       	dc.b $10, $AF
000258FF 70B1                       	dc.b $70, $B1
00025901 20B9                       	dc.b $20, $B9
00025903 05                         DPLC_33c5_14B: 	dc.b $5
00025904 50BC                       	dc.b $50, $BC
00025906 30C2                       	dc.b $30, $C2
00025908 70C6                       	dc.b $70, $C6
0002590A 20CE                       	dc.b $20, $CE
0002590C 10D1                       	dc.b $10, $D1
0002590E 04                         DPLC_33c5_156: 	dc.b $4
0002590F 50BC                       	dc.b $50, $BC
00025911 10D3                       	dc.b $10, $D3
00025913 70D5                       	dc.b $70, $D5
00025915 20DD                       	dc.b $20, $DD
00025917 05                         DPLC_33c5_15F: 	dc.b $5
00025918 5082                       	dc.b $50, $82
0002591A 1098                       	dc.b $10, $98
0002591C 008E                       	dc.b $0, $8E
0002591E 70E0                       	dc.b $70, $E0
00025920 20E8                       	dc.b $20, $E8
00025922 04                         DPLC_33c5_16A: 	dc.b $4
00025923 70EB                       	dc.b $70, $EB
00025925 50F3                       	dc.b $50, $F3
00025927 10F9                       	dc.b $10, $F9
00025929 50FB                       	dc.b $50, $FB
0002592B 02                         DPLC_33c5_173: 	dc.b $2
0002592C 70EB                       	dc.b $70, $EB
0002592E B101                       	dc.b $B1, $1
00025930 02                         DPLC_33c5_178: 	dc.b $2
00025931 510D                       	dc.b $51, $D
00025933 8113                       	dc.b $81, $13
00025935 04                         DPLC_33c5_17D: 	dc.b $4
00025936 510D                       	dc.b $51, $D
00025938 511C                       	dc.b $51, $1C
0002593A 1122                       	dc.b $11, $22
0002593C 5124                       	dc.b $51, $24
0002593E 02                         DPLC_33c5_186: 	dc.b $2
0002593F 510D                       	dc.b $51, $D
00025941 B12A                       	dc.b $B1, $2A
00025943 03                         DPLC_33c5_18B: 	dc.b $3
00025944 70EB                       	dc.b $70, $EB
00025946 0101                       	dc.b $1, $1
00025948 8136                       	dc.b $81, $36
0002594A 06                         DPLC_33c5_192: 	dc.b $6
0002594B 513F                       	dc.b $51, $3F
0002594D 1145                       	dc.b $11, $45
0002594F 1147                       	dc.b $11, $47
00025951 8149                       	dc.b $81, $49
00025953 0152                       	dc.b $1, $52
00025955 0153                       	dc.b $1, $53
00025957 06                         DPLC_33c5_19F: 	dc.b $6
00025958 513F                       	dc.b $51, $3F
0002595A 2154                       	dc.b $21, $54
0002595C 1157                       	dc.b $11, $57
0002595E 1159                       	dc.b $11, $59
00025960 815B                       	dc.b $81, $5B
00025962 0152                       	dc.b $1, $52
00025964 04                         DPLC_33c5_1AC: 	dc.b $4
00025965 5164                       	dc.b $51, $64
00025967 116A                       	dc.b $11, $6A
00025969 816C                       	dc.b $81, $6C
0002596B 1175                       	dc.b $11, $75
0002596D 05                         DPLC_33c5_1B5: 	dc.b $5
0002596E 5177                       	dc.b $51, $77
00025970 217D                       	dc.b $21, $7D
00025972 1180                       	dc.b $11, $80
00025974 7182                       	dc.b $71, $82
00025976 218A                       	dc.b $21, $8A
00025978 04                         DPLC_33c5_1C0: 	dc.b $4
00025979 5177                       	dc.b $51, $77
0002597B 118D                       	dc.b $11, $8D
0002597D 818F                       	dc.b $81, $8F
0002597F 1198                       	dc.b $11, $98
00025981 05                         DPLC_33c5_1C9: 	dc.b $5
00025982 513F                       	dc.b $51, $3F
00025984 819A                       	dc.b $81, $9A
00025986 1159                       	dc.b $11, $59
00025988 11A3                       	dc.b $11, $A3
0002598A 0152                       	dc.b $1, $52
0002598C 02                         DPLC_33c5_1D4: 	dc.b $2
0002598D 51A5                       	dc.b $51, $A5
0002598F B1AB                       	dc.b $B1, $AB
00025991 02                         DPLC_33c5_1D9: 	dc.b $2
00025992 505B                       	dc.b $50, $5B
00025994 B1B7                       	dc.b $B1, $B7
00025996 02                         DPLC_33c5_1DE: 	dc.b $2
00025997 51A5                       	dc.b $51, $A5
00025999 B1C3                       	dc.b $B1, $C3
0002599B 02                         DPLC_33c5_1E3: 	dc.b $2
0002599C 505B                       	dc.b $50, $5B
0002599E B1CF                       	dc.b $B1, $CF
000259A0 04                         DPLC_33c5_1E8: 	dc.b $4
000259A1 51DB                       	dc.b $51, $DB
000259A3 11E1                       	dc.b $11, $E1
000259A5 B1E3                       	dc.b $B1, $E3
000259A7 01EF                       	dc.b $1, $EF
000259A9 03                         DPLC_33c5_1F1: 	dc.b $3
000259AA 51F0                       	dc.b $51, $F0
000259AC 11F6                       	dc.b $11, $F6
000259AE B1F8                       	dc.b $B1, $F8
000259B0 04                         DPLC_33c5_1F8: 	dc.b $4
000259B1 51DB                       	dc.b $51, $DB
000259B3 1204                       	dc.b $12, $4
000259B5 B206                       	dc.b $B2, $6
000259B7 01EF                       	dc.b $1, $EF
000259B9 03                         DPLC_33c5_201: 	dc.b $3
000259BA 51F0                       	dc.b $51, $F0
000259BC 11F6                       	dc.b $11, $F6
000259BE B212                       	dc.b $B2, $12
000259C0 02                         DPLC_33c5_208: 	dc.b $2
000259C1 521E                       	dc.b $52, $1E
000259C3 B224                       	dc.b $B2, $24
000259C5 02                         DPLC_33c5_20D: 	dc.b $2
000259C6 510D                       	dc.b $51, $D
000259C8 B230                       	dc.b $B2, $30
000259CA 02                         DPLC_33c5_212: 	dc.b $2
000259CB 521E                       	dc.b $52, $1E
000259CD B23C                       	dc.b $B2, $3C
000259CF 02                         DPLC_33c5_217: 	dc.b $2
000259D0 510D                       	dc.b $51, $D
000259D2 B248                       	dc.b $B2, $48
000259D4 04                         DPLC_33c5_21C: 	dc.b $4
000259D5 5254                       	dc.b $52, $54
000259D7 125A                       	dc.b $12, $5A
000259D9 B25C                       	dc.b $B2, $5C
000259DB 0268                       	dc.b $2, $68
000259DD 02                         DPLC_33c5_225: 	dc.b $2
000259DE 7269                       	dc.b $72, $69
000259E0 B271                       	dc.b $B2, $71
000259E2 04                         DPLC_33c5_22A: 	dc.b $4
000259E3 5254                       	dc.b $52, $54
000259E5 127D                       	dc.b $12, $7D
000259E7 B27F                       	dc.b $B2, $7F
000259E9 0268                       	dc.b $2, $68
000259EB 02                         DPLC_33c5_233: 	dc.b $2
000259EC 7269                       	dc.b $72, $69
000259EE B28B                       	dc.b $B2, $8B
000259F0 01                         DPLC_33c5_238: 	dc.b $1
000259F1 F297                       	dc.b $F2, $97
000259F3 01                         DPLC_33c5_23B: 	dc.b $1
000259F4 F2A7                       	dc.b $F2, $A7
000259F6 01                         DPLC_33c5_23E: 	dc.b $1
000259F7 F2B7                       	dc.b $F2, $B7
000259F9 01                         DPLC_33c5_241: 	dc.b $1
000259FA F2C7                       	dc.b $F2, $C7
000259FC 01                         DPLC_33c5_244: 	dc.b $1
000259FD F2D7                       	dc.b $F2, $D7
000259FF 02                         DPLC_33c5_247: 	dc.b $2
00025A00 B2E7                       	dc.b $B2, $E7
00025A02 22F3                       	dc.b $22, $F3
00025A04 01                         DPLC_33c5_24C: 	dc.b $1
00025A05 F2F6                       	dc.b $F2, $F6
00025A07 02                         DPLC_33c5_24F: 	dc.b $2
00025A08 B306                       	dc.b $B3, $6
00025A0A 2312                       	dc.b $23, $12
00025A0C 01                         DPLC_33c5_254: 	dc.b $1
00025A0D F315                       	dc.b $F3, $15
00025A0F 02                         DPLC_33c5_257: 	dc.b $2
00025A10 5325                       	dc.b $53, $25
00025A12 B32B                       	dc.b $B3, $2B
00025A14 04                         DPLC_33c5_25C: 	dc.b $4
00025A15 5337                       	dc.b $53, $37
00025A17 733D                       	dc.b $73, $3D
00025A19 1345                       	dc.b $13, $45
00025A1B 0347                       	dc.b $3, $47
00025A1D 02                         DPLC_33c5_265: 	dc.b $2
00025A1E D348                       	dc.b $D3, $48
00025A20 34EC                       	dc.b $34, $EC
00025A22 02                         DPLC_33c5_26A: 	dc.b $2
00025A23 F528                       	dc.b $F5, $28
00025A25 0538                       	dc.b $5, $38
00025A27 02                         DPLC_33c5_26F: 	dc.b $2
00025A28 F539                       	dc.b $F5, $39
00025A2A 0549                       	dc.b $5, $49
00025A2C 02                         DPLC_33c5_274: 	dc.b $2
00025A2D E356                       	dc.b $E3, $56
00025A2F 054A                       	dc.b $5, $4A
00025A31 01                         DPLC_33c5_279: 	dc.b $1
00025A32 8365                       	dc.b $83, $65
00025A34 03                         DPLC_33c5_27C: 	dc.b $3
00025A35 736E                       	dc.b $73, $6E
00025A37 0376                       	dc.b $3, $76
00025A39 3377                       	dc.b $33, $77
00025A3B 02                         DPLC_33c5_283: 	dc.b $2
00025A3C E37B                       	dc.b $E3, $7B
00025A3E 054A                       	dc.b $5, $4A
00025A40 01                         DPLC_33c5_288: 	dc.b $1
00025A41 D561                       	dc.b $D5, $61
00025A43 04                         DPLC_33c5_28B: 	dc.b $4
00025A44 B399                       	dc.b $B3, $99
00025A46 33A5                       	dc.b $33, $A5
00025A48 03A9                       	dc.b $3, $A9
00025A4A 03AA                       	dc.b $3, $AA
00025A4C 04                         DPLC_33c5_294: 	dc.b $4
00025A4D B3AB                       	dc.b $B3, $AB
00025A4F 33B7                       	dc.b $33, $B7
00025A51 03BB                       	dc.b $3, $BB
00025A53 03BC                       	dc.b $3, $BC
00025A55 05                         DPLC_33c5_29D: 	dc.b $5
00025A56 83BD                       	dc.b $83, $BD
00025A58 13C6                       	dc.b $13, $C6
00025A5A 53C8                       	dc.b $53, $C8
00025A5C 13CE                       	dc.b $13, $CE
00025A5E 03D0                       	dc.b $3, $D0
00025A60 05                         DPLC_33c5_2A8: 	dc.b $5
00025A61 83D1                       	dc.b $83, $D1
00025A63 13DA                       	dc.b $13, $DA
00025A65 53C8                       	dc.b $53, $C8
00025A67 13CE                       	dc.b $13, $CE
00025A69 03D0                       	dc.b $3, $D0
00025A6B 02                         DPLC_33c5_2B3: 	dc.b $2
00025A6C 83DC                       	dc.b $83, $DC
00025A6E 73E5                       	dc.b $73, $E5
00025A70 03                         DPLC_33c5_2B8: 	dc.b $3
00025A71 83ED                       	dc.b $83, $ED
00025A73 23F6                       	dc.b $23, $F6
00025A75 13F9                       	dc.b $13, $F9
00025A77 02                         DPLC_33c5_2BF: 	dc.b $2
00025A78 83FB                       	dc.b $83, $FB
00025A7A 7404                       	dc.b $74, $4
00025A7C 03                         DPLC_33c5_2C4: 	dc.b $3
00025A7D 83ED                       	dc.b $83, $ED
00025A7F 240C                       	dc.b $24, $C
00025A81 140F                       	dc.b $14, $F
00025A83 02                         DPLC_33c5_2CB: 	dc.b $2
00025A84 5411                       	dc.b $54, $11
00025A86 B417                       	dc.b $B4, $17
00025A88 03                         DPLC_33c5_2D0: 	dc.b $3
00025A89 8423                       	dc.b $84, $23
00025A8B 342C                       	dc.b $34, $2C
00025A8D 0430                       	dc.b $4, $30
00025A8F 03                         DPLC_33c5_2D7: 	dc.b $3
00025A90 7431                       	dc.b $74, $31
00025A92 1439                       	dc.b $14, $39
00025A94 B43B                       	dc.b $B4, $3B
00025A96 05                         DPLC_33c5_2DE: 	dc.b $5
00025A97 7447                       	dc.b $74, $47
00025A99 144F                       	dc.b $14, $4F
00025A9B 5451                       	dc.b $54, $51
00025A9D 3457                       	dc.b $34, $57
00025A9F 045B                       	dc.b $4, $5B
00025AA1 05                         DPLC_33c5_2E9: 	dc.b $5
00025AA2 745C                       	dc.b $74, $5C
00025AA4 144F                       	dc.b $14, $4F
00025AA6 5464                       	dc.b $54, $64
00025AA8 3457                       	dc.b $34, $57
00025AAA 045B                       	dc.b $4, $5B
00025AAC 02                         DPLC_33c5_2F4: 	dc.b $2
00025AAD 246A                       	dc.b $24, $6A
00025AAF F46D                       	dc.b $F4, $6D
00025AB1 03                         DPLC_33c5_2F9: 	dc.b $3
00025AB2 247D                       	dc.b $24, $7D
00025AB4 B480                       	dc.b $B4, $80
00025AB6 248C                       	dc.b $24, $8C
00025AB8 01                         DPLC_33c5_300: 	dc.b $1
00025AB9 B48F                       	dc.b $B4, $8F
00025ABB 01                         DPLC_33c5_303: 	dc.b $1
00025ABC 549B                       	dc.b $54, $9B
00025ABE 01                         DPLC_33c5_306: 	dc.b $1
00025ABF 14A1                       	dc.b $14, $A1
00025AC1 02                         DPLC_33c5_309: 	dc.b $2
00025AC2 E356                       	dc.b $E3, $56
00025AC4 054A                       	dc.b $5, $4A
00025AC6 03                         DPLC_33c5_30E: 	dc.b $3
00025AC7 736E                       	dc.b $73, $6E
00025AC9 0376                       	dc.b $3, $76
00025ACB 3377                       	dc.b $33, $77
00025ACD 03                         DPLC_33c5_315: 	dc.b $3
00025ACE B4A3                       	dc.b $B4, $A3
00025AD0 14AF                       	dc.b $14, $AF
00025AD2 34B1                       	dc.b $34, $B1
00025AD4 03                         DPLC_33c5_31C: 	dc.b $3
00025AD5 54B5                       	dc.b $54, $B5
00025AD7 B4BB                       	dc.b $B4, $BB
00025AD9 1074                       	dc.b $10, $74
00025ADB 02                         DPLC_33c5_323: 	dc.b $2
00025ADC F4C7                       	dc.b $F4, $C7
00025ADE 24D7                       	dc.b $24, $D7
00025AE0 02                         DPLC_33c5_328: 	dc.b $2
00025AE1 F4DA                       	dc.b $F4, $DA
00025AE3 14EA                       	dc.b $14, $EA
00025AE5 02                         DPLC_33c5_32D: 	dc.b $2
00025AE6 F502                       	dc.b $F5, $2
00025AE8 2512                       	dc.b $25, $12
00025AEA 02                         DPLC_33c5_332: 	dc.b $2
00025AEB F515                       	dc.b $F5, $15
00025AED 2525                       	dc.b $25, $25
00025AEF 02                         DPLC_33c5_337: 	dc.b $2
00025AF0 F54B                       	dc.b $F5, $4B
00025AF2 755B                       	dc.b $75, $5B
00025AF4 00                         DPLC_33c5_33C: 	dc.b $0
00025AF5 00                         DPLC_33c5_33D: 	dc.b $0
00025AF6 00                         DPLC_33c5_33E: 	dc.b $0
00025AF7 00                         DPLC_33c5_33F: 	dc.b $0
00025AF8 02                         DPLC_33c5_340: 	dc.b $2
00025AF9 F4DA                       	dc.b $F4, $DA
00025AFB 14EA                       	dc.b $14, $EA
00025AFD 00                         DPLC_33c5_345: 	dc.b $0
00025AFE 02                         DPLC_33c5_346: 	dc.b $2
00025AFF F4DA                       	dc.b $F4, $DA
00025B01 14EA                       	dc.b $14, $EA
00025B03 00                         DPLC_33c5_34B: 	dc.b $0
00025B04 00                         DPLC_33c5_34C: 	dc.b $0
00025B05 00                         DPLC_33c5_34D: 	dc.b $0
00025B06 02                         DPLC_33c5_34E: 	dc.b $2
00025B07 F4DA                       	dc.b $F4, $DA
00025B09 14EA                       	dc.b $14, $EA
00025B0B 00                         DPLC_33c5_353: 	dc.b $0
00025B0C 02                         DPLC_33c5_354: 	dc.b $2
00025B0D F4DA                       	dc.b $F4, $DA
00025B0F 14EA                       	dc.b $14, $EA
00025B11 00                         DPLC_33c5_359: 	dc.b $0
00025B12 00                         DPLC_33c5_35A: 	dc.b $0
00025B13 00                         DPLC_33c5_35B: 	dc.b $0
00025B14 02                         DPLC_33c5_35C: 	dc.b $2
00025B15 F4DA                       	dc.b $F4, $DA
00025B17 14EA                       	dc.b $14, $EA
00025B19 00                         DPLC_33c5_361: 	dc.b $0
00025B1A 02                         DPLC_33c5_362: 	dc.b $2
00025B1B F4DA                       	dc.b $F4, $DA
00025B1D 14EA                       	dc.b $14, $EA
00025B1F 00                         DPLC_33c5_367: 	dc.b $0
00025B20                            	even
00025B20                            	even
00025B20                            
00025B20                            ; ---------------------------------------------------------------------------
00025B20                            ; Uncompressed graphics	- Sonic
00025B20                            ; ---------------------------------------------------------------------------
00025B20                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00030900                            		even
00030900                            ; ---------------------------------------------------------------------------
00030900                            ; Compressed graphics - various
00030900                            ; ---------------------------------------------------------------------------
00030900                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
00030A04                            		even
00030A04                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00030A3E                            		even
00030A3E                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00030BD4                            		even
00030BD4                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00030D1C                            		even
00030D1C                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030E26                            		even
00030E26                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00030E78                            		even
00030E78                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
000310C0                            		even
000310C0                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00031246                            		even
00031246                            ; ---------------------------------------------------------------------------
00031246                            ; Sprite mappings - walls of the special stage
00031246                            ; ---------------------------------------------------------------------------
00031246                            Map_SSWalls:
00031246                            	include "_maps\SSwalls.asm"
00031246                            ; ---------------------------------------------------------------------------
00031246                            ; Sprite mappings - walls of the special stage
00031246                            ; ---------------------------------------------------------------------------
00031246 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0003124A 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0003124E 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00031252 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00031256 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0003125A 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0003125E 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00031262 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00031266 01                         byte_2C584:	dc.b 1
00031267 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003126C 01                         byte_2C58A:	dc.b 1
0003126D F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00031272 01                         byte_2C590:	dc.b 1
00031273 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00031278 01                         byte_2C596:	dc.b 1
00031279 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003127E 01                         byte_2C59C:	dc.b 1
0003127F F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00031284 01                         byte_2C5A2:	dc.b 1
00031285 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003128A 01                         byte_2C5A8:	dc.b 1
0003128B F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00031290 01                         byte_2C5AE:	dc.b 1
00031291 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00031296 01                         byte_2C5B4:	dc.b 1
00031297 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003129C 01                         byte_2C5BA:	dc.b 1
0003129D F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
000312A2 01                         byte_2C5C0:	dc.b 1
000312A3 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
000312A8 01                         byte_2C5C6:	dc.b 1
000312A9 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
000312AE 01                         byte_2C5CC:	dc.b 1
000312AF F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
000312B4 01                         byte_2C5D2:	dc.b 1
000312B5 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
000312BA 01                         byte_2C5D8:	dc.b 1
000312BB F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
000312C0 01                         byte_2C5DE:	dc.b 1
000312C1 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
000312C6                            		even
000312C6                            		even
000312C6                            ; ---------------------------------------------------------------------------
000312C6                            ; Compressed graphics - special stage
000312C6                            ; ---------------------------------------------------------------------------
000312C6                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031BFE                            		even
00031BFE                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031D4C                            		even
00031D4C                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
000331DE                            		even
000331DE                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
000334DE                            		even
000334DE                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
000339D2                            		even
000339D2                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00033AC0                            		even
00033AC0                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00033B90                            		even
00033B90                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033C86                            		even
00033C86                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033CE4                            		even
00033CE4                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033D76                            		even
00033D76                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033E38                            		even
00033E38                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033F06                            		even
00033F06                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033FD2                            		even
00033FD2                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0003409A                            		even
0003409A                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00034164                            		even
00034164                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00034234                            		even
00034234                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00034428                            		even
00034428                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00034590                            		even
00034590                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00034640                            		even
00034640                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0003471A                            		even
0003471A                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003479E                            		even
0003479E                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003491C                            		even
0003491C                            ; ---------------------------------------------------------------------------
0003491C                            ; Compressed graphics - GHZ stuff
0003491C                            ; ---------------------------------------------------------------------------
0003491C                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034966                            		even
00034966                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00034A80                            		even
00034A80                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00034B6C                            		even
00034B6C                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034BB4                            		even
00034BB4                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034D52                            		even
00034D52                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034E0E                            		even
00034E0E                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00035022                            		even
00035022                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003514E                            		even
0003514E                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0003527C                            		even
0003527C                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0003531A                            		even
0003531A                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
0003537A                            		even
0003537A                            ; ---------------------------------------------------------------------------
0003537A                            ; Compressed graphics - LZ stuff
0003537A                            ; ---------------------------------------------------------------------------
0003537A                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0003549E                            		even
0003549E                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00035C92                            		even
00035C92                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035E12                            		even
00035E12                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00035F7C                            		even
00035F7C                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
000365D2                            		even
000365D2                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036688                            		even
00036688                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003672A                            		even
0003672A                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036886                            		even
00036886                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000368EA                            		even
000368EA                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00036A3C                            		even
00036A3C                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00036F1E                            		even
00036F1E                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003708E                            		even
0003708E                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00037346                            		even
00037346                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003747E                            		even
0003747E                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
000375A8                            		even
000375A8                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
000376B8                            		even
000376B8                            ; ---------------------------------------------------------------------------
000376B8                            ; Compressed graphics - MZ stuff
000376B8                            ; ---------------------------------------------------------------------------
000376B8                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037946                            		even
00037946                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00037A04                            		even
00037A04                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00037ABC                            		even
00037ABC                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00037B10                            		even
00037B10                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00037DE2 00                         		even
00037DE2                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000386F8                            		even
000386F8                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003885C                            		even
0003885C                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000388E4                            		even
000388E4                            ; ---------------------------------------------------------------------------
000388E4                            ; Compressed graphics - SLZ stuff
000388E4                            ; ---------------------------------------------------------------------------
000388E4                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00038B20                            		even
00038B20                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038C66                            		even
00038C66                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00038EAA                            		even
00038EAA                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00038F0C                            		even
00038F0C                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00038FEE                            		even
00038FEE                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
000391D0                            		even
000391D0                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
000392DC                            		even
000392DC                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00039380                            		even
00039380                            ; ---------------------------------------------------------------------------
00039380                            ; Compressed graphics - SYZ stuff
00039380                            ; ---------------------------------------------------------------------------
00039380                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000394EA                            		even
000394EA                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0003954C                            		even
0003954C                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003962E                            		even
0003962E                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000398BC                            		even
000398BC                            ; ---------------------------------------------------------------------------
000398BC                            ; Compressed graphics - SBZ stuff
000398BC                            ; ---------------------------------------------------------------------------
000398BC                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00039910                            		even
00039910                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00039BAC                            		even
00039BAC                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00039DB0                            		even
00039DB0                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00039F4E                            		even
00039F4E                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003A27E                            		even
0003A27E                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003A45C                            		even
0003A45C                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003A4B4                            		even
0003A4B4                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A67E 00                         		even
0003A67E                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A77C                            		even
0003A77C                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A908                            		even
0003A908                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A958                            		even
0003A958                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A9B0                            		even
0003A9B0                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003AAAC                            		even
0003AAAC                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003ABC2                            		even
0003ABC2                            ; ---------------------------------------------------------------------------
0003ABC2                            ; Compressed graphics - enemies
0003ABC2                            ; ---------------------------------------------------------------------------
0003ABC2                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003B030 00                         		even
0003B030                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003B1DA 00                         		even
0003B1DA                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B59C 00                         		even
0003B59C                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B784                            		even
0003B784                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B93C 00                         		even
0003B93C                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003BA86                            		even
0003BA86                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003BD10                            		even
0003BD10                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C334                            		even
0003C334                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C52A                            		even
0003C52A                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003CB48                            		even
0003CB48                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003CF48 00                         		even
0003CF48                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003D244                            		even
0003D244                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D48C                            		even
0003D48C                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D724                            		even
0003D724                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D902                            		even
0003D902                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003DA90                            		even
0003DA90                            ; ---------------------------------------------------------------------------
0003DA90                            ; Compressed graphics - various
0003DA90                            ; ---------------------------------------------------------------------------
0003DA90                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003DFC0                            		even
0003DFC0                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003E0B6                            		even
0003E0B6                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003E1BC                            		even
0003E1BC                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003E2B0                            		even
0003E2B0                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E7F4                            		even
0003E7F4                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003EE5A                            		even
0003EE5A                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003EF0A                            		even
0003EF0A                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003F09C                            		even
0003F09C                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003F1B0                            		even
0003F1B0                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003F282                            		even
0003F282                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F6FE                            		even
0003F6FE                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F7BE                            		even
0003F7BE                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F932                            		even
0003F932                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003FC34                            		even
0003FC34                            ; ---------------------------------------------------------------------------
0003FC34                            ; Compressed graphics - continue screen
0003FC34                            ; ---------------------------------------------------------------------------
0003FC34                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003FEE4                            		even
0003FEE4                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0004011E                            		even
0004011E                            ; ---------------------------------------------------------------------------
0004011E                            ; Compressed graphics - animals
0004011E                            ; ---------------------------------------------------------------------------
0004011E                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00040276                            		even
00040276                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
000403D2                            		even
000403D2                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0004054E                            		even
0004054E                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0004066A                            		even
0004066A                            Nem_Pig:	incbin	artnem\pig.bin		; pig
000407A0                            		even
000407A0                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
000408DA                            		even
000408DA                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00040A36                            		even
00040A36                            ; ---------------------------------------------------------------------------
00040A36                            ; Compressed graphics - primary patterns and block mappings
00040A36                            ; ---------------------------------------------------------------------------
00040A36                            Blk16_GHZ:	incbin	map16\ghz.bin
0004134A                            		even
0004134A                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042C58                            		even
00042C58                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00043FD8                            		even
00043FD8                            Blk256_GHZ:	incbin	map256\ghz.bin
00046412                            		even
00046412                            Blk16_LZ:	incbin	map16\lz.bin
00046B4C                            		even
00046B4C                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00048F52                            		even
00048F52                            Blk256_LZ:	incbin	map256\lz.bin
0004B8D2                            		even
0004B8D2                            Blk16_MZ:	incbin	map16\mz.bin
0004C03A                            		even
0004C03A                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004E976                            		even
0004E976                            Blk256_MZ:	incbin	map256\mz.bin
0005011A                            		even
0005011A                            Blk16_SLZ:	incbin	map16\slz.bin
000507E4                            		even
000507E4                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00052738                            		even
00052738                            Blk256_SLZ:	incbin	map256\slz.bin
00052DB2                            		even
00052DB2                            Blk16_SYZ:	incbin	map16\syz.bin
000539D8                            		even
000539D8                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00057F6A                            		even
00057F6A                            Blk256_SYZ:	incbin	map256\syz.bin
00059FC6                            		even
00059FC6                            Blk16_SBZ:	incbin	map16\sbz.bin
0005AF0E                            		even
0005AF0E                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D8D2                            		even
0005D8D2                            Blk256_SBZ:	incbin	map256\sbz.bin
000603C8                            		even
000603C8                            Blk16_BHZ:	incbin	map16\bhz.bin
00060CDC                            		even
00060CDC                            Nem_BHZ_1st:	incbin	artnem\8x8bhz1.bin	; GHZ primary patterns
000622EE                            		even
000622EE                            Nem_BHZ_2nd:	incbin	artnem\8x8bhz2.bin	; GHZ secondary patterns
00063682                            		even
00063682                            Blk256_BHZ:	incbin	map256\bhz.bin
000657D2                            		even
000657D2                            ; ---------------------------------------------------------------------------
000657D2                            ; Compressed graphics - bosses and ending sequence
000657D2                            ; ---------------------------------------------------------------------------
000657D2                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00065FEC 00                         		even
00065FEC                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
0006663A                            		even
0006663A                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
000666B4                            		even
000666B4                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0006699E                            		even
0006699E                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00067222                            		even
00067222                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00067F78 00                         		even
00067F78                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
000686E0                            		even
000686E0                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00068C60                            		even
00068C60                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00068D80                            		even
00068D80                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00068F7E                            		even
00068F7E                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006A15C                            		even
0006A15C                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006AAA0                            		even
0006AAA0                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006AE76                            		even
0006AE76                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006B406                            		even
0006B406                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006B68E                            		even
0006B68E                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006BC7C 00                         		even
0006BC7C                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006BF04                            		even
0006BF04                            		incbin	misc\padding2.bin
0006C008                            		even
0006C008                            ; ---------------------------------------------------------------------------
0006C008                            ; Collision data
0006C008                            ; ---------------------------------------------------------------------------
0006C008                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0006C108                            		even
0006C108                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0006D108                            		even
0006D108                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0006E108                            		even
0006E108                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0006E2C0 00                         		even
0006E2C0                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0006E428                            		even
0006E428                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0006E5B8 00                         		even
0006E5B8                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0006E7AC                            		even
0006E7AC                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0006E9B2                            		even
0006E9B2                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006EC50                            		even
0006EC50                            Col_BHZ:	incbin	collide\bhz.bin		; GHZ index
0006EE08 00                         		even
0006EE08                            ; ---------------------------------------------------------------------------
0006EE08                            ; Special layouts
0006EE08                            ; ---------------------------------------------------------------------------
0006EE08                            SS_1:		incbin	sslayout\1.bin
0006F050                            		even
0006F050                            SS_2:		incbin	sslayout\2.bin
0006F408                            		even
0006F408                            SS_3:		incbin	sslayout\3.bin
0006F764                            		even
0006F764                            SS_4:		incbin	sslayout\4.bin
0006FC3E                            		even
0006FC3E                            SS_5:		incbin	sslayout\5.bin
000700EE                            		even
000700EE                            SS_6:		incbin	sslayout\6.bin
000703E0                            		even
000703E0                            ; ---------------------------------------------------------------------------
000703E0                            ; Animated uncompressed graphics
000703E0                            ; ---------------------------------------------------------------------------
000703E0                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
000705E0                            		even
000705E0                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
000709E0                            		even
000709E0                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00070E60                            		even
00070E60                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00071160                            		even
00071160                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00071760                            		even
00071760                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00071A60                            		even
00071A60                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
000724E0                            		even
000724E0                            
000724E0                            ; ---------------------------------------------------------------------------
000724E0                            ; Level	layout index
000724E0                            ; ---------------------------------------------------------------------------
000724E0 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
000724E6 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
000724EC 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
000724F2 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000724F8 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
000724FE 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00072504 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0007250A 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00072510 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00072516 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0007251C 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00072522 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00072528 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007252E 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00072534 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007253A 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00072540 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00072546 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0007254C 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00072552 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00072558 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007255E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00072564 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0007256A 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00072570 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00072576 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007257C 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00072582 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00072588 0000 0000 0000             		dc.w Level_BHZ1-Level_Index, Level_BHZbg-Level_Index, byte_68D70-Level_Index
0007258E 0000 0000 0000             		dc.w Level_BHZ2-Level_Index, Level_BHZbg-Level_Index, byte_68E3C-Level_Index
00072594 0000 0000 0000             		dc.w Level_BHZ3-Level_Index, Level_BHZbg-Level_Index, byte_68F84-Level_Index
0007259A 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000725A0                            
000725A0                            Level_GHZ1:	incbin	levels\ghz1.bin
00072692                            		even
00072692 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00072696                            Level_GHZ2:	incbin	levels\ghz2.bin
0007275E                            		even
0007275E 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00072762                            Level_GHZ3:	incbin	levels\ghz3.bin
00072884                            		even
00072884                            Level_GHZbg:	incbin	levels\ghzbg.bin
000728A6                            		even
000728A6 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000728AA 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
000728AE                            
000728AE                            Level_LZ1:	incbin	levels\lz1.bin
000729B0                            		even
000729B0                            Level_LZbg:	incbin	levels\lzbg.bin
00072AB2                            		even
00072AB2 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00072AB6                            Level_LZ2:	incbin	levels\lz2.bin
00072B50                            		even
00072B50 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00072B54                            Level_LZ3:	incbin	levels\lz3.bin
00072C6E                            		even
00072C6E 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00072C72                            Level_SBZ3:	incbin	levels\sbz3.bin
00072D2C                            		even
00072D2C 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00072D30                            
00072D30                            Level_MZ1:	incbin	levels\mz1.bin
00072DCE                            		even
00072DCE                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00072E48                            		even
00072E48                            Level_MZ2:	incbin	levels\mz2.bin
00072EEC                            		even
00072EEC                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00072F7E                            		even
00072F7E 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00072F82                            Level_MZ3:	incbin	levels\mz3.bin
00073064                            		even
00073064                            Level_MZ3bg:	incbin	levels\mz3bg.bin
00073108 00                         		even
00073108 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007310C 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00073110                            
00073110                            Level_SLZ1:	incbin	levels\slz1.bin
00073222                            		even
00073222                            Level_SLZbg:	incbin	levels\slzbg.bin
0007323C                            		even
0007323C                            Level_SLZ2:	incbin	levels\slz2.bin
0007332C                            		even
0007332C                            Level_SLZ3:	incbin	levels\slz3.bin
00073446                            		even
00073446 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007344A                            
0007344A                            Level_SYZ1:	incbin	levels\syz1.bin
00073506 00                         		even
00073506                            Level_SYZbg:	incbin	levels\syzbg.bin
00073540                            		even
00073540 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00073544                            Level_SYZ2:	incbin	levels\syz2.bin
00073648                            		even
00073648 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007364C                            Level_SYZ3:	incbin	levels\syz3.bin
000737A6 00                         		even
000737A6 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
000737AA 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
000737AE                            
000737AE                            Level_SBZ1:	incbin	levels\sbz1.bin
000738D0                            		even
000738D0                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0007390E                            		even
0007390E                            Level_SBZ2:	incbin	levels\sbz2.bin
00073A50                            		even
00073A50                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00073BBA                            		even
00073BBA 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00073BBE 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00073BC2                            Level_End:	incbin	levels\ending.bin
00073BF2 00                         		even
00073BF2 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00073BF6                            Level_BHZ1:	incbin	levels\bhz1.bin
00073CE8                            		even
00073CE8                            
00073CE8                            Level_BHZ2:	incbin	levels\bhz2.bin
00073DB0                            		even
00073DB0                            
00073DB0                            Level_BHZ3:	incbin	levels\bhz3.bin
00073ED2                            		even
00073ED2                            Level_BHZbg:	incbin	levels\bhzbg.bin
00073EF4                            		even
00073EF4                            ; ---------------------------------------------------------------------------
00073EF4                            ; Animated uncompressed giant ring graphics
00073EF4                            ; ---------------------------------------------------------------------------
00073EF4                            Art_BigRing:	incbin	artunc\bigring.bin
00074B34                            		even
00074B34                            
00074B34                            		incbin	misc\padding3.bin
00074BD0                            		even
00074BD0                            
00074BD0                            ; ---------------------------------------------------------------------------
00074BD0                            ; Sprite locations index
00074BD0                            ; ---------------------------------------------------------------------------
00074BD0 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074BD4 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074BD8 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074BDC 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074BE0 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074BE4 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074BE8 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074BEC 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074BF0 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074BF4 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074BF8 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074BFC 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C00 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C04 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C08 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C0C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C10 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C14 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C18 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C1C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C20 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C24 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C28 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C2C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C30 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C34 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C38 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C3C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C40 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C44 0000 0000                  		dc.w ObjPos_BHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C48 0000 0000                  		dc.w ObjPos_BHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C4C 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C50 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00074C54 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00074C58 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
00074C5C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00074C60 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00074C64 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00074C68 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
00074C6C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00074C70 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00074C76                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
000754C2                            		even
000754C2                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0007578C                            		even
0007578C                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
00076158                            		even
00076158                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00076500                            		even
00076500                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00076836                            		even
00076836                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00076D4C                            		even
00076D4C                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000771E4                            		even
000771E4                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00077216                            		even
00077216                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00077248                            		even
00077248                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007727A                            		even
0007727A                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000772AC                            		even
000772AC                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000772F6                            		even
000772F6                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00077334                            		even
00077334                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000776A0                            		even
000776A0                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00077B4A                            		even
00077B4A                            ObjPos_MZ3:	incbin	objpos\mz3.bin
000780C0                            		even
000780C0                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000780EA                            		even
000780EA                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00078552                            		even
00078552                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00078B34                            		even
00078B34                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000791A6                            		even
000791A6                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00079710                            		even
00079710                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00079D16                            		even
00079D16                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007A454                            		even
0007A454                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007AB32                            		even
0007AB32                            ObjPos_FZ:	incbin	objpos\fz.bin
0007AB44                            		even
0007AB44                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007AB76                            		even
0007AB76                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007ABA8                            		even
0007ABA8                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0007ABDA                            		even
0007ABDA                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007AC0C                            		even
0007AC0C                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007AC3E                            		even
0007AC3E                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007AC76                            		even
0007AC76                            ObjPos_End:	incbin	objpos\ending.bin
0007ADD2                            		even
0007ADD2                            ObjPos_BHZ1:	incbin	objpos\bhz1.bin
0007B3D8                            		even
0007B3D8                            ObjPos_BHZ2:	incbin	objpos\bhz2.bin
0007B99C                            		even
0007B99C                            ObjPos_BHZ3:	incbin	objpos\bhz3.bin
0007C056                            		even
0007C056 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0007C05C                            ; ---------------------------------------------------------------------------
0007C05C                            		incbin	misc\padding4.bin
0007C686                            		even
0007C686                            
0007C686 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0007C68A 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0007C68E 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0007C692 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0007C696 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0007C69A 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0007C69E                            ; ---------------------------------------------------------------------------
0007C69E                            ; PSG instruments used in music
0007C69E                            ; ---------------------------------------------------------------------------
0007C69E 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0007C6AA 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007C6B6 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007C6C2                            
0007C6C2 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
0007C6D2 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
0007C6D9                            
0007C6D9 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
0007C6E0                            
0007C6E0 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
0007C6F0 80                                     dc.b    $80
0007C6F1                            
0007C6F1 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
0007C6FC                            
0007C6FC 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
0007C70C 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
0007C71C 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
0007C726                            
0007C726 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
0007C735                            
0007C735 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0007C745 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
0007C751                            
0007C751 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
0007C761 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
0007C771 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
0007C779                            
0007C779 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
0007C789 80                                     dc.b    $80
0007C78A                            
0007C78A 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007C792                            ; ---------------------------------------------------------------------------
0007C792                            ; Music	Pointers
0007C792                            ; ---------------------------------------------------------------------------
0007C792 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0007C79A 0000 0000 0000 0000        		dc.l Music83, Music84
0007C7A2 0000 0000 0000 0000        		dc.l Music85, Music86
0007C7AA 0000 0000 0000 0000        		dc.l Music87, Music88
0007C7B2 0000 0000 0000 0000        		dc.l Music89, Music8A
0007C7BA 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007C7C2 0000 0000 0000 0000        		dc.l Music8D, Music8E
0007C7CA 0000 0000 0000 0000        		dc.l Music8F, Music90
0007C7D2 0000 0000 0000 0000        		dc.l Music91, Music92
0007C7DA 0000 0000 0000 0000        		dc.l Music93, Music94
0007C7E2 0000 0000 0000 0000        		dc.l Music95, Music96
0007C7EA 0000 0000 0000 0000        		dc.l Music97, Music98
0007C7F2 0000 0000 0000 0000        		dc.l Music99, Music9A
0007C7FA 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007C802 0000 0000 0000 0000        		dc.l Music9D, Music9E
0007C80A 0000 0000                  		dc.l Music9F
0007C80E                            ; ---------------------------------------------------------------------------
0007C80E                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0007C80E                            ; ---------------------------------------------------------------------------
0007C80E 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007C81E 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0007C82E 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0007C83E 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0007C84E 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0007C85E 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0007C86E 9090 9090                  		dc.b $90, $90, $90, $90
0007C872                            
0007C872                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C872                            
0007C872                            
0007C872                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0007C872 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0007C87A 4E71                       		nop	
0007C87C 4E71                       		nop	
0007C87E 4E71                       		nop	
0007C880                            
0007C880                            loc_71B5A:
0007C880 0839 0000 00A1 1100        		btst	#0,($A11100).l
0007C888 66F6                       		bne.s	loc_71B5A
0007C88A                            
0007C88A 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0007C892 6700                       		beq.s	loc_71B82
0007C894 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007C89C 4E71                       		nop	
0007C89E 4E71                       		nop	
0007C8A0 4E71                       		nop	
0007C8A2 4E71                       		nop	
0007C8A4 4E71                       		nop	
0007C8A6 60CA                       		bra.s	sub_71B4C
0007C8A8                            ; ===========================================================================
0007C8A8                            
0007C8A8                            loc_71B82:
0007C8A8 4DF9 00FF F000             		lea	($FFF000).l,a6
0007C8AE 422E 000E                  		clr.b	$E(a6)
0007C8B2 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0007C8B6 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0007C8BA 532E 0001                  		subq.b	#1,1(a6)
0007C8BE 6600                       		bne.s	loc_71B9E
0007C8C0 4EBA 0000                  		jsr	sub_7260C(pc)
0007C8C4                            
0007C8C4                            loc_71B9E:
0007C8C4 102E 0004                  		move.b	4(a6),d0
0007C8C8 6700                       		beq.s	loc_71BA8
0007C8CA 4EBA 0000                  		jsr	sub_72504(pc)
0007C8CE                            
0007C8CE                            loc_71BA8:
0007C8CE 4A2E 0024                  		tst.b	$24(a6)
0007C8D2 6700                       		beq.s	loc_71BB2
0007C8D4 4EBA 0000                  		jsr	sub_7267C(pc)
0007C8D8                            
0007C8D8                            loc_71BB2:
0007C8D8 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0007C8DC 6700                       		beq.s	loc_71BBC	; if not, branch
0007C8DE 4EBA 0000                  		jsr	Sound_Play(pc)
0007C8E2                            
0007C8E2                            loc_71BBC:
0007C8E2 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007C8E8 6700                       		beq.s	loc_71BC8
0007C8EA 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0007C8EE                            
0007C8EE                            loc_71BC8:
0007C8EE 4BEE 0040                  		lea	$40(a6),a5
0007C8F2 4A15                       		tst.b	(a5)
0007C8F4 6A00                       		bpl.s	loc_71BD4
0007C8F6 4EBA 0000                  		jsr	sub_71C4E(pc)
0007C8FA                            
0007C8FA                            loc_71BD4:
0007C8FA 422E 0008                  		clr.b	8(a6)
0007C8FE 7E05                       		moveq	#5,d7
0007C900                            
0007C900                            loc_71BDA:
0007C900 DAFC 0030                  		adda.w	#$30,a5
0007C904 4A15                       		tst.b	(a5)
0007C906 6A00                       		bpl.s	loc_71BE6
0007C908 4EBA 0000                  		jsr	sub_71CCA(pc)
0007C90C                            
0007C90C                            loc_71BE6:
0007C90C 51CF FFF2                  		dbf	d7,loc_71BDA
0007C910                            
0007C910 7E02                       		moveq	#2,d7
0007C912                            
0007C912                            loc_71BEC:
0007C912 DAFC 0030                  		adda.w	#$30,a5
0007C916 4A15                       		tst.b	(a5)
0007C918 6A00                       		bpl.s	loc_71BF8
0007C91A 4EBA 0000                  		jsr	sub_72850(pc)
0007C91E                            
0007C91E                            loc_71BF8:
0007C91E 51CF FFF2                  		dbf	d7,loc_71BEC
0007C922                            
0007C922 1D7C 0080 000E             		move.b	#$80,$E(a6)
0007C928 7E02                       		moveq	#2,d7
0007C92A                            
0007C92A                            loc_71C04:
0007C92A DAFC 0030                  		adda.w	#$30,a5
0007C92E 4A15                       		tst.b	(a5)
0007C930 6A00                       		bpl.s	loc_71C10
0007C932 4EBA 0000                  		jsr	sub_71CCA(pc)
0007C936                            
0007C936                            loc_71C10:
0007C936 51CF FFF2                  		dbf	d7,loc_71C04
0007C93A                            
0007C93A 7E02                       		moveq	#2,d7
0007C93C                            
0007C93C                            loc_71C16:
0007C93C DAFC 0030                  		adda.w	#$30,a5
0007C940 4A15                       		tst.b	(a5)
0007C942 6A00                       		bpl.s	loc_71C22
0007C944 4EBA 0000                  		jsr	sub_72850(pc)
0007C948                            
0007C948                            loc_71C22:
0007C948 51CF FFF2                  		dbf	d7,loc_71C16
0007C94C 1D7C 0040 000E             		move.b	#$40,$E(a6)
0007C952 DAFC 0030                  		adda.w	#$30,a5
0007C956 4A15                       		tst.b	(a5)
0007C958 6A00                       		bpl.s	loc_71C38
0007C95A 4EBA 0000                  		jsr	sub_71CCA(pc)
0007C95E                            
0007C95E                            loc_71C38:
0007C95E DAFC 0030                  		adda.w	#$30,a5
0007C962 4A15                       		tst.b	(a5)
0007C964 6A00                       		bpl.s	loc_71C44
0007C966 4EBA 0000                  		jsr	sub_72850(pc)
0007C96A                            
0007C96A                            loc_71C44:
0007C96A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007C972 4E75                       		rts	
0007C974                            ; End of function sub_71B4C
0007C974                            
0007C974                            
0007C974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C974                            
0007C974                            
0007C974                            sub_71C4E:				; XREF: sub_71B4C
0007C974 532D 000E                  		subq.b	#1,$E(a5)
0007C978 6600                       		bne.s	locret_71CAA
0007C97A 1D7C 0080 0008             		move.b	#$80,8(a6)
0007C980 286D 0004                  		movea.l	4(a5),a4
0007C984                            
0007C984                            loc_71C5E:
0007C984 7A00                       		moveq	#0,d5
0007C986 1A1C                       		move.b	(a4)+,d5
0007C988 0C05 00E0                  		cmpi.b	#-$20,d5
0007C98C 6500                       		bcs.s	loc_71C6E
0007C98E 4EBA 0000                  		jsr	sub_72A5A(pc)
0007C992 60F0                       		bra.s	loc_71C5E
0007C994                            ; ===========================================================================
0007C994                            
0007C994                            loc_71C6E:
0007C994 4A05                       		tst.b	d5
0007C996 6A00                       		bpl.s	loc_71C84
0007C998 1B45 0010                  		move.b	d5,$10(a5)
0007C99C 1A1C                       		move.b	(a4)+,d5
0007C99E 6A00                       		bpl.s	loc_71C84
0007C9A0 534C                       		subq.w	#1,a4
0007C9A2 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007C9A8 6000                       		bra.s	loc_71C88
0007C9AA                            ; ===========================================================================
0007C9AA                            
0007C9AA                            loc_71C84:
0007C9AA 4EBA 0000                  		jsr	sub_71D40(pc)
0007C9AE                            
0007C9AE                            loc_71C88:
0007C9AE 2B4C 0004                  		move.l	a4,4(a5)
0007C9B2 0815 0002                  		btst	#2,(a5)
0007C9B6 6600                       		bne.s	locret_71CAA
0007C9B8 7000                       		moveq	#0,d0
0007C9BA 102D 0010                  		move.b	$10(a5),d0
0007C9BE 0C00 0080                  		cmpi.b	#$80,d0
0007C9C2 6700                       		beq.s	locret_71CAA
0007C9C4 0800 0003                  		btst	#3,d0
0007C9C8 6600                       		bne.s	loc_71CAC
0007C9CA 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0007C9D0                            
0007C9D0                            locret_71CAA:
0007C9D0 4E75                       		rts	
0007C9D2                            ; ===========================================================================
0007C9D2                            
0007C9D2                            loc_71CAC:
0007C9D2 0400 0088                  		subi.b	#$88,d0
0007C9D6 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0007C9DA 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0007C9E0 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0007C9E8 4E75                       		rts	
0007C9EA                            ; End of function sub_71C4E
0007C9EA                            
0007C9EA                            ; ===========================================================================
0007C9EA 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0007C9F0                            
0007C9F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C9F0                            
0007C9F0                            
0007C9F0                            sub_71CCA:				; XREF: sub_71B4C
0007C9F0 532D 000E                  		subq.b	#1,$E(a5)
0007C9F4 6600                       		bne.s	loc_71CE0
0007C9F6 0895 0004                  		bclr	#4,(a5)
0007C9FA 4EBA 0000                  		jsr	sub_71CEC(pc)
0007C9FE 4EBA 0000                  		jsr	sub_71E18(pc)
0007CA02 6000 0000                  		bra.w	loc_726E2
0007CA06                            ; ===========================================================================
0007CA06                            
0007CA06                            loc_71CE0:
0007CA06 4EBA 0000                  		jsr	sub_71D9E(pc)
0007CA0A 4EBA 0000                  		jsr	sub_71DC6(pc)
0007CA0E 6000 0000                  		bra.w	loc_71E24
0007CA12                            ; End of function sub_71CCA
0007CA12                            
0007CA12                            
0007CA12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CA12                            
0007CA12                            
0007CA12                            sub_71CEC:				; XREF: sub_71CCA
0007CA12 286D 0004                  		movea.l	4(a5),a4
0007CA16 0895 0001                  		bclr	#1,(a5)
0007CA1A                            
0007CA1A                            loc_71CF4:
0007CA1A 7A00                       		moveq	#0,d5
0007CA1C 1A1C                       		move.b	(a4)+,d5
0007CA1E 0C05 00E0                  		cmpi.b	#-$20,d5
0007CA22 6500                       		bcs.s	loc_71D04
0007CA24 4EBA 0000                  		jsr	sub_72A5A(pc)
0007CA28 60F0                       		bra.s	loc_71CF4
0007CA2A                            ; ===========================================================================
0007CA2A                            
0007CA2A                            loc_71D04:
0007CA2A 4EBA 0000                  		jsr	sub_726FE(pc)
0007CA2E 4A05                       		tst.b	d5
0007CA30 6A00                       		bpl.s	loc_71D1A
0007CA32 4EBA 0000                  		jsr	sub_71D22(pc)
0007CA36 1A1C                       		move.b	(a4)+,d5
0007CA38 6A00                       		bpl.s	loc_71D1A
0007CA3A 534C                       		subq.w	#1,a4
0007CA3C 6000 0000                  		bra.w	sub_71D60
0007CA40                            ; ===========================================================================
0007CA40                            
0007CA40                            loc_71D1A:
0007CA40 4EBA 0000                  		jsr	sub_71D40(pc)
0007CA44 6000 0000                  		bra.w	sub_71D60
0007CA48                            ; End of function sub_71CEC
0007CA48                            
0007CA48                            
0007CA48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CA48                            
0007CA48                            
0007CA48                            sub_71D22:				; XREF: sub_71CEC
0007CA48 0405 0080                  		subi.b	#$80,d5
0007CA4C 6700                       		beq.s	loc_71D58
0007CA4E DA2D 0008                  		add.b	8(a5),d5
0007CA52 0245 007F                  		andi.w	#$7F,d5
0007CA56 E34D                       		lsl.w	#1,d5
0007CA58 41FA 0000                  		lea	word_72790(pc),a0
0007CA5C 3C30 5000                  		move.w	(a0,d5.w),d6
0007CA60 3B46 0010                  		move.w	d6,$10(a5)
0007CA64 4E75                       		rts	
0007CA66                            ; End of function sub_71D22
0007CA66                            
0007CA66                            
0007CA66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CA66                            
0007CA66                            
0007CA66                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007CA66 1005                       		move.b	d5,d0
0007CA68 122D 0002                  		move.b	2(a5),d1
0007CA6C                            
0007CA6C                            loc_71D46:
0007CA6C 5301                       		subq.b	#1,d1
0007CA6E 6700                       		beq.s	loc_71D4E
0007CA70 D005                       		add.b	d5,d0
0007CA72 60F8                       		bra.s	loc_71D46
0007CA74                            ; ===========================================================================
0007CA74                            
0007CA74                            loc_71D4E:
0007CA74 1B40 000F                  		move.b	d0,$F(a5)
0007CA78 1B40 000E                  		move.b	d0,$E(a5)
0007CA7C 4E75                       		rts	
0007CA7E                            ; End of function sub_71D40
0007CA7E                            
0007CA7E                            ; ===========================================================================
0007CA7E                            
0007CA7E                            loc_71D58:				; XREF: sub_71D22
0007CA7E 08D5 0001                  		bset	#1,(a5)
0007CA82 426D 0010                  		clr.w	$10(a5)
0007CA86                            
0007CA86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CA86                            
0007CA86                            
0007CA86                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007CA86 2B4C 0004                  		move.l	a4,4(a5)
0007CA8A 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007CA90 0815 0004                  		btst	#4,(a5)
0007CA94 6600                       		bne.s	locret_71D9C
0007CA96 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0007CA9C 422D 000C                  		clr.b	$C(a5)
0007CAA0 0815 0003                  		btst	#3,(a5)
0007CAA4 6700                       		beq.s	locret_71D9C
0007CAA6 206D 0014                  		movea.l	$14(a5),a0
0007CAAA 1B58 0018                  		move.b	(a0)+,$18(a5)
0007CAAE 1B58 0019                  		move.b	(a0)+,$19(a5)
0007CAB2 1B58 001A                  		move.b	(a0)+,$1A(a5)
0007CAB6 1018                       		move.b	(a0)+,d0
0007CAB8 E208                       		lsr.b	#1,d0
0007CABA 1B40 001B                  		move.b	d0,$1B(a5)
0007CABE 426D 001C                  		clr.w	$1C(a5)
0007CAC2                            
0007CAC2                            locret_71D9C:
0007CAC2 4E75                       		rts	
0007CAC4                            ; End of function sub_71D60
0007CAC4                            
0007CAC4                            
0007CAC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CAC4                            
0007CAC4                            
0007CAC4                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0007CAC4 4A2D 0012                  		tst.b	$12(a5)
0007CAC8 6700                       		beq.s	locret_71DC4
0007CACA 532D 0012                  		subq.b	#1,$12(a5)
0007CACE 6600                       		bne.s	locret_71DC4
0007CAD0 08D5 0001                  		bset	#1,(a5)
0007CAD4 4A2D 0001                  		tst.b	1(a5)
0007CAD8 6B00 0000                  		bmi.w	loc_71DBE
0007CADC 4EBA 0000                  		jsr	sub_726FE(pc)
0007CAE0 584F                       		addq.w	#4,sp
0007CAE2 4E75                       		rts	
0007CAE4                            ; ===========================================================================
0007CAE4                            
0007CAE4                            loc_71DBE:
0007CAE4 4EBA 0000                  		jsr	sub_729A0(pc)
0007CAE8 584F                       		addq.w	#4,sp
0007CAEA                            
0007CAEA                            locret_71DC4:
0007CAEA 4E75                       		rts	
0007CAEC                            ; End of function sub_71D9E
0007CAEC                            
0007CAEC                            
0007CAEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CAEC                            
0007CAEC                            
0007CAEC                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0007CAEC 584F                       		addq.w	#4,sp
0007CAEE 0815 0003                  		btst	#3,(a5)
0007CAF2 6700                       		beq.s	locret_71E16
0007CAF4 4A2D 0018                  		tst.b	$18(a5)
0007CAF8 6700                       		beq.s	loc_71DDA
0007CAFA 532D 0018                  		subq.b	#1,$18(a5)
0007CAFE 4E75                       		rts	
0007CB00                            ; ===========================================================================
0007CB00                            
0007CB00                            loc_71DDA:
0007CB00 532D 0019                  		subq.b	#1,$19(a5)
0007CB04 6700                       		beq.s	loc_71DE2
0007CB06 4E75                       		rts	
0007CB08                            ; ===========================================================================
0007CB08                            
0007CB08                            loc_71DE2:
0007CB08 206D 0014                  		movea.l	$14(a5),a0
0007CB0C 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007CB12 4A2D 001B                  		tst.b	$1B(a5)
0007CB16 6600                       		bne.s	loc_71DFE
0007CB18 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0007CB1E 442D 001A                  		neg.b	$1A(a5)
0007CB22 4E75                       		rts	
0007CB24                            ; ===========================================================================
0007CB24                            
0007CB24                            loc_71DFE:
0007CB24 532D 001B                  		subq.b	#1,$1B(a5)
0007CB28 1C2D 001A                  		move.b	$1A(a5),d6
0007CB2C 4886                       		ext.w	d6
0007CB2E DC6D 001C                  		add.w	$1C(a5),d6
0007CB32 3B46 001C                  		move.w	d6,$1C(a5)
0007CB36 DC6D 0010                  		add.w	$10(a5),d6
0007CB3A 594F                       		subq.w	#4,sp
0007CB3C                            
0007CB3C                            locret_71E16:
0007CB3C 4E75                       		rts	
0007CB3E                            ; End of function sub_71DC6
0007CB3E                            
0007CB3E                            
0007CB3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CB3E                            
0007CB3E                            
0007CB3E                            sub_71E18:				; XREF: sub_71CCA
0007CB3E 0815 0001                  		btst	#1,(a5)
0007CB42 6600                       		bne.s	locret_71E48
0007CB44 3C2D 0010                  		move.w	$10(a5),d6
0007CB48 6700                       		beq.s	loc_71E4A
0007CB4A                            
0007CB4A                            loc_71E24:				; XREF: sub_71CCA
0007CB4A 102D 001E                  		move.b	$1E(a5),d0
0007CB4E 4880                       		ext.w	d0
0007CB50 DC40                       		add.w	d0,d6
0007CB52 0815 0002                  		btst	#2,(a5)
0007CB56 6600                       		bne.s	locret_71E48
0007CB58 3206                       		move.w	d6,d1
0007CB5A E049                       		lsr.w	#8,d1
0007CB5C 103C 00A4                  		move.b	#-$5C,d0
0007CB60 4EBA 0000                  		jsr	sub_72722(pc)
0007CB64 1206                       		move.b	d6,d1
0007CB66 103C 00A0                  		move.b	#-$60,d0
0007CB6A 4EBA 0000                  		jsr	sub_72722(pc)
0007CB6E                            
0007CB6E                            locret_71E48:
0007CB6E 4E75                       		rts	
0007CB70                            ; ===========================================================================
0007CB70                            
0007CB70                            loc_71E4A:
0007CB70 08D5 0001                  		bset	#1,(a5)
0007CB74 4E75                       		rts	
0007CB76                            ; End of function sub_71E18
0007CB76                            
0007CB76                            ; ===========================================================================
0007CB76                            
0007CB76                            loc_71E50:				; XREF: sub_71B4C
0007CB76 6B00                       		bmi.s	loc_71E94
0007CB78 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0007CB7E 6700 0000                  		beq.w	loc_71EFE
0007CB82 1D7C 0002 0003             		move.b	#2,3(a6)
0007CB88 7602                       		moveq	#2,d3
0007CB8A 103C 00B4                  		move.b	#-$4C,d0
0007CB8E 7200                       		moveq	#0,d1
0007CB90                            
0007CB90                            loc_71E6A:
0007CB90 4EBA 0000                  		jsr	sub_7272E(pc)
0007CB94 4EBA 0000                  		jsr	sub_72764(pc)
0007CB98 5200                       		addq.b	#1,d0
0007CB9A 51CB FFF4                  		dbf	d3,loc_71E6A
0007CB9E                            
0007CB9E 7602                       		moveq	#2,d3
0007CBA0 7028                       		moveq	#$28,d0
0007CBA2                            
0007CBA2                            loc_71E7C:
0007CBA2 1203                       		move.b	d3,d1
0007CBA4 4EBA 0000                  		jsr	sub_7272E(pc)
0007CBA8 5801                       		addq.b	#4,d1
0007CBAA 4EBA 0000                  		jsr	sub_7272E(pc)
0007CBAE 51CB FFF2                  		dbf	d3,loc_71E7C
0007CBB2                            
0007CBB2 4EBA 0000                  		jsr	sub_729B6(pc)
0007CBB6 6000 FDB2                  		bra.w	loc_71C44
0007CBBA                            ; ===========================================================================
0007CBBA                            
0007CBBA                            loc_71E94:				; XREF: loc_71E50
0007CBBA 422E 0003                  		clr.b	3(a6)
0007CBBE 7630                       		moveq	#$30,d3
0007CBC0 4BEE 0040                  		lea	$40(a6),a5
0007CBC4 7806                       		moveq	#6,d4
0007CBC6                            
0007CBC6                            loc_71EA0:
0007CBC6 0815 0007                  		btst	#7,(a5)
0007CBCA 6700                       		beq.s	loc_71EB8
0007CBCC 0815 0002                  		btst	#2,(a5)
0007CBD0 6600                       		bne.s	loc_71EB8
0007CBD2 103C 00B4                  		move.b	#-$4C,d0
0007CBD6 122D 000A                  		move.b	$A(a5),d1
0007CBDA 4EBA 0000                  		jsr	sub_72722(pc)
0007CBDE                            
0007CBDE                            loc_71EB8:
0007CBDE DAC3                       		adda.w	d3,a5
0007CBE0 51CC FFE4                  		dbf	d4,loc_71EA0
0007CBE4                            
0007CBE4 4BEE 0220                  		lea	$220(a6),a5
0007CBE8 7802                       		moveq	#2,d4
0007CBEA                            
0007CBEA                            loc_71EC4:
0007CBEA 0815 0007                  		btst	#7,(a5)
0007CBEE 6700                       		beq.s	loc_71EDC
0007CBF0 0815 0002                  		btst	#2,(a5)
0007CBF4 6600                       		bne.s	loc_71EDC
0007CBF6 103C 00B4                  		move.b	#-$4C,d0
0007CBFA 122D 000A                  		move.b	$A(a5),d1
0007CBFE 4EBA 0000                  		jsr	sub_72722(pc)
0007CC02                            
0007CC02                            loc_71EDC:
0007CC02 DAC3                       		adda.w	d3,a5
0007CC04 51CC FFE4                  		dbf	d4,loc_71EC4
0007CC08                            
0007CC08 4BEE 0340                  		lea	$340(a6),a5
0007CC0C 0815 0007                  		btst	#7,(a5)
0007CC10 6700                       		beq.s	loc_71EFE
0007CC12 0815 0002                  		btst	#2,(a5)
0007CC16 6600                       		bne.s	loc_71EFE
0007CC18 103C 00B4                  		move.b	#-$4C,d0
0007CC1C 122D 000A                  		move.b	$A(a5),d1
0007CC20 4EBA 0000                  		jsr	sub_72722(pc)
0007CC24                            
0007CC24                            loc_71EFE:
0007CC24 6000 FD44                  		bra.w	loc_71C44
0007CC28                            
0007CC28                            ; ---------------------------------------------------------------------------
0007CC28                            ; Subroutine to	play a sound or	music track
0007CC28                            ; ---------------------------------------------------------------------------
0007CC28                            
0007CC28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CC28                            
0007CC28                            
0007CC28                            Sound_Play:				; XREF: sub_71B4C
0007CC28 2079 0007 C686             		movea.l	(Go_SoundTypes).l,a0
0007CC2E 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007CC32 1616                       		move.b	0(a6),d3
0007CC34 7802                       		moveq	#2,d4
0007CC36                            
0007CC36                            loc_71F12:
0007CC36 1011                       		move.b	(a1),d0		; move track number to d0
0007CC38 1200                       		move.b	d0,d1
0007CC3A 4219                       		clr.b	(a1)+
0007CC3C 0400 0081                  		subi.b	#$81,d0
0007CC40 6500                       		bcs.s	loc_71F3E
0007CC42 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007CC48 6700                       		beq.s	loc_71F2C
0007CC4A 1D41 000A                  		move.b	d1,$A(a6)
0007CC4E 6000                       		bra.s	loc_71F3E
0007CC50                            ; ===========================================================================
0007CC50                            
0007CC50                            loc_71F2C:
0007CC50 0240 007F                  		andi.w	#$7F,d0
0007CC54 1430 0000                  		move.b	(a0,d0.w),d2
0007CC58 B403                       		cmp.b	d3,d2
0007CC5A 6500                       		bcs.s	loc_71F3E
0007CC5C 1602                       		move.b	d2,d3
0007CC5E 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007CC62                            
0007CC62                            loc_71F3E:
0007CC62 51CC FFD2                  		dbf	d4,loc_71F12
0007CC66                            
0007CC66 4A03                       		tst.b	d3
0007CC68 6B00                       		bmi.s	locret_71F4A
0007CC6A 1C83                       		move.b	d3,0(a6)
0007CC6C                            
0007CC6C                            locret_71F4A:
0007CC6C 4E75                       		rts	
0007CC6E                            ; End of function Sound_Play
0007CC6E                            
0007CC6E                            
0007CC6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CC6E                            
0007CC6E                            
0007CC6E                            Sound_ChkValue:				; XREF: sub_71B4C
0007CC6E 7E00                       		moveq	#0,d7
0007CC70 1E2E 0009                  		move.b	9(a6),d7
0007CC74 6700 0000                  		beq.w	Sound_E4
0007CC78 6A00                       		bpl.s	locret_71F8C
0007CC7A 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0007CC80 0C07 009F                  		cmpi.b	#$9F,d7
0007CC84 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0007CC88 0C07 00A0                  		cmpi.b	#$A0,d7
0007CC8C 6500 0000                  		bcs.w	locret_71F8C
0007CC90 0C07 00CF                  		cmpi.b	#$CF,d7
0007CC94 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0007CC98 0C07 00D0                  		cmpi.b	#$D0,d7
0007CC9C 6500 0000                  		bcs.w	locret_71F8C
0007CCA0 0C07 00E0                  		cmpi.b	#$E0,d7
0007CCA4 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0007CCA8 0C07 00E5                  		cmpi.b	#$E5,d7
0007CCAC 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
0007CCAE                            
0007CCAE                            locret_71F8C:
0007CCAE 4E75                       		rts	
0007CCB0                            ; ===========================================================================
0007CCB0                            
0007CCB0                            Sound_E0toE5				; XREF: Sound_ChkValue
0007CCB0 0407 00E0                  		subi.b	#$E0,d7
0007CCB4 E54F                       		lsl.w	#2,d7
0007CCB6 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0007CCBA                            ; ===========================================================================
0007CCBA                            
0007CCBA                            Sound_ExIndex:
0007CCBA 6000 0000                  		bra.w	Sound_E0
0007CCBE                            ; ===========================================================================
0007CCBE 6000 0000                  		bra.w	Sound_E1
0007CCC2                            ; ===========================================================================
0007CCC2 6000 0000                  		bra.w	Sound_E2
0007CCC6                            ; ===========================================================================
0007CCC6 6000 0000                  		bra.w	Sound_E3
0007CCCA                            ; ===========================================================================
0007CCCA 6000 0000                  		bra.w	Sound_E4
0007CCCE                            ; ===========================================================================
0007CCCE 6000 0000                  		bra.w	Sound_E5
0007CCD2                            ; ===========================================================================
0007CCD2                            ; ---------------------------------------------------------------------------
0007CCD2                            ; Play "Say-gaa" PCM sound
0007CCD2                            ; ---------------------------------------------------------------------------
0007CCD2                            
0007CCD2                            Sound_E1:				  
0007CCD2 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007CCD8 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0007CCDE 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007CCE6                            PlayPCM_Loop:	  
0007CCE6 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007CCEC 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0007CCF0 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0007CCF4 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007CCF6 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007CCF8 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0007CCFC 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007CD02 4EB8 142A                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0007CD06 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0007CD0C 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0007CD0E 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0007CD10                            return_PlayPCM: 
0007CD10 584F                       		addq.w	#4,sp 
0007CD12 4E75                       		rts
0007CD14                            		
0007CD14                            ; ---------------------------------------------------------------------------
0007CD14                            ; Play you are an idiot pcm sound
0007CD14                            ; since the sfx already crashes the game forever load it here :V
0007CD14                            ; ---------------------------------------------------------------------------
0007CD14                            
0007CD14                            Sound_E5: 
0007CD14 4EB8 14FA                  		jsr	ClearScreen
0007CD18                            		;control port on a5
0007CD18 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
0007CD1E 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
0007CD24 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
0007CD28 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
0007CD2C 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
0007CD30                            		
0007CD30 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
0007CD34                            		
0007CD34 2ABC 4000 0000             		move.l	#$40000000,(a5)
0007CD3A 41F9 0002 44DA             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
0007CD40 4EB8 1676                  		jsr	NemDec
0007CD44 43F9 00FF 0000             		lea	($FF0000).l,a1
0007CD4A 41F9 0002 447C             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
0007CD50 303C 0000                  		move.w	#0,d0
0007CD54 4EB8 1954                  		jsr	EniDec
0007CD58 43F9 00FF 0000             		lea	($FF0000).l,a1
0007CD5E 203C 4304 0003             		move.l	#$43040003,d0
0007CD64 7223                       		moveq	#35,d1
0007CD66 740D                       		moveq	#13,d2
0007CD68 4EB8 1656                  		jsr	ShowVDPGraphics
0007CD6C 7014                       		moveq	#20,d0
0007CD6E 4EB8 231A                  		jsr	PalLoad2	; load pallet
0007CD72                            		
0007CD72 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007CD78 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
0007CD7E 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007CD86                            		
0007CD86 6100                       		bsr.s	SfxE5SwapPalette
0007CD88                            		
0007CD88                            Sound_E5_StartPCM:
0007CD88 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007CD8E 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
0007CD94 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007CD9C                            PlayPCM_LoopE5:	  
0007CD9C                            
0007CD9C 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007CDA2                            		
0007CDA2 5278 FE24                  		addq.w	#1,($FFFFFE24).w
0007CDA6                            		
0007CDA6 1038 FE24                  		move.b	($FFFFFE24).w,d0
0007CDAA 0200 000F                  		andi.b	#$F,d0
0007CDAE 6700                       		beq.s	SfxE5SwapPalette
0007CDB0                            		
0007CDB0 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007CDB4 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007CDB8 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007CDBA 67CC                       		beq.s	Sound_E5_StartPCM			; If d3 = 0, we finished playing the PCM sample, DONT STOP
0007CDBC 60DE                       		bra.s	PlayPCM_LoopE5
0007CDBE                            		
0007CDBE                            SfxE5SwapPalette:
0007CDBE                            		
0007CDBE 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
0007CDC4                            		
0007CDC4                            		
0007CDC4 0838 0004 FE24             		btst	#4,($FFFFFE24).w
0007CDCA 6700                       		beq.s	@not_black
0007CDCC 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
0007CDD2 6000                       		bra.s	@merge
0007CDD4                            	@not_black:
0007CDD4 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
0007CDDA                            	@merge:
0007CDDA 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
0007CDDE 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
0007CDE2 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
0007CDE8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0007CDEC                            		
0007CDEC 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
0007CDF0 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
0007CDF4 60A6                       		bra.s	PlayPCM_LoopE5
0007CDF6                            		
0007CDF6                            ; ===========================================================================
0007CDF6                            ; ---------------------------------------------------------------------------
0007CDF6                            ; Play music track $81-$9F
0007CDF6                            ; ---------------------------------------------------------------------------
0007CDF6                            
0007CDF6                            Sound_81to9F:				; XREF: Sound_ChkValue
0007CDF6 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0007CDFA 6600                       		bne.s	loc_72024	; if not, branch
0007CDFC 4A2E 0027                  		tst.b	$27(a6)
0007CE00 6600 0000                  		bne.w	loc_721B6
0007CE04 4BEE 0040                  		lea	$40(a6),a5
0007CE08 7009                       		moveq	#9,d0
0007CE0A                            
0007CE0A                            loc_71FE6:
0007CE0A 0895 0002                  		bclr	#2,(a5)
0007CE0E DAFC 0030                  		adda.w	#$30,a5
0007CE12 51C8 FFF6                  		dbf	d0,loc_71FE6
0007CE16                            
0007CE16 4BEE 0220                  		lea	$220(a6),a5
0007CE1A 7005                       		moveq	#5,d0
0007CE1C                            
0007CE1C                            loc_71FF8:
0007CE1C 0895 0007                  		bclr	#7,(a5)
0007CE20 DAFC 0030                  		adda.w	#$30,a5
0007CE24 51C8 FFF6                  		dbf	d0,loc_71FF8
0007CE28 4216                       		clr.b	0(a6)
0007CE2A 204E                       		movea.l	a6,a0
0007CE2C 43EE 03A0                  		lea	$3A0(a6),a1
0007CE30 303C 0087                  		move.w	#$87,d0
0007CE34                            
0007CE34                            loc_72012:
0007CE34 22D8                       		move.l	(a0)+,(a1)+
0007CE36 51C8 FFFC                  		dbf	d0,loc_72012
0007CE3A                            
0007CE3A 1D7C 0080 0027             		move.b	#$80,$27(a6)
0007CE40 4216                       		clr.b	0(a6)
0007CE42 6000                       		bra.s	loc_7202C
0007CE44                            ; ===========================================================================
0007CE44                            
0007CE44                            loc_72024:
0007CE44 422E 0027                  		clr.b	$27(a6)
0007CE48 422E 0026                  		clr.b	$26(a6)
0007CE4C                            
0007CE4C                            loc_7202C:
0007CE4C 4EBA 0000                  		jsr	sub_725CA(pc)
0007CE50 2879 0007 C696             		movea.l	(off_719A0).l,a4
0007CE56 0407 0081                  		subi.b	#$81,d7
0007CE5A 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007CE60 2879 0007 C68E             		movea.l	(Go_MusicIndex).l,a4
0007CE66 E54F                       		lsl.w	#2,d7
0007CE68 2874 7000                  		movea.l	(a4,d7.w),a4
0007CE6C 7000                       		moveq	#0,d0
0007CE6E 3014                       		move.w	(a4),d0
0007CE70 D08C                       		add.l	a4,d0
0007CE72 2D40 0018                  		move.l	d0,$18(a6)
0007CE76 102C 0005                  		move.b	5(a4),d0
0007CE7A 1D40 0028                  		move.b	d0,$28(a6)
0007CE7E 4A2E 002A                  		tst.b	$2A(a6)
0007CE82 6700                       		beq.s	loc_72068
0007CE84 102E 0029                  		move.b	$29(a6),d0
0007CE88                            
0007CE88                            loc_72068:
0007CE88 1D40 0002                  		move.b	d0,2(a6)
0007CE8C 1D40 0001                  		move.b	d0,1(a6)
0007CE90 7200                       		moveq	#0,d1
0007CE92 264C                       		movea.l	a4,a3
0007CE94 5C4C                       		addq.w	#6,a4
0007CE96 7E00                       		moveq	#0,d7
0007CE98 1E2B 0002                  		move.b	2(a3),d7
0007CE9C 6700 0000                  		beq.w	loc_72114
0007CEA0 5307                       		subq.b	#1,d7
0007CEA2 123C 00C0                  		move.b	#-$40,d1
0007CEA6 182B 0004                  		move.b	4(a3),d4
0007CEAA 7C30                       		moveq	#$30,d6
0007CEAC 1A3C 0001                  		move.b	#1,d5
0007CEB0 43EE 0040                  		lea	$40(a6),a1
0007CEB4 45FA 0000                  		lea	byte_721BA(pc),a2
0007CEB8                            
0007CEB8                            loc_72098:
0007CEB8 08D1 0007                  		bset	#7,(a1)
0007CEBC 135A 0001                  		move.b	(a2)+,1(a1)
0007CEC0 1344 0002                  		move.b	d4,2(a1)
0007CEC4 1346 000D                  		move.b	d6,$D(a1)
0007CEC8 1341 000A                  		move.b	d1,$A(a1)
0007CECC 1345 000E                  		move.b	d5,$E(a1)
0007CED0 7000                       		moveq	#0,d0
0007CED2 301C                       		move.w	(a4)+,d0
0007CED4 D08B                       		add.l	a3,d0
0007CED6 2340 0004                  		move.l	d0,4(a1)
0007CEDA 335C 0008                  		move.w	(a4)+,8(a1)
0007CEDE D2C6                       		adda.w	d6,a1
0007CEE0 51CF FFD6                  		dbf	d7,loc_72098
0007CEE4 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0007CEEA 6600                       		bne.s	loc_720D8
0007CEEC 702B                       		moveq	#$2B,d0
0007CEEE 7200                       		moveq	#0,d1
0007CEF0 4EBA 0000                  		jsr	sub_7272E(pc)
0007CEF4 6000 0000                  		bra.w	loc_72114
0007CEF8                            ; ===========================================================================
0007CEF8                            
0007CEF8                            loc_720D8:
0007CEF8 7028                       		moveq	#$28,d0
0007CEFA 7206                       		moveq	#6,d1
0007CEFC 4EBA 0000                  		jsr	sub_7272E(pc)
0007CF00 103C 0042                  		move.b	#$42,d0
0007CF04 727F                       		moveq	#$7F,d1
0007CF06 4EBA 0000                  		jsr	sub_72764(pc)
0007CF0A 103C 004A                  		move.b	#$4A,d0
0007CF0E 727F                       		moveq	#$7F,d1
0007CF10 4EBA 0000                  		jsr	sub_72764(pc)
0007CF14 103C 0046                  		move.b	#$46,d0
0007CF18 727F                       		moveq	#$7F,d1
0007CF1A 4EBA 0000                  		jsr	sub_72764(pc)
0007CF1E 103C 004E                  		move.b	#$4E,d0
0007CF22 727F                       		moveq	#$7F,d1
0007CF24 4EBA 0000                  		jsr	sub_72764(pc)
0007CF28 103C 00B6                  		move.b	#-$4A,d0
0007CF2C 123C 00C0                  		move.b	#-$40,d1
0007CF30 4EBA 0000                  		jsr	sub_72764(pc)
0007CF34                            
0007CF34                            loc_72114:
0007CF34 7E00                       		moveq	#0,d7
0007CF36 1E2B 0003                  		move.b	3(a3),d7
0007CF3A 6700                       		beq.s	loc_72154
0007CF3C 5307                       		subq.b	#1,d7
0007CF3E 43EE 0190                  		lea	$190(a6),a1
0007CF42 45FA 0000                  		lea	byte_721C2(pc),a2
0007CF46                            
0007CF46                            loc_72126:
0007CF46 08D1 0007                  		bset	#7,(a1)
0007CF4A 135A 0001                  		move.b	(a2)+,1(a1)
0007CF4E 1344 0002                  		move.b	d4,2(a1)
0007CF52 1346 000D                  		move.b	d6,$D(a1)
0007CF56 1345 000E                  		move.b	d5,$E(a1)
0007CF5A 7000                       		moveq	#0,d0
0007CF5C 301C                       		move.w	(a4)+,d0
0007CF5E D08B                       		add.l	a3,d0
0007CF60 2340 0004                  		move.l	d0,4(a1)
0007CF64 335C 0008                  		move.w	(a4)+,8(a1)
0007CF68 101C                       		move.b	(a4)+,d0
0007CF6A 135C 000B                  		move.b	(a4)+,$B(a1)
0007CF6E D2C6                       		adda.w	d6,a1
0007CF70 51CF FFD4                  		dbf	d7,loc_72126
0007CF74                            
0007CF74                            loc_72154:
0007CF74 43EE 0220                  		lea	$220(a6),a1
0007CF78 7E05                       		moveq	#5,d7
0007CF7A                            
0007CF7A                            loc_7215A:
0007CF7A 4A11                       		tst.b	(a1)
0007CF7C 6A00 0000                  		bpl.w	loc_7217C
0007CF80 7000                       		moveq	#0,d0
0007CF82 1029 0001                  		move.b	1(a1),d0
0007CF86 6B00                       		bmi.s	loc_7216E
0007CF88 5500                       		subq.b	#2,d0
0007CF8A E508                       		lsl.b	#2,d0
0007CF8C 6000                       		bra.s	loc_72170
0007CF8E                            ; ===========================================================================
0007CF8E                            
0007CF8E                            loc_7216E:
0007CF8E E608                       		lsr.b	#3,d0
0007CF90                            
0007CF90                            loc_72170:
0007CF90 41FA 0000                  		lea	dword_722CC(pc),a0
0007CF94 2070 0000                  		movea.l	(a0,d0.w),a0
0007CF98 08D0 0002                  		bset	#2,(a0)
0007CF9C                            
0007CF9C                            loc_7217C:
0007CF9C D2C6                       		adda.w	d6,a1
0007CF9E 51CF FFDA                  		dbf	d7,loc_7215A
0007CFA2                            
0007CFA2 4A6E 0340                  		tst.w	$340(a6)
0007CFA6 6A00                       		bpl.s	loc_7218E
0007CFA8 08EE 0002 0100             		bset	#2,$100(a6)
0007CFAE                            
0007CFAE                            loc_7218E:
0007CFAE 4A6E 0370                  		tst.w	$370(a6)
0007CFB2 6A00                       		bpl.s	loc_7219A
0007CFB4 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007CFBA                            
0007CFBA                            loc_7219A:
0007CFBA 4BEE 0070                  		lea	$70(a6),a5
0007CFBE 7805                       		moveq	#5,d4
0007CFC0                            
0007CFC0                            loc_721A0:
0007CFC0 4EBA 0000                  		jsr	sub_726FE(pc)
0007CFC4 DAC6                       		adda.w	d6,a5
0007CFC6 51CC FFF8                  		dbf	d4,loc_721A0
0007CFCA 7802                       		moveq	#2,d4
0007CFCC                            
0007CFCC                            loc_721AC:
0007CFCC 4EBA 0000                  		jsr	sub_729A0(pc)
0007CFD0 DAC6                       		adda.w	d6,a5
0007CFD2 51CC FFF8                  		dbf	d4,loc_721AC
0007CFD6                            
0007CFD6                            loc_721B6:
0007CFD6 584F                       		addq.w	#4,sp
0007CFD8 4E75                       		rts	
0007CFDA                            ; ===========================================================================
0007CFDA 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0007CFE2                            		even
0007CFE2 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0007CFE6                            		even
0007CFE6                            ; ===========================================================================
0007CFE6                            ; ---------------------------------------------------------------------------
0007CFE6                            ; Play normal sound effect
0007CFE6                            ; ---------------------------------------------------------------------------
0007CFE6                            
0007CFE6                            Sound_A0toCF:				; XREF: Sound_ChkValue
0007CFE6 4A2E 0027                  		tst.b	$27(a6)
0007CFEA 6600 0000                  		bne.w	loc_722C6
0007CFEE 4A2E 0004                  		tst.b	4(a6)
0007CFF2 6600 0000                  		bne.w	loc_722C6
0007CFF6 4A2E 0024                  		tst.b	$24(a6)
0007CFFA 6600 0000                  		bne.w	loc_722C6
0007CFFE 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0007D002 6600                       		bne.s	Sound_notB5	; if not, branch
0007D004 4A2E 002B                  		tst.b	$2B(a6)
0007D008 6600                       		bne.s	loc_721EE
0007D00A 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0007D00E                            
0007D00E                            loc_721EE:
0007D00E 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0007D014                            
0007D014                            Sound_notB5:
0007D014 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0007D018 6600                       		bne.s	Sound_notA7	; if not, branch
0007D01A 4A2E 002C                  		tst.b	$2C(a6)
0007D01E 6600 0000                  		bne.w	locret_722C4
0007D022 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0007D028                            
0007D028                            Sound_notA7:
0007D028 2079 0007 C692             		movea.l	(Go_SoundIndex).l,a0
0007D02E 0407 00A0                  		subi.b	#$A0,d7
0007D032 E54F                       		lsl.w	#2,d7
0007D034 2670 7000                  		movea.l	(a0,d7.w),a3
0007D038 224B                       		movea.l	a3,a1
0007D03A 7200                       		moveq	#0,d1
0007D03C 3219                       		move.w	(a1)+,d1
0007D03E D28B                       		add.l	a3,d1
0007D040 1A19                       		move.b	(a1)+,d5
0007D042 1E19                       		move.b	(a1)+,d7
0007D044 5307                       		subq.b	#1,d7
0007D046 7C30                       		moveq	#$30,d6
0007D048                            
0007D048                            loc_72228:
0007D048 7600                       		moveq	#0,d3
0007D04A 1629 0001                  		move.b	1(a1),d3
0007D04E 1803                       		move.b	d3,d4
0007D050 6B00                       		bmi.s	loc_72244
0007D052 5543                       		subq.w	#2,d3
0007D054 E54B                       		lsl.w	#2,d3
0007D056 4BFA 0000                  		lea	dword_722CC(pc),a5
0007D05A 2A75 3000                  		movea.l	(a5,d3.w),a5
0007D05E 08D5 0002                  		bset	#2,(a5)
0007D062 6000                       		bra.s	loc_7226E
0007D064                            ; ===========================================================================
0007D064                            
0007D064                            loc_72244:
0007D064 E64B                       		lsr.w	#3,d3
0007D066 4BFA 0000                  		lea	dword_722CC(pc),a5
0007D06A 2A75 3000                  		movea.l	(a5,d3.w),a5
0007D06E 08D5 0002                  		bset	#2,(a5)
0007D072 0C04 00C0                  		cmpi.b	#$C0,d4
0007D076 6600                       		bne.s	loc_7226E
0007D078 1004                       		move.b	d4,d0
0007D07A 0000 001F                  		ori.b	#$1F,d0
0007D07E 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D084 0840 0005                  		bchg	#5,d0
0007D088 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D08E                            
0007D08E                            loc_7226E:
0007D08E 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0007D092 244D                       		movea.l	a5,a2
0007D094 700B                       		moveq	#$B,d0
0007D096                            
0007D096                            loc_72276:
0007D096 429A                       		clr.l	(a2)+
0007D098 51C8 FFFC                  		dbf	d0,loc_72276
0007D09C                            
0007D09C 3A99                       		move.w	(a1)+,(a5)
0007D09E 1B45 0002                  		move.b	d5,2(a5)
0007D0A2 7000                       		moveq	#0,d0
0007D0A4 3019                       		move.w	(a1)+,d0
0007D0A6 D08B                       		add.l	a3,d0
0007D0A8 2B40 0004                  		move.l	d0,4(a5)
0007D0AC 3B59 0008                  		move.w	(a1)+,8(a5)
0007D0B0 1B7C 0001 000E             		move.b	#1,$E(a5)
0007D0B6 1B46 000D                  		move.b	d6,$D(a5)
0007D0BA 4A04                       		tst.b	d4
0007D0BC 6B00                       		bmi.s	loc_722A8
0007D0BE 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D0C4 2B41 0020                  		move.l	d1,$20(a5)
0007D0C8                            
0007D0C8                            loc_722A8:
0007D0C8 51CF FF7E                  		dbf	d7,loc_72228
0007D0CC                            
0007D0CC 4A2E 0250                  		tst.b	$250(a6)
0007D0D0 6A00                       		bpl.s	loc_722B8
0007D0D2 08EE 0002 0340             		bset	#2,$340(a6)
0007D0D8                            
0007D0D8                            loc_722B8:
0007D0D8 4A2E 0310                  		tst.b	$310(a6)
0007D0DC 6A00                       		bpl.s	locret_722C4
0007D0DE 08EE 0002 0370             		bset	#2,$370(a6)
0007D0E4                            
0007D0E4                            locret_722C4:
0007D0E4 4E75                       		rts	
0007D0E6                            ; ===========================================================================
0007D0E6                            
0007D0E6                            loc_722C6:
0007D0E6 4216                       		clr.b	0(a6)
0007D0E8 4E75                       		rts	
0007D0EA                            ; ===========================================================================
0007D0EA 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0007D0EE 0000 0000                  		dc.l 0
0007D0F2 00FF F100                  		dc.l $FFF100
0007D0F6 00FF F130                  		dc.l $FFF130
0007D0FA 00FF F190                  		dc.l $FFF190
0007D0FE 00FF F1C0                  		dc.l $FFF1C0
0007D102 00FF F1F0                  		dc.l $FFF1F0
0007D106 00FF F1F0                  		dc.l $FFF1F0
0007D10A 00FF F220                  dword_722EC:	dc.l $FFF220
0007D10E 0000 0000                  		dc.l 0
0007D112 00FF F250                  		dc.l $FFF250
0007D116 00FF F280                  		dc.l $FFF280
0007D11A 00FF F2B0                  		dc.l $FFF2B0
0007D11E 00FF F2E0                  		dc.l $FFF2E0
0007D122 00FF F310                  		dc.l $FFF310
0007D126 00FF F310                  		dc.l $FFF310
0007D12A                            ; ===========================================================================
0007D12A                            ; ---------------------------------------------------------------------------
0007D12A                            ; Play GHZ waterfall sound
0007D12A                            ; ---------------------------------------------------------------------------
0007D12A                            
0007D12A                            Sound_D0toDF:				; XREF: Sound_ChkValue
0007D12A 4A2E 0027                  		tst.b	$27(a6)
0007D12E 6600 0000                  		bne.w	locret_723C6
0007D132 4A2E 0004                  		tst.b	4(a6)
0007D136 6600 0000                  		bne.w	locret_723C6
0007D13A 4A2E 0024                  		tst.b	$24(a6)
0007D13E 6600 0000                  		bne.w	locret_723C6
0007D142 2079 0007 C68A             		movea.l	(Go_SoundD0).l,a0
0007D148 0407 00D0                  		subi.b	#$D0,d7
0007D14C E54F                       		lsl.w	#2,d7
0007D14E 2670 7000                  		movea.l	(a0,d7.w),a3
0007D152 224B                       		movea.l	a3,a1
0007D154 7000                       		moveq	#0,d0
0007D156 3019                       		move.w	(a1)+,d0
0007D158 D08B                       		add.l	a3,d0
0007D15A 2D40 0020                  		move.l	d0,$20(a6)
0007D15E 1A19                       		move.b	(a1)+,d5
0007D160 1E19                       		move.b	(a1)+,d7
0007D162 5307                       		subq.b	#1,d7
0007D164 7C30                       		moveq	#$30,d6
0007D166                            
0007D166                            loc_72348:
0007D166 1829 0001                  		move.b	1(a1),d4
0007D16A 6B00                       		bmi.s	loc_7235A
0007D16C 08EE 0002 0100             		bset	#2,$100(a6)
0007D172 4BEE 0340                  		lea	$340(a6),a5
0007D176 6000                       		bra.s	loc_72364
0007D178                            ; ===========================================================================
0007D178                            
0007D178                            loc_7235A:
0007D178 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007D17E 4BEE 0370                  		lea	$370(a6),a5
0007D182                            
0007D182                            loc_72364:
0007D182 244D                       		movea.l	a5,a2
0007D184 700B                       		moveq	#$B,d0
0007D186                            
0007D186                            loc_72368:
0007D186 429A                       		clr.l	(a2)+
0007D188 51C8 FFFC                  		dbf	d0,loc_72368
0007D18C                            
0007D18C 3A99                       		move.w	(a1)+,(a5)
0007D18E 1B45 0002                  		move.b	d5,2(a5)
0007D192 7000                       		moveq	#0,d0
0007D194 3019                       		move.w	(a1)+,d0
0007D196 D08B                       		add.l	a3,d0
0007D198 2B40 0004                  		move.l	d0,4(a5)
0007D19C 3B59 0008                  		move.w	(a1)+,8(a5)
0007D1A0 1B7C 0001 000E             		move.b	#1,$E(a5)
0007D1A6 1B46 000D                  		move.b	d6,$D(a5)
0007D1AA 4A04                       		tst.b	d4
0007D1AC 6B00                       		bmi.s	loc_72396
0007D1AE 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D1B4                            
0007D1B4                            loc_72396:
0007D1B4 51CF FFB0                  		dbf	d7,loc_72348
0007D1B8                            
0007D1B8 4A2E 0250                  		tst.b	$250(a6)
0007D1BC 6A00                       		bpl.s	loc_723A6
0007D1BE 08EE 0002 0340             		bset	#2,$340(a6)
0007D1C4                            
0007D1C4                            loc_723A6:
0007D1C4 4A2E 0310                  		tst.b	$310(a6)
0007D1C8 6A00                       		bpl.s	locret_723C6
0007D1CA 08EE 0002 0370             		bset	#2,$370(a6)
0007D1D0 0004 001F                  		ori.b	#$1F,d4
0007D1D4 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D1DA 0844 0005                  		bchg	#5,d4
0007D1DE 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D1E4                            
0007D1E4                            locret_723C6:
0007D1E4 4E75                       		rts	
0007D1E6                            ; End of function Sound_ChkValue
0007D1E6                            
0007D1E6                            ; ===========================================================================
0007D1E6 00FF F100                  		dc.l $FFF100
0007D1EA 00FF F1F0                  		dc.l $FFF1F0
0007D1EE 00FF F250                  		dc.l $FFF250
0007D1F2 00FF F310                  		dc.l $FFF310
0007D1F6 00FF F340                  		dc.l $FFF340
0007D1FA 00FF F370                  		dc.l $FFF370
0007D1FE                            
0007D1FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D1FE                            
0007D1FE                            
0007D1FE                            Snd_FadeOut1:				; XREF: Sound_E0
0007D1FE 4216                       		clr.b	0(a6)
0007D200 4BEE 0220                  		lea	$220(a6),a5
0007D204 7E05                       		moveq	#5,d7
0007D206                            
0007D206                            loc_723EA:
0007D206 4A15                       		tst.b	(a5)
0007D208 6A00 0000                  		bpl.w	loc_72472
0007D20C 0895 0007                  		bclr	#7,(a5)
0007D210 7600                       		moveq	#0,d3
0007D212 162D 0001                  		move.b	1(a5),d3
0007D216 6B00                       		bmi.s	loc_7243C
0007D218 4EBA 0000                  		jsr	sub_726FE(pc)
0007D21C 0C03 0004                  		cmpi.b	#4,d3
0007D220 6600                       		bne.s	loc_72416
0007D222 4A2E 0340                  		tst.b	$340(a6)
0007D226 6A00                       		bpl.s	loc_72416
0007D228 4BEE 0340                  		lea	$340(a6),a5
0007D22C 226E 0020                  		movea.l	$20(a6),a1
0007D230 6000                       		bra.s	loc_72428
0007D232                            ; ===========================================================================
0007D232                            
0007D232                            loc_72416:
0007D232 5503                       		subq.b	#2,d3
0007D234 E50B                       		lsl.b	#2,d3
0007D236 41FA FEB2                  		lea	dword_722CC(pc),a0
0007D23A 264D                       		movea.l	a5,a3
0007D23C 2A70 3000                  		movea.l	(a0,d3.w),a5
0007D240 226E 0018                  		movea.l	$18(a6),a1
0007D244                            
0007D244                            loc_72428:
0007D244 0895 0002                  		bclr	#2,(a5)
0007D248 08D5 0001                  		bset	#1,(a5)
0007D24C 102D 000B                  		move.b	$B(a5),d0
0007D250 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D254 2A4B                       		movea.l	a3,a5
0007D256 6000                       		bra.s	loc_72472
0007D258                            ; ===========================================================================
0007D258                            
0007D258                            loc_7243C:
0007D258 4EBA 0000                  		jsr	sub_729A0(pc)
0007D25C 41EE 0370                  		lea	$370(a6),a0
0007D260 0C03 00E0                  		cmpi.b	#$E0,d3
0007D264 6700                       		beq.s	loc_7245A
0007D266 0C03 00C0                  		cmpi.b	#$C0,d3
0007D26A 6700                       		beq.s	loc_7245A
0007D26C E60B                       		lsr.b	#3,d3
0007D26E 41FA FE7A                  		lea	dword_722CC(pc),a0
0007D272 2070 3000                  		movea.l	(a0,d3.w),a0
0007D276                            
0007D276                            loc_7245A:
0007D276 0890 0002                  		bclr	#2,(a0)
0007D27A 08D0 0001                  		bset	#1,(a0)
0007D27E 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007D284 6600                       		bne.s	loc_72472
0007D286 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007D28E                            
0007D28E                            loc_72472:
0007D28E DAFC 0030                  		adda.w	#$30,a5
0007D292 51CF FF72                  		dbf	d7,loc_723EA
0007D296                            
0007D296 4E75                       		rts	
0007D298                            ; End of function Snd_FadeOut1
0007D298                            
0007D298                            
0007D298                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D298                            
0007D298                            
0007D298                            Snd_FadeOut2:				; XREF: Sound_E0
0007D298 4BEE 0340                  		lea	$340(a6),a5
0007D29C 4A15                       		tst.b	(a5)
0007D29E 6A00                       		bpl.s	loc_724AE
0007D2A0 0895 0007                  		bclr	#7,(a5)
0007D2A4 0815 0002                  		btst	#2,(a5)
0007D2A8 6600                       		bne.s	loc_724AE
0007D2AA 4EBA 0000                  		jsr	loc_7270A(pc)
0007D2AE 4BEE 0100                  		lea	$100(a6),a5
0007D2B2 0895 0002                  		bclr	#2,(a5)
0007D2B6 08D5 0001                  		bset	#1,(a5)
0007D2BA 4A15                       		tst.b	(a5)
0007D2BC 6A00                       		bpl.s	loc_724AE
0007D2BE 226E 0018                  		movea.l	$18(a6),a1
0007D2C2 102D 000B                  		move.b	$B(a5),d0
0007D2C6 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D2CA                            
0007D2CA                            loc_724AE:
0007D2CA 4BEE 0370                  		lea	$370(a6),a5
0007D2CE 4A15                       		tst.b	(a5)
0007D2D0 6A00                       		bpl.s	locret_724E4
0007D2D2 0895 0007                  		bclr	#7,(a5)
0007D2D6 0815 0002                  		btst	#2,(a5)
0007D2DA 6600                       		bne.s	locret_724E4
0007D2DC 4EBA 0000                  		jsr	loc_729A6(pc)
0007D2E0 4BEE 01F0                  		lea	$1F0(a6),a5
0007D2E4 0895 0002                  		bclr	#2,(a5)
0007D2E8 08D5 0001                  		bset	#1,(a5)
0007D2EC 4A15                       		tst.b	(a5)
0007D2EE 6A00                       		bpl.s	locret_724E4
0007D2F0 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0007D2F6 6600                       		bne.s	locret_724E4
0007D2F8 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0007D300                            
0007D300                            locret_724E4:
0007D300 4E75                       		rts	
0007D302                            ; End of function Snd_FadeOut2
0007D302                            
0007D302                            ; ===========================================================================
0007D302                            ; ---------------------------------------------------------------------------
0007D302                            ; Fade out music
0007D302                            ; ---------------------------------------------------------------------------
0007D302                            
0007D302                            Sound_E0:				; XREF: Sound_ExIndex
0007D302 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0007D306 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0007D30A 1D7C 0003 0006             		move.b	#3,6(a6)
0007D310 1D7C 0028 0004             		move.b	#$28,4(a6)
0007D316 422E 0040                  		clr.b	$40(a6)
0007D31A 422E 002A                  		clr.b	$2A(a6)
0007D31E 4E75                       		rts	
0007D320                            
0007D320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D320                            
0007D320                            
0007D320                            sub_72504:				; XREF: sub_71B4C
0007D320 102E 0006                  		move.b	6(a6),d0
0007D324 6700                       		beq.s	loc_72510
0007D326 532E 0006                  		subq.b	#1,6(a6)
0007D32A 4E75                       		rts	
0007D32C                            ; ===========================================================================
0007D32C                            
0007D32C                            loc_72510:
0007D32C 532E 0004                  		subq.b	#1,4(a6)
0007D330 6700 0000                  		beq.w	Sound_E4
0007D334 1D7C 0003 0006             		move.b	#3,6(a6)
0007D33A 4BEE 0070                  		lea	$70(a6),a5
0007D33E 7E05                       		moveq	#5,d7
0007D340                            
0007D340                            loc_72524:
0007D340 4A15                       		tst.b	(a5)
0007D342 6A00                       		bpl.s	loc_72538
0007D344 522D 0009                  		addq.b	#1,9(a5)
0007D348 6A00                       		bpl.s	loc_72534
0007D34A 0895 0007                  		bclr	#7,(a5)
0007D34E 6000                       		bra.s	loc_72538
0007D350                            ; ===========================================================================
0007D350                            
0007D350                            loc_72534:
0007D350 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D354                            
0007D354                            loc_72538:
0007D354 DAFC 0030                  		adda.w	#$30,a5
0007D358 51CF FFE6                  		dbf	d7,loc_72524
0007D35C                            
0007D35C 7E02                       		moveq	#2,d7
0007D35E                            
0007D35E                            loc_72542:
0007D35E 4A15                       		tst.b	(a5)
0007D360 6A00                       		bpl.s	loc_72560
0007D362 522D 0009                  		addq.b	#1,9(a5)
0007D366 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0007D36C 6500                       		bcs.s	loc_72558
0007D36E 0895 0007                  		bclr	#7,(a5)
0007D372 6000                       		bra.s	loc_72560
0007D374                            ; ===========================================================================
0007D374                            
0007D374                            loc_72558:
0007D374 1C2D 0009                  		move.b	9(a5),d6
0007D378 4EBA 0000                  		jsr	sub_7296A(pc)
0007D37C                            
0007D37C                            loc_72560:
0007D37C DAFC 0030                  		adda.w	#$30,a5
0007D380 51CF FFDC                  		dbf	d7,loc_72542
0007D384                            
0007D384 4E75                       		rts	
0007D386                            ; End of function sub_72504
0007D386                            
0007D386                            
0007D386                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D386                            
0007D386                            
0007D386                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007D386 7602                       		moveq	#2,d3
0007D388 7028                       		moveq	#$28,d0
0007D38A                            
0007D38A                            loc_7256E:
0007D38A 1203                       		move.b	d3,d1
0007D38C 4EBA 0000                  		jsr	sub_7272E(pc)
0007D390 5801                       		addq.b	#4,d1
0007D392 4EBA 0000                  		jsr	sub_7272E(pc)
0007D396 51CB FFF2                  		dbf	d3,loc_7256E
0007D39A                            
0007D39A 7040                       		moveq	#$40,d0
0007D39C 727F                       		moveq	#$7F,d1
0007D39E 7802                       		moveq	#2,d4
0007D3A0                            
0007D3A0                            loc_72584:
0007D3A0 7603                       		moveq	#3,d3
0007D3A2                            
0007D3A2                            loc_72586:
0007D3A2 4EBA 0000                  		jsr	sub_7272E(pc)
0007D3A6 4EBA 0000                  		jsr	sub_72764(pc)
0007D3AA 5840                       		addq.w	#4,d0
0007D3AC 51CB FFF4                  		dbf	d3,loc_72586
0007D3B0                            
0007D3B0 0400 000F                  		subi.b	#$F,d0
0007D3B4 51CC FFEA                  		dbf	d4,loc_72584
0007D3B8                            
0007D3B8 4E75                       		rts	
0007D3BA                            ; End of function sub_7256A
0007D3BA                            
0007D3BA                            ; ===========================================================================
0007D3BA                            ; ---------------------------------------------------------------------------
0007D3BA                            ; Stop music
0007D3BA                            ; ---------------------------------------------------------------------------
0007D3BA                            
0007D3BA                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007D3BA 702B                       		moveq	#$2B,d0
0007D3BC 123C 0080                  		move.b	#$80,d1
0007D3C0 4EBA 0000                  		jsr	sub_7272E(pc)
0007D3C4 7027                       		moveq	#$27,d0
0007D3C6 7200                       		moveq	#0,d1
0007D3C8 4EBA 0000                  		jsr	sub_7272E(pc)
0007D3CC 204E                       		movea.l	a6,a0
0007D3CE 303C 00E3                  		move.w	#$E3,d0
0007D3D2                            
0007D3D2                            loc_725B6:
0007D3D2 4298                       		clr.l	(a0)+
0007D3D4 51C8 FFFC                  		dbf	d0,loc_725B6
0007D3D8                            
0007D3D8 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0007D3DE 4EBA FFA6                  		jsr	sub_7256A(pc)
0007D3E2 6000 0000                  		bra.w	sub_729B6
0007D3E6                            
0007D3E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D3E6                            
0007D3E6                            
0007D3E6                            sub_725CA:				; XREF: Sound_ChkValue
0007D3E6 204E                       		movea.l	a6,a0
0007D3E8 1216                       		move.b	0(a6),d1
0007D3EA 142E 0027                  		move.b	$27(a6),d2
0007D3EE 162E 002A                  		move.b	$2A(a6),d3
0007D3F2 182E 0026                  		move.b	$26(a6),d4
0007D3F6 3A2E 000A                  		move.w	$A(a6),d5
0007D3FA 303C 0087                  		move.w	#$87,d0
0007D3FE                            
0007D3FE                            loc_725E4:
0007D3FE 4298                       		clr.l	(a0)+
0007D400 51C8 FFFC                  		dbf	d0,loc_725E4
0007D404                            
0007D404 1C81                       		move.b	d1,0(a6)
0007D406 1D42 0027                  		move.b	d2,$27(a6)
0007D40A 1D43 002A                  		move.b	d3,$2A(a6)
0007D40E 1D44 0026                  		move.b	d4,$26(a6)
0007D412 3D45 000A                  		move.w	d5,$A(a6)
0007D416 1D7C 0080 0009             		move.b	#$80,9(a6)
0007D41C 4EBA FF68                  		jsr	sub_7256A(pc)
0007D420 6000 0000                  		bra.w	sub_729B6
0007D424                            ; End of function sub_725CA
0007D424                            
0007D424                            
0007D424                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D424                            
0007D424                            
0007D424                            sub_7260C:				; XREF: sub_71B4C
0007D424 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007D42A 41EE 004E                  		lea	$4E(a6),a0
0007D42E 7030                       		moveq	#$30,d0
0007D430 7209                       		moveq	#9,d1
0007D432                            
0007D432                            loc_7261A:
0007D432 5210                       		addq.b	#1,(a0)
0007D434 D0C0                       		adda.w	d0,a0
0007D436 51C9 FFFA                  		dbf	d1,loc_7261A
0007D43A                            
0007D43A 4E75                       		rts	
0007D43C                            ; End of function sub_7260C
0007D43C                            
0007D43C                            ; ===========================================================================
0007D43C                            ; ---------------------------------------------------------------------------
0007D43C                            ; Speed	up music
0007D43C                            ; ---------------------------------------------------------------------------
0007D43C                            
0007D43C                            Sound_E2:				; XREF: Sound_ExIndex
0007D43C 4A2E 0027                  		tst.b	$27(a6)
0007D440 6600                       		bne.s	loc_7263E
0007D442 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007D448 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0007D44E 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0007D454 4E75                       		rts	
0007D456                            ; ===========================================================================
0007D456                            
0007D456                            loc_7263E:
0007D456 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007D45C 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0007D462 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007D468 4E75                       		rts	
0007D46A                            ; ===========================================================================
0007D46A                            ; ---------------------------------------------------------------------------
0007D46A                            ; Change music back to normal speed
0007D46A                            ; ---------------------------------------------------------------------------
0007D46A                            
0007D46A                            Sound_E3:				; XREF: Sound_ExIndex
0007D46A 4A2E 0027                  		tst.b	$27(a6)
0007D46E 6600                       		bne.s	loc_7266A
0007D470 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007D476 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007D47C 422E 002A                  		clr.b	$2A(a6)
0007D480 4E75                       		rts	
0007D482                            ; ===========================================================================
0007D482                            
0007D482                            loc_7266A:
0007D482 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007D488 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0007D48E 422E 03CA                  		clr.b	$3CA(a6)
0007D492 4E75                       		rts	
0007D494                            
0007D494                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D494                            
0007D494                            
0007D494                            sub_7267C:				; XREF: sub_71B4C
0007D494 4A2E 0025                  		tst.b	$25(a6)
0007D498 6700                       		beq.s	loc_72688
0007D49A 532E 0025                  		subq.b	#1,$25(a6)
0007D49E 4E75                       		rts	
0007D4A0                            ; ===========================================================================
0007D4A0                            
0007D4A0                            loc_72688:
0007D4A0 4A2E 0026                  		tst.b	$26(a6)
0007D4A4 6700                       		beq.s	loc_726D6
0007D4A6 532E 0026                  		subq.b	#1,$26(a6)
0007D4AA 1D7C 0002 0025             		move.b	#2,$25(a6)
0007D4B0 4BEE 0070                  		lea	$70(a6),a5
0007D4B4 7E05                       		moveq	#5,d7
0007D4B6                            
0007D4B6                            loc_7269E:
0007D4B6 4A15                       		tst.b	(a5)
0007D4B8 6A00                       		bpl.s	loc_726AA
0007D4BA 532D 0009                  		subq.b	#1,9(a5)
0007D4BE 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D4C2                            
0007D4C2                            loc_726AA:
0007D4C2 DAFC 0030                  		adda.w	#$30,a5
0007D4C6 51CF FFEE                  		dbf	d7,loc_7269E
0007D4CA 7E02                       		moveq	#2,d7
0007D4CC                            
0007D4CC                            loc_726B4:
0007D4CC 4A15                       		tst.b	(a5)
0007D4CE 6A00                       		bpl.s	loc_726CC
0007D4D0 532D 0009                  		subq.b	#1,9(a5)
0007D4D4 1C2D 0009                  		move.b	9(a5),d6
0007D4D8 0C06 0010                  		cmpi.b	#$10,d6
0007D4DC 6500                       		bcs.s	loc_726C8
0007D4DE 7C0F                       		moveq	#$F,d6
0007D4E0                            
0007D4E0                            loc_726C8:
0007D4E0 4EBA 0000                  		jsr	sub_7296A(pc)
0007D4E4                            
0007D4E4                            loc_726CC:
0007D4E4 DAFC 0030                  		adda.w	#$30,a5
0007D4E8 51CF FFE2                  		dbf	d7,loc_726B4
0007D4EC 4E75                       		rts	
0007D4EE                            ; ===========================================================================
0007D4EE                            
0007D4EE                            loc_726D6:
0007D4EE 08AE 0002 0040             		bclr	#2,$40(a6)
0007D4F4 422E 0024                  		clr.b	$24(a6)
0007D4F8 4E75                       		rts	
0007D4FA                            ; End of function sub_7267C
0007D4FA                            
0007D4FA                            ; ===========================================================================
0007D4FA                            
0007D4FA                            loc_726E2:				; XREF: sub_71CCA
0007D4FA 0815 0001                  		btst	#1,(a5)
0007D4FE 6600                       		bne.s	locret_726FC
0007D500 0815 0002                  		btst	#2,(a5)
0007D504 6600                       		bne.s	locret_726FC
0007D506 7028                       		moveq	#$28,d0
0007D508 122D 0001                  		move.b	1(a5),d1
0007D50C 0001 00F0                  		ori.b	#-$10,d1
0007D510 6000 0000                  		bra.w	sub_7272E
0007D514                            ; ===========================================================================
0007D514                            
0007D514                            locret_726FC:
0007D514 4E75                       		rts	
0007D516                            
0007D516                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D516                            
0007D516                            
0007D516                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0007D516 0815 0004                  		btst	#4,(a5)
0007D51A 6600                       		bne.s	locret_72714
0007D51C 0815 0002                  		btst	#2,(a5)
0007D520 6600                       		bne.s	locret_72714
0007D522                            
0007D522                            loc_7270A:				; XREF: Snd_FadeOut2
0007D522 7028                       		moveq	#$28,d0
0007D524 122D 0001                  		move.b	1(a5),d1
0007D528 6000 0000                  		bra.w	sub_7272E
0007D52C                            ; ===========================================================================
0007D52C                            
0007D52C                            locret_72714:
0007D52C 4E75                       		rts	
0007D52E                            ; End of function sub_726FE
0007D52E                            
0007D52E                            ; ===========================================================================
0007D52E                            
0007D52E                            loc_72716:				; XREF: sub_72A5A
0007D52E 0815 0002                  		btst	#2,(a5)
0007D532 6600                       		bne.s	locret_72720
0007D534 6000 0000                  		bra.w	sub_72722
0007D538                            ; ===========================================================================
0007D538                            
0007D538                            locret_72720:
0007D538 4E75                       		rts	
0007D53A                            
0007D53A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D53A                            
0007D53A                            
0007D53A                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007D53A 082D 0002 0001             		btst	#2,1(a5)
0007D540 6600                       		bne.s	loc_7275A
0007D542 D02D 0001                  		add.b	1(a5),d0
0007D546                            ; End of function sub_72722
0007D546                            
0007D546                            
0007D546                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D546                            
0007D546                            
0007D546                            sub_7272E:				; XREF: loc_71E6A
0007D546 1439 00A0 4000             		move.b	($A04000).l,d2
0007D54C 0802 0007                  		btst	#7,d2
0007D550 66F4                       		bne.s	sub_7272E
0007D552 13C0 00A0 4000             		move.b	d0,($A04000).l
0007D558 4E71                       		nop	
0007D55A 4E71                       		nop	
0007D55C 4E71                       		nop	
0007D55E                            
0007D55E                            loc_72746:
0007D55E 1439 00A0 4000             		move.b	($A04000).l,d2
0007D564 0802 0007                  		btst	#7,d2
0007D568 66F4                       		bne.s	loc_72746
0007D56A                            
0007D56A 13C1 00A0 4001             		move.b	d1,($A04001).l
0007D570 4E75                       		rts	
0007D572                            ; End of function sub_7272E
0007D572                            
0007D572                            ; ===========================================================================
0007D572                            
0007D572                            loc_7275A:				; XREF: sub_72722
0007D572 142D 0001                  		move.b	1(a5),d2
0007D576 0882 0002                  		bclr	#2,d2
0007D57A D002                       		add.b	d2,d0
0007D57C                            
0007D57C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D57C                            
0007D57C                            
0007D57C                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007D57C 1439 00A0 4000             		move.b	($A04000).l,d2
0007D582 0802 0007                  		btst	#7,d2
0007D586 66F4                       		bne.s	sub_72764
0007D588 13C0 00A0 4002             		move.b	d0,($A04002).l
0007D58E 4E71                       		nop	
0007D590 4E71                       		nop	
0007D592 4E71                       		nop	
0007D594                            
0007D594                            loc_7277C:
0007D594 1439 00A0 4000             		move.b	($A04000).l,d2
0007D59A 0802 0007                  		btst	#7,d2
0007D59E 66F4                       		bne.s	loc_7277C
0007D5A0                            
0007D5A0 13C1 00A0 4003             		move.b	d1,($A04003).l
0007D5A6 4E75                       		rts	
0007D5A8                            ; End of function sub_72764
0007D5A8                            
0007D5A8                            ; ===========================================================================
0007D5A8 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007D5BA 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007D5CC 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007D5DC 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007D5EC 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007D5FC 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007D60C 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0007D61C 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007D62C 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007D63C 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007D64C 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0007D65C 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007D668                            
0007D668                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D668                            
0007D668                            
0007D668                            sub_72850:				; XREF: sub_71B4C
0007D668 532D 000E                  		subq.b	#1,$E(a5)
0007D66C 6600                       		bne.s	loc_72866
0007D66E 0895 0004                  		bclr	#4,(a5)
0007D672 4EBA 0000                  		jsr	sub_72878(pc)
0007D676 4EBA 0000                  		jsr	sub_728DC(pc)
0007D67A 6000 0000                  		bra.w	loc_7292E
0007D67E                            ; ===========================================================================
0007D67E                            
0007D67E                            loc_72866:
0007D67E 4EBA F444                  		jsr	sub_71D9E(pc)
0007D682 4EBA 0000                  		jsr	sub_72926(pc)
0007D686 4EBA F464                  		jsr	sub_71DC6(pc)
0007D68A 4EBA 0000                  		jsr	sub_728E2(pc)
0007D68E 4E75                       		rts	
0007D690                            ; End of function sub_72850
0007D690                            
0007D690                            
0007D690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D690                            
0007D690                            
0007D690                            sub_72878:				; XREF: sub_72850
0007D690 0895 0001                  		bclr	#1,(a5)
0007D694 286D 0004                  		movea.l	4(a5),a4
0007D698                            
0007D698                            loc_72880:
0007D698 7A00                       		moveq	#0,d5
0007D69A 1A1C                       		move.b	(a4)+,d5
0007D69C 0C05 00E0                  		cmpi.b	#$E0,d5
0007D6A0 6500                       		bcs.s	loc_72890
0007D6A2 4EBA 0000                  		jsr	sub_72A5A(pc)
0007D6A6 60F0                       		bra.s	loc_72880
0007D6A8                            ; ===========================================================================
0007D6A8                            
0007D6A8                            loc_72890:
0007D6A8 4A05                       		tst.b	d5
0007D6AA 6A00                       		bpl.s	loc_728A4
0007D6AC 4EBA 0000                  		jsr	sub_728AC(pc)
0007D6B0 1A1C                       		move.b	(a4)+,d5
0007D6B2 4A05                       		tst.b	d5
0007D6B4 6A00                       		bpl.s	loc_728A4
0007D6B6 534C                       		subq.w	#1,a4
0007D6B8 6000 F3CC                  		bra.w	sub_71D60
0007D6BC                            ; ===========================================================================
0007D6BC                            
0007D6BC                            loc_728A4:
0007D6BC 4EBA F3A8                  		jsr	sub_71D40(pc)
0007D6C0 6000 F3C4                  		bra.w	sub_71D60
0007D6C4                            ; End of function sub_72878
0007D6C4                            
0007D6C4                            
0007D6C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D6C4                            
0007D6C4                            
0007D6C4                            sub_728AC:				; XREF: sub_72878
0007D6C4 0405 0081                  		subi.b	#$81,d5
0007D6C8 6500                       		bcs.s	loc_728CA
0007D6CA DA2D 0008                  		add.b	8(a5),d5
0007D6CE 0245 007F                  		andi.w	#$7F,d5
0007D6D2 E34D                       		lsl.w	#1,d5
0007D6D4 41FA 0000                  		lea	word_729CE(pc),a0
0007D6D8 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0007D6DE 6000 F3A6                  		bra.w	sub_71D60
0007D6E2                            ; ===========================================================================
0007D6E2                            
0007D6E2                            loc_728CA:
0007D6E2 08D5 0001                  		bset	#1,(a5)
0007D6E6 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0007D6EC 4EBA F398                  		jsr	sub_71D60(pc)
0007D6F0 6000 0000                  		bra.w	sub_729A0
0007D6F4                            ; End of function sub_728AC
0007D6F4                            
0007D6F4                            
0007D6F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D6F4                            
0007D6F4                            
0007D6F4                            sub_728DC:				; XREF: sub_72850
0007D6F4 3C2D 0010                  		move.w	$10(a5),d6
0007D6F8 6B00                       		bmi.s	loc_72920
0007D6FA                            ; End of function sub_728DC
0007D6FA                            
0007D6FA                            
0007D6FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D6FA                            
0007D6FA                            
0007D6FA                            sub_728E2:				; XREF: sub_72850
0007D6FA 102D 001E                  		move.b	$1E(a5),d0
0007D6FE 4880                       		ext.w	d0
0007D700 DC40                       		add.w	d0,d6
0007D702 0815 0002                  		btst	#2,(a5)
0007D706 6600                       		bne.s	locret_7291E
0007D708 0815 0001                  		btst	#1,(a5)
0007D70C 6600                       		bne.s	locret_7291E
0007D70E 102D 0001                  		move.b	1(a5),d0
0007D712 0C00 00E0                  		cmpi.b	#$E0,d0
0007D716 6600                       		bne.s	loc_72904
0007D718 103C 00C0                  		move.b	#$C0,d0
0007D71C                            
0007D71C                            loc_72904:
0007D71C 3206                       		move.w	d6,d1
0007D71E 0201 000F                  		andi.b	#$F,d1
0007D722 8001                       		or.b	d1,d0
0007D724 E84E                       		lsr.w	#4,d6
0007D726 0206 003F                  		andi.b	#$3F,d6
0007D72A 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D730 13C6 00C0 0011             		move.b	d6,($C00011).l
0007D736                            
0007D736                            locret_7291E:
0007D736 4E75                       		rts	
0007D738                            ; End of function sub_728E2
0007D738                            
0007D738                            ; ===========================================================================
0007D738                            
0007D738                            loc_72920:				; XREF: sub_728DC
0007D738 08D5 0001                  		bset	#1,(a5)
0007D73C 4E75                       		rts	
0007D73E                            
0007D73E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D73E                            
0007D73E                            
0007D73E                            sub_72926:				; XREF: sub_72850
0007D73E 4A2D 000B                  		tst.b	$B(a5)
0007D742 6700 0000                  		beq.w	locret_7298A
0007D746                            
0007D746                            loc_7292E:				; XREF: sub_72850
0007D746 1C2D 0009                  		move.b	9(a5),d6
0007D74A 7000                       		moveq	#0,d0
0007D74C 102D 000B                  		move.b	$B(a5),d0
0007D750 6700                       		beq.s	sub_7296A
0007D752 2079 0007 C69A             		movea.l	(Go_PSGIndex).l,a0
0007D758 5340                       		subq.w	#1,d0
0007D75A E548                       		lsl.w	#2,d0
0007D75C 2070 0000                  		movea.l	(a0,d0.w),a0
0007D760 102D 000C                  		move.b	$C(a5),d0
0007D764 1030 0000                  		move.b	(a0,d0.w),d0
0007D768 522D 000C                  		addq.b	#1,$C(a5)
0007D76C 0800 0007                  		btst	#7,d0
0007D770 6700                       		beq.s	loc_72960
0007D772 0C00 0080                  		cmpi.b	#$80,d0
0007D776 6700                       		beq.s	loc_7299A
0007D778                            
0007D778                            loc_72960:
0007D778 DC40                       		add.w	d0,d6
0007D77A 0C06 0010                  		cmpi.b	#$10,d6
0007D77E 6500                       		bcs.s	sub_7296A
0007D780 7C0F                       		moveq	#$F,d6
0007D782                            ; End of function sub_72926
0007D782                            
0007D782                            
0007D782                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D782                            
0007D782                            
0007D782                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0007D782 0815 0001                  		btst	#1,(a5)
0007D786 6600                       		bne.s	locret_7298A
0007D788 0815 0002                  		btst	#2,(a5)
0007D78C 6600                       		bne.s	locret_7298A
0007D78E 0815 0004                  		btst	#4,(a5)
0007D792 6600                       		bne.s	loc_7298C
0007D794                            
0007D794                            loc_7297C:
0007D794 8C2D 0001                  		or.b	1(a5),d6
0007D798 0606 0010                  		addi.b	#$10,d6
0007D79C 13C6 00C0 0011             		move.b	d6,($C00011).l
0007D7A2                            
0007D7A2                            locret_7298A:
0007D7A2 4E75                       		rts	
0007D7A4                            ; ===========================================================================
0007D7A4                            
0007D7A4                            loc_7298C:
0007D7A4 4A2D 0013                  		tst.b	$13(a5)
0007D7A8 67EA                       		beq.s	loc_7297C
0007D7AA 4A2D 0012                  		tst.b	$12(a5)
0007D7AE 66E4                       		bne.s	loc_7297C
0007D7B0 4E75                       		rts	
0007D7B2                            ; End of function sub_7296A
0007D7B2                            
0007D7B2                            ; ===========================================================================
0007D7B2                            
0007D7B2                            loc_7299A:				; XREF: sub_72926
0007D7B2 532D 000C                  		subq.b	#1,$C(a5)
0007D7B6 4E75                       		rts	
0007D7B8                            
0007D7B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D7B8                            
0007D7B8                            
0007D7B8                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0007D7B8 0815 0002                  		btst	#2,(a5)
0007D7BC 6600                       		bne.s	locret_729B4
0007D7BE                            
0007D7BE                            loc_729A6:				; XREF: Snd_FadeOut2
0007D7BE 102D 0001                  		move.b	1(a5),d0
0007D7C2 0000 001F                  		ori.b	#$1F,d0
0007D7C6 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D7CC                            
0007D7CC                            locret_729B4:
0007D7CC 4E75                       		rts	
0007D7CE                            ; End of function sub_729A0
0007D7CE                            
0007D7CE                            
0007D7CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D7CE                            
0007D7CE                            
0007D7CE                            sub_729B6:				; XREF: loc_71E7C
0007D7CE 41F9 00C0 0011             		lea	($C00011).l,a0
0007D7D4 10BC 009F                  		move.b	#$9F,(a0)
0007D7D8 10BC 00BF                  		move.b	#$BF,(a0)
0007D7DC 10BC 00DF                  		move.b	#$DF,(a0)
0007D7E0 10BC 00FF                  		move.b	#$FF,(a0)
0007D7E4 4E75                       		rts	
0007D7E6                            ; End of function sub_729B6
0007D7E6                            
0007D7E6                            ; ===========================================================================
0007D7E6 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0007D7F8 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0007D80A 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0007D81E 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0007D832 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0007D846 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0007D85A 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0007D86E 0011 0000                  		dc.w $11, 0
0007D872                            
0007D872                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D872                            
0007D872                            
0007D872                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007D872 0445 00E0                  		subi.w	#$E0,d5
0007D876 E54D                       		lsl.w	#2,d5
0007D878 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0007D87C                            ; End of function sub_72A5A
0007D87C                            
0007D87C                            ; ===========================================================================
0007D87C                            
0007D87C                            loc_72A64:
0007D87C 6000 0000                  		bra.w	loc_72ACC
0007D880                            ; ===========================================================================
0007D880 6000 0000                  		bra.w	loc_72AEC
0007D884                            ; ===========================================================================
0007D884 6000 0000                  		bra.w	loc_72AF2
0007D888                            ; ===========================================================================
0007D888 6000 0000                  		bra.w	loc_72AF8
0007D88C                            ; ===========================================================================
0007D88C 6000 0000                  		bra.w	loc_72B14
0007D890                            ; ===========================================================================
0007D890 6000 0000                  		bra.w	loc_72B9E
0007D894                            ; ===========================================================================
0007D894 6000 0000                  		bra.w	loc_72BA4
0007D898                            ; ===========================================================================
0007D898 6000 0000                  		bra.w	loc_72BAE
0007D89C                            ; ===========================================================================
0007D89C 6000 0000                  		bra.w	loc_72BB4
0007D8A0                            ; ===========================================================================
0007D8A0 6000 0000                  		bra.w	loc_72BBE
0007D8A4                            ; ===========================================================================
0007D8A4 6000 0000                  		bra.w	loc_72BC6
0007D8A8                            ; ===========================================================================
0007D8A8 6000 0000                  		bra.w	loc_72BD0
0007D8AC                            ; ===========================================================================
0007D8AC 6000 0000                  		bra.w	loc_72BE6
0007D8B0                            ; ===========================================================================
0007D8B0 6000 0000                  		bra.w	loc_72BEE
0007D8B4                            ; ===========================================================================
0007D8B4 6000 0000                  		bra.w	loc_72BF4
0007D8B8                            ; ===========================================================================
0007D8B8 6000 0000                  		bra.w	loc_72C26
0007D8BC                            ; ===========================================================================
0007D8BC 6000 0000                  		bra.w	loc_72D30
0007D8C0                            ; ===========================================================================
0007D8C0 6000 0000                  		bra.w	loc_72D52
0007D8C4                            ; ===========================================================================
0007D8C4 6000 0000                  		bra.w	loc_72D58
0007D8C8                            ; ===========================================================================
0007D8C8 6000 0000                  		bra.w	loc_72E06
0007D8CC                            ; ===========================================================================
0007D8CC 6000 0000                  		bra.w	loc_72E20
0007D8D0                            ; ===========================================================================
0007D8D0 6000 0000                  		bra.w	loc_72E26
0007D8D4                            ; ===========================================================================
0007D8D4 6000 0000                  		bra.w	loc_72E2C
0007D8D8                            ; ===========================================================================
0007D8D8 6000 0000                  		bra.w	loc_72E38
0007D8DC                            ; ===========================================================================
0007D8DC 6000 0000                  		bra.w	loc_72E52
0007D8E0                            ; ===========================================================================
0007D8E0 6000 0000                  		bra.w	loc_72E64
0007D8E4                            ; ===========================================================================
0007D8E4                            
0007D8E4                            loc_72ACC:				; XREF: loc_72A64
0007D8E4 121C                       		move.b	(a4)+,d1
0007D8E6 4A2D 0001                  		tst.b	1(a5)
0007D8EA 6B00                       		bmi.s	locret_72AEA
0007D8EC 102D 000A                  		move.b	$A(a5),d0
0007D8F0 0200 0037                  		andi.b	#$37,d0
0007D8F4 8200                       		or.b	d0,d1
0007D8F6 1B41 000A                  		move.b	d1,$A(a5)
0007D8FA 103C 00B4                  		move.b	#$B4,d0
0007D8FE 6000 FC2E                  		bra.w	loc_72716
0007D902                            ; ===========================================================================
0007D902                            
0007D902                            locret_72AEA:
0007D902 4E75                       		rts	
0007D904                            ; ===========================================================================
0007D904                            
0007D904                            loc_72AEC:				; XREF: loc_72A64
0007D904 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0007D908 4E75                       		rts	
0007D90A                            ; ===========================================================================
0007D90A                            
0007D90A                            loc_72AF2:				; XREF: loc_72A64
0007D90A 1D5C 0007                  		move.b	(a4)+,7(a6)
0007D90E 4E75                       		rts	
0007D910                            ; ===========================================================================
0007D910                            
0007D910                            loc_72AF8:				; XREF: loc_72A64
0007D910 7000                       		moveq	#0,d0
0007D912 102D 000D                  		move.b	$D(a5),d0
0007D916 2875 0000                  		movea.l	(a5,d0.w),a4
0007D91A 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0007D922 544C                       		addq.w	#2,a4
0007D924 5800                       		addq.b	#4,d0
0007D926 1B40 000D                  		move.b	d0,$D(a5)
0007D92A 4E75                       		rts	
0007D92C                            ; ===========================================================================
0007D92C                            
0007D92C                            loc_72B14:				; XREF: loc_72A64
0007D92C 204E                       		movea.l	a6,a0
0007D92E 43EE 03A0                  		lea	$3A0(a6),a1
0007D932 303C 0087                  		move.w	#$87,d0
0007D936                            
0007D936                            loc_72B1E:
0007D936 20D9                       		move.l	(a1)+,(a0)+
0007D938 51C8 FFFC                  		dbf	d0,loc_72B1E
0007D93C                            
0007D93C 08EE 0002 0040             		bset	#2,$40(a6)
0007D942 264D                       		movea.l	a5,a3
0007D944 1C3C 0028                  		move.b	#$28,d6
0007D948 9C2E 0026                  		sub.b	$26(a6),d6
0007D94C 7E05                       		moveq	#5,d7
0007D94E 4BEE 0070                  		lea	$70(a6),a5
0007D952                            
0007D952                            loc_72B3A:
0007D952 0815 0007                  		btst	#7,(a5)
0007D956 6700                       		beq.s	loc_72B5C
0007D958 08D5 0001                  		bset	#1,(a5)
0007D95C DD2D 0009                  		add.b	d6,9(a5)
0007D960 0815 0002                  		btst	#2,(a5)
0007D964 6600                       		bne.s	loc_72B5C
0007D966 7000                       		moveq	#0,d0
0007D968 102D 000B                  		move.b	$B(a5),d0
0007D96C 226E 0018                  		movea.l	$18(a6),a1
0007D970 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D974                            
0007D974                            loc_72B5C:
0007D974 DAFC 0030                  		adda.w	#$30,a5
0007D978 51CF FFD8                  		dbf	d7,loc_72B3A
0007D97C                            
0007D97C 7E02                       		moveq	#2,d7
0007D97E                            
0007D97E                            loc_72B66:
0007D97E 0815 0007                  		btst	#7,(a5)
0007D982 6700                       		beq.s	loc_72B78
0007D984 08D5 0001                  		bset	#1,(a5)
0007D988 4EBA FE2E                  		jsr	sub_729A0(pc)
0007D98C DD2D 0009                  		add.b	d6,9(a5)
0007D990                            
0007D990                            loc_72B78:
0007D990 DAFC 0030                  		adda.w	#$30,a5
0007D994 51CF FFE8                  		dbf	d7,loc_72B66
0007D998 2A4B                       		movea.l	a3,a5
0007D99A 1D7C 0080 0024             		move.b	#$80,$24(a6)
0007D9A0 1D7C 0028 0026             		move.b	#$28,$26(a6)
0007D9A6 422E 0027                  		clr.b	$27(a6)
0007D9AA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0007D9B2 504F                       		addq.w	#8,sp
0007D9B4 4E75                       		rts	
0007D9B6                            ; ===========================================================================
0007D9B6                            
0007D9B6                            loc_72B9E:				; XREF: loc_72A64
0007D9B6 1B5C 0002                  		move.b	(a4)+,2(a5)
0007D9BA 4E75                       		rts	
0007D9BC                            ; ===========================================================================
0007D9BC                            
0007D9BC                            loc_72BA4:				; XREF: loc_72A64
0007D9BC 101C                       		move.b	(a4)+,d0
0007D9BE D12D 0009                  		add.b	d0,9(a5)
0007D9C2 6000 0000                  		bra.w	sub_72CB4
0007D9C6                            ; ===========================================================================
0007D9C6                            
0007D9C6                            loc_72BAE:				; XREF: loc_72A64
0007D9C6 08D5 0004                  		bset	#4,(a5)
0007D9CA 4E75                       		rts	
0007D9CC                            ; ===========================================================================
0007D9CC                            
0007D9CC                            loc_72BB4:				; XREF: loc_72A64
0007D9CC 1B54 0012                  		move.b	(a4),$12(a5)
0007D9D0 1B5C 0013                  		move.b	(a4)+,$13(a5)
0007D9D4 4E75                       		rts	
0007D9D6                            ; ===========================================================================
0007D9D6                            
0007D9D6                            loc_72BBE:				; XREF: loc_72A64
0007D9D6 101C                       		move.b	(a4)+,d0
0007D9D8 D12D 0008                  		add.b	d0,8(a5)
0007D9DC 4E75                       		rts	
0007D9DE                            ; ===========================================================================
0007D9DE                            
0007D9DE                            loc_72BC6:				; XREF: loc_72A64
0007D9DE 1D54 0002                  		move.b	(a4),2(a6)
0007D9E2 1D5C 0001                  		move.b	(a4)+,1(a6)
0007D9E6 4E75                       		rts	
0007D9E8                            ; ===========================================================================
0007D9E8                            
0007D9E8                            loc_72BD0:				; XREF: loc_72A64
0007D9E8 41EE 0040                  		lea	$40(a6),a0
0007D9EC 101C                       		move.b	(a4)+,d0
0007D9EE 7230                       		moveq	#$30,d1
0007D9F0 7409                       		moveq	#9,d2
0007D9F2                            
0007D9F2                            loc_72BDA:
0007D9F2 1140 0002                  		move.b	d0,2(a0)
0007D9F6 D0C1                       		adda.w	d1,a0
0007D9F8 51CA FFF8                  		dbf	d2,loc_72BDA
0007D9FC                            
0007D9FC 4E75                       		rts	
0007D9FE                            ; ===========================================================================
0007D9FE                            
0007D9FE                            loc_72BE6:				; XREF: loc_72A64
0007D9FE 101C                       		move.b	(a4)+,d0
0007DA00 D12D 0009                  		add.b	d0,9(a5)
0007DA04 4E75                       		rts	
0007DA06                            ; ===========================================================================
0007DA06                            
0007DA06                            loc_72BEE:				; XREF: loc_72A64
0007DA06 422E 002C                  		clr.b	$2C(a6)
0007DA0A 4E75                       		rts	
0007DA0C                            ; ===========================================================================
0007DA0C                            
0007DA0C                            loc_72BF4:				; XREF: loc_72A64
0007DA0C 0895 0007                  		bclr	#7,(a5)
0007DA10 0895 0004                  		bclr	#4,(a5)
0007DA14 4EBA FB00                  		jsr	sub_726FE(pc)
0007DA18 4A2E 0250                  		tst.b	$250(a6)
0007DA1C 6B00                       		bmi.s	loc_72C22
0007DA1E 264D                       		movea.l	a5,a3
0007DA20 4BEE 0100                  		lea	$100(a6),a5
0007DA24 226E 0018                  		movea.l	$18(a6),a1
0007DA28 0895 0002                  		bclr	#2,(a5)
0007DA2C 08D5 0001                  		bset	#1,(a5)
0007DA30 102D 000B                  		move.b	$B(a5),d0
0007DA34 4EBA 0000                  		jsr	sub_72C4E(pc)
0007DA38 2A4B                       		movea.l	a3,a5
0007DA3A                            
0007DA3A                            loc_72C22:
0007DA3A 504F                       		addq.w	#8,sp
0007DA3C 4E75                       		rts	
0007DA3E                            ; ===========================================================================
0007DA3E                            
0007DA3E                            loc_72C26:				; XREF: loc_72A64
0007DA3E 7000                       		moveq	#0,d0
0007DA40 101C                       		move.b	(a4)+,d0
0007DA42 1B40 000B                  		move.b	d0,$B(a5)
0007DA46 0815 0002                  		btst	#2,(a5)
0007DA4A 6600 0000                  		bne.w	locret_72CAA
0007DA4E 226E 0018                  		movea.l	$18(a6),a1
0007DA52 4A2E 000E                  		tst.b	$E(a6)
0007DA56 6700                       		beq.s	sub_72C4E
0007DA58 226D 0020                  		movea.l	$20(a5),a1
0007DA5C 4A2E 000E                  		tst.b	$E(a6)
0007DA60 6B00                       		bmi.s	sub_72C4E
0007DA62 226E 0020                  		movea.l	$20(a6),a1
0007DA66                            
0007DA66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA66                            
0007DA66                            
0007DA66                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0007DA66 5340                       		subq.w	#1,d0
0007DA68 6B00                       		bmi.s	loc_72C5C
0007DA6A 323C 0019                  		move.w	#$19,d1
0007DA6E                            
0007DA6E                            loc_72C56:
0007DA6E D2C1                       		adda.w	d1,a1
0007DA70 51C8 FFFC                  		dbf	d0,loc_72C56
0007DA74                            
0007DA74                            loc_72C5C:
0007DA74 1219                       		move.b	(a1)+,d1
0007DA76 1B41 001F                  		move.b	d1,$1F(a5)
0007DA7A 1801                       		move.b	d1,d4
0007DA7C 103C 00B0                  		move.b	#$B0,d0
0007DA80 4EBA FAB8                  		jsr	sub_72722(pc)
0007DA84 45FA 0000                  		lea	byte_72D18(pc),a2
0007DA88 7613                       		moveq	#$13,d3
0007DA8A                            
0007DA8A                            loc_72C72:
0007DA8A 101A                       		move.b	(a2)+,d0
0007DA8C 1219                       		move.b	(a1)+,d1
0007DA8E 4EBA FAAA                  		jsr	sub_72722(pc)
0007DA92 51CB FFF6                  		dbf	d3,loc_72C72
0007DA96 7A03                       		moveq	#3,d5
0007DA98 0244 0007                  		andi.w	#7,d4
0007DA9C 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0007DAA0 162D 0009                  		move.b	9(a5),d3
0007DAA4                            
0007DAA4                            loc_72C8C:
0007DAA4 101A                       		move.b	(a2)+,d0
0007DAA6 1219                       		move.b	(a1)+,d1
0007DAA8 E20C                       		lsr.b	#1,d4
0007DAAA 6400                       		bcc.s	loc_72C96
0007DAAC D203                       		add.b	d3,d1
0007DAAE                            
0007DAAE                            loc_72C96:
0007DAAE 4EBA FA8A                  		jsr	sub_72722(pc)
0007DAB2 51CD FFF0                  		dbf	d5,loc_72C8C
0007DAB6 103C 00B4                  		move.b	#$B4,d0
0007DABA 122D 000A                  		move.b	$A(a5),d1
0007DABE 4EBA FA7A                  		jsr	sub_72722(pc)
0007DAC2                            
0007DAC2                            locret_72CAA:
0007DAC2 4E75                       		rts	
0007DAC4                            ; End of function sub_72C4E
0007DAC4                            
0007DAC4                            ; ===========================================================================
0007DAC4 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0007DACC                            
0007DACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DACC                            
0007DACC                            
0007DACC                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0007DACC 0815 0002                  		btst	#2,(a5)
0007DAD0 6600                       		bne.s	locret_72D16
0007DAD2 7000                       		moveq	#0,d0
0007DAD4 102D 000B                  		move.b	$B(a5),d0
0007DAD8 226E 0018                  		movea.l	$18(a6),a1
0007DADC 4A2E 000E                  		tst.b	$E(a6)
0007DAE0 6700                       		beq.s	loc_72CD8
0007DAE2 226E 0020                  		movea.l	$20(a6),a1
0007DAE6 4A2E 000E                  		tst.b	$E(a6)
0007DAEA 6B00                       		bmi.s	loc_72CD8
0007DAEC 226E 0020                  		movea.l	$20(a6),a1
0007DAF0                            
0007DAF0                            loc_72CD8:
0007DAF0 5340                       		subq.w	#1,d0
0007DAF2 6B00                       		bmi.s	loc_72CE6
0007DAF4 323C 0019                  		move.w	#$19,d1
0007DAF8                            
0007DAF8                            loc_72CE0:
0007DAF8 D2C1                       		adda.w	d1,a1
0007DAFA 51C8 FFFC                  		dbf	d0,loc_72CE0
0007DAFE                            
0007DAFE                            loc_72CE6:
0007DAFE D2FC 0015                  		adda.w	#$15,a1
0007DB02 45FA 0000                  		lea	byte_72D2C(pc),a2
0007DB06 102D 001F                  		move.b	$1F(a5),d0
0007DB0A 0240 0007                  		andi.w	#7,d0
0007DB0E 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0007DB12 162D 0009                  		move.b	9(a5),d3
0007DB16 6B00                       		bmi.s	locret_72D16
0007DB18 7A03                       		moveq	#3,d5
0007DB1A                            
0007DB1A                            loc_72D02:
0007DB1A 101A                       		move.b	(a2)+,d0
0007DB1C 1219                       		move.b	(a1)+,d1
0007DB1E E20C                       		lsr.b	#1,d4
0007DB20 6400                       		bcc.s	loc_72D12
0007DB22 D203                       		add.b	d3,d1
0007DB24 6500                       		bcs.s	loc_72D12
0007DB26 4EBA FA12                  		jsr	sub_72722(pc)
0007DB2A                            
0007DB2A                            loc_72D12:
0007DB2A 51CD FFEE                  		dbf	d5,loc_72D02
0007DB2E                            
0007DB2E                            locret_72D16:
0007DB2E 4E75                       		rts	
0007DB30                            ; End of function sub_72CB4
0007DB30                            
0007DB30                            ; ===========================================================================
0007DB30 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0007DB3A 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0007DB44 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0007DB48                            ; ===========================================================================
0007DB48                            
0007DB48                            loc_72D30:				; XREF: loc_72A64
0007DB48 08D5 0003                  		bset	#3,(a5)
0007DB4C 2B4C 0014                  		move.l	a4,$14(a5)
0007DB50 1B5C 0018                  		move.b	(a4)+,$18(a5)
0007DB54 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007DB58 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007DB5C 101C                       		move.b	(a4)+,d0
0007DB5E E208                       		lsr.b	#1,d0
0007DB60 1B40 001B                  		move.b	d0,$1B(a5)
0007DB64 426D 001C                  		clr.w	$1C(a5)
0007DB68 4E75                       		rts	
0007DB6A                            ; ===========================================================================
0007DB6A                            
0007DB6A                            loc_72D52:				; XREF: loc_72A64
0007DB6A 08D5 0003                  		bset	#3,(a5)
0007DB6E 4E75                       		rts	
0007DB70                            ; ===========================================================================
0007DB70                            
0007DB70                            loc_72D58:				; XREF: loc_72A64
0007DB70 0895 0007                  		bclr	#7,(a5)
0007DB74 0895 0004                  		bclr	#4,(a5)
0007DB78 4A2D 0001                  		tst.b	1(a5)
0007DB7C 6B00                       		bmi.s	loc_72D74
0007DB7E 4A2E 0008                  		tst.b	8(a6)
0007DB82 6B00 0000                  		bmi.w	loc_72E02
0007DB86 4EBA F98E                  		jsr	sub_726FE(pc)
0007DB8A 6000                       		bra.s	loc_72D78
0007DB8C                            ; ===========================================================================
0007DB8C                            
0007DB8C                            loc_72D74:
0007DB8C 4EBA FC2A                  		jsr	sub_729A0(pc)
0007DB90                            
0007DB90                            loc_72D78:
0007DB90 4A2E 000E                  		tst.b	$E(a6)
0007DB94 6A00 0000                  		bpl.w	loc_72E02
0007DB98 4216                       		clr.b	0(a6)
0007DB9A 7000                       		moveq	#0,d0
0007DB9C 102D 0001                  		move.b	1(a5),d0
0007DBA0 6B00                       		bmi.s	loc_72DCC
0007DBA2 41FA F546                  		lea	dword_722CC(pc),a0
0007DBA6 264D                       		movea.l	a5,a3
0007DBA8 0C00 0004                  		cmpi.b	#4,d0
0007DBAC 6600                       		bne.s	loc_72DA8
0007DBAE 4A2E 0340                  		tst.b	$340(a6)
0007DBB2 6A00                       		bpl.s	loc_72DA8
0007DBB4 4BEE 0340                  		lea	$340(a6),a5
0007DBB8 226E 0020                  		movea.l	$20(a6),a1
0007DBBC 6000                       		bra.s	loc_72DB8
0007DBBE                            ; ===========================================================================
0007DBBE                            
0007DBBE                            loc_72DA8:
0007DBBE 5500                       		subq.b	#2,d0
0007DBC0 E508                       		lsl.b	#2,d0
0007DBC2 2A70 0000                  		movea.l	(a0,d0.w),a5
0007DBC6 4A15                       		tst.b	(a5)
0007DBC8 6A00                       		bpl.s	loc_72DC8
0007DBCA 226E 0018                  		movea.l	$18(a6),a1
0007DBCE                            
0007DBCE                            loc_72DB8:
0007DBCE 0895 0002                  		bclr	#2,(a5)
0007DBD2 08D5 0001                  		bset	#1,(a5)
0007DBD6 102D 000B                  		move.b	$B(a5),d0
0007DBDA 4EBA FE8A                  		jsr	sub_72C4E(pc)
0007DBDE                            
0007DBDE                            loc_72DC8:
0007DBDE 2A4B                       		movea.l	a3,a5
0007DBE0 6000                       		bra.s	loc_72E02
0007DBE2                            ; ===========================================================================
0007DBE2                            
0007DBE2                            loc_72DCC:
0007DBE2 41EE 0370                  		lea	$370(a6),a0
0007DBE6 4A10                       		tst.b	(a0)
0007DBE8 6A00                       		bpl.s	loc_72DE0
0007DBEA 0C00 00E0                  		cmpi.b	#$E0,d0
0007DBEE 6700                       		beq.s	loc_72DEA
0007DBF0 0C00 00C0                  		cmpi.b	#$C0,d0
0007DBF4 6700                       		beq.s	loc_72DEA
0007DBF6                            
0007DBF6                            loc_72DE0:
0007DBF6 41FA F4F2                  		lea	dword_722CC(pc),a0
0007DBFA E608                       		lsr.b	#3,d0
0007DBFC 2070 0000                  		movea.l	(a0,d0.w),a0
0007DC00                            
0007DC00                            loc_72DEA:
0007DC00 0890 0002                  		bclr	#2,(a0)
0007DC04 08D0 0001                  		bset	#1,(a0)
0007DC08 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007DC0E 6600                       		bne.s	loc_72E02
0007DC10 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007DC18                            
0007DC18                            loc_72E02:
0007DC18 504F                       		addq.w	#8,sp
0007DC1A 4E75                       		rts	
0007DC1C                            ; ===========================================================================
0007DC1C                            
0007DC1C                            loc_72E06:				; XREF: loc_72A64
0007DC1C 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0007DC22 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0007DC26 0815 0002                  		btst	#2,(a5)
0007DC2A 6600                       		bne.s	locret_72E1E
0007DC2C 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0007DC34                            
0007DC34                            locret_72E1E:
0007DC34 4E75                       		rts	
0007DC36                            ; ===========================================================================
0007DC36                            
0007DC36                            loc_72E20:				; XREF: loc_72A64
0007DC36 0895 0003                  		bclr	#3,(a5)
0007DC3A 4E75                       		rts	
0007DC3C                            ; ===========================================================================
0007DC3C                            
0007DC3C                            loc_72E26:				; XREF: loc_72A64
0007DC3C 1B5C 000B                  		move.b	(a4)+,$B(a5)
0007DC40 4E75                       		rts	
0007DC42                            ; ===========================================================================
0007DC42                            
0007DC42                            loc_72E2C:				; XREF: loc_72A64
0007DC42 101C                       		move.b	(a4)+,d0
0007DC44 E148                       		lsl.w	#8,d0
0007DC46 101C                       		move.b	(a4)+,d0
0007DC48 D8C0                       		adda.w	d0,a4
0007DC4A 534C                       		subq.w	#1,a4
0007DC4C 4E75                       		rts	
0007DC4E                            ; ===========================================================================
0007DC4E                            
0007DC4E                            loc_72E38:				; XREF: loc_72A64
0007DC4E 7000                       		moveq	#0,d0
0007DC50 101C                       		move.b	(a4)+,d0
0007DC52 121C                       		move.b	(a4)+,d1
0007DC54 4A35 0024                  		tst.b	$24(a5,d0.w)
0007DC58 6600                       		bne.s	loc_72E48
0007DC5A 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007DC5E                            
0007DC5E                            loc_72E48:
0007DC5E 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0007DC62 66DE                       		bne.s	loc_72E2C
0007DC64 544C                       		addq.w	#2,a4
0007DC66 4E75                       		rts	
0007DC68                            ; ===========================================================================
0007DC68                            
0007DC68                            loc_72E52:				; XREF: loc_72A64
0007DC68 7000                       		moveq	#0,d0
0007DC6A 102D 000D                  		move.b	$D(a5),d0
0007DC6E 5900                       		subq.b	#4,d0
0007DC70 2B8C 0000                  		move.l	a4,(a5,d0.w)
0007DC74 1B40 000D                  		move.b	d0,$D(a5)
0007DC78 60C8                       		bra.s	loc_72E2C
0007DC7A                            ; ===========================================================================
0007DC7A                            
0007DC7A                            loc_72E64:				; XREF: loc_72A64
0007DC7A 103C 0088                  		move.b	#$88,d0
0007DC7E 123C 000F                  		move.b	#$F,d1
0007DC82 4EBA F8C2                  		jsr	sub_7272E(pc)
0007DC86 103C 008C                  		move.b	#$8C,d0
0007DC8A 123C 000F                  		move.b	#$F,d1
0007DC8E 6000 F8B6                  		bra.w	sub_7272E
0007DC92                            ; ===========================================================================
0007DC92                            Kos_Z80:	incbin	sound\z80_1.bin
0007DD42 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0007DD44 21                         		dc.b $21
0007DD45 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0007DD47                            		incbin	sound\z80_2.bin
0007F3F2                            		even
0007F3F2                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
00085BF2                            		even
00085BF2                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
0008F490                            		even
0008F490                            Music83:	incbin	sound\music83.bin ; Marble Act 1
000930B0 00                         		even
000930B0                            Music84:	include	sound\music84.asm ; Star Light Act 1
000930B0                            music84_Header:
000930B0 =00000001                  smpsHeaderStartSong = 1
000930B0 0000                       	smpsHeaderVoice     music84_Voices
000930B2 0603                       	smpsHeaderChan      $06, $03
000930B4 0205                       	smpsHeaderTempo     $02, $05
000930B6                            
000930BA 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
000930BE 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
000930C2 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
000930C6 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
000930CA 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
000930CE 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
000930D4 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
000930DA 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
000930E0                            
000930E0                            ; FM1 Data
000930E0                            music84_FM1:
000930E0 E0C0                       	smpsPan             panCenter, $00
000930E4 E107                       	smpsAlterNote       $07
000930E6 9B03 8007                  	dc.b	nD2, $03, nRst, $07
000930EA E106                       	smpsAlterNote       $06
000930EC 9903 800B                  	dc.b	nC2, $03, nRst, $0B
000930F0 E10B                       	smpsAlterNote       $0B
000930F2 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
000930F8 E10C                       	smpsAlterNote       $0C
000930FA E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000930FD E10B                       	smpsAlterNote       $0B
000930FF E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093102 E109                       	smpsAlterNote       $09
00093104 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00093109 E108                       	smpsAlterNote       $08
0009310B 8001                       	dc.b	nRst, $01
0009310D E10B                       	smpsAlterNote       $0B
0009310F 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00093115 E107                       	smpsAlterNote       $07
00093117 9B03                       	dc.b	nD2, $03
00093119                            
00093119                            music84_Jump04:
00093119 E107                       	smpsAlterNote       $07
0009311B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009311F E10B                       	smpsAlterNote       $0B
00093121 A202 8001                  	dc.b	nA2, $02, nRst, $01
00093125 E107                       	smpsAlterNote       $07
00093127 9B03                       	dc.b	nD2, $03
00093129 E11A                       	smpsAlterNote       $1A
0009312B A301                       	dc.b	nBb2, $01
0009312D E1F2                       	smpsAlterNote       $F2
0009312F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093132 E1FF                       	smpsAlterNote       $FF
00093134 E701                       	dc.b	smpsNoAttack, $01
00093136 E111                       	smpsAlterNote       $11
00093138 E701                       	dc.b	smpsNoAttack, $01
0009313A E106                       	smpsAlterNote       $06
0009313C E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0009313F E107                       	smpsAlterNote       $07
00093141 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093145 E108                       	smpsAlterNote       $08
00093147 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0009314F E109                       	smpsAlterNote       $09
00093151 A003                       	dc.b	nG2, $03
00093153 E10C                       	smpsAlterNote       $0C
00093155 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093159 E1FD                       	smpsAlterNote       $FD
0009315B A401                       	dc.b	nB2, $01
0009315D E109                       	smpsAlterNote       $09
0009315F E701                       	dc.b	smpsNoAttack, $01
00093161 E106                       	smpsAlterNote       $06
00093163 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093166 E109                       	smpsAlterNote       $09
00093168 A007                       	dc.b	nG2, $07
0009316A E108                       	smpsAlterNote       $08
0009316C 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00093170 E107                       	smpsAlterNote       $07
00093172 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093178 E10B                       	smpsAlterNote       $0B
0009317A A203 8001                  	dc.b	nA2, $03, nRst, $01
0009317E E107                       	smpsAlterNote       $07
00093180 9B03                       	dc.b	nD2, $03
00093182 E11A                       	smpsAlterNote       $1A
00093184 A301                       	dc.b	nBb2, $01
00093186 E1F9                       	smpsAlterNote       $F9
00093188 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009318B E107                       	smpsAlterNote       $07
0009318D E701                       	dc.b	smpsNoAttack, $01
0009318F E111                       	smpsAlterNote       $11
00093191 E701                       	dc.b	smpsNoAttack, $01
00093193 E106                       	smpsAlterNote       $06
00093195 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0009319A E107                       	smpsAlterNote       $07
0009319C 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000931A4 E1EC                       	smpsAlterNote       $EC
000931A6 A101                       	dc.b	nAb2, $01
000931A8 E108                       	smpsAlterNote       $08
000931AA E701                       	dc.b	smpsNoAttack, $01
000931AC E116                       	smpsAlterNote       $16
000931AE E701                       	dc.b	smpsNoAttack, $01
000931B0 E1F5                       	smpsAlterNote       $F5
000931B2 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000931B5 E10B                       	smpsAlterNote       $0B
000931B7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000931BB E107                       	smpsAlterNote       $07
000931BD 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000931C3 E109                       	smpsAlterNote       $09
000931C5 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000931C9 E10B                       	smpsAlterNote       $0B
000931CB 9603                       	dc.b	nA1, $03
000931CD E107                       	smpsAlterNote       $07
000931CF 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000931D5 E10B                       	smpsAlterNote       $0B
000931D7 A203 8001                  	dc.b	nA2, $03, nRst, $01
000931DB E107                       	smpsAlterNote       $07
000931DD 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000931E1 E11A                       	smpsAlterNote       $1A
000931E3 A301                       	dc.b	nBb2, $01
000931E5 E1F9                       	smpsAlterNote       $F9
000931E7 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000931EA E107                       	smpsAlterNote       $07
000931EC E701                       	dc.b	smpsNoAttack, $01
000931EE E1FB                       	smpsAlterNote       $FB
000931F0 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000931F3 E106                       	smpsAlterNote       $06
000931F5 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000931F9 E107                       	smpsAlterNote       $07
000931FB 9B03                       	dc.b	nD2, $03
000931FD E108                       	smpsAlterNote       $08
000931FF 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00093205 E109                       	smpsAlterNote       $09
00093207 A002 8001                  	dc.b	nG2, $02, nRst, $01
0009320B E10C                       	smpsAlterNote       $0C
0009320D A303                       	dc.b	nBb2, $03
0009320F E1F0                       	smpsAlterNote       $F0
00093211 A401                       	dc.b	nB2, $01
00093213 E1FD                       	smpsAlterNote       $FD
00093215 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0009321A E106                       	smpsAlterNote       $06
0009321C 8001                       	dc.b	nRst, $01
0009321E E109                       	smpsAlterNote       $09
00093220 A006 8001                  	dc.b	nG2, $06, nRst, $01
00093224 E108                       	smpsAlterNote       $08
00093226 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0009322A E107                       	smpsAlterNote       $07
0009322C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093232 E10B                       	smpsAlterNote       $0B
00093234 A203                       	dc.b	nA2, $03
00093236 E107                       	smpsAlterNote       $07
00093238 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009323C E1F2                       	smpsAlterNote       $F2
0009323E A401                       	dc.b	nB2, $01
00093240 E1FF                       	smpsAlterNote       $FF
00093242 E701                       	dc.b	smpsNoAttack, $01
00093244 E107                       	smpsAlterNote       $07
00093246 E701                       	dc.b	smpsNoAttack, $01
00093248 E1FB                       	smpsAlterNote       $FB
0009324A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009324D E106                       	smpsAlterNote       $06
0009324F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093253 E107                       	smpsAlterNote       $07
00093255 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
0009325F E117                       	smpsAlterNote       $17
00093261 A001                       	dc.b	nG2, $01
00093263 E1FA                       	smpsAlterNote       $FA
00093265 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093268 E108                       	smpsAlterNote       $08
0009326A E701                       	dc.b	smpsNoAttack, $01
0009326C E1E7                       	smpsAlterNote       $E7
0009326E E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093271 E103                       	smpsAlterNote       $03
00093273 E701                       	dc.b	smpsNoAttack, $01
00093275 E10B                       	smpsAlterNote       $0B
00093277 E702                       	dc.b	smpsNoAttack, $02
00093279 E107                       	smpsAlterNote       $07
0009327B 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00093283 E106                       	smpsAlterNote       $06
00093285 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
0009328B E10C                       	smpsAlterNote       $0C
0009328D 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00093293 E109                       	smpsAlterNote       $09
00093295 9E03                       	dc.b	nF2, $03
00093297 E10C                       	smpsAlterNote       $0C
00093299 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0009329D E1EA                       	smpsAlterNote       $EA
0009329F A201                       	dc.b	nA2, $01
000932A1 E106                       	smpsAlterNote       $06
000932A3 E701                       	dc.b	smpsNoAttack, $01
000932A5 E1E2                       	smpsAlterNote       $E2
000932A7 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000932AA E1F0                       	smpsAlterNote       $F0
000932AC E701                       	dc.b	smpsNoAttack, $01
000932AE E10C                       	smpsAlterNote       $0C
000932B0 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000932BC E116                       	smpsAlterNote       $16
000932BE 9C01                       	dc.b	nEb2, $01
000932C0 E105                       	smpsAlterNote       $05
000932C2 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000932C5 E1F1                       	smpsAlterNote       $F1
000932C7 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000932CA E1FF                       	smpsAlterNote       $FF
000932CC E701                       	dc.b	smpsNoAttack, $01
000932CE E109                       	smpsAlterNote       $09
000932D0 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000932D4 E10C                       	smpsAlterNote       $0C
000932D6 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000932E2 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
000932E8 E109                       	smpsAlterNote       $09
000932EA 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000932EE E10C                       	smpsAlterNote       $0C
000932F0 9703                       	dc.b	nBb1, $03
000932F2 E11A                       	smpsAlterNote       $1A
000932F4 A101                       	dc.b	nAb2, $01
000932F6 E1FB                       	smpsAlterNote       $FB
000932F8 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000932FB E10A                       	smpsAlterNote       $0A
000932FD E701                       	dc.b	smpsNoAttack, $01
000932FF E1E8                       	smpsAlterNote       $E8
00093301 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093304 E106                       	smpsAlterNote       $06
00093306 E701                       	dc.b	smpsNoAttack, $01
00093308 E10C                       	smpsAlterNote       $0C
0009330A E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00093316 E1F9                       	smpsAlterNote       $F9
00093318 9D01                       	dc.b	nE2, $01
0009331A E108                       	smpsAlterNote       $08
0009331C E701                       	dc.b	smpsNoAttack, $01
0009331E E1F6                       	smpsAlterNote       $F6
00093320 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093323 E109                       	smpsAlterNote       $09
00093325 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00093329 E10C                       	smpsAlterNote       $0C
0009332B 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00093337 E108                       	smpsAlterNote       $08
00093339 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0009333F E106                       	smpsAlterNote       $06
00093341 A403 8001                  	dc.b	nB2, $03, nRst, $01
00093345 E108                       	smpsAlterNote       $08
00093347 9D03                       	dc.b	nE2, $03
00093349 E1EB                       	smpsAlterNote       $EB
0009334B A801                       	dc.b	nEb3, $01
0009334D E109                       	smpsAlterNote       $09
0009334F E701                       	dc.b	smpsNoAttack, $01
00093351 E1FA                       	smpsAlterNote       $FA
00093353 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00093356 E108                       	smpsAlterNote       $08
00093358 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00093364 E1E9                       	smpsAlterNote       $E9
00093366 A301                       	dc.b	nBb2, $01
00093368 E107                       	smpsAlterNote       $07
0009336A E701                       	dc.b	smpsNoAttack, $01
0009336C E1F0                       	smpsAlterNote       $F0
0009336E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093371 E1F7                       	smpsAlterNote       $F7
00093373 E701                       	dc.b	smpsNoAttack, $01
00093375 E107                       	smpsAlterNote       $07
00093377 E701                       	dc.b	smpsNoAttack, $01
00093379 E106                       	smpsAlterNote       $06
0009337B E701                       	dc.b	smpsNoAttack, $01
0009337D E108                       	smpsAlterNote       $08
0009337F 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00093385 E106                       	smpsAlterNote       $06
00093387 A403 8001                  	dc.b	nB2, $03, nRst, $01
0009338B E108                       	smpsAlterNote       $08
0009338D 9D03                       	dc.b	nE2, $03
0009338F E10B                       	smpsAlterNote       $0B
00093391 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
00093399 E108                       	smpsAlterNote       $08
0009339B 9D03                       	dc.b	nE2, $03
0009339D E10B                       	smpsAlterNote       $0B
0009339F 9603 8001                  	dc.b	nA1, $03, nRst, $01
000933A3 E113                       	smpsAlterNote       $13
000933A5 A001                       	dc.b	nG2, $01
000933A7 E118                       	smpsAlterNote       $18
000933A9 E701                       	dc.b	smpsNoAttack, $01
000933AB E1E9                       	smpsAlterNote       $E9
000933AD E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000933B0 E1F3                       	smpsAlterNote       $F3
000933B2 E701                       	dc.b	smpsNoAttack, $01
000933B4 E1FD                       	smpsAlterNote       $FD
000933B6 E701                       	dc.b	smpsNoAttack, $01
000933B8 E102                       	smpsAlterNote       $02
000933BA E701                       	dc.b	smpsNoAttack, $01
000933BC E107                       	smpsAlterNote       $07
000933BE 8001                       	dc.b	nRst, $01
000933C0 E10B                       	smpsAlterNote       $0B
000933C2 9603                       	dc.b	nA1, $03
000933C4 E10C                       	smpsAlterNote       $0C
000933C6 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
000933CC E10B                       	smpsAlterNote       $0B
000933CE 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000933DA 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
000933E0 E107                       	smpsAlterNote       $07
000933E2 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000933E8 E10B                       	smpsAlterNote       $0B
000933EA A203                       	dc.b	nA2, $03
000933EC E107                       	smpsAlterNote       $07
000933EE 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000933F2 E1F2                       	smpsAlterNote       $F2
000933F4 A401                       	dc.b	nB2, $01
000933F6 E1FF                       	smpsAlterNote       $FF
000933F8 E701                       	dc.b	smpsNoAttack, $01
000933FA E107                       	smpsAlterNote       $07
000933FC E701                       	dc.b	smpsNoAttack, $01
000933FE E1FB                       	smpsAlterNote       $FB
00093400 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093403 E106                       	smpsAlterNote       $06
00093405 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093409 E107                       	smpsAlterNote       $07
0009340B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0009340F E108                       	smpsAlterNote       $08
00093411 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00093417 E109                       	smpsAlterNote       $09
00093419 A003 8001                  	dc.b	nG2, $03, nRst, $01
0009341D E10C                       	smpsAlterNote       $0C
0009341F A302 8001                  	dc.b	nBb2, $02, nRst, $01
00093423 E1F0                       	smpsAlterNote       $F0
00093425 A401                       	dc.b	nB2, $01
00093427 E109                       	smpsAlterNote       $09
00093429 E701                       	dc.b	smpsNoAttack, $01
0009342B E106                       	smpsAlterNote       $06
0009342D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093430 E109                       	smpsAlterNote       $09
00093432 A007                       	dc.b	nG2, $07
00093434 E108                       	smpsAlterNote       $08
00093436 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0009343A E107                       	smpsAlterNote       $07
0009343C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093442 E10B                       	smpsAlterNote       $0B
00093444 A202 8001                  	dc.b	nA2, $02, nRst, $01
00093448 E107                       	smpsAlterNote       $07
0009344A 9B03                       	dc.b	nD2, $03
0009344C E11A                       	smpsAlterNote       $1A
0009344E A301                       	dc.b	nBb2, $01
00093450 E1F2                       	smpsAlterNote       $F2
00093452 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093455 E1FF                       	smpsAlterNote       $FF
00093457 E701                       	dc.b	smpsNoAttack, $01
00093459 E111                       	smpsAlterNote       $11
0009345B E701                       	dc.b	smpsNoAttack, $01
0009345D E106                       	smpsAlterNote       $06
0009345F E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093462 E107                       	smpsAlterNote       $07
00093464 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00093470 E117                       	smpsAlterNote       $17
00093472 A001                       	dc.b	nG2, $01
00093474 E1FA                       	smpsAlterNote       $FA
00093476 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093479 E116                       	smpsAlterNote       $16
0009347B E701                       	dc.b	smpsNoAttack, $01
0009347D E1F5                       	smpsAlterNote       $F5
0009347F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093482 E103                       	smpsAlterNote       $03
00093484 E701                       	dc.b	smpsNoAttack, $01
00093486 E10B                       	smpsAlterNote       $0B
00093488 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009348C E107                       	smpsAlterNote       $07
0009348E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093494 E109                       	smpsAlterNote       $09
00093496 9E03                       	dc.b	nF2, $03
00093498 E10B                       	smpsAlterNote       $0B
0009349A 9603 8001                  	dc.b	nA1, $03, nRst, $01
0009349E E107                       	smpsAlterNote       $07
000934A0 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000934A6 E10B                       	smpsAlterNote       $0B
000934A8 A203 8001                  	dc.b	nA2, $03, nRst, $01
000934AC E107                       	smpsAlterNote       $07
000934AE 9B03                       	dc.b	nD2, $03
000934B0 E11A                       	smpsAlterNote       $1A
000934B2 A301                       	dc.b	nBb2, $01
000934B4 E1F9                       	smpsAlterNote       $F9
000934B6 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000934B9 E107                       	smpsAlterNote       $07
000934BB E701                       	dc.b	smpsNoAttack, $01
000934BD E111                       	smpsAlterNote       $11
000934BF E701                       	dc.b	smpsNoAttack, $01
000934C1 E106                       	smpsAlterNote       $06
000934C3 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000934C8 E107                       	smpsAlterNote       $07
000934CA 9B03                       	dc.b	nD2, $03
000934CC E108                       	smpsAlterNote       $08
000934CE 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000934D4 E109                       	smpsAlterNote       $09
000934D6 A003                       	dc.b	nG2, $03
000934D8 E10C                       	smpsAlterNote       $0C
000934DA A303 8001                  	dc.b	nBb2, $03, nRst, $01
000934DE E1FD                       	smpsAlterNote       $FD
000934E0 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
000934E5 E106                       	smpsAlterNote       $06
000934E7 8001                       	dc.b	nRst, $01
000934E9 E109                       	smpsAlterNote       $09
000934EB A006 8001                  	dc.b	nG2, $06, nRst, $01
000934EF E108                       	smpsAlterNote       $08
000934F1 9C03                       	dc.b	nEb2, $03
000934F3 E107                       	smpsAlterNote       $07
000934F5 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000934FB E10B                       	smpsAlterNote       $0B
000934FD A203 8001                  	dc.b	nA2, $03, nRst, $01
00093501 E107                       	smpsAlterNote       $07
00093503 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093507 E11A                       	smpsAlterNote       $1A
00093509 A301                       	dc.b	nBb2, $01
0009350B E1F9                       	smpsAlterNote       $F9
0009350D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093510 E107                       	smpsAlterNote       $07
00093512 E701                       	dc.b	smpsNoAttack, $01
00093514 E1FB                       	smpsAlterNote       $FB
00093516 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093519 E106                       	smpsAlterNote       $06
0009351B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009351F E107                       	smpsAlterNote       $07
00093521 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00093529 E1EC                       	smpsAlterNote       $EC
0009352B A101                       	dc.b	nAb2, $01
0009352D E108                       	smpsAlterNote       $08
0009352F E701                       	dc.b	smpsNoAttack, $01
00093531 E1E7                       	smpsAlterNote       $E7
00093533 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093536 E1F5                       	smpsAlterNote       $F5
00093538 E701                       	dc.b	smpsNoAttack, $01
0009353A E10B                       	smpsAlterNote       $0B
0009353C E702                       	dc.b	smpsNoAttack, $02
0009353E E107                       	smpsAlterNote       $07
00093540 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00093546 E106                       	smpsAlterNote       $06
00093548 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0009354E E10C                       	smpsAlterNote       $0C
00093550 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00093558 E109                       	smpsAlterNote       $09
0009355A 9E03                       	dc.b	nF2, $03
0009355C E10C                       	smpsAlterNote       $0C
0009355E 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093562 E1EA                       	smpsAlterNote       $EA
00093564 A201                       	dc.b	nA2, $01
00093566 E106                       	smpsAlterNote       $06
00093568 E701                       	dc.b	smpsNoAttack, $01
0009356A E114                       	smpsAlterNote       $14
0009356C E701                       	dc.b	smpsNoAttack, $01
0009356E E1F0                       	smpsAlterNote       $F0
00093570 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093573 E10C                       	smpsAlterNote       $0C
00093575 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00093581 9703                       	dc.b	nBb1, $03
00093583 E116                       	smpsAlterNote       $16
00093585 9C01                       	dc.b	nEb2, $01
00093587 E105                       	smpsAlterNote       $05
00093589 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0009358C E113                       	smpsAlterNote       $13
0009358E E701                       	dc.b	smpsNoAttack, $01
00093590 E1FF                       	smpsAlterNote       $FF
00093592 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093595 E109                       	smpsAlterNote       $09
00093597 E703                       	dc.b	smpsNoAttack, $03
00093599 E10C                       	smpsAlterNote       $0C
0009359B 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000935A7 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000935AF E109                       	smpsAlterNote       $09
000935B1 9E03                       	dc.b	nF2, $03
000935B3 E10C                       	smpsAlterNote       $0C
000935B5 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000935B9 E1EC                       	smpsAlterNote       $EC
000935BB A201                       	dc.b	nA2, $01
000935BD E10A                       	smpsAlterNote       $0A
000935BF E701                       	dc.b	smpsNoAttack, $01
000935C1 E1E8                       	smpsAlterNote       $E8
000935C3 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000935C6 E1F7                       	smpsAlterNote       $F7
000935C8 E701                       	dc.b	smpsNoAttack, $01
000935CA E10C                       	smpsAlterNote       $0C
000935CC E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000935D8 E1EA                       	smpsAlterNote       $EA
000935DA 9D01                       	dc.b	nE2, $01
000935DC E108                       	smpsAlterNote       $08
000935DE E701                       	dc.b	smpsNoAttack, $01
000935E0 E1F6                       	smpsAlterNote       $F6
000935E2 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000935E5 E105                       	smpsAlterNote       $05
000935E7 E701                       	dc.b	smpsNoAttack, $01
000935E9 E109                       	smpsAlterNote       $09
000935EB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000935EF E10C                       	smpsAlterNote       $0C
000935F1 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000935FD E108                       	smpsAlterNote       $08
000935FF 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00093605 E106                       	smpsAlterNote       $06
00093607 A403 8001                  	dc.b	nB2, $03, nRst, $01
0009360B E108                       	smpsAlterNote       $08
0009360D 9D03                       	dc.b	nE2, $03
0009360F E1EB                       	smpsAlterNote       $EB
00093611 A801                       	dc.b	nEb3, $01
00093613 E109                       	smpsAlterNote       $09
00093615 E701                       	dc.b	smpsNoAttack, $01
00093617 E1EB                       	smpsAlterNote       $EB
00093619 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0009361C E108                       	smpsAlterNote       $08
0009361E E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
0009362A E1E9                       	smpsAlterNote       $E9
0009362C A301                       	dc.b	nBb2, $01
0009362E E1F8                       	smpsAlterNote       $F8
00093630 E701                       	dc.b	smpsNoAttack, $01
00093632 E116                       	smpsAlterNote       $16
00093634 E701                       	dc.b	smpsNoAttack, $01
00093636 E1F7                       	smpsAlterNote       $F7
00093638 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009363B E107                       	smpsAlterNote       $07
0009363D E701                       	dc.b	smpsNoAttack, $01
0009363F E1EE                       	smpsAlterNote       $EE
00093641 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093644 E106                       	smpsAlterNote       $06
00093646 8001                       	dc.b	nRst, $01
00093648 E108                       	smpsAlterNote       $08
0009364A 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00093650 E106                       	smpsAlterNote       $06
00093652 A402 8001                  	dc.b	nB2, $02, nRst, $01
00093656 E108                       	smpsAlterNote       $08
00093658 9D03                       	dc.b	nE2, $03
0009365A E10B                       	smpsAlterNote       $0B
0009365C 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00093662 E108                       	smpsAlterNote       $08
00093664 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00093668 E10B                       	smpsAlterNote       $0B
0009366A 9603                       	dc.b	nA1, $03
0009366C E10E                       	smpsAlterNote       $0E
0009366E A001                       	dc.b	nG2, $01
00093670 E118                       	smpsAlterNote       $18
00093672 E701                       	dc.b	smpsNoAttack, $01
00093674 E1E9                       	smpsAlterNote       $E9
00093676 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093679 E1EE                       	smpsAlterNote       $EE
0009367B E701                       	dc.b	smpsNoAttack, $01
0009367D E1F8                       	smpsAlterNote       $F8
0009367F E701                       	dc.b	smpsNoAttack, $01
00093681 E102                       	smpsAlterNote       $02
00093683 E701                       	dc.b	smpsNoAttack, $01
00093685 E107                       	smpsAlterNote       $07
00093687 8001                       	dc.b	nRst, $01
00093689 E10B                       	smpsAlterNote       $0B
0009368B 9603                       	dc.b	nA1, $03
0009368D E10C                       	smpsAlterNote       $0C
0009368F 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00093695 E10B                       	smpsAlterNote       $0B
00093697 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000936A3 8001 9603                  	dc.b	nRst, $01, nA1, $03
000936A7 E10C                       	smpsAlterNote       $0C
000936A9 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
000936B5 8001                       	dc.b	nRst, $01
000936B7 E10B                       	smpsAlterNote       $0B
000936B9 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000936C1 E107                       	smpsAlterNote       $07
000936C3 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000936C7 E10B                       	smpsAlterNote       $0B
000936C9 9603                       	dc.b	nA1, $03
000936CB E109                       	smpsAlterNote       $09
000936CD 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000936D1 E108                       	smpsAlterNote       $08
000936D3 9D06                       	dc.b	nE2, $06
000936D5 E107                       	smpsAlterNote       $07
000936D7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000936DB E106                       	smpsAlterNote       $06
000936DD 9903                       	dc.b	nC2, $03
000936DF E10C                       	smpsAlterNote       $0C
000936E1 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000936E5 E10B                       	smpsAlterNote       $0B
000936E7 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000936F3 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000936FD E10C                       	smpsAlterNote       $0C
000936FF 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
0009370B 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00093717 8001                       	dc.b	nRst, $01
00093719 E10B                       	smpsAlterNote       $0B
0009371B 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093727 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00093733 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
0009373F 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093749 E10C                       	smpsAlterNote       $0C
0009374B 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00093757 E10B                       	smpsAlterNote       $0B
00093759 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00093761 E107                       	smpsAlterNote       $07
00093763 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00093767 E10B                       	smpsAlterNote       $0B
00093769 9603                       	dc.b	nA1, $03
0009376B E109                       	smpsAlterNote       $09
0009376D 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00093771 E108                       	smpsAlterNote       $08
00093773 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00093777 E107                       	smpsAlterNote       $07
00093779 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0009377D E106                       	smpsAlterNote       $06
0009377F 9903                       	dc.b	nC2, $03
00093781 E10C                       	smpsAlterNote       $0C
00093783 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093787 E10B                       	smpsAlterNote       $0B
00093789 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093795 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0009379F E10C                       	smpsAlterNote       $0C
000937A1 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
000937AD 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000937B9 8001                       	dc.b	nRst, $01
000937BB E10B                       	smpsAlterNote       $0B
000937BD 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000937C9 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000937D3 E10C                       	smpsAlterNote       $0C
000937D5 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000937E1 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
000937ED E10B                       	smpsAlterNote       $0B
000937EF 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000937FB 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00093805 E10C                       	smpsAlterNote       $0C
00093807 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093813 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
0009381F E10B                       	smpsAlterNote       $0B
00093821 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
0009382D 8001                       	dc.b	nRst, $01
0009382F E1EC                       	smpsAlterNote       $EC
00093831 A101                       	dc.b	nAb2, $01
00093833 E1FA                       	smpsAlterNote       $FA
00093835 E701                       	dc.b	smpsNoAttack, $01
00093837 E116                       	smpsAlterNote       $16
00093839 E701                       	dc.b	smpsNoAttack, $01
0009383B E1F5                       	smpsAlterNote       $F5
0009383D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093840 E10B                       	smpsAlterNote       $0B
00093842 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
0009384E 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
0009385A E107                       	smpsAlterNote       $07
0009385C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093862 E10B                       	smpsAlterNote       $0B
00093864 A203                       	dc.b	nA2, $03
00093866 E107                       	smpsAlterNote       $07
00093868 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009386C E1F3                       	smpsAlterNote       $F3
0009386E A401                       	dc.b	nB2, $01
00093870 E102                       	smpsAlterNote       $02
00093872 E701                       	dc.b	smpsNoAttack, $01
00093874 E109                       	smpsAlterNote       $09
00093876 E701                       	dc.b	smpsNoAttack, $01
00093878 E102                       	smpsAlterNote       $02
0009387A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009387D E106                       	smpsAlterNote       $06
0009387F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093883 E107                       	smpsAlterNote       $07
00093885 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093889 E108                       	smpsAlterNote       $08
0009388B 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00093891 E109                       	smpsAlterNote       $09
00093893 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093897 E1F2                       	smpsAlterNote       $F2
00093899 A401                       	dc.b	nB2, $01
0009389B E1FF                       	smpsAlterNote       $FF
0009389D E701                       	dc.b	smpsNoAttack, $01
0009389F E111                       	smpsAlterNote       $11
000938A1 E701                       	dc.b	smpsNoAttack, $01
000938A3 E1FB                       	smpsAlterNote       $FB
000938A5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000938A8 E106                       	smpsAlterNote       $06
000938AA E702                       	dc.b	smpsNoAttack, $02
000938AC E109                       	smpsAlterNote       $09
000938AE A007                       	dc.b	nG2, $07
000938B0 E108                       	smpsAlterNote       $08
000938B2 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000938B6 E107                       	smpsAlterNote       $07
000938B8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000938BE E10B                       	smpsAlterNote       $0B
000938C0 A202 8001                  	dc.b	nA2, $02, nRst, $01
000938C4 E107                       	smpsAlterNote       $07
000938C6 9B03                       	dc.b	nD2, $03
000938C8 E11A                       	smpsAlterNote       $1A
000938CA A301                       	dc.b	nBb2, $01
000938CC E1F2                       	smpsAlterNote       $F2
000938CE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000938D1 E1FF                       	smpsAlterNote       $FF
000938D3 E701                       	dc.b	smpsNoAttack, $01
000938D5 E111                       	smpsAlterNote       $11
000938D7 E701                       	dc.b	smpsNoAttack, $01
000938D9 E106                       	smpsAlterNote       $06
000938DB E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000938DE E107                       	smpsAlterNote       $07
000938E0 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000938EC E117                       	smpsAlterNote       $17
000938EE A001                       	dc.b	nG2, $01
000938F0 E1FA                       	smpsAlterNote       $FA
000938F2 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000938F5 E116                       	smpsAlterNote       $16
000938F7 E701                       	dc.b	smpsNoAttack, $01
000938F9 E1F5                       	smpsAlterNote       $F5
000938FB E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000938FE E103                       	smpsAlterNote       $03
00093900 E701                       	dc.b	smpsNoAttack, $01
00093902 E10B                       	smpsAlterNote       $0B
00093904 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093908 E107                       	smpsAlterNote       $07
0009390A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093910 E109                       	smpsAlterNote       $09
00093912 9E03                       	dc.b	nF2, $03
00093914 E10B                       	smpsAlterNote       $0B
00093916 9603 8001                  	dc.b	nA1, $03, nRst, $01
0009391A E107                       	smpsAlterNote       $07
0009391C 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093922 E10B                       	smpsAlterNote       $0B
00093924 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093928 E107                       	smpsAlterNote       $07
0009392A 9B03                       	dc.b	nD2, $03
0009392C E11A                       	smpsAlterNote       $1A
0009392E A301                       	dc.b	nBb2, $01
00093930 E1F9                       	smpsAlterNote       $F9
00093932 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093935 E1FF                       	smpsAlterNote       $FF
00093937 E701                       	dc.b	smpsNoAttack, $01
00093939 E111                       	smpsAlterNote       $11
0009393B E701                       	dc.b	smpsNoAttack, $01
0009393D E106                       	smpsAlterNote       $06
0009393F E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093942 E107                       	smpsAlterNote       $07
00093944 9B03                       	dc.b	nD2, $03
00093946 E108                       	smpsAlterNote       $08
00093948 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0009394E E109                       	smpsAlterNote       $09
00093950 A003                       	dc.b	nG2, $03
00093952 E1F0                       	smpsAlterNote       $F0
00093954 A501                       	dc.b	nC3, $01
00093956 E106                       	smpsAlterNote       $06
00093958 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
0009395C E109                       	smpsAlterNote       $09
0009395E A006 8001                  	dc.b	nG2, $06, nRst, $01
00093962 E108                       	smpsAlterNote       $08
00093964 9C03                       	dc.b	nEb2, $03
00093966 E107                       	smpsAlterNote       $07
00093968 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0009396E E10B                       	smpsAlterNote       $0B
00093970 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093974 E107                       	smpsAlterNote       $07
00093976 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0009397A E11A                       	smpsAlterNote       $1A
0009397C A301                       	dc.b	nBb2, $01
0009397E E1F9                       	smpsAlterNote       $F9
00093980 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093983 E107                       	smpsAlterNote       $07
00093985 E701                       	dc.b	smpsNoAttack, $01
00093987 E1FB                       	smpsAlterNote       $FB
00093989 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009398C E106                       	smpsAlterNote       $06
0009398E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093992 E107                       	smpsAlterNote       $07
00093994 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0009399C E1EC                       	smpsAlterNote       $EC
0009399E A101                       	dc.b	nAb2, $01
000939A0 E108                       	smpsAlterNote       $08
000939A2 E701                       	dc.b	smpsNoAttack, $01
000939A4 E1E7                       	smpsAlterNote       $E7
000939A6 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000939A9 E1F5                       	smpsAlterNote       $F5
000939AB E701                       	dc.b	smpsNoAttack, $01
000939AD E10B                       	smpsAlterNote       $0B
000939AF E702                       	dc.b	smpsNoAttack, $02
000939B1 E107                       	smpsAlterNote       $07
000939B3 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000939B9 E106                       	smpsAlterNote       $06
000939BB 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000939C1 E10C                       	smpsAlterNote       $0C
000939C3 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
000939CB E109                       	smpsAlterNote       $09
000939CD 9E03                       	dc.b	nF2, $03
000939CF E10C                       	smpsAlterNote       $0C
000939D1 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000939D5 E1EA                       	smpsAlterNote       $EA
000939D7 A201                       	dc.b	nA2, $01
000939D9 E106                       	smpsAlterNote       $06
000939DB E701                       	dc.b	smpsNoAttack, $01
000939DD E114                       	smpsAlterNote       $14
000939DF E701                       	dc.b	smpsNoAttack, $01
000939E1 E1F0                       	smpsAlterNote       $F0
000939E3 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000939E6 E10C                       	smpsAlterNote       $0C
000939E8 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000939F4 9703                       	dc.b	nBb1, $03
000939F6 E116                       	smpsAlterNote       $16
000939F8 9C01                       	dc.b	nEb2, $01
000939FA E105                       	smpsAlterNote       $05
000939FC E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000939FF E113                       	smpsAlterNote       $13
00093A01 E701                       	dc.b	smpsNoAttack, $01
00093A03 E1FF                       	smpsAlterNote       $FF
00093A05 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093A08 E109                       	smpsAlterNote       $09
00093A0A E703                       	dc.b	smpsNoAttack, $03
00093A0C E10C                       	smpsAlterNote       $0C
00093A0E 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00093A1A 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093A22 E109                       	smpsAlterNote       $09
00093A24 9E03                       	dc.b	nF2, $03
00093A26 E10C                       	smpsAlterNote       $0C
00093A28 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093A2C E1EA                       	smpsAlterNote       $EA
00093A2E A201                       	dc.b	nA2, $01
00093A30 E106                       	smpsAlterNote       $06
00093A32 E701                       	dc.b	smpsNoAttack, $01
00093A34 E1E2                       	smpsAlterNote       $E2
00093A36 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093A39 E1F0                       	smpsAlterNote       $F0
00093A3B E701                       	dc.b	smpsNoAttack, $01
00093A3D E10C                       	smpsAlterNote       $0C
00093A3F E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00093A4B E116                       	smpsAlterNote       $16
00093A4D 9C01                       	dc.b	nEb2, $01
00093A4F E105                       	smpsAlterNote       $05
00093A51 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093A54 E1F1                       	smpsAlterNote       $F1
00093A56 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093A59 E1FF                       	smpsAlterNote       $FF
00093A5B E701                       	dc.b	smpsNoAttack, $01
00093A5D E109                       	smpsAlterNote       $09
00093A5F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093A63 E10C                       	smpsAlterNote       $0C
00093A65 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00093A71 E106                       	smpsAlterNote       $06
00093A73 9903                       	dc.b	nC2, $03
00093A75 E107                       	smpsAlterNote       $07
00093A77 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093A7B E109                       	smpsAlterNote       $09
00093A7D 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00093A83 E107                       	smpsAlterNote       $07
00093A85 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093A89 E108                       	smpsAlterNote       $08
00093A8B 9D03                       	dc.b	nE2, $03
00093A8D E10B                       	smpsAlterNote       $0B
00093A8F 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00093A95 E109                       	smpsAlterNote       $09
00093A97 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00093A9D E10C                       	smpsAlterNote       $0C
00093A9F 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00093AA5 E106                       	smpsAlterNote       $06
00093AA7 9903                       	dc.b	nC2, $03
00093AA9 E11A                       	smpsAlterNote       $1A
00093AAB A301                       	dc.b	nBb2, $01
00093AAD E1F9                       	smpsAlterNote       $F9
00093AAF E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093AB2 E1FF                       	smpsAlterNote       $FF
00093AB4 E701                       	dc.b	smpsNoAttack, $01
00093AB6 E111                       	smpsAlterNote       $11
00093AB8 E701                       	dc.b	smpsNoAttack, $01
00093ABA E106                       	smpsAlterNote       $06
00093ABC E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00093AC3 E109                       	smpsAlterNote       $09
00093AC5 A003                       	dc.b	nG2, $03
00093AC7 E106                       	smpsAlterNote       $06
00093AC9 9907                       	dc.b	nC2, $07
00093ACB E107                       	smpsAlterNote       $07
00093ACD 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00093AD5 E10B                       	smpsAlterNote       $0B
00093AD7 A203                       	dc.b	nA2, $03
00093AD9 E107                       	smpsAlterNote       $07
00093ADB 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093ADF E1F2                       	smpsAlterNote       $F2
00093AE1 A401                       	dc.b	nB2, $01
00093AE3 E1F9                       	smpsAlterNote       $F9
00093AE5 E701                       	dc.b	smpsNoAttack, $01
00093AE7 E107                       	smpsAlterNote       $07
00093AE9 E701                       	dc.b	smpsNoAttack, $01
00093AEB E1FB                       	smpsAlterNote       $FB
00093AED E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093AF0 E106                       	smpsAlterNote       $06
00093AF2 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093AF6 E107                       	smpsAlterNote       $07
00093AF8 9B03                       	dc.b	nD2, $03
00093AFA E108                       	smpsAlterNote       $08
00093AFC 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00093B02 E109                       	smpsAlterNote       $09
00093B04 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093B08 E1F2                       	smpsAlterNote       $F2
00093B0A A401                       	dc.b	nB2, $01
00093B0C E1F9                       	smpsAlterNote       $F9
00093B0E E701                       	dc.b	smpsNoAttack, $01
00093B10 E107                       	smpsAlterNote       $07
00093B12 E701                       	dc.b	smpsNoAttack, $01
00093B14 E1FB                       	smpsAlterNote       $FB
00093B16 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093B19 E106                       	smpsAlterNote       $06
00093B1B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093B1F E108                       	smpsAlterNote       $08
00093B21 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00093B25 E10C                       	smpsAlterNote       $0C
00093B27 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00093B2B E107                       	smpsAlterNote       $07
00093B2D 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093B33 E10B                       	smpsAlterNote       $0B
00093B35 A203                       	dc.b	nA2, $03
00093B37 E107                       	smpsAlterNote       $07
00093B39 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093B3D E1F2                       	smpsAlterNote       $F2
00093B3F A401                       	dc.b	nB2, $01
00093B41 E1FF                       	smpsAlterNote       $FF
00093B43 E701                       	dc.b	smpsNoAttack, $01
00093B45 E107                       	smpsAlterNote       $07
00093B47 E701                       	dc.b	smpsNoAttack, $01
00093B49 E1FB                       	smpsAlterNote       $FB
00093B4B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093B4E E106                       	smpsAlterNote       $06
00093B50 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093B54 E107                       	smpsAlterNote       $07
00093B56 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093B5A E108                       	smpsAlterNote       $08
00093B5C 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00093B62 E109                       	smpsAlterNote       $09
00093B64 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093B68 E1F2                       	smpsAlterNote       $F2
00093B6A A401                       	dc.b	nB2, $01
00093B6C E1FF                       	smpsAlterNote       $FF
00093B6E E701                       	dc.b	smpsNoAttack, $01
00093B70 E111                       	smpsAlterNote       $11
00093B72 E701                       	dc.b	smpsNoAttack, $01
00093B74 E1FB                       	smpsAlterNote       $FB
00093B76 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093B79 E106                       	smpsAlterNote       $06
00093B7B E702                       	dc.b	smpsNoAttack, $02
00093B7D E108                       	smpsAlterNote       $08
00093B7F 9C07                       	dc.b	nEb2, $07
00093B81 E10C                       	smpsAlterNote       $0C
00093B83 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093B87 E107                       	smpsAlterNote       $07
00093B89 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093B8F E10B                       	smpsAlterNote       $0B
00093B91 A202 8001                  	dc.b	nA2, $02, nRst, $01
00093B95 E107                       	smpsAlterNote       $07
00093B97 9B03                       	dc.b	nD2, $03
00093B99 E11A                       	smpsAlterNote       $1A
00093B9B A301                       	dc.b	nBb2, $01
00093B9D E1F2                       	smpsAlterNote       $F2
00093B9F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093BA2 E1FF                       	smpsAlterNote       $FF
00093BA4 E701                       	dc.b	smpsNoAttack, $01
00093BA6 E111                       	smpsAlterNote       $11
00093BA8 E701                       	dc.b	smpsNoAttack, $01
00093BAA E106                       	smpsAlterNote       $06
00093BAC E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093BAF E107                       	smpsAlterNote       $07
00093BB1 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093BB5 E108                       	smpsAlterNote       $08
00093BB7 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00093BBF E109                       	smpsAlterNote       $09
00093BC1 A003                       	dc.b	nG2, $03
00093BC3 E11A                       	smpsAlterNote       $1A
00093BC5 A301                       	dc.b	nBb2, $01
00093BC7 E1F2                       	smpsAlterNote       $F2
00093BC9 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093BCC E1FF                       	smpsAlterNote       $FF
00093BCE E701                       	dc.b	smpsNoAttack, $01
00093BD0 E111                       	smpsAlterNote       $11
00093BD2 E701                       	dc.b	smpsNoAttack, $01
00093BD4 E106                       	smpsAlterNote       $06
00093BD6 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093BD9 E108                       	smpsAlterNote       $08
00093BDB 9C07                       	dc.b	nEb2, $07
00093BDD E10C                       	smpsAlterNote       $0C
00093BDF A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093BE3 E107                       	smpsAlterNote       $07
00093BE5 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00093BF1 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00093BFB E108                       	smpsAlterNote       $08
00093BFD 9C06                       	dc.b	nEb2, $06
00093BFF E10C                       	smpsAlterNote       $0C
00093C01 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093C05 E108                       	smpsAlterNote       $08
00093C07 9C03                       	dc.b	nEb2, $03
00093C09 E109                       	smpsAlterNote       $09
00093C0B A003 8001                  	dc.b	nG2, $03, nRst, $01
00093C0F E10C                       	smpsAlterNote       $0C
00093C11 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00093C19 E107                       	smpsAlterNote       $07
00093C1B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093C1F F6F4 F8                    	smpsJump            music84_Jump04
00093C22                            
00093C22                            ; FM2 Data
00093C22                            music84_FM2:
00093C22 E0C0                       	smpsPan             panCenter, $00
00093C26 E10B                       	smpsAlterNote       $0B
00093C28 C603 8007                  	dc.b	nA5, $03, nRst, $07
00093C2C E109                       	smpsAlterNote       $09
00093C2E C403 800B                  	dc.b	nG5, $03, nRst, $0B
00093C32 E108                       	smpsAlterNote       $08
00093C34 C103 8004                  	dc.b	nE5, $03, nRst, $04
00093C3A E080                       	smpsPan             panLeft, $00
00093C3C E10C                       	smpsAlterNote       $0C
00093C3E E6F9                       	smpsAlterVol        $F9
00093C40 C703                       	dc.b	nBb5, $03
00093C42 E10B                       	smpsAlterNote       $0B
00093C44 C603 8001                  	dc.b	nA5, $03, nRst, $01
00093C48 E109                       	smpsAlterNote       $09
00093C4A C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00093C50 E108                       	smpsAlterNote       $08
00093C52 C103 8001                  	dc.b	nE5, $03, nRst, $01
00093C56 E106                       	smpsAlterNote       $06
00093C58 BD03                       	dc.b	nC5, $03
00093C5A E10B                       	smpsAlterNote       $0B
00093C5C BA03 8001                  	dc.b	nA4, $03, nRst, $01
00093C62 E0C0                       	smpsPan             panCenter, $00
00093C64 E107                       	smpsAlterNote       $07
00093C66 E606                       	smpsAlterVol        $06
00093C68 BF03                       	dc.b	nD5, $03
00093C6A                            
00093C6A                            music84_Jump03:
00093C6A E108                       	smpsAlterNote       $08
00093C6C C103 8001                  	dc.b	nE5, $03, nRst, $01
00093C70 E109                       	smpsAlterNote       $09
00093C72 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00093C78 E10B                       	smpsAlterNote       $0B
00093C7A C607                       	dc.b	nA5, $07
00093C7C E107                       	smpsAlterNote       $07
00093C7E BF03 8001                  	dc.b	nD5, $03, nRst, $01
00093C82 E106                       	smpsAlterNote       $06
00093C84 C90D                       	dc.b	nC6, $0D
00093C86 E100                       	smpsAlterNote       $00
00093C88 E701                       	dc.b	smpsNoAttack, $01
00093C8A E1FF                       	smpsAlterNote       $FF
00093C8C E701                       	dc.b	smpsNoAttack, $01
00093C8E E103                       	smpsAlterNote       $03
00093C90 E701                       	dc.b	smpsNoAttack, $01
00093C92 E109                       	smpsAlterNote       $09
00093C94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093C98 E106                       	smpsAlterNote       $06
00093C9A E701                       	dc.b	smpsNoAttack, $01
00093C9C E100                       	smpsAlterNote       $00
00093C9E E701                       	dc.b	smpsNoAttack, $01
00093CA0 E10C                       	smpsAlterNote       $0C
00093CA2 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00093CA6 E10B                       	smpsAlterNote       $0B
00093CA8 C603                       	dc.b	nA5, $03
00093CAA E109                       	smpsAlterNote       $09
00093CAC C403 8001                  	dc.b	nG5, $03, nRst, $01
00093CB0 E10B                       	smpsAlterNote       $0B
00093CB2 C60D                       	dc.b	nA5, $0D
00093CB4 E105                       	smpsAlterNote       $05
00093CB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093CBA E10B                       	smpsAlterNote       $0B
00093CBC E701                       	dc.b	smpsNoAttack, $01
00093CBE E10E                       	smpsAlterNote       $0E
00093CC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093CC4 E108                       	smpsAlterNote       $08
00093CC6 E701                       	dc.b	smpsNoAttack, $01
00093CC8 E104                       	smpsAlterNote       $04
00093CCA E701                       	dc.b	smpsNoAttack, $01
00093CCC E105                       	smpsAlterNote       $05
00093CCE E701                       	dc.b	smpsNoAttack, $01
00093CD0 E10B                       	smpsAlterNote       $0B
00093CD2 E701                       	dc.b	smpsNoAttack, $01
00093CD4 E10F                       	smpsAlterNote       $0F
00093CD6 E701                       	dc.b	smpsNoAttack, $01
00093CD8 E10B                       	smpsAlterNote       $0B
00093CDA E701                       	dc.b	smpsNoAttack, $01
00093CDC E108                       	smpsAlterNote       $08
00093CDE E701                       	dc.b	smpsNoAttack, $01
00093CE0 E104                       	smpsAlterNote       $04
00093CE2 E701                       	dc.b	smpsNoAttack, $01
00093CE4 E108                       	smpsAlterNote       $08
00093CE6 E701                       	dc.b	smpsNoAttack, $01
00093CE8 E10E                       	smpsAlterNote       $0E
00093CEA E701                       	dc.b	smpsNoAttack, $01
00093CEC E10F                       	smpsAlterNote       $0F
00093CEE E701                       	dc.b	smpsNoAttack, $01
00093CF0 E10B                       	smpsAlterNote       $0B
00093CF2 E701                       	dc.b	smpsNoAttack, $01
00093CF4 E105                       	smpsAlterNote       $05
00093CF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093CFA E108                       	smpsAlterNote       $08
00093CFC E701                       	dc.b	smpsNoAttack, $01
00093CFE E10E                       	smpsAlterNote       $0E
00093D00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D04 E108                       	smpsAlterNote       $08
00093D06 E701                       	dc.b	smpsNoAttack, $01
00093D08 E105                       	smpsAlterNote       $05
00093D0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D0E E10B                       	smpsAlterNote       $0B
00093D10 E701                       	dc.b	smpsNoAttack, $01
00093D12 E10F                       	smpsAlterNote       $0F
00093D14 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00093D18 E107                       	smpsAlterNote       $07
00093D1A BF03 8001                  	dc.b	nD5, $03, nRst, $01
00093D1E E108                       	smpsAlterNote       $08
00093D20 C103                       	dc.b	nE5, $03
00093D22 E109                       	smpsAlterNote       $09
00093D24 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00093D2C E10B                       	smpsAlterNote       $0B
00093D2E C606 8001                  	dc.b	nA5, $06, nRst, $01
00093D32 E107                       	smpsAlterNote       $07
00093D34 BF03                       	dc.b	nD5, $03
00093D36 E106                       	smpsAlterNote       $06
00093D38 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00093D3C E107                       	smpsAlterNote       $07
00093D3E CB03                       	dc.b	nD6, $03
00093D40 E10C                       	smpsAlterNote       $0C
00093D42 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00093D46 E10B                       	smpsAlterNote       $0B
00093D48 C604 8001                  	dc.b	nA5, $04, nRst, $01
00093D4C E109                       	smpsAlterNote       $09
00093D4E C404                       	dc.b	nG5, $04
00093D50 E10B                       	smpsAlterNote       $0B
00093D52 C60D                       	dc.b	nA5, $0D
00093D54 E108                       	smpsAlterNote       $08
00093D56 E701                       	dc.b	smpsNoAttack, $01
00093D58 E104                       	smpsAlterNote       $04
00093D5A E701                       	dc.b	smpsNoAttack, $01
00093D5C E108                       	smpsAlterNote       $08
00093D5E E701                       	dc.b	smpsNoAttack, $01
00093D60 E10B                       	smpsAlterNote       $0B
00093D62 E701                       	dc.b	smpsNoAttack, $01
00093D64 E10F                       	smpsAlterNote       $0F
00093D66 E701                       	dc.b	smpsNoAttack, $01
00093D68 E10B                       	smpsAlterNote       $0B
00093D6A E701                       	dc.b	smpsNoAttack, $01
00093D6C E105                       	smpsAlterNote       $05
00093D6E E701                       	dc.b	smpsNoAttack, $01
00093D70 E104                       	smpsAlterNote       $04
00093D72 E701                       	dc.b	smpsNoAttack, $01
00093D74 E108                       	smpsAlterNote       $08
00093D76 E701                       	dc.b	smpsNoAttack, $01
00093D78 E10E                       	smpsAlterNote       $0E
00093D7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D7E E10B                       	smpsAlterNote       $0B
00093D80 E701                       	dc.b	smpsNoAttack, $01
00093D82 E105                       	smpsAlterNote       $05
00093D84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D88 E10B                       	smpsAlterNote       $0B
00093D8A E701                       	dc.b	smpsNoAttack, $01
00093D8C E10E                       	smpsAlterNote       $0E
00093D8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D92 E108                       	smpsAlterNote       $08
00093D94 E701                       	dc.b	smpsNoAttack, $01
00093D96 E104                       	smpsAlterNote       $04
00093D98 E701                       	dc.b	smpsNoAttack, $01
00093D9A E105                       	smpsAlterNote       $05
00093D9C E701                       	dc.b	smpsNoAttack, $01
00093D9E E10B                       	smpsAlterNote       $0B
00093DA0 E701                       	dc.b	smpsNoAttack, $01
00093DA2 E10F                       	smpsAlterNote       $0F
00093DA4 E701                       	dc.b	smpsNoAttack, $01
00093DA6 E10B                       	smpsAlterNote       $0B
00093DA8 E701                       	dc.b	smpsNoAttack, $01
00093DAA E108                       	smpsAlterNote       $08
00093DAC E701                       	dc.b	smpsNoAttack, $01
00093DAE E105                       	smpsAlterNote       $05
00093DB0 8001                       	dc.b	nRst, $01
00093DB2 E109                       	smpsAlterNote       $09
00093DB4 C401                       	dc.b	nG5, $01
00093DB6 E10B                       	smpsAlterNote       $0B
00093DB8 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00093DC1 E109                       	smpsAlterNote       $09
00093DC3 C404 8001                  	dc.b	nG5, $04, nRst, $01
00093DC7 E10B                       	smpsAlterNote       $0B
00093DC9 C604 8001                  	dc.b	nA5, $04, nRst, $01
00093DCD E107                       	smpsAlterNote       $07
00093DCF BF0D                       	dc.b	nD5, $0D
00093DD1 E101                       	smpsAlterNote       $01
00093DD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093DD7 E104                       	smpsAlterNote       $04
00093DD9 E701                       	dc.b	smpsNoAttack, $01
00093DDB E10A                       	smpsAlterNote       $0A
00093DDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093DE1 E104                       	smpsAlterNote       $04
00093DE3 E701                       	dc.b	smpsNoAttack, $01
00093DE5 E101                       	smpsAlterNote       $01
00093DE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093DEB E107                       	smpsAlterNote       $07
00093DED E701                       	dc.b	smpsNoAttack, $01
00093DEF E10B                       	smpsAlterNote       $0B
00093DF1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093DF5 E108                       	smpsAlterNote       $08
00093DF7 C101                       	dc.b	nE5, $01
00093DF9 E109                       	smpsAlterNote       $09
00093DFB E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00093E00 E10B                       	smpsAlterNote       $0B
00093E02 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00093E0A E108                       	smpsAlterNote       $08
00093E0C CD06                       	dc.b	nE6, $06
00093E0E E109                       	smpsAlterNote       $09
00093E10 CE07                       	dc.b	nF6, $07
00093E12 E108                       	smpsAlterNote       $08
00093E14 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00093E18 E106                       	smpsAlterNote       $06
00093E1A C903                       	dc.b	nC6, $03
00093E1C E109                       	smpsAlterNote       $09
00093E1E C403 8001                  	dc.b	nG5, $03, nRst, $01
00093E22 E10C                       	smpsAlterNote       $0C
00093E24 C70D                       	dc.b	nBb5, $0D
00093E26 E106                       	smpsAlterNote       $06
00093E28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E2C E109                       	smpsAlterNote       $09
00093E2E E701                       	dc.b	smpsNoAttack, $01
00093E30 E10F                       	smpsAlterNote       $0F
00093E32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E36 E109                       	smpsAlterNote       $09
00093E38 E701                       	dc.b	smpsNoAttack, $01
00093E3A E106                       	smpsAlterNote       $06
00093E3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E40 E10C                       	smpsAlterNote       $0C
00093E42 E701                       	dc.b	smpsNoAttack, $01
00093E44 E110                       	smpsAlterNote       $10
00093E46 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093E4A E10B                       	smpsAlterNote       $0B
00093E4C C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00093E50 E105                       	smpsAlterNote       $05
00093E52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E56 E10B                       	smpsAlterNote       $0B
00093E58 E701                       	dc.b	smpsNoAttack, $01
00093E5A E10E                       	smpsAlterNote       $0E
00093E5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E60 E108                       	smpsAlterNote       $08
00093E62 E701                       	dc.b	smpsNoAttack, $01
00093E64 E104                       	smpsAlterNote       $04
00093E66 E701                       	dc.b	smpsNoAttack, $01
00093E68 E105                       	smpsAlterNote       $05
00093E6A E701                       	dc.b	smpsNoAttack, $01
00093E6C E10B                       	smpsAlterNote       $0B
00093E6E E701                       	dc.b	smpsNoAttack, $01
00093E70 E10F                       	smpsAlterNote       $0F
00093E72 E701                       	dc.b	smpsNoAttack, $01
00093E74 E10B                       	smpsAlterNote       $0B
00093E76 E701                       	dc.b	smpsNoAttack, $01
00093E78 E108                       	smpsAlterNote       $08
00093E7A E701                       	dc.b	smpsNoAttack, $01
00093E7C E104                       	smpsAlterNote       $04
00093E7E E701                       	dc.b	smpsNoAttack, $01
00093E80 E108                       	smpsAlterNote       $08
00093E82 E701                       	dc.b	smpsNoAttack, $01
00093E84 E10E                       	smpsAlterNote       $0E
00093E86 E701                       	dc.b	smpsNoAttack, $01
00093E88 E10F                       	smpsAlterNote       $0F
00093E8A E701                       	dc.b	smpsNoAttack, $01
00093E8C E10B                       	smpsAlterNote       $0B
00093E8E E701                       	dc.b	smpsNoAttack, $01
00093E90 E105                       	smpsAlterNote       $05
00093E92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E96 E108                       	smpsAlterNote       $08
00093E98 E701                       	dc.b	smpsNoAttack, $01
00093E9A E10E                       	smpsAlterNote       $0E
00093E9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093EA0 E108                       	smpsAlterNote       $08
00093EA2 E701                       	dc.b	smpsNoAttack, $01
00093EA4 E105                       	smpsAlterNote       $05
00093EA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093EAA E10B                       	smpsAlterNote       $0B
00093EAC E701                       	dc.b	smpsNoAttack, $01
00093EAE E10F                       	smpsAlterNote       $0F
00093EB0 E701                       	dc.b	smpsNoAttack, $01
00093EB2 E10E                       	smpsAlterNote       $0E
00093EB4 E701                       	dc.b	smpsNoAttack, $01
00093EB6 E108                       	smpsAlterNote       $08
00093EB8 E701                       	dc.b	smpsNoAttack, $01
00093EBA E104                       	smpsAlterNote       $04
00093EBC E701                       	dc.b	smpsNoAttack, $01
00093EBE E108                       	smpsAlterNote       $08
00093EC0 E701                       	dc.b	smpsNoAttack, $01
00093EC2 E10E                       	smpsAlterNote       $0E
00093EC4 E701                       	dc.b	smpsNoAttack, $01
00093EC6 E10F                       	smpsAlterNote       $0F
00093EC8 E701                       	dc.b	smpsNoAttack, $01
00093ECA E10B                       	smpsAlterNote       $0B
00093ECC E701                       	dc.b	smpsNoAttack, $01
00093ECE E105                       	smpsAlterNote       $05
00093ED0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093ED4 E108                       	smpsAlterNote       $08
00093ED6 E701                       	dc.b	smpsNoAttack, $01
00093ED8 E10E                       	smpsAlterNote       $0E
00093EDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093EDE E108                       	smpsAlterNote       $08
00093EE0 E701                       	dc.b	smpsNoAttack, $01
00093EE2 E105                       	smpsAlterNote       $05
00093EE4 E701                       	dc.b	smpsNoAttack, $01
00093EE6 E10B                       	smpsAlterNote       $0B
00093EE8 C60D                       	dc.b	nA5, $0D
00093EEA E108                       	smpsAlterNote       $08
00093EEC E701                       	dc.b	smpsNoAttack, $01
00093EEE E104                       	smpsAlterNote       $04
00093EF0 E701                       	dc.b	smpsNoAttack, $01
00093EF2 E105                       	smpsAlterNote       $05
00093EF4 E701                       	dc.b	smpsNoAttack, $01
00093EF6 E10B                       	smpsAlterNote       $0B
00093EF8 E701                       	dc.b	smpsNoAttack, $01
00093EFA E10F                       	smpsAlterNote       $0F
00093EFC E701                       	dc.b	smpsNoAttack, $01
00093EFE E10B                       	smpsAlterNote       $0B
00093F00 E701                       	dc.b	smpsNoAttack, $01
00093F02 E108                       	smpsAlterNote       $08
00093F04 E701                       	dc.b	smpsNoAttack, $01
00093F06 E104                       	smpsAlterNote       $04
00093F08 E701                       	dc.b	smpsNoAttack, $01
00093F0A E108                       	smpsAlterNote       $08
00093F0C E701                       	dc.b	smpsNoAttack, $01
00093F0E E10E                       	smpsAlterNote       $0E
00093F10 E701                       	dc.b	smpsNoAttack, $01
00093F12 E10F                       	smpsAlterNote       $0F
00093F14 E701                       	dc.b	smpsNoAttack, $01
00093F18 E109                       	smpsAlterNote       $09
00093F1A E6FF                       	smpsAlterVol        $FF
00093F1C C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00093F26 E108                       	smpsAlterNote       $08
00093F28 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00093F2E E107                       	smpsAlterNote       $07
00093F30 E601                       	smpsAlterVol        $01
00093F32 BF03                       	dc.b	nD5, $03
00093F34 E108                       	smpsAlterNote       $08
00093F36 C103 8001                  	dc.b	nE5, $03, nRst, $01
00093F3A E109                       	smpsAlterNote       $09
00093F3C C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00093F42 E10B                       	smpsAlterNote       $0B
00093F44 C606 8001                  	dc.b	nA5, $06, nRst, $01
00093F48 E107                       	smpsAlterNote       $07
00093F4A BF02 8001                  	dc.b	nD5, $02, nRst, $01
00093F4E E106                       	smpsAlterNote       $06
00093F50 C90D                       	dc.b	nC6, $0D
00093F52 E103                       	smpsAlterNote       $03
00093F54 E701                       	dc.b	smpsNoAttack, $01
00093F56 E1FF                       	smpsAlterNote       $FF
00093F58 E701                       	dc.b	smpsNoAttack, $01
00093F5A E103                       	smpsAlterNote       $03
00093F5C E701                       	dc.b	smpsNoAttack, $01
00093F5E E109                       	smpsAlterNote       $09
00093F60 E701                       	dc.b	smpsNoAttack, $01
00093F62 E10A                       	smpsAlterNote       $0A
00093F64 E701                       	dc.b	smpsNoAttack, $01
00093F66 E106                       	smpsAlterNote       $06
00093F68 E701                       	dc.b	smpsNoAttack, $01
00093F6A E100                       	smpsAlterNote       $00
00093F6C E701                       	dc.b	smpsNoAttack, $01
00093F6E E10C                       	smpsAlterNote       $0C
00093F70 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00093F74 E10B                       	smpsAlterNote       $0B
00093F76 C603                       	dc.b	nA5, $03
00093F78 E109                       	smpsAlterNote       $09
00093F7A C403 8001                  	dc.b	nG5, $03, nRst, $01
00093F7E E10B                       	smpsAlterNote       $0B
00093F80 C60D                       	dc.b	nA5, $0D
00093F82 E105                       	smpsAlterNote       $05
00093F84 E701                       	dc.b	smpsNoAttack, $01
00093F86 E104                       	smpsAlterNote       $04
00093F88 E701                       	dc.b	smpsNoAttack, $01
00093F8A E108                       	smpsAlterNote       $08
00093F8C E701                       	dc.b	smpsNoAttack, $01
00093F8E E10E                       	smpsAlterNote       $0E
00093F90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F94 E10B                       	smpsAlterNote       $0B
00093F96 E701                       	dc.b	smpsNoAttack, $01
00093F98 E105                       	smpsAlterNote       $05
00093F9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F9E E10B                       	smpsAlterNote       $0B
00093FA0 E701                       	dc.b	smpsNoAttack, $01
00093FA2 E10E                       	smpsAlterNote       $0E
00093FA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FA8 E108                       	smpsAlterNote       $08
00093FAA E701                       	dc.b	smpsNoAttack, $01
00093FAC E104                       	smpsAlterNote       $04
00093FAE E701                       	dc.b	smpsNoAttack, $01
00093FB0 E105                       	smpsAlterNote       $05
00093FB2 E701                       	dc.b	smpsNoAttack, $01
00093FB4 E10B                       	smpsAlterNote       $0B
00093FB6 E701                       	dc.b	smpsNoAttack, $01
00093FB8 E10F                       	smpsAlterNote       $0F
00093FBA E701                       	dc.b	smpsNoAttack, $01
00093FBC E10B                       	smpsAlterNote       $0B
00093FBE E701                       	dc.b	smpsNoAttack, $01
00093FC0 E108                       	smpsAlterNote       $08
00093FC2 E701                       	dc.b	smpsNoAttack, $01
00093FC4 E104                       	smpsAlterNote       $04
00093FC6 E701                       	dc.b	smpsNoAttack, $01
00093FC8 E108                       	smpsAlterNote       $08
00093FCA E701                       	dc.b	smpsNoAttack, $01
00093FCC E10E                       	smpsAlterNote       $0E
00093FCE E701                       	dc.b	smpsNoAttack, $01
00093FD0 E10F                       	smpsAlterNote       $0F
00093FD2 E701                       	dc.b	smpsNoAttack, $01
00093FD4 E10B                       	smpsAlterNote       $0B
00093FD6 E701                       	dc.b	smpsNoAttack, $01
00093FD8 E105                       	smpsAlterNote       $05
00093FDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FDE E108                       	smpsAlterNote       $08
00093FE0 E701                       	dc.b	smpsNoAttack, $01
00093FE2 E10E                       	smpsAlterNote       $0E
00093FE4 E701                       	dc.b	smpsNoAttack, $01
00093FE6 E10F                       	smpsAlterNote       $0F
00093FE8 800F                       	dc.b	nRst, $0F
00093FEA E107                       	smpsAlterNote       $07
00093FEC BF02 8001                  	dc.b	nD5, $02, nRst, $01
00093FF0 E108                       	smpsAlterNote       $08
00093FF2 C103                       	dc.b	nE5, $03
00093FF4 E109                       	smpsAlterNote       $09
00093FF6 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00093FFC E10B                       	smpsAlterNote       $0B
00093FFE C606 8001                  	dc.b	nA5, $06, nRst, $01
00094002 E107                       	smpsAlterNote       $07
00094004 BF03                       	dc.b	nD5, $03
00094006 E106                       	smpsAlterNote       $06
00094008 C90E                       	dc.b	nC6, $0E
0009400A E107                       	smpsAlterNote       $07
0009400C CB03 8001                  	dc.b	nD6, $03, nRst, $01
00094010 E10C                       	smpsAlterNote       $0C
00094012 C704                       	dc.b	nBb5, $04
00094014 E10B                       	smpsAlterNote       $0B
00094016 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009401A E109                       	smpsAlterNote       $09
0009401C C404                       	dc.b	nG5, $04
0009401E E10B                       	smpsAlterNote       $0B
00094020 C60D                       	dc.b	nA5, $0D
00094022 E108                       	smpsAlterNote       $08
00094024 E701                       	dc.b	smpsNoAttack, $01
00094026 E105                       	smpsAlterNote       $05
00094028 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009402C E10B                       	smpsAlterNote       $0B
0009402E E701                       	dc.b	smpsNoAttack, $01
00094030 E10F                       	smpsAlterNote       $0F
00094032 E701                       	dc.b	smpsNoAttack, $01
00094034 E10E                       	smpsAlterNote       $0E
00094036 E701                       	dc.b	smpsNoAttack, $01
00094038 E108                       	smpsAlterNote       $08
0009403A E701                       	dc.b	smpsNoAttack, $01
0009403C E104                       	smpsAlterNote       $04
0009403E E701                       	dc.b	smpsNoAttack, $01
00094040 E108                       	smpsAlterNote       $08
00094042 E701                       	dc.b	smpsNoAttack, $01
00094044 E10B                       	smpsAlterNote       $0B
00094046 E701                       	dc.b	smpsNoAttack, $01
00094048 E10F                       	smpsAlterNote       $0F
0009404A E701                       	dc.b	smpsNoAttack, $01
0009404C E10B                       	smpsAlterNote       $0B
0009404E E701                       	dc.b	smpsNoAttack, $01
00094050 E105                       	smpsAlterNote       $05
00094052 E701                       	dc.b	smpsNoAttack, $01
00094054 E104                       	smpsAlterNote       $04
00094056 E701                       	dc.b	smpsNoAttack, $01
00094058 E108                       	smpsAlterNote       $08
0009405A E701                       	dc.b	smpsNoAttack, $01
0009405C E10E                       	smpsAlterNote       $0E
0009405E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094062 E10B                       	smpsAlterNote       $0B
00094064 E701                       	dc.b	smpsNoAttack, $01
00094066 E105                       	smpsAlterNote       $05
00094068 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009406C E10B                       	smpsAlterNote       $0B
0009406E E701                       	dc.b	smpsNoAttack, $01
00094070 E10E                       	smpsAlterNote       $0E
00094072 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094076 E108                       	smpsAlterNote       $08
00094078 E701                       	dc.b	smpsNoAttack, $01
0009407A E105                       	smpsAlterNote       $05
0009407C 8001                       	dc.b	nRst, $01
0009407E E109                       	smpsAlterNote       $09
00094080 C402                       	dc.b	nG5, $02
00094082 E10B                       	smpsAlterNote       $0B
00094084 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0009408D E109                       	smpsAlterNote       $09
0009408F C404                       	dc.b	nG5, $04
00094091 E10B                       	smpsAlterNote       $0B
00094093 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094097 E107                       	smpsAlterNote       $07
00094099 BF0D                       	dc.b	nD5, $0D
0009409B E101                       	smpsAlterNote       $01
0009409D E701                       	dc.b	smpsNoAttack, $01
0009409F E100                       	smpsAlterNote       $00
000940A1 E701                       	dc.b	smpsNoAttack, $01
000940A3 E104                       	smpsAlterNote       $04
000940A5 E701                       	dc.b	smpsNoAttack, $01
000940A7 E10A                       	smpsAlterNote       $0A
000940A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940AD E107                       	smpsAlterNote       $07
000940AF E701                       	dc.b	smpsNoAttack, $01
000940B1 E101                       	smpsAlterNote       $01
000940B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940B7 E107                       	smpsAlterNote       $07
000940B9 E701                       	dc.b	smpsNoAttack, $01
000940BB E10A                       	smpsAlterNote       $0A
000940BD E701                       	dc.b	smpsNoAttack, $01
000940BF E10B                       	smpsAlterNote       $0B
000940C1 8001                       	dc.b	nRst, $01
000940C3 E108                       	smpsAlterNote       $08
000940C5 C101                       	dc.b	nE5, $01
000940C7 E109                       	smpsAlterNote       $09
000940C9 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000940CE E10B                       	smpsAlterNote       $0B
000940D0 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000940D8 E108                       	smpsAlterNote       $08
000940DA CD06 8001                  	dc.b	nE6, $06, nRst, $01
000940DE E109                       	smpsAlterNote       $09
000940E0 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000940E4 E108                       	smpsAlterNote       $08
000940E6 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000940EA E106                       	smpsAlterNote       $06
000940EC C903                       	dc.b	nC6, $03
000940EE E109                       	smpsAlterNote       $09
000940F0 C403 8001                  	dc.b	nG5, $03, nRst, $01
000940F4 E10C                       	smpsAlterNote       $0C
000940F6 C70D                       	dc.b	nBb5, $0D
000940F8 E109                       	smpsAlterNote       $09
000940FA E701                       	dc.b	smpsNoAttack, $01
000940FC E105                       	smpsAlterNote       $05
000940FE E701                       	dc.b	smpsNoAttack, $01
00094100 E109                       	smpsAlterNote       $09
00094102 E701                       	dc.b	smpsNoAttack, $01
00094104 E10F                       	smpsAlterNote       $0F
00094106 E701                       	dc.b	smpsNoAttack, $01
00094108 E110                       	smpsAlterNote       $10
0009410A E701                       	dc.b	smpsNoAttack, $01
0009410C E10C                       	smpsAlterNote       $0C
0009410E E701                       	dc.b	smpsNoAttack, $01
00094110 E106                       	smpsAlterNote       $06
00094112 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094116 E109                       	smpsAlterNote       $09
00094118 E701                       	dc.b	smpsNoAttack, $01
0009411A E10F                       	smpsAlterNote       $0F
0009411C E701                       	dc.b	smpsNoAttack, $01
0009411E E110                       	smpsAlterNote       $10
00094120 8001                       	dc.b	nRst, $01
00094122 E10B                       	smpsAlterNote       $0B
00094124 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0009412A E105                       	smpsAlterNote       $05
0009412C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094130 E108                       	smpsAlterNote       $08
00094132 E701                       	dc.b	smpsNoAttack, $01
00094134 E10E                       	smpsAlterNote       $0E
00094136 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009413A E108                       	smpsAlterNote       $08
0009413C E701                       	dc.b	smpsNoAttack, $01
0009413E E105                       	smpsAlterNote       $05
00094140 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094144 E10B                       	smpsAlterNote       $0B
00094146 E701                       	dc.b	smpsNoAttack, $01
00094148 E10F                       	smpsAlterNote       $0F
0009414A E701                       	dc.b	smpsNoAttack, $01
0009414C E10E                       	smpsAlterNote       $0E
0009414E E701                       	dc.b	smpsNoAttack, $01
00094150 E108                       	smpsAlterNote       $08
00094152 E701                       	dc.b	smpsNoAttack, $01
00094154 E104                       	smpsAlterNote       $04
00094156 E701                       	dc.b	smpsNoAttack, $01
00094158 E108                       	smpsAlterNote       $08
0009415A E701                       	dc.b	smpsNoAttack, $01
0009415C E10B                       	smpsAlterNote       $0B
0009415E E701                       	dc.b	smpsNoAttack, $01
00094160 E10F                       	smpsAlterNote       $0F
00094162 E701                       	dc.b	smpsNoAttack, $01
00094164 E10B                       	smpsAlterNote       $0B
00094166 E701                       	dc.b	smpsNoAttack, $01
00094168 E105                       	smpsAlterNote       $05
0009416A E701                       	dc.b	smpsNoAttack, $01
0009416C E104                       	smpsAlterNote       $04
0009416E E701                       	dc.b	smpsNoAttack, $01
00094170 E108                       	smpsAlterNote       $08
00094172 E701                       	dc.b	smpsNoAttack, $01
00094174 E10E                       	smpsAlterNote       $0E
00094176 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009417A E10B                       	smpsAlterNote       $0B
0009417C E701                       	dc.b	smpsNoAttack, $01
0009417E E105                       	smpsAlterNote       $05
00094180 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094184 E10B                       	smpsAlterNote       $0B
00094186 E701                       	dc.b	smpsNoAttack, $01
00094188 E10E                       	smpsAlterNote       $0E
0009418A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009418E E108                       	smpsAlterNote       $08
00094190 E701                       	dc.b	smpsNoAttack, $01
00094192 E104                       	smpsAlterNote       $04
00094194 E701                       	dc.b	smpsNoAttack, $01
00094196 E105                       	smpsAlterNote       $05
00094198 E701                       	dc.b	smpsNoAttack, $01
0009419A E10B                       	smpsAlterNote       $0B
0009419C E701                       	dc.b	smpsNoAttack, $01
0009419E E10F                       	smpsAlterNote       $0F
000941A0 E701                       	dc.b	smpsNoAttack, $01
000941A2 E10B                       	smpsAlterNote       $0B
000941A4 E701                       	dc.b	smpsNoAttack, $01
000941A6 E108                       	smpsAlterNote       $08
000941A8 E701                       	dc.b	smpsNoAttack, $01
000941AA E104                       	smpsAlterNote       $04
000941AC E701                       	dc.b	smpsNoAttack, $01
000941AE E108                       	smpsAlterNote       $08
000941B0 E701                       	dc.b	smpsNoAttack, $01
000941B2 E10E                       	smpsAlterNote       $0E
000941B4 E701                       	dc.b	smpsNoAttack, $01
000941B6 E10F                       	smpsAlterNote       $0F
000941B8 E701                       	dc.b	smpsNoAttack, $01
000941BA E10B                       	smpsAlterNote       $0B
000941BC E701                       	dc.b	smpsNoAttack, $01
000941BE E105                       	smpsAlterNote       $05
000941C0 E701                       	dc.b	smpsNoAttack, $01
000941C2 E10B                       	smpsAlterNote       $0B
000941C4 C60E                       	dc.b	nA5, $0E
000941C6 E105                       	smpsAlterNote       $05
000941C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941CC E10B                       	smpsAlterNote       $0B
000941CE E701                       	dc.b	smpsNoAttack, $01
000941D0 E10E                       	smpsAlterNote       $0E
000941D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941D6 E108                       	smpsAlterNote       $08
000941D8 E701                       	dc.b	smpsNoAttack, $01
000941DA E104                       	smpsAlterNote       $04
000941DC E701                       	dc.b	smpsNoAttack, $01
000941DE E105                       	smpsAlterNote       $05
000941E0 E701                       	dc.b	smpsNoAttack, $01
000941E2 E10B                       	smpsAlterNote       $0B
000941E4 E701                       	dc.b	smpsNoAttack, $01
000941E6 E10F                       	smpsAlterNote       $0F
000941E8 E701                       	dc.b	smpsNoAttack, $01
000941EA E10B                       	smpsAlterNote       $0B
000941EC E701                       	dc.b	smpsNoAttack, $01
000941EE E108                       	smpsAlterNote       $08
000941F0 E701                       	dc.b	smpsNoAttack, $01
000941F2 E104                       	smpsAlterNote       $04
000941F4 E701                       	dc.b	smpsNoAttack, $01
000941F6 E108                       	smpsAlterNote       $08
000941F8 E701                       	dc.b	smpsNoAttack, $01
000941FA E10E                       	smpsAlterNote       $0E
000941FC E701                       	dc.b	smpsNoAttack, $01
000941FE E10F                       	smpsAlterNote       $0F
00094200 E701                       	dc.b	smpsNoAttack, $01
00094202 E10B                       	smpsAlterNote       $0B
00094204 E701                       	dc.b	smpsNoAttack, $01
00094206 E105                       	smpsAlterNote       $05
00094208 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009420C E108                       	smpsAlterNote       $08
0009420E E701                       	dc.b	smpsNoAttack, $01
00094210 E10E                       	smpsAlterNote       $0E
00094212 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094216 E108                       	smpsAlterNote       $08
00094218 E701                       	dc.b	smpsNoAttack, $01
0009421A E105                       	smpsAlterNote       $05
0009421C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094220 E10B                       	smpsAlterNote       $0B
00094222 E701                       	dc.b	smpsNoAttack, $01
00094224 E10F                       	smpsAlterNote       $0F
00094226 E701                       	dc.b	smpsNoAttack, $01
00094228 E10E                       	smpsAlterNote       $0E
0009422A E701                       	dc.b	smpsNoAttack, $01
0009422C E108                       	smpsAlterNote       $08
0009422E E701                       	dc.b	smpsNoAttack, $01
00094230 E104                       	smpsAlterNote       $04
00094232 E701                       	dc.b	smpsNoAttack, $01
00094234 E108                       	smpsAlterNote       $08
00094236 E701                       	dc.b	smpsNoAttack, $01
00094238 E10E                       	smpsAlterNote       $0E
0009423A E701                       	dc.b	smpsNoAttack, $01
0009423C E10F                       	smpsAlterNote       $0F
0009423E E701                       	dc.b	smpsNoAttack, $01
00094240 E10B                       	smpsAlterNote       $0B
00094242 E701                       	dc.b	smpsNoAttack, $01
00094244 E105                       	smpsAlterNote       $05
00094246 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009424A E108                       	smpsAlterNote       $08
0009424C E701                       	dc.b	smpsNoAttack, $01
0009424E E10E                       	smpsAlterNote       $0E
00094250 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094254 E108                       	smpsAlterNote       $08
00094256 E701                       	dc.b	smpsNoAttack, $01
00094258 E105                       	smpsAlterNote       $05
0009425A E701                       	dc.b	smpsNoAttack, $01
0009425E E10B                       	smpsAlterNote       $0B
00094260 E6FD                       	smpsAlterVol        $FD
00094262 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094266 E109                       	smpsAlterNote       $09
00094268 C404                       	dc.b	nG5, $04
0009426A E10B                       	smpsAlterNote       $0B
0009426C C604 8001                  	dc.b	nA5, $04, nRst, $01
00094270 E107                       	smpsAlterNote       $07
00094272 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00094278 E10B                       	smpsAlterNote       $0B
0009427A C604                       	dc.b	nA5, $04
0009427C E109                       	smpsAlterNote       $09
0009427E C404 8001                  	dc.b	nG5, $04, nRst, $01
00094282 E10B                       	smpsAlterNote       $0B
00094284 C604                       	dc.b	nA5, $04
00094286 E108                       	smpsAlterNote       $08
00094288 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00094290 E106                       	smpsAlterNote       $06
00094292 C904 8001                  	dc.b	nC6, $04, nRst, $01
00094296 E10C                       	smpsAlterNote       $0C
00094298 C704                       	dc.b	nBb5, $04
0009429A E10B                       	smpsAlterNote       $0B
0009429C C604 8001                  	dc.b	nA5, $04, nRst, $01
000942A0 E109                       	smpsAlterNote       $09
000942A2 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000942AC E10B                       	smpsAlterNote       $0B
000942AE C60D                       	dc.b	nA5, $0D
000942B0 E108                       	smpsAlterNote       $08
000942B2 E701                       	dc.b	smpsNoAttack, $01
000942B4 E104                       	smpsAlterNote       $04
000942B6 E701                       	dc.b	smpsNoAttack, $01
000942B8 E108                       	smpsAlterNote       $08
000942BA E701                       	dc.b	smpsNoAttack, $01
000942BC E10E                       	smpsAlterNote       $0E
000942BE E701                       	dc.b	smpsNoAttack, $01
000942C0 E10F                       	smpsAlterNote       $0F
000942C2 E701                       	dc.b	smpsNoAttack, $01
000942C4 E10B                       	smpsAlterNote       $0B
000942C6 E701                       	dc.b	smpsNoAttack, $01
000942C8 E105                       	smpsAlterNote       $05
000942CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942CE E108                       	smpsAlterNote       $08
000942D0 E701                       	dc.b	smpsNoAttack, $01
000942D2 E10E                       	smpsAlterNote       $0E
000942D4 E701                       	dc.b	smpsNoAttack, $01
000942D6 E10F                       	smpsAlterNote       $0F
000942D8 8001                       	dc.b	nRst, $01
000942DA E109                       	smpsAlterNote       $09
000942DC C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000942E2 E108                       	smpsAlterNote       $08
000942E4 C10D                       	dc.b	nE5, $0D
000942E6 E102                       	smpsAlterNote       $02
000942E8 E701                       	dc.b	smpsNoAttack, $01
000942EA E101                       	smpsAlterNote       $01
000942EC E701                       	dc.b	smpsNoAttack, $01
000942EE E105                       	smpsAlterNote       $05
000942F0 E701                       	dc.b	smpsNoAttack, $01
000942F2 E10B                       	smpsAlterNote       $0B
000942F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942F8 E108                       	smpsAlterNote       $08
000942FA E701                       	dc.b	smpsNoAttack, $01
000942FC E102                       	smpsAlterNote       $02
000942FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094302 E108                       	smpsAlterNote       $08
00094304 E701                       	dc.b	smpsNoAttack, $01
00094306 E10B                       	smpsAlterNote       $0B
00094308 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009430C E105                       	smpsAlterNote       $05
0009430E E701                       	dc.b	smpsNoAttack, $01
00094310 E101                       	smpsAlterNote       $01
00094312 E701                       	dc.b	smpsNoAttack, $01
00094314 E102                       	smpsAlterNote       $02
00094316 E701                       	dc.b	smpsNoAttack, $01
00094318 E108                       	smpsAlterNote       $08
0009431A E701                       	dc.b	smpsNoAttack, $01
0009431C E10C                       	smpsAlterNote       $0C
0009431E E701                       	dc.b	smpsNoAttack, $01
00094320 E108                       	smpsAlterNote       $08
00094322 E701                       	dc.b	smpsNoAttack, $01
00094324 E105                       	smpsAlterNote       $05
00094326 E701                       	dc.b	smpsNoAttack, $01
00094328 E101                       	smpsAlterNote       $01
0009432A E701                       	dc.b	smpsNoAttack, $01
0009432C E105                       	smpsAlterNote       $05
0009432E E701                       	dc.b	smpsNoAttack, $01
00094330 E10B                       	smpsAlterNote       $0B
00094332 E701                       	dc.b	smpsNoAttack, $01
00094334 E10C                       	smpsAlterNote       $0C
00094336 E701                       	dc.b	smpsNoAttack, $01
00094338 E108                       	smpsAlterNote       $08
0009433A E701                       	dc.b	smpsNoAttack, $01
0009433C E102                       	smpsAlterNote       $02
0009433E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094342 E105                       	smpsAlterNote       $05
00094344 E701                       	dc.b	smpsNoAttack, $01
00094346 E10B                       	smpsAlterNote       $0B
00094348 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009434C E105                       	smpsAlterNote       $05
0009434E E701                       	dc.b	smpsNoAttack, $01
00094350 E102                       	smpsAlterNote       $02
00094352 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094356 E108                       	smpsAlterNote       $08
00094358 E701                       	dc.b	smpsNoAttack, $01
0009435A E10C                       	smpsAlterNote       $0C
0009435C E701                       	dc.b	smpsNoAttack, $01
0009435E E10B                       	smpsAlterNote       $0B
00094360 E701                       	dc.b	smpsNoAttack, $01
00094362 E105                       	smpsAlterNote       $05
00094364 E701                       	dc.b	smpsNoAttack, $01
00094366 E101                       	smpsAlterNote       $01
00094368 E701                       	dc.b	smpsNoAttack, $01
0009436A E105                       	smpsAlterNote       $05
0009436C E701                       	dc.b	smpsNoAttack, $01
0009436E E108                       	smpsAlterNote       $08
00094370 E701                       	dc.b	smpsNoAttack, $01
00094372 E10C                       	smpsAlterNote       $0C
00094374 E701                       	dc.b	smpsNoAttack, $01
00094376 E108                       	smpsAlterNote       $08
00094378 E701                       	dc.b	smpsNoAttack, $01
0009437A E102                       	smpsAlterNote       $02
0009437C E701                       	dc.b	smpsNoAttack, $01
0009437E E101                       	smpsAlterNote       $01
00094380 E701                       	dc.b	smpsNoAttack, $01
00094382 E105                       	smpsAlterNote       $05
00094384 E701                       	dc.b	smpsNoAttack, $01
00094386 E10B                       	smpsAlterNote       $0B
00094388 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009438C E108                       	smpsAlterNote       $08
0009438E E701                       	dc.b	smpsNoAttack, $01
00094390 E102                       	smpsAlterNote       $02
00094392 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094396 E108                       	smpsAlterNote       $08
00094398 E701                       	dc.b	smpsNoAttack, $01
0009439A E10B                       	smpsAlterNote       $0B
0009439C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000943A0 E105                       	smpsAlterNote       $05
000943A2 E701                       	dc.b	smpsNoAttack, $01
000943A4 E101                       	smpsAlterNote       $01
000943A6 E701                       	dc.b	smpsNoAttack, $01
000943A8 E102                       	smpsAlterNote       $02
000943AA E701                       	dc.b	smpsNoAttack, $01
000943AC E108                       	smpsAlterNote       $08
000943AE E701                       	dc.b	smpsNoAttack, $01
000943B0 E10C                       	smpsAlterNote       $0C
000943B2 E701                       	dc.b	smpsNoAttack, $01
000943B4 E108                       	smpsAlterNote       $08
000943B6 E701                       	dc.b	smpsNoAttack, $01
000943B8 E105                       	smpsAlterNote       $05
000943BA E701                       	dc.b	smpsNoAttack, $01
000943BC E101                       	smpsAlterNote       $01
000943BE E701                       	dc.b	smpsNoAttack, $01
000943C0 E105                       	smpsAlterNote       $05
000943C2 E701                       	dc.b	smpsNoAttack, $01
000943C4 E10B                       	smpsAlterNote       $0B
000943C6 E701                       	dc.b	smpsNoAttack, $01
000943C8 E10C                       	smpsAlterNote       $0C
000943CA E701                       	dc.b	smpsNoAttack, $01
000943CC E108                       	smpsAlterNote       $08
000943CE E701                       	dc.b	smpsNoAttack, $01
000943D0 E102                       	smpsAlterNote       $02
000943D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000943D6 E105                       	smpsAlterNote       $05
000943D8 E701                       	dc.b	smpsNoAttack, $01
000943DA E10B                       	smpsAlterNote       $0B
000943DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000943E0 E105                       	smpsAlterNote       $05
000943E2 E701                       	dc.b	smpsNoAttack, $01
000943E4 E101                       	smpsAlterNote       $01
000943E6 E701                       	dc.b	smpsNoAttack, $01
000943E8 E102                       	smpsAlterNote       $02
000943EA E701                       	dc.b	smpsNoAttack, $01
000943EC E108                       	smpsAlterNote       $08
000943EE E701                       	dc.b	smpsNoAttack, $01
000943F0 E10C                       	smpsAlterNote       $0C
000943F2 E701                       	dc.b	smpsNoAttack, $01
000943F4 E108                       	smpsAlterNote       $08
000943F6 E701                       	dc.b	smpsNoAttack, $01
000943F8 E105                       	smpsAlterNote       $05
000943FA E701                       	dc.b	smpsNoAttack, $01
000943FC E101                       	smpsAlterNote       $01
000943FE E701                       	dc.b	smpsNoAttack, $01
00094400 E105                       	smpsAlterNote       $05
00094402 E701                       	dc.b	smpsNoAttack, $01
00094404 E10B                       	smpsAlterNote       $0B
00094406 E701                       	dc.b	smpsNoAttack, $01
00094408 E10C                       	smpsAlterNote       $0C
0009440A E701                       	dc.b	smpsNoAttack, $01
0009440C E108                       	smpsAlterNote       $08
0009440E E701                       	dc.b	smpsNoAttack, $01
00094410 E102                       	smpsAlterNote       $02
00094412 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094416 E105                       	smpsAlterNote       $05
00094418 E701                       	dc.b	smpsNoAttack, $01
0009441A E10B                       	smpsAlterNote       $0B
0009441C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094420 E105                       	smpsAlterNote       $05
00094422 E701                       	dc.b	smpsNoAttack, $01
00094424 E102                       	smpsAlterNote       $02
00094426 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009442A E108                       	smpsAlterNote       $08
0009442C E701                       	dc.b	smpsNoAttack, $01
0009442E E10C                       	smpsAlterNote       $0C
00094430 E701                       	dc.b	smpsNoAttack, $01
00094432 E10B                       	smpsAlterNote       $0B
00094434 E701                       	dc.b	smpsNoAttack, $01
00094436 E105                       	smpsAlterNote       $05
00094438 E701                       	dc.b	smpsNoAttack, $01
0009443A E101                       	smpsAlterNote       $01
0009443C E701                       	dc.b	smpsNoAttack, $01
0009443E E105                       	smpsAlterNote       $05
00094440 E701                       	dc.b	smpsNoAttack, $01
00094442 E108                       	smpsAlterNote       $08
00094444 E701                       	dc.b	smpsNoAttack, $01
00094446 E10C                       	smpsAlterNote       $0C
00094448 E701                       	dc.b	smpsNoAttack, $01
0009444C E10B                       	smpsAlterNote       $0B
0009444E C604 8001                  	dc.b	nA5, $04, nRst, $01
00094452 E109                       	smpsAlterNote       $09
00094454 C404                       	dc.b	nG5, $04
00094456 E10B                       	smpsAlterNote       $0B
00094458 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009445C E107                       	smpsAlterNote       $07
0009445E BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00094464 E10B                       	smpsAlterNote       $0B
00094466 C604                       	dc.b	nA5, $04
00094468 E109                       	smpsAlterNote       $09
0009446A C404 8001                  	dc.b	nG5, $04, nRst, $01
0009446E E10B                       	smpsAlterNote       $0B
00094470 C604                       	dc.b	nA5, $04
00094472 E108                       	smpsAlterNote       $08
00094474 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
0009447A E106                       	smpsAlterNote       $06
0009447C C904 8001                  	dc.b	nC6, $04, nRst, $01
00094480 E10C                       	smpsAlterNote       $0C
00094482 C704                       	dc.b	nBb5, $04
00094484 E10B                       	smpsAlterNote       $0B
00094486 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009448A E109                       	smpsAlterNote       $09
0009448C C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00094496 E10B                       	smpsAlterNote       $0B
00094498 C60D                       	dc.b	nA5, $0D
0009449A E108                       	smpsAlterNote       $08
0009449C E701                       	dc.b	smpsNoAttack, $01
0009449E E104                       	smpsAlterNote       $04
000944A0 E701                       	dc.b	smpsNoAttack, $01
000944A2 E108                       	smpsAlterNote       $08
000944A4 E701                       	dc.b	smpsNoAttack, $01
000944A6 E10B                       	smpsAlterNote       $0B
000944A8 E701                       	dc.b	smpsNoAttack, $01
000944AA E10F                       	smpsAlterNote       $0F
000944AC E701                       	dc.b	smpsNoAttack, $01
000944AE E10B                       	smpsAlterNote       $0B
000944B0 E701                       	dc.b	smpsNoAttack, $01
000944B2 E105                       	smpsAlterNote       $05
000944B4 E701                       	dc.b	smpsNoAttack, $01
000944B6 E104                       	smpsAlterNote       $04
000944B8 E701                       	dc.b	smpsNoAttack, $01
000944BA E108                       	smpsAlterNote       $08
000944BC E701                       	dc.b	smpsNoAttack, $01
000944BE E10E                       	smpsAlterNote       $0E
000944C0 E701                       	dc.b	smpsNoAttack, $01
000944C2 E10F                       	smpsAlterNote       $0F
000944C4 8001                       	dc.b	nRst, $01
000944C6 E109                       	smpsAlterNote       $09
000944C8 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000944CE E108                       	smpsAlterNote       $08
000944D0 C10D                       	dc.b	nE5, $0D
000944D2 E105                       	smpsAlterNote       $05
000944D4 E701                       	dc.b	smpsNoAttack, $01
000944D6 E101                       	smpsAlterNote       $01
000944D8 E701                       	dc.b	smpsNoAttack, $01
000944DA E105                       	smpsAlterNote       $05
000944DC E701                       	dc.b	smpsNoAttack, $01
000944DE E10B                       	smpsAlterNote       $0B
000944E0 E701                       	dc.b	smpsNoAttack, $01
000944E2 E10C                       	smpsAlterNote       $0C
000944E4 E701                       	dc.b	smpsNoAttack, $01
000944E6 E108                       	smpsAlterNote       $08
000944E8 E701                       	dc.b	smpsNoAttack, $01
000944EA E102                       	smpsAlterNote       $02
000944EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944F0 E105                       	smpsAlterNote       $05
000944F2 E701                       	dc.b	smpsNoAttack, $01
000944F4 E10B                       	smpsAlterNote       $0B
000944F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944FA E105                       	smpsAlterNote       $05
000944FC E701                       	dc.b	smpsNoAttack, $01
000944FE E102                       	smpsAlterNote       $02
00094500 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094504 E108                       	smpsAlterNote       $08
00094506 E701                       	dc.b	smpsNoAttack, $01
00094508 E10C                       	smpsAlterNote       $0C
0009450A E701                       	dc.b	smpsNoAttack, $01
0009450C E10B                       	smpsAlterNote       $0B
0009450E E701                       	dc.b	smpsNoAttack, $01
00094510 E105                       	smpsAlterNote       $05
00094512 E701                       	dc.b	smpsNoAttack, $01
00094514 E101                       	smpsAlterNote       $01
00094516 E701                       	dc.b	smpsNoAttack, $01
00094518 E105                       	smpsAlterNote       $05
0009451A E701                       	dc.b	smpsNoAttack, $01
0009451C E108                       	smpsAlterNote       $08
0009451E E701                       	dc.b	smpsNoAttack, $01
00094520 E10C                       	smpsAlterNote       $0C
00094522 E701                       	dc.b	smpsNoAttack, $01
00094524 E108                       	smpsAlterNote       $08
00094526 E701                       	dc.b	smpsNoAttack, $01
00094528 E102                       	smpsAlterNote       $02
0009452A E701                       	dc.b	smpsNoAttack, $01
0009452C E101                       	smpsAlterNote       $01
0009452E E701                       	dc.b	smpsNoAttack, $01
00094530 E105                       	smpsAlterNote       $05
00094532 E701                       	dc.b	smpsNoAttack, $01
00094534 E10B                       	smpsAlterNote       $0B
00094536 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009453A E108                       	smpsAlterNote       $08
0009453C E701                       	dc.b	smpsNoAttack, $01
0009453E E102                       	smpsAlterNote       $02
00094540 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094544 E108                       	smpsAlterNote       $08
00094546 E701                       	dc.b	smpsNoAttack, $01
00094548 E10B                       	smpsAlterNote       $0B
0009454A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009454E E105                       	smpsAlterNote       $05
00094550 E701                       	dc.b	smpsNoAttack, $01
00094552 E101                       	smpsAlterNote       $01
00094554 E701                       	dc.b	smpsNoAttack, $01
00094556 E102                       	smpsAlterNote       $02
00094558 E701                       	dc.b	smpsNoAttack, $01
0009455A E108                       	smpsAlterNote       $08
0009455C E701                       	dc.b	smpsNoAttack, $01
0009455E E10C                       	smpsAlterNote       $0C
00094560 E701                       	dc.b	smpsNoAttack, $01
00094562 E108                       	smpsAlterNote       $08
00094564 E701                       	dc.b	smpsNoAttack, $01
00094566 E105                       	smpsAlterNote       $05
00094568 E701                       	dc.b	smpsNoAttack, $01
0009456A E101                       	smpsAlterNote       $01
0009456C E701                       	dc.b	smpsNoAttack, $01
0009456E E105                       	smpsAlterNote       $05
00094570 E701                       	dc.b	smpsNoAttack, $01
00094572 E10B                       	smpsAlterNote       $0B
00094574 E701                       	dc.b	smpsNoAttack, $01
00094576 E10C                       	smpsAlterNote       $0C
00094578 E701                       	dc.b	smpsNoAttack, $01
0009457A E108                       	smpsAlterNote       $08
0009457C E701                       	dc.b	smpsNoAttack, $01
0009457E E102                       	smpsAlterNote       $02
00094580 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094584 E108                       	smpsAlterNote       $08
00094586 E701                       	dc.b	smpsNoAttack, $01
00094588 E10B                       	smpsAlterNote       $0B
0009458A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009458E E105                       	smpsAlterNote       $05
00094590 E701                       	dc.b	smpsNoAttack, $01
00094592 E101                       	smpsAlterNote       $01
00094594 E701                       	dc.b	smpsNoAttack, $01
00094596 E102                       	smpsAlterNote       $02
00094598 E701                       	dc.b	smpsNoAttack, $01
0009459A E108                       	smpsAlterNote       $08
0009459C E701                       	dc.b	smpsNoAttack, $01
0009459E E10C                       	smpsAlterNote       $0C
000945A0 E701                       	dc.b	smpsNoAttack, $01
000945A2 E108                       	smpsAlterNote       $08
000945A4 E701                       	dc.b	smpsNoAttack, $01
000945A6 E105                       	smpsAlterNote       $05
000945A8 E701                       	dc.b	smpsNoAttack, $01
000945AA E101                       	smpsAlterNote       $01
000945AC E701                       	dc.b	smpsNoAttack, $01
000945AE E105                       	smpsAlterNote       $05
000945B0 E701                       	dc.b	smpsNoAttack, $01
000945B2 E10B                       	smpsAlterNote       $0B
000945B4 E701                       	dc.b	smpsNoAttack, $01
000945B6 E10C                       	smpsAlterNote       $0C
000945B8 E701                       	dc.b	smpsNoAttack, $01
000945BA E108                       	smpsAlterNote       $08
000945BC E701                       	dc.b	smpsNoAttack, $01
000945BE E102                       	smpsAlterNote       $02
000945C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945C4 E105                       	smpsAlterNote       $05
000945C6 E701                       	dc.b	smpsNoAttack, $01
000945C8 E10B                       	smpsAlterNote       $0B
000945CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945CE E105                       	smpsAlterNote       $05
000945D0 E701                       	dc.b	smpsNoAttack, $01
000945D2 E102                       	smpsAlterNote       $02
000945D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945D8 E108                       	smpsAlterNote       $08
000945DA E701                       	dc.b	smpsNoAttack, $01
000945DC E10C                       	smpsAlterNote       $0C
000945DE E701                       	dc.b	smpsNoAttack, $01
000945E0 E10B                       	smpsAlterNote       $0B
000945E2 E701                       	dc.b	smpsNoAttack, $01
000945E4 E105                       	smpsAlterNote       $05
000945E6 E701                       	dc.b	smpsNoAttack, $01
000945E8 E101                       	smpsAlterNote       $01
000945EA E701                       	dc.b	smpsNoAttack, $01
000945EC E105                       	smpsAlterNote       $05
000945EE E701                       	dc.b	smpsNoAttack, $01
000945F0 E108                       	smpsAlterNote       $08
000945F2 E701                       	dc.b	smpsNoAttack, $01
000945F4 E10C                       	smpsAlterNote       $0C
000945F6 E701                       	dc.b	smpsNoAttack, $01
000945F8 E108                       	smpsAlterNote       $08
000945FA E701                       	dc.b	smpsNoAttack, $01
000945FC E102                       	smpsAlterNote       $02
000945FE E701                       	dc.b	smpsNoAttack, $01
00094600 E101                       	smpsAlterNote       $01
00094602 E701                       	dc.b	smpsNoAttack, $01
00094604 E105                       	smpsAlterNote       $05
00094606 E701                       	dc.b	smpsNoAttack, $01
00094608 E10B                       	smpsAlterNote       $0B
0009460A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009460E E108                       	smpsAlterNote       $08
00094610 E701                       	dc.b	smpsNoAttack, $01
00094612 E102                       	smpsAlterNote       $02
00094614 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094618 E108                       	smpsAlterNote       $08
0009461A E701                       	dc.b	smpsNoAttack, $01
0009461C E10B                       	smpsAlterNote       $0B
0009461E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094622 E105                       	smpsAlterNote       $05
00094624 E701                       	dc.b	smpsNoAttack, $01
00094626 E102                       	smpsAlterNote       $02
00094628 8001                       	dc.b	nRst, $01
0009462A E107                       	smpsAlterNote       $07
0009462C BF01 8001                  	dc.b	nD5, $01, nRst, $01
00094630 E108                       	smpsAlterNote       $08
00094632 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00094636 E102                       	smpsAlterNote       $02
00094638 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009463C E108                       	smpsAlterNote       $08
0009463E E701                       	dc.b	smpsNoAttack, $01
00094640 E10B                       	smpsAlterNote       $0B
00094642 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094646 E105                       	smpsAlterNote       $05
00094648 E701                       	dc.b	smpsNoAttack, $01
0009464A E101                       	smpsAlterNote       $01
0009464C E701                       	dc.b	smpsNoAttack, $01
0009464E E102                       	smpsAlterNote       $02
00094650 E701                       	dc.b	smpsNoAttack, $01
00094652 E108                       	smpsAlterNote       $08
00094654 E701                       	dc.b	smpsNoAttack, $01
00094656 E10C                       	smpsAlterNote       $0C
00094658 E701                       	dc.b	smpsNoAttack, $01
0009465A E108                       	smpsAlterNote       $08
0009465C E701                       	dc.b	smpsNoAttack, $01
0009465E E105                       	smpsAlterNote       $05
00094660 E701                       	dc.b	smpsNoAttack, $01
00094662 E101                       	smpsAlterNote       $01
00094664 E701                       	dc.b	smpsNoAttack, $01
00094666 E105                       	smpsAlterNote       $05
00094668 E701                       	dc.b	smpsNoAttack, $01
0009466A E10B                       	smpsAlterNote       $0B
0009466C E701                       	dc.b	smpsNoAttack, $01
0009466E E10C                       	smpsAlterNote       $0C
00094670 E701                       	dc.b	smpsNoAttack, $01
00094672 E108                       	smpsAlterNote       $08
00094674 E701                       	dc.b	smpsNoAttack, $01
00094676 E102                       	smpsAlterNote       $02
00094678 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009467C E105                       	smpsAlterNote       $05
0009467E E701                       	dc.b	smpsNoAttack, $01
00094680 E10B                       	smpsAlterNote       $0B
00094682 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094686 E105                       	smpsAlterNote       $05
00094688 E701                       	dc.b	smpsNoAttack, $01
0009468A E102                       	smpsAlterNote       $02
0009468C E701                       	dc.b	smpsNoAttack, $01
0009468E E109                       	smpsAlterNote       $09
00094690 C40A C207                  	dc.b	nG5, $0A, nF5, $07
00094694 E108                       	smpsAlterNote       $08
00094696 C10D                       	dc.b	nE5, $0D
00094698 E105                       	smpsAlterNote       $05
0009469A E701                       	dc.b	smpsNoAttack, $01
0009469C E101                       	smpsAlterNote       $01
0009469E E701                       	dc.b	smpsNoAttack, $01
000946A0 E102                       	smpsAlterNote       $02
000946A2 E701                       	dc.b	smpsNoAttack, $01
000946A4 E108                       	smpsAlterNote       $08
000946A6 E701                       	dc.b	smpsNoAttack, $01
000946A8 E10C                       	smpsAlterNote       $0C
000946AA E701                       	dc.b	smpsNoAttack, $01
000946AC E108                       	smpsAlterNote       $08
000946AE E701                       	dc.b	smpsNoAttack, $01
000946B0 E105                       	smpsAlterNote       $05
000946B2 E701                       	dc.b	smpsNoAttack, $01
000946B4 E101                       	smpsAlterNote       $01
000946B6 E701                       	dc.b	smpsNoAttack, $01
000946B8 E105                       	smpsAlterNote       $05
000946BA E701                       	dc.b	smpsNoAttack, $01
000946BC E10B                       	smpsAlterNote       $0B
000946BE E701                       	dc.b	smpsNoAttack, $01
000946C0 E10C                       	smpsAlterNote       $0C
000946C2 E701                       	dc.b	smpsNoAttack, $01
000946C4 E108                       	smpsAlterNote       $08
000946C6 E701                       	dc.b	smpsNoAttack, $01
000946C8 E102                       	smpsAlterNote       $02
000946CA E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
000946D2 E10B                       	smpsAlterNote       $0B
000946D4 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000946D8 E10C                       	smpsAlterNote       $0C
000946DA BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000946DE E10B                       	smpsAlterNote       $0B
000946E0 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
000946E6 E107                       	smpsAlterNote       $07
000946E8 BF03                       	dc.b	nD5, $03
000946EA E108                       	smpsAlterNote       $08
000946EC C103 8001                  	dc.b	nE5, $03, nRst, $01
000946F0 E109                       	smpsAlterNote       $09
000946F2 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000946F8 E10B                       	smpsAlterNote       $0B
000946FA C606 8001                  	dc.b	nA5, $06, nRst, $01
000946FE E107                       	smpsAlterNote       $07
00094700 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00094704 E106                       	smpsAlterNote       $06
00094706 C90D                       	dc.b	nC6, $0D
00094708 E103                       	smpsAlterNote       $03
0009470A E701                       	dc.b	smpsNoAttack, $01
0009470C E1FF                       	smpsAlterNote       $FF
0009470E E701                       	dc.b	smpsNoAttack, $01
00094710 E103                       	smpsAlterNote       $03
00094712 E701                       	dc.b	smpsNoAttack, $01
00094714 E109                       	smpsAlterNote       $09
00094716 E701                       	dc.b	smpsNoAttack, $01
00094718 E10A                       	smpsAlterNote       $0A
0009471A E701                       	dc.b	smpsNoAttack, $01
0009471C E106                       	smpsAlterNote       $06
0009471E E701                       	dc.b	smpsNoAttack, $01
00094720 E100                       	smpsAlterNote       $00
00094722 E701                       	dc.b	smpsNoAttack, $01
00094724 E10C                       	smpsAlterNote       $0C
00094726 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0009472A E10B                       	smpsAlterNote       $0B
0009472C C603                       	dc.b	nA5, $03
0009472E E109                       	smpsAlterNote       $09
00094730 C403 8001                  	dc.b	nG5, $03, nRst, $01
00094734 E10B                       	smpsAlterNote       $0B
00094736 C60D                       	dc.b	nA5, $0D
00094738 E105                       	smpsAlterNote       $05
0009473A E701                       	dc.b	smpsNoAttack, $01
0009473C E104                       	smpsAlterNote       $04
0009473E E701                       	dc.b	smpsNoAttack, $01
00094740 E108                       	smpsAlterNote       $08
00094742 E701                       	dc.b	smpsNoAttack, $01
00094744 E10E                       	smpsAlterNote       $0E
00094746 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009474A E10B                       	smpsAlterNote       $0B
0009474C E701                       	dc.b	smpsNoAttack, $01
0009474E E105                       	smpsAlterNote       $05
00094750 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094754 E10B                       	smpsAlterNote       $0B
00094756 E701                       	dc.b	smpsNoAttack, $01
00094758 E10E                       	smpsAlterNote       $0E
0009475A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009475E E108                       	smpsAlterNote       $08
00094760 E701                       	dc.b	smpsNoAttack, $01
00094762 E104                       	smpsAlterNote       $04
00094764 E701                       	dc.b	smpsNoAttack, $01
00094766 E105                       	smpsAlterNote       $05
00094768 E701                       	dc.b	smpsNoAttack, $01
0009476A E10B                       	smpsAlterNote       $0B
0009476C E701                       	dc.b	smpsNoAttack, $01
0009476E E10F                       	smpsAlterNote       $0F
00094770 E701                       	dc.b	smpsNoAttack, $01
00094772 E10B                       	smpsAlterNote       $0B
00094774 E701                       	dc.b	smpsNoAttack, $01
00094776 E108                       	smpsAlterNote       $08
00094778 E701                       	dc.b	smpsNoAttack, $01
0009477A E104                       	smpsAlterNote       $04
0009477C E701                       	dc.b	smpsNoAttack, $01
0009477E E108                       	smpsAlterNote       $08
00094780 E701                       	dc.b	smpsNoAttack, $01
00094782 E10E                       	smpsAlterNote       $0E
00094784 E701                       	dc.b	smpsNoAttack, $01
00094786 E10F                       	smpsAlterNote       $0F
00094788 E701                       	dc.b	smpsNoAttack, $01
0009478A E10B                       	smpsAlterNote       $0B
0009478C E701                       	dc.b	smpsNoAttack, $01
0009478E E105                       	smpsAlterNote       $05
00094790 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094794 E108                       	smpsAlterNote       $08
00094796 E701                       	dc.b	smpsNoAttack, $01
00094798 E10E                       	smpsAlterNote       $0E
0009479A E701                       	dc.b	smpsNoAttack, $01
0009479C E10F                       	smpsAlterNote       $0F
0009479E 800F                       	dc.b	nRst, $0F
000947A0 E107                       	smpsAlterNote       $07
000947A2 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000947A6 E108                       	smpsAlterNote       $08
000947A8 C103                       	dc.b	nE5, $03
000947AA E109                       	smpsAlterNote       $09
000947AC C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000947B2 E10B                       	smpsAlterNote       $0B
000947B4 C607                       	dc.b	nA5, $07
000947B6 E107                       	smpsAlterNote       $07
000947B8 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000947BC E106                       	smpsAlterNote       $06
000947BE C90D                       	dc.b	nC6, $0D
000947C0 E107                       	smpsAlterNote       $07
000947C2 CB03 8001                  	dc.b	nD6, $03, nRst, $01
000947C6 E10C                       	smpsAlterNote       $0C
000947C8 C704                       	dc.b	nBb5, $04
000947CA E10B                       	smpsAlterNote       $0B
000947CC C604 8001                  	dc.b	nA5, $04, nRst, $01
000947D0 E109                       	smpsAlterNote       $09
000947D2 C404                       	dc.b	nG5, $04
000947D4 E10B                       	smpsAlterNote       $0B
000947D6 C60D                       	dc.b	nA5, $0D
000947D8 E108                       	smpsAlterNote       $08
000947DA E701                       	dc.b	smpsNoAttack, $01
000947DC E105                       	smpsAlterNote       $05
000947DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947E2 E10B                       	smpsAlterNote       $0B
000947E4 E701                       	dc.b	smpsNoAttack, $01
000947E6 E10F                       	smpsAlterNote       $0F
000947E8 E701                       	dc.b	smpsNoAttack, $01
000947EA E10E                       	smpsAlterNote       $0E
000947EC E701                       	dc.b	smpsNoAttack, $01
000947EE E108                       	smpsAlterNote       $08
000947F0 E701                       	dc.b	smpsNoAttack, $01
000947F2 E104                       	smpsAlterNote       $04
000947F4 E701                       	dc.b	smpsNoAttack, $01
000947F6 E108                       	smpsAlterNote       $08
000947F8 E701                       	dc.b	smpsNoAttack, $01
000947FA E10B                       	smpsAlterNote       $0B
000947FC E701                       	dc.b	smpsNoAttack, $01
000947FE E10F                       	smpsAlterNote       $0F
00094800 E701                       	dc.b	smpsNoAttack, $01
00094802 E10B                       	smpsAlterNote       $0B
00094804 E701                       	dc.b	smpsNoAttack, $01
00094806 E105                       	smpsAlterNote       $05
00094808 E701                       	dc.b	smpsNoAttack, $01
0009480A E104                       	smpsAlterNote       $04
0009480C E701                       	dc.b	smpsNoAttack, $01
0009480E E108                       	smpsAlterNote       $08
00094810 E701                       	dc.b	smpsNoAttack, $01
00094812 E10E                       	smpsAlterNote       $0E
00094814 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094818 E10B                       	smpsAlterNote       $0B
0009481A E701                       	dc.b	smpsNoAttack, $01
0009481C E105                       	smpsAlterNote       $05
0009481E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094822 E10B                       	smpsAlterNote       $0B
00094824 E701                       	dc.b	smpsNoAttack, $01
00094826 E10E                       	smpsAlterNote       $0E
00094828 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009482C E108                       	smpsAlterNote       $08
0009482E E701                       	dc.b	smpsNoAttack, $01
00094830 E105                       	smpsAlterNote       $05
00094832 8001                       	dc.b	nRst, $01
00094834 E109                       	smpsAlterNote       $09
00094836 C401 8001                  	dc.b	nG5, $01, nRst, $01
0009483A E10B                       	smpsAlterNote       $0B
0009483C C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00094844 E109                       	smpsAlterNote       $09
00094846 C404                       	dc.b	nG5, $04
00094848 E10B                       	smpsAlterNote       $0B
0009484A C604 8001                  	dc.b	nA5, $04, nRst, $01
0009484E E107                       	smpsAlterNote       $07
00094850 BF0D                       	dc.b	nD5, $0D
00094852 E101                       	smpsAlterNote       $01
00094854 E701                       	dc.b	smpsNoAttack, $01
00094856 E100                       	smpsAlterNote       $00
00094858 E701                       	dc.b	smpsNoAttack, $01
0009485A E104                       	smpsAlterNote       $04
0009485C E701                       	dc.b	smpsNoAttack, $01
0009485E E10A                       	smpsAlterNote       $0A
00094860 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094864 E107                       	smpsAlterNote       $07
00094866 E701                       	dc.b	smpsNoAttack, $01
00094868 E101                       	smpsAlterNote       $01
0009486A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009486E E107                       	smpsAlterNote       $07
00094870 E701                       	dc.b	smpsNoAttack, $01
00094872 E10A                       	smpsAlterNote       $0A
00094874 E701                       	dc.b	smpsNoAttack, $01
00094876 E10B                       	smpsAlterNote       $0B
00094878 8001                       	dc.b	nRst, $01
0009487A E108                       	smpsAlterNote       $08
0009487C 8001                       	dc.b	nRst, $01
0009487E E109                       	smpsAlterNote       $09
00094880 8001 C401                  	dc.b	nRst, $01, nG5, $01
00094884 E10B                       	smpsAlterNote       $0B
00094886 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0009488E E108                       	smpsAlterNote       $08
00094890 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00094894 E109                       	smpsAlterNote       $09
00094896 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0009489A E108                       	smpsAlterNote       $08
0009489C CD02 8001                  	dc.b	nE6, $02, nRst, $01
000948A0 E106                       	smpsAlterNote       $06
000948A2 C903                       	dc.b	nC6, $03
000948A4 E109                       	smpsAlterNote       $09
000948A6 C403 8001                  	dc.b	nG5, $03, nRst, $01
000948AA E10C                       	smpsAlterNote       $0C
000948AC C70D                       	dc.b	nBb5, $0D
000948AE E109                       	smpsAlterNote       $09
000948B0 E701                       	dc.b	smpsNoAttack, $01
000948B2 E105                       	smpsAlterNote       $05
000948B4 E701                       	dc.b	smpsNoAttack, $01
000948B6 E109                       	smpsAlterNote       $09
000948B8 E701                       	dc.b	smpsNoAttack, $01
000948BA E10F                       	smpsAlterNote       $0F
000948BC E701                       	dc.b	smpsNoAttack, $01
000948BE E110                       	smpsAlterNote       $10
000948C0 E701                       	dc.b	smpsNoAttack, $01
000948C2 E10C                       	smpsAlterNote       $0C
000948C4 E701                       	dc.b	smpsNoAttack, $01
000948C6 E106                       	smpsAlterNote       $06
000948C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948CC E109                       	smpsAlterNote       $09
000948CE E701                       	dc.b	smpsNoAttack, $01
000948D0 E10F                       	smpsAlterNote       $0F
000948D2 E701                       	dc.b	smpsNoAttack, $01
000948D4 E110                       	smpsAlterNote       $10
000948D6 8001                       	dc.b	nRst, $01
000948D8 E10B                       	smpsAlterNote       $0B
000948DA C606 8001                  	dc.b	nA5, $06, nRst, $01
000948DE E109                       	smpsAlterNote       $09
000948E0 C40D                       	dc.b	nG5, $0D
000948E2 E103                       	smpsAlterNote       $03
000948E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948E8 E106                       	smpsAlterNote       $06
000948EA E701                       	dc.b	smpsNoAttack, $01
000948EC E10C                       	smpsAlterNote       $0C
000948EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948F2 E106                       	smpsAlterNote       $06
000948F4 E701                       	dc.b	smpsNoAttack, $01
000948F6 E103                       	smpsAlterNote       $03
000948F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948FC E109                       	smpsAlterNote       $09
000948FE E701                       	dc.b	smpsNoAttack, $01
00094900 E10D                       	smpsAlterNote       $0D
00094902 E701                       	dc.b	smpsNoAttack, $01
00094904 E10C                       	smpsAlterNote       $0C
00094906 E701                       	dc.b	smpsNoAttack, $01
00094908 E106                       	smpsAlterNote       $06
0009490A E701                       	dc.b	smpsNoAttack, $01
0009490C E102                       	smpsAlterNote       $02
0009490E E701                       	dc.b	smpsNoAttack, $01
00094910 E103                       	smpsAlterNote       $03
00094912 8001                       	dc.b	nRst, $01
00094914 E10B                       	smpsAlterNote       $0B
00094916 C60D                       	dc.b	nA5, $0D
00094918 E108                       	smpsAlterNote       $08
0009491A E701                       	dc.b	smpsNoAttack, $01
0009491C E104                       	smpsAlterNote       $04
0009491E E701                       	dc.b	smpsNoAttack, $01
00094920 E108                       	smpsAlterNote       $08
00094922 E701                       	dc.b	smpsNoAttack, $01
00094924 E10B                       	smpsAlterNote       $0B
00094926 E701                       	dc.b	smpsNoAttack, $01
00094928 E10F                       	smpsAlterNote       $0F
0009492A E701                       	dc.b	smpsNoAttack, $01
0009492C E10B                       	smpsAlterNote       $0B
0009492E E701                       	dc.b	smpsNoAttack, $01
00094930 E105                       	smpsAlterNote       $05
00094932 E701                       	dc.b	smpsNoAttack, $01
00094934 E104                       	smpsAlterNote       $04
00094936 E701                       	dc.b	smpsNoAttack, $01
00094938 E108                       	smpsAlterNote       $08
0009493A E701                       	dc.b	smpsNoAttack, $01
0009493C E10E                       	smpsAlterNote       $0E
0009493E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094942 E10B                       	smpsAlterNote       $0B
00094944 E701                       	dc.b	smpsNoAttack, $01
00094946 E105                       	smpsAlterNote       $05
00094948 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009494C E10C                       	smpsAlterNote       $0C
0009494E C70E                       	dc.b	nBb5, $0E
00094950 E106                       	smpsAlterNote       $06
00094952 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094956 E10C                       	smpsAlterNote       $0C
00094958 E701                       	dc.b	smpsNoAttack, $01
0009495A E10F                       	smpsAlterNote       $0F
0009495C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094960 E109                       	smpsAlterNote       $09
00094962 E701                       	dc.b	smpsNoAttack, $01
00094964 E105                       	smpsAlterNote       $05
00094966 E701                       	dc.b	smpsNoAttack, $01
00094968 E106                       	smpsAlterNote       $06
0009496A E701                       	dc.b	smpsNoAttack, $01
0009496C E10C                       	smpsAlterNote       $0C
0009496E E701                       	dc.b	smpsNoAttack, $01
00094970 E110                       	smpsAlterNote       $10
00094972 E701                       	dc.b	smpsNoAttack, $01
00094974 E10C                       	smpsAlterNote       $0C
00094976 E701                       	dc.b	smpsNoAttack, $01
00094978 E109                       	smpsAlterNote       $09
0009497A E701                       	dc.b	smpsNoAttack, $01
0009497C E105                       	smpsAlterNote       $05
0009497E E701                       	dc.b	smpsNoAttack, $01
00094980 E106                       	smpsAlterNote       $06
00094982 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00094986 E107                       	smpsAlterNote       $07
00094988 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
0009498D E108                       	smpsAlterNote       $08
0009498F CD0D                       	dc.b	nE6, $0D
00094991 E107                       	smpsAlterNote       $07
00094993 CB0D                       	dc.b	nD6, $0D
00094995 E104                       	smpsAlterNote       $04
00094997 E701                       	dc.b	smpsNoAttack, $01
00094999 E100                       	smpsAlterNote       $00
0009499B E701                       	dc.b	smpsNoAttack, $01
0009499D E101                       	smpsAlterNote       $01
0009499F E701                       	dc.b	smpsNoAttack, $01
000949A1 E107                       	smpsAlterNote       $07
000949A3 E701                       	dc.b	smpsNoAttack, $01
000949A5 E10B                       	smpsAlterNote       $0B
000949A7 E701                       	dc.b	smpsNoAttack, $01
000949A9 E107                       	smpsAlterNote       $07
000949AB E701                       	dc.b	smpsNoAttack, $01
000949AD E104                       	smpsAlterNote       $04
000949AF E701                       	dc.b	smpsNoAttack, $01
000949B1 E100                       	smpsAlterNote       $00
000949B3 E701                       	dc.b	smpsNoAttack, $01
000949B5 E104                       	smpsAlterNote       $04
000949B7 E701                       	dc.b	smpsNoAttack, $01
000949B9 E10A                       	smpsAlterNote       $0A
000949BB E701                       	dc.b	smpsNoAttack, $01
000949BD E10B                       	smpsAlterNote       $0B
000949BF E701                       	dc.b	smpsNoAttack, $01
000949C1 E108                       	smpsAlterNote       $08
000949C3 CC0D                       	dc.b	nEb6, $0D
000949C5 E105                       	smpsAlterNote       $05
000949C7 E701                       	dc.b	smpsNoAttack, $01
000949C9 E101                       	smpsAlterNote       $01
000949CB E701                       	dc.b	smpsNoAttack, $01
000949CD E102                       	smpsAlterNote       $02
000949CF E701                       	dc.b	smpsNoAttack, $01
000949D1 E108                       	smpsAlterNote       $08
000949D3 E701                       	dc.b	smpsNoAttack, $01
000949D5 E106                       	smpsAlterNote       $06
000949D7 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
000949E3 8001                       	dc.b	nRst, $01
000949E5 E107                       	smpsAlterNote       $07
000949E7 CB0D                       	dc.b	nD6, $0D
000949E9 E104                       	smpsAlterNote       $04
000949EB E701                       	dc.b	smpsNoAttack, $01
000949ED E100                       	smpsAlterNote       $00
000949EF E701                       	dc.b	smpsNoAttack, $01
000949F1 E104                       	smpsAlterNote       $04
000949F3 E701                       	dc.b	smpsNoAttack, $01
000949F5 E107                       	smpsAlterNote       $07
000949F7 E701                       	dc.b	smpsNoAttack, $01
000949F9 E10B                       	smpsAlterNote       $0B
000949FB E701                       	dc.b	smpsNoAttack, $01
000949FD E107                       	smpsAlterNote       $07
000949FF E701                       	dc.b	smpsNoAttack, $01
00094A01 E101                       	smpsAlterNote       $01
00094A03 E701                       	dc.b	smpsNoAttack, $01
00094A05 E100                       	smpsAlterNote       $00
00094A07 E701                       	dc.b	smpsNoAttack, $01
00094A09 E104                       	smpsAlterNote       $04
00094A0B E701                       	dc.b	smpsNoAttack, $01
00094A0D E10A                       	smpsAlterNote       $0A
00094A0F E701                       	dc.b	smpsNoAttack, $01
00094A11 E10B                       	smpsAlterNote       $0B
00094A13 8001                       	dc.b	nRst, $01
00094A15 E109                       	smpsAlterNote       $09
00094A17 CE0A                       	dc.b	nF6, $0A
00094A19 E108                       	smpsAlterNote       $08
00094A1B CC07                       	dc.b	nEb6, $07
00094A1D E106                       	smpsAlterNote       $06
00094A1F C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00094A2B E107                       	smpsAlterNote       $07
00094A2D CB0D                       	dc.b	nD6, $0D
00094A2F E101                       	smpsAlterNote       $01
00094A31 E701                       	dc.b	smpsNoAttack, $01
00094A33 E100                       	smpsAlterNote       $00
00094A35 E701                       	dc.b	smpsNoAttack, $01
00094A37 E104                       	smpsAlterNote       $04
00094A39 E701                       	dc.b	smpsNoAttack, $01
00094A3B E10A                       	smpsAlterNote       $0A
00094A3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A41 E107                       	smpsAlterNote       $07
00094A43 E701                       	dc.b	smpsNoAttack, $01
00094A45 E101                       	smpsAlterNote       $01
00094A47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A4B E107                       	smpsAlterNote       $07
00094A4D E701                       	dc.b	smpsNoAttack, $01
00094A4F E10A                       	smpsAlterNote       $0A
00094A51 E701                       	dc.b	smpsNoAttack, $01
00094A53 E10B                       	smpsAlterNote       $0B
00094A55 8001                       	dc.b	nRst, $01
00094A57 E108                       	smpsAlterNote       $08
00094A59 CC0D                       	dc.b	nEb6, $0D
00094A5B E102                       	smpsAlterNote       $02
00094A5D E701                       	dc.b	smpsNoAttack, $01
00094A5F E101                       	smpsAlterNote       $01
00094A61 E701                       	dc.b	smpsNoAttack, $01
00094A63 E105                       	smpsAlterNote       $05
00094A65 E701                       	dc.b	smpsNoAttack, $01
00094A67 E108                       	smpsAlterNote       $08
00094A69 8001                       	dc.b	nRst, $01
00094A6B E106                       	smpsAlterNote       $06
00094A6D C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00094A79 8001                       	dc.b	nRst, $01
00094A7B E107                       	smpsAlterNote       $07
00094A7D CB0D                       	dc.b	nD6, $0D
00094A7F E101                       	smpsAlterNote       $01
00094A81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A85 E104                       	smpsAlterNote       $04
00094A87 E701                       	dc.b	smpsNoAttack, $01
00094A89 E10A                       	smpsAlterNote       $0A
00094A8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A8F E104                       	smpsAlterNote       $04
00094A91 E701                       	dc.b	smpsNoAttack, $01
00094A93 E101                       	smpsAlterNote       $01
00094A95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A99 E107                       	smpsAlterNote       $07
00094A9B E701                       	dc.b	smpsNoAttack, $01
00094A9D E10B                       	smpsAlterNote       $0B
00094A9F E701                       	dc.b	smpsNoAttack, $01
00094AA1 E10A                       	smpsAlterNote       $0A
00094AA3 E701                       	dc.b	smpsNoAttack, $01
00094AA5 E104                       	smpsAlterNote       $04
00094AA7 E701                       	dc.b	smpsNoAttack, $01
00094AA9 E100                       	smpsAlterNote       $00
00094AAB E701                       	dc.b	smpsNoAttack, $01
00094AAD E101                       	smpsAlterNote       $01
00094AAF 801C                       	dc.b	nRst, $1C
00094AB3 E107                       	smpsAlterNote       $07
00094AB5 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094AB9 E603                       	smpsAlterVol        $03
00094ABB F6F1 AD                    	smpsJump            music84_Jump03
00094ABE                            
00094ABE                            ; FM3 Data
00094ABE                            music84_FM3:
00094ABE E0C0                       	smpsPan             panCenter, $00
00094AC2 E109                       	smpsAlterNote       $09
00094AC4 C203 8007                  	dc.b	nF5, $03, nRst, $07
00094AC8 E108                       	smpsAlterNote       $08
00094ACA C103 800B                  	dc.b	nE5, $03, nRst, $0B
00094ACE E10B                       	smpsAlterNote       $0B
00094AD0 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00094AD6 E040                       	smpsPan             panRight, $00
00094AD8 E110                       	smpsAlterNote       $10
00094ADA E6F9                       	smpsAlterVol        $F9
00094ADC C702 8001                  	dc.b	nBb5, $02, nRst, $01
00094AE0 E10F                       	smpsAlterNote       $0F
00094AE2 C603                       	dc.b	nA5, $03
00094AE4 E10D                       	smpsAlterNote       $0D
00094AE6 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00094AEC E10C                       	smpsAlterNote       $0C
00094AEE C103 8001                  	dc.b	nE5, $03, nRst, $01
00094AF2 E10A                       	smpsAlterNote       $0A
00094AF4 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00094AF8 E10F                       	smpsAlterNote       $0F
00094AFA BA01 8001                  	dc.b	nA4, $01, nRst, $01
00094AFE E0C0                       	smpsPan             panCenter, $00
00094B02 E109                       	smpsAlterNote       $09
00094B04 E609                       	smpsAlterVol        $09
00094B06 B603                       	dc.b	nF4, $03
00094B08                            
00094B08                            music84_Jump02:
00094B08 E70A                       	dc.b	smpsNoAttack, $0A
00094B0A E103                       	smpsAlterNote       $03
00094B0C E701                       	dc.b	smpsNoAttack, $01
00094B0E E102                       	smpsAlterNote       $02
00094B10 E701                       	dc.b	smpsNoAttack, $01
00094B12 E106                       	smpsAlterNote       $06
00094B14 E701                       	dc.b	smpsNoAttack, $01
00094B16 E10C                       	smpsAlterNote       $0C
00094B18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B1C E109                       	smpsAlterNote       $09
00094B1E E701                       	dc.b	smpsNoAttack, $01
00094B20 E103                       	smpsAlterNote       $03
00094B22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B26 E109                       	smpsAlterNote       $09
00094B28 E701                       	dc.b	smpsNoAttack, $01
00094B2A E10C                       	smpsAlterNote       $0C
00094B2C E701                       	dc.b	smpsNoAttack, $01
00094B2E E10D                       	smpsAlterNote       $0D
00094B30 8001                       	dc.b	nRst, $01
00094B32 E109                       	smpsAlterNote       $09
00094B34 B80D                       	dc.b	nG4, $0D
00094B36 E103                       	smpsAlterNote       $03
00094B38 E701                       	dc.b	smpsNoAttack, $01
00094B3A E102                       	smpsAlterNote       $02
00094B3C E701                       	dc.b	smpsNoAttack, $01
00094B3E E106                       	smpsAlterNote       $06
00094B40 E701                       	dc.b	smpsNoAttack, $01
00094B42 E10C                       	smpsAlterNote       $0C
00094B44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B48 E109                       	smpsAlterNote       $09
00094B4A E701                       	dc.b	smpsNoAttack, $01
00094B4C E103                       	smpsAlterNote       $03
00094B4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B52 E109                       	smpsAlterNote       $09
00094B54 E701                       	dc.b	smpsNoAttack, $01
00094B56 E10C                       	smpsAlterNote       $0C
00094B58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B5C E106                       	smpsAlterNote       $06
00094B5E E701                       	dc.b	smpsNoAttack, $01
00094B60 E102                       	smpsAlterNote       $02
00094B62 E701                       	dc.b	smpsNoAttack, $01
00094B64 E103                       	smpsAlterNote       $03
00094B66 E701                       	dc.b	smpsNoAttack, $01
00094B68 E109                       	smpsAlterNote       $09
00094B6A E701                       	dc.b	smpsNoAttack, $01
00094B6C E10D                       	smpsAlterNote       $0D
00094B6E E701                       	dc.b	smpsNoAttack, $01
00094B70 E109                       	smpsAlterNote       $09
00094B72 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00094B76 E10B                       	smpsAlterNote       $0B
00094B78 BA0D                       	dc.b	nA4, $0D
00094B7A E105                       	smpsAlterNote       $05
00094B7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B80 E108                       	smpsAlterNote       $08
00094B82 E701                       	dc.b	smpsNoAttack, $01
00094B84 E10E                       	smpsAlterNote       $0E
00094B86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B8A E108                       	smpsAlterNote       $08
00094B8C E701                       	dc.b	smpsNoAttack, $01
00094B8E E104                       	smpsAlterNote       $04
00094B90 E701                       	dc.b	smpsNoAttack, $01
00094B92 E105                       	smpsAlterNote       $05
00094B94 E701                       	dc.b	smpsNoAttack, $01
00094B96 E10B                       	smpsAlterNote       $0B
00094B98 E701                       	dc.b	smpsNoAttack, $01
00094B9A E10F                       	smpsAlterNote       $0F
00094B9C E701                       	dc.b	smpsNoAttack, $01
00094B9E E10B                       	smpsAlterNote       $0B
00094BA0 E701                       	dc.b	smpsNoAttack, $01
00094BA2 E108                       	smpsAlterNote       $08
00094BA4 E701                       	dc.b	smpsNoAttack, $01
00094BA6 E104                       	smpsAlterNote       $04
00094BA8 E701                       	dc.b	smpsNoAttack, $01
00094BAA E108                       	smpsAlterNote       $08
00094BAC E701                       	dc.b	smpsNoAttack, $01
00094BAE E10E                       	smpsAlterNote       $0E
00094BB0 E701                       	dc.b	smpsNoAttack, $01
00094BB2 E10F                       	smpsAlterNote       $0F
00094BB4 E701                       	dc.b	smpsNoAttack, $01
00094BB6 E10B                       	smpsAlterNote       $0B
00094BB8 E701                       	dc.b	smpsNoAttack, $01
00094BBA E105                       	smpsAlterNote       $05
00094BBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BC0 E108                       	smpsAlterNote       $08
00094BC2 E701                       	dc.b	smpsNoAttack, $01
00094BC4 E10E                       	smpsAlterNote       $0E
00094BC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BCA E108                       	smpsAlterNote       $08
00094BCC E701                       	dc.b	smpsNoAttack, $01
00094BCE E105                       	smpsAlterNote       $05
00094BD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BD4 E10B                       	smpsAlterNote       $0B
00094BD6 E701                       	dc.b	smpsNoAttack, $01
00094BD8 E10F                       	smpsAlterNote       $0F
00094BDA E701                       	dc.b	smpsNoAttack, $01
00094BDC E10E                       	smpsAlterNote       $0E
00094BDE E701                       	dc.b	smpsNoAttack, $01
00094BE0 E108                       	smpsAlterNote       $08
00094BE2 E701                       	dc.b	smpsNoAttack, $01
00094BE4 E104                       	smpsAlterNote       $04
00094BE6 E701                       	dc.b	smpsNoAttack, $01
00094BE8 E105                       	smpsAlterNote       $05
00094BEA 8001                       	dc.b	nRst, $01
00094BEC E108                       	smpsAlterNote       $08
00094BEE B50A                       	dc.b	nE4, $0A
00094BF0 E109                       	smpsAlterNote       $09
00094BF2 B60D                       	dc.b	nF4, $0D
00094BF4 E106                       	smpsAlterNote       $06
00094BF6 E701                       	dc.b	smpsNoAttack, $01
00094BF8 E103                       	smpsAlterNote       $03
00094BFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BFE E109                       	smpsAlterNote       $09
00094C00 E701                       	dc.b	smpsNoAttack, $01
00094C02 E10D                       	smpsAlterNote       $0D
00094C04 E701                       	dc.b	smpsNoAttack, $01
00094C06 E10C                       	smpsAlterNote       $0C
00094C08 E701                       	dc.b	smpsNoAttack, $01
00094C0A E106                       	smpsAlterNote       $06
00094C0C E701                       	dc.b	smpsNoAttack, $01
00094C0E E102                       	smpsAlterNote       $02
00094C10 E701                       	dc.b	smpsNoAttack, $01
00094C12 E106                       	smpsAlterNote       $06
00094C14 E701                       	dc.b	smpsNoAttack, $01
00094C16 E109                       	smpsAlterNote       $09
00094C18 E701                       	dc.b	smpsNoAttack, $01
00094C1A E10D                       	smpsAlterNote       $0D
00094C1C E701                       	dc.b	smpsNoAttack, $01
00094C1E E109                       	smpsAlterNote       $09
00094C20 B80D                       	dc.b	nG4, $0D
00094C22 E106                       	smpsAlterNote       $06
00094C24 E701                       	dc.b	smpsNoAttack, $01
00094C26 E103                       	smpsAlterNote       $03
00094C28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C2C E109                       	smpsAlterNote       $09
00094C2E E701                       	dc.b	smpsNoAttack, $01
00094C30 E10D                       	smpsAlterNote       $0D
00094C32 E701                       	dc.b	smpsNoAttack, $01
00094C34 E10C                       	smpsAlterNote       $0C
00094C36 E701                       	dc.b	smpsNoAttack, $01
00094C38 E106                       	smpsAlterNote       $06
00094C3A E701                       	dc.b	smpsNoAttack, $01
00094C3C E102                       	smpsAlterNote       $02
00094C3E E701                       	dc.b	smpsNoAttack, $01
00094C40 E106                       	smpsAlterNote       $06
00094C42 E701                       	dc.b	smpsNoAttack, $01
00094C44 E109                       	smpsAlterNote       $09
00094C46 E701                       	dc.b	smpsNoAttack, $01
00094C48 E10D                       	smpsAlterNote       $0D
00094C4A E701                       	dc.b	smpsNoAttack, $01
00094C4C E109                       	smpsAlterNote       $09
00094C4E E701                       	dc.b	smpsNoAttack, $01
00094C50 E103                       	smpsAlterNote       $03
00094C52 E701                       	dc.b	smpsNoAttack, $01
00094C54 E102                       	smpsAlterNote       $02
00094C56 E701                       	dc.b	smpsNoAttack, $01
00094C58 E106                       	smpsAlterNote       $06
00094C5A E701                       	dc.b	smpsNoAttack, $01
00094C5C E10C                       	smpsAlterNote       $0C
00094C5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C62 E109                       	smpsAlterNote       $09
00094C64 E701                       	dc.b	smpsNoAttack, $01
00094C66 E10B                       	smpsAlterNote       $0B
00094C68 BA0D                       	dc.b	nA4, $0D
00094C6A E108                       	smpsAlterNote       $08
00094C6C E701                       	dc.b	smpsNoAttack, $01
00094C6E E104                       	smpsAlterNote       $04
00094C70 E701                       	dc.b	smpsNoAttack, $01
00094C72 E108                       	smpsAlterNote       $08
00094C74 E701                       	dc.b	smpsNoAttack, $01
00094C76 E10B                       	smpsAlterNote       $0B
00094C78 E701                       	dc.b	smpsNoAttack, $01
00094C7A E10F                       	smpsAlterNote       $0F
00094C7C E701                       	dc.b	smpsNoAttack, $01
00094C7E E10B                       	smpsAlterNote       $0B
00094C80 E701                       	dc.b	smpsNoAttack, $01
00094C82 E105                       	smpsAlterNote       $05
00094C84 E701                       	dc.b	smpsNoAttack, $01
00094C86 E104                       	smpsAlterNote       $04
00094C88 E701                       	dc.b	smpsNoAttack, $01
00094C8A E108                       	smpsAlterNote       $08
00094C8C E701                       	dc.b	smpsNoAttack, $01
00094C8E E10E                       	smpsAlterNote       $0E
00094C90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C94 E10B                       	smpsAlterNote       $0B
00094C96 E701                       	dc.b	smpsNoAttack, $01
00094C98 E105                       	smpsAlterNote       $05
00094C9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C9E E10B                       	smpsAlterNote       $0B
00094CA0 E701                       	dc.b	smpsNoAttack, $01
00094CA2 E10E                       	smpsAlterNote       $0E
00094CA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CA8 E108                       	smpsAlterNote       $08
00094CAA E701                       	dc.b	smpsNoAttack, $01
00094CAC E104                       	smpsAlterNote       $04
00094CAE E701                       	dc.b	smpsNoAttack, $01
00094CB0 E105                       	smpsAlterNote       $05
00094CB2 E701                       	dc.b	smpsNoAttack, $01
00094CB4 E10B                       	smpsAlterNote       $0B
00094CB6 E701                       	dc.b	smpsNoAttack, $01
00094CB8 E10F                       	smpsAlterNote       $0F
00094CBA E701                       	dc.b	smpsNoAttack, $01
00094CBC E10B                       	smpsAlterNote       $0B
00094CBE E701                       	dc.b	smpsNoAttack, $01
00094CC0 E108                       	smpsAlterNote       $08
00094CC2 E701                       	dc.b	smpsNoAttack, $01
00094CC4 E105                       	smpsAlterNote       $05
00094CC6 8001                       	dc.b	nRst, $01
00094CC8 E109                       	smpsAlterNote       $09
00094CCA B609 8001                  	dc.b	nF4, $09, nRst, $01
00094CCE E108                       	smpsAlterNote       $08
00094CD0 B506 8001                  	dc.b	nE4, $06, nRst, $01
00094CD4 E107                       	smpsAlterNote       $07
00094CD6 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00094CDA E108                       	smpsAlterNote       $08
00094CDC B502 8001                  	dc.b	nE4, $02, nRst, $01
00094CE0 E109                       	smpsAlterNote       $09
00094CE2 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00094CE8 E10B                       	smpsAlterNote       $0B
00094CEA BA0D                       	dc.b	nA4, $0D
00094CEC E108                       	smpsAlterNote       $08
00094CEE E701                       	dc.b	smpsNoAttack, $01
00094CF0 E104                       	smpsAlterNote       $04
00094CF2 E701                       	dc.b	smpsNoAttack, $01
00094CF4 E108                       	smpsAlterNote       $08
00094CF6 E701                       	dc.b	smpsNoAttack, $01
00094CF8 E10E                       	smpsAlterNote       $0E
00094CFA E701                       	dc.b	smpsNoAttack, $01
00094CFC E10F                       	smpsAlterNote       $0F
00094CFE E701                       	dc.b	smpsNoAttack, $01
00094D00 E10B                       	smpsAlterNote       $0B
00094D02 E701                       	dc.b	smpsNoAttack, $01
00094D04 E105                       	smpsAlterNote       $05
00094D06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D0A E108                       	smpsAlterNote       $08
00094D0C E701                       	dc.b	smpsNoAttack, $01
00094D0E E10E                       	smpsAlterNote       $0E
00094D10 E701                       	dc.b	smpsNoAttack, $01
00094D12 E10F                       	smpsAlterNote       $0F
00094D14 8001                       	dc.b	nRst, $01
00094D16 E109                       	smpsAlterNote       $09
00094D18 C20D                       	dc.b	nF5, $0D
00094D1A E103                       	smpsAlterNote       $03
00094D1C E701                       	dc.b	smpsNoAttack, $01
00094D1E E102                       	smpsAlterNote       $02
00094D20 E701                       	dc.b	smpsNoAttack, $01
00094D22 E106                       	smpsAlterNote       $06
00094D24 E701                       	dc.b	smpsNoAttack, $01
00094D26 E10C                       	smpsAlterNote       $0C
00094D28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D2C E109                       	smpsAlterNote       $09
00094D2E E701                       	dc.b	smpsNoAttack, $01
00094D30 E103                       	smpsAlterNote       $03
00094D32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D36 E109                       	smpsAlterNote       $09
00094D38 E701                       	dc.b	smpsNoAttack, $01
00094D3A E10C                       	smpsAlterNote       $0C
00094D3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D40 E106                       	smpsAlterNote       $06
00094D42 E701                       	dc.b	smpsNoAttack, $01
00094D44 E102                       	smpsAlterNote       $02
00094D46 E701                       	dc.b	smpsNoAttack, $01
00094D48 E103                       	smpsAlterNote       $03
00094D4A E701                       	dc.b	smpsNoAttack, $01
00094D4C E109                       	smpsAlterNote       $09
00094D4E E701                       	dc.b	smpsNoAttack, $01
00094D50 E10D                       	smpsAlterNote       $0D
00094D52 E701                       	dc.b	smpsNoAttack, $01
00094D54 E109                       	smpsAlterNote       $09
00094D56 E701                       	dc.b	smpsNoAttack, $01
00094D58 E106                       	smpsAlterNote       $06
00094D5A E701                       	dc.b	smpsNoAttack, $01
00094D5C E102                       	smpsAlterNote       $02
00094D5E E701                       	dc.b	smpsNoAttack, $01
00094D60 E106                       	smpsAlterNote       $06
00094D62 E701                       	dc.b	smpsNoAttack, $01
00094D64 E10C                       	smpsAlterNote       $0C
00094D66 E701                       	dc.b	smpsNoAttack, $01
00094D68 E10D                       	smpsAlterNote       $0D
00094D6A E701                       	dc.b	smpsNoAttack, $01
00094D6C E109                       	smpsAlterNote       $09
00094D6E E701                       	dc.b	smpsNoAttack, $01
00094D70 E103                       	smpsAlterNote       $03
00094D72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D76 E106                       	smpsAlterNote       $06
00094D78 E701                       	dc.b	smpsNoAttack, $01
00094D7A E10C                       	smpsAlterNote       $0C
00094D7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D80 E106                       	smpsAlterNote       $06
00094D82 E701                       	dc.b	smpsNoAttack, $01
00094D84 E103                       	smpsAlterNote       $03
00094D86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D8A E109                       	smpsAlterNote       $09
00094D8C E701                       	dc.b	smpsNoAttack, $01
00094D8E E10D                       	smpsAlterNote       $0D
00094D90 E701                       	dc.b	smpsNoAttack, $01
00094D92 E10C                       	smpsAlterNote       $0C
00094D94 E701                       	dc.b	smpsNoAttack, $01
00094D96 E106                       	smpsAlterNote       $06
00094D98 E701                       	dc.b	smpsNoAttack, $01
00094D9A E102                       	smpsAlterNote       $02
00094D9C E701                       	dc.b	smpsNoAttack, $01
00094D9E E106                       	smpsAlterNote       $06
00094DA0 E701                       	dc.b	smpsNoAttack, $01
00094DA2 E109                       	smpsAlterNote       $09
00094DA4 E701                       	dc.b	smpsNoAttack, $01
00094DA6 E10D                       	smpsAlterNote       $0D
00094DA8 E701                       	dc.b	smpsNoAttack, $01
00094DAA E109                       	smpsAlterNote       $09
00094DAC E701                       	dc.b	smpsNoAttack, $01
00094DAE E103                       	smpsAlterNote       $03
00094DB0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00094DB4 E109                       	smpsAlterNote       $09
00094DB6 C206                       	dc.b	nF5, $06
00094DB8 E108                       	smpsAlterNote       $08
00094DBA C10E                       	dc.b	nE5, $0E
00094DBC E102                       	smpsAlterNote       $02
00094DBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DC2 E108                       	smpsAlterNote       $08
00094DC4 E701                       	dc.b	smpsNoAttack, $01
00094DC6 E10B                       	smpsAlterNote       $0B
00094DC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DCC E105                       	smpsAlterNote       $05
00094DCE E701                       	dc.b	smpsNoAttack, $01
00094DD0 E101                       	smpsAlterNote       $01
00094DD2 E701                       	dc.b	smpsNoAttack, $01
00094DD4 E102                       	smpsAlterNote       $02
00094DD6 E701                       	dc.b	smpsNoAttack, $01
00094DD8 E108                       	smpsAlterNote       $08
00094DDA E701                       	dc.b	smpsNoAttack, $01
00094DDC E10C                       	smpsAlterNote       $0C
00094DDE E701                       	dc.b	smpsNoAttack, $01
00094DE0 E107                       	smpsAlterNote       $07
00094DE2 BF0E                       	dc.b	nD5, $0E
00094DE4 E101                       	smpsAlterNote       $01
00094DE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DEA E107                       	smpsAlterNote       $07
00094DEC E701                       	dc.b	smpsNoAttack, $01
00094DEE E10A                       	smpsAlterNote       $0A
00094DF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DF4 E104                       	smpsAlterNote       $04
00094DF6 E701                       	dc.b	smpsNoAttack, $01
00094DF8 E100                       	smpsAlterNote       $00
00094DFA E701                       	dc.b	smpsNoAttack, $01
00094DFC E104                       	smpsAlterNote       $04
00094DFE E701                       	dc.b	smpsNoAttack, $01
00094E00 E107                       	smpsAlterNote       $07
00094E02 E701                       	dc.b	smpsNoAttack, $01
00094E04 E10B                       	smpsAlterNote       $0B
00094E06 E701                       	dc.b	smpsNoAttack, $01
00094E08 E107                       	smpsAlterNote       $07
00094E0A E701                       	dc.b	smpsNoAttack, $01
00094E0C E101                       	smpsAlterNote       $01
00094E0E E701                       	dc.b	smpsNoAttack, $01
00094E10 E100                       	smpsAlterNote       $00
00094E12 E701                       	dc.b	smpsNoAttack, $01
00094E14 E104                       	smpsAlterNote       $04
00094E16 E701                       	dc.b	smpsNoAttack, $01
00094E18 E10A                       	smpsAlterNote       $0A
00094E1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E1E E107                       	smpsAlterNote       $07
00094E20 E701                       	dc.b	smpsNoAttack, $01
00094E22 E101                       	smpsAlterNote       $01
00094E24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E28 E107                       	smpsAlterNote       $07
00094E2A E701                       	dc.b	smpsNoAttack, $01
00094E2C E10A                       	smpsAlterNote       $0A
00094E2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E32 E104                       	smpsAlterNote       $04
00094E34 E701                       	dc.b	smpsNoAttack, $01
00094E36 E100                       	smpsAlterNote       $00
00094E38 E701                       	dc.b	smpsNoAttack, $01
00094E3A E101                       	smpsAlterNote       $01
00094E3C E701                       	dc.b	smpsNoAttack, $01
00094E3E E107                       	smpsAlterNote       $07
00094E40 E701                       	dc.b	smpsNoAttack, $01
00094E42 E10B                       	smpsAlterNote       $0B
00094E44 E701                       	dc.b	smpsNoAttack, $01
00094E46 E107                       	smpsAlterNote       $07
00094E48 E701                       	dc.b	smpsNoAttack, $01
00094E4A E104                       	smpsAlterNote       $04
00094E4C E701                       	dc.b	smpsNoAttack, $01
00094E4E E100                       	smpsAlterNote       $00
00094E50 E701                       	dc.b	smpsNoAttack, $01
00094E52 E104                       	smpsAlterNote       $04
00094E54 E701                       	dc.b	smpsNoAttack, $01
00094E56 E10A                       	smpsAlterNote       $0A
00094E58 E701                       	dc.b	smpsNoAttack, $01
00094E5A E10B                       	smpsAlterNote       $0B
00094E5C E701                       	dc.b	smpsNoAttack, $01
00094E5E E107                       	smpsAlterNote       $07
00094E60 E701                       	dc.b	smpsNoAttack, $01
00094E62 E101                       	smpsAlterNote       $01
00094E64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E68 E104                       	smpsAlterNote       $04
00094E6A E701                       	dc.b	smpsNoAttack, $01
00094E6C E10A                       	smpsAlterNote       $0A
00094E6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E72 E104                       	smpsAlterNote       $04
00094E74 E701                       	dc.b	smpsNoAttack, $01
00094E76 E101                       	smpsAlterNote       $01
00094E78 E701                       	dc.b	smpsNoAttack, $01
00094E7C E107                       	smpsAlterNote       $07
00094E7E E6FF                       	smpsAlterVol        $FF
00094E80 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00094E8C 8004                       	dc.b	nRst, $04
00094E90 E109                       	smpsAlterNote       $09
00094E92 E602                       	smpsAlterVol        $02
00094E94 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00094E9A E108                       	smpsAlterNote       $08
00094E9C B502 8001                  	dc.b	nE4, $02, nRst, $01
00094EA0 E109                       	smpsAlterNote       $09
00094EA2 B60D                       	dc.b	nF4, $0D
00094EA4 E106                       	smpsAlterNote       $06
00094EA6 E701                       	dc.b	smpsNoAttack, $01
00094EA8 E102                       	smpsAlterNote       $02
00094EAA E701                       	dc.b	smpsNoAttack, $01
00094EAC E106                       	smpsAlterNote       $06
00094EAE E701                       	dc.b	smpsNoAttack, $01
00094EB0 E109                       	smpsAlterNote       $09
00094EB2 E701                       	dc.b	smpsNoAttack, $01
00094EB4 E10D                       	smpsAlterNote       $0D
00094EB6 E701                       	dc.b	smpsNoAttack, $01
00094EB8 E109                       	smpsAlterNote       $09
00094EBA E701                       	dc.b	smpsNoAttack, $01
00094EBC E103                       	smpsAlterNote       $03
00094EBE E701                       	dc.b	smpsNoAttack, $01
00094EC0 E102                       	smpsAlterNote       $02
00094EC2 E701                       	dc.b	smpsNoAttack, $01
00094EC4 E106                       	smpsAlterNote       $06
00094EC6 E701                       	dc.b	smpsNoAttack, $01
00094EC8 E10C                       	smpsAlterNote       $0C
00094ECA E701                       	dc.b	smpsNoAttack, $01
00094ECC E10D                       	smpsAlterNote       $0D
00094ECE 8001                       	dc.b	nRst, $01
00094ED0 E109                       	smpsAlterNote       $09
00094ED2 B80D                       	dc.b	nG4, $0D
00094ED4 E106                       	smpsAlterNote       $06
00094ED6 E701                       	dc.b	smpsNoAttack, $01
00094ED8 E102                       	smpsAlterNote       $02
00094EDA E701                       	dc.b	smpsNoAttack, $01
00094EDC E106                       	smpsAlterNote       $06
00094EDE E701                       	dc.b	smpsNoAttack, $01
00094EE0 E10C                       	smpsAlterNote       $0C
00094EE2 E701                       	dc.b	smpsNoAttack, $01
00094EE4 E10D                       	smpsAlterNote       $0D
00094EE6 E701                       	dc.b	smpsNoAttack, $01
00094EE8 E109                       	smpsAlterNote       $09
00094EEA E701                       	dc.b	smpsNoAttack, $01
00094EEC E103                       	smpsAlterNote       $03
00094EEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EF2 E106                       	smpsAlterNote       $06
00094EF4 E701                       	dc.b	smpsNoAttack, $01
00094EF6 E10C                       	smpsAlterNote       $0C
00094EF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EFC E106                       	smpsAlterNote       $06
00094EFE E701                       	dc.b	smpsNoAttack, $01
00094F00 E103                       	smpsAlterNote       $03
00094F02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F06 E109                       	smpsAlterNote       $09
00094F08 E701                       	dc.b	smpsNoAttack, $01
00094F0A E10D                       	smpsAlterNote       $0D
00094F0C E701                       	dc.b	smpsNoAttack, $01
00094F0E E10C                       	smpsAlterNote       $0C
00094F10 E701                       	dc.b	smpsNoAttack, $01
00094F12 E109                       	smpsAlterNote       $09
00094F14 8001                       	dc.b	nRst, $01
00094F16 E10B                       	smpsAlterNote       $0B
00094F18 BA03                       	dc.b	nA4, $03
00094F1A E10C                       	smpsAlterNote       $0C
00094F1C BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00094F20 E10B                       	smpsAlterNote       $0B
00094F22 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00094F28 E10C                       	smpsAlterNote       $0C
00094F2A C703 8001                  	dc.b	nBb5, $03, nRst, $01
00094F2E E10B                       	smpsAlterNote       $0B
00094F30 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00094F36 E10C                       	smpsAlterNote       $0C
00094F38 D303                       	dc.b	nBb6, $03
00094F3A E10B                       	smpsAlterNote       $0B
00094F3C D20D                       	dc.b	nA6, $0D
00094F3E E108                       	smpsAlterNote       $08
00094F40 E701                       	dc.b	smpsNoAttack, $01
00094F42 E104                       	smpsAlterNote       $04
00094F44 E701                       	dc.b	smpsNoAttack, $01
00094F46 E105                       	smpsAlterNote       $05
00094F48 E701                       	dc.b	smpsNoAttack, $01
00094F4A E10B                       	smpsAlterNote       $0B
00094F4C E701                       	dc.b	smpsNoAttack, $01
00094F4E E10F                       	smpsAlterNote       $0F
00094F50 E701                       	dc.b	smpsNoAttack, $01
00094F52 E10B                       	smpsAlterNote       $0B
00094F54 E701                       	dc.b	smpsNoAttack, $01
00094F56 E108                       	smpsAlterNote       $08
00094F58 E701                       	dc.b	smpsNoAttack, $01
00094F5A E104                       	smpsAlterNote       $04
00094F5C E701                       	dc.b	smpsNoAttack, $01
00094F5E E108                       	smpsAlterNote       $08
00094F60 E701                       	dc.b	smpsNoAttack, $01
00094F62 E10E                       	smpsAlterNote       $0E
00094F64 E701                       	dc.b	smpsNoAttack, $01
00094F66 E10F                       	smpsAlterNote       $0F
00094F68 E701                       	dc.b	smpsNoAttack, $01
00094F6A E10B                       	smpsAlterNote       $0B
00094F6C E701                       	dc.b	smpsNoAttack, $01
00094F6E E105                       	smpsAlterNote       $05
00094F70 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00094F76 E109                       	smpsAlterNote       $09
00094F78 CE07                       	dc.b	nF6, $07
00094F7A E108                       	smpsAlterNote       $08
00094F7C CD06 8001                  	dc.b	nE6, $06, nRst, $01
00094F80 E109                       	smpsAlterNote       $09
00094F82 CE03 8001                  	dc.b	nF6, $03, nRst, $01
00094F86 E108                       	smpsAlterNote       $08
00094F88 CC0D                       	dc.b	nEb6, $0D
00094F8A E102                       	smpsAlterNote       $02
00094F8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F90 E108                       	smpsAlterNote       $08
00094F92 E701                       	dc.b	smpsNoAttack, $01
00094F94 E10B                       	smpsAlterNote       $0B
00094F96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F9A E105                       	smpsAlterNote       $05
00094F9C E701                       	dc.b	smpsNoAttack, $01
00094F9E E101                       	smpsAlterNote       $01
00094FA0 E701                       	dc.b	smpsNoAttack, $01
00094FA2 E102                       	smpsAlterNote       $02
00094FA4 E701                       	dc.b	smpsNoAttack, $01
00094FA6 E108                       	smpsAlterNote       $08
00094FA8 E701                       	dc.b	smpsNoAttack, $01
00094FAA E10C                       	smpsAlterNote       $0C
00094FAC E701                       	dc.b	smpsNoAttack, $01
00094FAE E108                       	smpsAlterNote       $08
00094FB0 E701                       	dc.b	smpsNoAttack, $01
00094FB2 E105                       	smpsAlterNote       $05
00094FB4 E701                       	dc.b	smpsNoAttack, $01
00094FB6 E101                       	smpsAlterNote       $01
00094FB8 E701                       	dc.b	smpsNoAttack, $01
00094FBA E105                       	smpsAlterNote       $05
00094FBC E701                       	dc.b	smpsNoAttack, $01
00094FBE E10B                       	smpsAlterNote       $0B
00094FC0 E701                       	dc.b	smpsNoAttack, $01
00094FC2 E10C                       	smpsAlterNote       $0C
00094FC4 E701                       	dc.b	smpsNoAttack, $01
00094FC6 E108                       	smpsAlterNote       $08
00094FC8 E701                       	dc.b	smpsNoAttack, $01
00094FCA E107                       	smpsAlterNote       $07
00094FCC CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
00094FD6 E10B                       	smpsAlterNote       $0B
00094FD8 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00094FE2 E109                       	smpsAlterNote       $09
00094FE4 C203                       	dc.b	nF5, $03
00094FE6 E108                       	smpsAlterNote       $08
00094FE8 C103 8001                  	dc.b	nE5, $03, nRst, $01
00094FEC E109                       	smpsAlterNote       $09
00094FEE C20D                       	dc.b	nF5, $0D
00094FF0 E108                       	smpsAlterNote       $08
00094FF2 C10E                       	dc.b	nE5, $0E
00094FF4 E107                       	smpsAlterNote       $07
00094FF6 BF0D                       	dc.b	nD5, $0D
00094FF8 E104                       	smpsAlterNote       $04
00094FFA E701                       	dc.b	smpsNoAttack, $01
00094FFC E100                       	smpsAlterNote       $00
00094FFE E701                       	dc.b	smpsNoAttack, $01
00095000 E104                       	smpsAlterNote       $04
00095002 E701                       	dc.b	smpsNoAttack, $01
00095004 E107                       	smpsAlterNote       $07
00095006 E701                       	dc.b	smpsNoAttack, $01
00095008 E10B                       	smpsAlterNote       $0B
0009500A E701                       	dc.b	smpsNoAttack, $01
0009500C E107                       	smpsAlterNote       $07
0009500E E701                       	dc.b	smpsNoAttack, $01
00095010 E101                       	smpsAlterNote       $01
00095012 E701                       	dc.b	smpsNoAttack, $01
00095014 E100                       	smpsAlterNote       $00
00095016 E701                       	dc.b	smpsNoAttack, $01
00095018 E104                       	smpsAlterNote       $04
0009501A E701                       	dc.b	smpsNoAttack, $01
0009501C E10A                       	smpsAlterNote       $0A
0009501E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095022 E107                       	smpsAlterNote       $07
00095024 E701                       	dc.b	smpsNoAttack, $01
00095026 E101                       	smpsAlterNote       $01
00095028 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009502C E107                       	smpsAlterNote       $07
0009502E E701                       	dc.b	smpsNoAttack, $01
00095030 E10A                       	smpsAlterNote       $0A
00095032 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095036 E104                       	smpsAlterNote       $04
00095038 E701                       	dc.b	smpsNoAttack, $01
0009503A E100                       	smpsAlterNote       $00
0009503C E701                       	dc.b	smpsNoAttack, $01
0009503E E101                       	smpsAlterNote       $01
00095040 E701                       	dc.b	smpsNoAttack, $01
00095042 E107                       	smpsAlterNote       $07
00095044 E701                       	dc.b	smpsNoAttack, $01
00095046 E10B                       	smpsAlterNote       $0B
00095048 E701                       	dc.b	smpsNoAttack, $01
0009504A E107                       	smpsAlterNote       $07
0009504C E701                       	dc.b	smpsNoAttack, $01
0009504E E104                       	smpsAlterNote       $04
00095050 E701                       	dc.b	smpsNoAttack, $01
00095052 E100                       	smpsAlterNote       $00
00095054 E701                       	dc.b	smpsNoAttack, $01
00095056 E104                       	smpsAlterNote       $04
00095058 E701                       	dc.b	smpsNoAttack, $01
0009505A E10A                       	smpsAlterNote       $0A
0009505C E701                       	dc.b	smpsNoAttack, $01
0009505E E10B                       	smpsAlterNote       $0B
00095060 E701                       	dc.b	smpsNoAttack, $01
00095062 E107                       	smpsAlterNote       $07
00095064 E701                       	dc.b	smpsNoAttack, $01
00095066 E101                       	smpsAlterNote       $01
00095068 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009506C E104                       	smpsAlterNote       $04
0009506E E701                       	dc.b	smpsNoAttack, $01
00095070 E10A                       	smpsAlterNote       $0A
00095072 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095076 E104                       	smpsAlterNote       $04
00095078 E701                       	dc.b	smpsNoAttack, $01
0009507A E101                       	smpsAlterNote       $01
0009507C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095080 E107                       	smpsAlterNote       $07
00095082 E701                       	dc.b	smpsNoAttack, $01
00095084 E10B                       	smpsAlterNote       $0B
00095086 E701                       	dc.b	smpsNoAttack, $01
00095088 E10A                       	smpsAlterNote       $0A
0009508A E701                       	dc.b	smpsNoAttack, $01
0009508C E104                       	smpsAlterNote       $04
0009508E E701                       	dc.b	smpsNoAttack, $01
00095090 E100                       	smpsAlterNote       $00
00095092 E701                       	dc.b	smpsNoAttack, $01
00095094 E104                       	smpsAlterNote       $04
00095096 E701                       	dc.b	smpsNoAttack, $01
00095098 E107                       	smpsAlterNote       $07
0009509A E701                       	dc.b	smpsNoAttack, $01
0009509C E10B                       	smpsAlterNote       $0B
0009509E E701                       	dc.b	smpsNoAttack, $01
000950A0 E107                       	smpsAlterNote       $07
000950A2 E701                       	dc.b	smpsNoAttack, $01
000950A4 E101                       	smpsAlterNote       $01
000950A6 E701                       	dc.b	smpsNoAttack, $01
000950A8 E100                       	smpsAlterNote       $00
000950AA E701                       	dc.b	smpsNoAttack, $01
000950AC E104                       	smpsAlterNote       $04
000950AE E701                       	dc.b	smpsNoAttack, $01
000950B0 E10A                       	smpsAlterNote       $0A
000950B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950B6 E107                       	smpsAlterNote       $07
000950B8 E701                       	dc.b	smpsNoAttack, $01
000950BA E101                       	smpsAlterNote       $01
000950BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950C0 E107                       	smpsAlterNote       $07
000950C2 E701                       	dc.b	smpsNoAttack, $01
000950C4 E10A                       	smpsAlterNote       $0A
000950C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950CA E104                       	smpsAlterNote       $04
000950CC E701                       	dc.b	smpsNoAttack, $01
000950CE E100                       	smpsAlterNote       $00
000950D0 E701                       	dc.b	smpsNoAttack, $01
000950D2 E101                       	smpsAlterNote       $01
000950D4 E701                       	dc.b	smpsNoAttack, $01
000950D6 E107                       	smpsAlterNote       $07
000950D8 E701                       	dc.b	smpsNoAttack, $01
000950DA E10B                       	smpsAlterNote       $0B
000950DC E701                       	dc.b	smpsNoAttack, $01
000950DE E107                       	smpsAlterNote       $07
000950E0 E701                       	dc.b	smpsNoAttack, $01
000950E2 E104                       	smpsAlterNote       $04
000950E4 E701                       	dc.b	smpsNoAttack, $01
000950E6 E100                       	smpsAlterNote       $00
000950E8 E701                       	dc.b	smpsNoAttack, $01
000950EA E101                       	smpsAlterNote       $01
000950EC 8001                       	dc.b	nRst, $01
000950EE E109                       	smpsAlterNote       $09
000950F0 C20D                       	dc.b	nF5, $0D
000950F2 E106                       	smpsAlterNote       $06
000950F4 E701                       	dc.b	smpsNoAttack, $01
000950F6 E102                       	smpsAlterNote       $02
000950F8 E701                       	dc.b	smpsNoAttack, $01
000950FA E106                       	smpsAlterNote       $06
000950FC E701                       	dc.b	smpsNoAttack, $01
000950FE E10C                       	smpsAlterNote       $0C
00095100 E701                       	dc.b	smpsNoAttack, $01
00095102 E10D                       	smpsAlterNote       $0D
00095104 E701                       	dc.b	smpsNoAttack, $01
00095106 E109                       	smpsAlterNote       $09
00095108 E701                       	dc.b	smpsNoAttack, $01
0009510A E103                       	smpsAlterNote       $03
0009510C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095110 E106                       	smpsAlterNote       $06
00095112 E701                       	dc.b	smpsNoAttack, $01
00095114 E10C                       	smpsAlterNote       $0C
00095116 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009511A E106                       	smpsAlterNote       $06
0009511C E701                       	dc.b	smpsNoAttack, $01
0009511E E103                       	smpsAlterNote       $03
00095120 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095124 E109                       	smpsAlterNote       $09
00095126 E701                       	dc.b	smpsNoAttack, $01
00095128 E10D                       	smpsAlterNote       $0D
0009512A E701                       	dc.b	smpsNoAttack, $01
0009512C E10C                       	smpsAlterNote       $0C
0009512E E701                       	dc.b	smpsNoAttack, $01
00095130 E109                       	smpsAlterNote       $09
00095132 8001                       	dc.b	nRst, $01
00095134 E108                       	smpsAlterNote       $08
00095136 C10D                       	dc.b	nE5, $0D
00095138 E109                       	smpsAlterNote       $09
0009513A C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0009513E E108                       	smpsAlterNote       $08
00095140 C10D                       	dc.b	nE5, $0D
00095142 E102                       	smpsAlterNote       $02
00095144 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095148 E105                       	smpsAlterNote       $05
0009514A E701                       	dc.b	smpsNoAttack, $01
0009514C E108                       	smpsAlterNote       $08
0009514E 8001                       	dc.b	nRst, $01
00095150 E107                       	smpsAlterNote       $07
00095152 BF0D                       	dc.b	nD5, $0D
00095154 E108                       	smpsAlterNote       $08
00095156 C107                       	dc.b	nE5, $07
00095158 E109                       	smpsAlterNote       $09
0009515A C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00095160 E10B                       	smpsAlterNote       $0B
00095162 C603                       	dc.b	nA5, $03
00095164 E10C                       	smpsAlterNote       $0C
00095166 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0009516C E10B                       	smpsAlterNote       $0B
0009516E C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00095174 E109                       	smpsAlterNote       $09
00095176 D003                       	dc.b	nG6, $03
00095178 E108                       	smpsAlterNote       $08
0009517A CD02 8001                  	dc.b	nE6, $02, nRst, $01
0009517E E10B                       	smpsAlterNote       $0B
00095180 C601 8001                  	dc.b	nA5, $01, nRst, $01
00095184 E108                       	smpsAlterNote       $08
00095186 C102                       	dc.b	nE5, $02
0009518A E10C                       	smpsAlterNote       $0C
0009518C E6FB                       	smpsAlterVol        $FB
0009518E A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0009519A 8001                       	dc.b	nRst, $01
0009519C E10B                       	smpsAlterNote       $0B
0009519E A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000951A6 E107                       	smpsAlterNote       $07
000951A8 A706 8001                  	dc.b	nD3, $06, nRst, $01
000951AC E10B                       	smpsAlterNote       $0B
000951AE A203                       	dc.b	nA2, $03
000951B0 E109                       	smpsAlterNote       $09
000951B2 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000951B6 E108                       	smpsAlterNote       $08
000951B8 A906                       	dc.b	nE3, $06
000951BA E107                       	smpsAlterNote       $07
000951BC A703 8001                  	dc.b	nD3, $03, nRst, $01
000951C0 E106                       	smpsAlterNote       $06
000951C2 A503                       	dc.b	nC3, $03
000951C4 E10C                       	smpsAlterNote       $0C
000951C6 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000951CA E10B                       	smpsAlterNote       $0B
000951CC A203 8004                  	dc.b	nA2, $03, nRst, $04
000951D0 E11B                       	smpsAlterNote       $1B
000951D2 C401                       	dc.b	nG5, $01
000951D4 E1F4                       	smpsAlterNote       $F4
000951D6 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000951D9 E106                       	smpsAlterNote       $06
000951DB E701                       	dc.b	smpsNoAttack, $01
000951DD E10F                       	smpsAlterNote       $0F
000951DF E701                       	dc.b	smpsNoAttack, $01
000951E1 E1E4                       	smpsAlterNote       $E4
000951E3 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000951E6 E1F6                       	smpsAlterNote       $F6
000951E8 E701                       	dc.b	smpsNoAttack, $01
000951EA E108                       	smpsAlterNote       $08
000951EC E701                       	dc.b	smpsNoAttack, $01
000951EE E10B                       	smpsAlterNote       $0B
000951F0 E706                       	dc.b	smpsNoAttack, $06
000951F2 E105                       	smpsAlterNote       $05
000951F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951F8 E108                       	smpsAlterNote       $08
000951FA E701                       	dc.b	smpsNoAttack, $01
000951FC E10E                       	smpsAlterNote       $0E
000951FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095202 E108                       	smpsAlterNote       $08
00095204 E701                       	dc.b	smpsNoAttack, $01
00095206 E105                       	smpsAlterNote       $05
00095208 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009520C E10B                       	smpsAlterNote       $0B
0009520E E701                       	dc.b	smpsNoAttack, $01
00095210 E10F                       	smpsAlterNote       $0F
00095212 E701                       	dc.b	smpsNoAttack, $01
00095214 E10E                       	smpsAlterNote       $0E
00095216 E701                       	dc.b	smpsNoAttack, $01
00095218 E108                       	smpsAlterNote       $08
0009521A E701                       	dc.b	smpsNoAttack, $01
0009521C E104                       	smpsAlterNote       $04
0009521E E701                       	dc.b	smpsNoAttack, $01
00095220 E108                       	smpsAlterNote       $08
00095222 E701                       	dc.b	smpsNoAttack, $01
00095224 E10B                       	smpsAlterNote       $0B
00095226 E701                       	dc.b	smpsNoAttack, $01
00095228 E10F                       	smpsAlterNote       $0F
0009522A E701                       	dc.b	smpsNoAttack, $01
0009522C E10B                       	smpsAlterNote       $0B
0009522E E701                       	dc.b	smpsNoAttack, $01
00095230 E105                       	smpsAlterNote       $05
00095232 E701                       	dc.b	smpsNoAttack, $01
00095234 E104                       	smpsAlterNote       $04
00095236 E701                       	dc.b	smpsNoAttack, $01
00095238 E108                       	smpsAlterNote       $08
0009523A E701                       	dc.b	smpsNoAttack, $01
0009523C E10E                       	smpsAlterNote       $0E
0009523E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095242 E10B                       	smpsAlterNote       $0B
00095244 E701                       	dc.b	smpsNoAttack, $01
00095246 E105                       	smpsAlterNote       $05
00095248 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009524C E10B                       	smpsAlterNote       $0B
0009524E E701                       	dc.b	smpsNoAttack, $01
00095250 E10E                       	smpsAlterNote       $0E
00095252 E701                       	dc.b	smpsNoAttack, $01
00095254 E10F                       	smpsAlterNote       $0F
00095256 8001                       	dc.b	nRst, $01
00095258 E109                       	smpsAlterNote       $09
0009525A C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00095260 E108                       	smpsAlterNote       $08
00095262 C101 8001                  	dc.b	nE5, $01, nRst, $01
00095266 E109                       	smpsAlterNote       $09
00095268 C202                       	dc.b	nF5, $02
0009526A E108                       	smpsAlterNote       $08
0009526C C102                       	dc.b	nE5, $02
0009526E E107                       	smpsAlterNote       $07
00095270 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00095274 E108                       	smpsAlterNote       $08
00095276 C101 8001                  	dc.b	nE5, $01, nRst, $01
0009527A E107                       	smpsAlterNote       $07
0009527C BF02                       	dc.b	nD5, $02
0009527E E106                       	smpsAlterNote       $06
00095280 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00095284 E107                       	smpsAlterNote       $07
00095286 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0009528A E106                       	smpsAlterNote       $06
0009528C BD02                       	dc.b	nC5, $02
0009528E E10C                       	smpsAlterNote       $0C
00095290 BB02                       	dc.b	nBb4, $02
00095292 E106                       	smpsAlterNote       $06
00095294 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00095298 E10C                       	smpsAlterNote       $0C
0009529A BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0009529E E10B                       	smpsAlterNote       $0B
000952A0 BA02                       	dc.b	nA4, $02
000952A2 E10C                       	smpsAlterNote       $0C
000952A4 BB02                       	dc.b	nBb4, $02
000952A6 E10B                       	smpsAlterNote       $0B
000952A8 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000952B2 E108                       	smpsAlterNote       $08
000952B4 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
000952BC E107                       	smpsAlterNote       $07
000952BE BE02                       	dc.b	nCs5, $02
000952C0 E10B                       	smpsAlterNote       $0B
000952C2 BA02                       	dc.b	nA4, $02
000952C4 E109                       	smpsAlterNote       $09
000952C6 B802 8001                  	dc.b	nG4, $02, nRst, $01
000952CA E108                       	smpsAlterNote       $08
000952CC B501 8001                  	dc.b	nE4, $01, nRst, $01
000952D0 E10B                       	smpsAlterNote       $0B
000952D2 AE02                       	dc.b	nA3, $02
000952D4 E10C                       	smpsAlterNote       $0C
000952D6 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
000952E2 E10B                       	smpsAlterNote       $0B
000952E4 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000952EC E107                       	smpsAlterNote       $07
000952EE A706 8001                  	dc.b	nD3, $06, nRst, $01
000952F2 E10B                       	smpsAlterNote       $0B
000952F4 A203                       	dc.b	nA2, $03
000952F6 E109                       	smpsAlterNote       $09
000952F8 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000952FC E108                       	smpsAlterNote       $08
000952FE A906 8001                  	dc.b	nE3, $06, nRst, $01
00095302 E107                       	smpsAlterNote       $07
00095304 A702 8001                  	dc.b	nD3, $02, nRst, $01
00095308 E106                       	smpsAlterNote       $06
0009530A A503                       	dc.b	nC3, $03
0009530C E10C                       	smpsAlterNote       $0C
0009530E A303 8001                  	dc.b	nBb2, $03, nRst, $01
00095314 E107                       	smpsAlterNote       $07
00095316 B20D                       	dc.b	nCs4, $0D
00095318 E104                       	smpsAlterNote       $04
0009531A E701                       	dc.b	smpsNoAttack, $01
0009531C E100                       	smpsAlterNote       $00
0009531E E701                       	dc.b	smpsNoAttack, $01
00095320 E104                       	smpsAlterNote       $04
00095322 E701                       	dc.b	smpsNoAttack, $01
00095324 E10A                       	smpsAlterNote       $0A
00095326 E701                       	dc.b	smpsNoAttack, $01
00095328 E10B                       	smpsAlterNote       $0B
0009532A E701                       	dc.b	smpsNoAttack, $01
0009532C E107                       	smpsAlterNote       $07
0009532E E701                       	dc.b	smpsNoAttack, $01
00095330 E101                       	smpsAlterNote       $01
00095332 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095336 E104                       	smpsAlterNote       $04
00095338 E701                       	dc.b	smpsNoAttack, $01
0009533A E10A                       	smpsAlterNote       $0A
0009533C E701                       	dc.b	smpsNoAttack, $01
0009533E E10B                       	smpsAlterNote       $0B
00095340 8001                       	dc.b	nRst, $01
00095342 E107                       	smpsAlterNote       $07
00095344 B30D                       	dc.b	nD4, $0D
00095346 E104                       	smpsAlterNote       $04
00095348 E701                       	dc.b	smpsNoAttack, $01
0009534A E100                       	smpsAlterNote       $00
0009534C E701                       	dc.b	smpsNoAttack, $01
0009534E E104                       	smpsAlterNote       $04
00095350 E701                       	dc.b	smpsNoAttack, $01
00095352 E10A                       	smpsAlterNote       $0A
00095354 E701                       	dc.b	smpsNoAttack, $01
00095356 E10B                       	smpsAlterNote       $0B
00095358 E701                       	dc.b	smpsNoAttack, $01
0009535A E107                       	smpsAlterNote       $07
0009535C E701                       	dc.b	smpsNoAttack, $01
0009535E E101                       	smpsAlterNote       $01
00095360 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095364 E104                       	smpsAlterNote       $04
00095366 E701                       	dc.b	smpsNoAttack, $01
00095368 E10A                       	smpsAlterNote       $0A
0009536A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009536E E104                       	smpsAlterNote       $04
00095370 E701                       	dc.b	smpsNoAttack, $01
00095372 E101                       	smpsAlterNote       $01
00095374 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095378 E107                       	smpsAlterNote       $07
0009537A E701                       	dc.b	smpsNoAttack, $01
0009537C E10B                       	smpsAlterNote       $0B
0009537E E701                       	dc.b	smpsNoAttack, $01
00095380 E10A                       	smpsAlterNote       $0A
00095382 E701                       	dc.b	smpsNoAttack, $01
00095384 E107                       	smpsAlterNote       $07
00095386 8001                       	dc.b	nRst, $01
00095388 E108                       	smpsAlterNote       $08
0009538A B50D                       	dc.b	nE4, $0D
0009538C E102                       	smpsAlterNote       $02
0009538E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095392 E105                       	smpsAlterNote       $05
00095394 E701                       	dc.b	smpsNoAttack, $01
00095396 E10B                       	smpsAlterNote       $0B
00095398 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009539C E105                       	smpsAlterNote       $05
0009539E E701                       	dc.b	smpsNoAttack, $01
000953A0 E102                       	smpsAlterNote       $02
000953A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953A6 E108                       	smpsAlterNote       $08
000953A8 E701                       	dc.b	smpsNoAttack, $01
000953AA E10C                       	smpsAlterNote       $0C
000953AC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000953B0 E107                       	smpsAlterNote       $07
000953B2 B30D                       	dc.b	nD4, $0D
000953B4 E101                       	smpsAlterNote       $01
000953B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953BA E104                       	smpsAlterNote       $04
000953BC E701                       	dc.b	smpsNoAttack, $01
000953BE E10A                       	smpsAlterNote       $0A
000953C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953C4 E104                       	smpsAlterNote       $04
000953C6 E701                       	dc.b	smpsNoAttack, $01
000953C8 E101                       	smpsAlterNote       $01
000953CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953CE E107                       	smpsAlterNote       $07
000953D0 E701                       	dc.b	smpsNoAttack, $01
000953D2 E10B                       	smpsAlterNote       $0B
000953D4 E701                       	dc.b	smpsNoAttack, $01
000953D6 E10A                       	smpsAlterNote       $0A
000953D8 E701                       	dc.b	smpsNoAttack, $01
000953DA E104                       	smpsAlterNote       $04
000953DC E701                       	dc.b	smpsNoAttack, $01
000953DE E100                       	smpsAlterNote       $00
000953E0 E701                       	dc.b	smpsNoAttack, $01
000953E2 E104                       	smpsAlterNote       $04
000953E4 E701                       	dc.b	smpsNoAttack, $01
000953E6 E107                       	smpsAlterNote       $07
000953E8 E701                       	dc.b	smpsNoAttack, $01
000953EA E10B                       	smpsAlterNote       $0B
000953EC E701                       	dc.b	smpsNoAttack, $01
000953EE E107                       	smpsAlterNote       $07
000953F0 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
000953F4 E101                       	smpsAlterNote       $01
000953F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953FA E107                       	smpsAlterNote       $07
000953FC E701                       	dc.b	smpsNoAttack, $01
000953FE E10A                       	smpsAlterNote       $0A
00095400 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095404 E104                       	smpsAlterNote       $04
00095406 E701                       	dc.b	smpsNoAttack, $01
00095408 E100                       	smpsAlterNote       $00
0009540A E701                       	dc.b	smpsNoAttack, $01
0009540C E101                       	smpsAlterNote       $01
0009540E E701                       	dc.b	smpsNoAttack, $01
00095410 E107                       	smpsAlterNote       $07
00095412 E701                       	dc.b	smpsNoAttack, $01
00095414 E10B                       	smpsAlterNote       $0B
00095416 E701                       	dc.b	smpsNoAttack, $01
00095418 E107                       	smpsAlterNote       $07
0009541A B30E                       	dc.b	nD4, $0E
0009541C E101                       	smpsAlterNote       $01
0009541E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095422 E107                       	smpsAlterNote       $07
00095424 E701                       	dc.b	smpsNoAttack, $01
00095426 E10A                       	smpsAlterNote       $0A
00095428 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009542C E104                       	smpsAlterNote       $04
0009542E E701                       	dc.b	smpsNoAttack, $01
00095430 E100                       	smpsAlterNote       $00
00095432 E701                       	dc.b	smpsNoAttack, $01
00095434 E101                       	smpsAlterNote       $01
00095436 E701                       	dc.b	smpsNoAttack, $01
00095438 E107                       	smpsAlterNote       $07
0009543A E701                       	dc.b	smpsNoAttack, $01
0009543C E10B                       	smpsAlterNote       $0B
0009543E E701                       	dc.b	smpsNoAttack, $01
00095440 E107                       	smpsAlterNote       $07
00095442 E701                       	dc.b	smpsNoAttack, $01
00095444 E104                       	smpsAlterNote       $04
00095446 E701                       	dc.b	smpsNoAttack, $01
00095448 E100                       	smpsAlterNote       $00
0009544A E701                       	dc.b	smpsNoAttack, $01
0009544C E104                       	smpsAlterNote       $04
0009544E E701                       	dc.b	smpsNoAttack, $01
00095450 E10A                       	smpsAlterNote       $0A
00095452 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095456 E107                       	smpsAlterNote       $07
00095458 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0009545C E104                       	smpsAlterNote       $04
0009545E E701                       	dc.b	smpsNoAttack, $01
00095460 E100                       	smpsAlterNote       $00
00095462 E701                       	dc.b	smpsNoAttack, $01
00095464 E101                       	smpsAlterNote       $01
00095466 E701                       	dc.b	smpsNoAttack, $01
00095468 E107                       	smpsAlterNote       $07
0009546A E701                       	dc.b	smpsNoAttack, $01
0009546C E10B                       	smpsAlterNote       $0B
0009546E E701                       	dc.b	smpsNoAttack, $01
00095470 E107                       	smpsAlterNote       $07
00095472 E701                       	dc.b	smpsNoAttack, $01
00095474 E104                       	smpsAlterNote       $04
00095476 E701                       	dc.b	smpsNoAttack, $01
00095478 E100                       	smpsAlterNote       $00
0009547A E701                       	dc.b	smpsNoAttack, $01
0009547C E104                       	smpsAlterNote       $04
0009547E E701                       	dc.b	smpsNoAttack, $01
00095480 E10A                       	smpsAlterNote       $0A
00095482 E701                       	dc.b	smpsNoAttack, $01
00095484 E10B                       	smpsAlterNote       $0B
00095486 E701                       	dc.b	smpsNoAttack, $01
0009548A E6FF                       	smpsAlterVol        $FF
0009548C A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
00095498 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
000954A0 E109                       	smpsAlterNote       $09
000954A2 E601                       	smpsAlterVol        $01
000954A4 B60D                       	dc.b	nF4, $0D
000954A6 E106                       	smpsAlterNote       $06
000954A8 E701                       	dc.b	smpsNoAttack, $01
000954AA E102                       	smpsAlterNote       $02
000954AC E701                       	dc.b	smpsNoAttack, $01
000954AE E106                       	smpsAlterNote       $06
000954B0 E701                       	dc.b	smpsNoAttack, $01
000954B2 E109                       	smpsAlterNote       $09
000954B4 E701                       	dc.b	smpsNoAttack, $01
000954B6 E10D                       	smpsAlterNote       $0D
000954B8 E701                       	dc.b	smpsNoAttack, $01
000954BA E109                       	smpsAlterNote       $09
000954BC E701                       	dc.b	smpsNoAttack, $01
000954BE E103                       	smpsAlterNote       $03
000954C0 E701                       	dc.b	smpsNoAttack, $01
000954C2 E102                       	smpsAlterNote       $02
000954C4 E701                       	dc.b	smpsNoAttack, $01
000954C6 E106                       	smpsAlterNote       $06
000954C8 E701                       	dc.b	smpsNoAttack, $01
000954CA E10C                       	smpsAlterNote       $0C
000954CC E701                       	dc.b	smpsNoAttack, $01
000954CE E10D                       	smpsAlterNote       $0D
000954D0 8001                       	dc.b	nRst, $01
000954D2 E109                       	smpsAlterNote       $09
000954D4 B80D                       	dc.b	nG4, $0D
000954D6 E106                       	smpsAlterNote       $06
000954D8 E701                       	dc.b	smpsNoAttack, $01
000954DA E102                       	smpsAlterNote       $02
000954DC E701                       	dc.b	smpsNoAttack, $01
000954DE E106                       	smpsAlterNote       $06
000954E0 E701                       	dc.b	smpsNoAttack, $01
000954E2 E109                       	smpsAlterNote       $09
000954E4 E701                       	dc.b	smpsNoAttack, $01
000954E6 E10D                       	smpsAlterNote       $0D
000954E8 E701                       	dc.b	smpsNoAttack, $01
000954EA E109                       	smpsAlterNote       $09
000954EC E701                       	dc.b	smpsNoAttack, $01
000954EE E103                       	smpsAlterNote       $03
000954F0 E701                       	dc.b	smpsNoAttack, $01
000954F2 E102                       	smpsAlterNote       $02
000954F4 E701                       	dc.b	smpsNoAttack, $01
000954F6 E106                       	smpsAlterNote       $06
000954F8 E701                       	dc.b	smpsNoAttack, $01
000954FA E10C                       	smpsAlterNote       $0C
000954FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095500 E106                       	smpsAlterNote       $06
00095502 E701                       	dc.b	smpsNoAttack, $01
00095504 E103                       	smpsAlterNote       $03
00095506 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009550A E109                       	smpsAlterNote       $09
0009550C E701                       	dc.b	smpsNoAttack, $01
0009550E E10D                       	smpsAlterNote       $0D
00095510 E701                       	dc.b	smpsNoAttack, $01
00095512 E10C                       	smpsAlterNote       $0C
00095514 E701                       	dc.b	smpsNoAttack, $01
00095516 E109                       	smpsAlterNote       $09
00095518 8001                       	dc.b	nRst, $01
0009551A E10B                       	smpsAlterNote       $0B
0009551C BA0D                       	dc.b	nA4, $0D
0009551E E105                       	smpsAlterNote       $05
00095520 E701                       	dc.b	smpsNoAttack, $01
00095522 E104                       	smpsAlterNote       $04
00095524 E701                       	dc.b	smpsNoAttack, $01
00095526 E108                       	smpsAlterNote       $08
00095528 E701                       	dc.b	smpsNoAttack, $01
0009552A E10E                       	smpsAlterNote       $0E
0009552C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095530 E10B                       	smpsAlterNote       $0B
00095532 E701                       	dc.b	smpsNoAttack, $01
00095534 E105                       	smpsAlterNote       $05
00095536 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009553A E10B                       	smpsAlterNote       $0B
0009553C E701                       	dc.b	smpsNoAttack, $01
0009553E E10E                       	smpsAlterNote       $0E
00095540 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095544 E108                       	smpsAlterNote       $08
00095546 E701                       	dc.b	smpsNoAttack, $01
00095548 E104                       	smpsAlterNote       $04
0009554A E701                       	dc.b	smpsNoAttack, $01
0009554C E105                       	smpsAlterNote       $05
0009554E E701                       	dc.b	smpsNoAttack, $01
00095550 E10B                       	smpsAlterNote       $0B
00095552 E701                       	dc.b	smpsNoAttack, $01
00095554 E10F                       	smpsAlterNote       $0F
00095556 E701                       	dc.b	smpsNoAttack, $01
00095558 E10B                       	smpsAlterNote       $0B
0009555A E701                       	dc.b	smpsNoAttack, $01
0009555C E108                       	smpsAlterNote       $08
0009555E E701                       	dc.b	smpsNoAttack, $01
00095560 E104                       	smpsAlterNote       $04
00095562 E701                       	dc.b	smpsNoAttack, $01
00095564 E108                       	smpsAlterNote       $08
00095566 E701                       	dc.b	smpsNoAttack, $01
00095568 E10E                       	smpsAlterNote       $0E
0009556A E701                       	dc.b	smpsNoAttack, $01
0009556C E10F                       	smpsAlterNote       $0F
0009556E E701                       	dc.b	smpsNoAttack, $01
00095570 E10B                       	smpsAlterNote       $0B
00095572 E701                       	dc.b	smpsNoAttack, $01
00095574 E105                       	smpsAlterNote       $05
00095576 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009557A E108                       	smpsAlterNote       $08
0009557C E701                       	dc.b	smpsNoAttack, $01
0009557E E10E                       	smpsAlterNote       $0E
00095580 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095584 E108                       	smpsAlterNote       $08
00095586 E701                       	dc.b	smpsNoAttack, $01
00095588 E105                       	smpsAlterNote       $05
0009558A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009558E E108                       	smpsAlterNote       $08
00095590 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00095594 E109                       	smpsAlterNote       $09
00095596 B60D                       	dc.b	nF4, $0D
00095598 E103                       	smpsAlterNote       $03
0009559A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009559E E106                       	smpsAlterNote       $06
000955A0 E701                       	dc.b	smpsNoAttack, $01
000955A2 E10C                       	smpsAlterNote       $0C
000955A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955A8 E106                       	smpsAlterNote       $06
000955AA E701                       	dc.b	smpsNoAttack, $01
000955AC E103                       	smpsAlterNote       $03
000955AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955B2 E109                       	smpsAlterNote       $09
000955B4 E701                       	dc.b	smpsNoAttack, $01
000955B6 E10D                       	smpsAlterNote       $0D
000955B8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000955BC E109                       	smpsAlterNote       $09
000955BE B80D                       	dc.b	nG4, $0D
000955C0 E103                       	smpsAlterNote       $03
000955C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955C6 E109                       	smpsAlterNote       $09
000955C8 E701                       	dc.b	smpsNoAttack, $01
000955CA E10C                       	smpsAlterNote       $0C
000955CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955D0 E106                       	smpsAlterNote       $06
000955D2 E701                       	dc.b	smpsNoAttack, $01
000955D4 E102                       	smpsAlterNote       $02
000955D6 E701                       	dc.b	smpsNoAttack, $01
000955D8 E103                       	smpsAlterNote       $03
000955DA E701                       	dc.b	smpsNoAttack, $01
000955DC E109                       	smpsAlterNote       $09
000955DE E701                       	dc.b	smpsNoAttack, $01
000955E0 E10D                       	smpsAlterNote       $0D
000955E2 E701                       	dc.b	smpsNoAttack, $01
000955E4 E109                       	smpsAlterNote       $09
000955E6 E701                       	dc.b	smpsNoAttack, $01
000955E8 E106                       	smpsAlterNote       $06
000955EA E701                       	dc.b	smpsNoAttack, $01
000955EC E102                       	smpsAlterNote       $02
000955EE E701                       	dc.b	smpsNoAttack, $01
000955F0 E106                       	smpsAlterNote       $06
000955F2 E701                       	dc.b	smpsNoAttack, $01
000955F4 E10C                       	smpsAlterNote       $0C
000955F6 E701                       	dc.b	smpsNoAttack, $01
000955F8 E10D                       	smpsAlterNote       $0D
000955FA E701                       	dc.b	smpsNoAttack, $01
000955FC E109                       	smpsAlterNote       $09
000955FE E701                       	dc.b	smpsNoAttack, $01
00095600 E10B                       	smpsAlterNote       $0B
00095602 BA0D                       	dc.b	nA4, $0D
00095604 E108                       	smpsAlterNote       $08
00095606 E701                       	dc.b	smpsNoAttack, $01
00095608 E105                       	smpsAlterNote       $05
0009560A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009560E E10B                       	smpsAlterNote       $0B
00095610 E701                       	dc.b	smpsNoAttack, $01
00095612 E10F                       	smpsAlterNote       $0F
00095614 E701                       	dc.b	smpsNoAttack, $01
00095616 E10E                       	smpsAlterNote       $0E
00095618 E701                       	dc.b	smpsNoAttack, $01
0009561A E108                       	smpsAlterNote       $08
0009561C E701                       	dc.b	smpsNoAttack, $01
0009561E E104                       	smpsAlterNote       $04
00095620 E701                       	dc.b	smpsNoAttack, $01
00095622 E108                       	smpsAlterNote       $08
00095624 E701                       	dc.b	smpsNoAttack, $01
00095626 E10B                       	smpsAlterNote       $0B
00095628 E701                       	dc.b	smpsNoAttack, $01
0009562A E10F                       	smpsAlterNote       $0F
0009562C E701                       	dc.b	smpsNoAttack, $01
0009562E E10B                       	smpsAlterNote       $0B
00095630 E701                       	dc.b	smpsNoAttack, $01
00095632 E105                       	smpsAlterNote       $05
00095634 E701                       	dc.b	smpsNoAttack, $01
00095636 E104                       	smpsAlterNote       $04
00095638 E701                       	dc.b	smpsNoAttack, $01
0009563A E108                       	smpsAlterNote       $08
0009563C E701                       	dc.b	smpsNoAttack, $01
0009563E E10E                       	smpsAlterNote       $0E
00095640 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095644 E10B                       	smpsAlterNote       $0B
00095646 E701                       	dc.b	smpsNoAttack, $01
00095648 E105                       	smpsAlterNote       $05
0009564A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009564E E10B                       	smpsAlterNote       $0B
00095650 E701                       	dc.b	smpsNoAttack, $01
00095652 E10E                       	smpsAlterNote       $0E
00095654 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095658 E108                       	smpsAlterNote       $08
0009565A E701                       	dc.b	smpsNoAttack, $01
0009565C E105                       	smpsAlterNote       $05
0009565E 8001                       	dc.b	nRst, $01
00095660 E109                       	smpsAlterNote       $09
00095662 B60A                       	dc.b	nF4, $0A
00095664 E108                       	smpsAlterNote       $08
00095666 B507                       	dc.b	nE4, $07
00095668 E107                       	smpsAlterNote       $07
0009566A B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0009566E E108                       	smpsAlterNote       $08
00095670 B503                       	dc.b	nE4, $03
00095672 E109                       	smpsAlterNote       $09
00095674 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0009567C E10B                       	smpsAlterNote       $0B
0009567E BA0D                       	dc.b	nA4, $0D
00095680 E108                       	smpsAlterNote       $08
00095682 E701                       	dc.b	smpsNoAttack, $01
00095684 E104                       	smpsAlterNote       $04
00095686 E701                       	dc.b	smpsNoAttack, $01
00095688 E108                       	smpsAlterNote       $08
0009568A E701                       	dc.b	smpsNoAttack, $01
0009568C E10B                       	smpsAlterNote       $0B
0009568E E701                       	dc.b	smpsNoAttack, $01
00095690 E10F                       	smpsAlterNote       $0F
00095692 E701                       	dc.b	smpsNoAttack, $01
00095694 E10B                       	smpsAlterNote       $0B
00095696 E701                       	dc.b	smpsNoAttack, $01
00095698 E105                       	smpsAlterNote       $05
0009569A E701                       	dc.b	smpsNoAttack, $01
0009569C E104                       	smpsAlterNote       $04
0009569E E701                       	dc.b	smpsNoAttack, $01
000956A0 E108                       	smpsAlterNote       $08
000956A2 E701                       	dc.b	smpsNoAttack, $01
000956A4 E10E                       	smpsAlterNote       $0E
000956A6 E701                       	dc.b	smpsNoAttack, $01
000956A8 E10F                       	smpsAlterNote       $0F
000956AA 8001                       	dc.b	nRst, $01
000956AC E109                       	smpsAlterNote       $09
000956AE C20D                       	dc.b	nF5, $0D
000956B0 E106                       	smpsAlterNote       $06
000956B2 E701                       	dc.b	smpsNoAttack, $01
000956B4 E102                       	smpsAlterNote       $02
000956B6 E701                       	dc.b	smpsNoAttack, $01
000956B8 E106                       	smpsAlterNote       $06
000956BA E701                       	dc.b	smpsNoAttack, $01
000956BC E109                       	smpsAlterNote       $09
000956BE E701                       	dc.b	smpsNoAttack, $01
000956C0 E10D                       	smpsAlterNote       $0D
000956C2 E701                       	dc.b	smpsNoAttack, $01
000956C4 E109                       	smpsAlterNote       $09
000956C6 E701                       	dc.b	smpsNoAttack, $01
000956C8 E103                       	smpsAlterNote       $03
000956CA E701                       	dc.b	smpsNoAttack, $01
000956CC E102                       	smpsAlterNote       $02
000956CE E701                       	dc.b	smpsNoAttack, $01
000956D0 E106                       	smpsAlterNote       $06
000956D2 E701                       	dc.b	smpsNoAttack, $01
000956D4 E10C                       	smpsAlterNote       $0C
000956D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956DA E109                       	smpsAlterNote       $09
000956DC E701                       	dc.b	smpsNoAttack, $01
000956DE E103                       	smpsAlterNote       $03
000956E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956E4 E109                       	smpsAlterNote       $09
000956E6 E701                       	dc.b	smpsNoAttack, $01
000956E8 E10C                       	smpsAlterNote       $0C
000956EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956EE E106                       	smpsAlterNote       $06
000956F0 E701                       	dc.b	smpsNoAttack, $01
000956F2 E102                       	smpsAlterNote       $02
000956F4 E701                       	dc.b	smpsNoAttack, $01
000956F6 E103                       	smpsAlterNote       $03
000956F8 E701                       	dc.b	smpsNoAttack, $01
000956FA E109                       	smpsAlterNote       $09
000956FC E701                       	dc.b	smpsNoAttack, $01
000956FE E10D                       	smpsAlterNote       $0D
00095700 E701                       	dc.b	smpsNoAttack, $01
00095702 E109                       	smpsAlterNote       $09
00095704 E701                       	dc.b	smpsNoAttack, $01
00095706 E106                       	smpsAlterNote       $06
00095708 E701                       	dc.b	smpsNoAttack, $01
0009570A E102                       	smpsAlterNote       $02
0009570C E701                       	dc.b	smpsNoAttack, $01
0009570E E106                       	smpsAlterNote       $06
00095710 E701                       	dc.b	smpsNoAttack, $01
00095712 E10C                       	smpsAlterNote       $0C
00095714 E701                       	dc.b	smpsNoAttack, $01
00095716 E10D                       	smpsAlterNote       $0D
00095718 E701                       	dc.b	smpsNoAttack, $01
0009571A E109                       	smpsAlterNote       $09
0009571C E701                       	dc.b	smpsNoAttack, $01
0009571E E103                       	smpsAlterNote       $03
00095720 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095724 E106                       	smpsAlterNote       $06
00095726 E701                       	dc.b	smpsNoAttack, $01
00095728 E10C                       	smpsAlterNote       $0C
0009572A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009572E E106                       	smpsAlterNote       $06
00095730 E701                       	dc.b	smpsNoAttack, $01
00095732 E103                       	smpsAlterNote       $03
00095734 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095738 E109                       	smpsAlterNote       $09
0009573A E701                       	dc.b	smpsNoAttack, $01
0009573C E10D                       	smpsAlterNote       $0D
0009573E E701                       	dc.b	smpsNoAttack, $01
00095740 E10C                       	smpsAlterNote       $0C
00095742 E701                       	dc.b	smpsNoAttack, $01
00095744 E106                       	smpsAlterNote       $06
00095746 E701                       	dc.b	smpsNoAttack, $01
00095748 E103                       	smpsAlterNote       $03
0009574A 8001                       	dc.b	nRst, $01
0009574C E109                       	smpsAlterNote       $09
0009574E C206 8001                  	dc.b	nF5, $06, nRst, $01
00095754 E10C                       	smpsAlterNote       $0C
00095756 E601                       	smpsAlterVol        $01
00095758 BB0D                       	dc.b	nBb4, $0D
0009575A E106                       	smpsAlterNote       $06
0009575C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095760 E109                       	smpsAlterNote       $09
00095762 E701                       	dc.b	smpsNoAttack, $01
00095764 E10F                       	smpsAlterNote       $0F
00095766 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009576A E109                       	smpsAlterNote       $09
0009576C E701                       	dc.b	smpsNoAttack, $01
0009576E E106                       	smpsAlterNote       $06
00095770 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095774 E10C                       	smpsAlterNote       $0C
00095776 E701                       	dc.b	smpsNoAttack, $01
00095778 E110                       	smpsAlterNote       $10
0009577A E701                       	dc.b	smpsNoAttack, $01
0009577C E10F                       	smpsAlterNote       $0F
0009577E E701                       	dc.b	smpsNoAttack, $01
00095780 E109                       	smpsAlterNote       $09
00095782 E701                       	dc.b	smpsNoAttack, $01
00095784 E105                       	smpsAlterNote       $05
00095786 E701                       	dc.b	smpsNoAttack, $01
00095788 E106                       	smpsAlterNote       $06
0009578A 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0009578E E103                       	smpsAlterNote       $03
00095790 E701                       	dc.b	smpsNoAttack, $01
00095792 E1FF                       	smpsAlterNote       $FF
00095794 E701                       	dc.b	smpsNoAttack, $01
00095796 E103                       	smpsAlterNote       $03
00095798 E701                       	dc.b	smpsNoAttack, $01
0009579A E106                       	smpsAlterNote       $06
0009579C E701                       	dc.b	smpsNoAttack, $01
0009579E E10A                       	smpsAlterNote       $0A
000957A0 E701                       	dc.b	smpsNoAttack, $01
000957A2 E106                       	smpsAlterNote       $06
000957A4 E701                       	dc.b	smpsNoAttack, $01
000957A6 E100                       	smpsAlterNote       $00
000957A8 E701                       	dc.b	smpsNoAttack, $01
000957AA E1FF                       	smpsAlterNote       $FF
000957AC E701                       	dc.b	smpsNoAttack, $01
000957AE E103                       	smpsAlterNote       $03
000957B0 E701                       	dc.b	smpsNoAttack, $01
000957B2 E109                       	smpsAlterNote       $09
000957B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957B8 E106                       	smpsAlterNote       $06
000957BA E701                       	dc.b	smpsNoAttack, $01
000957BC E100                       	smpsAlterNote       $00
000957BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957C2 E107                       	smpsAlterNote       $07
000957C4 BF0E                       	dc.b	nD5, $0E
000957C6 E101                       	smpsAlterNote       $01
000957C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957CC E107                       	smpsAlterNote       $07
000957CE E701                       	dc.b	smpsNoAttack, $01
000957D0 E10A                       	smpsAlterNote       $0A
000957D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957D6 E104                       	smpsAlterNote       $04
000957D8 E701                       	dc.b	smpsNoAttack, $01
000957DA E100                       	smpsAlterNote       $00
000957DC E701                       	dc.b	smpsNoAttack, $01
000957DE E101                       	smpsAlterNote       $01
000957E0 E701                       	dc.b	smpsNoAttack, $01
000957E2 E107                       	smpsAlterNote       $07
000957E4 E701                       	dc.b	smpsNoAttack, $01
000957E6 E10B                       	smpsAlterNote       $0B
000957E8 E701                       	dc.b	smpsNoAttack, $01
000957EA E107                       	smpsAlterNote       $07
000957EC E701                       	dc.b	smpsNoAttack, $01
000957EE E104                       	smpsAlterNote       $04
000957F0 E701                       	dc.b	smpsNoAttack, $01
000957F2 E100                       	smpsAlterNote       $00
000957F4 E701                       	dc.b	smpsNoAttack, $01
000957F6 E101                       	smpsAlterNote       $01
000957F8 8001                       	dc.b	nRst, $01
000957FA E108                       	smpsAlterNote       $08
000957FC C10C                       	dc.b	nE5, $0C
000957FE E109                       	smpsAlterNote       $09
00095800 C201 8001                  	dc.b	nF5, $01, nRst, $01
00095804 E10A                       	smpsAlterNote       $0A
00095806 8001                       	dc.b	nRst, $01
00095808 E109                       	smpsAlterNote       $09
0009580A C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0009580E E106                       	smpsAlterNote       $06
00095810 E701                       	dc.b	smpsNoAttack, $01
00095812 E102                       	smpsAlterNote       $02
00095814 E701                       	dc.b	smpsNoAttack, $01
00095816 E103                       	smpsAlterNote       $03
00095818 E701                       	dc.b	smpsNoAttack, $01
0009581A E109                       	smpsAlterNote       $09
0009581C E701                       	dc.b	smpsNoAttack, $01
0009581E E10D                       	smpsAlterNote       $0D
00095820 E701                       	dc.b	smpsNoAttack, $01
00095822 E109                       	smpsAlterNote       $09
00095824 E701                       	dc.b	smpsNoAttack, $01
00095826 E106                       	smpsAlterNote       $06
00095828 E701                       	dc.b	smpsNoAttack, $01
0009582A E102                       	smpsAlterNote       $02
0009582C E701                       	dc.b	smpsNoAttack, $01
0009582E E106                       	smpsAlterNote       $06
00095830 E701                       	dc.b	smpsNoAttack, $01
00095832 E10C                       	smpsAlterNote       $0C
00095834 E701                       	dc.b	smpsNoAttack, $01
00095836 E10D                       	smpsAlterNote       $0D
00095838 E701                       	dc.b	smpsNoAttack, $01
0009583A E109                       	smpsAlterNote       $09
0009583C C40D                       	dc.b	nG5, $0D
0009583E E106                       	smpsAlterNote       $06
00095840 E701                       	dc.b	smpsNoAttack, $01
00095842 E102                       	smpsAlterNote       $02
00095844 E701                       	dc.b	smpsNoAttack, $01
00095846 E103                       	smpsAlterNote       $03
00095848 E701                       	dc.b	smpsNoAttack, $01
0009584A E109                       	smpsAlterNote       $09
0009584C E701                       	dc.b	smpsNoAttack, $01
0009584E E108                       	smpsAlterNote       $08
00095850 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0009585C E109                       	smpsAlterNote       $09
0009585E C20D                       	dc.b	nF5, $0D
00095860 E106                       	smpsAlterNote       $06
00095862 E701                       	dc.b	smpsNoAttack, $01
00095864 E102                       	smpsAlterNote       $02
00095866 E701                       	dc.b	smpsNoAttack, $01
00095868 E106                       	smpsAlterNote       $06
0009586A E701                       	dc.b	smpsNoAttack, $01
0009586C E109                       	smpsAlterNote       $09
0009586E E701                       	dc.b	smpsNoAttack, $01
00095870 E10D                       	smpsAlterNote       $0D
00095872 E701                       	dc.b	smpsNoAttack, $01
00095874 E109                       	smpsAlterNote       $09
00095876 E701                       	dc.b	smpsNoAttack, $01
00095878 E103                       	smpsAlterNote       $03
0009587A E701                       	dc.b	smpsNoAttack, $01
0009587C E102                       	smpsAlterNote       $02
0009587E E701                       	dc.b	smpsNoAttack, $01
00095880 E106                       	smpsAlterNote       $06
00095882 E701                       	dc.b	smpsNoAttack, $01
00095884 E10C                       	smpsAlterNote       $0C
00095886 E701                       	dc.b	smpsNoAttack, $01
00095888 E10D                       	smpsAlterNote       $0D
0009588A 8001                       	dc.b	nRst, $01
0009588C E112                       	smpsAlterNote       $12
0009588E C401                       	dc.b	nG5, $01
00095890 E1EB                       	smpsAlterNote       $EB
00095892 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00095895 E1FD                       	smpsAlterNote       $FD
00095897 E701                       	dc.b	smpsNoAttack, $01
00095899 E10F                       	smpsAlterNote       $0F
0009589B E701                       	dc.b	smpsNoAttack, $01
0009589D E118                       	smpsAlterNote       $18
0009589F E701                       	dc.b	smpsNoAttack, $01
000958A1 E1ED                       	smpsAlterNote       $ED
000958A3 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000958A6 E1FF                       	smpsAlterNote       $FF
000958A8 E701                       	dc.b	smpsNoAttack, $01
000958AA E10B                       	smpsAlterNote       $0B
000958AC E703                       	dc.b	smpsNoAttack, $03
000958AE E109                       	smpsAlterNote       $09
000958B0 C407                       	dc.b	nG5, $07
000958B2 E108                       	smpsAlterNote       $08
000958B4 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
000958C0 E109                       	smpsAlterNote       $09
000958C2 C20D                       	dc.b	nF5, $0D
000958C4 E103                       	smpsAlterNote       $03
000958C6 E701                       	dc.b	smpsNoAttack, $01
000958C8 E102                       	smpsAlterNote       $02
000958CA E701                       	dc.b	smpsNoAttack, $01
000958CC E106                       	smpsAlterNote       $06
000958CE E701                       	dc.b	smpsNoAttack, $01
000958D0 E10C                       	smpsAlterNote       $0C
000958D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958D6 E109                       	smpsAlterNote       $09
000958D8 E701                       	dc.b	smpsNoAttack, $01
000958DA E103                       	smpsAlterNote       $03
000958DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958E0 E109                       	smpsAlterNote       $09
000958E2 E701                       	dc.b	smpsNoAttack, $01
000958E4 E10C                       	smpsAlterNote       $0C
000958E6 E701                       	dc.b	smpsNoAttack, $01
000958E8 E10D                       	smpsAlterNote       $0D
000958EA 8001                       	dc.b	nRst, $01
000958EC E10B                       	smpsAlterNote       $0B
000958EE C609 8001                  	dc.b	nA5, $09, nRst, $01
000958F2 E109                       	smpsAlterNote       $09
000958F4 B806 8001                  	dc.b	nG4, $06, nRst, $01
000958F8 E108                       	smpsAlterNote       $08
000958FA C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00095906 8001                       	dc.b	nRst, $01
00095908 E109                       	smpsAlterNote       $09
0009590A C20D                       	dc.b	nF5, $0D
0009590C E103                       	smpsAlterNote       $03
0009590E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095912 E106                       	smpsAlterNote       $06
00095914 E701                       	dc.b	smpsNoAttack, $01
00095916 E10C                       	smpsAlterNote       $0C
00095918 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009591C E106                       	smpsAlterNote       $06
0009591E E701                       	dc.b	smpsNoAttack, $01
00095920 E103                       	smpsAlterNote       $03
00095922 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095926 E109                       	smpsAlterNote       $09
00095928 E701                       	dc.b	smpsNoAttack, $01
0009592A E10D                       	smpsAlterNote       $0D
0009592C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095932 E108                       	smpsAlterNote       $08
00095934 E6FF                       	smpsAlterVol        $FF
00095936 A806                       	dc.b	nEb3, $06
00095938 E10C                       	smpsAlterNote       $0C
0009593A A303 8001                  	dc.b	nBb2, $03, nRst, $01
0009593E E108                       	smpsAlterNote       $08
00095940 A803                       	dc.b	nEb3, $03
00095942 E109                       	smpsAlterNote       $09
00095944 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00095948 E10C                       	smpsAlterNote       $0C
0009594A AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00095954 E109                       	smpsAlterNote       $09
00095956 E602                       	smpsAlterVol        $02
00095958 B604                       	dc.b	nF4, $04
0009595A E602                       	smpsAlterVol        $02
0009595C F6F1 AA                    	smpsJump            music84_Jump02
0009595F                            
0009595F                            ; FM4 Data
0009595F                            music84_FM4:
00095961 E040                       	smpsPan             panRight, $00
00095963 8003                       	dc.b	nRst, $03
00095965 E10F                       	smpsAlterNote       $0F
00095967 C603 8008                  	dc.b	nA5, $03, nRst, $08
0009596B E10D                       	smpsAlterNote       $0D
0009596D C403 800A                  	dc.b	nG5, $03, nRst, $0A
00095971 E10C                       	smpsAlterNote       $0C
00095973 C103 8004                  	dc.b	nE5, $03, nRst, $04
00095979 E6FE                       	smpsAlterVol        $FE
0009597B E110                       	smpsAlterNote       $10
0009597D C703 8001                  	dc.b	nBb5, $03, nRst, $01
00095981 E10F                       	smpsAlterNote       $0F
00095983 C602 8001                  	dc.b	nA5, $02, nRst, $01
00095987 E10D                       	smpsAlterNote       $0D
00095989 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00095992 E10C                       	smpsAlterNote       $0C
00095994 C103                       	dc.b	nE5, $03
00095996 E10A                       	smpsAlterNote       $0A
00095998 BD03 8001                  	dc.b	nC5, $03, nRst, $01
0009599E 03                         	dc.b	$03
0009599F                            
0009599F                            music84_Jump01:
0009599F E10B                       	smpsAlterNote       $0B
000959A1 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000959A5 E10C                       	smpsAlterNote       $0C
000959A7 C102 8001                  	dc.b	nE5, $02, nRst, $01
000959AB E10D                       	smpsAlterNote       $0D
000959AD C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000959B7 E10B                       	smpsAlterNote       $0B
000959B9 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
000959BD E107                       	smpsAlterNote       $07
000959BF E701                       	dc.b	smpsNoAttack, $01
000959C1 E103                       	smpsAlterNote       $03
000959C3 E701                       	dc.b	smpsNoAttack, $01
000959C5 E104                       	smpsAlterNote       $04
000959C7 E701                       	dc.b	smpsNoAttack, $01
000959C9 E10A                       	smpsAlterNote       $0A
000959CB E701                       	dc.b	smpsNoAttack, $01
000959CD E10E                       	smpsAlterNote       $0E
000959CF E701                       	dc.b	smpsNoAttack, $01
000959D1 E10A                       	smpsAlterNote       $0A
000959D3 E701                       	dc.b	smpsNoAttack, $01
000959D5 E107                       	smpsAlterNote       $07
000959D7 E701                       	dc.b	smpsNoAttack, $01
000959D9 E104                       	smpsAlterNote       $04
000959DB 8001                       	dc.b	nRst, $01
000959DD E110                       	smpsAlterNote       $10
000959DF C703                       	dc.b	nBb5, $03
000959E1 E10F                       	smpsAlterNote       $0F
000959E3 C603 8001                  	dc.b	nA5, $03, nRst, $01
000959E7 E10D                       	smpsAlterNote       $0D
000959E9 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
000959EF E10C                       	smpsAlterNote       $0C
000959F1 E701                       	dc.b	smpsNoAttack, $01
000959F3 E108                       	smpsAlterNote       $08
000959F5 E701                       	dc.b	smpsNoAttack, $01
000959F7 E10C                       	smpsAlterNote       $0C
000959F9 E701                       	dc.b	smpsNoAttack, $01
000959FB E10F                       	smpsAlterNote       $0F
000959FD E701                       	dc.b	smpsNoAttack, $01
000959FF E113                       	smpsAlterNote       $13
00095A01 E701                       	dc.b	smpsNoAttack, $01
00095A03 E10F                       	smpsAlterNote       $0F
00095A05 E701                       	dc.b	smpsNoAttack, $01
00095A07 E109                       	smpsAlterNote       $09
00095A09 E701                       	dc.b	smpsNoAttack, $01
00095A0B E108                       	smpsAlterNote       $08
00095A0D E701                       	dc.b	smpsNoAttack, $01
00095A0F E10C                       	smpsAlterNote       $0C
00095A11 E701                       	dc.b	smpsNoAttack, $01
00095A13 E112                       	smpsAlterNote       $12
00095A15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A19 E10C                       	smpsAlterNote       $0C
00095A1B E701                       	dc.b	smpsNoAttack, $01
00095A1D E109                       	smpsAlterNote       $09
00095A1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A23 E10F                       	smpsAlterNote       $0F
00095A25 E701                       	dc.b	smpsNoAttack, $01
00095A27 E113                       	smpsAlterNote       $13
00095A29 E701                       	dc.b	smpsNoAttack, $01
00095A2B E112                       	smpsAlterNote       $12
00095A2D E701                       	dc.b	smpsNoAttack, $01
00095A2F E10C                       	smpsAlterNote       $0C
00095A31 E701                       	dc.b	smpsNoAttack, $01
00095A33 E108                       	smpsAlterNote       $08
00095A35 E701                       	dc.b	smpsNoAttack, $01
00095A37 E10C                       	smpsAlterNote       $0C
00095A39 E701                       	dc.b	smpsNoAttack, $01
00095A3B E10F                       	smpsAlterNote       $0F
00095A3D E701                       	dc.b	smpsNoAttack, $01
00095A3F E113                       	smpsAlterNote       $13
00095A41 E701                       	dc.b	smpsNoAttack, $01
00095A43 E10F                       	smpsAlterNote       $0F
00095A45 E701                       	dc.b	smpsNoAttack, $01
00095A47 E109                       	smpsAlterNote       $09
00095A49 E701                       	dc.b	smpsNoAttack, $01
00095A4B E108                       	smpsAlterNote       $08
00095A4D E701                       	dc.b	smpsNoAttack, $01
00095A4F E10C                       	smpsAlterNote       $0C
00095A51 E701                       	dc.b	smpsNoAttack, $01
00095A53 E112                       	smpsAlterNote       $12
00095A55 E701                       	dc.b	smpsNoAttack, $01
00095A57 E113                       	smpsAlterNote       $13
00095A59 800F                       	dc.b	nRst, $0F
00095A5B E10B                       	smpsAlterNote       $0B
00095A5D BF03                       	dc.b	nD5, $03
00095A5F E10C                       	smpsAlterNote       $0C
00095A61 C103 8001                  	dc.b	nE5, $03, nRst, $01
00095A65 E10D                       	smpsAlterNote       $0D
00095A67 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00095A6F E10B                       	smpsAlterNote       $0B
00095A71 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00095A7B E110                       	smpsAlterNote       $10
00095A7D C704                       	dc.b	nBb5, $04
00095A7F E10F                       	smpsAlterNote       $0F
00095A81 C604 8001                  	dc.b	nA5, $04, nRst, $01
00095A85 E10D                       	smpsAlterNote       $0D
00095A87 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00095A8D E109                       	smpsAlterNote       $09
00095A8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A93 E10F                       	smpsAlterNote       $0F
00095A95 E701                       	dc.b	smpsNoAttack, $01
00095A97 E112                       	smpsAlterNote       $12
00095A99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A9D E10C                       	smpsAlterNote       $0C
00095A9F E701                       	dc.b	smpsNoAttack, $01
00095AA1 E108                       	smpsAlterNote       $08
00095AA3 E701                       	dc.b	smpsNoAttack, $01
00095AA5 E109                       	smpsAlterNote       $09
00095AA7 E701                       	dc.b	smpsNoAttack, $01
00095AA9 E10F                       	smpsAlterNote       $0F
00095AAB E701                       	dc.b	smpsNoAttack, $01
00095AAD E113                       	smpsAlterNote       $13
00095AAF E701                       	dc.b	smpsNoAttack, $01
00095AB1 E10F                       	smpsAlterNote       $0F
00095AB3 E701                       	dc.b	smpsNoAttack, $01
00095AB5 E10C                       	smpsAlterNote       $0C
00095AB7 E701                       	dc.b	smpsNoAttack, $01
00095AB9 E108                       	smpsAlterNote       $08
00095ABB E701                       	dc.b	smpsNoAttack, $01
00095ABD E10C                       	smpsAlterNote       $0C
00095ABF E701                       	dc.b	smpsNoAttack, $01
00095AC1 E112                       	smpsAlterNote       $12
00095AC3 E701                       	dc.b	smpsNoAttack, $01
00095AC5 E113                       	smpsAlterNote       $13
00095AC7 E701                       	dc.b	smpsNoAttack, $01
00095AC9 E10F                       	smpsAlterNote       $0F
00095ACB E701                       	dc.b	smpsNoAttack, $01
00095ACD E109                       	smpsAlterNote       $09
00095ACF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095AD3 E10C                       	smpsAlterNote       $0C
00095AD5 E701                       	dc.b	smpsNoAttack, $01
00095AD7 E112                       	smpsAlterNote       $12
00095AD9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095ADD E10C                       	smpsAlterNote       $0C
00095ADF E701                       	dc.b	smpsNoAttack, $01
00095AE1 E109                       	smpsAlterNote       $09
00095AE3 E701                       	dc.b	smpsNoAttack, $01
00095AE5 E10D                       	smpsAlterNote       $0D
00095AE7 C401 8001                  	dc.b	nG5, $01, nRst, $01
00095AEB E10F                       	smpsAlterNote       $0F
00095AED C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00095AF7 E10D                       	smpsAlterNote       $0D
00095AF9 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00095AFF E10B                       	smpsAlterNote       $0B
00095B01 BF0D                       	dc.b	nD5, $0D
00095B03 E108                       	smpsAlterNote       $08
00095B05 E701                       	dc.b	smpsNoAttack, $01
00095B07 E104                       	smpsAlterNote       $04
00095B09 E701                       	dc.b	smpsNoAttack, $01
00095B0B E108                       	smpsAlterNote       $08
00095B0D E701                       	dc.b	smpsNoAttack, $01
00095B0F E10B                       	smpsAlterNote       $0B
00095B11 E701                       	dc.b	smpsNoAttack, $01
00095B13 E10F                       	smpsAlterNote       $0F
00095B15 E701                       	dc.b	smpsNoAttack, $01
00095B17 E10B                       	smpsAlterNote       $0B
00095B19 E701                       	dc.b	smpsNoAttack, $01
00095B1B E105                       	smpsAlterNote       $05
00095B1D E701                       	dc.b	smpsNoAttack, $01
00095B1F E104                       	smpsAlterNote       $04
00095B21 E701                       	dc.b	smpsNoAttack, $01
00095B23 E108                       	smpsAlterNote       $08
00095B25 E701                       	dc.b	smpsNoAttack, $01
00095B27 E10E                       	smpsAlterNote       $0E
00095B29 E701                       	dc.b	smpsNoAttack, $01
00095B2B E10F                       	smpsAlterNote       $0F
00095B2D 8001                       	dc.b	nRst, $01
00095B2F E10C                       	smpsAlterNote       $0C
00095B31 C101                       	dc.b	nE5, $01
00095B33 E10D                       	smpsAlterNote       $0D
00095B35 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00095B3B E10F                       	smpsAlterNote       $0F
00095B3D C606 8001                  	dc.b	nA5, $06, nRst, $01
00095B41 E10C                       	smpsAlterNote       $0C
00095B43 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00095B47 E10D                       	smpsAlterNote       $0D
00095B49 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00095B4D E10C                       	smpsAlterNote       $0C
00095B4F CD03                       	dc.b	nE6, $03
00095B51 E10A                       	smpsAlterNote       $0A
00095B53 C903 8001                  	dc.b	nC6, $03, nRst, $01
00095B57 E10D                       	smpsAlterNote       $0D
00095B59 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00095B61 E109                       	smpsAlterNote       $09
00095B63 E701                       	dc.b	smpsNoAttack, $01
00095B65 E10D                       	smpsAlterNote       $0D
00095B67 E701                       	dc.b	smpsNoAttack, $01
00095B69 E110                       	smpsAlterNote       $10
00095B6B E701                       	dc.b	smpsNoAttack, $01
00095B6D E114                       	smpsAlterNote       $14
00095B6F E701                       	dc.b	smpsNoAttack, $01
00095B71 E110                       	smpsAlterNote       $10
00095B73 E701                       	dc.b	smpsNoAttack, $01
00095B75 E10A                       	smpsAlterNote       $0A
00095B77 E701                       	dc.b	smpsNoAttack, $01
00095B79 E109                       	smpsAlterNote       $09
00095B7B E701                       	dc.b	smpsNoAttack, $01
00095B7D E10D                       	smpsAlterNote       $0D
00095B7F E701                       	dc.b	smpsNoAttack, $01
00095B81 E113                       	smpsAlterNote       $13
00095B83 E701                       	dc.b	smpsNoAttack, $01
00095B85 E114                       	smpsAlterNote       $14
00095B87 8001                       	dc.b	nRst, $01
00095B89 E10F                       	smpsAlterNote       $0F
00095B8B C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00095B91 E10C                       	smpsAlterNote       $0C
00095B93 E701                       	dc.b	smpsNoAttack, $01
00095B95 E108                       	smpsAlterNote       $08
00095B97 E701                       	dc.b	smpsNoAttack, $01
00095B99 E10C                       	smpsAlterNote       $0C
00095B9B E701                       	dc.b	smpsNoAttack, $01
00095B9D E112                       	smpsAlterNote       $12
00095B9F E701                       	dc.b	smpsNoAttack, $01
00095BA1 E113                       	smpsAlterNote       $13
00095BA3 E701                       	dc.b	smpsNoAttack, $01
00095BA5 E10F                       	smpsAlterNote       $0F
00095BA7 E701                       	dc.b	smpsNoAttack, $01
00095BA9 E109                       	smpsAlterNote       $09
00095BAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BAF E10C                       	smpsAlterNote       $0C
00095BB1 E701                       	dc.b	smpsNoAttack, $01
00095BB3 E112                       	smpsAlterNote       $12
00095BB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BB9 E10C                       	smpsAlterNote       $0C
00095BBB E701                       	dc.b	smpsNoAttack, $01
00095BBD E109                       	smpsAlterNote       $09
00095BBF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BC3 E10F                       	smpsAlterNote       $0F
00095BC5 E701                       	dc.b	smpsNoAttack, $01
00095BC7 E113                       	smpsAlterNote       $13
00095BC9 E701                       	dc.b	smpsNoAttack, $01
00095BCB E112                       	smpsAlterNote       $12
00095BCD E701                       	dc.b	smpsNoAttack, $01
00095BCF E10C                       	smpsAlterNote       $0C
00095BD1 E701                       	dc.b	smpsNoAttack, $01
00095BD3 E108                       	smpsAlterNote       $08
00095BD5 E701                       	dc.b	smpsNoAttack, $01
00095BD7 E10C                       	smpsAlterNote       $0C
00095BD9 E701                       	dc.b	smpsNoAttack, $01
00095BDB E10F                       	smpsAlterNote       $0F
00095BDD E701                       	dc.b	smpsNoAttack, $01
00095BDF E113                       	smpsAlterNote       $13
00095BE1 E701                       	dc.b	smpsNoAttack, $01
00095BE3 E10F                       	smpsAlterNote       $0F
00095BE5 E701                       	dc.b	smpsNoAttack, $01
00095BE7 E109                       	smpsAlterNote       $09
00095BE9 E701                       	dc.b	smpsNoAttack, $01
00095BEB E108                       	smpsAlterNote       $08
00095BED E701                       	dc.b	smpsNoAttack, $01
00095BEF E10C                       	smpsAlterNote       $0C
00095BF1 E701                       	dc.b	smpsNoAttack, $01
00095BF3 E112                       	smpsAlterNote       $12
00095BF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BF9 E10F                       	smpsAlterNote       $0F
00095BFB E701                       	dc.b	smpsNoAttack, $01
00095BFD E109                       	smpsAlterNote       $09
00095BFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C03 E10F                       	smpsAlterNote       $0F
00095C05 E701                       	dc.b	smpsNoAttack, $01
00095C07 E113                       	smpsAlterNote       $13
00095C09 E701                       	dc.b	smpsNoAttack, $01
00095C0B E112                       	smpsAlterNote       $12
00095C0D E701                       	dc.b	smpsNoAttack, $01
00095C0F E10C                       	smpsAlterNote       $0C
00095C11 E701                       	dc.b	smpsNoAttack, $01
00095C13 E108                       	smpsAlterNote       $08
00095C15 E701                       	dc.b	smpsNoAttack, $01
00095C17 E10C                       	smpsAlterNote       $0C
00095C19 E701                       	dc.b	smpsNoAttack, $01
00095C1B E10F                       	smpsAlterNote       $0F
00095C1D E701                       	dc.b	smpsNoAttack, $01
00095C1F E113                       	smpsAlterNote       $13
00095C21 E701                       	dc.b	smpsNoAttack, $01
00095C23 E10F                       	smpsAlterNote       $0F
00095C25 E701                       	dc.b	smpsNoAttack, $01
00095C27 E109                       	smpsAlterNote       $09
00095C29 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095C2D E10F                       	smpsAlterNote       $0F
00095C2F C60D                       	dc.b	nA5, $0D
00095C31 E109                       	smpsAlterNote       $09
00095C33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C37 E10C                       	smpsAlterNote       $0C
00095C39 E701                       	dc.b	smpsNoAttack, $01
00095C3B E112                       	smpsAlterNote       $12
00095C3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C41 E10C                       	smpsAlterNote       $0C
00095C43 E701                       	dc.b	smpsNoAttack, $01
00095C45 E109                       	smpsAlterNote       $09
00095C47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C4B E10F                       	smpsAlterNote       $0F
00095C4D E701                       	dc.b	smpsNoAttack, $01
00095C4F E113                       	smpsAlterNote       $13
00095C51 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095C57 E10D                       	smpsAlterNote       $0D
00095C59 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00095C61 E10C                       	smpsAlterNote       $0C
00095C63 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00095C69 E6FF                       	smpsAlterVol        $FF
00095C6B E10B                       	smpsAlterNote       $0B
00095C6D BF03 8001                  	dc.b	nD5, $03, nRst, $01
00095C71 E10C                       	smpsAlterNote       $0C
00095C73 C103                       	dc.b	nE5, $03
00095C75 E10D                       	smpsAlterNote       $0D
00095C77 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00095C81 E10B                       	smpsAlterNote       $0B
00095C83 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00095C87 E107                       	smpsAlterNote       $07
00095C89 E701                       	dc.b	smpsNoAttack, $01
00095C8B E104                       	smpsAlterNote       $04
00095C8D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C91 E10A                       	smpsAlterNote       $0A
00095C93 E701                       	dc.b	smpsNoAttack, $01
00095C95 E10D                       	smpsAlterNote       $0D
00095C97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C9B E107                       	smpsAlterNote       $07
00095C9D E701                       	dc.b	smpsNoAttack, $01
00095C9F E104                       	smpsAlterNote       $04
00095CA1 8001                       	dc.b	nRst, $01
00095CA3 E110                       	smpsAlterNote       $10
00095CA5 C703                       	dc.b	nBb5, $03
00095CA7 E10F                       	smpsAlterNote       $0F
00095CA9 C603 8001                  	dc.b	nA5, $03, nRst, $01
00095CAD E10D                       	smpsAlterNote       $0D
00095CAF C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00095CB3 E10C                       	smpsAlterNote       $0C
00095CB5 E701                       	dc.b	smpsNoAttack, $01
00095CB7 E108                       	smpsAlterNote       $08
00095CB9 E701                       	dc.b	smpsNoAttack, $01
00095CBB E109                       	smpsAlterNote       $09
00095CBD E701                       	dc.b	smpsNoAttack, $01
00095CBF E10F                       	smpsAlterNote       $0F
00095CC1 E701                       	dc.b	smpsNoAttack, $01
00095CC3 E113                       	smpsAlterNote       $13
00095CC5 E701                       	dc.b	smpsNoAttack, $01
00095CC7 E10F                       	smpsAlterNote       $0F
00095CC9 E701                       	dc.b	smpsNoAttack, $01
00095CCB E10C                       	smpsAlterNote       $0C
00095CCD E701                       	dc.b	smpsNoAttack, $01
00095CCF E108                       	smpsAlterNote       $08
00095CD1 E701                       	dc.b	smpsNoAttack, $01
00095CD3 E10C                       	smpsAlterNote       $0C
00095CD5 E701                       	dc.b	smpsNoAttack, $01
00095CD7 E112                       	smpsAlterNote       $12
00095CD9 E701                       	dc.b	smpsNoAttack, $01
00095CDB E113                       	smpsAlterNote       $13
00095CDD E701                       	dc.b	smpsNoAttack, $01
00095CDF E10F                       	smpsAlterNote       $0F
00095CE1 E701                       	dc.b	smpsNoAttack, $01
00095CE3 E109                       	smpsAlterNote       $09
00095CE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CE9 E10C                       	smpsAlterNote       $0C
00095CEB E701                       	dc.b	smpsNoAttack, $01
00095CED E112                       	smpsAlterNote       $12
00095CEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CF3 E10C                       	smpsAlterNote       $0C
00095CF5 E701                       	dc.b	smpsNoAttack, $01
00095CF7 E109                       	smpsAlterNote       $09
00095CF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CFD E10F                       	smpsAlterNote       $0F
00095CFF E701                       	dc.b	smpsNoAttack, $01
00095D01 E113                       	smpsAlterNote       $13
00095D03 E701                       	dc.b	smpsNoAttack, $01
00095D05 E112                       	smpsAlterNote       $12
00095D07 E701                       	dc.b	smpsNoAttack, $01
00095D09 E10C                       	smpsAlterNote       $0C
00095D0B E701                       	dc.b	smpsNoAttack, $01
00095D0D E108                       	smpsAlterNote       $08
00095D0F E701                       	dc.b	smpsNoAttack, $01
00095D11 E10C                       	smpsAlterNote       $0C
00095D13 E701                       	dc.b	smpsNoAttack, $01
00095D15 E10F                       	smpsAlterNote       $0F
00095D17 E701                       	dc.b	smpsNoAttack, $01
00095D19 E113                       	smpsAlterNote       $13
00095D1B E701                       	dc.b	smpsNoAttack, $01
00095D1D E10F                       	smpsAlterNote       $0F
00095D1F BA03 8001                  	dc.b	nA4, $03, nRst, $01
00095D23 E110                       	smpsAlterNote       $10
00095D25 BB03                       	dc.b	nBb4, $03
00095D27 E10F                       	smpsAlterNote       $0F
00095D29 BA06 8001                  	dc.b	nA4, $06, nRst, $01
00095D2D E10B                       	smpsAlterNote       $0B
00095D2F BF03                       	dc.b	nD5, $03
00095D31 E10C                       	smpsAlterNote       $0C
00095D33 C103 8001                  	dc.b	nE5, $03, nRst, $01
00095D37 E10D                       	smpsAlterNote       $0D
00095D39 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00095D43 E10B                       	smpsAlterNote       $0B
00095D45 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00095D51 E110                       	smpsAlterNote       $10
00095D53 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00095D57 E10F                       	smpsAlterNote       $0F
00095D59 C604                       	dc.b	nA5, $04
00095D5B E10D                       	smpsAlterNote       $0D
00095D5D C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00095D63 E109                       	smpsAlterNote       $09
00095D65 E701                       	dc.b	smpsNoAttack, $01
00095D67 E108                       	smpsAlterNote       $08
00095D69 E701                       	dc.b	smpsNoAttack, $01
00095D6B E10C                       	smpsAlterNote       $0C
00095D6D E701                       	dc.b	smpsNoAttack, $01
00095D6F E112                       	smpsAlterNote       $12
00095D71 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D75 E10F                       	smpsAlterNote       $0F
00095D77 E701                       	dc.b	smpsNoAttack, $01
00095D79 E109                       	smpsAlterNote       $09
00095D7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D7F E10F                       	smpsAlterNote       $0F
00095D81 E701                       	dc.b	smpsNoAttack, $01
00095D83 E112                       	smpsAlterNote       $12
00095D85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D89 E10C                       	smpsAlterNote       $0C
00095D8B E701                       	dc.b	smpsNoAttack, $01
00095D8D E108                       	smpsAlterNote       $08
00095D8F E701                       	dc.b	smpsNoAttack, $01
00095D91 E109                       	smpsAlterNote       $09
00095D93 E701                       	dc.b	smpsNoAttack, $01
00095D95 E10F                       	smpsAlterNote       $0F
00095D97 E701                       	dc.b	smpsNoAttack, $01
00095D99 E113                       	smpsAlterNote       $13
00095D9B E701                       	dc.b	smpsNoAttack, $01
00095D9D E10F                       	smpsAlterNote       $0F
00095D9F E701                       	dc.b	smpsNoAttack, $01
00095DA1 E10C                       	smpsAlterNote       $0C
00095DA3 E701                       	dc.b	smpsNoAttack, $01
00095DA5 E108                       	smpsAlterNote       $08
00095DA7 E701                       	dc.b	smpsNoAttack, $01
00095DA9 E10C                       	smpsAlterNote       $0C
00095DAB E701                       	dc.b	smpsNoAttack, $01
00095DAD E112                       	smpsAlterNote       $12
00095DAF E701                       	dc.b	smpsNoAttack, $01
00095DB1 E113                       	smpsAlterNote       $13
00095DB3 E701                       	dc.b	smpsNoAttack, $01
00095DB5 E10F                       	smpsAlterNote       $0F
00095DB7 E701                       	dc.b	smpsNoAttack, $01
00095DB9 E109                       	smpsAlterNote       $09
00095DBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DBF E10C                       	smpsAlterNote       $0C
00095DC1 E701                       	dc.b	smpsNoAttack, $01
00095DC3 E112                       	smpsAlterNote       $12
00095DC5 E701                       	dc.b	smpsNoAttack, $01
00095DC7 E113                       	smpsAlterNote       $13
00095DC9 8001                       	dc.b	nRst, $01
00095DCB E10F                       	smpsAlterNote       $0F
00095DCD C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
00095DD9 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
00095DE1 E10D                       	smpsAlterNote       $0D
00095DE3 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00095DE9 E10B                       	smpsAlterNote       $0B
00095DEB BF0D                       	dc.b	nD5, $0D
00095DED E108                       	smpsAlterNote       $08
00095DEF E701                       	dc.b	smpsNoAttack, $01
00095DF1 E104                       	smpsAlterNote       $04
00095DF3 E701                       	dc.b	smpsNoAttack, $01
00095DF5 E105                       	smpsAlterNote       $05
00095DF7 E701                       	dc.b	smpsNoAttack, $01
00095DF9 E10B                       	smpsAlterNote       $0B
00095DFB E701                       	dc.b	smpsNoAttack, $01
00095DFD E10F                       	smpsAlterNote       $0F
00095DFF E701                       	dc.b	smpsNoAttack, $01
00095E01 E10B                       	smpsAlterNote       $0B
00095E03 E701                       	dc.b	smpsNoAttack, $01
00095E05 E108                       	smpsAlterNote       $08
00095E07 E701                       	dc.b	smpsNoAttack, $01
00095E09 E104                       	smpsAlterNote       $04
00095E0B E701                       	dc.b	smpsNoAttack, $01
00095E0D E108                       	smpsAlterNote       $08
00095E0F E701                       	dc.b	smpsNoAttack, $01
00095E11 E10E                       	smpsAlterNote       $0E
00095E13 E701                       	dc.b	smpsNoAttack, $01
00095E15 E10F                       	smpsAlterNote       $0F
00095E17 E701                       	dc.b	smpsNoAttack, $01
00095E19 E10C                       	smpsAlterNote       $0C
00095E1B C101                       	dc.b	nE5, $01
00095E1D E10D                       	smpsAlterNote       $0D
00095E1F C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00095E27 E10F                       	smpsAlterNote       $0F
00095E29 C607                       	dc.b	nA5, $07
00095E2B E10C                       	smpsAlterNote       $0C
00095E2D CD07                       	dc.b	nE6, $07
00095E2F E10D                       	smpsAlterNote       $0D
00095E31 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00095E35 E10C                       	smpsAlterNote       $0C
00095E37 CD03                       	dc.b	nE6, $03
00095E39 E10A                       	smpsAlterNote       $0A
00095E3B C903 8001                  	dc.b	nC6, $03, nRst, $01
00095E3F E10D                       	smpsAlterNote       $0D
00095E41 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00095E47 E10A                       	smpsAlterNote       $0A
00095E49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E4D E110                       	smpsAlterNote       $10
00095E4F E701                       	dc.b	smpsNoAttack, $01
00095E51 E114                       	smpsAlterNote       $14
00095E53 E701                       	dc.b	smpsNoAttack, $01
00095E55 E113                       	smpsAlterNote       $13
00095E57 E701                       	dc.b	smpsNoAttack, $01
00095E59 E10D                       	smpsAlterNote       $0D
00095E5B E701                       	dc.b	smpsNoAttack, $01
00095E5D E109                       	smpsAlterNote       $09
00095E5F E701                       	dc.b	smpsNoAttack, $01
00095E61 E10D                       	smpsAlterNote       $0D
00095E63 E701                       	dc.b	smpsNoAttack, $01
00095E65 E110                       	smpsAlterNote       $10
00095E67 E701                       	dc.b	smpsNoAttack, $01
00095E69 E114                       	smpsAlterNote       $14
00095E6B E701                       	dc.b	smpsNoAttack, $01
00095E6D E10F                       	smpsAlterNote       $0F
00095E6F C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00095E73 E10C                       	smpsAlterNote       $0C
00095E75 E701                       	dc.b	smpsNoAttack, $01
00095E77 E108                       	smpsAlterNote       $08
00095E79 E701                       	dc.b	smpsNoAttack, $01
00095E7B E10C                       	smpsAlterNote       $0C
00095E7D E701                       	dc.b	smpsNoAttack, $01
00095E7F E10F                       	smpsAlterNote       $0F
00095E81 E701                       	dc.b	smpsNoAttack, $01
00095E83 E113                       	smpsAlterNote       $13
00095E85 E701                       	dc.b	smpsNoAttack, $01
00095E87 E10F                       	smpsAlterNote       $0F
00095E89 E701                       	dc.b	smpsNoAttack, $01
00095E8B E109                       	smpsAlterNote       $09
00095E8D E701                       	dc.b	smpsNoAttack, $01
00095E8F E108                       	smpsAlterNote       $08
00095E91 E701                       	dc.b	smpsNoAttack, $01
00095E93 E10C                       	smpsAlterNote       $0C
00095E95 E701                       	dc.b	smpsNoAttack, $01
00095E97 E112                       	smpsAlterNote       $12
00095E99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E9D E10F                       	smpsAlterNote       $0F
00095E9F E701                       	dc.b	smpsNoAttack, $01
00095EA1 E109                       	smpsAlterNote       $09
00095EA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EA7 E10F                       	smpsAlterNote       $0F
00095EA9 E701                       	dc.b	smpsNoAttack, $01
00095EAB E112                       	smpsAlterNote       $12
00095EAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EB1 E10C                       	smpsAlterNote       $0C
00095EB3 E701                       	dc.b	smpsNoAttack, $01
00095EB5 E108                       	smpsAlterNote       $08
00095EB7 E701                       	dc.b	smpsNoAttack, $01
00095EB9 E109                       	smpsAlterNote       $09
00095EBB E701                       	dc.b	smpsNoAttack, $01
00095EBD E10F                       	smpsAlterNote       $0F
00095EBF E701                       	dc.b	smpsNoAttack, $01
00095EC1 E113                       	smpsAlterNote       $13
00095EC3 E701                       	dc.b	smpsNoAttack, $01
00095EC5 E10F                       	smpsAlterNote       $0F
00095EC7 E701                       	dc.b	smpsNoAttack, $01
00095EC9 E10C                       	smpsAlterNote       $0C
00095ECB E701                       	dc.b	smpsNoAttack, $01
00095ECD E108                       	smpsAlterNote       $08
00095ECF E701                       	dc.b	smpsNoAttack, $01
00095ED1 E10C                       	smpsAlterNote       $0C
00095ED3 E701                       	dc.b	smpsNoAttack, $01
00095ED5 E112                       	smpsAlterNote       $12
00095ED7 E701                       	dc.b	smpsNoAttack, $01
00095ED9 E113                       	smpsAlterNote       $13
00095EDB E701                       	dc.b	smpsNoAttack, $01
00095EDD E10F                       	smpsAlterNote       $0F
00095EDF E701                       	dc.b	smpsNoAttack, $01
00095EE1 E109                       	smpsAlterNote       $09
00095EE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EE7 E10C                       	smpsAlterNote       $0C
00095EE9 E701                       	dc.b	smpsNoAttack, $01
00095EEB E112                       	smpsAlterNote       $12
00095EED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EF1 E10C                       	smpsAlterNote       $0C
00095EF3 E701                       	dc.b	smpsNoAttack, $01
00095EF5 E109                       	smpsAlterNote       $09
00095EF7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EFB E10F                       	smpsAlterNote       $0F
00095EFD E701                       	dc.b	smpsNoAttack, $01
00095EFF E113                       	smpsAlterNote       $13
00095F01 E701                       	dc.b	smpsNoAttack, $01
00095F03 E112                       	smpsAlterNote       $12
00095F05 E701                       	dc.b	smpsNoAttack, $01
00095F07 E10C                       	smpsAlterNote       $0C
00095F09 E701                       	dc.b	smpsNoAttack, $01
00095F0B E109                       	smpsAlterNote       $09
00095F0D 8001                       	dc.b	nRst, $01
00095F0F E10F                       	smpsAlterNote       $0F
00095F11 C60D                       	dc.b	nA5, $0D
00095F13 E10C                       	smpsAlterNote       $0C
00095F15 E701                       	dc.b	smpsNoAttack, $01
00095F17 E108                       	smpsAlterNote       $08
00095F19 E701                       	dc.b	smpsNoAttack, $01
00095F1B E10C                       	smpsAlterNote       $0C
00095F1D E701                       	dc.b	smpsNoAttack, $01
00095F1F E112                       	smpsAlterNote       $12
00095F21 E701                       	dc.b	smpsNoAttack, $01
00095F23 E113                       	smpsAlterNote       $13
00095F25 E701                       	dc.b	smpsNoAttack, $01
00095F27 E10F                       	smpsAlterNote       $0F
00095F29 E701                       	dc.b	smpsNoAttack, $01
00095F2B E109                       	smpsAlterNote       $09
00095F2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F31 E10C                       	smpsAlterNote       $0C
00095F33 E701                       	dc.b	smpsNoAttack, $01
00095F35 E112                       	smpsAlterNote       $12
00095F37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F3B E10C                       	smpsAlterNote       $0C
00095F3D E701                       	dc.b	smpsNoAttack, $01
00095F3F E109                       	smpsAlterNote       $09
00095F41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F45 E10F                       	smpsAlterNote       $0F
00095F47 E701                       	dc.b	smpsNoAttack, $01
00095F49 E113                       	smpsAlterNote       $13
00095F4B E701                       	dc.b	smpsNoAttack, $01
00095F4D E112                       	smpsAlterNote       $12
00095F4F E701                       	dc.b	smpsNoAttack, $01
00095F51 E10C                       	smpsAlterNote       $0C
00095F53 E701                       	dc.b	smpsNoAttack, $01
00095F55 E108                       	smpsAlterNote       $08
00095F57 E701                       	dc.b	smpsNoAttack, $01
00095F59 E10C                       	smpsAlterNote       $0C
00095F5B E701                       	dc.b	smpsNoAttack, $01
00095F5D E10F                       	smpsAlterNote       $0F
00095F5F E701                       	dc.b	smpsNoAttack, $01
00095F61 E113                       	smpsAlterNote       $13
00095F63 E701                       	dc.b	smpsNoAttack, $01
00095F65 E10F                       	smpsAlterNote       $0F
00095F67 E701                       	dc.b	smpsNoAttack, $01
00095F69 E109                       	smpsAlterNote       $09
00095F6B E701                       	dc.b	smpsNoAttack, $01
00095F6D E108                       	smpsAlterNote       $08
00095F6F E701                       	dc.b	smpsNoAttack, $01
00095F71 E10C                       	smpsAlterNote       $0C
00095F73 E701                       	dc.b	smpsNoAttack, $01
00095F75 E112                       	smpsAlterNote       $12
00095F77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F7B E10F                       	smpsAlterNote       $0F
00095F7D E701                       	dc.b	smpsNoAttack, $01
00095F7F E109                       	smpsAlterNote       $09
00095F81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F85 E10F                       	smpsAlterNote       $0F
00095F87 E701                       	dc.b	smpsNoAttack, $01
00095F89 E112                       	smpsAlterNote       $12
00095F8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F8F E10C                       	smpsAlterNote       $0C
00095F91 E701                       	dc.b	smpsNoAttack, $01
00095F93 E108                       	smpsAlterNote       $08
00095F95 E701                       	dc.b	smpsNoAttack, $01
00095F97 E10C                       	smpsAlterNote       $0C
00095F99 E701                       	dc.b	smpsNoAttack, $01
00095F9B E10F                       	smpsAlterNote       $0F
00095F9D E701                       	dc.b	smpsNoAttack, $01
00095F9F E113                       	smpsAlterNote       $13
00095FA1 E701                       	dc.b	smpsNoAttack, $01
00095FA3 E10F                       	smpsAlterNote       $0F
00095FA5 E701                       	dc.b	smpsNoAttack, $01
00095FA7 E109                       	smpsAlterNote       $09
00095FA9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095FAF E601                       	smpsAlterVol        $01
00095FB1 E10F                       	smpsAlterNote       $0F
00095FB3 C604                       	dc.b	nA5, $04
00095FB5 E10D                       	smpsAlterNote       $0D
00095FB7 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00095FBD E10B                       	smpsAlterNote       $0B
00095FBF BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
00095FC7 E10F                       	smpsAlterNote       $0F
00095FC9 C604 8001                  	dc.b	nA5, $04, nRst, $01
00095FCD E10D                       	smpsAlterNote       $0D
00095FCF C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00095FD5 E10C                       	smpsAlterNote       $0C
00095FD7 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
00095FDD E10A                       	smpsAlterNote       $0A
00095FDF C904 8001                  	dc.b	nC6, $04, nRst, $01
00095FE3 E110                       	smpsAlterNote       $10
00095FE5 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00095FE9 E10F                       	smpsAlterNote       $0F
00095FEB C604                       	dc.b	nA5, $04
00095FED E10D                       	smpsAlterNote       $0D
00095FEF C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00095FFB E109                       	smpsAlterNote       $09
00095FFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096001 E10F                       	smpsAlterNote       $0F
00096003 E701                       	dc.b	smpsNoAttack, $01
00096005 E112                       	smpsAlterNote       $12
00096007 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009600B E10C                       	smpsAlterNote       $0C
0009600D E701                       	dc.b	smpsNoAttack, $01
0009600F E108                       	smpsAlterNote       $08
00096011 E701                       	dc.b	smpsNoAttack, $01
00096013 E10C                       	smpsAlterNote       $0C
00096015 E701                       	dc.b	smpsNoAttack, $01
00096017 E10F                       	smpsAlterNote       $0F
00096019 E701                       	dc.b	smpsNoAttack, $01
0009601B E113                       	smpsAlterNote       $13
0009601D E701                       	dc.b	smpsNoAttack, $01
0009601F E10D                       	smpsAlterNote       $0D
00096021 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00096027 E10C                       	smpsAlterNote       $0C
00096029 C10D                       	dc.b	nE5, $0D
0009602B E109                       	smpsAlterNote       $09
0009602D E701                       	dc.b	smpsNoAttack, $01
0009602F E105                       	smpsAlterNote       $05
00096031 E701                       	dc.b	smpsNoAttack, $01
00096033 E106                       	smpsAlterNote       $06
00096035 E701                       	dc.b	smpsNoAttack, $01
00096037 E10C                       	smpsAlterNote       $0C
00096039 E701                       	dc.b	smpsNoAttack, $01
0009603B E110                       	smpsAlterNote       $10
0009603D E701                       	dc.b	smpsNoAttack, $01
0009603F E10C                       	smpsAlterNote       $0C
00096041 E701                       	dc.b	smpsNoAttack, $01
00096043 E109                       	smpsAlterNote       $09
00096045 E701                       	dc.b	smpsNoAttack, $01
00096047 E105                       	smpsAlterNote       $05
00096049 E701                       	dc.b	smpsNoAttack, $01
0009604B E109                       	smpsAlterNote       $09
0009604D E701                       	dc.b	smpsNoAttack, $01
0009604F E10F                       	smpsAlterNote       $0F
00096051 E701                       	dc.b	smpsNoAttack, $01
00096053 E110                       	smpsAlterNote       $10
00096055 E701                       	dc.b	smpsNoAttack, $01
00096057 E10C                       	smpsAlterNote       $0C
00096059 E701                       	dc.b	smpsNoAttack, $01
0009605B E106                       	smpsAlterNote       $06
0009605D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096061 E109                       	smpsAlterNote       $09
00096063 E701                       	dc.b	smpsNoAttack, $01
00096065 E10F                       	smpsAlterNote       $0F
00096067 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009606B E109                       	smpsAlterNote       $09
0009606D E701                       	dc.b	smpsNoAttack, $01
0009606F E106                       	smpsAlterNote       $06
00096071 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096075 E10C                       	smpsAlterNote       $0C
00096077 E701                       	dc.b	smpsNoAttack, $01
00096079 E110                       	smpsAlterNote       $10
0009607B E701                       	dc.b	smpsNoAttack, $01
0009607D E10F                       	smpsAlterNote       $0F
0009607F E701                       	dc.b	smpsNoAttack, $01
00096081 E109                       	smpsAlterNote       $09
00096083 E701                       	dc.b	smpsNoAttack, $01
00096085 E105                       	smpsAlterNote       $05
00096087 E701                       	dc.b	smpsNoAttack, $01
00096089 E109                       	smpsAlterNote       $09
0009608B E701                       	dc.b	smpsNoAttack, $01
0009608D E10C                       	smpsAlterNote       $0C
0009608F E701                       	dc.b	smpsNoAttack, $01
00096091 E110                       	smpsAlterNote       $10
00096093 E701                       	dc.b	smpsNoAttack, $01
00096095 E10C                       	smpsAlterNote       $0C
00096097 E701                       	dc.b	smpsNoAttack, $01
00096099 E106                       	smpsAlterNote       $06
0009609B E701                       	dc.b	smpsNoAttack, $01
0009609D E105                       	smpsAlterNote       $05
0009609F E701                       	dc.b	smpsNoAttack, $01
000960A1 E109                       	smpsAlterNote       $09
000960A3 E701                       	dc.b	smpsNoAttack, $01
000960A5 E10F                       	smpsAlterNote       $0F
000960A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960AB E10C                       	smpsAlterNote       $0C
000960AD E701                       	dc.b	smpsNoAttack, $01
000960AF E106                       	smpsAlterNote       $06
000960B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960B5 E10C                       	smpsAlterNote       $0C
000960B7 E701                       	dc.b	smpsNoAttack, $01
000960B9 E10F                       	smpsAlterNote       $0F
000960BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960BF E109                       	smpsAlterNote       $09
000960C1 E701                       	dc.b	smpsNoAttack, $01
000960C3 E105                       	smpsAlterNote       $05
000960C5 E701                       	dc.b	smpsNoAttack, $01
000960C7 E106                       	smpsAlterNote       $06
000960C9 E701                       	dc.b	smpsNoAttack, $01
000960CB E10C                       	smpsAlterNote       $0C
000960CD E701                       	dc.b	smpsNoAttack, $01
000960CF E110                       	smpsAlterNote       $10
000960D1 E701                       	dc.b	smpsNoAttack, $01
000960D3 E10C                       	smpsAlterNote       $0C
000960D5 E701                       	dc.b	smpsNoAttack, $01
000960D7 E109                       	smpsAlterNote       $09
000960D9 E701                       	dc.b	smpsNoAttack, $01
000960DB E105                       	smpsAlterNote       $05
000960DD E701                       	dc.b	smpsNoAttack, $01
000960DF E109                       	smpsAlterNote       $09
000960E1 E701                       	dc.b	smpsNoAttack, $01
000960E3 E10F                       	smpsAlterNote       $0F
000960E5 E701                       	dc.b	smpsNoAttack, $01
000960E7 E110                       	smpsAlterNote       $10
000960E9 E701                       	dc.b	smpsNoAttack, $01
000960EB E10C                       	smpsAlterNote       $0C
000960ED E701                       	dc.b	smpsNoAttack, $01
000960EF E106                       	smpsAlterNote       $06
000960F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960F5 E109                       	smpsAlterNote       $09
000960F7 E701                       	dc.b	smpsNoAttack, $01
000960F9 E10F                       	smpsAlterNote       $0F
000960FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960FF E109                       	smpsAlterNote       $09
00096101 E701                       	dc.b	smpsNoAttack, $01
00096103 E106                       	smpsAlterNote       $06
00096105 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096109 E10C                       	smpsAlterNote       $0C
0009610B E701                       	dc.b	smpsNoAttack, $01
0009610D E110                       	smpsAlterNote       $10
0009610F E701                       	dc.b	smpsNoAttack, $01
00096111 E10F                       	smpsAlterNote       $0F
00096113 E701                       	dc.b	smpsNoAttack, $01
00096115 E109                       	smpsAlterNote       $09
00096117 E701                       	dc.b	smpsNoAttack, $01
00096119 E105                       	smpsAlterNote       $05
0009611B E701                       	dc.b	smpsNoAttack, $01
0009611D E109                       	smpsAlterNote       $09
0009611F E701                       	dc.b	smpsNoAttack, $01
00096121 E10C                       	smpsAlterNote       $0C
00096123 E701                       	dc.b	smpsNoAttack, $01
00096125 E110                       	smpsAlterNote       $10
00096127 E701                       	dc.b	smpsNoAttack, $01
00096129 E10C                       	smpsAlterNote       $0C
0009612B E701                       	dc.b	smpsNoAttack, $01
0009612D E106                       	smpsAlterNote       $06
0009612F E701                       	dc.b	smpsNoAttack, $01
00096131 E105                       	smpsAlterNote       $05
00096133 E701                       	dc.b	smpsNoAttack, $01
00096135 E109                       	smpsAlterNote       $09
00096137 E701                       	dc.b	smpsNoAttack, $01
00096139 E10F                       	smpsAlterNote       $0F
0009613B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009613F E109                       	smpsAlterNote       $09
00096141 E701                       	dc.b	smpsNoAttack, $01
00096143 E106                       	smpsAlterNote       $06
00096145 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096149 E10C                       	smpsAlterNote       $0C
0009614B E701                       	dc.b	smpsNoAttack, $01
0009614D E110                       	smpsAlterNote       $10
0009614F E701                       	dc.b	smpsNoAttack, $01
00096151 E10F                       	smpsAlterNote       $0F
00096153 E701                       	dc.b	smpsNoAttack, $01
00096155 E109                       	smpsAlterNote       $09
00096157 E701                       	dc.b	smpsNoAttack, $01
00096159 E105                       	smpsAlterNote       $05
0009615B E701                       	dc.b	smpsNoAttack, $01
0009615D E109                       	smpsAlterNote       $09
0009615F E701                       	dc.b	smpsNoAttack, $01
00096161 E10C                       	smpsAlterNote       $0C
00096163 E701                       	dc.b	smpsNoAttack, $01
00096165 E110                       	smpsAlterNote       $10
00096167 E701                       	dc.b	smpsNoAttack, $01
00096169 E10C                       	smpsAlterNote       $0C
0009616B E701                       	dc.b	smpsNoAttack, $01
0009616D E106                       	smpsAlterNote       $06
0009616F E701                       	dc.b	smpsNoAttack, $01
00096171 E105                       	smpsAlterNote       $05
00096173 E701                       	dc.b	smpsNoAttack, $01
00096175 E109                       	smpsAlterNote       $09
00096177 E701                       	dc.b	smpsNoAttack, $01
00096179 E10F                       	smpsAlterNote       $0F
0009617B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009617F E10C                       	smpsAlterNote       $0C
00096181 E701                       	dc.b	smpsNoAttack, $01
00096183 E106                       	smpsAlterNote       $06
00096185 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096189 E10C                       	smpsAlterNote       $0C
0009618B E701                       	dc.b	smpsNoAttack, $01
0009618D E10F                       	smpsAlterNote       $0F
0009618F E701                       	dc.b	smpsNoAttack, $01
00096191 E110                       	smpsAlterNote       $10
00096193 8001                       	dc.b	nRst, $01
00096195 E10F                       	smpsAlterNote       $0F
00096197 C604                       	dc.b	nA5, $04
00096199 E10D                       	smpsAlterNote       $0D
0009619B C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000961A1 E10B                       	smpsAlterNote       $0B
000961A3 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
000961A9 E10F                       	smpsAlterNote       $0F
000961AB C604 8001                  	dc.b	nA5, $04, nRst, $01
000961AF E10D                       	smpsAlterNote       $0D
000961B1 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000961B7 E10C                       	smpsAlterNote       $0C
000961B9 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
000961BF E10A                       	smpsAlterNote       $0A
000961C1 C904                       	dc.b	nC6, $04
000961C3 E110                       	smpsAlterNote       $10
000961C5 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000961C9 E10F                       	smpsAlterNote       $0F
000961CB C604                       	dc.b	nA5, $04
000961CD E10D                       	smpsAlterNote       $0D
000961CF C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000961DB E109                       	smpsAlterNote       $09
000961DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961E1 E10F                       	smpsAlterNote       $0F
000961E3 E701                       	dc.b	smpsNoAttack, $01
000961E5 E112                       	smpsAlterNote       $12
000961E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961EB E10C                       	smpsAlterNote       $0C
000961ED E701                       	dc.b	smpsNoAttack, $01
000961EF E108                       	smpsAlterNote       $08
000961F1 E701                       	dc.b	smpsNoAttack, $01
000961F3 E109                       	smpsAlterNote       $09
000961F5 E701                       	dc.b	smpsNoAttack, $01
000961F7 E10F                       	smpsAlterNote       $0F
000961F9 E701                       	dc.b	smpsNoAttack, $01
000961FB E113                       	smpsAlterNote       $13
000961FD E701                       	dc.b	smpsNoAttack, $01
000961FF E10D                       	smpsAlterNote       $0D
00096201 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00096207 E10C                       	smpsAlterNote       $0C
00096209 C10D                       	dc.b	nE5, $0D
0009620B E109                       	smpsAlterNote       $09
0009620D E701                       	dc.b	smpsNoAttack, $01
0009620F E106                       	smpsAlterNote       $06
00096211 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096215 E10C                       	smpsAlterNote       $0C
00096217 E701                       	dc.b	smpsNoAttack, $01
00096219 E110                       	smpsAlterNote       $10
0009621B E701                       	dc.b	smpsNoAttack, $01
0009621D E10F                       	smpsAlterNote       $0F
0009621F E701                       	dc.b	smpsNoAttack, $01
00096221 E109                       	smpsAlterNote       $09
00096223 E701                       	dc.b	smpsNoAttack, $01
00096225 E105                       	smpsAlterNote       $05
00096227 E701                       	dc.b	smpsNoAttack, $01
00096229 E109                       	smpsAlterNote       $09
0009622B E701                       	dc.b	smpsNoAttack, $01
0009622D E10C                       	smpsAlterNote       $0C
0009622F E701                       	dc.b	smpsNoAttack, $01
00096231 E110                       	smpsAlterNote       $10
00096233 E701                       	dc.b	smpsNoAttack, $01
00096235 E10C                       	smpsAlterNote       $0C
00096237 E701                       	dc.b	smpsNoAttack, $01
00096239 E106                       	smpsAlterNote       $06
0009623B E701                       	dc.b	smpsNoAttack, $01
0009623D E105                       	smpsAlterNote       $05
0009623F E701                       	dc.b	smpsNoAttack, $01
00096241 E109                       	smpsAlterNote       $09
00096243 E701                       	dc.b	smpsNoAttack, $01
00096245 E10F                       	smpsAlterNote       $0F
00096247 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009624B E10C                       	smpsAlterNote       $0C
0009624D E701                       	dc.b	smpsNoAttack, $01
0009624F E106                       	smpsAlterNote       $06
00096251 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096255 E10C                       	smpsAlterNote       $0C
00096257 E701                       	dc.b	smpsNoAttack, $01
00096259 E10F                       	smpsAlterNote       $0F
0009625B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009625F E109                       	smpsAlterNote       $09
00096261 E701                       	dc.b	smpsNoAttack, $01
00096263 E105                       	smpsAlterNote       $05
00096265 E701                       	dc.b	smpsNoAttack, $01
00096267 E106                       	smpsAlterNote       $06
00096269 E701                       	dc.b	smpsNoAttack, $01
0009626B E10C                       	smpsAlterNote       $0C
0009626D E701                       	dc.b	smpsNoAttack, $01
0009626F E110                       	smpsAlterNote       $10
00096271 E701                       	dc.b	smpsNoAttack, $01
00096273 E10C                       	smpsAlterNote       $0C
00096275 E701                       	dc.b	smpsNoAttack, $01
00096277 E109                       	smpsAlterNote       $09
00096279 E701                       	dc.b	smpsNoAttack, $01
0009627B E105                       	smpsAlterNote       $05
0009627D E701                       	dc.b	smpsNoAttack, $01
0009627F E109                       	smpsAlterNote       $09
00096281 E701                       	dc.b	smpsNoAttack, $01
00096283 E10F                       	smpsAlterNote       $0F
00096285 E701                       	dc.b	smpsNoAttack, $01
00096287 E110                       	smpsAlterNote       $10
00096289 E701                       	dc.b	smpsNoAttack, $01
0009628B E10C                       	smpsAlterNote       $0C
0009628D E701                       	dc.b	smpsNoAttack, $01
0009628F E106                       	smpsAlterNote       $06
00096291 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096295 E109                       	smpsAlterNote       $09
00096297 E701                       	dc.b	smpsNoAttack, $01
00096299 E10F                       	smpsAlterNote       $0F
0009629B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009629F E109                       	smpsAlterNote       $09
000962A1 E701                       	dc.b	smpsNoAttack, $01
000962A3 E106                       	smpsAlterNote       $06
000962A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962A9 E10C                       	smpsAlterNote       $0C
000962AB E701                       	dc.b	smpsNoAttack, $01
000962AD E110                       	smpsAlterNote       $10
000962AF E701                       	dc.b	smpsNoAttack, $01
000962B1 E10F                       	smpsAlterNote       $0F
000962B3 E701                       	dc.b	smpsNoAttack, $01
000962B5 E109                       	smpsAlterNote       $09
000962B7 E701                       	dc.b	smpsNoAttack, $01
000962B9 E105                       	smpsAlterNote       $05
000962BB E701                       	dc.b	smpsNoAttack, $01
000962BD E109                       	smpsAlterNote       $09
000962BF E701                       	dc.b	smpsNoAttack, $01
000962C1 E10F                       	smpsAlterNote       $0F
000962C3 E701                       	dc.b	smpsNoAttack, $01
000962C5 E110                       	smpsAlterNote       $10
000962C7 E701                       	dc.b	smpsNoAttack, $01
000962C9 E10C                       	smpsAlterNote       $0C
000962CB E701                       	dc.b	smpsNoAttack, $01
000962CD E106                       	smpsAlterNote       $06
000962CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962D3 E109                       	smpsAlterNote       $09
000962D5 E701                       	dc.b	smpsNoAttack, $01
000962D7 E10F                       	smpsAlterNote       $0F
000962D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962DD E109                       	smpsAlterNote       $09
000962DF E701                       	dc.b	smpsNoAttack, $01
000962E1 E106                       	smpsAlterNote       $06
000962E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962E7 E10C                       	smpsAlterNote       $0C
000962E9 E701                       	dc.b	smpsNoAttack, $01
000962EB E110                       	smpsAlterNote       $10
000962ED E701                       	dc.b	smpsNoAttack, $01
000962EF E10F                       	smpsAlterNote       $0F
000962F1 E701                       	dc.b	smpsNoAttack, $01
000962F3 E109                       	smpsAlterNote       $09
000962F5 E701                       	dc.b	smpsNoAttack, $01
000962F7 E105                       	smpsAlterNote       $05
000962F9 E701                       	dc.b	smpsNoAttack, $01
000962FB E109                       	smpsAlterNote       $09
000962FD E701                       	dc.b	smpsNoAttack, $01
000962FF E10C                       	smpsAlterNote       $0C
00096301 E701                       	dc.b	smpsNoAttack, $01
00096303 E110                       	smpsAlterNote       $10
00096305 E701                       	dc.b	smpsNoAttack, $01
00096307 E10C                       	smpsAlterNote       $0C
00096309 E701                       	dc.b	smpsNoAttack, $01
0009630B E106                       	smpsAlterNote       $06
0009630D E701                       	dc.b	smpsNoAttack, $01
0009630F E105                       	smpsAlterNote       $05
00096311 E701                       	dc.b	smpsNoAttack, $01
00096313 E109                       	smpsAlterNote       $09
00096315 E701                       	dc.b	smpsNoAttack, $01
00096317 E10F                       	smpsAlterNote       $0F
00096319 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009631D E10C                       	smpsAlterNote       $0C
0009631F E701                       	dc.b	smpsNoAttack, $01
00096321 E106                       	smpsAlterNote       $06
00096323 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096327 E10C                       	smpsAlterNote       $0C
00096329 E701                       	dc.b	smpsNoAttack, $01
0009632B E10F                       	smpsAlterNote       $0F
0009632D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096331 E109                       	smpsAlterNote       $09
00096333 E701                       	dc.b	smpsNoAttack, $01
00096335 E105                       	smpsAlterNote       $05
00096337 E701                       	dc.b	smpsNoAttack, $01
00096339 E106                       	smpsAlterNote       $06
0009633B E701                       	dc.b	smpsNoAttack, $01
0009633D E10C                       	smpsAlterNote       $0C
0009633F E701                       	dc.b	smpsNoAttack, $01
00096341 E110                       	smpsAlterNote       $10
00096343 E701                       	dc.b	smpsNoAttack, $01
00096345 E10C                       	smpsAlterNote       $0C
00096347 E701                       	dc.b	smpsNoAttack, $01
00096349 E109                       	smpsAlterNote       $09
0009634B E701                       	dc.b	smpsNoAttack, $01
0009634D E105                       	smpsAlterNote       $05
0009634F E701                       	dc.b	smpsNoAttack, $01
00096351 E109                       	smpsAlterNote       $09
00096353 E701                       	dc.b	smpsNoAttack, $01
00096355 E10F                       	smpsAlterNote       $0F
00096357 E701                       	dc.b	smpsNoAttack, $01
00096359 E110                       	smpsAlterNote       $10
0009635B E701                       	dc.b	smpsNoAttack, $01
0009635D E10C                       	smpsAlterNote       $0C
0009635F E701                       	dc.b	smpsNoAttack, $01
00096361 E106                       	smpsAlterNote       $06
00096363 E701                       	dc.b	smpsNoAttack, $01
00096365 E10B                       	smpsAlterNote       $0B
00096367 BF02                       	dc.b	nD5, $02
00096369 E10C                       	smpsAlterNote       $0C
0009636B C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
00096371 E109                       	smpsAlterNote       $09
00096373 E701                       	dc.b	smpsNoAttack, $01
00096375 E105                       	smpsAlterNote       $05
00096377 E701                       	dc.b	smpsNoAttack, $01
00096379 E109                       	smpsAlterNote       $09
0009637B E701                       	dc.b	smpsNoAttack, $01
0009637D E10F                       	smpsAlterNote       $0F
0009637F E701                       	dc.b	smpsNoAttack, $01
00096381 E110                       	smpsAlterNote       $10
00096383 E701                       	dc.b	smpsNoAttack, $01
00096385 E10C                       	smpsAlterNote       $0C
00096387 E701                       	dc.b	smpsNoAttack, $01
00096389 E106                       	smpsAlterNote       $06
0009638B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009638F E109                       	smpsAlterNote       $09
00096391 E701                       	dc.b	smpsNoAttack, $01
00096393 E10F                       	smpsAlterNote       $0F
00096395 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096399 E109                       	smpsAlterNote       $09
0009639B E701                       	dc.b	smpsNoAttack, $01
0009639D E106                       	smpsAlterNote       $06
0009639F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963A3 E10C                       	smpsAlterNote       $0C
000963A5 E701                       	dc.b	smpsNoAttack, $01
000963A7 E110                       	smpsAlterNote       $10
000963A9 E701                       	dc.b	smpsNoAttack, $01
000963AB E10F                       	smpsAlterNote       $0F
000963AD E701                       	dc.b	smpsNoAttack, $01
000963AF E109                       	smpsAlterNote       $09
000963B1 E701                       	dc.b	smpsNoAttack, $01
000963B3 E105                       	smpsAlterNote       $05
000963B5 E701                       	dc.b	smpsNoAttack, $01
000963B7 E109                       	smpsAlterNote       $09
000963B9 E701                       	dc.b	smpsNoAttack, $01
000963BB E10C                       	smpsAlterNote       $0C
000963BD E701                       	dc.b	smpsNoAttack, $01
000963BF E110                       	smpsAlterNote       $10
000963C1 E701                       	dc.b	smpsNoAttack, $01
000963C3 E10C                       	smpsAlterNote       $0C
000963C5 E701                       	dc.b	smpsNoAttack, $01
000963C7 E106                       	smpsAlterNote       $06
000963C9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000963CD E10D                       	smpsAlterNote       $0D
000963CF C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
000963D7 E10C                       	smpsAlterNote       $0C
000963D9 C10D                       	dc.b	nE5, $0D
000963DB E106                       	smpsAlterNote       $06
000963DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963E1 E109                       	smpsAlterNote       $09
000963E3 E701                       	dc.b	smpsNoAttack, $01
000963E5 E10F                       	smpsAlterNote       $0F
000963E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963EB E109                       	smpsAlterNote       $09
000963ED E701                       	dc.b	smpsNoAttack, $01
000963EF E106                       	smpsAlterNote       $06
000963F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963F5 E10C                       	smpsAlterNote       $0C
000963F7 E701                       	dc.b	smpsNoAttack, $01
000963F9 E110                       	smpsAlterNote       $10
000963FB E701                       	dc.b	smpsNoAttack, $01
000963FD E10F                       	smpsAlterNote       $0F
000963FF E701                       	dc.b	smpsNoAttack, $01
00096401 E109                       	smpsAlterNote       $09
00096403 E701                       	dc.b	smpsNoAttack, $01
00096405 E105                       	smpsAlterNote       $05
00096407 E701                       	dc.b	smpsNoAttack, $01
00096409 E106                       	smpsAlterNote       $06
0009640B 800F                       	dc.b	nRst, $0F
0009640F E6FF                       	smpsAlterVol        $FF
00096411 E10F                       	smpsAlterNote       $0F
00096413 BA01                       	dc.b	nA4, $01
00096415 E110                       	smpsAlterNote       $10
00096417 BB02                       	dc.b	nBb4, $02
00096419 E10F                       	smpsAlterNote       $0F
0009641B BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
00096421 E10B                       	smpsAlterNote       $0B
00096423 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00096427 E10C                       	smpsAlterNote       $0C
00096429 C103                       	dc.b	nE5, $03
0009642B E10D                       	smpsAlterNote       $0D
0009642D C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00096437 E10B                       	smpsAlterNote       $0B
00096439 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0009643D E104                       	smpsAlterNote       $04
0009643F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096443 E10A                       	smpsAlterNote       $0A
00096445 E701                       	dc.b	smpsNoAttack, $01
00096447 E10D                       	smpsAlterNote       $0D
00096449 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009644D E107                       	smpsAlterNote       $07
0009644F E701                       	dc.b	smpsNoAttack, $01
00096451 E104                       	smpsAlterNote       $04
00096453 8001                       	dc.b	nRst, $01
00096455 E110                       	smpsAlterNote       $10
00096457 C703                       	dc.b	nBb5, $03
00096459 E10F                       	smpsAlterNote       $0F
0009645B C603 8001                  	dc.b	nA5, $03, nRst, $01
0009645F E10D                       	smpsAlterNote       $0D
00096461 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00096465 E10C                       	smpsAlterNote       $0C
00096467 E701                       	dc.b	smpsNoAttack, $01
00096469 E108                       	smpsAlterNote       $08
0009646B E701                       	dc.b	smpsNoAttack, $01
0009646D E109                       	smpsAlterNote       $09
0009646F E701                       	dc.b	smpsNoAttack, $01
00096471 E10F                       	smpsAlterNote       $0F
00096473 E701                       	dc.b	smpsNoAttack, $01
00096475 E113                       	smpsAlterNote       $13
00096477 E701                       	dc.b	smpsNoAttack, $01
00096479 E10F                       	smpsAlterNote       $0F
0009647B E701                       	dc.b	smpsNoAttack, $01
0009647D E10C                       	smpsAlterNote       $0C
0009647F E701                       	dc.b	smpsNoAttack, $01
00096481 E108                       	smpsAlterNote       $08
00096483 E701                       	dc.b	smpsNoAttack, $01
00096485 E10C                       	smpsAlterNote       $0C
00096487 E701                       	dc.b	smpsNoAttack, $01
00096489 E112                       	smpsAlterNote       $12
0009648B E701                       	dc.b	smpsNoAttack, $01
0009648D E113                       	smpsAlterNote       $13
0009648F E701                       	dc.b	smpsNoAttack, $01
00096491 E10F                       	smpsAlterNote       $0F
00096493 E701                       	dc.b	smpsNoAttack, $01
00096495 E109                       	smpsAlterNote       $09
00096497 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009649B E10C                       	smpsAlterNote       $0C
0009649D E701                       	dc.b	smpsNoAttack, $01
0009649F E112                       	smpsAlterNote       $12
000964A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964A5 E10C                       	smpsAlterNote       $0C
000964A7 E701                       	dc.b	smpsNoAttack, $01
000964A9 E109                       	smpsAlterNote       $09
000964AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964AF E10F                       	smpsAlterNote       $0F
000964B1 E701                       	dc.b	smpsNoAttack, $01
000964B3 E113                       	smpsAlterNote       $13
000964B5 E701                       	dc.b	smpsNoAttack, $01
000964B7 E112                       	smpsAlterNote       $12
000964B9 E701                       	dc.b	smpsNoAttack, $01
000964BB E10C                       	smpsAlterNote       $0C
000964BD E701                       	dc.b	smpsNoAttack, $01
000964BF E108                       	smpsAlterNote       $08
000964C1 E701                       	dc.b	smpsNoAttack, $01
000964C3 E10C                       	smpsAlterNote       $0C
000964C5 E701                       	dc.b	smpsNoAttack, $01
000964C7 E10F                       	smpsAlterNote       $0F
000964C9 E701                       	dc.b	smpsNoAttack, $01
000964CB E113                       	smpsAlterNote       $13
000964CD E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000964D1 E10B                       	smpsAlterNote       $0B
000964D3 BF03                       	dc.b	nD5, $03
000964D5 E10C                       	smpsAlterNote       $0C
000964D7 C103 8001                  	dc.b	nE5, $03, nRst, $01
000964DB E10D                       	smpsAlterNote       $0D
000964DD C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000964E7 E10B                       	smpsAlterNote       $0B
000964E9 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
000964F5 E110                       	smpsAlterNote       $10
000964F7 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000964FB E10F                       	smpsAlterNote       $0F
000964FD C604                       	dc.b	nA5, $04
000964FF E10D                       	smpsAlterNote       $0D
00096501 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00096507 E109                       	smpsAlterNote       $09
00096509 E701                       	dc.b	smpsNoAttack, $01
0009650B E108                       	smpsAlterNote       $08
0009650D E701                       	dc.b	smpsNoAttack, $01
0009650F E10C                       	smpsAlterNote       $0C
00096511 E701                       	dc.b	smpsNoAttack, $01
00096513 E112                       	smpsAlterNote       $12
00096515 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096519 E10F                       	smpsAlterNote       $0F
0009651B E701                       	dc.b	smpsNoAttack, $01
0009651D E109                       	smpsAlterNote       $09
0009651F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096523 E10F                       	smpsAlterNote       $0F
00096525 E701                       	dc.b	smpsNoAttack, $01
00096527 E112                       	smpsAlterNote       $12
00096529 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009652D E10C                       	smpsAlterNote       $0C
0009652F E701                       	dc.b	smpsNoAttack, $01
00096531 E108                       	smpsAlterNote       $08
00096533 E701                       	dc.b	smpsNoAttack, $01
00096535 E109                       	smpsAlterNote       $09
00096537 E701                       	dc.b	smpsNoAttack, $01
00096539 E10F                       	smpsAlterNote       $0F
0009653B E701                       	dc.b	smpsNoAttack, $01
0009653D E113                       	smpsAlterNote       $13
0009653F E701                       	dc.b	smpsNoAttack, $01
00096541 E10F                       	smpsAlterNote       $0F
00096543 E701                       	dc.b	smpsNoAttack, $01
00096545 E10C                       	smpsAlterNote       $0C
00096547 E701                       	dc.b	smpsNoAttack, $01
00096549 E108                       	smpsAlterNote       $08
0009654B E701                       	dc.b	smpsNoAttack, $01
0009654D E10C                       	smpsAlterNote       $0C
0009654F E701                       	dc.b	smpsNoAttack, $01
00096551 E112                       	smpsAlterNote       $12
00096553 E701                       	dc.b	smpsNoAttack, $01
00096555 E113                       	smpsAlterNote       $13
00096557 E701                       	dc.b	smpsNoAttack, $01
00096559 E10F                       	smpsAlterNote       $0F
0009655B E701                       	dc.b	smpsNoAttack, $01
0009655D E109                       	smpsAlterNote       $09
0009655F E701                       	dc.b	smpsNoAttack, $01
00096561 E10D                       	smpsAlterNote       $0D
00096563 C402                       	dc.b	nG5, $02
00096565 E10F                       	smpsAlterNote       $0F
00096567 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00096571 E10D                       	smpsAlterNote       $0D
00096573 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00096579 E10B                       	smpsAlterNote       $0B
0009657B BF0D                       	dc.b	nD5, $0D
0009657D E108                       	smpsAlterNote       $08
0009657F E701                       	dc.b	smpsNoAttack, $01
00096581 E104                       	smpsAlterNote       $04
00096583 E701                       	dc.b	smpsNoAttack, $01
00096585 E105                       	smpsAlterNote       $05
00096587 E701                       	dc.b	smpsNoAttack, $01
00096589 E10B                       	smpsAlterNote       $0B
0009658B E701                       	dc.b	smpsNoAttack, $01
0009658D E10F                       	smpsAlterNote       $0F
0009658F E701                       	dc.b	smpsNoAttack, $01
00096591 E10B                       	smpsAlterNote       $0B
00096593 E701                       	dc.b	smpsNoAttack, $01
00096595 E108                       	smpsAlterNote       $08
00096597 E701                       	dc.b	smpsNoAttack, $01
00096599 E104                       	smpsAlterNote       $04
0009659B E701                       	dc.b	smpsNoAttack, $01
0009659D E108                       	smpsAlterNote       $08
0009659F E701                       	dc.b	smpsNoAttack, $01
000965A1 E10E                       	smpsAlterNote       $0E
000965A3 E701                       	dc.b	smpsNoAttack, $01
000965A5 E10F                       	smpsAlterNote       $0F
000965A7 E701                       	dc.b	smpsNoAttack, $01
000965A9 E10C                       	smpsAlterNote       $0C
000965AB C101                       	dc.b	nE5, $01
000965AD E10D                       	smpsAlterNote       $0D
000965AF C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000965B7 E10F                       	smpsAlterNote       $0F
000965B9 C607                       	dc.b	nA5, $07
000965BB E10C                       	smpsAlterNote       $0C
000965BD CD07                       	dc.b	nE6, $07
000965BF E10D                       	smpsAlterNote       $0D
000965C1 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000965C5 E10C                       	smpsAlterNote       $0C
000965C7 CD03                       	dc.b	nE6, $03
000965C9 E10A                       	smpsAlterNote       $0A
000965CB C903 8001                  	dc.b	nC6, $03, nRst, $01
000965CF E10D                       	smpsAlterNote       $0D
000965D1 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
000965D7 E10A                       	smpsAlterNote       $0A
000965D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965DD E110                       	smpsAlterNote       $10
000965DF E701                       	dc.b	smpsNoAttack, $01
000965E1 E114                       	smpsAlterNote       $14
000965E3 E701                       	dc.b	smpsNoAttack, $01
000965E5 E113                       	smpsAlterNote       $13
000965E7 E701                       	dc.b	smpsNoAttack, $01
000965E9 E10D                       	smpsAlterNote       $0D
000965EB E701                       	dc.b	smpsNoAttack, $01
000965ED E109                       	smpsAlterNote       $09
000965EF E701                       	dc.b	smpsNoAttack, $01
000965F1 E10D                       	smpsAlterNote       $0D
000965F3 E701                       	dc.b	smpsNoAttack, $01
000965F5 E110                       	smpsAlterNote       $10
000965F7 E701                       	dc.b	smpsNoAttack, $01
000965F9 E114                       	smpsAlterNote       $14
000965FB E701                       	dc.b	smpsNoAttack, $01
000965FD E10F                       	smpsAlterNote       $0F
000965FF C607                       	dc.b	nA5, $07
00096601 E10D                       	smpsAlterNote       $0D
00096603 C40D                       	dc.b	nG5, $0D
00096605 E10A                       	smpsAlterNote       $0A
00096607 E701                       	dc.b	smpsNoAttack, $01
00096609 E106                       	smpsAlterNote       $06
0009660B E701                       	dc.b	smpsNoAttack, $01
0009660D E10A                       	smpsAlterNote       $0A
0009660F E701                       	dc.b	smpsNoAttack, $01
00096611 E10D                       	smpsAlterNote       $0D
00096613 E701                       	dc.b	smpsNoAttack, $01
00096615 E111                       	smpsAlterNote       $11
00096617 E701                       	dc.b	smpsNoAttack, $01
00096619 E10D                       	smpsAlterNote       $0D
0009661B E701                       	dc.b	smpsNoAttack, $01
0009661D E107                       	smpsAlterNote       $07
0009661F E701                       	dc.b	smpsNoAttack, $01
00096621 E106                       	smpsAlterNote       $06
00096623 E701                       	dc.b	smpsNoAttack, $01
00096625 E10A                       	smpsAlterNote       $0A
00096627 E701                       	dc.b	smpsNoAttack, $01
00096629 E110                       	smpsAlterNote       $10
0009662B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009662F E10D                       	smpsAlterNote       $0D
00096631 E701                       	dc.b	smpsNoAttack, $01
00096633 E107                       	smpsAlterNote       $07
00096635 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096639 E10F                       	smpsAlterNote       $0F
0009663B C60E                       	dc.b	nA5, $0E
0009663D E109                       	smpsAlterNote       $09
0009663F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096643 E10F                       	smpsAlterNote       $0F
00096645 E701                       	dc.b	smpsNoAttack, $01
00096647 E112                       	smpsAlterNote       $12
00096649 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009664D E10C                       	smpsAlterNote       $0C
0009664F E701                       	dc.b	smpsNoAttack, $01
00096651 E108                       	smpsAlterNote       $08
00096653 E701                       	dc.b	smpsNoAttack, $01
00096655 E109                       	smpsAlterNote       $09
00096657 E701                       	dc.b	smpsNoAttack, $01
00096659 E10F                       	smpsAlterNote       $0F
0009665B E701                       	dc.b	smpsNoAttack, $01
0009665D E113                       	smpsAlterNote       $13
0009665F E701                       	dc.b	smpsNoAttack, $01
00096661 E10F                       	smpsAlterNote       $0F
00096663 E701                       	dc.b	smpsNoAttack, $01
00096665 E10C                       	smpsAlterNote       $0C
00096667 E701                       	dc.b	smpsNoAttack, $01
00096669 E108                       	smpsAlterNote       $08
0009666B E701                       	dc.b	smpsNoAttack, $01
0009666D E109                       	smpsAlterNote       $09
0009666F 8001                       	dc.b	nRst, $01
00096671 E110                       	smpsAlterNote       $10
00096673 C70D                       	dc.b	nBb5, $0D
00096675 E10D                       	smpsAlterNote       $0D
00096677 E701                       	dc.b	smpsNoAttack, $01
00096679 E109                       	smpsAlterNote       $09
0009667B E701                       	dc.b	smpsNoAttack, $01
0009667D E10D                       	smpsAlterNote       $0D
0009667F E701                       	dc.b	smpsNoAttack, $01
00096681 E113                       	smpsAlterNote       $13
00096683 E701                       	dc.b	smpsNoAttack, $01
00096685 E114                       	smpsAlterNote       $14
00096687 E701                       	dc.b	smpsNoAttack, $01
00096689 E110                       	smpsAlterNote       $10
0009668B E701                       	dc.b	smpsNoAttack, $01
0009668D E10A                       	smpsAlterNote       $0A
0009668F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096693 E10D                       	smpsAlterNote       $0D
00096695 E701                       	dc.b	smpsNoAttack, $01
00096697 E113                       	smpsAlterNote       $13
00096699 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009669D E10D                       	smpsAlterNote       $0D
0009669F E701                       	dc.b	smpsNoAttack, $01
000966A1 E10A                       	smpsAlterNote       $0A
000966A3 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
000966AD E10B                       	smpsAlterNote       $0B
000966AF 8001                       	dc.b	nRst, $01
000966B1 E10C                       	smpsAlterNote       $0C
000966B3 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
000966B7 E10B                       	smpsAlterNote       $0B
000966B9 CB0D                       	dc.b	nD6, $0D
000966BB E105                       	smpsAlterNote       $05
000966BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966C1 E108                       	smpsAlterNote       $08
000966C3 E701                       	dc.b	smpsNoAttack, $01
000966C5 E10E                       	smpsAlterNote       $0E
000966C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966CB E108                       	smpsAlterNote       $08
000966CD E701                       	dc.b	smpsNoAttack, $01
000966CF E105                       	smpsAlterNote       $05
000966D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966D5 E10B                       	smpsAlterNote       $0B
000966D7 E701                       	dc.b	smpsNoAttack, $01
000966D9 E10F                       	smpsAlterNote       $0F
000966DB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000966DF E10C                       	smpsAlterNote       $0C
000966E1 CC0D                       	dc.b	nEb6, $0D
000966E3 E106                       	smpsAlterNote       $06
000966E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966E9 E109                       	smpsAlterNote       $09
000966EB E701                       	dc.b	smpsNoAttack, $01
000966ED E10C                       	smpsAlterNote       $0C
000966EF 8001                       	dc.b	nRst, $01
000966F1 E10A                       	smpsAlterNote       $0A
000966F3 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000966FF CB0E                       	dc.b	nD6, $0E
00096701 E105                       	smpsAlterNote       $05
00096703 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096707 E10B                       	smpsAlterNote       $0B
00096709 E701                       	dc.b	smpsNoAttack, $01
0009670B E10E                       	smpsAlterNote       $0E
0009670D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096711 E108                       	smpsAlterNote       $08
00096713 E701                       	dc.b	smpsNoAttack, $01
00096715 E104                       	smpsAlterNote       $04
00096717 E701                       	dc.b	smpsNoAttack, $01
00096719 E105                       	smpsAlterNote       $05
0009671B E701                       	dc.b	smpsNoAttack, $01
0009671D E10B                       	smpsAlterNote       $0B
0009671F E701                       	dc.b	smpsNoAttack, $01
00096721 E10F                       	smpsAlterNote       $0F
00096723 E701                       	dc.b	smpsNoAttack, $01
00096725 E10D                       	smpsAlterNote       $0D
00096727 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0009672B E10C                       	smpsAlterNote       $0C
0009672D CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00096731 E10A                       	smpsAlterNote       $0A
00096733 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0009673F CB0D                       	dc.b	nD6, $0D
00096741 E108                       	smpsAlterNote       $08
00096743 E701                       	dc.b	smpsNoAttack, $01
00096745 E104                       	smpsAlterNote       $04
00096747 E701                       	dc.b	smpsNoAttack, $01
00096749 E105                       	smpsAlterNote       $05
0009674B E701                       	dc.b	smpsNoAttack, $01
0009674D E10B                       	smpsAlterNote       $0B
0009674F E701                       	dc.b	smpsNoAttack, $01
00096751 E10F                       	smpsAlterNote       $0F
00096753 E701                       	dc.b	smpsNoAttack, $01
00096755 E10B                       	smpsAlterNote       $0B
00096757 E701                       	dc.b	smpsNoAttack, $01
00096759 E108                       	smpsAlterNote       $08
0009675B E701                       	dc.b	smpsNoAttack, $01
0009675D E104                       	smpsAlterNote       $04
0009675F E701                       	dc.b	smpsNoAttack, $01
00096761 E108                       	smpsAlterNote       $08
00096763 E701                       	dc.b	smpsNoAttack, $01
00096765 E10E                       	smpsAlterNote       $0E
00096767 E701                       	dc.b	smpsNoAttack, $01
00096769 E10F                       	smpsAlterNote       $0F
0009676B E701                       	dc.b	smpsNoAttack, $01
0009676D E10C                       	smpsAlterNote       $0C
0009676F CC0D                       	dc.b	nEb6, $0D
00096771 E109                       	smpsAlterNote       $09
00096773 E701                       	dc.b	smpsNoAttack, $01
00096775 E105                       	smpsAlterNote       $05
00096777 E701                       	dc.b	smpsNoAttack, $01
00096779 E106                       	smpsAlterNote       $06
0009677B E701                       	dc.b	smpsNoAttack, $01
0009677D E10C                       	smpsAlterNote       $0C
0009677F E701                       	dc.b	smpsNoAttack, $01
00096781 E10A                       	smpsAlterNote       $0A
00096783 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0009678F CB0D                       	dc.b	nD6, $0D
00096791 E108                       	smpsAlterNote       $08
00096793 E701                       	dc.b	smpsNoAttack, $01
00096795 E104                       	smpsAlterNote       $04
00096797 E701                       	dc.b	smpsNoAttack, $01
00096799 E108                       	smpsAlterNote       $08
0009679B E701                       	dc.b	smpsNoAttack, $01
0009679D E10B                       	smpsAlterNote       $0B
0009679F E701                       	dc.b	smpsNoAttack, $01
000967A1 E10F                       	smpsAlterNote       $0F
000967A3 E701                       	dc.b	smpsNoAttack, $01
000967A5 E10B                       	smpsAlterNote       $0B
000967A7 E701                       	dc.b	smpsNoAttack, $01
000967A9 E105                       	smpsAlterNote       $05
000967AB E701                       	dc.b	smpsNoAttack, $01
000967AD E104                       	smpsAlterNote       $04
000967AF E701                       	dc.b	smpsNoAttack, $01
000967B1 E108                       	smpsAlterNote       $08
000967B3 E701                       	dc.b	smpsNoAttack, $01
000967B5 E10E                       	smpsAlterNote       $0E
000967B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967BB E10B                       	smpsAlterNote       $0B
000967BD E701                       	dc.b	smpsNoAttack, $01
000967BF E105                       	smpsAlterNote       $05
000967C1 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
000967C9 03                         	dc.b	$03
000967CA E601                       	smpsAlterVol        $01
000967CC F6F1 D1                    	smpsJump            music84_Jump01
000967CF                            
000967CF                            ; FM5 Data
000967CF                            music84_FM5:
000967D1 E080                       	smpsPan             panLeft, $00
000967D3 8003                       	dc.b	nRst, $03
000967D5 E10D                       	smpsAlterNote       $0D
000967D7 C203 8008                  	dc.b	nF5, $03, nRst, $08
000967DB E10C                       	smpsAlterNote       $0C
000967DD C103 800A                  	dc.b	nE5, $03, nRst, $0A
000967E1 E10F                       	smpsAlterNote       $0F
000967E3 BA03 8006                  	dc.b	nA4, $03, nRst, $06
000967E9 E6FE                       	smpsAlterVol        $FE
000967EB C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
000967F1 E10D                       	smpsAlterNote       $0D
000967F3 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000967F9 E10C                       	smpsAlterNote       $0C
000967FB C102 8001                  	dc.b	nE5, $02, nRst, $01
000967FF E10A                       	smpsAlterNote       $0A
00096801 BD01 8001                  	dc.b	nC5, $01, nRst, $01
00096807 03                         	dc.b	$03
00096808                            
00096808                            music84_Jump00:
00096808 8004                       	dc.b	nRst, $04
0009680A E602                       	smpsAlterVol        $02
0009680C E10D                       	smpsAlterNote       $0D
0009680E B60D                       	dc.b	nF4, $0D
00096810 E107                       	smpsAlterNote       $07
00096812 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096816 E10A                       	smpsAlterNote       $0A
00096818 E701                       	dc.b	smpsNoAttack, $01
0009681A E110                       	smpsAlterNote       $10
0009681C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096820 E10A                       	smpsAlterNote       $0A
00096822 E701                       	dc.b	smpsNoAttack, $01
00096824 E107                       	smpsAlterNote       $07
00096826 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009682A E10D                       	smpsAlterNote       $0D
0009682C E701                       	dc.b	smpsNoAttack, $01
0009682E E111                       	smpsAlterNote       $11
00096830 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096834 E10D                       	smpsAlterNote       $0D
00096836 B80D                       	dc.b	nG4, $0D
00096838 E107                       	smpsAlterNote       $07
0009683A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009683E E10A                       	smpsAlterNote       $0A
00096840 E701                       	dc.b	smpsNoAttack, $01
00096842 E110                       	smpsAlterNote       $10
00096844 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096848 E10A                       	smpsAlterNote       $0A
0009684A E701                       	dc.b	smpsNoAttack, $01
0009684C E107                       	smpsAlterNote       $07
0009684E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096852 E10D                       	smpsAlterNote       $0D
00096854 E701                       	dc.b	smpsNoAttack, $01
00096856 E111                       	smpsAlterNote       $11
00096858 E701                       	dc.b	smpsNoAttack, $01
0009685A E110                       	smpsAlterNote       $10
0009685C E701                       	dc.b	smpsNoAttack, $01
0009685E E10A                       	smpsAlterNote       $0A
00096860 E701                       	dc.b	smpsNoAttack, $01
00096862 E106                       	smpsAlterNote       $06
00096864 E701                       	dc.b	smpsNoAttack, $01
00096866 E10A                       	smpsAlterNote       $0A
00096868 E701                       	dc.b	smpsNoAttack, $01
0009686A E10D                       	smpsAlterNote       $0D
0009686C E701                       	dc.b	smpsNoAttack, $01
0009686E E111                       	smpsAlterNote       $11
00096870 E701                       	dc.b	smpsNoAttack, $01
00096872 E10D                       	smpsAlterNote       $0D
00096874 E701                       	dc.b	smpsNoAttack, $01
00096876 E10F                       	smpsAlterNote       $0F
00096878 BA0E                       	dc.b	nA4, $0E
0009687A E109                       	smpsAlterNote       $09
0009687C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096880 E10F                       	smpsAlterNote       $0F
00096882 E701                       	dc.b	smpsNoAttack, $01
00096884 E112                       	smpsAlterNote       $12
00096886 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009688A E10C                       	smpsAlterNote       $0C
0009688C E701                       	dc.b	smpsNoAttack, $01
0009688E E108                       	smpsAlterNote       $08
00096890 E701                       	dc.b	smpsNoAttack, $01
00096892 E109                       	smpsAlterNote       $09
00096894 E701                       	dc.b	smpsNoAttack, $01
00096896 E10F                       	smpsAlterNote       $0F
00096898 E701                       	dc.b	smpsNoAttack, $01
0009689A E113                       	smpsAlterNote       $13
0009689C E701                       	dc.b	smpsNoAttack, $01
0009689E E10F                       	smpsAlterNote       $0F
000968A0 E701                       	dc.b	smpsNoAttack, $01
000968A2 E109                       	smpsAlterNote       $09
000968A4 E701                       	dc.b	smpsNoAttack, $01
000968A6 E108                       	smpsAlterNote       $08
000968A8 E701                       	dc.b	smpsNoAttack, $01
000968AA E10C                       	smpsAlterNote       $0C
000968AC E701                       	dc.b	smpsNoAttack, $01
000968AE E112                       	smpsAlterNote       $12
000968B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968B4 E10F                       	smpsAlterNote       $0F
000968B6 E701                       	dc.b	smpsNoAttack, $01
000968B8 E109                       	smpsAlterNote       $09
000968BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968BE E10F                       	smpsAlterNote       $0F
000968C0 E701                       	dc.b	smpsNoAttack, $01
000968C2 E112                       	smpsAlterNote       $12
000968C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968C8 E10C                       	smpsAlterNote       $0C
000968CA E701                       	dc.b	smpsNoAttack, $01
000968CC E108                       	smpsAlterNote       $08
000968CE E701                       	dc.b	smpsNoAttack, $01
000968D0 E109                       	smpsAlterNote       $09
000968D2 E701                       	dc.b	smpsNoAttack, $01
000968D4 E10F                       	smpsAlterNote       $0F
000968D6 E701                       	dc.b	smpsNoAttack, $01
000968D8 E113                       	smpsAlterNote       $13
000968DA E701                       	dc.b	smpsNoAttack, $01
000968DC E10F                       	smpsAlterNote       $0F
000968DE E701                       	dc.b	smpsNoAttack, $01
000968E0 E10C                       	smpsAlterNote       $0C
000968E2 E701                       	dc.b	smpsNoAttack, $01
000968E4 E108                       	smpsAlterNote       $08
000968E6 E701                       	dc.b	smpsNoAttack, $01
000968E8 E109                       	smpsAlterNote       $09
000968EA 8001                       	dc.b	nRst, $01
000968EC E10C                       	smpsAlterNote       $0C
000968EE B50A                       	dc.b	nE4, $0A
000968F0 E10D                       	smpsAlterNote       $0D
000968F2 B60D                       	dc.b	nF4, $0D
000968F4 E10A                       	smpsAlterNote       $0A
000968F6 E701                       	dc.b	smpsNoAttack, $01
000968F8 E106                       	smpsAlterNote       $06
000968FA E701                       	dc.b	smpsNoAttack, $01
000968FC E107                       	smpsAlterNote       $07
000968FE E701                       	dc.b	smpsNoAttack, $01
00096900 E10D                       	smpsAlterNote       $0D
00096902 E701                       	dc.b	smpsNoAttack, $01
00096904 E111                       	smpsAlterNote       $11
00096906 E701                       	dc.b	smpsNoAttack, $01
00096908 E10D                       	smpsAlterNote       $0D
0009690A E701                       	dc.b	smpsNoAttack, $01
0009690C E10A                       	smpsAlterNote       $0A
0009690E E701                       	dc.b	smpsNoAttack, $01
00096910 E106                       	smpsAlterNote       $06
00096912 E701                       	dc.b	smpsNoAttack, $01
00096914 E10A                       	smpsAlterNote       $0A
00096916 E701                       	dc.b	smpsNoAttack, $01
00096918 E110                       	smpsAlterNote       $10
0009691A E701                       	dc.b	smpsNoAttack, $01
0009691C E111                       	smpsAlterNote       $11
0009691E E701                       	dc.b	smpsNoAttack, $01
00096920 E10D                       	smpsAlterNote       $0D
00096922 B80D                       	dc.b	nG4, $0D
00096924 E10A                       	smpsAlterNote       $0A
00096926 E701                       	dc.b	smpsNoAttack, $01
00096928 E106                       	smpsAlterNote       $06
0009692A E701                       	dc.b	smpsNoAttack, $01
0009692C E107                       	smpsAlterNote       $07
0009692E E701                       	dc.b	smpsNoAttack, $01
00096930 E10D                       	smpsAlterNote       $0D
00096932 E701                       	dc.b	smpsNoAttack, $01
00096934 E111                       	smpsAlterNote       $11
00096936 E701                       	dc.b	smpsNoAttack, $01
00096938 E10D                       	smpsAlterNote       $0D
0009693A E701                       	dc.b	smpsNoAttack, $01
0009693C E10A                       	smpsAlterNote       $0A
0009693E E701                       	dc.b	smpsNoAttack, $01
00096940 E106                       	smpsAlterNote       $06
00096942 E701                       	dc.b	smpsNoAttack, $01
00096944 E10A                       	smpsAlterNote       $0A
00096946 E701                       	dc.b	smpsNoAttack, $01
00096948 E110                       	smpsAlterNote       $10
0009694A E701                       	dc.b	smpsNoAttack, $01
0009694C E111                       	smpsAlterNote       $11
0009694E E701                       	dc.b	smpsNoAttack, $01
00096950 E10D                       	smpsAlterNote       $0D
00096952 E701                       	dc.b	smpsNoAttack, $01
00096954 E107                       	smpsAlterNote       $07
00096956 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009695A E10A                       	smpsAlterNote       $0A
0009695C E701                       	dc.b	smpsNoAttack, $01
0009695E E110                       	smpsAlterNote       $10
00096960 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096964 E10D                       	smpsAlterNote       $0D
00096966 8001                       	dc.b	nRst, $01
00096968 E10F                       	smpsAlterNote       $0F
0009696A BA0D                       	dc.b	nA4, $0D
0009696C E10C                       	smpsAlterNote       $0C
0009696E E701                       	dc.b	smpsNoAttack, $01
00096970 E108                       	smpsAlterNote       $08
00096972 E701                       	dc.b	smpsNoAttack, $01
00096974 E10C                       	smpsAlterNote       $0C
00096976 E701                       	dc.b	smpsNoAttack, $01
00096978 E112                       	smpsAlterNote       $12
0009697A E701                       	dc.b	smpsNoAttack, $01
0009697C E113                       	smpsAlterNote       $13
0009697E E701                       	dc.b	smpsNoAttack, $01
00096980 E10F                       	smpsAlterNote       $0F
00096982 E701                       	dc.b	smpsNoAttack, $01
00096984 E109                       	smpsAlterNote       $09
00096986 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009698A E10C                       	smpsAlterNote       $0C
0009698C E701                       	dc.b	smpsNoAttack, $01
0009698E E112                       	smpsAlterNote       $12
00096990 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096994 E10C                       	smpsAlterNote       $0C
00096996 E701                       	dc.b	smpsNoAttack, $01
00096998 E109                       	smpsAlterNote       $09
0009699A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009699E E10F                       	smpsAlterNote       $0F
000969A0 E701                       	dc.b	smpsNoAttack, $01
000969A2 E113                       	smpsAlterNote       $13
000969A4 E701                       	dc.b	smpsNoAttack, $01
000969A6 E112                       	smpsAlterNote       $12
000969A8 E701                       	dc.b	smpsNoAttack, $01
000969AA E10C                       	smpsAlterNote       $0C
000969AC E701                       	dc.b	smpsNoAttack, $01
000969AE E108                       	smpsAlterNote       $08
000969B0 E701                       	dc.b	smpsNoAttack, $01
000969B2 E10C                       	smpsAlterNote       $0C
000969B4 E701                       	dc.b	smpsNoAttack, $01
000969B6 E10F                       	smpsAlterNote       $0F
000969B8 E701                       	dc.b	smpsNoAttack, $01
000969BA E113                       	smpsAlterNote       $13
000969BC E701                       	dc.b	smpsNoAttack, $01
000969BE E10F                       	smpsAlterNote       $0F
000969C0 E701                       	dc.b	smpsNoAttack, $01
000969C2 E109                       	smpsAlterNote       $09
000969C4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000969C8 E10D                       	smpsAlterNote       $0D
000969CA B609 8001                  	dc.b	nF4, $09, nRst, $01
000969CE E10C                       	smpsAlterNote       $0C
000969D0 B506 8001                  	dc.b	nE4, $06, nRst, $01
000969D4 E10B                       	smpsAlterNote       $0B
000969D6 B30D                       	dc.b	nD4, $0D
000969D8 E10C                       	smpsAlterNote       $0C
000969DA B503 8001                  	dc.b	nE4, $03, nRst, $01
000969DE E10D                       	smpsAlterNote       $0D
000969E0 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
000969E8 E109                       	smpsAlterNote       $09
000969EA E701                       	dc.b	smpsNoAttack, $01
000969EC E108                       	smpsAlterNote       $08
000969EE E701                       	dc.b	smpsNoAttack, $01
000969F0 E10C                       	smpsAlterNote       $0C
000969F2 E701                       	dc.b	smpsNoAttack, $01
000969F4 E112                       	smpsAlterNote       $12
000969F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969FA E10F                       	smpsAlterNote       $0F
000969FC E701                       	dc.b	smpsNoAttack, $01
000969FE E109                       	smpsAlterNote       $09
00096A00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A04 E10F                       	smpsAlterNote       $0F
00096A06 E701                       	dc.b	smpsNoAttack, $01
00096A08 E112                       	smpsAlterNote       $12
00096A0A E701                       	dc.b	smpsNoAttack, $01
00096A0C E113                       	smpsAlterNote       $13
00096A0E 8001                       	dc.b	nRst, $01
00096A10 E10D                       	smpsAlterNote       $0D
00096A12 C20D                       	dc.b	nF5, $0D
00096A14 E107                       	smpsAlterNote       $07
00096A16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A1A E10A                       	smpsAlterNote       $0A
00096A1C E701                       	dc.b	smpsNoAttack, $01
00096A1E E110                       	smpsAlterNote       $10
00096A20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A24 E10A                       	smpsAlterNote       $0A
00096A26 E701                       	dc.b	smpsNoAttack, $01
00096A28 E107                       	smpsAlterNote       $07
00096A2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A2E E10D                       	smpsAlterNote       $0D
00096A30 E701                       	dc.b	smpsNoAttack, $01
00096A32 E111                       	smpsAlterNote       $11
00096A34 E701                       	dc.b	smpsNoAttack, $01
00096A36 E110                       	smpsAlterNote       $10
00096A38 E701                       	dc.b	smpsNoAttack, $01
00096A3A E10A                       	smpsAlterNote       $0A
00096A3C E701                       	dc.b	smpsNoAttack, $01
00096A3E E106                       	smpsAlterNote       $06
00096A40 E701                       	dc.b	smpsNoAttack, $01
00096A42 E10A                       	smpsAlterNote       $0A
00096A44 E701                       	dc.b	smpsNoAttack, $01
00096A46 E10D                       	smpsAlterNote       $0D
00096A48 E701                       	dc.b	smpsNoAttack, $01
00096A4A E111                       	smpsAlterNote       $11
00096A4C E701                       	dc.b	smpsNoAttack, $01
00096A4E E10D                       	smpsAlterNote       $0D
00096A50 E701                       	dc.b	smpsNoAttack, $01
00096A52 E107                       	smpsAlterNote       $07
00096A54 E701                       	dc.b	smpsNoAttack, $01
00096A56 E106                       	smpsAlterNote       $06
00096A58 E701                       	dc.b	smpsNoAttack, $01
00096A5A E10A                       	smpsAlterNote       $0A
00096A5C E701                       	dc.b	smpsNoAttack, $01
00096A5E E110                       	smpsAlterNote       $10
00096A60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A64 E10D                       	smpsAlterNote       $0D
00096A66 E701                       	dc.b	smpsNoAttack, $01
00096A68 E107                       	smpsAlterNote       $07
00096A6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A6E E10D                       	smpsAlterNote       $0D
00096A70 E701                       	dc.b	smpsNoAttack, $01
00096A72 E110                       	smpsAlterNote       $10
00096A74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A78 E10A                       	smpsAlterNote       $0A
00096A7A E701                       	dc.b	smpsNoAttack, $01
00096A7C E106                       	smpsAlterNote       $06
00096A7E E701                       	dc.b	smpsNoAttack, $01
00096A80 E107                       	smpsAlterNote       $07
00096A82 E701                       	dc.b	smpsNoAttack, $01
00096A84 E10D                       	smpsAlterNote       $0D
00096A86 E701                       	dc.b	smpsNoAttack, $01
00096A88 E111                       	smpsAlterNote       $11
00096A8A E701                       	dc.b	smpsNoAttack, $01
00096A8C E10D                       	smpsAlterNote       $0D
00096A8E E701                       	dc.b	smpsNoAttack, $01
00096A90 E10A                       	smpsAlterNote       $0A
00096A92 E701                       	dc.b	smpsNoAttack, $01
00096A94 E106                       	smpsAlterNote       $06
00096A96 E701                       	dc.b	smpsNoAttack, $01
00096A98 E10A                       	smpsAlterNote       $0A
00096A9A E701                       	dc.b	smpsNoAttack, $01
00096A9C E110                       	smpsAlterNote       $10
00096A9E E701                       	dc.b	smpsNoAttack, $01
00096AA0 E111                       	smpsAlterNote       $11
00096AA2 E701                       	dc.b	smpsNoAttack, $01
00096AA4 E10D                       	smpsAlterNote       $0D
00096AA6 E701                       	dc.b	smpsNoAttack, $01
00096AA8 E107                       	smpsAlterNote       $07
00096AAA E701                       	dc.b	smpsNoAttack, $01
00096AAC E10D                       	smpsAlterNote       $0D
00096AAE C207                       	dc.b	nF5, $07
00096AB0 E10C                       	smpsAlterNote       $0C
00096AB2 C10D                       	dc.b	nE5, $0D
00096AB4 E109                       	smpsAlterNote       $09
00096AB6 E701                       	dc.b	smpsNoAttack, $01
00096AB8 E106                       	smpsAlterNote       $06
00096ABA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096ABE E10C                       	smpsAlterNote       $0C
00096AC0 E701                       	dc.b	smpsNoAttack, $01
00096AC2 E110                       	smpsAlterNote       $10
00096AC4 E701                       	dc.b	smpsNoAttack, $01
00096AC6 E10F                       	smpsAlterNote       $0F
00096AC8 E701                       	dc.b	smpsNoAttack, $01
00096ACA E109                       	smpsAlterNote       $09
00096ACC E701                       	dc.b	smpsNoAttack, $01
00096ACE E105                       	smpsAlterNote       $05
00096AD0 E701                       	dc.b	smpsNoAttack, $01
00096AD2 E109                       	smpsAlterNote       $09
00096AD4 E701                       	dc.b	smpsNoAttack, $01
00096AD6 E10C                       	smpsAlterNote       $0C
00096AD8 E701                       	dc.b	smpsNoAttack, $01
00096ADA E110                       	smpsAlterNote       $10
00096ADC E701                       	dc.b	smpsNoAttack, $01
00096ADE E10B                       	smpsAlterNote       $0B
00096AE0 BF0D                       	dc.b	nD5, $0D
00096AE2 E108                       	smpsAlterNote       $08
00096AE4 E701                       	dc.b	smpsNoAttack, $01
00096AE6 E105                       	smpsAlterNote       $05
00096AE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AEC E10B                       	smpsAlterNote       $0B
00096AEE E701                       	dc.b	smpsNoAttack, $01
00096AF0 E10F                       	smpsAlterNote       $0F
00096AF2 E701                       	dc.b	smpsNoAttack, $01
00096AF4 E10E                       	smpsAlterNote       $0E
00096AF6 E701                       	dc.b	smpsNoAttack, $01
00096AF8 E108                       	smpsAlterNote       $08
00096AFA E701                       	dc.b	smpsNoAttack, $01
00096AFC E104                       	smpsAlterNote       $04
00096AFE E701                       	dc.b	smpsNoAttack, $01
00096B00 E108                       	smpsAlterNote       $08
00096B02 E701                       	dc.b	smpsNoAttack, $01
00096B04 E10E                       	smpsAlterNote       $0E
00096B06 E701                       	dc.b	smpsNoAttack, $01
00096B08 E10F                       	smpsAlterNote       $0F
00096B0A E701                       	dc.b	smpsNoAttack, $01
00096B0C E10B                       	smpsAlterNote       $0B
00096B0E E701                       	dc.b	smpsNoAttack, $01
00096B10 E105                       	smpsAlterNote       $05
00096B12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B16 E108                       	smpsAlterNote       $08
00096B18 E701                       	dc.b	smpsNoAttack, $01
00096B1A E10E                       	smpsAlterNote       $0E
00096B1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B20 E108                       	smpsAlterNote       $08
00096B22 E701                       	dc.b	smpsNoAttack, $01
00096B24 E105                       	smpsAlterNote       $05
00096B26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B2A E10B                       	smpsAlterNote       $0B
00096B2C E701                       	dc.b	smpsNoAttack, $01
00096B2E E10F                       	smpsAlterNote       $0F
00096B30 E701                       	dc.b	smpsNoAttack, $01
00096B32 E10E                       	smpsAlterNote       $0E
00096B34 E701                       	dc.b	smpsNoAttack, $01
00096B36 E108                       	smpsAlterNote       $08
00096B38 E701                       	dc.b	smpsNoAttack, $01
00096B3A E104                       	smpsAlterNote       $04
00096B3C E701                       	dc.b	smpsNoAttack, $01
00096B3E E108                       	smpsAlterNote       $08
00096B40 E701                       	dc.b	smpsNoAttack, $01
00096B42 E10B                       	smpsAlterNote       $0B
00096B44 E701                       	dc.b	smpsNoAttack, $01
00096B46 E10F                       	smpsAlterNote       $0F
00096B48 E701                       	dc.b	smpsNoAttack, $01
00096B4A E10B                       	smpsAlterNote       $0B
00096B4C E701                       	dc.b	smpsNoAttack, $01
00096B4E E105                       	smpsAlterNote       $05
00096B50 E701                       	dc.b	smpsNoAttack, $01
00096B52 E104                       	smpsAlterNote       $04
00096B54 E701                       	dc.b	smpsNoAttack, $01
00096B56 E108                       	smpsAlterNote       $08
00096B58 E701                       	dc.b	smpsNoAttack, $01
00096B5A E10E                       	smpsAlterNote       $0E
00096B5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B60 E10B                       	smpsAlterNote       $0B
00096B62 E701                       	dc.b	smpsNoAttack, $01
00096B64 E105                       	smpsAlterNote       $05
00096B66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B6A E10B                       	smpsAlterNote       $0B
00096B6C E701                       	dc.b	smpsNoAttack, $01
00096B6E E10E                       	smpsAlterNote       $0E
00096B70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B74 E108                       	smpsAlterNote       $08
00096B76 E701                       	dc.b	smpsNoAttack, $01
00096B78 E105                       	smpsAlterNote       $05
00096B7A 8001                       	dc.b	nRst, $01
00096B7E E601                       	smpsAlterVol        $01
00096B80 E10B                       	smpsAlterNote       $0B
00096B82 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00096B8E 8004                       	dc.b	nRst, $04
00096B92 E6FF                       	smpsAlterVol        $FF
00096B94 E10D                       	smpsAlterNote       $0D
00096B96 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
00096B9E E10C                       	smpsAlterNote       $0C
00096BA0 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00096BA5 E10D                       	smpsAlterNote       $0D
00096BA7 B60D                       	dc.b	nF4, $0D
00096BA9 E10A                       	smpsAlterNote       $0A
00096BAB E701                       	dc.b	smpsNoAttack, $01
00096BAD E106                       	smpsAlterNote       $06
00096BAF E701                       	dc.b	smpsNoAttack, $01
00096BB1 E10A                       	smpsAlterNote       $0A
00096BB3 E701                       	dc.b	smpsNoAttack, $01
00096BB5 E110                       	smpsAlterNote       $10
00096BB7 E701                       	dc.b	smpsNoAttack, $01
00096BB9 E111                       	smpsAlterNote       $11
00096BBB E701                       	dc.b	smpsNoAttack, $01
00096BBD E10D                       	smpsAlterNote       $0D
00096BBF E701                       	dc.b	smpsNoAttack, $01
00096BC1 E107                       	smpsAlterNote       $07
00096BC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BC7 E10A                       	smpsAlterNote       $0A
00096BC9 E701                       	dc.b	smpsNoAttack, $01
00096BCB E110                       	smpsAlterNote       $10
00096BCD E701                       	dc.b	smpsNoAttack, $01
00096BCF E111                       	smpsAlterNote       $11
00096BD1 8001                       	dc.b	nRst, $01
00096BD3 E10D                       	smpsAlterNote       $0D
00096BD5 B80D                       	dc.b	nG4, $0D
00096BD7 E10A                       	smpsAlterNote       $0A
00096BD9 E701                       	dc.b	smpsNoAttack, $01
00096BDB E106                       	smpsAlterNote       $06
00096BDD E701                       	dc.b	smpsNoAttack, $01
00096BDF E10A                       	smpsAlterNote       $0A
00096BE1 E701                       	dc.b	smpsNoAttack, $01
00096BE3 E110                       	smpsAlterNote       $10
00096BE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BE9 E10D                       	smpsAlterNote       $0D
00096BEB E701                       	dc.b	smpsNoAttack, $01
00096BED E107                       	smpsAlterNote       $07
00096BEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BF3 E10D                       	smpsAlterNote       $0D
00096BF5 E701                       	dc.b	smpsNoAttack, $01
00096BF7 E110                       	smpsAlterNote       $10
00096BF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BFD E10A                       	smpsAlterNote       $0A
00096BFF E701                       	dc.b	smpsNoAttack, $01
00096C01 E106                       	smpsAlterNote       $06
00096C03 E701                       	dc.b	smpsNoAttack, $01
00096C05 E107                       	smpsAlterNote       $07
00096C07 E701                       	dc.b	smpsNoAttack, $01
00096C09 E10D                       	smpsAlterNote       $0D
00096C0B E701                       	dc.b	smpsNoAttack, $01
00096C0D E111                       	smpsAlterNote       $11
00096C0F E701                       	dc.b	smpsNoAttack, $01
00096C11 E10D                       	smpsAlterNote       $0D
00096C13 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096C17 E10F                       	smpsAlterNote       $0F
00096C19 BA02 8001                  	dc.b	nA4, $02, nRst, $01
00096C1D E110                       	smpsAlterNote       $10
00096C1F BB03                       	dc.b	nBb4, $03
00096C21 E10F                       	smpsAlterNote       $0F
00096C23 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00096C29 E110                       	smpsAlterNote       $10
00096C2B C703 8001                  	dc.b	nBb5, $03, nRst, $01
00096C2F E10F                       	smpsAlterNote       $0F
00096C31 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00096C37 E110                       	smpsAlterNote       $10
00096C39 D302 8001                  	dc.b	nBb6, $02, nRst, $01
00096C3D E10F                       	smpsAlterNote       $0F
00096C3F D20D                       	dc.b	nA6, $0D
00096C41 E10C                       	smpsAlterNote       $0C
00096C43 E701                       	dc.b	smpsNoAttack, $01
00096C45 E108                       	smpsAlterNote       $08
00096C47 E701                       	dc.b	smpsNoAttack, $01
00096C49 E10C                       	smpsAlterNote       $0C
00096C4B E701                       	dc.b	smpsNoAttack, $01
00096C4D E10F                       	smpsAlterNote       $0F
00096C4F E701                       	dc.b	smpsNoAttack, $01
00096C51 E113                       	smpsAlterNote       $13
00096C53 E701                       	dc.b	smpsNoAttack, $01
00096C55 E10F                       	smpsAlterNote       $0F
00096C57 E701                       	dc.b	smpsNoAttack, $01
00096C59 E109                       	smpsAlterNote       $09
00096C5B E701                       	dc.b	smpsNoAttack, $01
00096C5D E108                       	smpsAlterNote       $08
00096C5F E701                       	dc.b	smpsNoAttack, $01
00096C61 E10C                       	smpsAlterNote       $0C
00096C63 E701                       	dc.b	smpsNoAttack, $01
00096C65 E112                       	smpsAlterNote       $12
00096C67 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C6B E10F                       	smpsAlterNote       $0F
00096C6D E701                       	dc.b	smpsNoAttack, $01
00096C6F E109                       	smpsAlterNote       $09
00096C71 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00096C77 E10D                       	smpsAlterNote       $0D
00096C79 CE07                       	dc.b	nF6, $07
00096C7B E10C                       	smpsAlterNote       $0C
00096C7D CD06 8001                  	dc.b	nE6, $06, nRst, $01
00096C81 E10D                       	smpsAlterNote       $0D
00096C83 CE03                       	dc.b	nF6, $03
00096C85 E10C                       	smpsAlterNote       $0C
00096C87 CC0D                       	dc.b	nEb6, $0D
00096C89 E109                       	smpsAlterNote       $09
00096C8B E701                       	dc.b	smpsNoAttack, $01
00096C8D E106                       	smpsAlterNote       $06
00096C8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C93 E10C                       	smpsAlterNote       $0C
00096C95 E701                       	dc.b	smpsNoAttack, $01
00096C97 E110                       	smpsAlterNote       $10
00096C99 E701                       	dc.b	smpsNoAttack, $01
00096C9B E10F                       	smpsAlterNote       $0F
00096C9D E701                       	dc.b	smpsNoAttack, $01
00096C9F E109                       	smpsAlterNote       $09
00096CA1 E701                       	dc.b	smpsNoAttack, $01
00096CA3 E105                       	smpsAlterNote       $05
00096CA5 E701                       	dc.b	smpsNoAttack, $01
00096CA7 E109                       	smpsAlterNote       $09
00096CA9 E701                       	dc.b	smpsNoAttack, $01
00096CAB E10C                       	smpsAlterNote       $0C
00096CAD E701                       	dc.b	smpsNoAttack, $01
00096CAF E110                       	smpsAlterNote       $10
00096CB1 E701                       	dc.b	smpsNoAttack, $01
00096CB3 E10C                       	smpsAlterNote       $0C
00096CB5 E701                       	dc.b	smpsNoAttack, $01
00096CB7 E106                       	smpsAlterNote       $06
00096CB9 E701                       	dc.b	smpsNoAttack, $01
00096CBB E105                       	smpsAlterNote       $05
00096CBD E701                       	dc.b	smpsNoAttack, $01
00096CBF E109                       	smpsAlterNote       $09
00096CC1 E701                       	dc.b	smpsNoAttack, $01
00096CC3 E10F                       	smpsAlterNote       $0F
00096CC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CC9 E10C                       	smpsAlterNote       $0C
00096CCB E701                       	dc.b	smpsNoAttack, $01
00096CCD E10B                       	smpsAlterNote       $0B
00096CCF CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
00096CD9 E10F                       	smpsAlterNote       $0F
00096CDB C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00096CE5 E10D                       	smpsAlterNote       $0D
00096CE7 C203                       	dc.b	nF5, $03
00096CE9 E10C                       	smpsAlterNote       $0C
00096CEB C103 8001                  	dc.b	nE5, $03, nRst, $01
00096CEF E10D                       	smpsAlterNote       $0D
00096CF1 C20D                       	dc.b	nF5, $0D
00096CF3 E10C                       	smpsAlterNote       $0C
00096CF5 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
00096CF9 E10B                       	smpsAlterNote       $0B
00096CFB BF0D                       	dc.b	nD5, $0D
00096CFD E108                       	smpsAlterNote       $08
00096CFF E701                       	dc.b	smpsNoAttack, $01
00096D01 E104                       	smpsAlterNote       $04
00096D03 E701                       	dc.b	smpsNoAttack, $01
00096D05 E108                       	smpsAlterNote       $08
00096D07 E701                       	dc.b	smpsNoAttack, $01
00096D09 E10E                       	smpsAlterNote       $0E
00096D0B E701                       	dc.b	smpsNoAttack, $01
00096D0D E10F                       	smpsAlterNote       $0F
00096D0F E701                       	dc.b	smpsNoAttack, $01
00096D11 E10B                       	smpsAlterNote       $0B
00096D13 E701                       	dc.b	smpsNoAttack, $01
00096D15 E105                       	smpsAlterNote       $05
00096D17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D1B E108                       	smpsAlterNote       $08
00096D1D E701                       	dc.b	smpsNoAttack, $01
00096D1F E10E                       	smpsAlterNote       $0E
00096D21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D25 E108                       	smpsAlterNote       $08
00096D27 E701                       	dc.b	smpsNoAttack, $01
00096D29 E105                       	smpsAlterNote       $05
00096D2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D2F E10B                       	smpsAlterNote       $0B
00096D31 E701                       	dc.b	smpsNoAttack, $01
00096D33 E10F                       	smpsAlterNote       $0F
00096D35 E701                       	dc.b	smpsNoAttack, $01
00096D37 E10E                       	smpsAlterNote       $0E
00096D39 E701                       	dc.b	smpsNoAttack, $01
00096D3B E108                       	smpsAlterNote       $08
00096D3D E701                       	dc.b	smpsNoAttack, $01
00096D3F E104                       	smpsAlterNote       $04
00096D41 E701                       	dc.b	smpsNoAttack, $01
00096D43 E108                       	smpsAlterNote       $08
00096D45 E701                       	dc.b	smpsNoAttack, $01
00096D47 E10B                       	smpsAlterNote       $0B
00096D49 E701                       	dc.b	smpsNoAttack, $01
00096D4B E10F                       	smpsAlterNote       $0F
00096D4D E701                       	dc.b	smpsNoAttack, $01
00096D4F E10B                       	smpsAlterNote       $0B
00096D51 E701                       	dc.b	smpsNoAttack, $01
00096D53 E105                       	smpsAlterNote       $05
00096D55 E701                       	dc.b	smpsNoAttack, $01
00096D57 E104                       	smpsAlterNote       $04
00096D59 E701                       	dc.b	smpsNoAttack, $01
00096D5B E108                       	smpsAlterNote       $08
00096D5D E701                       	dc.b	smpsNoAttack, $01
00096D5F E10E                       	smpsAlterNote       $0E
00096D61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D65 E10B                       	smpsAlterNote       $0B
00096D67 E701                       	dc.b	smpsNoAttack, $01
00096D69 E105                       	smpsAlterNote       $05
00096D6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D6F E10B                       	smpsAlterNote       $0B
00096D71 E701                       	dc.b	smpsNoAttack, $01
00096D73 E10E                       	smpsAlterNote       $0E
00096D75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D79 E108                       	smpsAlterNote       $08
00096D7B E701                       	dc.b	smpsNoAttack, $01
00096D7D E104                       	smpsAlterNote       $04
00096D7F E701                       	dc.b	smpsNoAttack, $01
00096D81 E105                       	smpsAlterNote       $05
00096D83 E701                       	dc.b	smpsNoAttack, $01
00096D85 E10B                       	smpsAlterNote       $0B
00096D87 E701                       	dc.b	smpsNoAttack, $01
00096D89 E10F                       	smpsAlterNote       $0F
00096D8B E701                       	dc.b	smpsNoAttack, $01
00096D8D E10B                       	smpsAlterNote       $0B
00096D8F E701                       	dc.b	smpsNoAttack, $01
00096D91 E108                       	smpsAlterNote       $08
00096D93 E701                       	dc.b	smpsNoAttack, $01
00096D95 E104                       	smpsAlterNote       $04
00096D97 E701                       	dc.b	smpsNoAttack, $01
00096D99 E108                       	smpsAlterNote       $08
00096D9B E701                       	dc.b	smpsNoAttack, $01
00096D9D E10E                       	smpsAlterNote       $0E
00096D9F E701                       	dc.b	smpsNoAttack, $01
00096DA1 E10F                       	smpsAlterNote       $0F
00096DA3 E701                       	dc.b	smpsNoAttack, $01
00096DA5 E10B                       	smpsAlterNote       $0B
00096DA7 E701                       	dc.b	smpsNoAttack, $01
00096DA9 E105                       	smpsAlterNote       $05
00096DAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DAF E108                       	smpsAlterNote       $08
00096DB1 E701                       	dc.b	smpsNoAttack, $01
00096DB3 E10E                       	smpsAlterNote       $0E
00096DB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DB9 E108                       	smpsAlterNote       $08
00096DBB E701                       	dc.b	smpsNoAttack, $01
00096DBD E105                       	smpsAlterNote       $05
00096DBF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DC3 E10B                       	smpsAlterNote       $0B
00096DC5 E701                       	dc.b	smpsNoAttack, $01
00096DC7 E10F                       	smpsAlterNote       $0F
00096DC9 E701                       	dc.b	smpsNoAttack, $01
00096DCB E10E                       	smpsAlterNote       $0E
00096DCD E701                       	dc.b	smpsNoAttack, $01
00096DCF E108                       	smpsAlterNote       $08
00096DD1 E701                       	dc.b	smpsNoAttack, $01
00096DD3 E104                       	smpsAlterNote       $04
00096DD5 E701                       	dc.b	smpsNoAttack, $01
00096DD7 E108                       	smpsAlterNote       $08
00096DD9 E701                       	dc.b	smpsNoAttack, $01
00096DDB E10B                       	smpsAlterNote       $0B
00096DDD E701                       	dc.b	smpsNoAttack, $01
00096DDF E10F                       	smpsAlterNote       $0F
00096DE1 E701                       	dc.b	smpsNoAttack, $01
00096DE3 E10B                       	smpsAlterNote       $0B
00096DE5 E701                       	dc.b	smpsNoAttack, $01
00096DE7 E105                       	smpsAlterNote       $05
00096DE9 E701                       	dc.b	smpsNoAttack, $01
00096DEB E104                       	smpsAlterNote       $04
00096DED E701                       	dc.b	smpsNoAttack, $01
00096DEF E105                       	smpsAlterNote       $05
00096DF1 8001                       	dc.b	nRst, $01
00096DF3 E10D                       	smpsAlterNote       $0D
00096DF5 C20D                       	dc.b	nF5, $0D
00096DF7 E107                       	smpsAlterNote       $07
00096DF9 E701                       	dc.b	smpsNoAttack, $01
00096DFB E106                       	smpsAlterNote       $06
00096DFD E701                       	dc.b	smpsNoAttack, $01
00096DFF E10A                       	smpsAlterNote       $0A
00096E01 E701                       	dc.b	smpsNoAttack, $01
00096E03 E110                       	smpsAlterNote       $10
00096E05 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E09 E10D                       	smpsAlterNote       $0D
00096E0B E701                       	dc.b	smpsNoAttack, $01
00096E0D E107                       	smpsAlterNote       $07
00096E0F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E13 E10D                       	smpsAlterNote       $0D
00096E15 E701                       	dc.b	smpsNoAttack, $01
00096E17 E110                       	smpsAlterNote       $10
00096E19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E1D E10A                       	smpsAlterNote       $0A
00096E1F E701                       	dc.b	smpsNoAttack, $01
00096E21 E106                       	smpsAlterNote       $06
00096E23 E701                       	dc.b	smpsNoAttack, $01
00096E25 E107                       	smpsAlterNote       $07
00096E27 E701                       	dc.b	smpsNoAttack, $01
00096E29 E10D                       	smpsAlterNote       $0D
00096E2B E701                       	dc.b	smpsNoAttack, $01
00096E2D E111                       	smpsAlterNote       $11
00096E2F E701                       	dc.b	smpsNoAttack, $01
00096E31 E10D                       	smpsAlterNote       $0D
00096E33 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096E37 E10C                       	smpsAlterNote       $0C
00096E39 C10D                       	dc.b	nE5, $0D
00096E3B E10D                       	smpsAlterNote       $0D
00096E3D C20A                       	dc.b	nF5, $0A
00096E3F E10C                       	smpsAlterNote       $0C
00096E41 C10E                       	dc.b	nE5, $0E
00096E43 E106                       	smpsAlterNote       $06
00096E45 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E49 E10C                       	smpsAlterNote       $0C
00096E4B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096E4F E10B                       	smpsAlterNote       $0B
00096E51 BF0D                       	dc.b	nD5, $0D
00096E53 E10C                       	smpsAlterNote       $0C
00096E55 C107                       	dc.b	nE5, $07
00096E57 E10D                       	smpsAlterNote       $0D
00096E59 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
00096E63 E110                       	smpsAlterNote       $10
00096E65 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00096E6B E10F                       	smpsAlterNote       $0F
00096E6D C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00096E75 E10D                       	smpsAlterNote       $0D
00096E77 D003                       	dc.b	nG6, $03
00096E7B E0C0                       	smpsPan             panCenter, $00
00096E7D E6FF                       	smpsAlterVol        $FF
00096E7F AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
00096E8B 8001                       	dc.b	nRst, $01
00096E8D E10C                       	smpsAlterNote       $0C
00096E8F A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
00096E99 E604                       	smpsAlterVol        $04
00096E9B E10B                       	smpsAlterNote       $0B
00096E9D B306 8001                  	dc.b	nD4, $06, nRst, $01
00096EA1 E10F                       	smpsAlterNote       $0F
00096EA3 AE03                       	dc.b	nA3, $03
00096EA5 E10D                       	smpsAlterNote       $0D
00096EA7 B603 8001                  	dc.b	nF4, $03, nRst, $01
00096EAB E10C                       	smpsAlterNote       $0C
00096EAD B506 8001                  	dc.b	nE4, $06, nRst, $01
00096EB1 E10B                       	smpsAlterNote       $0B
00096EB3 B302 8001                  	dc.b	nD4, $02, nRst, $01
00096EB7 E10A                       	smpsAlterNote       $0A
00096EB9 B103                       	dc.b	nC4, $03
00096EBB E110                       	smpsAlterNote       $10
00096EBD AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00096EC1 E10F                       	smpsAlterNote       $0F
00096EC3 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
00096EC7 E080                       	smpsPan             panLeft, $00
00096EC9 01                         	dc.b	$01
00096ECC E6FB                       	smpsAlterVol        $FB
00096ECE E1E4                       	smpsAlterNote       $E4
00096ED0 C501                       	dc.b	nAb5, $01
00096ED2 E1F4                       	smpsAlterNote       $F4
00096ED4 E701                       	dc.b	smpsNoAttack, $01
00096ED6 E104                       	smpsAlterNote       $04
00096ED8 E701                       	dc.b	smpsNoAttack, $01
00096EDA E114                       	smpsAlterNote       $14
00096EDC E701                       	dc.b	smpsNoAttack, $01
00096EDE E11C                       	smpsAlterNote       $1C
00096EE0 E701                       	dc.b	smpsNoAttack, $01
00096EE2 E1EF                       	smpsAlterNote       $EF
00096EE4 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00096EE7 E1FF                       	smpsAlterNote       $FF
00096EE9 E701                       	dc.b	smpsNoAttack, $01
00096EEB E10F                       	smpsAlterNote       $0F
00096EED C606                       	dc.b	nA5, $06
00096EEF E109                       	smpsAlterNote       $09
00096EF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EF5 E10F                       	smpsAlterNote       $0F
00096EF7 E701                       	dc.b	smpsNoAttack, $01
00096EF9 E112                       	smpsAlterNote       $12
00096EFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EFF E10C                       	smpsAlterNote       $0C
00096F01 E701                       	dc.b	smpsNoAttack, $01
00096F03 E108                       	smpsAlterNote       $08
00096F05 E701                       	dc.b	smpsNoAttack, $01
00096F07 E109                       	smpsAlterNote       $09
00096F09 E701                       	dc.b	smpsNoAttack, $01
00096F0B E10F                       	smpsAlterNote       $0F
00096F0D E701                       	dc.b	smpsNoAttack, $01
00096F0F E113                       	smpsAlterNote       $13
00096F11 E701                       	dc.b	smpsNoAttack, $01
00096F13 E10F                       	smpsAlterNote       $0F
00096F15 E701                       	dc.b	smpsNoAttack, $01
00096F17 E10C                       	smpsAlterNote       $0C
00096F19 E701                       	dc.b	smpsNoAttack, $01
00096F1B E108                       	smpsAlterNote       $08
00096F1D E701                       	dc.b	smpsNoAttack, $01
00096F1F E10C                       	smpsAlterNote       $0C
00096F21 E701                       	dc.b	smpsNoAttack, $01
00096F23 E112                       	smpsAlterNote       $12
00096F25 E701                       	dc.b	smpsNoAttack, $01
00096F27 E113                       	smpsAlterNote       $13
00096F29 E701                       	dc.b	smpsNoAttack, $01
00096F2B E10F                       	smpsAlterNote       $0F
00096F2D E701                       	dc.b	smpsNoAttack, $01
00096F2F E109                       	smpsAlterNote       $09
00096F31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F35 E10C                       	smpsAlterNote       $0C
00096F37 E701                       	dc.b	smpsNoAttack, $01
00096F39 E112                       	smpsAlterNote       $12
00096F3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F3F E10C                       	smpsAlterNote       $0C
00096F41 E701                       	dc.b	smpsNoAttack, $01
00096F43 E109                       	smpsAlterNote       $09
00096F45 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F49 E10F                       	smpsAlterNote       $0F
00096F4B E701                       	dc.b	smpsNoAttack, $01
00096F4D E113                       	smpsAlterNote       $13
00096F4F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096F53 E10D                       	smpsAlterNote       $0D
00096F55 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00096F5B E10C                       	smpsAlterNote       $0C
00096F5D C102 8001                  	dc.b	nE5, $02, nRst, $01
00096F61 E10D                       	smpsAlterNote       $0D
00096F63 C201 8001                  	dc.b	nF5, $01, nRst, $01
00096F67 E10C                       	smpsAlterNote       $0C
00096F69 C102                       	dc.b	nE5, $02
00096F6B E10B                       	smpsAlterNote       $0B
00096F6D BF02 8001                  	dc.b	nD5, $02, nRst, $01
00096F71 E10C                       	smpsAlterNote       $0C
00096F73 C101 8001                  	dc.b	nE5, $01, nRst, $01
00096F77 E10B                       	smpsAlterNote       $0B
00096F79 BF02                       	dc.b	nD5, $02
00096F7B E10A                       	smpsAlterNote       $0A
00096F7D BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
00096F87 E110                       	smpsAlterNote       $10
00096F89 BB02                       	dc.b	nBb4, $02
00096F8B E10A                       	smpsAlterNote       $0A
00096F8D BD02 8001                  	dc.b	nC5, $02, nRst, $01
00096F91 E110                       	smpsAlterNote       $10
00096F93 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00096F97 E10F                       	smpsAlterNote       $0F
00096F99 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00096F9D E110                       	smpsAlterNote       $10
00096F9F BB02                       	dc.b	nBb4, $02
00096FA1 E10F                       	smpsAlterNote       $0F
00096FA3 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00096FAD E10C                       	smpsAlterNote       $0C
00096FAF B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
00096FB7 E10B                       	smpsAlterNote       $0B
00096FB9 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
00096FBD E10F                       	smpsAlterNote       $0F
00096FBF BA02                       	dc.b	nA4, $02
00096FC3 E0C0                       	smpsPan             panCenter, $00
00096FC5 E601                       	smpsAlterVol        $01
00096FC7 E109                       	smpsAlterNote       $09
00096FC9 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
00096FD5 E108                       	smpsAlterNote       $08
00096FD7 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
00096FDD E107                       	smpsAlterNote       $07
00096FDF B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
00096FE5 E109                       	smpsAlterNote       $09
00096FE7 B603 8001                  	dc.b	nF4, $03, nRst, $01
00096FEB E108                       	smpsAlterNote       $08
00096FED B506 8001                  	dc.b	nE4, $06, nRst, $01
00096FF1 E107                       	smpsAlterNote       $07
00096FF3 B302 8001                  	dc.b	nD4, $02, nRst, $01
00096FF7 E106                       	smpsAlterNote       $06
00096FF9 B103                       	dc.b	nC4, $03
00096FFB E10C                       	smpsAlterNote       $0C
00096FFD AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00097003 E080                       	smpsPan             panLeft, $00
00097005 07                         	dc.b	$07
00097006 E6FE                       	smpsAlterVol        $FE
00097008 E10B                       	smpsAlterNote       $0B
0009700A B20D                       	dc.b	nCs4, $0D
0009700C E105                       	smpsAlterNote       $05
0009700E E701                       	dc.b	smpsNoAttack, $01
00097010 E104                       	smpsAlterNote       $04
00097012 E701                       	dc.b	smpsNoAttack, $01
00097014 E108                       	smpsAlterNote       $08
00097016 E701                       	dc.b	smpsNoAttack, $01
00097018 E10E                       	smpsAlterNote       $0E
0009701A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009701E E10B                       	smpsAlterNote       $0B
00097020 E701                       	dc.b	smpsNoAttack, $01
00097022 E105                       	smpsAlterNote       $05
00097024 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097028 E10B                       	smpsAlterNote       $0B
0009702A E701                       	dc.b	smpsNoAttack, $01
0009702C E10E                       	smpsAlterNote       $0E
0009702E E701                       	dc.b	smpsNoAttack, $01
00097030 E10F                       	smpsAlterNote       $0F
00097032 8001                       	dc.b	nRst, $01
00097034 E10B                       	smpsAlterNote       $0B
00097036 B30D                       	dc.b	nD4, $0D
00097038 E105                       	smpsAlterNote       $05
0009703A E701                       	dc.b	smpsNoAttack, $01
0009703C E104                       	smpsAlterNote       $04
0009703E E701                       	dc.b	smpsNoAttack, $01
00097040 E108                       	smpsAlterNote       $08
00097042 E701                       	dc.b	smpsNoAttack, $01
00097044 E10E                       	smpsAlterNote       $0E
00097046 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009704A E10B                       	smpsAlterNote       $0B
0009704C E701                       	dc.b	smpsNoAttack, $01
0009704E E105                       	smpsAlterNote       $05
00097050 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097054 E10B                       	smpsAlterNote       $0B
00097056 E701                       	dc.b	smpsNoAttack, $01
00097058 E10E                       	smpsAlterNote       $0E
0009705A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009705E E108                       	smpsAlterNote       $08
00097060 E701                       	dc.b	smpsNoAttack, $01
00097062 E104                       	smpsAlterNote       $04
00097064 E701                       	dc.b	smpsNoAttack, $01
00097066 E105                       	smpsAlterNote       $05
00097068 E701                       	dc.b	smpsNoAttack, $01
0009706A E10B                       	smpsAlterNote       $0B
0009706C E701                       	dc.b	smpsNoAttack, $01
0009706E E10F                       	smpsAlterNote       $0F
00097070 E701                       	dc.b	smpsNoAttack, $01
00097072 E10B                       	smpsAlterNote       $0B
00097074 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097078 E10C                       	smpsAlterNote       $0C
0009707A B50D                       	dc.b	nE4, $0D
0009707C E106                       	smpsAlterNote       $06
0009707E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097082 E10C                       	smpsAlterNote       $0C
00097084 E701                       	dc.b	smpsNoAttack, $01
00097086 E10F                       	smpsAlterNote       $0F
00097088 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009708C E109                       	smpsAlterNote       $09
0009708E E701                       	dc.b	smpsNoAttack, $01
00097090 E105                       	smpsAlterNote       $05
00097092 E701                       	dc.b	smpsNoAttack, $01
00097094 E106                       	smpsAlterNote       $06
00097096 E701                       	dc.b	smpsNoAttack, $01
00097098 E10C                       	smpsAlterNote       $0C
0009709A E701                       	dc.b	smpsNoAttack, $01
0009709C E110                       	smpsAlterNote       $10
0009709E E701                       	dc.b	smpsNoAttack, $01
000970A0 E10B                       	smpsAlterNote       $0B
000970A2 B30E                       	dc.b	nD4, $0E
000970A4 E105                       	smpsAlterNote       $05
000970A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970AA E10B                       	smpsAlterNote       $0B
000970AC E701                       	dc.b	smpsNoAttack, $01
000970AE E10E                       	smpsAlterNote       $0E
000970B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970B4 E108                       	smpsAlterNote       $08
000970B6 E701                       	dc.b	smpsNoAttack, $01
000970B8 E104                       	smpsAlterNote       $04
000970BA E701                       	dc.b	smpsNoAttack, $01
000970BC E105                       	smpsAlterNote       $05
000970BE E701                       	dc.b	smpsNoAttack, $01
000970C0 E10B                       	smpsAlterNote       $0B
000970C2 E701                       	dc.b	smpsNoAttack, $01
000970C4 E10F                       	smpsAlterNote       $0F
000970C6 E701                       	dc.b	smpsNoAttack, $01
000970C8 E10B                       	smpsAlterNote       $0B
000970CA E701                       	dc.b	smpsNoAttack, $01
000970CC E108                       	smpsAlterNote       $08
000970CE E701                       	dc.b	smpsNoAttack, $01
000970D0 E104                       	smpsAlterNote       $04
000970D2 E701                       	dc.b	smpsNoAttack, $01
000970D4 E108                       	smpsAlterNote       $08
000970D6 E701                       	dc.b	smpsNoAttack, $01
000970D8 E10E                       	smpsAlterNote       $0E
000970DA E701                       	dc.b	smpsNoAttack, $01
000970DC E10F                       	smpsAlterNote       $0F
000970DE E701                       	dc.b	smpsNoAttack, $01
000970E0 E10B                       	smpsAlterNote       $0B
000970E2 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000970E6 E108                       	smpsAlterNote       $08
000970E8 E701                       	dc.b	smpsNoAttack, $01
000970EA E105                       	smpsAlterNote       $05
000970EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970F0 E10B                       	smpsAlterNote       $0B
000970F2 E701                       	dc.b	smpsNoAttack, $01
000970F4 E10F                       	smpsAlterNote       $0F
000970F6 E701                       	dc.b	smpsNoAttack, $01
000970F8 E10E                       	smpsAlterNote       $0E
000970FA E701                       	dc.b	smpsNoAttack, $01
000970FC E108                       	smpsAlterNote       $08
000970FE E701                       	dc.b	smpsNoAttack, $01
00097100 E104                       	smpsAlterNote       $04
00097102 E701                       	dc.b	smpsNoAttack, $01
00097104 E108                       	smpsAlterNote       $08
00097106 E701                       	dc.b	smpsNoAttack, $01
00097108 E10B                       	smpsAlterNote       $0B
0009710A E701                       	dc.b	smpsNoAttack, $01
0009710C E10F                       	smpsAlterNote       $0F
0009710E E701                       	dc.b	smpsNoAttack, $01
00097110 E10B                       	smpsAlterNote       $0B
00097112 B30D                       	dc.b	nD4, $0D
00097114 E108                       	smpsAlterNote       $08
00097116 E701                       	dc.b	smpsNoAttack, $01
00097118 E105                       	smpsAlterNote       $05
0009711A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009711E E10B                       	smpsAlterNote       $0B
00097120 E701                       	dc.b	smpsNoAttack, $01
00097122 E10F                       	smpsAlterNote       $0F
00097124 E701                       	dc.b	smpsNoAttack, $01
00097126 E10E                       	smpsAlterNote       $0E
00097128 E701                       	dc.b	smpsNoAttack, $01
0009712A E108                       	smpsAlterNote       $08
0009712C E701                       	dc.b	smpsNoAttack, $01
0009712E E104                       	smpsAlterNote       $04
00097130 E701                       	dc.b	smpsNoAttack, $01
00097132 E108                       	smpsAlterNote       $08
00097134 E701                       	dc.b	smpsNoAttack, $01
00097136 E10B                       	smpsAlterNote       $0B
00097138 E701                       	dc.b	smpsNoAttack, $01
0009713A E10F                       	smpsAlterNote       $0F
0009713C E701                       	dc.b	smpsNoAttack, $01
0009713E E10B                       	smpsAlterNote       $0B
00097140 E701                       	dc.b	smpsNoAttack, $01
00097142 E105                       	smpsAlterNote       $05
00097144 E701                       	dc.b	smpsNoAttack, $01
00097146 E104                       	smpsAlterNote       $04
00097148 E701                       	dc.b	smpsNoAttack, $01
0009714A E108                       	smpsAlterNote       $08
0009714C E701                       	dc.b	smpsNoAttack, $01
0009714E E10E                       	smpsAlterNote       $0E
00097150 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097154 E10B                       	smpsAlterNote       $0B
00097156 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0009715A E108                       	smpsAlterNote       $08
0009715C E701                       	dc.b	smpsNoAttack, $01
0009715E E104                       	smpsAlterNote       $04
00097160 E701                       	dc.b	smpsNoAttack, $01
00097162 E108                       	smpsAlterNote       $08
00097164 E701                       	dc.b	smpsNoAttack, $01
00097166 E10B                       	smpsAlterNote       $0B
00097168 E701                       	dc.b	smpsNoAttack, $01
0009716C E0C0                       	smpsPan             panCenter, $00
0009716E E601                       	smpsAlterVol        $01
00097170 E108                       	smpsAlterNote       $08
00097172 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0009717E 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
00097186 E080                       	smpsPan             panLeft, $00
00097188 07                         	dc.b	$07
00097189 E6FF                       	smpsAlterVol        $FF
0009718B E10D                       	smpsAlterNote       $0D
0009718D B60D                       	dc.b	nF4, $0D
0009718F E10A                       	smpsAlterNote       $0A
00097191 E701                       	dc.b	smpsNoAttack, $01
00097193 E106                       	smpsAlterNote       $06
00097195 E701                       	dc.b	smpsNoAttack, $01
00097197 E10A                       	smpsAlterNote       $0A
00097199 E701                       	dc.b	smpsNoAttack, $01
0009719B E110                       	smpsAlterNote       $10
0009719D E701                       	dc.b	smpsNoAttack, $01
0009719F E111                       	smpsAlterNote       $11
000971A1 E701                       	dc.b	smpsNoAttack, $01
000971A3 E10D                       	smpsAlterNote       $0D
000971A5 E701                       	dc.b	smpsNoAttack, $01
000971A7 E107                       	smpsAlterNote       $07
000971A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971AD E10A                       	smpsAlterNote       $0A
000971AF E701                       	dc.b	smpsNoAttack, $01
000971B1 E110                       	smpsAlterNote       $10
000971B3 E701                       	dc.b	smpsNoAttack, $01
000971B5 E111                       	smpsAlterNote       $11
000971B7 8001                       	dc.b	nRst, $01
000971B9 E10D                       	smpsAlterNote       $0D
000971BB B80D                       	dc.b	nG4, $0D
000971BD E10A                       	smpsAlterNote       $0A
000971BF E701                       	dc.b	smpsNoAttack, $01
000971C1 E106                       	smpsAlterNote       $06
000971C3 E701                       	dc.b	smpsNoAttack, $01
000971C5 E10A                       	smpsAlterNote       $0A
000971C7 E701                       	dc.b	smpsNoAttack, $01
000971C9 E110                       	smpsAlterNote       $10
000971CB E701                       	dc.b	smpsNoAttack, $01
000971CD E111                       	smpsAlterNote       $11
000971CF E701                       	dc.b	smpsNoAttack, $01
000971D1 E10D                       	smpsAlterNote       $0D
000971D3 E701                       	dc.b	smpsNoAttack, $01
000971D5 E107                       	smpsAlterNote       $07
000971D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971DB E10D                       	smpsAlterNote       $0D
000971DD E701                       	dc.b	smpsNoAttack, $01
000971DF E110                       	smpsAlterNote       $10
000971E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971E5 E10A                       	smpsAlterNote       $0A
000971E7 E701                       	dc.b	smpsNoAttack, $01
000971E9 E106                       	smpsAlterNote       $06
000971EB E701                       	dc.b	smpsNoAttack, $01
000971ED E107                       	smpsAlterNote       $07
000971EF E701                       	dc.b	smpsNoAttack, $01
000971F1 E10D                       	smpsAlterNote       $0D
000971F3 E701                       	dc.b	smpsNoAttack, $01
000971F5 E111                       	smpsAlterNote       $11
000971F7 E701                       	dc.b	smpsNoAttack, $01
000971F9 E10D                       	smpsAlterNote       $0D
000971FB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000971FF E10F                       	smpsAlterNote       $0F
00097201 BA0D                       	dc.b	nA4, $0D
00097203 E109                       	smpsAlterNote       $09
00097205 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097209 E10C                       	smpsAlterNote       $0C
0009720B E701                       	dc.b	smpsNoAttack, $01
0009720D E112                       	smpsAlterNote       $12
0009720F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097213 E10C                       	smpsAlterNote       $0C
00097215 E701                       	dc.b	smpsNoAttack, $01
00097217 E109                       	smpsAlterNote       $09
00097219 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009721D E10F                       	smpsAlterNote       $0F
0009721F E701                       	dc.b	smpsNoAttack, $01
00097221 E113                       	smpsAlterNote       $13
00097223 E701                       	dc.b	smpsNoAttack, $01
00097225 E112                       	smpsAlterNote       $12
00097227 E701                       	dc.b	smpsNoAttack, $01
00097229 E10C                       	smpsAlterNote       $0C
0009722B E701                       	dc.b	smpsNoAttack, $01
0009722D E108                       	smpsAlterNote       $08
0009722F E701                       	dc.b	smpsNoAttack, $01
00097231 E10C                       	smpsAlterNote       $0C
00097233 E701                       	dc.b	smpsNoAttack, $01
00097235 E10F                       	smpsAlterNote       $0F
00097237 E701                       	dc.b	smpsNoAttack, $01
00097239 E113                       	smpsAlterNote       $13
0009723B E701                       	dc.b	smpsNoAttack, $01
0009723D E10F                       	smpsAlterNote       $0F
0009723F E701                       	dc.b	smpsNoAttack, $01
00097241 E109                       	smpsAlterNote       $09
00097243 E701                       	dc.b	smpsNoAttack, $01
00097245 E108                       	smpsAlterNote       $08
00097247 E701                       	dc.b	smpsNoAttack, $01
00097249 E10C                       	smpsAlterNote       $0C
0009724B E701                       	dc.b	smpsNoAttack, $01
0009724D E112                       	smpsAlterNote       $12
0009724F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097253 E10F                       	smpsAlterNote       $0F
00097255 E701                       	dc.b	smpsNoAttack, $01
00097257 E109                       	smpsAlterNote       $09
00097259 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009725D E10F                       	smpsAlterNote       $0F
0009725F E701                       	dc.b	smpsNoAttack, $01
00097261 E112                       	smpsAlterNote       $12
00097263 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097267 E10C                       	smpsAlterNote       $0C
00097269 E701                       	dc.b	smpsNoAttack, $01
0009726B E108                       	smpsAlterNote       $08
0009726D E701                       	dc.b	smpsNoAttack, $01
0009726F E109                       	smpsAlterNote       $09
00097271 E701                       	dc.b	smpsNoAttack, $01
00097273 E10C                       	smpsAlterNote       $0C
00097275 B50A                       	dc.b	nE4, $0A
00097277 E10D                       	smpsAlterNote       $0D
00097279 B60E                       	dc.b	nF4, $0E
0009727B E107                       	smpsAlterNote       $07
0009727D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097281 E10D                       	smpsAlterNote       $0D
00097283 E701                       	dc.b	smpsNoAttack, $01
00097285 E110                       	smpsAlterNote       $10
00097287 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009728B E10A                       	smpsAlterNote       $0A
0009728D E701                       	dc.b	smpsNoAttack, $01
0009728F E106                       	smpsAlterNote       $06
00097291 E701                       	dc.b	smpsNoAttack, $01
00097293 E107                       	smpsAlterNote       $07
00097295 E701                       	dc.b	smpsNoAttack, $01
00097297 E10D                       	smpsAlterNote       $0D
00097299 E701                       	dc.b	smpsNoAttack, $01
0009729B E111                       	smpsAlterNote       $11
0009729D E701                       	dc.b	smpsNoAttack, $01
0009729F E10D                       	smpsAlterNote       $0D
000972A1 B80D                       	dc.b	nG4, $0D
000972A3 E10A                       	smpsAlterNote       $0A
000972A5 E701                       	dc.b	smpsNoAttack, $01
000972A7 E107                       	smpsAlterNote       $07
000972A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972AD E10D                       	smpsAlterNote       $0D
000972AF E701                       	dc.b	smpsNoAttack, $01
000972B1 E111                       	smpsAlterNote       $11
000972B3 E701                       	dc.b	smpsNoAttack, $01
000972B5 E110                       	smpsAlterNote       $10
000972B7 E701                       	dc.b	smpsNoAttack, $01
000972B9 E10A                       	smpsAlterNote       $0A
000972BB E701                       	dc.b	smpsNoAttack, $01
000972BD E106                       	smpsAlterNote       $06
000972BF E701                       	dc.b	smpsNoAttack, $01
000972C1 E10A                       	smpsAlterNote       $0A
000972C3 E701                       	dc.b	smpsNoAttack, $01
000972C5 E10D                       	smpsAlterNote       $0D
000972C7 E701                       	dc.b	smpsNoAttack, $01
000972C9 E111                       	smpsAlterNote       $11
000972CB E701                       	dc.b	smpsNoAttack, $01
000972CD E10D                       	smpsAlterNote       $0D
000972CF E701                       	dc.b	smpsNoAttack, $01
000972D1 E107                       	smpsAlterNote       $07
000972D3 E701                       	dc.b	smpsNoAttack, $01
000972D5 E106                       	smpsAlterNote       $06
000972D7 E701                       	dc.b	smpsNoAttack, $01
000972D9 E10A                       	smpsAlterNote       $0A
000972DB E701                       	dc.b	smpsNoAttack, $01
000972DD E110                       	smpsAlterNote       $10
000972DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972E3 E10D                       	smpsAlterNote       $0D
000972E5 E701                       	dc.b	smpsNoAttack, $01
000972E7 E10F                       	smpsAlterNote       $0F
000972E9 BA0D                       	dc.b	nA4, $0D
000972EB E10C                       	smpsAlterNote       $0C
000972ED E701                       	dc.b	smpsNoAttack, $01
000972EF E108                       	smpsAlterNote       $08
000972F1 E701                       	dc.b	smpsNoAttack, $01
000972F3 E109                       	smpsAlterNote       $09
000972F5 E701                       	dc.b	smpsNoAttack, $01
000972F7 E10F                       	smpsAlterNote       $0F
000972F9 E701                       	dc.b	smpsNoAttack, $01
000972FB E113                       	smpsAlterNote       $13
000972FD E701                       	dc.b	smpsNoAttack, $01
000972FF E10F                       	smpsAlterNote       $0F
00097301 E701                       	dc.b	smpsNoAttack, $01
00097303 E10C                       	smpsAlterNote       $0C
00097305 E701                       	dc.b	smpsNoAttack, $01
00097307 E108                       	smpsAlterNote       $08
00097309 E701                       	dc.b	smpsNoAttack, $01
0009730B E10C                       	smpsAlterNote       $0C
0009730D E701                       	dc.b	smpsNoAttack, $01
0009730F E112                       	smpsAlterNote       $12
00097311 E701                       	dc.b	smpsNoAttack, $01
00097313 E113                       	smpsAlterNote       $13
00097315 E701                       	dc.b	smpsNoAttack, $01
00097317 E10F                       	smpsAlterNote       $0F
00097319 E701                       	dc.b	smpsNoAttack, $01
0009731B E109                       	smpsAlterNote       $09
0009731D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097321 E10C                       	smpsAlterNote       $0C
00097323 E701                       	dc.b	smpsNoAttack, $01
00097325 E112                       	smpsAlterNote       $12
00097327 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009732B E10C                       	smpsAlterNote       $0C
0009732D E701                       	dc.b	smpsNoAttack, $01
0009732F E109                       	smpsAlterNote       $09
00097331 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097335 E10F                       	smpsAlterNote       $0F
00097337 E701                       	dc.b	smpsNoAttack, $01
00097339 E113                       	smpsAlterNote       $13
0009733B E701                       	dc.b	smpsNoAttack, $01
0009733D E112                       	smpsAlterNote       $12
0009733F E701                       	dc.b	smpsNoAttack, $01
00097341 E10C                       	smpsAlterNote       $0C
00097343 E701                       	dc.b	smpsNoAttack, $01
00097345 E109                       	smpsAlterNote       $09
00097347 8001                       	dc.b	nRst, $01
00097349 E10D                       	smpsAlterNote       $0D
0009734B B60A                       	dc.b	nF4, $0A
0009734D E10C                       	smpsAlterNote       $0C
0009734F B506 8001                  	dc.b	nE4, $06, nRst, $01
00097353 E10B                       	smpsAlterNote       $0B
00097355 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00097359 E10C                       	smpsAlterNote       $0C
0009735B B503                       	dc.b	nE4, $03
0009735D E10D                       	smpsAlterNote       $0D
0009735F B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
00097369 E10C                       	smpsAlterNote       $0C
0009736B E701                       	dc.b	smpsNoAttack, $01
0009736D E108                       	smpsAlterNote       $08
0009736F E701                       	dc.b	smpsNoAttack, $01
00097371 E10C                       	smpsAlterNote       $0C
00097373 E701                       	dc.b	smpsNoAttack, $01
00097375 E112                       	smpsAlterNote       $12
00097377 E701                       	dc.b	smpsNoAttack, $01
00097379 E113                       	smpsAlterNote       $13
0009737B E701                       	dc.b	smpsNoAttack, $01
0009737D E10F                       	smpsAlterNote       $0F
0009737F E701                       	dc.b	smpsNoAttack, $01
00097381 E109                       	smpsAlterNote       $09
00097383 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097387 E10C                       	smpsAlterNote       $0C
00097389 E701                       	dc.b	smpsNoAttack, $01
0009738B E112                       	smpsAlterNote       $12
0009738D E701                       	dc.b	smpsNoAttack, $01
0009738F E113                       	smpsAlterNote       $13
00097391 8001                       	dc.b	nRst, $01
00097393 E10D                       	smpsAlterNote       $0D
00097395 C20D                       	dc.b	nF5, $0D
00097397 E10A                       	smpsAlterNote       $0A
00097399 E701                       	dc.b	smpsNoAttack, $01
0009739B E106                       	smpsAlterNote       $06
0009739D E701                       	dc.b	smpsNoAttack, $01
0009739F E10A                       	smpsAlterNote       $0A
000973A1 E701                       	dc.b	smpsNoAttack, $01
000973A3 E110                       	smpsAlterNote       $10
000973A5 E701                       	dc.b	smpsNoAttack, $01
000973A7 E111                       	smpsAlterNote       $11
000973A9 E701                       	dc.b	smpsNoAttack, $01
000973AB E10D                       	smpsAlterNote       $0D
000973AD E701                       	dc.b	smpsNoAttack, $01
000973AF E107                       	smpsAlterNote       $07
000973B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973B5 E10A                       	smpsAlterNote       $0A
000973B7 E701                       	dc.b	smpsNoAttack, $01
000973B9 E110                       	smpsAlterNote       $10
000973BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973BF E10A                       	smpsAlterNote       $0A
000973C1 E701                       	dc.b	smpsNoAttack, $01
000973C3 E107                       	smpsAlterNote       $07
000973C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973C9 E10D                       	smpsAlterNote       $0D
000973CB E701                       	dc.b	smpsNoAttack, $01
000973CD E111                       	smpsAlterNote       $11
000973CF E701                       	dc.b	smpsNoAttack, $01
000973D1 E110                       	smpsAlterNote       $10
000973D3 E701                       	dc.b	smpsNoAttack, $01
000973D5 E10A                       	smpsAlterNote       $0A
000973D7 E701                       	dc.b	smpsNoAttack, $01
000973D9 E106                       	smpsAlterNote       $06
000973DB E701                       	dc.b	smpsNoAttack, $01
000973DD E10A                       	smpsAlterNote       $0A
000973DF E701                       	dc.b	smpsNoAttack, $01
000973E1 E10D                       	smpsAlterNote       $0D
000973E3 E701                       	dc.b	smpsNoAttack, $01
000973E5 E111                       	smpsAlterNote       $11
000973E7 E701                       	dc.b	smpsNoAttack, $01
000973E9 E10D                       	smpsAlterNote       $0D
000973EB E701                       	dc.b	smpsNoAttack, $01
000973ED E107                       	smpsAlterNote       $07
000973EF E701                       	dc.b	smpsNoAttack, $01
000973F1 E106                       	smpsAlterNote       $06
000973F3 E701                       	dc.b	smpsNoAttack, $01
000973F5 E10A                       	smpsAlterNote       $0A
000973F7 E701                       	dc.b	smpsNoAttack, $01
000973F9 E110                       	smpsAlterNote       $10
000973FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973FF E10D                       	smpsAlterNote       $0D
00097401 E701                       	dc.b	smpsNoAttack, $01
00097403 E107                       	smpsAlterNote       $07
00097405 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097409 E10D                       	smpsAlterNote       $0D
0009740B E701                       	dc.b	smpsNoAttack, $01
0009740D E110                       	smpsAlterNote       $10
0009740F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097413 E10A                       	smpsAlterNote       $0A
00097415 E701                       	dc.b	smpsNoAttack, $01
00097417 E106                       	smpsAlterNote       $06
00097419 E701                       	dc.b	smpsNoAttack, $01
0009741B E107                       	smpsAlterNote       $07
0009741D E701                       	dc.b	smpsNoAttack, $01
0009741F E10D                       	smpsAlterNote       $0D
00097421 E701                       	dc.b	smpsNoAttack, $01
00097423 E111                       	smpsAlterNote       $11
00097425 E701                       	dc.b	smpsNoAttack, $01
00097427 E10D                       	smpsAlterNote       $0D
00097429 E701                       	dc.b	smpsNoAttack, $01
0009742B E10A                       	smpsAlterNote       $0A
0009742D E701                       	dc.b	smpsNoAttack, $01
0009742F E107                       	smpsAlterNote       $07
00097431 8001                       	dc.b	nRst, $01
00097433 E10D                       	smpsAlterNote       $0D
00097435 C206 8001                  	dc.b	nF5, $06, nRst, $01
0009743B E601                       	smpsAlterVol        $01
0009743D E110                       	smpsAlterNote       $10
0009743F BB0D                       	dc.b	nBb4, $0D
00097441 E10A                       	smpsAlterNote       $0A
00097443 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097447 E110                       	smpsAlterNote       $10
00097449 E701                       	dc.b	smpsNoAttack, $01
0009744B E113                       	smpsAlterNote       $13
0009744D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097451 E10D                       	smpsAlterNote       $0D
00097453 E701                       	dc.b	smpsNoAttack, $01
00097455 E109                       	smpsAlterNote       $09
00097457 E701                       	dc.b	smpsNoAttack, $01
00097459 E10A                       	smpsAlterNote       $0A
0009745B E701                       	dc.b	smpsNoAttack, $01
0009745D E110                       	smpsAlterNote       $10
0009745F E701                       	dc.b	smpsNoAttack, $01
00097461 E114                       	smpsAlterNote       $14
00097463 E701                       	dc.b	smpsNoAttack, $01
00097465 E110                       	smpsAlterNote       $10
00097467 E701                       	dc.b	smpsNoAttack, $01
00097469 E10D                       	smpsAlterNote       $0D
0009746B E701                       	dc.b	smpsNoAttack, $01
0009746D E109                       	smpsAlterNote       $09
0009746F E701                       	dc.b	smpsNoAttack, $01
00097471 E10A                       	smpsAlterNote       $0A
00097473 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00097477 E107                       	smpsAlterNote       $07
00097479 E701                       	dc.b	smpsNoAttack, $01
0009747B E103                       	smpsAlterNote       $03
0009747D E701                       	dc.b	smpsNoAttack, $01
0009747F E107                       	smpsAlterNote       $07
00097481 E701                       	dc.b	smpsNoAttack, $01
00097483 E10D                       	smpsAlterNote       $0D
00097485 E701                       	dc.b	smpsNoAttack, $01
00097487 E10E                       	smpsAlterNote       $0E
00097489 E701                       	dc.b	smpsNoAttack, $01
0009748B E10A                       	smpsAlterNote       $0A
0009748D E701                       	dc.b	smpsNoAttack, $01
0009748F E104                       	smpsAlterNote       $04
00097491 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097495 E107                       	smpsAlterNote       $07
00097497 E701                       	dc.b	smpsNoAttack, $01
00097499 E10D                       	smpsAlterNote       $0D
0009749B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009749F E107                       	smpsAlterNote       $07
000974A1 E701                       	dc.b	smpsNoAttack, $01
000974A3 E104                       	smpsAlterNote       $04
000974A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974A9 E10B                       	smpsAlterNote       $0B
000974AB BF0D                       	dc.b	nD5, $0D
000974AD E108                       	smpsAlterNote       $08
000974AF E701                       	dc.b	smpsNoAttack, $01
000974B1 E105                       	smpsAlterNote       $05
000974B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974B7 E10B                       	smpsAlterNote       $0B
000974B9 E701                       	dc.b	smpsNoAttack, $01
000974BB E10F                       	smpsAlterNote       $0F
000974BD E701                       	dc.b	smpsNoAttack, $01
000974BF E10E                       	smpsAlterNote       $0E
000974C1 E701                       	dc.b	smpsNoAttack, $01
000974C3 E108                       	smpsAlterNote       $08
000974C5 E701                       	dc.b	smpsNoAttack, $01
000974C7 E104                       	smpsAlterNote       $04
000974C9 E701                       	dc.b	smpsNoAttack, $01
000974CB E108                       	smpsAlterNote       $08
000974CD E701                       	dc.b	smpsNoAttack, $01
000974CF E10B                       	smpsAlterNote       $0B
000974D1 E701                       	dc.b	smpsNoAttack, $01
000974D3 E10F                       	smpsAlterNote       $0F
000974D5 E701                       	dc.b	smpsNoAttack, $01
000974D7 E10B                       	smpsAlterNote       $0B
000974D9 E701                       	dc.b	smpsNoAttack, $01
000974DB E105                       	smpsAlterNote       $05
000974DD E701                       	dc.b	smpsNoAttack, $01
000974DF E104                       	smpsAlterNote       $04
000974E1 E701                       	dc.b	smpsNoAttack, $01
000974E3 E105                       	smpsAlterNote       $05
000974E5 8001                       	dc.b	nRst, $01
000974E7 E10C                       	smpsAlterNote       $0C
000974E9 C10C                       	dc.b	nE5, $0C
000974EB E10D                       	smpsAlterNote       $0D
000974ED C201                       	dc.b	nF5, $01
000974EF E10E                       	smpsAlterNote       $0E
000974F1 C301 8001                  	dc.b	nFs5, $01, nRst, $01
000974F5 E10D                       	smpsAlterNote       $0D
000974F7 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000974FB E10A                       	smpsAlterNote       $0A
000974FD E701                       	dc.b	smpsNoAttack, $01
000974FF E106                       	smpsAlterNote       $06
00097501 E701                       	dc.b	smpsNoAttack, $01
00097503 E10A                       	smpsAlterNote       $0A
00097505 E701                       	dc.b	smpsNoAttack, $01
00097507 E10D                       	smpsAlterNote       $0D
00097509 E701                       	dc.b	smpsNoAttack, $01
0009750B E111                       	smpsAlterNote       $11
0009750D E701                       	dc.b	smpsNoAttack, $01
0009750F E10D                       	smpsAlterNote       $0D
00097511 E701                       	dc.b	smpsNoAttack, $01
00097513 E107                       	smpsAlterNote       $07
00097515 E701                       	dc.b	smpsNoAttack, $01
00097517 E106                       	smpsAlterNote       $06
00097519 E701                       	dc.b	smpsNoAttack, $01
0009751B E10A                       	smpsAlterNote       $0A
0009751D E701                       	dc.b	smpsNoAttack, $01
0009751F E110                       	smpsAlterNote       $10
00097521 E701                       	dc.b	smpsNoAttack, $01
00097523 E111                       	smpsAlterNote       $11
00097525 8001                       	dc.b	nRst, $01
00097527 E10D                       	smpsAlterNote       $0D
00097529 C40D                       	dc.b	nG5, $0D
0009752B E10A                       	smpsAlterNote       $0A
0009752D E701                       	dc.b	smpsNoAttack, $01
0009752F E106                       	smpsAlterNote       $06
00097531 E701                       	dc.b	smpsNoAttack, $01
00097533 E10A                       	smpsAlterNote       $0A
00097535 E701                       	dc.b	smpsNoAttack, $01
00097537 E10D                       	smpsAlterNote       $0D
00097539 E701                       	dc.b	smpsNoAttack, $01
0009753B E10C                       	smpsAlterNote       $0C
0009753D C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
00097549 8001                       	dc.b	nRst, $01
0009754B E10D                       	smpsAlterNote       $0D
0009754D C20D                       	dc.b	nF5, $0D
0009754F E10A                       	smpsAlterNote       $0A
00097551 E701                       	dc.b	smpsNoAttack, $01
00097553 E106                       	smpsAlterNote       $06
00097555 E701                       	dc.b	smpsNoAttack, $01
00097557 E10A                       	smpsAlterNote       $0A
00097559 E701                       	dc.b	smpsNoAttack, $01
0009755B E110                       	smpsAlterNote       $10
0009755D E701                       	dc.b	smpsNoAttack, $01
0009755F E111                       	smpsAlterNote       $11
00097561 E701                       	dc.b	smpsNoAttack, $01
00097563 E10D                       	smpsAlterNote       $0D
00097565 E701                       	dc.b	smpsNoAttack, $01
00097567 E107                       	smpsAlterNote       $07
00097569 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009756D E10A                       	smpsAlterNote       $0A
0009756F E701                       	dc.b	smpsNoAttack, $01
00097571 E110                       	smpsAlterNote       $10
00097573 E701                       	dc.b	smpsNoAttack, $01
00097575 E111                       	smpsAlterNote       $11
00097577 8001                       	dc.b	nRst, $01
00097579 E10F                       	smpsAlterNote       $0F
0009757B C60A                       	dc.b	nA5, $0A
0009757D E10D                       	smpsAlterNote       $0D
0009757F C406 8001                  	dc.b	nG5, $06, nRst, $01
00097583 E10C                       	smpsAlterNote       $0C
00097585 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00097591 8001                       	dc.b	nRst, $01
00097593 E10D                       	smpsAlterNote       $0D
00097595 C20D                       	dc.b	nF5, $0D
00097597 E107                       	smpsAlterNote       $07
00097599 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009759D E10A                       	smpsAlterNote       $0A
0009759F E701                       	dc.b	smpsNoAttack, $01
000975A1 E110                       	smpsAlterNote       $10
000975A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975A7 E10A                       	smpsAlterNote       $0A
000975A9 E701                       	dc.b	smpsNoAttack, $01
000975AB E107                       	smpsAlterNote       $07
000975AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975B1 E10D                       	smpsAlterNote       $0D
000975B3 E701                       	dc.b	smpsNoAttack, $01
000975B5 E111                       	smpsAlterNote       $11
000975B7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000975BB E10D                       	smpsAlterNote       $0D
000975BD C40D                       	dc.b	nG5, $0D
000975BF E107                       	smpsAlterNote       $07
000975C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975C5 E10A                       	smpsAlterNote       $0A
000975C7 E701                       	dc.b	smpsNoAttack, $01
000975C9 E10D                       	smpsAlterNote       $0D
000975CB 8001                       	dc.b	nRst, $01
000975CD E10C                       	smpsAlterNote       $0C
000975CF C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000975DB E10D                       	smpsAlterNote       $0D
000975DD C20E                       	dc.b	nF5, $0E
000975DF E107                       	smpsAlterNote       $07
000975E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975E5 E10D                       	smpsAlterNote       $0D
000975E7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000975ED E0C0                       	smpsPan             panCenter, $00
000975EF E603                       	smpsAlterVol        $03
000975F1 E108                       	smpsAlterNote       $08
000975F3 B406                       	dc.b	nEb4, $06
000975F5 E10C                       	smpsAlterNote       $0C
000975F7 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000975FB E108                       	smpsAlterNote       $08
000975FD B403                       	dc.b	nEb4, $03
000975FF E109                       	smpsAlterNote       $09
00097601 B803 8001                  	dc.b	nG4, $03, nRst, $01
00097605 E10C                       	smpsAlterNote       $0C
00097607 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0009760F 03                         	dc.b	$03
00097610 E6FD                       	smpsAlterVol        $FD
00097612 F6F1 F4                    	smpsJump            music84_Jump00
00097615                            
00097615                            ; PSG1 Data
00097615                            music84_PSG1:
00097615 E1FD                       	smpsAlterNote       $FD
00097617 EC04                       	smpsPSGAlterVol     $04
00097619 9203                       	dc.b	nF1, $03
0009761B E1FE                       	smpsAlterNote       $FE
0009761D 9603                       	dc.b	nA1, $03
0009761F EC04                       	smpsPSGAlterVol     $04
00097621 E701                       	dc.b	smpsNoAttack, $01
00097623 E1FF                       	smpsAlterNote       $FF
00097625 ECFC                       	smpsPSGAlterVol     $FC
00097627 9B03                       	dc.b	nD2, $03
00097629 E1FD                       	smpsAlterNote       $FD
0009762B 9403                       	dc.b	nG1, $03
0009762D EC04                       	smpsPSGAlterVol     $04
0009762F E701                       	dc.b	smpsNoAttack, $01
00097631 E1FE                       	smpsAlterNote       $FE
00097633 ECFC                       	smpsPSGAlterVol     $FC
00097635 9703                       	dc.b	nBb1, $03
00097637 E1FF                       	smpsAlterNote       $FF
00097639 9B03                       	dc.b	nD2, $03
0009763B EC04                       	smpsPSGAlterVol     $04
0009763D E701                       	dc.b	smpsNoAttack, $01
0009763F E1FE                       	smpsAlterNote       $FE
00097641 ECFC                       	smpsPSGAlterVol     $FC
00097643 A002                       	dc.b	nG2, $02
00097645 EC04                       	smpsPSGAlterVol     $04
00097647 E701                       	dc.b	smpsNoAttack, $01
00097649 E1FF                       	smpsAlterNote       $FF
0009764B ECFC                       	smpsPSGAlterVol     $FC
0009764D A203                       	dc.b	nA2, $03
0009764F EC0B                       	smpsPSGAlterVol     $0B
00097651 800A                       	dc.b	nRst, $0A
00097653 E105                       	smpsAlterNote       $05
00097655 01                         	dc.b	$01
00097656 E1FC                       	smpsAlterNote       $FC
00097658 01                         	dc.b	$01
00097659 E105                       	smpsAlterNote       $05
0009765B 01                         	dc.b	$01
0009765C E1FD                       	smpsAlterNote       $FD
0009765E 01                         	dc.b	$01
0009765F E105                       	smpsAlterNote       $05
00097661 01                         	dc.b	$01
00097662 E1FD                       	smpsAlterNote       $FD
00097664 01                         	dc.b	$01
00097665 E1FA                       	smpsAlterNote       $FA
00097667 01                         	dc.b	$01
00097668 E1FC                       	smpsAlterNote       $FC
0009766A 01                         	dc.b	$01
0009766B E105                       	smpsAlterNote       $05
0009766D 01                         	dc.b	$01
0009766E E108                       	smpsAlterNote       $08
00097670 0101                       	dc.b	$01, $01
00097672 E105                       	smpsAlterNote       $05
00097674 01                         	dc.b	$01
00097675 E1FA                       	smpsAlterNote       $FA
00097677 0101                       	dc.b	$01, $01
00097679 E1FD                       	smpsAlterNote       $FD
0009767B 01                         	dc.b	$01
0009767C E105                       	smpsAlterNote       $05
0009767E 01                         	dc.b	$01
0009767F E108                       	smpsAlterNote       $08
00097681 01                         	dc.b	$01
00097682 E105                       	smpsAlterNote       $05
00097684 01                         	dc.b	$01
00097685 E1FC                       	smpsAlterNote       $FC
00097687 01                         	dc.b	$01
00097688 E105                       	smpsAlterNote       $05
0009768A 01                         	dc.b	$01
0009768B E1FD                       	smpsAlterNote       $FD
0009768D 01                         	dc.b	$01
0009768E                            
0009768E                            music84_Jump07:
0009768E E105                       	smpsAlterNote       $05
00097690 8001                       	dc.b	nRst, $01
00097692 E1FD                       	smpsAlterNote       $FD
00097694 01                         	dc.b	$01
00097695 E1FA                       	smpsAlterNote       $FA
00097697 01                         	dc.b	$01
00097698 E1FC                       	smpsAlterNote       $FC
0009769A 01                         	dc.b	$01
0009769B E1FD                       	smpsAlterNote       $FD
0009769D ECF5                       	smpsPSGAlterVol     $F5
0009769F 9206                       	dc.b	nF1, $06
000976A1 EC04                       	smpsPSGAlterVol     $04
000976A3 E701                       	dc.b	smpsNoAttack, $01
000976A5 EC07                       	smpsPSGAlterVol     $07
000976A7 8003                       	dc.b	nRst, $03
000976A9 ECF5                       	smpsPSGAlterVol     $F5
000976AB 9206                       	dc.b	nF1, $06
000976AD EC04                       	smpsPSGAlterVol     $04
000976AF E701                       	dc.b	smpsNoAttack, $01
000976B1 EC07                       	smpsPSGAlterVol     $07
000976B3 8006                       	dc.b	nRst, $06
000976B5 E100                       	smpsAlterNote       $00
000976B7 01                         	dc.b	$01
000976B8 E104                       	smpsAlterNote       $04
000976BA 01                         	dc.b	$01
000976BB E100                       	smpsAlterNote       $00
000976BD 01                         	dc.b	$01
000976BE E1FB                       	smpsAlterNote       $FB
000976C0 01                         	dc.b	$01
000976C1 E1FD                       	smpsAlterNote       $FD
000976C3 ECF5                       	smpsPSGAlterVol     $F5
000976C5 9406                       	dc.b	nG1, $06
000976C7 EC04                       	smpsPSGAlterVol     $04
000976C9 E701                       	dc.b	smpsNoAttack, $01
000976CB EC07                       	smpsPSGAlterVol     $07
000976CD 8003                       	dc.b	nRst, $03
000976CF ECF5                       	smpsPSGAlterVol     $F5
000976D1 9407                       	dc.b	nG1, $07
000976D3 EC0B                       	smpsPSGAlterVol     $0B
000976D5 8006                       	dc.b	nRst, $06
000976D7 E100                       	smpsAlterNote       $00
000976D9 01                         	dc.b	$01
000976DA E103                       	smpsAlterNote       $03
000976DC 0101                       	dc.b	$01, $01
000976DE E1FD                       	smpsAlterNote       $FD
000976E0 01                         	dc.b	$01
000976E1 ECF5                       	smpsPSGAlterVol     $F5
000976E3 9207                       	dc.b	nF1, $07
000976E5 EC0B                       	smpsPSGAlterVol     $0B
000976E7 8004                       	dc.b	nRst, $04
000976E9 ECF5                       	smpsPSGAlterVol     $F5
000976EB 9206                       	dc.b	nF1, $06
000976ED EC04                       	smpsPSGAlterVol     $04
000976EF E701                       	dc.b	smpsNoAttack, $01
000976F1 EC07                       	smpsPSGAlterVol     $07
000976F3 8006                       	dc.b	nRst, $06
000976F5 E103                       	smpsAlterNote       $03
000976F7 01                         	dc.b	$01
000976F8 E104                       	smpsAlterNote       $04
000976FA 01                         	dc.b	$01
000976FB E100                       	smpsAlterNote       $00
000976FD 01                         	dc.b	$01
000976FE E1FA                       	smpsAlterNote       $FA
00097700 01                         	dc.b	$01
00097701 E1FD                       	smpsAlterNote       $FD
00097703 ECF5                       	smpsPSGAlterVol     $F5
00097705 9206                       	dc.b	nF1, $06
00097707 EC04                       	smpsPSGAlterVol     $04
00097709 E701                       	dc.b	smpsNoAttack, $01
0009770B EC07                       	smpsPSGAlterVol     $07
0009770D 8003                       	dc.b	nRst, $03
0009770F ECF5                       	smpsPSGAlterVol     $F5
00097711 9106                       	dc.b	nE1, $06
00097713 EC04                       	smpsPSGAlterVol     $04
00097715 E701                       	dc.b	smpsNoAttack, $01
00097717 EC07                       	smpsPSGAlterVol     $07
00097719 8006                       	dc.b	nRst, $06
0009771B E100                       	smpsAlterNote       $00
0009771D 01                         	dc.b	$01
0009771E E104                       	smpsAlterNote       $04
00097720 01                         	dc.b	$01
00097721 E100                       	smpsAlterNote       $00
00097723 01                         	dc.b	$01
00097724 E1FD                       	smpsAlterNote       $FD
00097726 01                         	dc.b	$01
00097727 ECF5                       	smpsPSGAlterVol     $F5
00097729 9206                       	dc.b	nF1, $06
0009772B EC04                       	smpsPSGAlterVol     $04
0009772D E701                       	dc.b	smpsNoAttack, $01
0009772F EC07                       	smpsPSGAlterVol     $07
00097731 8003                       	dc.b	nRst, $03
00097733 ECF5                       	smpsPSGAlterVol     $F5
00097735 9207                       	dc.b	nF1, $07
00097737 EC0B                       	smpsPSGAlterVol     $0B
00097739 8007                       	dc.b	nRst, $07
0009773B E103                       	smpsAlterNote       $03
0009773D 0101                       	dc.b	$01, $01
0009773F E1FD                       	smpsAlterNote       $FD
00097741 01                         	dc.b	$01
00097742 E1FB                       	smpsAlterNote       $FB
00097744 01                         	dc.b	$01
00097745 E1FD                       	smpsAlterNote       $FD
00097747 ECF5                       	smpsPSGAlterVol     $F5
00097749 9406                       	dc.b	nG1, $06
0009774B EC0B                       	smpsPSGAlterVol     $0B
0009774D 8004                       	dc.b	nRst, $04
0009774F ECF5                       	smpsPSGAlterVol     $F5
00097751 9406                       	dc.b	nG1, $06
00097753 EC04                       	smpsPSGAlterVol     $04
00097755 E701                       	dc.b	smpsNoAttack, $01
00097757 EC07                       	smpsPSGAlterVol     $07
00097759 8006                       	dc.b	nRst, $06
0009775B E100                       	smpsAlterNote       $00
0009775D 01                         	dc.b	$01
0009775E E104                       	smpsAlterNote       $04
00097760 01                         	dc.b	$01
00097761 E100                       	smpsAlterNote       $00
00097763 01                         	dc.b	$01
00097764 E1F9                       	smpsAlterNote       $F9
00097766 01                         	dc.b	$01
00097767 E1FD                       	smpsAlterNote       $FD
00097769 ECF5                       	smpsPSGAlterVol     $F5
0009776B 9206                       	dc.b	nF1, $06
0009776D EC04                       	smpsPSGAlterVol     $04
0009776F E701                       	dc.b	smpsNoAttack, $01
00097771 EC07                       	smpsPSGAlterVol     $07
00097773 8003                       	dc.b	nRst, $03
00097775 ECF5                       	smpsPSGAlterVol     $F5
00097777 9207                       	dc.b	nF1, $07
00097779 EC0B                       	smpsPSGAlterVol     $0B
0009777B 8006                       	dc.b	nRst, $06
0009777D E100                       	smpsAlterNote       $00
0009777F 01                         	dc.b	$01
00097780 E104                       	smpsAlterNote       $04
00097782 01                         	dc.b	$01
00097783 E103                       	smpsAlterNote       $03
00097785 01                         	dc.b	$01
00097786 E1FD                       	smpsAlterNote       $FD
00097788 01                         	dc.b	$01
00097789 ECF5                       	smpsPSGAlterVol     $F5
0009778B 9207                       	dc.b	nF1, $07
0009778D EC0B                       	smpsPSGAlterVol     $0B
0009778F 8004                       	dc.b	nRst, $04
00097791 ECF5                       	smpsPSGAlterVol     $F5
00097793 9206                       	dc.b	nF1, $06
00097795 EC0B                       	smpsPSGAlterVol     $0B
00097797 8007                       	dc.b	nRst, $07
00097799 E103                       	smpsAlterNote       $03
0009779B 0101                       	dc.b	$01, $01
0009779D E100                       	smpsAlterNote       $00
0009779F 01                         	dc.b	$01
000977A0 E1FA                       	smpsAlterNote       $FA
000977A2 01                         	dc.b	$01
000977A3 E1FD                       	smpsAlterNote       $FD
000977A5 ECF5                       	smpsPSGAlterVol     $F5
000977A7 9206                       	dc.b	nF1, $06
000977A9 EC04                       	smpsPSGAlterVol     $04
000977AB E701                       	dc.b	smpsNoAttack, $01
000977AD EC07                       	smpsPSGAlterVol     $07
000977AF 8003                       	dc.b	nRst, $03
000977B1 ECF5                       	smpsPSGAlterVol     $F5
000977B3 9206                       	dc.b	nF1, $06
000977B5 EC04                       	smpsPSGAlterVol     $04
000977B7 E701                       	dc.b	smpsNoAttack, $01
000977B9 EC07                       	smpsPSGAlterVol     $07
000977BB 8006                       	dc.b	nRst, $06
000977BD E100                       	smpsAlterNote       $00
000977BF 01                         	dc.b	$01
000977C0 E104                       	smpsAlterNote       $04
000977C2 01                         	dc.b	$01
000977C3 E100                       	smpsAlterNote       $00
000977C5 01                         	dc.b	$01
000977C6 E1FD                       	smpsAlterNote       $FD
000977C8 01                         	dc.b	$01
000977C9 ECF5                       	smpsPSGAlterVol     $F5
000977CB 9206                       	dc.b	nF1, $06
000977CD EC04                       	smpsPSGAlterVol     $04
000977CF E701                       	dc.b	smpsNoAttack, $01
000977D1 EC07                       	smpsPSGAlterVol     $07
000977D3 8003                       	dc.b	nRst, $03
000977D5 ECF5                       	smpsPSGAlterVol     $F5
000977D7 9207                       	dc.b	nF1, $07
000977D9 EC0B                       	smpsPSGAlterVol     $0B
000977DB 8007                       	dc.b	nRst, $07
000977DD E103                       	smpsAlterNote       $03
000977DF 0101                       	dc.b	$01, $01
000977E1 E1FD                       	smpsAlterNote       $FD
000977E3 01                         	dc.b	$01
000977E4 E1FA                       	smpsAlterNote       $FA
000977E6 01                         	dc.b	$01
000977E7 E1FD                       	smpsAlterNote       $FD
000977E9 ECF5                       	smpsPSGAlterVol     $F5
000977EB 9206                       	dc.b	nF1, $06
000977ED EC0B                       	smpsPSGAlterVol     $0B
000977EF 8004                       	dc.b	nRst, $04
000977F1 ECF5                       	smpsPSGAlterVol     $F5
000977F3 9206                       	dc.b	nF1, $06
000977F5 EC04                       	smpsPSGAlterVol     $04
000977F7 E701                       	dc.b	smpsNoAttack, $01
000977F9 EC07                       	smpsPSGAlterVol     $07
000977FB 8006                       	dc.b	nRst, $06
000977FD E103                       	smpsAlterNote       $03
000977FF 01                         	dc.b	$01
00097800 E104                       	smpsAlterNote       $04
00097802 01                         	dc.b	$01
00097803 E100                       	smpsAlterNote       $00
00097805 01                         	dc.b	$01
00097806 E1FA                       	smpsAlterNote       $FA
00097808 01                         	dc.b	$01
00097809 E1FD                       	smpsAlterNote       $FD
0009780B ECF5                       	smpsPSGAlterVol     $F5
0009780D 9206                       	dc.b	nF1, $06
0009780F EC04                       	smpsPSGAlterVol     $04
00097811 E701                       	dc.b	smpsNoAttack, $01
00097813 EC07                       	smpsPSGAlterVol     $07
00097815 8003                       	dc.b	nRst, $03
00097817 ECF5                       	smpsPSGAlterVol     $F5
00097819 9206                       	dc.b	nF1, $06
0009781B EC04                       	smpsPSGAlterVol     $04
0009781D E701                       	dc.b	smpsNoAttack, $01
0009781F EC07                       	smpsPSGAlterVol     $07
00097821 8006                       	dc.b	nRst, $06
00097823 E100                       	smpsAlterNote       $00
00097825 01                         	dc.b	$01
00097826 E104                       	smpsAlterNote       $04
00097828 01                         	dc.b	$01
00097829 E103                       	smpsAlterNote       $03
0009782B 01                         	dc.b	$01
0009782C E1FD                       	smpsAlterNote       $FD
0009782E 01                         	dc.b	$01
0009782F ECF5                       	smpsPSGAlterVol     $F5
00097831 9107                       	dc.b	nE1, $07
00097833 EC0B                       	smpsPSGAlterVol     $0B
00097835 8004                       	dc.b	nRst, $04
00097837 ECF5                       	smpsPSGAlterVol     $F5
00097839 9106                       	dc.b	nE1, $06
0009783B EC0B                       	smpsPSGAlterVol     $0B
0009783D 8007                       	dc.b	nRst, $07
0009783F E103                       	smpsAlterNote       $03
00097841 0101                       	dc.b	$01, $01
00097843 E100                       	smpsAlterNote       $00
00097845 01                         	dc.b	$01
00097846 E1FA                       	smpsAlterNote       $FA
00097848 01                         	dc.b	$01
00097849 E1FD                       	smpsAlterNote       $FD
0009784B ECF5                       	smpsPSGAlterVol     $F5
0009784D 9106                       	dc.b	nE1, $06
0009784F EC04                       	smpsPSGAlterVol     $04
00097851 E701                       	dc.b	smpsNoAttack, $01
00097853 EC07                       	smpsPSGAlterVol     $07
00097855 8003                       	dc.b	nRst, $03
00097857 ECF5                       	smpsPSGAlterVol     $F5
00097859 9106                       	dc.b	nE1, $06
0009785B EC04                       	smpsPSGAlterVol     $04
0009785D E701                       	dc.b	smpsNoAttack, $01
0009785F EC07                       	smpsPSGAlterVol     $07
00097861 8006                       	dc.b	nRst, $06
00097863 E100                       	smpsAlterNote       $00
00097865 01                         	dc.b	$01
00097866 E104                       	smpsAlterNote       $04
00097868 01                         	dc.b	$01
00097869 E100                       	smpsAlterNote       $00
0009786B 01                         	dc.b	$01
0009786C E1FA                       	smpsAlterNote       $FA
0009786E 01                         	dc.b	$01
0009786F E1FD                       	smpsAlterNote       $FD
00097871 ECF5                       	smpsPSGAlterVol     $F5
00097873 9106                       	dc.b	nE1, $06
00097875 EC04                       	smpsPSGAlterVol     $04
00097877 E701                       	dc.b	smpsNoAttack, $01
00097879 EC07                       	smpsPSGAlterVol     $07
0009787B 8003                       	dc.b	nRst, $03
0009787D ECF5                       	smpsPSGAlterVol     $F5
0009787F 9107 9106                  	dc.b	nE1, $07, nE1, $06
00097883 EC04                       	smpsPSGAlterVol     $04
00097885 E701                       	dc.b	smpsNoAttack, $01
00097887 ECFC                       	smpsPSGAlterVol     $FC
00097889 9103 9103                  	dc.b	nE1, $03, nE1, $03
0009788D EC04                       	smpsPSGAlterVol     $04
0009788F E701                       	dc.b	smpsNoAttack, $01
00097891 ECFC                       	smpsPSGAlterVol     $FC
00097893 9106                       	dc.b	nE1, $06
00097895 EC04                       	smpsPSGAlterVol     $04
00097897 E701                       	dc.b	smpsNoAttack, $01
00097899 EC07                       	smpsPSGAlterVol     $07
0009789B 8006                       	dc.b	nRst, $06
0009789D E100                       	smpsAlterNote       $00
0009789F 01                         	dc.b	$01
000978A0 E104                       	smpsAlterNote       $04
000978A2 01                         	dc.b	$01
000978A3 E100                       	smpsAlterNote       $00
000978A5 01                         	dc.b	$01
000978A6 E1FA                       	smpsAlterNote       $FA
000978A8 01                         	dc.b	$01
000978A9 E1F9                       	smpsAlterNote       $F9
000978AB 01                         	dc.b	$01
000978AC E1FD                       	smpsAlterNote       $FD
000978AE 01                         	dc.b	$01
000978AF E103                       	smpsAlterNote       $03
000978B1 01                         	dc.b	$01
000978B2 E104                       	smpsAlterNote       $04
000978B4 01                         	dc.b	$01
000978B5 E100                       	smpsAlterNote       $00
000978B7 01                         	dc.b	$01
000978B8 E1FA                       	smpsAlterNote       $FA
000978BA 0101                       	dc.b	$01, $01
000978BC E1FD                       	smpsAlterNote       $FD
000978BE ECF5                       	smpsPSGAlterVol     $F5
000978C0 9206                       	dc.b	nF1, $06
000978C2 EC04                       	smpsPSGAlterVol     $04
000978C4 E701                       	dc.b	smpsNoAttack, $01
000978C6 EC07                       	smpsPSGAlterVol     $07
000978C8 8003                       	dc.b	nRst, $03
000978CA ECF5                       	smpsPSGAlterVol     $F5
000978CC 9206                       	dc.b	nF1, $06
000978CE EC04                       	smpsPSGAlterVol     $04
000978D0 E701                       	dc.b	smpsNoAttack, $01
000978D2 EC07                       	smpsPSGAlterVol     $07
000978D4 8006                       	dc.b	nRst, $06
000978D6 E100                       	smpsAlterNote       $00
000978D8 01                         	dc.b	$01
000978D9 E104                       	smpsAlterNote       $04
000978DB 01                         	dc.b	$01
000978DC E103                       	smpsAlterNote       $03
000978DE 01                         	dc.b	$01
000978DF E1FD                       	smpsAlterNote       $FD
000978E1 01                         	dc.b	$01
000978E2 ECF5                       	smpsPSGAlterVol     $F5
000978E4 9407                       	dc.b	nG1, $07
000978E6 EC0B                       	smpsPSGAlterVol     $0B
000978E8 8004                       	dc.b	nRst, $04
000978EA ECF5                       	smpsPSGAlterVol     $F5
000978EC 9406                       	dc.b	nG1, $06
000978EE EC0B                       	smpsPSGAlterVol     $0B
000978F0 8007                       	dc.b	nRst, $07
000978F2 E103                       	smpsAlterNote       $03
000978F4 0101                       	dc.b	$01, $01
000978F6 E1FD                       	smpsAlterNote       $FD
000978F8 01                         	dc.b	$01
000978F9 E1F9                       	smpsAlterNote       $F9
000978FB 01                         	dc.b	$01
000978FC E1FD                       	smpsAlterNote       $FD
000978FE ECF5                       	smpsPSGAlterVol     $F5
00097900 9206                       	dc.b	nF1, $06
00097902 EC04                       	smpsPSGAlterVol     $04
00097904 E701                       	dc.b	smpsNoAttack, $01
00097906 EC07                       	smpsPSGAlterVol     $07
00097908 8003                       	dc.b	nRst, $03
0009790A ECF5                       	smpsPSGAlterVol     $F5
0009790C 9206                       	dc.b	nF1, $06
0009790E EC04                       	smpsPSGAlterVol     $04
00097910 E701                       	dc.b	smpsNoAttack, $01
00097912 EC07                       	smpsPSGAlterVol     $07
00097914 8006                       	dc.b	nRst, $06
00097916 E100                       	smpsAlterNote       $00
00097918 01                         	dc.b	$01
00097919 E104                       	smpsAlterNote       $04
0009791B 01                         	dc.b	$01
0009791C E100                       	smpsAlterNote       $00
0009791E 01                         	dc.b	$01
0009791F E1FA                       	smpsAlterNote       $FA
00097921 01                         	dc.b	$01
00097922 E1FD                       	smpsAlterNote       $FD
00097924 ECF5                       	smpsPSGAlterVol     $F5
00097926 9206                       	dc.b	nF1, $06
00097928 EC04                       	smpsPSGAlterVol     $04
0009792A E701                       	dc.b	smpsNoAttack, $01
0009792C EC07                       	smpsPSGAlterVol     $07
0009792E 8003                       	dc.b	nRst, $03
00097930 ECF5                       	smpsPSGAlterVol     $F5
00097932 9107                       	dc.b	nE1, $07
00097934 EC0B                       	smpsPSGAlterVol     $0B
00097936 8006                       	dc.b	nRst, $06
00097938 E100                       	smpsAlterNote       $00
0009793A 01                         	dc.b	$01
0009793B E103                       	smpsAlterNote       $03
0009793D 0101                       	dc.b	$01, $01
0009793F E1FD                       	smpsAlterNote       $FD
00097941 01                         	dc.b	$01
00097942 ECF5                       	smpsPSGAlterVol     $F5
00097944 9207                       	dc.b	nF1, $07
00097946 EC0B                       	smpsPSGAlterVol     $0B
00097948 8004                       	dc.b	nRst, $04
0009794A ECF5                       	smpsPSGAlterVol     $F5
0009794C 9206                       	dc.b	nF1, $06
0009794E EC04                       	smpsPSGAlterVol     $04
00097950 E701                       	dc.b	smpsNoAttack, $01
00097952 EC07                       	smpsPSGAlterVol     $07
00097954 8006                       	dc.b	nRst, $06
00097956 E103                       	smpsAlterNote       $03
00097958 01                         	dc.b	$01
00097959 E104                       	smpsAlterNote       $04
0009795B 01                         	dc.b	$01
0009795C E100                       	smpsAlterNote       $00
0009795E 01                         	dc.b	$01
0009795F E1FB                       	smpsAlterNote       $FB
00097961 01                         	dc.b	$01
00097962 E1FD                       	smpsAlterNote       $FD
00097964 ECF5                       	smpsPSGAlterVol     $F5
00097966 9406                       	dc.b	nG1, $06
00097968 EC04                       	smpsPSGAlterVol     $04
0009796A E701                       	dc.b	smpsNoAttack, $01
0009796C EC07                       	smpsPSGAlterVol     $07
0009796E 8003                       	dc.b	nRst, $03
00097970 ECF5                       	smpsPSGAlterVol     $F5
00097972 9406                       	dc.b	nG1, $06
00097974 EC04                       	smpsPSGAlterVol     $04
00097976 E701                       	dc.b	smpsNoAttack, $01
00097978 EC07                       	smpsPSGAlterVol     $07
0009797A 8006                       	dc.b	nRst, $06
0009797C E100                       	smpsAlterNote       $00
0009797E 01                         	dc.b	$01
0009797F E104                       	smpsAlterNote       $04
00097981 01                         	dc.b	$01
00097982 E100                       	smpsAlterNote       $00
00097984 01                         	dc.b	$01
00097985 E1FD                       	smpsAlterNote       $FD
00097987 01                         	dc.b	$01
00097988 ECF5                       	smpsPSGAlterVol     $F5
0009798A 9206                       	dc.b	nF1, $06
0009798C EC04                       	smpsPSGAlterVol     $04
0009798E E701                       	dc.b	smpsNoAttack, $01
00097990 EC07                       	smpsPSGAlterVol     $07
00097992 8003                       	dc.b	nRst, $03
00097994 ECF5                       	smpsPSGAlterVol     $F5
00097996 9207                       	dc.b	nF1, $07
00097998 EC0B                       	smpsPSGAlterVol     $0B
0009799A 8007                       	dc.b	nRst, $07
0009799C E103                       	smpsAlterNote       $03
0009799E 0101                       	dc.b	$01, $01
000979A0 E1FD                       	smpsAlterNote       $FD
000979A2 01                         	dc.b	$01
000979A3 E1FA                       	smpsAlterNote       $FA
000979A5 01                         	dc.b	$01
000979A6 E1FD                       	smpsAlterNote       $FD
000979A8 ECF5                       	smpsPSGAlterVol     $F5
000979AA 9206                       	dc.b	nF1, $06
000979AC EC0B                       	smpsPSGAlterVol     $0B
000979AE 8004                       	dc.b	nRst, $04
000979B0 ECF5                       	smpsPSGAlterVol     $F5
000979B2 9206                       	dc.b	nF1, $06
000979B4 EC04                       	smpsPSGAlterVol     $04
000979B6 E701                       	dc.b	smpsNoAttack, $01
000979B8 EC07                       	smpsPSGAlterVol     $07
000979BA 8006                       	dc.b	nRst, $06
000979BC E100                       	smpsAlterNote       $00
000979BE 01                         	dc.b	$01
000979BF E104                       	smpsAlterNote       $04
000979C1 01                         	dc.b	$01
000979C2 E100                       	smpsAlterNote       $00
000979C4 01                         	dc.b	$01
000979C5 E1FA                       	smpsAlterNote       $FA
000979C7 01                         	dc.b	$01
000979C8 E1FD                       	smpsAlterNote       $FD
000979CA ECF5                       	smpsPSGAlterVol     $F5
000979CC 9206                       	dc.b	nF1, $06
000979CE EC04                       	smpsPSGAlterVol     $04
000979D0 E704                       	dc.b	smpsNoAttack, $04
000979D2 ECFC                       	smpsPSGAlterVol     $FC
000979D4 9207                       	dc.b	nF1, $07
000979D6 EC0B                       	smpsPSGAlterVol     $0B
000979D8 8006                       	dc.b	nRst, $06
000979DA E100                       	smpsAlterNote       $00
000979DC 01                         	dc.b	$01
000979DD E104                       	smpsAlterNote       $04
000979DF 01                         	dc.b	$01
000979E0 E103                       	smpsAlterNote       $03
000979E2 01                         	dc.b	$01
000979E3 E1FD                       	smpsAlterNote       $FD
000979E5 01                         	dc.b	$01
000979E6 ECF5                       	smpsPSGAlterVol     $F5
000979E8 9207                       	dc.b	nF1, $07
000979EA EC0B                       	smpsPSGAlterVol     $0B
000979EC 8004                       	dc.b	nRst, $04
000979EE ECF5                       	smpsPSGAlterVol     $F5
000979F0 9206                       	dc.b	nF1, $06
000979F2 EC0B                       	smpsPSGAlterVol     $0B
000979F4 8007                       	dc.b	nRst, $07
000979F6 E103                       	smpsAlterNote       $03
000979F8 0101                       	dc.b	$01, $01
000979FA E100                       	smpsAlterNote       $00
000979FC 01                         	dc.b	$01
000979FD E1FA                       	smpsAlterNote       $FA
000979FF 01                         	dc.b	$01
00097A00 E1FD                       	smpsAlterNote       $FD
00097A02 ECF5                       	smpsPSGAlterVol     $F5
00097A04 9206                       	dc.b	nF1, $06
00097A06 EC04                       	smpsPSGAlterVol     $04
00097A08 E704                       	dc.b	smpsNoAttack, $04
00097A0A ECFC                       	smpsPSGAlterVol     $FC
00097A0C 9206                       	dc.b	nF1, $06
00097A0E EC04                       	smpsPSGAlterVol     $04
00097A10 E701                       	dc.b	smpsNoAttack, $01
00097A12 EC07                       	smpsPSGAlterVol     $07
00097A14 8006                       	dc.b	nRst, $06
00097A16 E100                       	smpsAlterNote       $00
00097A18 01                         	dc.b	$01
00097A19 E104                       	smpsAlterNote       $04
00097A1B 01                         	dc.b	$01
00097A1C E100                       	smpsAlterNote       $00
00097A1E 01                         	dc.b	$01
00097A1F E1FD                       	smpsAlterNote       $FD
00097A21 01                         	dc.b	$01
00097A22 ECF5                       	smpsPSGAlterVol     $F5
00097A24 9206                       	dc.b	nF1, $06
00097A26 EC04                       	smpsPSGAlterVol     $04
00097A28 E701                       	dc.b	smpsNoAttack, $01
00097A2A EC07                       	smpsPSGAlterVol     $07
00097A2C 8003                       	dc.b	nRst, $03
00097A2E ECF5                       	smpsPSGAlterVol     $F5
00097A30 9207                       	dc.b	nF1, $07
00097A32 EC0B                       	smpsPSGAlterVol     $0B
00097A34 8007                       	dc.b	nRst, $07
00097A36 E103                       	smpsAlterNote       $03
00097A38 0101                       	dc.b	$01, $01
00097A3A E1FD                       	smpsAlterNote       $FD
00097A3C 01                         	dc.b	$01
00097A3D E1FA                       	smpsAlterNote       $FA
00097A3F 01                         	dc.b	$01
00097A40 E1FD                       	smpsAlterNote       $FD
00097A42 ECF5                       	smpsPSGAlterVol     $F5
00097A44 9106                       	dc.b	nE1, $06
00097A46 EC0B                       	smpsPSGAlterVol     $0B
00097A48 8004                       	dc.b	nRst, $04
00097A4A ECF5                       	smpsPSGAlterVol     $F5
00097A4C 9106                       	dc.b	nE1, $06
00097A4E EC04                       	smpsPSGAlterVol     $04
00097A50 E701                       	dc.b	smpsNoAttack, $01
00097A52 EC07                       	smpsPSGAlterVol     $07
00097A54 8006                       	dc.b	nRst, $06
00097A56 E100                       	smpsAlterNote       $00
00097A58 01                         	dc.b	$01
00097A59 E104                       	smpsAlterNote       $04
00097A5B 01                         	dc.b	$01
00097A5C E100                       	smpsAlterNote       $00
00097A5E 01                         	dc.b	$01
00097A5F E1FA                       	smpsAlterNote       $FA
00097A61 01                         	dc.b	$01
00097A62 E1FD                       	smpsAlterNote       $FD
00097A64 ECF5                       	smpsPSGAlterVol     $F5
00097A66 9106                       	dc.b	nE1, $06
00097A68 EC04                       	smpsPSGAlterVol     $04
00097A6A E701                       	dc.b	smpsNoAttack, $01
00097A6C EC07                       	smpsPSGAlterVol     $07
00097A6E 8003                       	dc.b	nRst, $03
00097A70 ECF5                       	smpsPSGAlterVol     $F5
00097A72 9106                       	dc.b	nE1, $06
00097A74 EC04                       	smpsPSGAlterVol     $04
00097A76 E701                       	dc.b	smpsNoAttack, $01
00097A78 EC07                       	smpsPSGAlterVol     $07
00097A7A 8006                       	dc.b	nRst, $06
00097A7C E100                       	smpsAlterNote       $00
00097A7E 01                         	dc.b	$01
00097A7F E104                       	smpsAlterNote       $04
00097A81 01                         	dc.b	$01
00097A82 E103                       	smpsAlterNote       $03
00097A84 01                         	dc.b	$01
00097A85 E1FD                       	smpsAlterNote       $FD
00097A87 01                         	dc.b	$01
00097A88 ECF5                       	smpsPSGAlterVol     $F5
00097A8A 9107                       	dc.b	nE1, $07
00097A8C EC0B                       	smpsPSGAlterVol     $0B
00097A8E 8004                       	dc.b	nRst, $04
00097A90 ECF5                       	smpsPSGAlterVol     $F5
00097A92 9106                       	dc.b	nE1, $06
00097A94 EC0B                       	smpsPSGAlterVol     $0B
00097A96 8007                       	dc.b	nRst, $07
00097A98 E103                       	smpsAlterNote       $03
00097A9A 0101                       	dc.b	$01, $01
00097A9C E100                       	smpsAlterNote       $00
00097A9E 01                         	dc.b	$01
00097A9F E1FA                       	smpsAlterNote       $FA
00097AA1 01                         	dc.b	$01
00097AA2 E1FD                       	smpsAlterNote       $FD
00097AA4 ECF5                       	smpsPSGAlterVol     $F5
00097AA6 9106                       	dc.b	nE1, $06
00097AA8 EC04                       	smpsPSGAlterVol     $04
00097AAA E701                       	dc.b	smpsNoAttack, $01
00097AAC EC07                       	smpsPSGAlterVol     $07
00097AAE 8003                       	dc.b	nRst, $03
00097AB0 ECF5                       	smpsPSGAlterVol     $F5
00097AB2 9106                       	dc.b	nE1, $06
00097AB4 EC04                       	smpsPSGAlterVol     $04
00097AB6 E701                       	dc.b	smpsNoAttack, $01
00097AB8 EC07                       	smpsPSGAlterVol     $07
00097ABA 8003                       	dc.b	nRst, $03
00097ABC ECF5                       	smpsPSGAlterVol     $F5
00097ABE 9207                       	dc.b	nF1, $07
00097AC0 EC0B                       	smpsPSGAlterVol     $0B
00097AC2 8006                       	dc.b	nRst, $06
00097AC4 E100                       	smpsAlterNote       $00
00097AC6 01                         	dc.b	$01
00097AC7 E104                       	smpsAlterNote       $04
00097AC9 01                         	dc.b	$01
00097ACA E103                       	smpsAlterNote       $03
00097ACC 01                         	dc.b	$01
00097ACD E1FD                       	smpsAlterNote       $FD
00097ACF 01                         	dc.b	$01
00097AD0 E1F9                       	smpsAlterNote       $F9
00097AD2 01                         	dc.b	$01
00097AD3 E1FD                       	smpsAlterNote       $FD
00097AD5 01                         	dc.b	$01
00097AD6 E100                       	smpsAlterNote       $00
00097AD8 01                         	dc.b	$01
00097AD9 E104                       	smpsAlterNote       $04
00097ADB 01                         	dc.b	$01
00097ADC E1FD                       	smpsAlterNote       $FD
00097ADE ECF5                       	smpsPSGAlterVol     $F5
00097AE0 9203 9203                  	dc.b	nF1, $03, nF1, $03
00097AE4 EC04                       	smpsPSGAlterVol     $04
00097AE6 E701                       	dc.b	smpsNoAttack, $01
00097AE8 EC07                       	smpsPSGAlterVol     $07
00097AEA 8009                       	dc.b	nRst, $09
00097AEC E100                       	smpsAlterNote       $00
00097AEE 01                         	dc.b	$01
00097AEF E104                       	smpsAlterNote       $04
00097AF1 01                         	dc.b	$01
00097AF2 E103                       	smpsAlterNote       $03
00097AF4 01                         	dc.b	$01
00097AF5 E1FD                       	smpsAlterNote       $FD
00097AF7 01                         	dc.b	$01
00097AF8 E1F9                       	smpsAlterNote       $F9
00097AFA 01                         	dc.b	$01
00097AFB E1FD                       	smpsAlterNote       $FD
00097AFD 01                         	dc.b	$01
00097AFE E100                       	smpsAlterNote       $00
00097B00 01                         	dc.b	$01
00097B01 E104                       	smpsAlterNote       $04
00097B03 01                         	dc.b	$01
00097B04 E100                       	smpsAlterNote       $00
00097B06 01                         	dc.b	$01
00097B07 E1FA                       	smpsAlterNote       $FA
00097B09 01                         	dc.b	$01
00097B0A E1F9                       	smpsAlterNote       $F9
00097B0C 01                         	dc.b	$01
00097B0D E1FD                       	smpsAlterNote       $FD
00097B0F 01                         	dc.b	$01
00097B10 E103                       	smpsAlterNote       $03
00097B12 0101                       	dc.b	$01, $01
00097B14 E100                       	smpsAlterNote       $00
00097B16 01                         	dc.b	$01
00097B17 E1FD                       	smpsAlterNote       $FD
00097B19 ECF5                       	smpsPSGAlterVol     $F5
00097B1B 9202                       	dc.b	nF1, $02
00097B1D EC04                       	smpsPSGAlterVol     $04
00097B1F E701                       	dc.b	smpsNoAttack, $01
00097B21 ECFC                       	smpsPSGAlterVol     $FC
00097B23 9106                       	dc.b	nE1, $06
00097B25 EC04                       	smpsPSGAlterVol     $04
00097B27 E701                       	dc.b	smpsNoAttack, $01
00097B29 EC07                       	smpsPSGAlterVol     $07
00097B2B 8006                       	dc.b	nRst, $06
00097B2D E100                       	smpsAlterNote       $00
00097B2F 01                         	dc.b	$01
00097B30 E104                       	smpsAlterNote       $04
00097B32 01                         	dc.b	$01
00097B33 E100                       	smpsAlterNote       $00
00097B35 01                         	dc.b	$01
00097B36 E1FD                       	smpsAlterNote       $FD
00097B38 01                         	dc.b	$01
00097B39 E1F9                       	smpsAlterNote       $F9
00097B3B 01                         	dc.b	$01
00097B3C E1FD                       	smpsAlterNote       $FD
00097B3E 01                         	dc.b	$01
00097B3F E103                       	smpsAlterNote       $03
00097B41 01                         	dc.b	$01
00097B42 E104                       	smpsAlterNote       $04
00097B44 01                         	dc.b	$01
00097B45 E1FD                       	smpsAlterNote       $FD
00097B47 ECF5                       	smpsPSGAlterVol     $F5
00097B49 9102                       	dc.b	nE1, $02
00097B4B EC04                       	smpsPSGAlterVol     $04
00097B4D E701                       	dc.b	smpsNoAttack, $01
00097B4F ECFC                       	smpsPSGAlterVol     $FC
00097B51 920D                       	dc.b	nF1, $0D
00097B53 E100                       	smpsAlterNote       $00
00097B55 E701                       	dc.b	smpsNoAttack, $01
00097B57 E104                       	smpsAlterNote       $04
00097B59 E701                       	dc.b	smpsNoAttack, $01
00097B5B E100                       	smpsAlterNote       $00
00097B5D E701                       	dc.b	smpsNoAttack, $01
00097B5F E1FD                       	smpsAlterNote       $FD
00097B61 E701                       	dc.b	smpsNoAttack, $01
00097B63 E1F9                       	smpsAlterNote       $F9
00097B65 E701                       	dc.b	smpsNoAttack, $01
00097B67 E1FD                       	smpsAlterNote       $FD
00097B69 E701                       	dc.b	smpsNoAttack, $01
00097B6B E103                       	smpsAlterNote       $03
00097B6D E701                       	dc.b	smpsNoAttack, $01
00097B6F E104                       	smpsAlterNote       $04
00097B71 E701                       	dc.b	smpsNoAttack, $01
00097B73 E100                       	smpsAlterNote       $00
00097B75 E701                       	dc.b	smpsNoAttack, $01
00097B77 E1FA                       	smpsAlterNote       $FA
00097B79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097B7D E1FD                       	smpsAlterNote       $FD
00097B7F E701                       	dc.b	smpsNoAttack, $01
00097B81 E103                       	smpsAlterNote       $03
00097B83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097B87 E1FD                       	smpsAlterNote       $FD
00097B89 E701                       	dc.b	smpsNoAttack, $01
00097B8B E1F9                       	smpsAlterNote       $F9
00097B8D E701                       	dc.b	smpsNoAttack, $01
00097B8F E1FA                       	smpsAlterNote       $FA
00097B91 E701                       	dc.b	smpsNoAttack, $01
00097B93 E100                       	smpsAlterNote       $00
00097B95 EC04                       	smpsPSGAlterVol     $04
00097B97 E701                       	dc.b	smpsNoAttack, $01
00097B99 EC07                       	smpsPSGAlterVol     $07
00097B9B E104                       	smpsAlterNote       $04
00097B9D 8001                       	dc.b	nRst, $01
00097B9F E100                       	smpsAlterNote       $00
00097BA1 01                         	dc.b	$01
00097BA2 E1FD                       	smpsAlterNote       $FD
00097BA4 01                         	dc.b	$01
00097BA5 E1F9                       	smpsAlterNote       $F9
00097BA7 01                         	dc.b	$01
00097BA8 E1FD                       	smpsAlterNote       $FD
00097BAA 01                         	dc.b	$01
00097BAB E103                       	smpsAlterNote       $03
00097BAD 01                         	dc.b	$01
00097BAE E104                       	smpsAlterNote       $04
00097BB0 01                         	dc.b	$01
00097BB1 E1FD                       	smpsAlterNote       $FD
00097BB3 ECF5                       	smpsPSGAlterVol     $F5
00097BB5 9106                       	dc.b	nE1, $06
00097BB7 EC04                       	smpsPSGAlterVol     $04
00097BB9 E701                       	dc.b	smpsNoAttack, $01
00097BBB EC07                       	smpsPSGAlterVol     $07
00097BBD 8003                       	dc.b	nRst, $03
00097BBF ECF5                       	smpsPSGAlterVol     $F5
00097BC1 9106                       	dc.b	nE1, $06
00097BC3 EC04                       	smpsPSGAlterVol     $04
00097BC5 E701                       	dc.b	smpsNoAttack, $01
00097BC7 EC07                       	smpsPSGAlterVol     $07
00097BC9 8006                       	dc.b	nRst, $06
00097BCB E100                       	smpsAlterNote       $00
00097BCD 01                         	dc.b	$01
00097BCE E104                       	smpsAlterNote       $04
00097BD0 01                         	dc.b	$01
00097BD1 E100                       	smpsAlterNote       $00
00097BD3 01                         	dc.b	$01
00097BD4 E1FA                       	smpsAlterNote       $FA
00097BD6 01                         	dc.b	$01
00097BD7 E1FD                       	smpsAlterNote       $FD
00097BD9 ECF5                       	smpsPSGAlterVol     $F5
00097BDB 9206                       	dc.b	nF1, $06
00097BDD EC04                       	smpsPSGAlterVol     $04
00097BDF E701                       	dc.b	smpsNoAttack, $01
00097BE1 EC07                       	smpsPSGAlterVol     $07
00097BE3 8003                       	dc.b	nRst, $03
00097BE5 ECF5                       	smpsPSGAlterVol     $F5
00097BE7 9207                       	dc.b	nF1, $07
00097BE9 EC0B                       	smpsPSGAlterVol     $0B
00097BEB 8006                       	dc.b	nRst, $06
00097BED E100                       	smpsAlterNote       $00
00097BEF 01                         	dc.b	$01
00097BF0 E103                       	smpsAlterNote       $03
00097BF2 0101                       	dc.b	$01, $01
00097BF4 E1FD                       	smpsAlterNote       $FD
00097BF6 01                         	dc.b	$01
00097BF7 ECF5                       	smpsPSGAlterVol     $F5
00097BF9 9107                       	dc.b	nE1, $07
00097BFB EC0B                       	smpsPSGAlterVol     $0B
00097BFD 8004                       	dc.b	nRst, $04
00097BFF ECF5                       	smpsPSGAlterVol     $F5
00097C01 9106                       	dc.b	nE1, $06
00097C03 EC04                       	smpsPSGAlterVol     $04
00097C05 E701                       	dc.b	smpsNoAttack, $01
00097C07 EC07                       	smpsPSGAlterVol     $07
00097C09 8006                       	dc.b	nRst, $06
00097C0B E103                       	smpsAlterNote       $03
00097C0D 01                         	dc.b	$01
00097C0E E104                       	smpsAlterNote       $04
00097C10 01                         	dc.b	$01
00097C11 E100                       	smpsAlterNote       $00
00097C13 01                         	dc.b	$01
00097C14 E1FA                       	smpsAlterNote       $FA
00097C16 01                         	dc.b	$01
00097C17 E1FD                       	smpsAlterNote       $FD
00097C19 ECF5                       	smpsPSGAlterVol     $F5
00097C1B 9106                       	dc.b	nE1, $06
00097C1D EC04                       	smpsPSGAlterVol     $04
00097C1F E701                       	dc.b	smpsNoAttack, $01
00097C21 EC07                       	smpsPSGAlterVol     $07
00097C23 8003                       	dc.b	nRst, $03
00097C25 ECF5                       	smpsPSGAlterVol     $F5
00097C27 9106                       	dc.b	nE1, $06
00097C29 EC04                       	smpsPSGAlterVol     $04
00097C2B E701                       	dc.b	smpsNoAttack, $01
00097C2D EC07                       	smpsPSGAlterVol     $07
00097C2F 8003                       	dc.b	nRst, $03
00097C31 ECF5                       	smpsPSGAlterVol     $F5
00097C33 9207                       	dc.b	nF1, $07
00097C35 EC0B                       	smpsPSGAlterVol     $0B
00097C37 8006                       	dc.b	nRst, $06
00097C39 E100                       	smpsAlterNote       $00
00097C3B 01                         	dc.b	$01
00097C3C E103                       	smpsAlterNote       $03
00097C3E 0101                       	dc.b	$01, $01
00097C40 E1FD                       	smpsAlterNote       $FD
00097C42 01                         	dc.b	$01
00097C43 E1F9                       	smpsAlterNote       $F9
00097C45 01                         	dc.b	$01
00097C46 E1FA                       	smpsAlterNote       $FA
00097C48 01                         	dc.b	$01
00097C49 E100                       	smpsAlterNote       $00
00097C4B 01                         	dc.b	$01
00097C4C E104                       	smpsAlterNote       $04
00097C4E 01                         	dc.b	$01
00097C4F E1FD                       	smpsAlterNote       $FD
00097C51 ECF5                       	smpsPSGAlterVol     $F5
00097C53 9203 9203                  	dc.b	nF1, $03, nF1, $03
00097C57 EC04                       	smpsPSGAlterVol     $04
00097C59 E701                       	dc.b	smpsNoAttack, $01
00097C5B EC07                       	smpsPSGAlterVol     $07
00097C5D 8009                       	dc.b	nRst, $09
00097C5F E100                       	smpsAlterNote       $00
00097C61 01                         	dc.b	$01
00097C62 E103                       	smpsAlterNote       $03
00097C64 0101                       	dc.b	$01, $01
00097C66 E1FD                       	smpsAlterNote       $FD
00097C68 01                         	dc.b	$01
00097C69 E1F9                       	smpsAlterNote       $F9
00097C6B 01                         	dc.b	$01
00097C6C E1FA                       	smpsAlterNote       $FA
00097C6E 01                         	dc.b	$01
00097C6F E100                       	smpsAlterNote       $00
00097C71 01                         	dc.b	$01
00097C72 E104                       	smpsAlterNote       $04
00097C74 01                         	dc.b	$01
00097C75 E100                       	smpsAlterNote       $00
00097C77 01                         	dc.b	$01
00097C78 E1FD                       	smpsAlterNote       $FD
00097C7A 01                         	dc.b	$01
00097C7B E1F9                       	smpsAlterNote       $F9
00097C7D 01                         	dc.b	$01
00097C7E E1FD                       	smpsAlterNote       $FD
00097C80 01                         	dc.b	$01
00097C81 E103                       	smpsAlterNote       $03
00097C83 01                         	dc.b	$01
00097C84 E104                       	smpsAlterNote       $04
00097C86 01                         	dc.b	$01
00097C87 E100                       	smpsAlterNote       $00
00097C89 01                         	dc.b	$01
00097C8A E1FD                       	smpsAlterNote       $FD
00097C8C ECF5                       	smpsPSGAlterVol     $F5
00097C8E 9203 9106                  	dc.b	nF1, $03, nE1, $06
00097C92 EC04                       	smpsPSGAlterVol     $04
00097C94 E701                       	dc.b	smpsNoAttack, $01
00097C96 EC07                       	smpsPSGAlterVol     $07
00097C98 8006                       	dc.b	nRst, $06
00097C9A E100                       	smpsAlterNote       $00
00097C9C 01                         	dc.b	$01
00097C9D E104                       	smpsAlterNote       $04
00097C9F 01                         	dc.b	$01
00097CA0 E103                       	smpsAlterNote       $03
00097CA2 01                         	dc.b	$01
00097CA3 E1FD                       	smpsAlterNote       $FD
00097CA5 01                         	dc.b	$01
00097CA6 E1F9                       	smpsAlterNote       $F9
00097CA8 01                         	dc.b	$01
00097CA9 E1FD                       	smpsAlterNote       $FD
00097CAB 01                         	dc.b	$01
00097CAC E100                       	smpsAlterNote       $00
00097CAE 01                         	dc.b	$01
00097CAF E104                       	smpsAlterNote       $04
00097CB1 01                         	dc.b	$01
00097CB2 E1FD                       	smpsAlterNote       $FD
00097CB4 ECF5                       	smpsPSGAlterVol     $F5
00097CB6 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00097CBA E100                       	smpsAlterNote       $00
00097CBC E701                       	dc.b	smpsNoAttack, $01
00097CBE E104                       	smpsAlterNote       $04
00097CC0 E701                       	dc.b	smpsNoAttack, $01
00097CC2 E100                       	smpsAlterNote       $00
00097CC4 E701                       	dc.b	smpsNoAttack, $01
00097CC6 E1FD                       	smpsAlterNote       $FD
00097CC8 E701                       	dc.b	smpsNoAttack, $01
00097CCA E1F9                       	smpsAlterNote       $F9
00097CCC E701                       	dc.b	smpsNoAttack, $01
00097CCE E1FD                       	smpsAlterNote       $FD
00097CD0 E701                       	dc.b	smpsNoAttack, $01
00097CD2 E103                       	smpsAlterNote       $03
00097CD4 E701                       	dc.b	smpsNoAttack, $01
00097CD6 E104                       	smpsAlterNote       $04
00097CD8 E701                       	dc.b	smpsNoAttack, $01
00097CDA E100                       	smpsAlterNote       $00
00097CDC E701                       	dc.b	smpsNoAttack, $01
00097CDE E1FA                       	smpsAlterNote       $FA
00097CE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097CE4 E1FD                       	smpsAlterNote       $FD
00097CE6 E701                       	dc.b	smpsNoAttack, $01
00097CE8 E103                       	smpsAlterNote       $03
00097CEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097CEE E100                       	smpsAlterNote       $00
00097CF0 E701                       	dc.b	smpsNoAttack, $01
00097CF2 E1FA                       	smpsAlterNote       $FA
00097CF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097CF8 E100                       	smpsAlterNote       $00
00097CFA EC04                       	smpsPSGAlterVol     $04
00097CFC E701                       	dc.b	smpsNoAttack, $01
00097CFE EC07                       	smpsPSGAlterVol     $07
00097D00 E104                       	smpsAlterNote       $04
00097D02 8001                       	dc.b	nRst, $01
00097D04 E103                       	smpsAlterNote       $03
00097D06 01                         	dc.b	$01
00097D07 E1FD                       	smpsAlterNote       $FD
00097D09 01                         	dc.b	$01
00097D0A E1F9                       	smpsAlterNote       $F9
00097D0C 01                         	dc.b	$01
00097D0D E1FD                       	smpsAlterNote       $FD
00097D0F 01                         	dc.b	$01
00097D10 E100                       	smpsAlterNote       $00
00097D12 01                         	dc.b	$01
00097D13 E104                       	smpsAlterNote       $04
00097D15 01                         	dc.b	$01
00097D16 E1FD                       	smpsAlterNote       $FD
00097D18 ECF5                       	smpsPSGAlterVol     $F5
00097D1A 9106                       	dc.b	nE1, $06
00097D1C EC04                       	smpsPSGAlterVol     $04
00097D1E E701                       	dc.b	smpsNoAttack, $01
00097D20 EC07                       	smpsPSGAlterVol     $07
00097D22 8003                       	dc.b	nRst, $03
00097D24 ECF5                       	smpsPSGAlterVol     $F5
00097D26 9106                       	dc.b	nE1, $06
00097D28 EC04                       	smpsPSGAlterVol     $04
00097D2A E701                       	dc.b	smpsNoAttack, $01
00097D2C EC07                       	smpsPSGAlterVol     $07
00097D2E 8006                       	dc.b	nRst, $06
00097D30 E100                       	smpsAlterNote       $00
00097D32 01                         	dc.b	$01
00097D33 E104                       	smpsAlterNote       $04
00097D35 01                         	dc.b	$01
00097D36 E100                       	smpsAlterNote       $00
00097D38 01                         	dc.b	$01
00097D39 E1FD                       	smpsAlterNote       $FD
00097D3B 01                         	dc.b	$01
00097D3C ECF5                       	smpsPSGAlterVol     $F5
00097D3E 9206                       	dc.b	nF1, $06
00097D40 EC04                       	smpsPSGAlterVol     $04
00097D42 E701                       	dc.b	smpsNoAttack, $01
00097D44 EC07                       	smpsPSGAlterVol     $07
00097D46 8003                       	dc.b	nRst, $03
00097D48 ECF5                       	smpsPSGAlterVol     $F5
00097D4A 9207                       	dc.b	nF1, $07
00097D4C EC0B                       	smpsPSGAlterVol     $0B
00097D4E 8007                       	dc.b	nRst, $07
00097D50 E103                       	smpsAlterNote       $03
00097D52 0101                       	dc.b	$01, $01
00097D54 E1FD                       	smpsAlterNote       $FD
00097D56 01                         	dc.b	$01
00097D57 E1FA                       	smpsAlterNote       $FA
00097D59 01                         	dc.b	$01
00097D5A E1FD                       	smpsAlterNote       $FD
00097D5C ECF5                       	smpsPSGAlterVol     $F5
00097D5E 9106                       	dc.b	nE1, $06
00097D60 EC0B                       	smpsPSGAlterVol     $0B
00097D62 8004                       	dc.b	nRst, $04
00097D64 ECF5                       	smpsPSGAlterVol     $F5
00097D66 9106                       	dc.b	nE1, $06
00097D68 EC04                       	smpsPSGAlterVol     $04
00097D6A E701                       	dc.b	smpsNoAttack, $01
00097D6C EC07                       	smpsPSGAlterVol     $07
00097D6E 8006                       	dc.b	nRst, $06
00097D70 E100                       	smpsAlterNote       $00
00097D72 01                         	dc.b	$01
00097D73 E104                       	smpsAlterNote       $04
00097D75 01                         	dc.b	$01
00097D76 E100                       	smpsAlterNote       $00
00097D78 01                         	dc.b	$01
00097D79 E1FA                       	smpsAlterNote       $FA
00097D7B 01                         	dc.b	$01
00097D7C E1FD                       	smpsAlterNote       $FD
00097D7E ECF5                       	smpsPSGAlterVol     $F5
00097D80 9206                       	dc.b	nF1, $06
00097D82 EC04                       	smpsPSGAlterVol     $04
00097D84 E701                       	dc.b	smpsNoAttack, $01
00097D86 EC07                       	smpsPSGAlterVol     $07
00097D88 8003                       	dc.b	nRst, $03
00097D8A ECF5                       	smpsPSGAlterVol     $F5
00097D8C 9206                       	dc.b	nF1, $06
00097D8E EC04                       	smpsPSGAlterVol     $04
00097D90 E701                       	dc.b	smpsNoAttack, $01
00097D92 EC07                       	smpsPSGAlterVol     $07
00097D94 8006                       	dc.b	nRst, $06
00097D96 E100                       	smpsAlterNote       $00
00097D98 01                         	dc.b	$01
00097D99 E104                       	smpsAlterNote       $04
00097D9B 01                         	dc.b	$01
00097D9C E103                       	smpsAlterNote       $03
00097D9E 01                         	dc.b	$01
00097D9F E1FD                       	smpsAlterNote       $FD
00097DA1 01                         	dc.b	$01
00097DA2 ECF5                       	smpsPSGAlterVol     $F5
00097DA4 9107                       	dc.b	nE1, $07
00097DA6 EC0B                       	smpsPSGAlterVol     $0B
00097DA8 8004                       	dc.b	nRst, $04
00097DAA ECF5                       	smpsPSGAlterVol     $F5
00097DAC 9106                       	dc.b	nE1, $06
00097DAE EC0B                       	smpsPSGAlterVol     $0B
00097DB0 8007                       	dc.b	nRst, $07
00097DB2 E103                       	smpsAlterNote       $03
00097DB4 0101                       	dc.b	$01, $01
00097DB6 E100                       	smpsAlterNote       $00
00097DB8 01                         	dc.b	$01
00097DB9 E1FA                       	smpsAlterNote       $FA
00097DBB 01                         	dc.b	$01
00097DBC E1FD                       	smpsAlterNote       $FD
00097DBE ECF5                       	smpsPSGAlterVol     $F5
00097DC0 9206                       	dc.b	nF1, $06
00097DC2 EC04                       	smpsPSGAlterVol     $04
00097DC4 E701                       	dc.b	smpsNoAttack, $01
00097DC6 EC07                       	smpsPSGAlterVol     $07
00097DC8 8003                       	dc.b	nRst, $03
00097DCA ECF5                       	smpsPSGAlterVol     $F5
00097DCC 9206                       	dc.b	nF1, $06
00097DCE EC04                       	smpsPSGAlterVol     $04
00097DD0 E701                       	dc.b	smpsNoAttack, $01
00097DD2 EC07                       	smpsPSGAlterVol     $07
00097DD4 8006                       	dc.b	nRst, $06
00097DD6 E100                       	smpsAlterNote       $00
00097DD8 01                         	dc.b	$01
00097DD9 E104                       	smpsAlterNote       $04
00097DDB 01                         	dc.b	$01
00097DDC E100                       	smpsAlterNote       $00
00097DDE 01                         	dc.b	$01
00097DDF E1FD                       	smpsAlterNote       $FD
00097DE1 01                         	dc.b	$01
00097DE2 ECF5                       	smpsPSGAlterVol     $F5
00097DE4 9106                       	dc.b	nE1, $06
00097DE6 EC04                       	smpsPSGAlterVol     $04
00097DE8 E701                       	dc.b	smpsNoAttack, $01
00097DEA EC07                       	smpsPSGAlterVol     $07
00097DEC 8003                       	dc.b	nRst, $03
00097DEE ECF5                       	smpsPSGAlterVol     $F5
00097DF0 9107 9106                  	dc.b	nE1, $07, nE1, $06
00097DF4 EC04                       	smpsPSGAlterVol     $04
00097DF6 E701                       	dc.b	smpsNoAttack, $01
00097DF8 ECFC                       	smpsPSGAlterVol     $FC
00097DFA 9103                       	dc.b	nE1, $03
00097DFC EC04                       	smpsPSGAlterVol     $04
00097DFE E701                       	dc.b	smpsNoAttack, $01
00097E00 ECFC                       	smpsPSGAlterVol     $FC
00097E02 9102                       	dc.b	nE1, $02
00097E04 EC04                       	smpsPSGAlterVol     $04
00097E06 E701                       	dc.b	smpsNoAttack, $01
00097E08 ECFC                       	smpsPSGAlterVol     $FC
00097E0A 9103                       	dc.b	nE1, $03
00097E0C EC0B                       	smpsPSGAlterVol     $0B
00097E0E 800A                       	dc.b	nRst, $0A
00097E10 E100                       	smpsAlterNote       $00
00097E12 01                         	dc.b	$01
00097E13 E104                       	smpsAlterNote       $04
00097E15 01                         	dc.b	$01
00097E16 E100                       	smpsAlterNote       $00
00097E18 01                         	dc.b	$01
00097E19 E1FA                       	smpsAlterNote       $FA
00097E1B 01                         	dc.b	$01
00097E1C E1F9                       	smpsAlterNote       $F9
00097E1E 01                         	dc.b	$01
00097E1F E1FD                       	smpsAlterNote       $FD
00097E21 01                         	dc.b	$01
00097E22 E103                       	smpsAlterNote       $03
00097E24 0101                       	dc.b	$01, $01
00097E26 E100                       	smpsAlterNote       $00
00097E28 01                         	dc.b	$01
00097E29 E1FA                       	smpsAlterNote       $FA
00097E2B 0101                       	dc.b	$01, $01
00097E2D E1FD                       	smpsAlterNote       $FD
00097E2F ECF5                       	smpsPSGAlterVol     $F5
00097E31 9206                       	dc.b	nF1, $06
00097E33 EC04                       	smpsPSGAlterVol     $04
00097E35 E704                       	dc.b	smpsNoAttack, $04
00097E37 ECFC                       	smpsPSGAlterVol     $FC
00097E39 9206                       	dc.b	nF1, $06
00097E3B EC04                       	smpsPSGAlterVol     $04
00097E3D E701                       	dc.b	smpsNoAttack, $01
00097E3F EC07                       	smpsPSGAlterVol     $07
00097E41 8006                       	dc.b	nRst, $06
00097E43 E100                       	smpsAlterNote       $00
00097E45 01                         	dc.b	$01
00097E46 E104                       	smpsAlterNote       $04
00097E48 01                         	dc.b	$01
00097E49 E103                       	smpsAlterNote       $03
00097E4B 01                         	dc.b	$01
00097E4C E1FD                       	smpsAlterNote       $FD
00097E4E 01                         	dc.b	$01
00097E4F ECF5                       	smpsPSGAlterVol     $F5
00097E51 9407                       	dc.b	nG1, $07
00097E53 EC0B                       	smpsPSGAlterVol     $0B
00097E55 8004                       	dc.b	nRst, $04
00097E57 ECF5                       	smpsPSGAlterVol     $F5
00097E59 9406                       	dc.b	nG1, $06
00097E5B EC0B                       	smpsPSGAlterVol     $0B
00097E5D 8007                       	dc.b	nRst, $07
00097E5F E103                       	smpsAlterNote       $03
00097E61 0101                       	dc.b	$01, $01
00097E63 E1FD                       	smpsAlterNote       $FD
00097E65 01                         	dc.b	$01
00097E66 E1F9                       	smpsAlterNote       $F9
00097E68 01                         	dc.b	$01
00097E69 E1FD                       	smpsAlterNote       $FD
00097E6B ECF5                       	smpsPSGAlterVol     $F5
00097E6D 9206                       	dc.b	nF1, $06
00097E6F EC04                       	smpsPSGAlterVol     $04
00097E71 E701                       	dc.b	smpsNoAttack, $01
00097E73 EC07                       	smpsPSGAlterVol     $07
00097E75 8003                       	dc.b	nRst, $03
00097E77 ECF5                       	smpsPSGAlterVol     $F5
00097E79 9206                       	dc.b	nF1, $06
00097E7B EC04                       	smpsPSGAlterVol     $04
00097E7D E701                       	dc.b	smpsNoAttack, $01
00097E7F EC07                       	smpsPSGAlterVol     $07
00097E81 8006                       	dc.b	nRst, $06
00097E83 E100                       	smpsAlterNote       $00
00097E85 01                         	dc.b	$01
00097E86 E104                       	smpsAlterNote       $04
00097E88 01                         	dc.b	$01
00097E89 E100                       	smpsAlterNote       $00
00097E8B 01                         	dc.b	$01
00097E8C E1FA                       	smpsAlterNote       $FA
00097E8E 01                         	dc.b	$01
00097E8F E1FD                       	smpsAlterNote       $FD
00097E91 ECF5                       	smpsPSGAlterVol     $F5
00097E93 9206                       	dc.b	nF1, $06
00097E95 EC04                       	smpsPSGAlterVol     $04
00097E97 E701                       	dc.b	smpsNoAttack, $01
00097E99 EC07                       	smpsPSGAlterVol     $07
00097E9B 8003                       	dc.b	nRst, $03
00097E9D ECF5                       	smpsPSGAlterVol     $F5
00097E9F 9107                       	dc.b	nE1, $07
00097EA1 EC0B                       	smpsPSGAlterVol     $0B
00097EA3 8006                       	dc.b	nRst, $06
00097EA5 E100                       	smpsAlterNote       $00
00097EA7 01                         	dc.b	$01
00097EA8 E103                       	smpsAlterNote       $03
00097EAA 0101                       	dc.b	$01, $01
00097EAC E1FD                       	smpsAlterNote       $FD
00097EAE 01                         	dc.b	$01
00097EAF ECF5                       	smpsPSGAlterVol     $F5
00097EB1 9207                       	dc.b	nF1, $07
00097EB3 EC0B                       	smpsPSGAlterVol     $0B
00097EB5 8004                       	dc.b	nRst, $04
00097EB7 ECF5                       	smpsPSGAlterVol     $F5
00097EB9 9206                       	dc.b	nF1, $06
00097EBB EC04                       	smpsPSGAlterVol     $04
00097EBD E701                       	dc.b	smpsNoAttack, $01
00097EBF EC07                       	smpsPSGAlterVol     $07
00097EC1 8006                       	dc.b	nRst, $06
00097EC3 E103                       	smpsAlterNote       $03
00097EC5 01                         	dc.b	$01
00097EC6 E104                       	smpsAlterNote       $04
00097EC8 01                         	dc.b	$01
00097EC9 E100                       	smpsAlterNote       $00
00097ECB 01                         	dc.b	$01
00097ECC E1FB                       	smpsAlterNote       $FB
00097ECE 01                         	dc.b	$01
00097ECF E1FD                       	smpsAlterNote       $FD
00097ED1 ECF5                       	smpsPSGAlterVol     $F5
00097ED3 9406                       	dc.b	nG1, $06
00097ED5 EC04                       	smpsPSGAlterVol     $04
00097ED7 E701                       	dc.b	smpsNoAttack, $01
00097ED9 EC07                       	smpsPSGAlterVol     $07
00097EDB 8003                       	dc.b	nRst, $03
00097EDD ECF5                       	smpsPSGAlterVol     $F5
00097EDF 9406                       	dc.b	nG1, $06
00097EE1 EC04                       	smpsPSGAlterVol     $04
00097EE3 E701                       	dc.b	smpsNoAttack, $01
00097EE5 EC07                       	smpsPSGAlterVol     $07
00097EE7 8006                       	dc.b	nRst, $06
00097EE9 E100                       	smpsAlterNote       $00
00097EEB 01                         	dc.b	$01
00097EEC E104                       	smpsAlterNote       $04
00097EEE 01                         	dc.b	$01
00097EEF E100                       	smpsAlterNote       $00
00097EF1 01                         	dc.b	$01
00097EF2 E1FD                       	smpsAlterNote       $FD
00097EF4 01                         	dc.b	$01
00097EF5 ECF5                       	smpsPSGAlterVol     $F5
00097EF7 9206                       	dc.b	nF1, $06
00097EF9 EC04                       	smpsPSGAlterVol     $04
00097EFB E701                       	dc.b	smpsNoAttack, $01
00097EFD EC07                       	smpsPSGAlterVol     $07
00097EFF 8003                       	dc.b	nRst, $03
00097F01 ECF5                       	smpsPSGAlterVol     $F5
00097F03 9207                       	dc.b	nF1, $07
00097F05 EC0B                       	smpsPSGAlterVol     $0B
00097F07 8007                       	dc.b	nRst, $07
00097F09 E103                       	smpsAlterNote       $03
00097F0B 0101                       	dc.b	$01, $01
00097F0D E1FD                       	smpsAlterNote       $FD
00097F0F 01                         	dc.b	$01
00097F10 E1FA                       	smpsAlterNote       $FA
00097F12 01                         	dc.b	$01
00097F13 E1FD                       	smpsAlterNote       $FD
00097F15 ECF5                       	smpsPSGAlterVol     $F5
00097F17 9206                       	dc.b	nF1, $06
00097F19 EC0B                       	smpsPSGAlterVol     $0B
00097F1B 8004                       	dc.b	nRst, $04
00097F1D ECF5                       	smpsPSGAlterVol     $F5
00097F1F 9206                       	dc.b	nF1, $06
00097F21 EC04                       	smpsPSGAlterVol     $04
00097F23 E701                       	dc.b	smpsNoAttack, $01
00097F25 EC07                       	smpsPSGAlterVol     $07
00097F27 8006                       	dc.b	nRst, $06
00097F29 E100                       	smpsAlterNote       $00
00097F2B 01                         	dc.b	$01
00097F2C E104                       	smpsAlterNote       $04
00097F2E 01                         	dc.b	$01
00097F2F E100                       	smpsAlterNote       $00
00097F31 01                         	dc.b	$01
00097F32 E1FA                       	smpsAlterNote       $FA
00097F34 01                         	dc.b	$01
00097F35 E1FD                       	smpsAlterNote       $FD
00097F37 ECF5                       	smpsPSGAlterVol     $F5
00097F39 9206                       	dc.b	nF1, $06
00097F3B EC04                       	smpsPSGAlterVol     $04
00097F3D E701                       	dc.b	smpsNoAttack, $01
00097F3F EC07                       	smpsPSGAlterVol     $07
00097F41 8003                       	dc.b	nRst, $03
00097F43 ECF5                       	smpsPSGAlterVol     $F5
00097F45 9207                       	dc.b	nF1, $07
00097F47 EC0B                       	smpsPSGAlterVol     $0B
00097F49 8006                       	dc.b	nRst, $06
00097F4B E100                       	smpsAlterNote       $00
00097F4D 01                         	dc.b	$01
00097F4E E103                       	smpsAlterNote       $03
00097F50 0101                       	dc.b	$01, $01
00097F52 E1FD                       	smpsAlterNote       $FD
00097F54 01                         	dc.b	$01
00097F55 ECF5                       	smpsPSGAlterVol     $F5
00097F57 9207                       	dc.b	nF1, $07
00097F59 EC0B                       	smpsPSGAlterVol     $0B
00097F5B 8004                       	dc.b	nRst, $04
00097F5D ECF5                       	smpsPSGAlterVol     $F5
00097F5F 9206                       	dc.b	nF1, $06
00097F61 EC0B                       	smpsPSGAlterVol     $0B
00097F63 8007                       	dc.b	nRst, $07
00097F65 E103                       	smpsAlterNote       $03
00097F67 0101                       	dc.b	$01, $01
00097F69 E100                       	smpsAlterNote       $00
00097F6B 01                         	dc.b	$01
00097F6C E1FA                       	smpsAlterNote       $FA
00097F6E 01                         	dc.b	$01
00097F6F E1FD                       	smpsAlterNote       $FD
00097F71 ECF5                       	smpsPSGAlterVol     $F5
00097F73 9206                       	dc.b	nF1, $06
00097F75 EC04                       	smpsPSGAlterVol     $04
00097F77 E701                       	dc.b	smpsNoAttack, $01
00097F79 EC07                       	smpsPSGAlterVol     $07
00097F7B 8003                       	dc.b	nRst, $03
00097F7D ECF5                       	smpsPSGAlterVol     $F5
00097F7F 9206                       	dc.b	nF1, $06
00097F81 EC04                       	smpsPSGAlterVol     $04
00097F83 E701                       	dc.b	smpsNoAttack, $01
00097F85 EC07                       	smpsPSGAlterVol     $07
00097F87 8006                       	dc.b	nRst, $06
00097F89 E100                       	smpsAlterNote       $00
00097F8B 01                         	dc.b	$01
00097F8C E104                       	smpsAlterNote       $04
00097F8E 01                         	dc.b	$01
00097F8F E100                       	smpsAlterNote       $00
00097F91 01                         	dc.b	$01
00097F92 E1FD                       	smpsAlterNote       $FD
00097F94 01                         	dc.b	$01
00097F95 ECF5                       	smpsPSGAlterVol     $F5
00097F97 9206                       	dc.b	nF1, $06
00097F99 EC04                       	smpsPSGAlterVol     $04
00097F9B E701                       	dc.b	smpsNoAttack, $01
00097F9D EC07                       	smpsPSGAlterVol     $07
00097F9F 8003                       	dc.b	nRst, $03
00097FA1 ECF5                       	smpsPSGAlterVol     $F5
00097FA3 9207                       	dc.b	nF1, $07
00097FA5 EC0B                       	smpsPSGAlterVol     $0B
00097FA7 8007                       	dc.b	nRst, $07
00097FA9 E104                       	smpsAlterNote       $04
00097FAB 0101                       	dc.b	$01, $01
00097FAD E1FB                       	smpsAlterNote       $FB
00097FAF 01                         	dc.b	$01
00097FB0 E1F6                       	smpsAlterNote       $F6
00097FB2 0101                       	dc.b	$01, $01
00097FB4 E1FF                       	smpsAlterNote       $FF
00097FB6 01                         	dc.b	$01
00097FB7 E105                       	smpsAlterNote       $05
00097FB9 01                         	dc.b	$01
00097FBA E104                       	smpsAlterNote       $04
00097FBC 01                         	dc.b	$01
00097FBD E1FB                       	smpsAlterNote       $FB
00097FBF 01                         	dc.b	$01
00097FC0 E1F5                       	smpsAlterNote       $F5
00097FC2 01                         	dc.b	$01
00097FC3 E1FC                       	smpsAlterNote       $FC
00097FC5 ECF5                       	smpsPSGAlterVol     $F5
00097FC7 8B0E                       	dc.b	nBb0, $0E
00097FC9 E102                       	smpsAlterNote       $02
00097FCB EC0B                       	smpsPSGAlterVol     $0B
00097FCD 8001                       	dc.b	nRst, $01
00097FCF E101                       	smpsAlterNote       $01
00097FD1 01                         	dc.b	$01
00097FD2 E1FC                       	smpsAlterNote       $FC
00097FD4 01                         	dc.b	$01
00097FD5 E1F9                       	smpsAlterNote       $F9
00097FD7 0101                       	dc.b	$01, $01
00097FD9 E1FF                       	smpsAlterNote       $FF
00097FDB 01                         	dc.b	$01
00097FDC E102                       	smpsAlterNote       $02
00097FDE 01                         	dc.b	$01
00097FDF E1FF                       	smpsAlterNote       $FF
00097FE1 01                         	dc.b	$01
00097FE2 E1FC                       	smpsAlterNote       $FC
00097FE4 01                         	dc.b	$01
00097FE5 E1F8                       	smpsAlterNote       $F8
00097FE7 01                         	dc.b	$01
00097FE8 E1FC                       	smpsAlterNote       $FC
00097FEA 01                         	dc.b	$01
00097FEB E101                       	smpsAlterNote       $01
00097FED 01                         	dc.b	$01
00097FEE E102                       	smpsAlterNote       $02
00097FF0 01                         	dc.b	$01
00097FF1 E1FF                       	smpsAlterNote       $FF
00097FF3 01                         	dc.b	$01
00097FF4 E1FB                       	smpsAlterNote       $FB
00097FF6 ECF5                       	smpsPSGAlterVol     $F5
00097FF8 8D0D                       	dc.b	nC1, $0D
00097FFA E101                       	smpsAlterNote       $01
00097FFC EC0B                       	smpsPSGAlterVol     $0B
00097FFE 8001                       	dc.b	nRst, $01
00098000 E102                       	smpsAlterNote       $02
00098002 01                         	dc.b	$01
00098003 E1FF                       	smpsAlterNote       $FF
00098005 01                         	dc.b	$01
00098006 E1F9                       	smpsAlterNote       $F9
00098008 0101                       	dc.b	$01, $01
0009800A E1FC                       	smpsAlterNote       $FC
0009800C 01                         	dc.b	$01
0009800D E101                       	smpsAlterNote       $01
0009800F 0101                       	dc.b	$01, $01
00098011 E1FC                       	smpsAlterNote       $FC
00098013 01                         	dc.b	$01
00098014 E1F9                       	smpsAlterNote       $F9
00098016 0101                       	dc.b	$01, $01
00098018 E1FF                       	smpsAlterNote       $FF
0009801A 01                         	dc.b	$01
0009801B E102                       	smpsAlterNote       $02
0009801D 01                         	dc.b	$01
0009801E E101                       	smpsAlterNote       $01
00098020 01                         	dc.b	$01
00098021 E1FC                       	smpsAlterNote       $FC
00098023 ECF5                       	smpsPSGAlterVol     $F5
00098025 8F0D                       	dc.b	nD1, $0D
00098027 E1FF                       	smpsAlterNote       $FF
00098029 EC04                       	smpsPSGAlterVol     $04
0009802B E701                       	dc.b	smpsNoAttack, $01
0009802D EC07                       	smpsPSGAlterVol     $07
0009802F E103                       	smpsAlterNote       $03
00098031 8001                       	dc.b	nRst, $01
00098033 E102                       	smpsAlterNote       $02
00098035 01                         	dc.b	$01
00098036 E1FD                       	smpsAlterNote       $FD
00098038 01                         	dc.b	$01
00098039 E1F9                       	smpsAlterNote       $F9
0009803B 01                         	dc.b	$01
0009803C E1FD                       	smpsAlterNote       $FD
0009803E 01                         	dc.b	$01
0009803F E100                       	smpsAlterNote       $00
00098041 01                         	dc.b	$01
00098042 E103                       	smpsAlterNote       $03
00098044 01                         	dc.b	$01
00098045 E100                       	smpsAlterNote       $00
00098047 01                         	dc.b	$01
00098048 E1FA                       	smpsAlterNote       $FA
0009804A 01                         	dc.b	$01
0009804B E1F9                       	smpsAlterNote       $F9
0009804D 01                         	dc.b	$01
0009804E E1FD                       	smpsAlterNote       $FD
00098050 01                         	dc.b	$01
00098051 E102                       	smpsAlterNote       $02
00098053 0101                       	dc.b	$01, $01
00098055 E100                       	smpsAlterNote       $00
00098057 01                         	dc.b	$01
00098058 E1FD                       	smpsAlterNote       $FD
0009805A ECF5                       	smpsPSGAlterVol     $F5
0009805C 910D                       	dc.b	nE1, $0D
0009805E E103                       	smpsAlterNote       $03
00098060 EC0B                       	smpsPSGAlterVol     $0B
00098062 8001 01                    	dc.b	nRst, $01, $01
00098065 E100                       	smpsAlterNote       $00
00098067 01                         	dc.b	$01
00098068 E1FA                       	smpsAlterNote       $FA
0009806A 0101                       	dc.b	$01, $01
0009806C E100                       	smpsAlterNote       $00
0009806E 01                         	dc.b	$01
0009806F E103                       	smpsAlterNote       $03
00098071 01                         	dc.b	$01
00098072 E1FD                       	smpsAlterNote       $FD
00098074 ECF5                       	smpsPSGAlterVol     $F5
00098076 9206                       	dc.b	nF1, $06
00098078 EC04                       	smpsPSGAlterVol     $04
0009807A E701                       	dc.b	smpsNoAttack, $01
0009807C EC07                       	smpsPSGAlterVol     $07
0009807E 8003                       	dc.b	nRst, $03
00098080 ECF5                       	smpsPSGAlterVol     $F5
00098082 9207                       	dc.b	nF1, $07
00098084 EC0B                       	smpsPSGAlterVol     $0B
00098086 8006                       	dc.b	nRst, $06
00098088 E100                       	smpsAlterNote       $00
0009808A 01                         	dc.b	$01
0009808B E103                       	smpsAlterNote       $03
0009808D 0101                       	dc.b	$01, $01
0009808F E1FD                       	smpsAlterNote       $FD
00098091 01                         	dc.b	$01
00098092 ECF5                       	smpsPSGAlterVol     $F5
00098094 9407                       	dc.b	nG1, $07
00098096 EC0B                       	smpsPSGAlterVol     $0B
00098098 8004                       	dc.b	nRst, $04
0009809A ECF5                       	smpsPSGAlterVol     $F5
0009809C 9406                       	dc.b	nG1, $06
0009809E EC04                       	smpsPSGAlterVol     $04
000980A0 E701                       	dc.b	smpsNoAttack, $01
000980A2 EC07                       	smpsPSGAlterVol     $07
000980A4 8006                       	dc.b	nRst, $06
000980A6 E103                       	smpsAlterNote       $03
000980A8 01                         	dc.b	$01
000980A9 E104                       	smpsAlterNote       $04
000980AB 01                         	dc.b	$01
000980AC E100                       	smpsAlterNote       $00
000980AE 01                         	dc.b	$01
000980AF E1F9                       	smpsAlterNote       $F9
000980B1 01                         	dc.b	$01
000980B2 E1FD                       	smpsAlterNote       $FD
000980B4 ECF5                       	smpsPSGAlterVol     $F5
000980B6 9206                       	dc.b	nF1, $06
000980B8 EC04                       	smpsPSGAlterVol     $04
000980BA E701                       	dc.b	smpsNoAttack, $01
000980BC EC07                       	smpsPSGAlterVol     $07
000980BE 8003                       	dc.b	nRst, $03
000980C0 ECF5                       	smpsPSGAlterVol     $F5
000980C2 9206                       	dc.b	nF1, $06
000980C4 EC04                       	smpsPSGAlterVol     $04
000980C6 E701                       	dc.b	smpsNoAttack, $01
000980C8 EC07                       	smpsPSGAlterVol     $07
000980CA 8006                       	dc.b	nRst, $06
000980CC E100                       	smpsAlterNote       $00
000980CE 01                         	dc.b	$01
000980CF E104                       	smpsAlterNote       $04
000980D1 01                         	dc.b	$01
000980D2 E103                       	smpsAlterNote       $03
000980D4 01                         	dc.b	$01
000980D5 E1FD                       	smpsAlterNote       $FD
000980D7 01                         	dc.b	$01
000980D8 ECF5                       	smpsPSGAlterVol     $F5
000980DA 9407                       	dc.b	nG1, $07
000980DC EC0B                       	smpsPSGAlterVol     $0B
000980DE 8004                       	dc.b	nRst, $04
000980E0 ECF5                       	smpsPSGAlterVol     $F5
000980E2 9406                       	dc.b	nG1, $06
000980E4 EC0B                       	smpsPSGAlterVol     $0B
000980E6 8007                       	dc.b	nRst, $07
000980E8 E103                       	smpsAlterNote       $03
000980EA 0101                       	dc.b	$01, $01
000980EC E100                       	smpsAlterNote       $00
000980EE 01                         	dc.b	$01
000980EF E1F9                       	smpsAlterNote       $F9
000980F1 01                         	dc.b	$01
000980F2 E1FD                       	smpsAlterNote       $FD
000980F4 ECF5                       	smpsPSGAlterVol     $F5
000980F6 9206                       	dc.b	nF1, $06
000980F8 EC04                       	smpsPSGAlterVol     $04
000980FA E701                       	dc.b	smpsNoAttack, $01
000980FC EC07                       	smpsPSGAlterVol     $07
000980FE 8003                       	dc.b	nRst, $03
00098100 ECF5                       	smpsPSGAlterVol     $F5
00098102 9206                       	dc.b	nF1, $06
00098104 EC04                       	smpsPSGAlterVol     $04
00098106 E701                       	dc.b	smpsNoAttack, $01
00098108 EC07                       	smpsPSGAlterVol     $07
0009810A 8006                       	dc.b	nRst, $06
0009810C E100                       	smpsAlterNote       $00
0009810E 01                         	dc.b	$01
0009810F E104                       	smpsAlterNote       $04
00098111 01                         	dc.b	$01
00098112 E100                       	smpsAlterNote       $00
00098114 01                         	dc.b	$01
00098115 E1FB                       	smpsAlterNote       $FB
00098117 01                         	dc.b	$01
00098118 E1FD                       	smpsAlterNote       $FD
0009811A ECF5                       	smpsPSGAlterVol     $F5
0009811C 9406                       	dc.b	nG1, $06
0009811E EC04                       	smpsPSGAlterVol     $04
00098120 E701                       	dc.b	smpsNoAttack, $01
00098122 EC07                       	smpsPSGAlterVol     $07
00098124 8003                       	dc.b	nRst, $03
00098126 ECF5                       	smpsPSGAlterVol     $F5
00098128 9407                       	dc.b	nG1, $07
0009812A EC0B                       	smpsPSGAlterVol     $0B
0009812C 8006                       	dc.b	nRst, $06
0009812E E100                       	smpsAlterNote       $00
00098130 01                         	dc.b	$01
00098131 E103                       	smpsAlterNote       $03
00098133 0101                       	dc.b	$01, $01
00098135 E1FD                       	smpsAlterNote       $FD
00098137 01                         	dc.b	$01
00098138 ECF5                       	smpsPSGAlterVol     $F5
0009813A 9207                       	dc.b	nF1, $07
0009813C EC0B                       	smpsPSGAlterVol     $0B
0009813E 8004                       	dc.b	nRst, $04
00098140 ECF5                       	smpsPSGAlterVol     $F5
00098142 9206                       	dc.b	nF1, $06
00098144 EC04                       	smpsPSGAlterVol     $04
00098146 E701                       	dc.b	smpsNoAttack, $01
00098148 ECFC                       	smpsPSGAlterVol     $FC
0009814A E1FC                       	smpsAlterNote       $FC
0009814C 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
00098150 EC04                       	smpsPSGAlterVol     $04
00098152 E701                       	dc.b	smpsNoAttack, $01
00098154 ECFC                       	smpsPSGAlterVol     $FC
00098156 9003                       	dc.b	nEb1, $03
00098158 E1FD                       	smpsAlterNote       $FD
0009815A 9403                       	dc.b	nG1, $03
0009815C EC04                       	smpsPSGAlterVol     $04
0009815E E701                       	dc.b	smpsNoAttack, $01
00098160 E1FE                       	smpsAlterNote       $FE
00098162 ECFC                       	smpsPSGAlterVol     $FC
00098164 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00098168 EC04                       	smpsPSGAlterVol     $04
0009816A E701                       	dc.b	smpsNoAttack, $01
0009816C EC07                       	smpsPSGAlterVol     $07
0009816E 8009                       	dc.b	nRst, $09
00098170 E100                       	smpsAlterNote       $00
00098172 01                         	dc.b	$01
00098173 F6F5 19                    	smpsJump            music84_Jump07
00098176                            
00098176                            ; PSG2 Data
00098176                            music84_PSG2:
00098176 E1FC                       	smpsAlterNote       $FC
00098178 EC04                       	smpsPSGAlterVol     $04
0009817A 8F03                       	dc.b	nD1, $03
0009817C E1FD                       	smpsAlterNote       $FD
0009817E 9203                       	dc.b	nF1, $03
00098180 EC04                       	smpsPSGAlterVol     $04
00098182 E701                       	dc.b	smpsNoAttack, $01
00098184 E1FE                       	smpsAlterNote       $FE
00098186 ECFC                       	smpsPSGAlterVol     $FC
00098188 9603                       	dc.b	nA1, $03
0009818A E1FD                       	smpsAlterNote       $FD
0009818C 9103                       	dc.b	nE1, $03
0009818E EC04                       	smpsPSGAlterVol     $04
00098190 E701                       	dc.b	smpsNoAttack, $01
00098192 ECFC                       	smpsPSGAlterVol     $FC
00098194 9403                       	dc.b	nG1, $03
00098196 E1FE                       	smpsAlterNote       $FE
00098198 9703                       	dc.b	nBb1, $03
0009819A EC04                       	smpsPSGAlterVol     $04
0009819C E701                       	dc.b	smpsNoAttack, $01
0009819E E1FF                       	smpsAlterNote       $FF
000981A0 ECFC                       	smpsPSGAlterVol     $FC
000981A2 9B02                       	dc.b	nD2, $02
000981A4 EC04                       	smpsPSGAlterVol     $04
000981A6 E701                       	dc.b	smpsNoAttack, $01
000981A8 ECFC                       	smpsPSGAlterVol     $FC
000981AA E1FE                       	smpsAlterNote       $FE
000981AC 9A03                       	dc.b	nCs2, $03
000981AE EC0B                       	smpsPSGAlterVol     $0B
000981B0 800A                       	dc.b	nRst, $0A
000981B2 E102                       	smpsAlterNote       $02
000981B4 01                         	dc.b	$01
000981B5 E10A                       	smpsAlterNote       $0A
000981B7 01                         	dc.b	$01
000981B8 E102                       	smpsAlterNote       $02
000981BA 01                         	dc.b	$01
000981BB E1FC                       	smpsAlterNote       $FC
000981BD 01                         	dc.b	$01
000981BE E10A                       	smpsAlterNote       $0A
000981C0 01                         	dc.b	$01
000981C1 E1FC                       	smpsAlterNote       $FC
000981C3 01                         	dc.b	$01
000981C4 E108                       	smpsAlterNote       $08
000981C6 01                         	dc.b	$01
000981C7 E10A                       	smpsAlterNote       $0A
000981C9 01                         	dc.b	$01
000981CA E102                       	smpsAlterNote       $02
000981CC 01                         	dc.b	$01
000981CD E1F7                       	smpsAlterNote       $F7
000981CF 0101                       	dc.b	$01, $01
000981D1 E102                       	smpsAlterNote       $02
000981D3 01                         	dc.b	$01
000981D4 E108                       	smpsAlterNote       $08
000981D6 0101                       	dc.b	$01, $01
000981D8 E1FC                       	smpsAlterNote       $FC
000981DA 01                         	dc.b	$01
000981DB E10A                       	smpsAlterNote       $0A
000981DD 01                         	dc.b	$01
000981DE E1F7                       	smpsAlterNote       $F7
000981E0 01                         	dc.b	$01
000981E1 E102                       	smpsAlterNote       $02
000981E3 01                         	dc.b	$01
000981E4 E10A                       	smpsAlterNote       $0A
000981E6 01                         	dc.b	$01
000981E7 E102                       	smpsAlterNote       $02
000981E9 01                         	dc.b	$01
000981EA E1FC                       	smpsAlterNote       $FC
000981EC 01                         	dc.b	$01
000981ED                            
000981ED                            music84_Jump06:
000981ED E10A                       	smpsAlterNote       $0A
000981EF 8001                       	dc.b	nRst, $01
000981F1 E1FC                       	smpsAlterNote       $FC
000981F3 01                         	dc.b	$01
000981F4 E108                       	smpsAlterNote       $08
000981F6 01                         	dc.b	$01
000981F7 E10A                       	smpsAlterNote       $0A
000981F9 01                         	dc.b	$01
000981FA E1FC                       	smpsAlterNote       $FC
000981FC ECF5                       	smpsPSGAlterVol     $F5
000981FE 8F06                       	dc.b	nD1, $06
00098200 EC04                       	smpsPSGAlterVol     $04
00098202 E701                       	dc.b	smpsNoAttack, $01
00098204 EC07                       	smpsPSGAlterVol     $07
00098206 8003                       	dc.b	nRst, $03
00098208 ECF5                       	smpsPSGAlterVol     $F5
0009820A 8F06                       	dc.b	nD1, $06
0009820C EC04                       	smpsPSGAlterVol     $04
0009820E E701                       	dc.b	smpsNoAttack, $01
00098210 EC07                       	smpsPSGAlterVol     $07
00098212 8006                       	dc.b	nRst, $06
00098214 E1FF                       	smpsAlterNote       $FF
00098216 01                         	dc.b	$01
00098217 E102                       	smpsAlterNote       $02
00098219 01                         	dc.b	$01
0009821A E1FF                       	smpsAlterNote       $FF
0009821C 01                         	dc.b	$01
0009821D E1F9                       	smpsAlterNote       $F9
0009821F 01                         	dc.b	$01
00098220 E1FC                       	smpsAlterNote       $FC
00098222 ECF5                       	smpsPSGAlterVol     $F5
00098224 9006                       	dc.b	nEb1, $06
00098226 EC04                       	smpsPSGAlterVol     $04
00098228 E701                       	dc.b	smpsNoAttack, $01
0009822A EC07                       	smpsPSGAlterVol     $07
0009822C 8003                       	dc.b	nRst, $03
0009822E ECF5                       	smpsPSGAlterVol     $F5
00098230 9007                       	dc.b	nEb1, $07
00098232 EC0B                       	smpsPSGAlterVol     $0B
00098234 8006                       	dc.b	nRst, $06
00098236 E1FF                       	smpsAlterNote       $FF
00098238 01                         	dc.b	$01
00098239 E103                       	smpsAlterNote       $03
0009823B 0101                       	dc.b	$01, $01
0009823D E1FC                       	smpsAlterNote       $FC
0009823F 01                         	dc.b	$01
00098240 ECF5                       	smpsPSGAlterVol     $F5
00098242 8F07                       	dc.b	nD1, $07
00098244 EC0B                       	smpsPSGAlterVol     $0B
00098246 8004                       	dc.b	nRst, $04
00098248 ECF5                       	smpsPSGAlterVol     $F5
0009824A 8F06                       	dc.b	nD1, $06
0009824C EC04                       	smpsPSGAlterVol     $04
0009824E E701                       	dc.b	smpsNoAttack, $01
00098250 EC07                       	smpsPSGAlterVol     $07
00098252 8006                       	dc.b	nRst, $06
00098254 E102                       	smpsAlterNote       $02
00098256 01                         	dc.b	$01
00098257 E103                       	smpsAlterNote       $03
00098259 01                         	dc.b	$01
0009825A E1FF                       	smpsAlterNote       $FF
0009825C 01                         	dc.b	$01
0009825D E1F9                       	smpsAlterNote       $F9
0009825F 01                         	dc.b	$01
00098260 E1FC                       	smpsAlterNote       $FC
00098262 ECF5                       	smpsPSGAlterVol     $F5
00098264 8F06                       	dc.b	nD1, $06
00098266 EC04                       	smpsPSGAlterVol     $04
00098268 E701                       	dc.b	smpsNoAttack, $01
0009826A EC07                       	smpsPSGAlterVol     $07
0009826C 8003                       	dc.b	nRst, $03
0009826E ECF5                       	smpsPSGAlterVol     $F5
00098270 8F06                       	dc.b	nD1, $06
00098272 EC04                       	smpsPSGAlterVol     $04
00098274 E701                       	dc.b	smpsNoAttack, $01
00098276 EC07                       	smpsPSGAlterVol     $07
00098278 8006                       	dc.b	nRst, $06
0009827A E1FF                       	smpsAlterNote       $FF
0009827C 01                         	dc.b	$01
0009827D E103                       	smpsAlterNote       $03
0009827F 01                         	dc.b	$01
00098280 E1FF                       	smpsAlterNote       $FF
00098282 01                         	dc.b	$01
00098283 E1FC                       	smpsAlterNote       $FC
00098285 01                         	dc.b	$01
00098286 ECF5                       	smpsPSGAlterVol     $F5
00098288 8F06                       	dc.b	nD1, $06
0009828A EC04                       	smpsPSGAlterVol     $04
0009828C E701                       	dc.b	smpsNoAttack, $01
0009828E EC07                       	smpsPSGAlterVol     $07
00098290 8003                       	dc.b	nRst, $03
00098292 ECF5                       	smpsPSGAlterVol     $F5
00098294 8F07                       	dc.b	nD1, $07
00098296 EC0B                       	smpsPSGAlterVol     $0B
00098298 8007                       	dc.b	nRst, $07
0009829A E101                       	smpsAlterNote       $01
0009829C 0101                       	dc.b	$01, $01
0009829E E1FC                       	smpsAlterNote       $FC
000982A0 01                         	dc.b	$01
000982A1 E1F9                       	smpsAlterNote       $F9
000982A3 01                         	dc.b	$01
000982A4 E1FC                       	smpsAlterNote       $FC
000982A6 ECF5                       	smpsPSGAlterVol     $F5
000982A8 9006                       	dc.b	nEb1, $06
000982AA EC0B                       	smpsPSGAlterVol     $0B
000982AC 8004                       	dc.b	nRst, $04
000982AE ECF5                       	smpsPSGAlterVol     $F5
000982B0 9006                       	dc.b	nEb1, $06
000982B2 EC04                       	smpsPSGAlterVol     $04
000982B4 E701                       	dc.b	smpsNoAttack, $01
000982B6 EC07                       	smpsPSGAlterVol     $07
000982B8 8006                       	dc.b	nRst, $06
000982BA E100                       	smpsAlterNote       $00
000982BC 01                         	dc.b	$01
000982BD E102                       	smpsAlterNote       $02
000982BF 01                         	dc.b	$01
000982C0 E100                       	smpsAlterNote       $00
000982C2 01                         	dc.b	$01
000982C3 E1FD                       	smpsAlterNote       $FD
000982C5 01                         	dc.b	$01
000982C6 E1FF                       	smpsAlterNote       $FF
000982C8 ECF5                       	smpsPSGAlterVol     $F5
000982CA 9B06                       	dc.b	nD2, $06
000982CC EC04                       	smpsPSGAlterVol     $04
000982CE E701                       	dc.b	smpsNoAttack, $01
000982D0 EC07                       	smpsPSGAlterVol     $07
000982D2 8003                       	dc.b	nRst, $03
000982D4 ECF5                       	smpsPSGAlterVol     $F5
000982D6 9B07                       	dc.b	nD2, $07
000982D8 EC0B                       	smpsPSGAlterVol     $0B
000982DA 8006                       	dc.b	nRst, $06
000982DC E102                       	smpsAlterNote       $02
000982DE 01                         	dc.b	$01
000982DF E106                       	smpsAlterNote       $06
000982E1 01                         	dc.b	$01
000982E2 E105                       	smpsAlterNote       $05
000982E4 01                         	dc.b	$01
000982E5 E1FF                       	smpsAlterNote       $FF
000982E7 01                         	dc.b	$01
000982E8 ECF5                       	smpsPSGAlterVol     $F5
000982EA 9B07                       	dc.b	nD2, $07
000982EC EC0B                       	smpsPSGAlterVol     $0B
000982EE 8004                       	dc.b	nRst, $04
000982F0 ECF5                       	smpsPSGAlterVol     $F5
000982F2 9B06                       	dc.b	nD2, $06
000982F4 EC0B                       	smpsPSGAlterVol     $0B
000982F6 8007                       	dc.b	nRst, $07
000982F8 E105                       	smpsAlterNote       $05
000982FA 0101                       	dc.b	$01, $01
000982FC E102                       	smpsAlterNote       $02
000982FE 01                         	dc.b	$01
000982FF E1FC                       	smpsAlterNote       $FC
00098301 01                         	dc.b	$01
00098302 E1FF                       	smpsAlterNote       $FF
00098304 ECF5                       	smpsPSGAlterVol     $F5
00098306 9B06                       	dc.b	nD2, $06
00098308 EC04                       	smpsPSGAlterVol     $04
0009830A E701                       	dc.b	smpsNoAttack, $01
0009830C EC07                       	smpsPSGAlterVol     $07
0009830E 8003                       	dc.b	nRst, $03
00098310 ECF5                       	smpsPSGAlterVol     $F5
00098312 9B06                       	dc.b	nD2, $06
00098314 EC04                       	smpsPSGAlterVol     $04
00098316 E701                       	dc.b	smpsNoAttack, $01
00098318 EC07                       	smpsPSGAlterVol     $07
0009831A 8006                       	dc.b	nRst, $06
0009831C E102                       	smpsAlterNote       $02
0009831E 01                         	dc.b	$01
0009831F E106                       	smpsAlterNote       $06
00098321 01                         	dc.b	$01
00098322 E102                       	smpsAlterNote       $02
00098324 01                         	dc.b	$01
00098325 E1FF                       	smpsAlterNote       $FF
00098327 01                         	dc.b	$01
00098328 ECF5                       	smpsPSGAlterVol     $F5
0009832A 9B06                       	dc.b	nD2, $06
0009832C EC04                       	smpsPSGAlterVol     $04
0009832E E701                       	dc.b	smpsNoAttack, $01
00098330 EC07                       	smpsPSGAlterVol     $07
00098332 8003                       	dc.b	nRst, $03
00098334 ECF5                       	smpsPSGAlterVol     $F5
00098336 9B07                       	dc.b	nD2, $07
00098338 EC0B                       	smpsPSGAlterVol     $0B
0009833A 8007                       	dc.b	nRst, $07
0009833C E105                       	smpsAlterNote       $05
0009833E 0101                       	dc.b	$01, $01
00098340 E1FF                       	smpsAlterNote       $FF
00098342 01                         	dc.b	$01
00098343 E1FC                       	smpsAlterNote       $FC
00098345 01                         	dc.b	$01
00098346 E1FF                       	smpsAlterNote       $FF
00098348 ECF5                       	smpsPSGAlterVol     $F5
0009834A 9B06                       	dc.b	nD2, $06
0009834C EC0B                       	smpsPSGAlterVol     $0B
0009834E 8004                       	dc.b	nRst, $04
00098350 ECF5                       	smpsPSGAlterVol     $F5
00098352 9B06                       	dc.b	nD2, $06
00098354 EC04                       	smpsPSGAlterVol     $04
00098356 E701                       	dc.b	smpsNoAttack, $01
00098358 EC07                       	smpsPSGAlterVol     $07
0009835A 8006                       	dc.b	nRst, $06
0009835C E105                       	smpsAlterNote       $05
0009835E 01                         	dc.b	$01
0009835F E106                       	smpsAlterNote       $06
00098361 01                         	dc.b	$01
00098362 E102                       	smpsAlterNote       $02
00098364 01                         	dc.b	$01
00098365 E1FC                       	smpsAlterNote       $FC
00098367 01                         	dc.b	$01
00098368 E1FF                       	smpsAlterNote       $FF
0009836A ECF5                       	smpsPSGAlterVol     $F5
0009836C 9B06                       	dc.b	nD2, $06
0009836E EC04                       	smpsPSGAlterVol     $04
00098370 E701                       	dc.b	smpsNoAttack, $01
00098372 EC07                       	smpsPSGAlterVol     $07
00098374 8003                       	dc.b	nRst, $03
00098376 ECF5                       	smpsPSGAlterVol     $F5
00098378 9B06                       	dc.b	nD2, $06
0009837A EC04                       	smpsPSGAlterVol     $04
0009837C E701                       	dc.b	smpsNoAttack, $01
0009837E EC07                       	smpsPSGAlterVol     $07
00098380 8006                       	dc.b	nRst, $06
00098382 E102                       	smpsAlterNote       $02
00098384 01                         	dc.b	$01
00098385 E106                       	smpsAlterNote       $06
00098387 01                         	dc.b	$01
00098388 E105                       	smpsAlterNote       $05
0009838A 01                         	dc.b	$01
0009838B E1FF                       	smpsAlterNote       $FF
0009838D 01                         	dc.b	$01
0009838E ECF5                       	smpsPSGAlterVol     $F5
00098390 9B07                       	dc.b	nD2, $07
00098392 EC0B                       	smpsPSGAlterVol     $0B
00098394 8004                       	dc.b	nRst, $04
00098396 ECF5                       	smpsPSGAlterVol     $F5
00098398 9B06                       	dc.b	nD2, $06
0009839A EC0B                       	smpsPSGAlterVol     $0B
0009839C 8007                       	dc.b	nRst, $07
0009839E E105                       	smpsAlterNote       $05
000983A0 0101                       	dc.b	$01, $01
000983A2 E102                       	smpsAlterNote       $02
000983A4 01                         	dc.b	$01
000983A5 E1FC                       	smpsAlterNote       $FC
000983A7 01                         	dc.b	$01
000983A8 E1FF                       	smpsAlterNote       $FF
000983AA ECF5                       	smpsPSGAlterVol     $F5
000983AC 9B06                       	dc.b	nD2, $06
000983AE EC04                       	smpsPSGAlterVol     $04
000983B0 E701                       	dc.b	smpsNoAttack, $01
000983B2 EC07                       	smpsPSGAlterVol     $07
000983B4 8003                       	dc.b	nRst, $03
000983B6 ECF5                       	smpsPSGAlterVol     $F5
000983B8 9B06                       	dc.b	nD2, $06
000983BA EC04                       	smpsPSGAlterVol     $04
000983BC E701                       	dc.b	smpsNoAttack, $01
000983BE EC07                       	smpsPSGAlterVol     $07
000983C0 8006                       	dc.b	nRst, $06
000983C2 E102                       	smpsAlterNote       $02
000983C4 01                         	dc.b	$01
000983C5 E106                       	smpsAlterNote       $06
000983C7 01                         	dc.b	$01
000983C8 E102                       	smpsAlterNote       $02
000983CA 01                         	dc.b	$01
000983CB E1FF                       	smpsAlterNote       $FF
000983CD 01                         	dc.b	$01
000983CE ECF5                       	smpsPSGAlterVol     $F5
000983D0 9B06                       	dc.b	nD2, $06
000983D2 EC04                       	smpsPSGAlterVol     $04
000983D4 E701                       	dc.b	smpsNoAttack, $01
000983D6 EC07                       	smpsPSGAlterVol     $07
000983D8 8003                       	dc.b	nRst, $03
000983DA ECF5                       	smpsPSGAlterVol     $F5
000983DC 9B07                       	dc.b	nD2, $07
000983DE E1FE                       	smpsAlterNote       $FE
000983E0 9706                       	dc.b	nBb1, $06
000983E2 EC04                       	smpsPSGAlterVol     $04
000983E4 E701                       	dc.b	smpsNoAttack, $01
000983E6 ECFC                       	smpsPSGAlterVol     $FC
000983E8 9703                       	dc.b	nBb1, $03
000983EA EC04                       	smpsPSGAlterVol     $04
000983EC E701                       	dc.b	smpsNoAttack, $01
000983EE ECFC                       	smpsPSGAlterVol     $FC
000983F0 9702                       	dc.b	nBb1, $02
000983F2 EC04                       	smpsPSGAlterVol     $04
000983F4 E701                       	dc.b	smpsNoAttack, $01
000983F6 ECFC                       	smpsPSGAlterVol     $FC
000983F8 9606                       	dc.b	nA1, $06
000983FA EC04                       	smpsPSGAlterVol     $04
000983FC E701                       	dc.b	smpsNoAttack, $01
000983FE EC07                       	smpsPSGAlterVol     $07
00098400 8006                       	dc.b	nRst, $06
00098402 E101                       	smpsAlterNote       $01
00098404 01                         	dc.b	$01
00098405 E107                       	smpsAlterNote       $07
00098407 01                         	dc.b	$01
00098408 E101                       	smpsAlterNote       $01
0009840A 01                         	dc.b	$01
0009840B E1F8                       	smpsAlterNote       $F8
0009840D 01                         	dc.b	$01
0009840E E1F7                       	smpsAlterNote       $F7
00098410 01                         	dc.b	$01
00098411 E1FC                       	smpsAlterNote       $FC
00098413 01                         	dc.b	$01
00098414 E106                       	smpsAlterNote       $06
00098416 01                         	dc.b	$01
00098417 E107                       	smpsAlterNote       $07
00098419 01                         	dc.b	$01
0009841A E101                       	smpsAlterNote       $01
0009841C 01                         	dc.b	$01
0009841D E1F8                       	smpsAlterNote       $F8
0009841F 0101                       	dc.b	$01, $01
00098421 E1FC                       	smpsAlterNote       $FC
00098423 ECF5                       	smpsPSGAlterVol     $F5
00098425 8F06                       	dc.b	nD1, $06
00098427 EC04                       	smpsPSGAlterVol     $04
00098429 E701                       	dc.b	smpsNoAttack, $01
0009842B EC07                       	smpsPSGAlterVol     $07
0009842D 8003                       	dc.b	nRst, $03
0009842F ECF5                       	smpsPSGAlterVol     $F5
00098431 8F06                       	dc.b	nD1, $06
00098433 EC04                       	smpsPSGAlterVol     $04
00098435 E701                       	dc.b	smpsNoAttack, $01
00098437 EC07                       	smpsPSGAlterVol     $07
00098439 8006                       	dc.b	nRst, $06
0009843B E1FF                       	smpsAlterNote       $FF
0009843D 01                         	dc.b	$01
0009843E E102                       	smpsAlterNote       $02
00098440 01                         	dc.b	$01
00098441 E101                       	smpsAlterNote       $01
00098443 01                         	dc.b	$01
00098444 E1FC                       	smpsAlterNote       $FC
00098446 01                         	dc.b	$01
00098447 ECF5                       	smpsPSGAlterVol     $F5
00098449 9007                       	dc.b	nEb1, $07
0009844B EC0B                       	smpsPSGAlterVol     $0B
0009844D 8004                       	dc.b	nRst, $04
0009844F ECF5                       	smpsPSGAlterVol     $F5
00098451 9006                       	dc.b	nEb1, $06
00098453 EC0B                       	smpsPSGAlterVol     $0B
00098455 8007                       	dc.b	nRst, $07
00098457 E103                       	smpsAlterNote       $03
00098459 0101                       	dc.b	$01, $01
0009845B E1FC                       	smpsAlterNote       $FC
0009845D 01                         	dc.b	$01
0009845E E1F9                       	smpsAlterNote       $F9
00098460 01                         	dc.b	$01
00098461 E1FC                       	smpsAlterNote       $FC
00098463 ECF5                       	smpsPSGAlterVol     $F5
00098465 8F06                       	dc.b	nD1, $06
00098467 EC04                       	smpsPSGAlterVol     $04
00098469 E701                       	dc.b	smpsNoAttack, $01
0009846B EC07                       	smpsPSGAlterVol     $07
0009846D 8003                       	dc.b	nRst, $03
0009846F ECF5                       	smpsPSGAlterVol     $F5
00098471 8F06                       	dc.b	nD1, $06
00098473 EC04                       	smpsPSGAlterVol     $04
00098475 E701                       	dc.b	smpsNoAttack, $01
00098477 EC07                       	smpsPSGAlterVol     $07
00098479 8006                       	dc.b	nRst, $06
0009847B E1FF                       	smpsAlterNote       $FF
0009847D 01                         	dc.b	$01
0009847E E103                       	smpsAlterNote       $03
00098480 01                         	dc.b	$01
00098481 E1FF                       	smpsAlterNote       $FF
00098483 01                         	dc.b	$01
00098484 E1F9                       	smpsAlterNote       $F9
00098486 01                         	dc.b	$01
00098487 E1FC                       	smpsAlterNote       $FC
00098489 ECF5                       	smpsPSGAlterVol     $F5
0009848B 8F06                       	dc.b	nD1, $06
0009848D EC04                       	smpsPSGAlterVol     $04
0009848F E701                       	dc.b	smpsNoAttack, $01
00098491 EC07                       	smpsPSGAlterVol     $07
00098493 8003                       	dc.b	nRst, $03
00098495 ECF5                       	smpsPSGAlterVol     $F5
00098497 8F07                       	dc.b	nD1, $07
00098499 EC0B                       	smpsPSGAlterVol     $0B
0009849B 8006                       	dc.b	nRst, $06
0009849D E1FF                       	smpsAlterNote       $FF
0009849F 01                         	dc.b	$01
000984A0 E102                       	smpsAlterNote       $02
000984A2 0101                       	dc.b	$01, $01
000984A4 E1FC                       	smpsAlterNote       $FC
000984A6 01                         	dc.b	$01
000984A7 ECF5                       	smpsPSGAlterVol     $F5
000984A9 8F07                       	dc.b	nD1, $07
000984AB EC0B                       	smpsPSGAlterVol     $0B
000984AD 8004                       	dc.b	nRst, $04
000984AF ECF5                       	smpsPSGAlterVol     $F5
000984B1 8F06                       	dc.b	nD1, $06
000984B3 EC04                       	smpsPSGAlterVol     $04
000984B5 E701                       	dc.b	smpsNoAttack, $01
000984B7 EC07                       	smpsPSGAlterVol     $07
000984B9 8006                       	dc.b	nRst, $06
000984BB E101                       	smpsAlterNote       $01
000984BD 01                         	dc.b	$01
000984BE E102                       	smpsAlterNote       $02
000984C0 01                         	dc.b	$01
000984C1 E1FF                       	smpsAlterNote       $FF
000984C3 01                         	dc.b	$01
000984C4 E1F9                       	smpsAlterNote       $F9
000984C6 01                         	dc.b	$01
000984C7 E1FC                       	smpsAlterNote       $FC
000984C9 ECF5                       	smpsPSGAlterVol     $F5
000984CB 9006                       	dc.b	nEb1, $06
000984CD EC04                       	smpsPSGAlterVol     $04
000984CF E701                       	dc.b	smpsNoAttack, $01
000984D1 EC07                       	smpsPSGAlterVol     $07
000984D3 8003                       	dc.b	nRst, $03
000984D5 ECF5                       	smpsPSGAlterVol     $F5
000984D7 9006                       	dc.b	nEb1, $06
000984D9 EC04                       	smpsPSGAlterVol     $04
000984DB E701                       	dc.b	smpsNoAttack, $01
000984DD EC07                       	smpsPSGAlterVol     $07
000984DF 8006                       	dc.b	nRst, $06
000984E1 E100                       	smpsAlterNote       $00
000984E3 01                         	dc.b	$01
000984E4 E102                       	smpsAlterNote       $02
000984E6 01                         	dc.b	$01
000984E7 E100                       	smpsAlterNote       $00
000984E9 01                         	dc.b	$01
000984EA E1FF                       	smpsAlterNote       $FF
000984EC 01                         	dc.b	$01
000984ED ECF5                       	smpsPSGAlterVol     $F5
000984EF 9B06                       	dc.b	nD2, $06
000984F1 EC04                       	smpsPSGAlterVol     $04
000984F3 E701                       	dc.b	smpsNoAttack, $01
000984F5 EC07                       	smpsPSGAlterVol     $07
000984F7 8003                       	dc.b	nRst, $03
000984F9 ECF5                       	smpsPSGAlterVol     $F5
000984FB 9B07                       	dc.b	nD2, $07
000984FD EC0B                       	smpsPSGAlterVol     $0B
000984FF 8007                       	dc.b	nRst, $07
00098501 E105                       	smpsAlterNote       $05
00098503 0101                       	dc.b	$01, $01
00098505 E1FF                       	smpsAlterNote       $FF
00098507 01                         	dc.b	$01
00098508 E1FC                       	smpsAlterNote       $FC
0009850A 01                         	dc.b	$01
0009850B E1FF                       	smpsAlterNote       $FF
0009850D ECF5                       	smpsPSGAlterVol     $F5
0009850F 9B06                       	dc.b	nD2, $06
00098511 EC0B                       	smpsPSGAlterVol     $0B
00098513 8004                       	dc.b	nRst, $04
00098515 ECF5                       	smpsPSGAlterVol     $F5
00098517 9B06                       	dc.b	nD2, $06
00098519 EC04                       	smpsPSGAlterVol     $04
0009851B E701                       	dc.b	smpsNoAttack, $01
0009851D EC07                       	smpsPSGAlterVol     $07
0009851F 8006                       	dc.b	nRst, $06
00098521 E102                       	smpsAlterNote       $02
00098523 01                         	dc.b	$01
00098524 E106                       	smpsAlterNote       $06
00098526 01                         	dc.b	$01
00098527 E102                       	smpsAlterNote       $02
00098529 01                         	dc.b	$01
0009852A E1FC                       	smpsAlterNote       $FC
0009852C 01                         	dc.b	$01
0009852D E1FF                       	smpsAlterNote       $FF
0009852F ECF5                       	smpsPSGAlterVol     $F5
00098531 9B06                       	dc.b	nD2, $06
00098533 EC04                       	smpsPSGAlterVol     $04
00098535 E701                       	dc.b	smpsNoAttack, $01
00098537 EC07                       	smpsPSGAlterVol     $07
00098539 8003                       	dc.b	nRst, $03
0009853B ECF5                       	smpsPSGAlterVol     $F5
0009853D 9B07                       	dc.b	nD2, $07
0009853F EC0B                       	smpsPSGAlterVol     $0B
00098541 8006                       	dc.b	nRst, $06
00098543 E102                       	smpsAlterNote       $02
00098545 01                         	dc.b	$01
00098546 E105                       	smpsAlterNote       $05
00098548 0101                       	dc.b	$01, $01
0009854A E1FF                       	smpsAlterNote       $FF
0009854C 01                         	dc.b	$01
0009854D ECF5                       	smpsPSGAlterVol     $F5
0009854F 9B07                       	dc.b	nD2, $07
00098551 EC0B                       	smpsPSGAlterVol     $0B
00098553 8004                       	dc.b	nRst, $04
00098555 ECF5                       	smpsPSGAlterVol     $F5
00098557 9B06                       	dc.b	nD2, $06
00098559 EC0B                       	smpsPSGAlterVol     $0B
0009855B 8007                       	dc.b	nRst, $07
0009855D E105                       	smpsAlterNote       $05
0009855F 0101                       	dc.b	$01, $01
00098561 E102                       	smpsAlterNote       $02
00098563 01                         	dc.b	$01
00098564 E1FC                       	smpsAlterNote       $FC
00098566 01                         	dc.b	$01
00098567 E1FF                       	smpsAlterNote       $FF
00098569 ECF5                       	smpsPSGAlterVol     $F5
0009856B 9B06                       	dc.b	nD2, $06
0009856D EC04                       	smpsPSGAlterVol     $04
0009856F E701                       	dc.b	smpsNoAttack, $01
00098571 EC07                       	smpsPSGAlterVol     $07
00098573 8003                       	dc.b	nRst, $03
00098575 ECF5                       	smpsPSGAlterVol     $F5
00098577 9B06                       	dc.b	nD2, $06
00098579 EC04                       	smpsPSGAlterVol     $04
0009857B E701                       	dc.b	smpsNoAttack, $01
0009857D EC07                       	smpsPSGAlterVol     $07
0009857F 8006                       	dc.b	nRst, $06
00098581 E102                       	smpsAlterNote       $02
00098583 01                         	dc.b	$01
00098584 E106                       	smpsAlterNote       $06
00098586 01                         	dc.b	$01
00098587 E102                       	smpsAlterNote       $02
00098589 01                         	dc.b	$01
0009858A E1FF                       	smpsAlterNote       $FF
0009858C 01                         	dc.b	$01
0009858D ECF5                       	smpsPSGAlterVol     $F5
0009858F 9B06                       	dc.b	nD2, $06
00098591 EC04                       	smpsPSGAlterVol     $04
00098593 E701                       	dc.b	smpsNoAttack, $01
00098595 EC07                       	smpsPSGAlterVol     $07
00098597 8003                       	dc.b	nRst, $03
00098599 ECF5                       	smpsPSGAlterVol     $F5
0009859B 9B07                       	dc.b	nD2, $07
0009859D EC0B                       	smpsPSGAlterVol     $0B
0009859F 8007                       	dc.b	nRst, $07
000985A1 E105                       	smpsAlterNote       $05
000985A3 0101                       	dc.b	$01, $01
000985A5 E1FF                       	smpsAlterNote       $FF
000985A7 01                         	dc.b	$01
000985A8 E1FC                       	smpsAlterNote       $FC
000985AA 01                         	dc.b	$01
000985AB E1FF                       	smpsAlterNote       $FF
000985AD ECF5                       	smpsPSGAlterVol     $F5
000985AF 9B06                       	dc.b	nD2, $06
000985B1 EC0B                       	smpsPSGAlterVol     $0B
000985B3 8004                       	dc.b	nRst, $04
000985B5 ECF5                       	smpsPSGAlterVol     $F5
000985B7 9B06                       	dc.b	nD2, $06
000985B9 EC04                       	smpsPSGAlterVol     $04
000985BB E701                       	dc.b	smpsNoAttack, $01
000985BD EC07                       	smpsPSGAlterVol     $07
000985BF 8006                       	dc.b	nRst, $06
000985C1 E102                       	smpsAlterNote       $02
000985C3 01                         	dc.b	$01
000985C4 E106                       	smpsAlterNote       $06
000985C6 01                         	dc.b	$01
000985C7 E102                       	smpsAlterNote       $02
000985C9 01                         	dc.b	$01
000985CA E1FC                       	smpsAlterNote       $FC
000985CC 01                         	dc.b	$01
000985CD E1FF                       	smpsAlterNote       $FF
000985CF ECF5                       	smpsPSGAlterVol     $F5
000985D1 9B06                       	dc.b	nD2, $06
000985D3 EC04                       	smpsPSGAlterVol     $04
000985D5 E701                       	dc.b	smpsNoAttack, $01
000985D7 EC07                       	smpsPSGAlterVol     $07
000985D9 8003                       	dc.b	nRst, $03
000985DB ECF5                       	smpsPSGAlterVol     $F5
000985DD 9B06                       	dc.b	nD2, $06
000985DF EC04                       	smpsPSGAlterVol     $04
000985E1 E701                       	dc.b	smpsNoAttack, $01
000985E3 EC07                       	smpsPSGAlterVol     $07
000985E5 8006                       	dc.b	nRst, $06
000985E7 E102                       	smpsAlterNote       $02
000985E9 01                         	dc.b	$01
000985EA E106                       	smpsAlterNote       $06
000985EC 01                         	dc.b	$01
000985ED E105                       	smpsAlterNote       $05
000985EF 01                         	dc.b	$01
000985F0 E1FF                       	smpsAlterNote       $FF
000985F2 01                         	dc.b	$01
000985F3 ECF5                       	smpsPSGAlterVol     $F5
000985F5 9B07                       	dc.b	nD2, $07
000985F7 EC0B                       	smpsPSGAlterVol     $0B
000985F9 8004                       	dc.b	nRst, $04
000985FB ECF5                       	smpsPSGAlterVol     $F5
000985FD 9B06                       	dc.b	nD2, $06
000985FF EC0B                       	smpsPSGAlterVol     $0B
00098601 8007                       	dc.b	nRst, $07
00098603 E105                       	smpsAlterNote       $05
00098605 0101                       	dc.b	$01, $01
00098607 E101                       	smpsAlterNote       $01
00098609 01                         	dc.b	$01
0009860A E1FB                       	smpsAlterNote       $FB
0009860C 01                         	dc.b	$01
0009860D E1FE                       	smpsAlterNote       $FE
0009860F ECF5                       	smpsPSGAlterVol     $F5
00098611 9A06                       	dc.b	nCs2, $06
00098613 EC04                       	smpsPSGAlterVol     $04
00098615 E701                       	dc.b	smpsNoAttack, $01
00098617 EC07                       	smpsPSGAlterVol     $07
00098619 8003                       	dc.b	nRst, $03
0009861B ECF5                       	smpsPSGAlterVol     $F5
0009861D 9A06                       	dc.b	nCs2, $06
0009861F EC04                       	smpsPSGAlterVol     $04
00098621 E701                       	dc.b	smpsNoAttack, $01
00098623 EC07                       	smpsPSGAlterVol     $07
00098625 8003                       	dc.b	nRst, $03
00098627 E1FC                       	smpsAlterNote       $FC
00098629 ECF5                       	smpsPSGAlterVol     $F5
0009862B 8F07                       	dc.b	nD1, $07
0009862D EC0B                       	smpsPSGAlterVol     $0B
0009862F 8006                       	dc.b	nRst, $06
00098631 E1FF                       	smpsAlterNote       $FF
00098633 01                         	dc.b	$01
00098634 E103                       	smpsAlterNote       $03
00098636 01                         	dc.b	$01
00098637 E102                       	smpsAlterNote       $02
00098639 01                         	dc.b	$01
0009863A E1FC                       	smpsAlterNote       $FC
0009863C 01                         	dc.b	$01
0009863D E1F8                       	smpsAlterNote       $F8
0009863F 01                         	dc.b	$01
00098640 E1FC                       	smpsAlterNote       $FC
00098642 01                         	dc.b	$01
00098643 E1FF                       	smpsAlterNote       $FF
00098645 01                         	dc.b	$01
00098646 E103                       	smpsAlterNote       $03
00098648 01                         	dc.b	$01
00098649 E1FC                       	smpsAlterNote       $FC
0009864B ECF5                       	smpsPSGAlterVol     $F5
0009864D 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00098651 EC04                       	smpsPSGAlterVol     $04
00098653 E701                       	dc.b	smpsNoAttack, $01
00098655 EC07                       	smpsPSGAlterVol     $07
00098657 8009                       	dc.b	nRst, $09
00098659 E1FF                       	smpsAlterNote       $FF
0009865B 01                         	dc.b	$01
0009865C E103                       	smpsAlterNote       $03
0009865E 01                         	dc.b	$01
0009865F E102                       	smpsAlterNote       $02
00098661 01                         	dc.b	$01
00098662 E1FC                       	smpsAlterNote       $FC
00098664 01                         	dc.b	$01
00098665 E1F8                       	smpsAlterNote       $F8
00098667 01                         	dc.b	$01
00098668 E1FC                       	smpsAlterNote       $FC
0009866A 01                         	dc.b	$01
0009866B E1FF                       	smpsAlterNote       $FF
0009866D 01                         	dc.b	$01
0009866E E103                       	smpsAlterNote       $03
00098670 01                         	dc.b	$01
00098671 E1FF                       	smpsAlterNote       $FF
00098673 01                         	dc.b	$01
00098674 E1F9                       	smpsAlterNote       $F9
00098676 01                         	dc.b	$01
00098677 E1F8                       	smpsAlterNote       $F8
00098679 01                         	dc.b	$01
0009867A E1FC                       	smpsAlterNote       $FC
0009867C 01                         	dc.b	$01
0009867D E102                       	smpsAlterNote       $02
0009867F 0101                       	dc.b	$01, $01
00098681 E1FF                       	smpsAlterNote       $FF
00098683 01                         	dc.b	$01
00098684 E1FC                       	smpsAlterNote       $FC
00098686 ECF5                       	smpsPSGAlterVol     $F5
00098688 8F02                       	dc.b	nD1, $02
0009868A EC04                       	smpsPSGAlterVol     $04
0009868C E701                       	dc.b	smpsNoAttack, $01
0009868E ECFC                       	smpsPSGAlterVol     $FC
00098690 E1FB                       	smpsAlterNote       $FB
00098692 8D06                       	dc.b	nC1, $06
00098694 EC04                       	smpsPSGAlterVol     $04
00098696 E701                       	dc.b	smpsNoAttack, $01
00098698 EC07                       	smpsPSGAlterVol     $07
0009869A 8006                       	dc.b	nRst, $06
0009869C E1FE                       	smpsAlterNote       $FE
0009869E 01                         	dc.b	$01
0009869F E102                       	smpsAlterNote       $02
000986A1 01                         	dc.b	$01
000986A2 E1FE                       	smpsAlterNote       $FE
000986A4 01                         	dc.b	$01
000986A5 E1FB                       	smpsAlterNote       $FB
000986A7 01                         	dc.b	$01
000986A8 E1F7                       	smpsAlterNote       $F7
000986AA 01                         	dc.b	$01
000986AB E1FB                       	smpsAlterNote       $FB
000986AD 01                         	dc.b	$01
000986AE E101                       	smpsAlterNote       $01
000986B0 01                         	dc.b	$01
000986B1 E102                       	smpsAlterNote       $02
000986B3 01                         	dc.b	$01
000986B4 E1FB                       	smpsAlterNote       $FB
000986B6 ECF5                       	smpsPSGAlterVol     $F5
000986B8 8D02                       	dc.b	nC1, $02
000986BA EC04                       	smpsPSGAlterVol     $04
000986BC E701                       	dc.b	smpsNoAttack, $01
000986BE E1FC                       	smpsAlterNote       $FC
000986C0 ECFC                       	smpsPSGAlterVol     $FC
000986C2 8F0D                       	dc.b	nD1, $0D
000986C4 E1FF                       	smpsAlterNote       $FF
000986C6 E701                       	dc.b	smpsNoAttack, $01
000986C8 E103                       	smpsAlterNote       $03
000986CA E701                       	dc.b	smpsNoAttack, $01
000986CC E1FF                       	smpsAlterNote       $FF
000986CE E701                       	dc.b	smpsNoAttack, $01
000986D0 E1FC                       	smpsAlterNote       $FC
000986D2 E701                       	dc.b	smpsNoAttack, $01
000986D4 E1F8                       	smpsAlterNote       $F8
000986D6 E701                       	dc.b	smpsNoAttack, $01
000986D8 E1FC                       	smpsAlterNote       $FC
000986DA E701                       	dc.b	smpsNoAttack, $01
000986DC E102                       	smpsAlterNote       $02
000986DE E701                       	dc.b	smpsNoAttack, $01
000986E0 E103                       	smpsAlterNote       $03
000986E2 E701                       	dc.b	smpsNoAttack, $01
000986E4 E1FF                       	smpsAlterNote       $FF
000986E6 E701                       	dc.b	smpsNoAttack, $01
000986E8 E1F9                       	smpsAlterNote       $F9
000986EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000986EE E1FC                       	smpsAlterNote       $FC
000986F0 E701                       	dc.b	smpsNoAttack, $01
000986F2 E102                       	smpsAlterNote       $02
000986F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000986F8 E1FC                       	smpsAlterNote       $FC
000986FA E701                       	dc.b	smpsNoAttack, $01
000986FC E1F9                       	smpsAlterNote       $F9
000986FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098702 E1FF                       	smpsAlterNote       $FF
00098704 EC04                       	smpsPSGAlterVol     $04
00098706 E701                       	dc.b	smpsNoAttack, $01
00098708 EC07                       	smpsPSGAlterVol     $07
0009870A E103                       	smpsAlterNote       $03
0009870C 8001                       	dc.b	nRst, $01
0009870E E102                       	smpsAlterNote       $02
00098710 01                         	dc.b	$01
00098711 E1FB                       	smpsAlterNote       $FB
00098713 01                         	dc.b	$01
00098714 E1F7                       	smpsAlterNote       $F7
00098716 01                         	dc.b	$01
00098717 E1FB                       	smpsAlterNote       $FB
00098719 01                         	dc.b	$01
0009871A E102                       	smpsAlterNote       $02
0009871C 01                         	dc.b	$01
0009871D E103                       	smpsAlterNote       $03
0009871F 01                         	dc.b	$01
00098720 E1FB                       	smpsAlterNote       $FB
00098722 ECF5                       	smpsPSGAlterVol     $F5
00098724 8E06                       	dc.b	nCs1, $06
00098726 EC04                       	smpsPSGAlterVol     $04
00098728 E701                       	dc.b	smpsNoAttack, $01
0009872A EC07                       	smpsPSGAlterVol     $07
0009872C 8003                       	dc.b	nRst, $03
0009872E ECF5                       	smpsPSGAlterVol     $F5
00098730 8E06                       	dc.b	nCs1, $06
00098732 EC04                       	smpsPSGAlterVol     $04
00098734 E701                       	dc.b	smpsNoAttack, $01
00098736 EC07                       	smpsPSGAlterVol     $07
00098738 8006                       	dc.b	nRst, $06
0009873A E1FE                       	smpsAlterNote       $FE
0009873C 01                         	dc.b	$01
0009873D E102                       	smpsAlterNote       $02
0009873F 01                         	dc.b	$01
00098740 E1FE                       	smpsAlterNote       $FE
00098742 01                         	dc.b	$01
00098743 E1F9                       	smpsAlterNote       $F9
00098745 01                         	dc.b	$01
00098746 E1FC                       	smpsAlterNote       $FC
00098748 ECF5                       	smpsPSGAlterVol     $F5
0009874A 8F06                       	dc.b	nD1, $06
0009874C EC04                       	smpsPSGAlterVol     $04
0009874E E701                       	dc.b	smpsNoAttack, $01
00098750 EC07                       	smpsPSGAlterVol     $07
00098752 8003                       	dc.b	nRst, $03
00098754 ECF5                       	smpsPSGAlterVol     $F5
00098756 8F07                       	dc.b	nD1, $07
00098758 EC0B                       	smpsPSGAlterVol     $0B
0009875A 8006                       	dc.b	nRst, $06
0009875C E1FF                       	smpsAlterNote       $FF
0009875E 01                         	dc.b	$01
0009875F E102                       	smpsAlterNote       $02
00098761 0101                       	dc.b	$01, $01
00098763 E1FB                       	smpsAlterNote       $FB
00098765 01                         	dc.b	$01
00098766 ECF5                       	smpsPSGAlterVol     $F5
00098768 8E07                       	dc.b	nCs1, $07
0009876A EC0B                       	smpsPSGAlterVol     $0B
0009876C 8004                       	dc.b	nRst, $04
0009876E ECF5                       	smpsPSGAlterVol     $F5
00098770 8E06                       	dc.b	nCs1, $06
00098772 EC04                       	smpsPSGAlterVol     $04
00098774 E701                       	dc.b	smpsNoAttack, $01
00098776 EC07                       	smpsPSGAlterVol     $07
00098778 8006                       	dc.b	nRst, $06
0009877A E101                       	smpsAlterNote       $01
0009877C 01                         	dc.b	$01
0009877D E102                       	smpsAlterNote       $02
0009877F 01                         	dc.b	$01
00098780 E1FE                       	smpsAlterNote       $FE
00098782 01                         	dc.b	$01
00098783 E1F8                       	smpsAlterNote       $F8
00098785 01                         	dc.b	$01
00098786 E1FB                       	smpsAlterNote       $FB
00098788 ECF5                       	smpsPSGAlterVol     $F5
0009878A 8E06                       	dc.b	nCs1, $06
0009878C EC04                       	smpsPSGAlterVol     $04
0009878E E701                       	dc.b	smpsNoAttack, $01
00098790 EC07                       	smpsPSGAlterVol     $07
00098792 8003                       	dc.b	nRst, $03
00098794 ECF5                       	smpsPSGAlterVol     $F5
00098796 8E06                       	dc.b	nCs1, $06
00098798 EC04                       	smpsPSGAlterVol     $04
0009879A E701                       	dc.b	smpsNoAttack, $01
0009879C EC07                       	smpsPSGAlterVol     $07
0009879E 8004                       	dc.b	nRst, $04
000987A0 E1FC                       	smpsAlterNote       $FC
000987A2 ECF5                       	smpsPSGAlterVol     $F5
000987A4 8F06                       	dc.b	nD1, $06
000987A6 EC0B                       	smpsPSGAlterVol     $0B
000987A8 8006                       	dc.b	nRst, $06
000987AA E1FF                       	smpsAlterNote       $FF
000987AC 01                         	dc.b	$01
000987AD E102                       	smpsAlterNote       $02
000987AF 0101                       	dc.b	$01, $01
000987B1 E1FC                       	smpsAlterNote       $FC
000987B3 01                         	dc.b	$01
000987B4 E1F8                       	smpsAlterNote       $F8
000987B6 01                         	dc.b	$01
000987B7 E1F9                       	smpsAlterNote       $F9
000987B9 01                         	dc.b	$01
000987BA E1FF                       	smpsAlterNote       $FF
000987BC 01                         	dc.b	$01
000987BD E103                       	smpsAlterNote       $03
000987BF 01                         	dc.b	$01
000987C0 E1FC                       	smpsAlterNote       $FC
000987C2 ECF5                       	smpsPSGAlterVol     $F5
000987C4 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000987C8 EC04                       	smpsPSGAlterVol     $04
000987CA E701                       	dc.b	smpsNoAttack, $01
000987CC EC07                       	smpsPSGAlterVol     $07
000987CE 8009                       	dc.b	nRst, $09
000987D0 E1FF                       	smpsAlterNote       $FF
000987D2 01                         	dc.b	$01
000987D3 E102                       	smpsAlterNote       $02
000987D5 0101                       	dc.b	$01, $01
000987D7 E1FC                       	smpsAlterNote       $FC
000987D9 01                         	dc.b	$01
000987DA E1F8                       	smpsAlterNote       $F8
000987DC 01                         	dc.b	$01
000987DD E1F9                       	smpsAlterNote       $F9
000987DF 01                         	dc.b	$01
000987E0 E1FF                       	smpsAlterNote       $FF
000987E2 01                         	dc.b	$01
000987E3 E103                       	smpsAlterNote       $03
000987E5 01                         	dc.b	$01
000987E6 E1FF                       	smpsAlterNote       $FF
000987E8 01                         	dc.b	$01
000987E9 E1FC                       	smpsAlterNote       $FC
000987EB 01                         	dc.b	$01
000987EC E1F8                       	smpsAlterNote       $F8
000987EE 01                         	dc.b	$01
000987EF E1FC                       	smpsAlterNote       $FC
000987F1 01                         	dc.b	$01
000987F2 E102                       	smpsAlterNote       $02
000987F4 01                         	dc.b	$01
000987F5 E103                       	smpsAlterNote       $03
000987F7 01                         	dc.b	$01
000987F8 E1FF                       	smpsAlterNote       $FF
000987FA 01                         	dc.b	$01
000987FB E1FC                       	smpsAlterNote       $FC
000987FD ECF5                       	smpsPSGAlterVol     $F5
000987FF 8F03                       	dc.b	nD1, $03
00098801 E1FB                       	smpsAlterNote       $FB
00098803 8D06                       	dc.b	nC1, $06
00098805 EC04                       	smpsPSGAlterVol     $04
00098807 E701                       	dc.b	smpsNoAttack, $01
00098809 EC07                       	smpsPSGAlterVol     $07
0009880B 8006                       	dc.b	nRst, $06
0009880D E1FE                       	smpsAlterNote       $FE
0009880F 01                         	dc.b	$01
00098810 E102                       	smpsAlterNote       $02
00098812 01                         	dc.b	$01
00098813 E101                       	smpsAlterNote       $01
00098815 01                         	dc.b	$01
00098816 E1FB                       	smpsAlterNote       $FB
00098818 01                         	dc.b	$01
00098819 E1F7                       	smpsAlterNote       $F7
0009881B 01                         	dc.b	$01
0009881C E1FB                       	smpsAlterNote       $FB
0009881E 01                         	dc.b	$01
0009881F E1FE                       	smpsAlterNote       $FE
00098821 01                         	dc.b	$01
00098822 E102                       	smpsAlterNote       $02
00098824 01                         	dc.b	$01
00098825 E1FB                       	smpsAlterNote       $FB
00098827 ECF5                       	smpsPSGAlterVol     $F5
00098829 8D03                       	dc.b	nC1, $03
0009882B E1FC                       	smpsAlterNote       $FC
0009882D 8F0D                       	dc.b	nD1, $0D
0009882F E1FF                       	smpsAlterNote       $FF
00098831 E701                       	dc.b	smpsNoAttack, $01
00098833 E103                       	smpsAlterNote       $03
00098835 E701                       	dc.b	smpsNoAttack, $01
00098837 E1FF                       	smpsAlterNote       $FF
00098839 E701                       	dc.b	smpsNoAttack, $01
0009883B E1FC                       	smpsAlterNote       $FC
0009883D E701                       	dc.b	smpsNoAttack, $01
0009883F E1F8                       	smpsAlterNote       $F8
00098841 E701                       	dc.b	smpsNoAttack, $01
00098843 E1FC                       	smpsAlterNote       $FC
00098845 E701                       	dc.b	smpsNoAttack, $01
00098847 E102                       	smpsAlterNote       $02
00098849 E701                       	dc.b	smpsNoAttack, $01
0009884B E103                       	smpsAlterNote       $03
0009884D E701                       	dc.b	smpsNoAttack, $01
0009884F E1FF                       	smpsAlterNote       $FF
00098851 E701                       	dc.b	smpsNoAttack, $01
00098853 E1F9                       	smpsAlterNote       $F9
00098855 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098859 E1FC                       	smpsAlterNote       $FC
0009885B E701                       	dc.b	smpsNoAttack, $01
0009885D E102                       	smpsAlterNote       $02
0009885F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098863 E1FF                       	smpsAlterNote       $FF
00098865 E701                       	dc.b	smpsNoAttack, $01
00098867 E1F9                       	smpsAlterNote       $F9
00098869 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009886D E1FF                       	smpsAlterNote       $FF
0009886F EC04                       	smpsPSGAlterVol     $04
00098871 E701                       	dc.b	smpsNoAttack, $01
00098873 EC07                       	smpsPSGAlterVol     $07
00098875 E103                       	smpsAlterNote       $03
00098877 8001                       	dc.b	nRst, $01
00098879 E102                       	smpsAlterNote       $02
0009887B 01                         	dc.b	$01
0009887C E1FB                       	smpsAlterNote       $FB
0009887E 01                         	dc.b	$01
0009887F E1F7                       	smpsAlterNote       $F7
00098881 01                         	dc.b	$01
00098882 E1FB                       	smpsAlterNote       $FB
00098884 01                         	dc.b	$01
00098885 E1FF                       	smpsAlterNote       $FF
00098887 01                         	dc.b	$01
00098888 E103                       	smpsAlterNote       $03
0009888A 01                         	dc.b	$01
0009888B E1FB                       	smpsAlterNote       $FB
0009888D ECF5                       	smpsPSGAlterVol     $F5
0009888F 8E06                       	dc.b	nCs1, $06
00098891 EC04                       	smpsPSGAlterVol     $04
00098893 E701                       	dc.b	smpsNoAttack, $01
00098895 EC07                       	smpsPSGAlterVol     $07
00098897 8003                       	dc.b	nRst, $03
00098899 ECF5                       	smpsPSGAlterVol     $F5
0009889B 8E06                       	dc.b	nCs1, $06
0009889D EC04                       	smpsPSGAlterVol     $04
0009889F E701                       	dc.b	smpsNoAttack, $01
000988A1 EC07                       	smpsPSGAlterVol     $07
000988A3 8006                       	dc.b	nRst, $06
000988A5 E1FE                       	smpsAlterNote       $FE
000988A7 01                         	dc.b	$01
000988A8 E102                       	smpsAlterNote       $02
000988AA 01                         	dc.b	$01
000988AB E1FE                       	smpsAlterNote       $FE
000988AD 01                         	dc.b	$01
000988AE E1FC                       	smpsAlterNote       $FC
000988B0 01                         	dc.b	$01
000988B1 ECF5                       	smpsPSGAlterVol     $F5
000988B3 8F06                       	dc.b	nD1, $06
000988B5 EC04                       	smpsPSGAlterVol     $04
000988B7 E701                       	dc.b	smpsNoAttack, $01
000988B9 EC07                       	smpsPSGAlterVol     $07
000988BB 8003                       	dc.b	nRst, $03
000988BD ECF5                       	smpsPSGAlterVol     $F5
000988BF 8F07                       	dc.b	nD1, $07
000988C1 EC0B                       	smpsPSGAlterVol     $0B
000988C3 8007                       	dc.b	nRst, $07
000988C5 E102                       	smpsAlterNote       $02
000988C7 0101                       	dc.b	$01, $01
000988C9 E1FB                       	smpsAlterNote       $FB
000988CB 01                         	dc.b	$01
000988CC E1F8                       	smpsAlterNote       $F8
000988CE 01                         	dc.b	$01
000988CF E1FB                       	smpsAlterNote       $FB
000988D1 ECF5                       	smpsPSGAlterVol     $F5
000988D3 8E06                       	dc.b	nCs1, $06
000988D5 EC0B                       	smpsPSGAlterVol     $0B
000988D7 8004                       	dc.b	nRst, $04
000988D9 ECF5                       	smpsPSGAlterVol     $F5
000988DB 8E06                       	dc.b	nCs1, $06
000988DD EC04                       	smpsPSGAlterVol     $04
000988DF E701                       	dc.b	smpsNoAttack, $01
000988E1 EC07                       	smpsPSGAlterVol     $07
000988E3 8006                       	dc.b	nRst, $06
000988E5 E1FE                       	smpsAlterNote       $FE
000988E7 01                         	dc.b	$01
000988E8 E102                       	smpsAlterNote       $02
000988EA 01                         	dc.b	$01
000988EB E1FE                       	smpsAlterNote       $FE
000988ED 01                         	dc.b	$01
000988EE E1F9                       	smpsAlterNote       $F9
000988F0 01                         	dc.b	$01
000988F1 E1FC                       	smpsAlterNote       $FC
000988F3 ECF5                       	smpsPSGAlterVol     $F5
000988F5 8F06                       	dc.b	nD1, $06
000988F7 EC04                       	smpsPSGAlterVol     $04
000988F9 E701                       	dc.b	smpsNoAttack, $01
000988FB EC07                       	smpsPSGAlterVol     $07
000988FD 8003                       	dc.b	nRst, $03
000988FF ECF5                       	smpsPSGAlterVol     $F5
00098901 8F06                       	dc.b	nD1, $06
00098903 EC04                       	smpsPSGAlterVol     $04
00098905 E701                       	dc.b	smpsNoAttack, $01
00098907 EC07                       	smpsPSGAlterVol     $07
00098909 8006                       	dc.b	nRst, $06
0009890B E1FF                       	smpsAlterNote       $FF
0009890D 01                         	dc.b	$01
0009890E E103                       	smpsAlterNote       $03
00098910 01                         	dc.b	$01
00098911 E102                       	smpsAlterNote       $02
00098913 01                         	dc.b	$01
00098914 E1FB                       	smpsAlterNote       $FB
00098916 01                         	dc.b	$01
00098917 ECF5                       	smpsPSGAlterVol     $F5
00098919 8E07                       	dc.b	nCs1, $07
0009891B EC0B                       	smpsPSGAlterVol     $0B
0009891D 8004                       	dc.b	nRst, $04
0009891F ECF5                       	smpsPSGAlterVol     $F5
00098921 8E06                       	dc.b	nCs1, $06
00098923 EC0B                       	smpsPSGAlterVol     $0B
00098925 8007                       	dc.b	nRst, $07
00098927 E101                       	smpsAlterNote       $01
00098929 0101                       	dc.b	$01, $01
0009892B E1FE                       	smpsAlterNote       $FE
0009892D 01                         	dc.b	$01
0009892E E1F9                       	smpsAlterNote       $F9
00098930 01                         	dc.b	$01
00098931 E1FC                       	smpsAlterNote       $FC
00098933 ECF5                       	smpsPSGAlterVol     $F5
00098935 8F06                       	dc.b	nD1, $06
00098937 EC04                       	smpsPSGAlterVol     $04
00098939 E701                       	dc.b	smpsNoAttack, $01
0009893B EC07                       	smpsPSGAlterVol     $07
0009893D 8003                       	dc.b	nRst, $03
0009893F ECF5                       	smpsPSGAlterVol     $F5
00098941 8F06                       	dc.b	nD1, $06
00098943 EC04                       	smpsPSGAlterVol     $04
00098945 E701                       	dc.b	smpsNoAttack, $01
00098947 EC07                       	smpsPSGAlterVol     $07
00098949 8006                       	dc.b	nRst, $06
0009894B E1FF                       	smpsAlterNote       $FF
0009894D 01                         	dc.b	$01
0009894E E103                       	smpsAlterNote       $03
00098950 01                         	dc.b	$01
00098951 E1FF                       	smpsAlterNote       $FF
00098953 01                         	dc.b	$01
00098954 E1FB                       	smpsAlterNote       $FB
00098956 01                         	dc.b	$01
00098957 ECF5                       	smpsPSGAlterVol     $F5
00098959 8E06                       	dc.b	nCs1, $06
0009895B EC04                       	smpsPSGAlterVol     $04
0009895D E701                       	dc.b	smpsNoAttack, $01
0009895F EC07                       	smpsPSGAlterVol     $07
00098961 8003                       	dc.b	nRst, $03
00098963 ECF5                       	smpsPSGAlterVol     $F5
00098965 8E07                       	dc.b	nCs1, $07
00098967 E1FF                       	smpsAlterNote       $FF
00098969 9B06                       	dc.b	nD2, $06
0009896B EC04                       	smpsPSGAlterVol     $04
0009896D E701                       	dc.b	smpsNoAttack, $01
0009896F ECFC                       	smpsPSGAlterVol     $FC
00098971 9B03                       	dc.b	nD2, $03
00098973 EC04                       	smpsPSGAlterVol     $04
00098975 E701                       	dc.b	smpsNoAttack, $01
00098977 ECFC                       	smpsPSGAlterVol     $FC
00098979 9B02                       	dc.b	nD2, $02
0009897B EC04                       	smpsPSGAlterVol     $04
0009897D E701                       	dc.b	smpsNoAttack, $01
0009897F ECFC                       	smpsPSGAlterVol     $FC
00098981 E1FE                       	smpsAlterNote       $FE
00098983 9A03                       	dc.b	nCs2, $03
00098985 EC0B                       	smpsPSGAlterVol     $0B
00098987 800A                       	dc.b	nRst, $0A
00098989 E102                       	smpsAlterNote       $02
0009898B 01                         	dc.b	$01
0009898C E10A                       	smpsAlterNote       $0A
0009898E 01                         	dc.b	$01
0009898F E102                       	smpsAlterNote       $02
00098991 01                         	dc.b	$01
00098992 E1F7                       	smpsAlterNote       $F7
00098994 01                         	dc.b	$01
00098995 E10A                       	smpsAlterNote       $0A
00098997 01                         	dc.b	$01
00098998 E1FC                       	smpsAlterNote       $FC
0009899A 01                         	dc.b	$01
0009899B E108                       	smpsAlterNote       $08
0009899D 0101                       	dc.b	$01, $01
0009899F E102                       	smpsAlterNote       $02
000989A1 01                         	dc.b	$01
000989A2 E1F7                       	smpsAlterNote       $F7
000989A4 0101                       	dc.b	$01, $01
000989A6 E1FC                       	smpsAlterNote       $FC
000989A8 ECF5                       	smpsPSGAlterVol     $F5
000989AA 8F06                       	dc.b	nD1, $06
000989AC EC04                       	smpsPSGAlterVol     $04
000989AE E701                       	dc.b	smpsNoAttack, $01
000989B0 EC07                       	smpsPSGAlterVol     $07
000989B2 8003                       	dc.b	nRst, $03
000989B4 ECF5                       	smpsPSGAlterVol     $F5
000989B6 8F06                       	dc.b	nD1, $06
000989B8 EC04                       	smpsPSGAlterVol     $04
000989BA E701                       	dc.b	smpsNoAttack, $01
000989BC EC07                       	smpsPSGAlterVol     $07
000989BE 8006                       	dc.b	nRst, $06
000989C0 E1FF                       	smpsAlterNote       $FF
000989C2 01                         	dc.b	$01
000989C3 E102                       	smpsAlterNote       $02
000989C5 01                         	dc.b	$01
000989C6 E101                       	smpsAlterNote       $01
000989C8 01                         	dc.b	$01
000989C9 E1FC                       	smpsAlterNote       $FC
000989CB 01                         	dc.b	$01
000989CC ECF5                       	smpsPSGAlterVol     $F5
000989CE 9007                       	dc.b	nEb1, $07
000989D0 EC0B                       	smpsPSGAlterVol     $0B
000989D2 8004                       	dc.b	nRst, $04
000989D4 ECF5                       	smpsPSGAlterVol     $F5
000989D6 9006                       	dc.b	nEb1, $06
000989D8 EC0B                       	smpsPSGAlterVol     $0B
000989DA 8007                       	dc.b	nRst, $07
000989DC E103                       	smpsAlterNote       $03
000989DE 0101                       	dc.b	$01, $01
000989E0 E1FF                       	smpsAlterNote       $FF
000989E2 01                         	dc.b	$01
000989E3 E1F9                       	smpsAlterNote       $F9
000989E5 01                         	dc.b	$01
000989E6 E1FC                       	smpsAlterNote       $FC
000989E8 ECF5                       	smpsPSGAlterVol     $F5
000989EA 8F06                       	dc.b	nD1, $06
000989EC EC04                       	smpsPSGAlterVol     $04
000989EE E701                       	dc.b	smpsNoAttack, $01
000989F0 EC07                       	smpsPSGAlterVol     $07
000989F2 8003                       	dc.b	nRst, $03
000989F4 ECF5                       	smpsPSGAlterVol     $F5
000989F6 8F06                       	dc.b	nD1, $06
000989F8 EC04                       	smpsPSGAlterVol     $04
000989FA E701                       	dc.b	smpsNoAttack, $01
000989FC EC07                       	smpsPSGAlterVol     $07
000989FE 8006                       	dc.b	nRst, $06
00098A00 E1FF                       	smpsAlterNote       $FF
00098A02 01                         	dc.b	$01
00098A03 E103                       	smpsAlterNote       $03
00098A05 01                         	dc.b	$01
00098A06 E1FF                       	smpsAlterNote       $FF
00098A08 01                         	dc.b	$01
00098A09 E1F9                       	smpsAlterNote       $F9
00098A0B 01                         	dc.b	$01
00098A0C E1FC                       	smpsAlterNote       $FC
00098A0E ECF5                       	smpsPSGAlterVol     $F5
00098A10 8F06                       	dc.b	nD1, $06
00098A12 EC04                       	smpsPSGAlterVol     $04
00098A14 E701                       	dc.b	smpsNoAttack, $01
00098A16 EC07                       	smpsPSGAlterVol     $07
00098A18 8003                       	dc.b	nRst, $03
00098A1A ECF5                       	smpsPSGAlterVol     $F5
00098A1C 8F07                       	dc.b	nD1, $07
00098A1E EC0B                       	smpsPSGAlterVol     $0B
00098A20 8006                       	dc.b	nRst, $06
00098A22 E1FF                       	smpsAlterNote       $FF
00098A24 01                         	dc.b	$01
00098A25 E102                       	smpsAlterNote       $02
00098A27 0101                       	dc.b	$01, $01
00098A29 E1FC                       	smpsAlterNote       $FC
00098A2B 01                         	dc.b	$01
00098A2C ECF5                       	smpsPSGAlterVol     $F5
00098A2E 8F07                       	dc.b	nD1, $07
00098A30 EC0B                       	smpsPSGAlterVol     $0B
00098A32 8004                       	dc.b	nRst, $04
00098A34 ECF5                       	smpsPSGAlterVol     $F5
00098A36 8F06                       	dc.b	nD1, $06
00098A38 EC04                       	smpsPSGAlterVol     $04
00098A3A E701                       	dc.b	smpsNoAttack, $01
00098A3C EC07                       	smpsPSGAlterVol     $07
00098A3E 8006                       	dc.b	nRst, $06
00098A40 E101                       	smpsAlterNote       $01
00098A42 01                         	dc.b	$01
00098A43 E102                       	smpsAlterNote       $02
00098A45 01                         	dc.b	$01
00098A46 E1FF                       	smpsAlterNote       $FF
00098A48 01                         	dc.b	$01
00098A49 E1F9                       	smpsAlterNote       $F9
00098A4B 01                         	dc.b	$01
00098A4C E1FC                       	smpsAlterNote       $FC
00098A4E ECF5                       	smpsPSGAlterVol     $F5
00098A50 9006                       	dc.b	nEb1, $06
00098A52 EC04                       	smpsPSGAlterVol     $04
00098A54 E701                       	dc.b	smpsNoAttack, $01
00098A56 EC07                       	smpsPSGAlterVol     $07
00098A58 8003                       	dc.b	nRst, $03
00098A5A ECF5                       	smpsPSGAlterVol     $F5
00098A5C 9006                       	dc.b	nEb1, $06
00098A5E EC04                       	smpsPSGAlterVol     $04
00098A60 E701                       	dc.b	smpsNoAttack, $01
00098A62 EC07                       	smpsPSGAlterVol     $07
00098A64 8006                       	dc.b	nRst, $06
00098A66 E100                       	smpsAlterNote       $00
00098A68 01                         	dc.b	$01
00098A69 E102                       	smpsAlterNote       $02
00098A6B 01                         	dc.b	$01
00098A6C E100                       	smpsAlterNote       $00
00098A6E 01                         	dc.b	$01
00098A6F E1FF                       	smpsAlterNote       $FF
00098A71 01                         	dc.b	$01
00098A72 ECF5                       	smpsPSGAlterVol     $F5
00098A74 9B06                       	dc.b	nD2, $06
00098A76 EC04                       	smpsPSGAlterVol     $04
00098A78 E701                       	dc.b	smpsNoAttack, $01
00098A7A EC07                       	smpsPSGAlterVol     $07
00098A7C 8003                       	dc.b	nRst, $03
00098A7E ECF5                       	smpsPSGAlterVol     $F5
00098A80 9B07                       	dc.b	nD2, $07
00098A82 EC0B                       	smpsPSGAlterVol     $0B
00098A84 8007                       	dc.b	nRst, $07
00098A86 E105                       	smpsAlterNote       $05
00098A88 0101                       	dc.b	$01, $01
00098A8A E1FF                       	smpsAlterNote       $FF
00098A8C 01                         	dc.b	$01
00098A8D E1FC                       	smpsAlterNote       $FC
00098A8F 01                         	dc.b	$01
00098A90 E1FF                       	smpsAlterNote       $FF
00098A92 ECF5                       	smpsPSGAlterVol     $F5
00098A94 9B06                       	dc.b	nD2, $06
00098A96 EC0B                       	smpsPSGAlterVol     $0B
00098A98 8004                       	dc.b	nRst, $04
00098A9A ECF5                       	smpsPSGAlterVol     $F5
00098A9C 9B06                       	dc.b	nD2, $06
00098A9E EC04                       	smpsPSGAlterVol     $04
00098AA0 E701                       	dc.b	smpsNoAttack, $01
00098AA2 EC07                       	smpsPSGAlterVol     $07
00098AA4 8006                       	dc.b	nRst, $06
00098AA6 E102                       	smpsAlterNote       $02
00098AA8 01                         	dc.b	$01
00098AA9 E106                       	smpsAlterNote       $06
00098AAB 01                         	dc.b	$01
00098AAC E102                       	smpsAlterNote       $02
00098AAE 01                         	dc.b	$01
00098AAF E1FC                       	smpsAlterNote       $FC
00098AB1 01                         	dc.b	$01
00098AB2 E1FF                       	smpsAlterNote       $FF
00098AB4 ECF5                       	smpsPSGAlterVol     $F5
00098AB6 9B06                       	dc.b	nD2, $06
00098AB8 EC04                       	smpsPSGAlterVol     $04
00098ABA E701                       	dc.b	smpsNoAttack, $01
00098ABC EC07                       	smpsPSGAlterVol     $07
00098ABE 8003                       	dc.b	nRst, $03
00098AC0 ECF5                       	smpsPSGAlterVol     $F5
00098AC2 9B07                       	dc.b	nD2, $07
00098AC4 EC0B                       	smpsPSGAlterVol     $0B
00098AC6 8006                       	dc.b	nRst, $06
00098AC8 E102                       	smpsAlterNote       $02
00098ACA 01                         	dc.b	$01
00098ACB E105                       	smpsAlterNote       $05
00098ACD 0101                       	dc.b	$01, $01
00098ACF E1FF                       	smpsAlterNote       $FF
00098AD1 01                         	dc.b	$01
00098AD2 ECF5                       	smpsPSGAlterVol     $F5
00098AD4 9B07                       	dc.b	nD2, $07
00098AD6 EC0B                       	smpsPSGAlterVol     $0B
00098AD8 8004                       	dc.b	nRst, $04
00098ADA ECF5                       	smpsPSGAlterVol     $F5
00098ADC 9B06                       	dc.b	nD2, $06
00098ADE EC04                       	smpsPSGAlterVol     $04
00098AE0 E701                       	dc.b	smpsNoAttack, $01
00098AE2 EC07                       	smpsPSGAlterVol     $07
00098AE4 8006                       	dc.b	nRst, $06
00098AE6 E105                       	smpsAlterNote       $05
00098AE8 0101                       	dc.b	$01, $01
00098AEA E102                       	smpsAlterNote       $02
00098AEC 01                         	dc.b	$01
00098AED E1FC                       	smpsAlterNote       $FC
00098AEF 01                         	dc.b	$01
00098AF0 E1FF                       	smpsAlterNote       $FF
00098AF2 ECF5                       	smpsPSGAlterVol     $F5
00098AF4 9B06                       	dc.b	nD2, $06
00098AF6 EC04                       	smpsPSGAlterVol     $04
00098AF8 E701                       	dc.b	smpsNoAttack, $01
00098AFA EC07                       	smpsPSGAlterVol     $07
00098AFC 8003                       	dc.b	nRst, $03
00098AFE ECF5                       	smpsPSGAlterVol     $F5
00098B00 9B06                       	dc.b	nD2, $06
00098B02 EC04                       	smpsPSGAlterVol     $04
00098B04 E701                       	dc.b	smpsNoAttack, $01
00098B06 EC07                       	smpsPSGAlterVol     $07
00098B08 8006                       	dc.b	nRst, $06
00098B0A E102                       	smpsAlterNote       $02
00098B0C 01                         	dc.b	$01
00098B0D E106                       	smpsAlterNote       $06
00098B0F 01                         	dc.b	$01
00098B10 E102                       	smpsAlterNote       $02
00098B12 01                         	dc.b	$01
00098B13 E1FF                       	smpsAlterNote       $FF
00098B15 01                         	dc.b	$01
00098B16 ECF5                       	smpsPSGAlterVol     $F5
00098B18 9B06                       	dc.b	nD2, $06
00098B1A EC04                       	smpsPSGAlterVol     $04
00098B1C E701                       	dc.b	smpsNoAttack, $01
00098B1E EC07                       	smpsPSGAlterVol     $07
00098B20 8003                       	dc.b	nRst, $03
00098B22 ECF5                       	smpsPSGAlterVol     $F5
00098B24 9B07                       	dc.b	nD2, $07
00098B26 EC0B                       	smpsPSGAlterVol     $0B
00098B28 8007                       	dc.b	nRst, $07
00098B2A E107                       	smpsAlterNote       $07
00098B2C 0101                       	dc.b	$01, $01
00098B2E E1FE                       	smpsAlterNote       $FE
00098B30 01                         	dc.b	$01
00098B31 E1FA                       	smpsAlterNote       $FA
00098B33 0101                       	dc.b	$01, $01
00098B35 E103                       	smpsAlterNote       $03
00098B37 01                         	dc.b	$01
00098B38 E109                       	smpsAlterNote       $09
00098B3A 01                         	dc.b	$01
00098B3B E107                       	smpsAlterNote       $07
00098B3D 01                         	dc.b	$01
00098B3E E1FE                       	smpsAlterNote       $FE
00098B40 01                         	dc.b	$01
00098B41 E108                       	smpsAlterNote       $08
00098B43 01                         	dc.b	$01
00098B44 E1FD                       	smpsAlterNote       $FD
00098B46 ECF5                       	smpsPSGAlterVol     $F5
00098B48 940E                       	dc.b	nG1, $0E
00098B4A E103                       	smpsAlterNote       $03
00098B4C EC0B                       	smpsPSGAlterVol     $0B
00098B4E 8001 01                    	dc.b	nRst, $01, $01
00098B51 E1FD                       	smpsAlterNote       $FD
00098B53 01                         	dc.b	$01
00098B54 E1FB                       	smpsAlterNote       $FB
00098B56 0101                       	dc.b	$01, $01
00098B58 E100                       	smpsAlterNote       $00
00098B5A 01                         	dc.b	$01
00098B5B E103                       	smpsAlterNote       $03
00098B5D 01                         	dc.b	$01
00098B5E E100                       	smpsAlterNote       $00
00098B60 01                         	dc.b	$01
00098B61 E1FD                       	smpsAlterNote       $FD
00098B63 01                         	dc.b	$01
00098B64 E1FA                       	smpsAlterNote       $FA
00098B66 01                         	dc.b	$01
00098B67 E1FD                       	smpsAlterNote       $FD
00098B69 01                         	dc.b	$01
00098B6A E103                       	smpsAlterNote       $03
00098B6C 0101                       	dc.b	$01, $01
00098B6E E100                       	smpsAlterNote       $00
00098B70 01                         	dc.b	$01
00098B71 E1FE                       	smpsAlterNote       $FE
00098B73 ECF5                       	smpsPSGAlterVol     $F5
00098B75 960D                       	dc.b	nA1, $0D
00098B77 E104                       	smpsAlterNote       $04
00098B79 EC0B                       	smpsPSGAlterVol     $0B
00098B7B 8001 01                    	dc.b	nRst, $01, $01
00098B7E E101                       	smpsAlterNote       $01
00098B80 01                         	dc.b	$01
00098B81 E1FB                       	smpsAlterNote       $FB
00098B83 0101                       	dc.b	$01, $01
00098B85 E1FE                       	smpsAlterNote       $FE
00098B87 01                         	dc.b	$01
00098B88 E104                       	smpsAlterNote       $04
00098B8A 0101                       	dc.b	$01, $01
00098B8C E1FE                       	smpsAlterNote       $FE
00098B8E 01                         	dc.b	$01
00098B8F E1FB                       	smpsAlterNote       $FB
00098B91 0101                       	dc.b	$01, $01
00098B93 E101                       	smpsAlterNote       $01
00098B95 01                         	dc.b	$01
00098B96 E104                       	smpsAlterNote       $04
00098B98 0101                       	dc.b	$01, $01
00098B9A E1FE                       	smpsAlterNote       $FE
00098B9C ECF5                       	smpsPSGAlterVol     $F5
00098B9E 970D                       	dc.b	nBb1, $0D
00098BA0 E101                       	smpsAlterNote       $01
00098BA2 EC04                       	smpsPSGAlterVol     $04
00098BA4 E701                       	dc.b	smpsNoAttack, $01
00098BA6 EC07                       	smpsPSGAlterVol     $07
00098BA8 E104                       	smpsAlterNote       $04
00098BAA 8001                       	dc.b	nRst, $01
00098BAC E103                       	smpsAlterNote       $03
00098BAE 01                         	dc.b	$01
00098BAF E1FE                       	smpsAlterNote       $FE
00098BB1 01                         	dc.b	$01
00098BB2 E1FA                       	smpsAlterNote       $FA
00098BB4 01                         	dc.b	$01
00098BB5 E1FE                       	smpsAlterNote       $FE
00098BB7 01                         	dc.b	$01
00098BB8 E101                       	smpsAlterNote       $01
00098BBA 01                         	dc.b	$01
00098BBB E104                       	smpsAlterNote       $04
00098BBD 01                         	dc.b	$01
00098BBE E101                       	smpsAlterNote       $01
00098BC0 01                         	dc.b	$01
00098BC1 E1FB                       	smpsAlterNote       $FB
00098BC3 01                         	dc.b	$01
00098BC4 E1FA                       	smpsAlterNote       $FA
00098BC6 01                         	dc.b	$01
00098BC7 E1FE                       	smpsAlterNote       $FE
00098BC9 01                         	dc.b	$01
00098BCA E103                       	smpsAlterNote       $03
00098BCC 0101                       	dc.b	$01, $01
00098BCE E101                       	smpsAlterNote       $01
00098BD0 01                         	dc.b	$01
00098BD1 E1FE                       	smpsAlterNote       $FE
00098BD3 ECF5                       	smpsPSGAlterVol     $F5
00098BD5 990D                       	dc.b	nC2, $0D
00098BD7 E104                       	smpsAlterNote       $04
00098BD9 EC0B                       	smpsPSGAlterVol     $0B
00098BDB 8001 01                    	dc.b	nRst, $01, $01
00098BDE E102                       	smpsAlterNote       $02
00098BE0 01                         	dc.b	$01
00098BE1 E1FC                       	smpsAlterNote       $FC
00098BE3 0101                       	dc.b	$01, $01
00098BE5 E102                       	smpsAlterNote       $02
00098BE7 01                         	dc.b	$01
00098BE8 E104                       	smpsAlterNote       $04
00098BEA 01                         	dc.b	$01
00098BEB E1FF                       	smpsAlterNote       $FF
00098BED ECF5                       	smpsPSGAlterVol     $F5
00098BEF 9B06                       	dc.b	nD2, $06
00098BF1 EC04                       	smpsPSGAlterVol     $04
00098BF3 E701                       	dc.b	smpsNoAttack, $01
00098BF5 EC07                       	smpsPSGAlterVol     $07
00098BF7 8003                       	dc.b	nRst, $03
00098BF9 ECF5                       	smpsPSGAlterVol     $F5
00098BFB 9B07                       	dc.b	nD2, $07
00098BFD EC0B                       	smpsPSGAlterVol     $0B
00098BFF 8006                       	dc.b	nRst, $06
00098C01 E101                       	smpsAlterNote       $01
00098C03 01                         	dc.b	$01
00098C04 E104                       	smpsAlterNote       $04
00098C06 0101                       	dc.b	$01, $01
00098C08 E1FE                       	smpsAlterNote       $FE
00098C0A 01                         	dc.b	$01
00098C0B E1FC                       	smpsAlterNote       $FC
00098C0D 01                         	dc.b	$01
00098C0E E1FE                       	smpsAlterNote       $FE
00098C10 ECF5                       	smpsPSGAlterVol     $F5
00098C12 9C06                       	dc.b	nEb2, $06
00098C14 EC0B                       	smpsPSGAlterVol     $0B
00098C16 8004                       	dc.b	nRst, $04
00098C18 ECF5                       	smpsPSGAlterVol     $F5
00098C1A 9C06                       	dc.b	nEb2, $06
00098C1C EC04                       	smpsPSGAlterVol     $04
00098C1E E701                       	dc.b	smpsNoAttack, $01
00098C20 EC07                       	smpsPSGAlterVol     $07
00098C22 8006                       	dc.b	nRst, $06
00098C24 E105                       	smpsAlterNote       $05
00098C26 01                         	dc.b	$01
00098C27 E106                       	smpsAlterNote       $06
00098C29 01                         	dc.b	$01
00098C2A E102                       	smpsAlterNote       $02
00098C2C 01                         	dc.b	$01
00098C2D E1FB                       	smpsAlterNote       $FB
00098C2F 01                         	dc.b	$01
00098C30 E1FF                       	smpsAlterNote       $FF
00098C32 ECF5                       	smpsPSGAlterVol     $F5
00098C34 9B06                       	dc.b	nD2, $06
00098C36 EC04                       	smpsPSGAlterVol     $04
00098C38 E701                       	dc.b	smpsNoAttack, $01
00098C3A EC07                       	smpsPSGAlterVol     $07
00098C3C 8003                       	dc.b	nRst, $03
00098C3E ECF5                       	smpsPSGAlterVol     $F5
00098C40 9B06                       	dc.b	nD2, $06
00098C42 EC04                       	smpsPSGAlterVol     $04
00098C44 E701                       	dc.b	smpsNoAttack, $01
00098C46 EC07                       	smpsPSGAlterVol     $07
00098C48 8006                       	dc.b	nRst, $06
00098C4A E101                       	smpsAlterNote       $01
00098C4C 01                         	dc.b	$01
00098C4D E105                       	smpsAlterNote       $05
00098C4F 01                         	dc.b	$01
00098C50 E104                       	smpsAlterNote       $04
00098C52 01                         	dc.b	$01
00098C53 E1FE                       	smpsAlterNote       $FE
00098C55 01                         	dc.b	$01
00098C56 ECF5                       	smpsPSGAlterVol     $F5
00098C58 9C07                       	dc.b	nEb2, $07
00098C5A EC0B                       	smpsPSGAlterVol     $0B
00098C5C 8004                       	dc.b	nRst, $04
00098C5E ECF5                       	smpsPSGAlterVol     $F5
00098C60 9C06                       	dc.b	nEb2, $06
00098C62 EC0B                       	smpsPSGAlterVol     $0B
00098C64 8007                       	dc.b	nRst, $07
00098C66 E105                       	smpsAlterNote       $05
00098C68 0101                       	dc.b	$01, $01
00098C6A E102                       	smpsAlterNote       $02
00098C6C 01                         	dc.b	$01
00098C6D E1FB                       	smpsAlterNote       $FB
00098C6F 01                         	dc.b	$01
00098C70 E1FF                       	smpsAlterNote       $FF
00098C72 ECF5                       	smpsPSGAlterVol     $F5
00098C74 9B06                       	dc.b	nD2, $06
00098C76 EC04                       	smpsPSGAlterVol     $04
00098C78 E701                       	dc.b	smpsNoAttack, $01
00098C7A EC07                       	smpsPSGAlterVol     $07
00098C7C 8003                       	dc.b	nRst, $03
00098C7E ECF5                       	smpsPSGAlterVol     $F5
00098C80 9B06                       	dc.b	nD2, $06
00098C82 EC04                       	smpsPSGAlterVol     $04
00098C84 E701                       	dc.b	smpsNoAttack, $01
00098C86 EC07                       	smpsPSGAlterVol     $07
00098C88 8006                       	dc.b	nRst, $06
00098C8A E101                       	smpsAlterNote       $01
00098C8C 01                         	dc.b	$01
00098C8D E105                       	smpsAlterNote       $05
00098C8F 01                         	dc.b	$01
00098C90 E101                       	smpsAlterNote       $01
00098C92 01                         	dc.b	$01
00098C93 E1FC                       	smpsAlterNote       $FC
00098C95 01                         	dc.b	$01
00098C96 E1FE                       	smpsAlterNote       $FE
00098C98 ECF5                       	smpsPSGAlterVol     $F5
00098C9A 9C06                       	dc.b	nEb2, $06
00098C9C EC04                       	smpsPSGAlterVol     $04
00098C9E E701                       	dc.b	smpsNoAttack, $01
00098CA0 EC07                       	smpsPSGAlterVol     $07
00098CA2 8003                       	dc.b	nRst, $03
00098CA4 ECF5                       	smpsPSGAlterVol     $F5
00098CA6 9C07                       	dc.b	nEb2, $07
00098CA8 EC0B                       	smpsPSGAlterVol     $0B
00098CAA 8006                       	dc.b	nRst, $06
00098CAC E102                       	smpsAlterNote       $02
00098CAE 01                         	dc.b	$01
00098CAF E105                       	smpsAlterNote       $05
00098CB1 0101                       	dc.b	$01, $01
00098CB3 E1FF                       	smpsAlterNote       $FF
00098CB5 01                         	dc.b	$01
00098CB6 ECF5                       	smpsPSGAlterVol     $F5
00098CB8 9B07                       	dc.b	nD2, $07
00098CBA EC0B                       	smpsPSGAlterVol     $0B
00098CBC 8004                       	dc.b	nRst, $04
00098CBE ECF5                       	smpsPSGAlterVol     $F5
00098CC0 9B06                       	dc.b	nD2, $06
00098CC2 EC04                       	smpsPSGAlterVol     $04
00098CC4 E701                       	dc.b	smpsNoAttack, $01
00098CC6 EC07                       	smpsPSGAlterVol     $07
00098CC8 8002                       	dc.b	nRst, $02
00098CCA E1FC                       	smpsAlterNote       $FC
00098CCC ECF5                       	smpsPSGAlterVol     $F5
00098CCE 9006                       	dc.b	nEb1, $06
00098CD0 EC04                       	smpsPSGAlterVol     $04
00098CD2 E701                       	dc.b	smpsNoAttack, $01
00098CD4 ECFC                       	smpsPSGAlterVol     $FC
00098CD6 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00098CDA EC04                       	smpsPSGAlterVol     $04
00098CDC E701                       	dc.b	smpsNoAttack, $01
00098CDE E1FD                       	smpsAlterNote       $FD
00098CE0 ECFC                       	smpsPSGAlterVol     $FC
00098CE2 9402                       	dc.b	nG1, $02
00098CE4 EC04                       	smpsPSGAlterVol     $04
00098CE6 E701                       	dc.b	smpsNoAttack, $01
00098CE8 E1FE                       	smpsAlterNote       $FE
00098CEA ECFC                       	smpsPSGAlterVol     $FC
00098CEC 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00098CF0 EC04                       	smpsPSGAlterVol     $04
00098CF2 E701                       	dc.b	smpsNoAttack, $01
00098CF4 EC07                       	smpsPSGAlterVol     $07
00098CF6 8008                       	dc.b	nRst, $08
00098CF8 F6F4 F3                    	smpsJump            music84_Jump06
00098CFB                            
00098CFB                            ; PSG3 Data
00098CFB                            music84_PSG3:
00098CFB F500                       	smpsPSGvoice        $00
00098CFD E1FF                       	smpsAlterNote       $FF
00098CFF EC0F                       	smpsPSGAlterVol     $0F
00098D01 803A                       	dc.b	nRst, $3A
00098D03                            
00098D03                            music84_Jump05:
00098D03 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00098D0F 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00098D19 F6FF E8                    	smpsJump            music84_Jump05
00098D1C                            
00098D1C                            ; DAC Data
00098D1C                            music84_DAC:
00098D1C E0C0                       	smpsPan             panCenter, $00
00098D1E 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00098D2A 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00098D36 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00098D42 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00098D4E 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00098D5A 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00098D66 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00098D72 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00098D7E 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00098D8A 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00098D96 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00098DA2 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
00098DAE 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00098DBA 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00098DC6 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
00098DD2 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
00098DDE 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
00098DEA 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00098DF6 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
00098E02 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00098E0E 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00098E1A 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00098E26 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00098E32 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00098E3E 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00098E4A 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00098E56 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00098E62 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00098E6E 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00098E7A 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00098E86 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00098E92 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00098E9E 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
00098EAA 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
00098EB6 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
00098EC2 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00098ECE 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
00098EDA 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
00098EE6 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00098EF2 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
00098EFE 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
00098F0A 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00098F16 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00098F22 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00098F2E 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00098F3A 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00098F46 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00098F52 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00098F5E 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
00098F6A 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00098F76 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00098F82 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
00098F8E 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
00098F9A 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00098FA6 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00098FB2 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
00098FBE 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
00098FCA 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00098FD6 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00098FE2 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00098FEE 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
00098FFA 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00099006 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
00099012 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0009901E 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0009902A 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00099036 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00099042 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0009904E 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0009905A 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00099066 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00099072 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009907E 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0009908A 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00099096 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
000990A2 E0C0                       	smpsPan             panCenter, $00
000990A4 F2                         	smpsStop
000990A5                            
000990A5                            music84_Voices:
000990A5                            ;	Voice $00
000990A5                            ;	$3D
000990A5                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
000990A5                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
000990A5                            	smpsVcAlgorithm     $05
000990A5                            	smpsVcFeedback      $07
000990A5                            	smpsVcUnusedBits    $00
000990A5                            	smpsVcDetune        $05, $04, $03, $04
000990A5                            	smpsVcCoarseFreq    $01, $01, $01, $01
000990A5                            	smpsVcRateScale     $00, $00, $00, $00
000990A5                            	smpsVcAttackRate    $11, $11, $11, $11
000990A5                            	smpsVcAmpMod        $00, $00, $00, $00
000990A5                            	smpsVcDecayRate1    $00, $00, $00, $0A
000990A5                            	smpsVcDecayRate2    $00, $00, $00, $0B
000990A5                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000990A5                            	smpsVcReleaseRate   $08, $08, $08, $07
000990A5 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
000990BE                            
000990BE                            ;	Voice $01
000990BE                            ;	$04
000990BE                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
000990BE                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
000990BE                            	smpsVcAlgorithm     $04
000990BE                            	smpsVcFeedback      $00
000990BE                            	smpsVcUnusedBits    $00
000990BE                            	smpsVcDetune        $04, $03, $04, $05
000990BE                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
000990BE                            	smpsVcRateScale     $00, $01, $00, $01
000990BE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000990BE                            	smpsVcAmpMod        $00, $00, $00, $00
000990BE                            	smpsVcDecayRate1    $0E, $00, $0E, $00
000990BE                            	smpsVcDecayRate2    $05, $00, $05, $00
000990BE                            	smpsVcDecayLevel    $08, $0E, $08, $0E
000990BE                            	smpsVcReleaseRate   $06, $06, $06, $06
000990BE 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
000990D7                            
000990D7                            ;	Voice $02
000990D7                            ;	$30
000990D7                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
000990D7                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
000990D7                            	smpsVcAlgorithm     $00
000990D7                            	smpsVcFeedback      $06
000990D7                            	smpsVcUnusedBits    $00
000990D7                            	smpsVcDetune        $04, $02, $00, $06
000990D7                            	smpsVcCoarseFreq    $01, $01, $03, $0C
000990D7                            	smpsVcRateScale     $00, $00, $00, $00
000990D7                            	smpsVcAttackRate    $1F, $1F, $1F, $14
000990D7                            	smpsVcAmpMod        $00, $00, $00, $00
000990D7                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
000990D7                            	smpsVcDecayRate2    $01, $01, $01, $01
000990D7                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
000990D7                            	smpsVcReleaseRate   $09, $0B, $08, $0F
000990D7 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
000990F0                            
000990F0                            ;	Voice $03
000990F0                            ;	$3A
000990F0                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
000990F0                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
000990F0                            	smpsVcAlgorithm     $02
000990F0                            	smpsVcFeedback      $07
000990F0                            	smpsVcUnusedBits    $00
000990F0                            	smpsVcDetune        $04, $06, $02, $00
000990F0                            	smpsVcCoarseFreq    $01, $01, $01, $01
000990F0                            	smpsVcRateScale     $00, $00, $00, $00
000990F0                            	smpsVcAttackRate    $18, $19, $14, $14
000990F0                            	smpsVcAmpMod        $00, $00, $00, $00
000990F0                            	smpsVcDecayRate1    $09, $0D, $09, $09
000990F0                            	smpsVcDecayRate2    $00, $00, $00, $00
000990F0                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
000990F0                            	smpsVcReleaseRate   $08, $0F, $0F, $07
000990F0 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
00099109                            
00099109                            ;	Voice $04
00099109                            ;	$3C
00099109                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
00099109                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
00099109                            	smpsVcAlgorithm     $04
00099109                            	smpsVcFeedback      $07
00099109                            	smpsVcUnusedBits    $00
00099109                            	smpsVcDetune        $07, $00, $00, $03
00099109                            	smpsVcCoarseFreq    $00, $00, $02, $0A
00099109                            	smpsVcRateScale     $00, $00, $00, $00
00099109                            	smpsVcAttackRate    $10, $1F, $10, $1F
00099109                            	smpsVcAmpMod        $00, $00, $00, $00
00099109                            	smpsVcDecayRate1    $00, $00, $00, $00
00099109                            	smpsVcDecayRate2    $00, $00, $00, $00
00099109                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00099109                            	smpsVcReleaseRate   $0A, $02, $0A, $02
00099109 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
00099122                            
00099122                            ;	Voice $05
00099122                            ;	$38
00099122                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
00099122                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
00099122                            	smpsVcAlgorithm     $00
00099122                            	smpsVcFeedback      $07
00099122                            	smpsVcUnusedBits    $00
00099122                            	smpsVcDetune        $04, $06, $02, $00
00099122                            	smpsVcCoarseFreq    $01, $01, $01, $00
00099122                            	smpsVcRateScale     $00, $00, $00, $00
00099122                            	smpsVcAttackRate    $1F, $1F, $1F, $10
00099122                            	smpsVcAmpMod        $00, $00, $00, $00
00099122                            	smpsVcDecayRate1    $00, $03, $00, $17
00099122                            	smpsVcDecayRate2    $00, $08, $08, $0B
00099122                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
00099122                            	smpsVcReleaseRate   $08, $05, $05, $05
00099122 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0009913B                            
0009913B                            
0009913C 00                         		even
0009913C                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0009D34C                            		even
0009D34C                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000A0EA4 00                         		even
000A0EA4                            Music87:	include	sound\music87.asm; Invincibility
000A0EA4                            triple_Header:
000A0EA4 =00000001                  smpsHeaderStartSong = 1
000A0EA4 0000                       	smpsHeaderVoice     triple_Voices
000A0EA6 0501                       	smpsHeaderChan      $05, $01
000A0EA8 0200                       	smpsHeaderTempo     $02, $00
000A0EAA                            
000A0EAE 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000A0EB2 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000A0EB6 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000A0EBA 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000A0EBE 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000A0EC4                            
000A0EC4                            ; DAC Data
000A0EC4                            triple_DAC:
000A0EC4 E0C0                       	smpsPan             panCenter, $00
000A0EC6 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000A0ECC                            
000A0ECC                            triple_Loop01:
000A0ECC 8282 82                    	dc.b	dSnare, dSnare, dSnare
000A0ECF                            
000A0ECF                            triple_Loop00:
000A0ECF 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000A0EDB 06                         	dc.b	$06
000A0EDC F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000A0EE1 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000A0EED 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000A0EF4 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000A0EF9 0303 1B                    	dc.b	$03, $03, $1B
000A0EFC E0C0                       	smpsPan             panCenter, $00
000A0EFE F6FF C4                    	smpsJump triple_DAC
000A0F01                            
000A0F01                            ; FM1 Data
000A0F01                            triple_FM1:
000A0F01 E0C0                       	smpsPan             panCenter, $00
000A0F05 8018                       	dc.b	nRst, $18
000A0F07                            
000A0F07                            triple_Loop0B:
000A0F07 AC06 B8                    	dc.b	nG3, $06, nG4
000A0F0A F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000A0F0F                            
000A0F0F                            triple_Loop0C:
000A0F0F A7B3                       	dc.b	nD3, nD4
000A0F11 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000A0F16                            
000A0F16                            triple_Loop0D:
000A0F16 A9B5                       	dc.b	nE3, nE4
000A0F18 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000A0F1D A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000A0F25 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000A0F2A A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000A0F36 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000A0F42 AD                         	dc.b	nAb3
000A0F43 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000A0F48 8018                       	dc.b	nRst, $18
000A0F4A E0C0                       	smpsPan             panCenter, $00
000A0F4E F6FF B1                    	smpsJump triple_FM1
000A0F51                            
000A0F51                            ; FM2 Data
000A0F51                            triple_FM2:
000A0F51 E0C0                       	smpsPan             panCenter, $00
000A0F55 8018                       	dc.b	nRst, $18
000A0F57                            
000A0F57                            triple_Loop07:
000A0F57 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A0F63 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A0F6F F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000A0F74 8003                       	dc.b	nRst, $03
000A0F76                            
000A0F76                            triple_Loop08:
000A0F76 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A0F7C F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000A0F81 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A0F87                            
000A0F87                            triple_Loop09:
000A0F87 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A0F93 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A0F9F F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000A0FA4 8003                       	dc.b	nRst, $03
000A0FA6                            
000A0FA6                            triple_Loop0A:
000A0FA6 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A0FAC F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000A0FB1 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A0FB7 E0C0                       	smpsPan             panCenter, $00
000A0FBB F6FF 94                    	smpsJump triple_FM2
000A0FBE                            
000A0FBE                            ; FM3 Data
000A0FBE                            triple_FM3:
000A0FBE E0C0                       	smpsPan             panCenter, $00
000A0FC2 8018                       	dc.b	nRst, $18
000A0FC4                            
000A0FC4                            triple_Loop06:
000A0FC4 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000A0FCB F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000A0FD0 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000A0FDC BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000A0FE8 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000A0FEB F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000A0FF0 8018                       	dc.b	nRst, $18
000A0FF2 E0C0                       	smpsPan             panCenter, $00
000A0FF6 F6FF C6                    	smpsJump triple_FM3
000A0FF9                            
000A0FF9                            ; FM4 Data
000A0FF9                            triple_FM4:
000A0FF9 E103                       	smpsAlterNote       $03
000A0FFD E0C0                       	smpsPan             panCenter, $00
000A0FFF 8018                       	dc.b	nRst, $18
000A1001                            
000A1001                            triple_Loop02:
000A1001 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A100D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A1019 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000A101E 8003                       	dc.b	nRst, $03
000A1020                            
000A1020                            triple_Loop03:
000A1020 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A1026 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000A102B B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A1031                            
000A1031                            triple_Loop04:
000A1031 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A103D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A1049 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000A104E 8003                       	dc.b	nRst, $03
000A1050                            
000A1050                            triple_Loop05:
000A1050 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A1056 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000A105B B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A1061 E0C0                       	smpsPan             panCenter, $00
000A1063 F6FF 94                    	smpsJump triple_FM4
000A1066                            
000A1066                            ; PSG1 Data
000A1066                            triple_PSG1:
000A1066 8018                       	dc.b	nRst, $18
000A1068                            
000A1068                            triple_Loop0E:
000A1068 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A1074 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A1080 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A108C 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A1090 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000A1095 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A10A1 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A10AD 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A10B9 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A10BD                            
000A10BD                            triple_Loop0F:
000A10BD 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A10C3 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000A10C8 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000A10CE                            
000A10CE                            triple_Loop10:
000A10CE A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A10DA 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A10E6 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A10F2 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A10F6 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000A10FB A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A1107 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A1113 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A111F 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A1123                            
000A1123                            triple_Loop11:
000A1123 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A1129 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000A112E 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000A1134 F500                       	smpsPSGvoice        $00
000A1136 F6FF 2E                    	smpsJump triple_PSG1
000A1139                            
000A1139                            triple_Voices:
000A1139                            ;	Voice $00
000A1139                            ;	$3A
000A1139                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000A1139                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000A1139                            	smpsVcAlgorithm     $02
000A1139                            	smpsVcFeedback      $07
000A1139                            	smpsVcUnusedBits    $00
000A1139                            	smpsVcDetune        $00, $00, $00, $00
000A1139                            	smpsVcCoarseFreq    $01, $01, $07, $01
000A1139                            	smpsVcRateScale     $01, $02, $02, $02
000A1139                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000A1139                            	smpsVcAmpMod        $00, $00, $00, $00
000A1139                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000A1139                            	smpsVcDecayRate2    $00, $00, $00, $00
000A1139                            	smpsVcDecayLevel    $00, $01, $0F, $01
000A1139                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1139 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000A1152                            
000A1152                            ;	Voice $01
000A1152                            ;	$20
000A1152                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000A1152                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000A1152                            	smpsVcAlgorithm     $00
000A1152                            	smpsVcFeedback      $04
000A1152                            	smpsVcUnusedBits    $00
000A1152                            	smpsVcDetune        $00, $00, $03, $07
000A1152                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000A1152                            	smpsVcRateScale     $03, $03, $03, $02
000A1152                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000A1152                            	smpsVcAmpMod        $00, $00, $00, $00
000A1152                            	smpsVcDecayRate1    $04, $04, $0A, $10
000A1152                            	smpsVcDecayRate2    $08, $08, $08, $0F
000A1152                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000A1152                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1152 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A1152 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A116C 00                         		even
000A116C                            Music88:	incbin	sound\music88.bin; Extra Life
000A125A                            		even
000A125A                            Music89:	incbin	sound\music89.bin; Special Stage
000A5122 00                         		even
000A5122                            Music8A:	incbin	sound\music8A.bin; Title Screen
000A52EC                            		even
000A52EC                            Music8B:	incbin	sound\music8B.bin; Ending Theme
000A5586                            		even
000A5586                            Music8C:	incbin	sound\music8C.bin; VS Boss
000A5824                            		even
000A5824                            Music8D:	incbin	sound\music8D.bin; Final Zone
000A5A40                            		even
000A5A40                            Music8E:	include	sound\fle.asm ;		Act Clear
000A5A40                            fle_Header:
000A5A40 =00000001                  smpsHeaderStartSong = 1
000A5A40 0000                       	smpsHeaderVoice     fle_Voices
000A5A42 0603                       	smpsHeaderChan      $06, $03
000A5A44 0100                       	smpsHeaderTempo     $01, $00
000A5A46                            
000A5A4A 0000 0000                  	smpsHeaderFM        fle_FM1,	$00, $00
000A5A4E 0000 0000                  	smpsHeaderFM        fle_FM2,	$00, $00
000A5A52 0000 0000                  	smpsHeaderFM        fle_FM3,	$00, $00
000A5A56 0000 0000                  	smpsHeaderFM        fle_FM4,	$00, $00
000A5A5A 0000 0000                  	smpsHeaderFM        fle_FM5,	$00, $00
000A5A5E 0000 0000 0000             	smpsHeaderPSG       fle_PSG1,	$00, $00, $00, $00
000A5A64 0000 0000 0000             	smpsHeaderPSG       fle_PSG2,	$00, $00, $00, $00
000A5A6A 0000 0000 0000             	smpsHeaderPSG       fle_PSG3,	$00, $00, $00, $00
000A5A70                            
000A5A70                            ; FM1 Data
000A5A70                            fle_FM1:
000A5A70                            ; FM2 Data
000A5A70                            fle_FM2:
000A5A70                            ; FM3 Data
000A5A70                            fle_FM3:
000A5A70 F2                         	smpsStop
000A5A71                            
000A5A71                            ; FM4 Data
000A5A71                            fle_FM4:
000A5A71 E0C0                       	smpsPan             panCenter, $00
000A5A73 807F 7F7F 20               	dc.b	nRst, $7F, $7F, $7F, $20
000A5A7A E60F                       	smpsAlterVol        $0F
000A5A7C A704                       	dc.b	nD3, $04
000A5A7E E606                       	smpsAlterVol        $06
000A5A80 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5A85 E6FA                       	smpsAlterVol        $FA
000A5A87 A705                       	dc.b	nD3, $05
000A5A89 E606                       	smpsAlterVol        $06
000A5A8B A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5A90 E6FA                       	smpsAlterVol        $FA
000A5A92 A704                       	dc.b	nD3, $04
000A5A94 E606                       	smpsAlterVol        $06
000A5A96 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5A9C E6FA                       	smpsAlterVol        $FA
000A5A9E A7                         	dc.b	nD3
000A5A9F E606                       	smpsAlterVol        $06
000A5AA1 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5AA6 E6FA                       	smpsAlterVol        $FA
000A5AA8 A704                       	dc.b	nD3, $04
000A5AAA E606                       	smpsAlterVol        $06
000A5AAC A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5AB2 E6FA                       	smpsAlterVol        $FA
000A5AB4 A7                         	dc.b	nD3
000A5AB5 E606                       	smpsAlterVol        $06
000A5AB7 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5ABD E6FA                       	smpsAlterVol        $FA
000A5ABF A705                       	dc.b	nD3, $05
000A5AC1 E606                       	smpsAlterVol        $06
000A5AC3 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5AC8 E6FA                       	smpsAlterVol        $FA
000A5ACA A7                         	dc.b	nD3
000A5ACB E606                       	smpsAlterVol        $06
000A5ACD A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5AD3 E6FA                       	smpsAlterVol        $FA
000A5AD5 A705                       	dc.b	nD3, $05
000A5AD7 E606                       	smpsAlterVol        $06
000A5AD9 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5ADE E6FA                       	smpsAlterVol        $FA
000A5AE0 A704                       	dc.b	nD3, $04
000A5AE2 E606                       	smpsAlterVol        $06
000A5AE4 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5AE9 E6FA                       	smpsAlterVol        $FA
000A5AEB A705                       	dc.b	nD3, $05
000A5AED E606                       	smpsAlterVol        $06
000A5AEF A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5AF4 E6FA                       	smpsAlterVol        $FA
000A5AF6 A704                       	dc.b	nD3, $04
000A5AF8 E606                       	smpsAlterVol        $06
000A5AFA A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5AFF E6FA                       	smpsAlterVol        $FA
000A5B01 A705                       	dc.b	nD3, $05
000A5B03 E606                       	smpsAlterVol        $06
000A5B05 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5B0A E6FA                       	smpsAlterVol        $FA
000A5B0C A704                       	dc.b	nD3, $04
000A5B0E E606                       	smpsAlterVol        $06
000A5B10 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5B16 E6FA                       	smpsAlterVol        $FA
000A5B18 A7                         	dc.b	nD3
000A5B19 E606                       	smpsAlterVol        $06
000A5B1B A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5B21 E6FA                       	smpsAlterVol        $FA
000A5B23 A705                       	dc.b	nD3, $05
000A5B25 E606                       	smpsAlterVol        $06
000A5B27 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5B2C E6FA                       	smpsAlterVol        $FA
000A5B2E A7                         	dc.b	nD3
000A5B2F E606                       	smpsAlterVol        $06
000A5B31 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5B37 E6FA                       	smpsAlterVol        $FA
000A5B39 A705                       	dc.b	nD3, $05
000A5B3B E606                       	smpsAlterVol        $06
000A5B3D A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5B42 E6FA                       	smpsAlterVol        $FA
000A5B44 A704                       	dc.b	nD3, $04
000A5B46 E606                       	smpsAlterVol        $06
000A5B48 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5B4D E6FA                       	smpsAlterVol        $FA
000A5B4F A705                       	dc.b	nD3, $05
000A5B51 E606                       	smpsAlterVol        $06
000A5B53 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5B58 E6FA                       	smpsAlterVol        $FA
000A5B5A A704                       	dc.b	nD3, $04
000A5B5C E606                       	smpsAlterVol        $06
000A5B5E A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5B63 E6FA                       	smpsAlterVol        $FA
000A5B65 A705                       	dc.b	nD3, $05
000A5B67 E606                       	smpsAlterVol        $06
000A5B69 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5B6E E6FA                       	smpsAlterVol        $FA
000A5B70 A704                       	dc.b	nD3, $04
000A5B72 E606                       	smpsAlterVol        $06
000A5B74 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5B7A E6FA                       	smpsAlterVol        $FA
000A5B7C A7                         	dc.b	nD3
000A5B7D E606                       	smpsAlterVol        $06
000A5B7F A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5B84 E6FA                       	smpsAlterVol        $FA
000A5B86 A704                       	dc.b	nD3, $04
000A5B88 E606                       	smpsAlterVol        $06
000A5B8A A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A5B90 E6FA                       	smpsAlterVol        $FA
000A5B92 A7                         	dc.b	nD3
000A5B93 E606                       	smpsAlterVol        $06
000A5B95 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A5B9B E6FA                       	smpsAlterVol        $FA
000A5B9D A705                       	dc.b	nD3, $05
000A5B9F E606                       	smpsAlterVol        $06
000A5BA1 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5BA6 E6FA                       	smpsAlterVol        $FA
000A5BA8 A704                       	dc.b	nD3, $04
000A5BAA E606                       	smpsAlterVol        $06
000A5BAC A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5BB1 E6FA                       	smpsAlterVol        $FA
000A5BB3 A705                       	dc.b	nD3, $05
000A5BB5 E606                       	smpsAlterVol        $06
000A5BB7 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A5BBC E6FA                       	smpsAlterVol        $FA
000A5BBE A704                       	dc.b	nD3, $04
000A5BC0 E606                       	smpsAlterVol        $06
000A5BC2 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A5BC7 E6FA                       	smpsAlterVol        $FA
000A5BC9 A705                       	dc.b	nD3, $05
000A5BCB E606                       	smpsAlterVol        $06
000A5BCD A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A5BD2 E6FA                       	smpsAlterVol        $FA
000A5BD4 A704                       	dc.b	nD3, $04
000A5BD6 E606                       	smpsAlterVol        $06
000A5BD8 A705 A7A7 7FE7 19          	dc.b	nD3, $05, nD3, nD3, $7F, smpsNoAttack, $19
000A5BDF F2                         	smpsStop
000A5BE0                            
000A5BE0                            ; FM5 Data
000A5BE0                            fle_FM5:
000A5BE0 E0C0                       	smpsPan             panCenter, $00
000A5BE2 807F 7F7F 7F30             	dc.b	nRst, $7F, $7F, $7F, $7F, $30
000A5BEA E610                       	smpsAlterVol        $10
000A5BEC A87F E719 807F 7F7F 3E     	dc.b	nEb3, $7F, smpsNoAttack, $19, nRst, $7F, $7F, $7F, $3E
000A5BF5 F2                         	smpsStop
000A5BF6                            
000A5BF6                            ; PSG1 Data
000A5BF6                            fle_PSG1:
000A5BF6 807F 7F7F 7F06 B701        	dc.b	nRst, $7F, $7F, $7F, $7F, $06, nFs4, $01
000A5BFE EC02                       	smpsPSGAlterVol     $02
000A5C00 B7                         	dc.b	nFs4
000A5C01 EC03                       	smpsPSGAlterVol     $03
000A5C03 B7                         	dc.b	nFs4
000A5C04 EC03                       	smpsPSGAlterVol     $03
000A5C06 B7                         	dc.b	nFs4
000A5C07 EC03                       	smpsPSGAlterVol     $03
000A5C09 B7                         	dc.b	nFs4
000A5C0A ECF5                       	smpsPSGAlterVol     $F5
000A5C0C B7                         	dc.b	nFs4
000A5C0D EC02                       	smpsPSGAlterVol     $02
000A5C0F B7                         	dc.b	nFs4
000A5C10 EC03                       	smpsPSGAlterVol     $03
000A5C12 B7                         	dc.b	nFs4
000A5C13 EC03                       	smpsPSGAlterVol     $03
000A5C15 B7                         	dc.b	nFs4
000A5C16 ECF8                       	smpsPSGAlterVol     $F8
000A5C18 B7                         	dc.b	nFs4
000A5C19 EC02                       	smpsPSGAlterVol     $02
000A5C1B B7                         	dc.b	nFs4
000A5C1C EC03                       	smpsPSGAlterVol     $03
000A5C1E B7                         	dc.b	nFs4
000A5C1F EC03                       	smpsPSGAlterVol     $03
000A5C21 B7                         	dc.b	nFs4
000A5C22 EC03                       	smpsPSGAlterVol     $03
000A5C24 B7                         	dc.b	nFs4
000A5C25 ECF5                       	smpsPSGAlterVol     $F5
000A5C27 B7                         	dc.b	nFs4
000A5C28 EC02                       	smpsPSGAlterVol     $02
000A5C2A B7                         	dc.b	nFs4
000A5C2B EC03                       	smpsPSGAlterVol     $03
000A5C2D B7                         	dc.b	nFs4
000A5C2E EC03                       	smpsPSGAlterVol     $03
000A5C30 B7                         	dc.b	nFs4
000A5C31 EC03                       	smpsPSGAlterVol     $03
000A5C33 B7                         	dc.b	nFs4
000A5C34 ECF5                       	smpsPSGAlterVol     $F5
000A5C36 B7                         	dc.b	nFs4
000A5C37 EC02                       	smpsPSGAlterVol     $02
000A5C39 B7                         	dc.b	nFs4
000A5C3A EC06                       	smpsPSGAlterVol     $06
000A5C3C B7                         	dc.b	nFs4
000A5C3D EC03                       	smpsPSGAlterVol     $03
000A5C3F B7                         	dc.b	nFs4
000A5C40 ECF5                       	smpsPSGAlterVol     $F5
000A5C42 B7                         	dc.b	nFs4
000A5C43 EC02                       	smpsPSGAlterVol     $02
000A5C45 B7                         	dc.b	nFs4
000A5C46 EC03                       	smpsPSGAlterVol     $03
000A5C48 B7                         	dc.b	nFs4
000A5C49 EC03                       	smpsPSGAlterVol     $03
000A5C4B B7                         	dc.b	nFs4
000A5C4C EC03                       	smpsPSGAlterVol     $03
000A5C4E B7                         	dc.b	nFs4
000A5C4F ECF5                       	smpsPSGAlterVol     $F5
000A5C51 B7                         	dc.b	nFs4
000A5C52 EC02                       	smpsPSGAlterVol     $02
000A5C54 B7                         	dc.b	nFs4
000A5C55 EC03                       	smpsPSGAlterVol     $03
000A5C57 B7                         	dc.b	nFs4
000A5C58 EC03                       	smpsPSGAlterVol     $03
000A5C5A B7                         	dc.b	nFs4
000A5C5B EC03                       	smpsPSGAlterVol     $03
000A5C5D B780 7F2B                  	dc.b	nFs4, nRst, $7F, $2B
000A5C61 ECF7                       	smpsPSGAlterVol     $F7
000A5C63 A008 8006 9E08 8006 A308+  	dc.b	nG2, $08, nRst, $06, nF2, $08, nRst, $06, nBb2, $08, nRst, $0A
000A5C6F A006 8004 A005 8004 A205+  	dc.b	nG2, $06, nRst, $04, nG2, $05, nRst, $04, nA2, $05, nRst, $04
000A5C7B A005 8004 A208 8001 A305+  	dc.b	nG2, $05, nRst, $04, nA2, $08, nRst, $01, nBb2, $05, nRst, $01
000A5C87 A305 8003 A305 8001 A304+  	dc.b	nBb2, $05, nRst, $03, nBb2, $05, nRst, $01, nBb2, $04, nRst, nBb2
000A5C93 0580 01A3 0480 A308 807F+  	dc.b	$05, nRst, $01, nBb2, $04, nRst, nBb2, $08, nRst, $7F, $7F, $26
000A5C9F F2                         	smpsStop
000A5CA0                            
000A5CA0                            ; PSG2 Data
000A5CA0                            fle_PSG2:
000A5CA0 807F 7F7F 7F7F 52          	dc.b	nRst, $7F, $7F, $7F, $7F, $7F, $52
000A5CA7 EC02                       	smpsPSGAlterVol     $02
000A5CA9 A708 8006 A908 8006 A908+  	dc.b	nD3, $08, nRst, $06, nE3, $08, nRst, $06, nE3, $08, nRst, $0A
000A5CB5 E101                       	smpsAlterNote       $01
000A5CB7 AB06 8004                  	dc.b	nFs3, $06, nRst, $04
000A5CBB E101                       	smpsAlterNote       $01
000A5CBD AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A5CC1 E101                       	smpsAlterNote       $01
000A5CC3 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A5CC7 E101                       	smpsAlterNote       $01
000A5CC9 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A5CCD E101                       	smpsAlterNote       $01
000A5CCF AB08 8001                  	dc.b	nFs3, $08, nRst, $01
000A5CD3 E101                       	smpsAlterNote       $01
000A5CD5 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A5CD9 E101                       	smpsAlterNote       $01
000A5CDB AB05 8003                  	dc.b	nFs3, $05, nRst, $03
000A5CDF E101                       	smpsAlterNote       $01
000A5CE1 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A5CE5 E101                       	smpsAlterNote       $01
000A5CE7 AB04 80                    	dc.b	nFs3, $04, nRst
000A5CEA E101                       	smpsAlterNote       $01
000A5CEC AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A5CF0 E101                       	smpsAlterNote       $01
000A5CF2 AB04 80                    	dc.b	nFs3, $04, nRst
000A5CF5 E101                       	smpsAlterNote       $01
000A5CF7 AB08 807F 7F26             	dc.b	nFs3, $08, nRst, $7F, $7F, $26
000A5CFD F2                         	smpsStop
000A5CFE                            
000A5CFE                            ; PSG3 Data
000A5CFE                            fle_PSG3:
000A5CFE 807F 7F7F 7F39             	dc.b	nRst, $7F, $7F, $7F, $7F, $39
000A5D04 F3E7                       	smpsPSGform         $E7
000A5D06 E108                       	smpsAlterNote       $08
000A5D08 0002                       	dc.b	nMaxPSG, $02
000A5D0A EC01                       	smpsPSGAlterVol     $01
000A5D0C E108                       	smpsAlterNote       $08
000A5D0E 0005                       	dc.b	nMaxPSG, $05
000A5D10 EC01                       	smpsPSGAlterVol     $01
000A5D12 E108                       	smpsAlterNote       $08
000A5D14 0008                       	dc.b	nMaxPSG, $08
000A5D16 EC01                       	smpsPSGAlterVol     $01
000A5D18 E108                       	smpsAlterNote       $08
000A5D1A 00                         	dc.b	nMaxPSG
000A5D1B EC01                       	smpsPSGAlterVol     $01
000A5D1D E108                       	smpsAlterNote       $08
000A5D1F 00                         	dc.b	nMaxPSG
000A5D20 EC01                       	smpsPSGAlterVol     $01
000A5D22 E108                       	smpsAlterNote       $08
000A5D24 0007                       	dc.b	nMaxPSG, $07
000A5D26 EC01                       	smpsPSGAlterVol     $01
000A5D28 E108                       	smpsAlterNote       $08
000A5D2A 0005                       	dc.b	nMaxPSG, $05
000A5D2C EC01                       	smpsPSGAlterVol     $01
000A5D2E E108                       	smpsAlterNote       $08
000A5D30 0007                       	dc.b	nMaxPSG, $07
000A5D32 EC01                       	smpsPSGAlterVol     $01
000A5D34 E108                       	smpsAlterNote       $08
000A5D36 0004                       	dc.b	nMaxPSG, $04
000A5D38 EC01                       	smpsPSGAlterVol     $01
000A5D3A E108                       	smpsAlterNote       $08
000A5D3C 0007                       	dc.b	nMaxPSG, $07
000A5D3E EC01                       	smpsPSGAlterVol     $01
000A5D40 E108                       	smpsAlterNote       $08
000A5D42 0006                       	dc.b	nMaxPSG, $06
000A5D44 EC01                       	smpsPSGAlterVol     $01
000A5D46 E108                       	smpsAlterNote       $08
000A5D48 0009                       	dc.b	nMaxPSG, $09
000A5D4A EC01                       	smpsPSGAlterVol     $01
000A5D4C E108                       	smpsAlterNote       $08
000A5D4E 0007                       	dc.b	nMaxPSG, $07
000A5D50 EC01                       	smpsPSGAlterVol     $01
000A5D52 E108                       	smpsAlterNote       $08
000A5D54 0001                       	dc.b	nMaxPSG, $01
000A5D56 ECFF                       	smpsPSGAlterVol     $FF
000A5D58 E108                       	smpsAlterNote       $08
000A5D5A 00                         	dc.b	nMaxPSG
000A5D5B EC01                       	smpsPSGAlterVol     $01
000A5D5D E108                       	smpsAlterNote       $08
000A5D5F 0009                       	dc.b	nMaxPSG, $09
000A5D61 EC01                       	smpsPSGAlterVol     $01
000A5D63 E108                       	smpsAlterNote       $08
000A5D65 0007 807F 7F7F 68          	dc.b	nMaxPSG, $07, nRst, $7F, $7F, $7F, $68
000A5D6C F2                         	smpsStop
000A5D6D                            
000A5D6D                            ; DAC Data
000A5D6D                            fle_DAC:
000A5D6D 8913 8306 8B0D 8389 8989+  	dc.b	dMidTimpani, $13, dTimpani, $06, dVLowTimpani, $0D, dTimpani, dMidTimpani, dMidTimpani, dMidTimpani, $1A, dTimpani
000A5D79 0D83 8319 890D 8888 1A89+  	dc.b	$0D, dTimpani, dTimpani, $19, dMidTimpani, $0D, dHiTimpani, dHiTimpani, $1A, dMidTimpani, $14, dTimpani
000A5D85 068B 0D83 8989 8983 0C83+  	dc.b	$06, dVLowTimpani, $0D, dTimpani, dMidTimpani, dMidTimpani, dMidTimpani, dTimpani, $0C, dTimpani, $0D, dTimpani
000A5D91 8983 8534 890E 8304 8B09+  	dc.b	dMidTimpani, dTimpani, $85, $34, dMidTimpani, $0E, dTimpani, $04, dVLowTimpani, $09, dTimpani, $0A
000A5D9D 8909 8989 850A 8309 8383+  	dc.b	dMidTimpani, $09, dMidTimpani, dMidTimpani, $85, $0A, dTimpani, $09, dTimpani, dTimpani, $84, dMidTimpani
000A5DA9 0A88 0988 8289 0581 0983+  	dc.b	$0A, dHiTimpani, $09, dHiTimpani, dSnare, dMidTimpani, $05, dKick, $09, dTimpani, $05, dVLowTimpani
000A5DB5 0983 8989 0A89 0983 8805+  	dc.b	$09, dTimpani, dMidTimpani, dMidTimpani, $0A, dMidTimpani, $09, dTimpani, dHiTimpani, $05, dMidTimpani, $04
000A5DC1 830A 8909 8382 0182 0482+  	dc.b	dTimpani, $0A, dMidTimpani, $09, dTimpani, dSnare, $01, dSnare, $04, dSnare, $01, dSnare
000A5DCD 0382 0181 0481 0182 0382+  	dc.b	$03, dSnare, $01, dKick, $04, dKick, $01, dSnare, $03, dSnare, $01, dKick
000A5DD9 0481 0182 0482 0181 0381+  	dc.b	$04, dKick, $01, dSnare, $04, dSnare, $01, dKick, $03, dKick, $01, dSnare
000A5DE5 0489 0582 0482 0583 048B+  	dc.b	$04, dMidTimpani, $05, dSnare, $04, dSnare, $05, dTimpani, $04, dVLowTimpani, $05, dSnare
000A5DF1 8304 8205 8904 8205 8982+  	dc.b	dTimpani, $04, dSnare, $05, dMidTimpani, $04, dSnare, $05, dMidTimpani, dSnare, $04, dMidTimpani
000A5DFD 0582 8504 8205 8304 8205+  	dc.b	$05, dSnare, $85, $04, dSnare, $05, dTimpani, $04, dSnare, $05, dTimpani, dSnare
000A5E09 0483 0582 0486 0582 8904+  	dc.b	$04, dTimpani, $05, dSnare, $04, $86, $05, dSnare, dMidTimpani, $04, dSnare, $05
000A5E15 8804 8205 8882 0482 0582+  	dc.b	dHiTimpani, $04, dSnare, $05, dHiTimpani, dSnare, $04, dSnare, $05, dSnare, dMidTimpani, $04
000A5E21 8205 8204 8305 8B82 0483+  	dc.b	dSnare, $05, dSnare, $04, dTimpani, $05, dVLowTimpani, dSnare, $04, dTimpani, $05, dSnare
000A5E2D 0489 0582 8909 8904 8205+  	dc.b	$04, dMidTimpani, $05, dSnare, dMidTimpani, $09, dMidTimpani, $04, dSnare, $05, dTimpani, $09
000A5E39 8801 8804 8801 8904 8988+  	dc.b	dHiTimpani, $01, dHiTimpani, $04, dHiTimpani, $01, dMidTimpani, $04, dMidTimpani, dHiTimpani, $01, dHiTimpani
000A5E45 0488 0189 0389 0189 0488+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dHiTimpani, $01, dHiTimpani
000A5E51 0488 0189 0389 0189 0483+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dTimpani, $01, dTimpani
000A5E5D 0383 018B 048B 018B 0482+  	dc.b	$03, dTimpani, $01, dVLowTimpani, $04, dVLowTimpani, $01, dVLowTimpani, $04, dSnare, $01, dKick
000A5E69 0381 0182 0482 0181 0482+  	dc.b	$03, dKick, $01, dSnare, $04, dSnare, $01, dKick, $04, dSnare, $7F, nRst
000A5E75 19                         	dc.b	$19
000A5E76 F2                         	smpsStop
000A5E77                            
000A5E77                            fle_Voices:
000A5E77                            ;	Voice $00
000A5E77                            ;	$00
000A5E77                            ;	$70, $70, $70, $70, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $1F
000A5E77                            ;	$00, $00, $00, $12, 	$F0, $F0, $F0, $0F, 	$00, $00, $00, $00
000A5E77                            	smpsVcAlgorithm     $00
000A5E77                            	smpsVcFeedback      $00
000A5E77                            	smpsVcUnusedBits    $00
000A5E77                            	smpsVcDetune        $07, $07, $07, $07
000A5E77                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A5E77                            	smpsVcRateScale     $00, $00, $00, $00
000A5E77                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A5E77                            	smpsVcAmpMod        $00, $00, $00, $00
000A5E77                            	smpsVcDecayRate1    $1F, $00, $00, $00
000A5E77                            	smpsVcDecayRate2    $12, $00, $00, $00
000A5E77                            	smpsVcDecayLevel    $00, $0F, $0F, $0F
000A5E77                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A5E77 0070 7070 701F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A5E90                            
000A5E90                            ;	Voice $01
000A5E90                            ;	$25
000A5E90                            ;	$01, $01, $01, $71, 	$1E, $1E, $1E, $1E, 	$08, $06, $0B, $03
000A5E90                            ;	$00, $00, $00, $00, 	$4F, $4F, $AF, $0F, 	$08, $16, $06, $00
000A5E90                            	smpsVcAlgorithm     $05
000A5E90                            	smpsVcFeedback      $04
000A5E90                            	smpsVcUnusedBits    $00
000A5E90                            	smpsVcDetune        $07, $00, $00, $00
000A5E90                            	smpsVcCoarseFreq    $01, $01, $01, $01
000A5E90                            	smpsVcRateScale     $00, $00, $00, $00
000A5E90                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000A5E90                            	smpsVcAmpMod        $00, $00, $00, $00
000A5E90                            	smpsVcDecayRate1    $03, $0B, $06, $08
000A5E90                            	smpsVcDecayRate2    $00, $00, $00, $00
000A5E90                            	smpsVcDecayLevel    $00, $0A, $04, $04
000A5E90                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A5E90 2501 0101 711E 1E1E 1E08+  	smpsVcTotalLevel    $00, $06, $16, $08
000A5EA9                            
000A5EA9                            
000A5EAA 00                         		even
000A5EAA                            Music8F:	incbin	sound\music8F.bin ; Game Over
000A64EA 00                         		even
000A64EA                            Music90:	incbin	sound\music90.bin ; Continue
000A6884 00                         		even
000A6884                            Music91:	incbin	sound\music91.bin ; Credits
000A7B52                            		even
000A7B52                            Music92:	incbin	sound\music92.bin ; Drowning
000A7E94 00                         		even
000A7E94                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A7F64                            		even
000A7F64                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A8C3A 00                         		even
000A8C3A                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A8D8A 00                         		even
000A8D8A                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A8DC4 00                         		even
000A8DC4                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A8DFE 00                         		even
000A8DFE                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A8E38 00                         		even
000A8E38                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A8E72 00                         		even
000A8E72                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A8EAC 00                         		even
000A8EAC                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A8EE6 00                         		even
000A8EE6                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A8F20 00                         		even
000A8F20                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A8F5A 00                         		even
000A8F5A                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A944A                            		even
000A944A                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A944A                            GentleBreeze_Header:
000A944A =00000001                  smpsHeaderStartSong = 1
000A944A 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A944C 0603                       	smpsHeaderChan      $06, $03
000A944E 0100                       	smpsHeaderTempo     $01, $00
000A9450                            
000A9454 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A9458 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A945C 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A9460 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A9464 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A9468 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A946E 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A9474 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A947A                            
000A947A                            ; PSG3 Data
000A947A                            GentleBreeze_PSG3:
000A947A F2                         	smpsStop
000A947B                            
000A947B                            ; FM1 Data
000A947B                            GentleBreeze_FM1:
000A947D E0C0                       	smpsPan             panCenter, $00
000A947F E1FF                       	smpsAlterNote       $FF
000A9481 C410                       	dc.b	nG5, $10
000A9483 E60F                       	smpsAlterVol        $0F
000A9485 C4                         	dc.b	nG5
000A9486 E6F1                       	smpsAlterVol        $F1
000A9488 E100                       	smpsAlterNote       $00
000A948A C2                         	dc.b	nF5
000A948B E60F                       	smpsAlterVol        $0F
000A948D 08                         	dc.b	$08
000A948E E6F1                       	smpsAlterVol        $F1
000A9490 C010                       	dc.b	nEb5, $10
000A9492 E60F                       	smpsAlterVol        $0F
000A9494 C0                         	dc.b	nEb5
000A9495 E6F1                       	smpsAlterVol        $F1
000A9497 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A949D E60F                       	smpsAlterVol        $0F
000A949F C9                         	dc.b	nC6
000A94A0 E6F1                       	smpsAlterVol        $F1
000A94A2 C5                         	dc.b	nAb5
000A94A3 E60F                       	smpsAlterVol        $0F
000A94A5 08                         	dc.b	$08
000A94A6 E6F1                       	smpsAlterVol        $F1
000A94A8 C010                       	dc.b	nEb5, $10
000A94AA E60F                       	smpsAlterVol        $0F
000A94AC C0                         	dc.b	nEb5
000A94AD E6F1                       	smpsAlterVol        $F1
000A94AF C208                       	dc.b	nF5, $08
000A94B1 E1FF                       	smpsAlterNote       $FF
000A94B3 C410                       	dc.b	nG5, $10
000A94B5 E100                       	smpsAlterNote       $00
000A94B7 C5C7                       	dc.b	nAb5, nBb5
000A94B9 E60F                       	smpsAlterVol        $0F
000A94BB C7                         	dc.b	nBb5
000A94BC E6F1                       	smpsAlterVol        $F1
000A94BE C5                         	dc.b	nAb5
000A94BF E60F                       	smpsAlterVol        $0F
000A94C1 08                         	dc.b	$08
000A94C2 E6F1                       	smpsAlterVol        $F1
000A94C4 E1FF                       	smpsAlterNote       $FF
000A94C6 C410                       	dc.b	nG5, $10
000A94C8 E60F                       	smpsAlterVol        $0F
000A94CA C4                         	dc.b	nG5
000A94CB E6F1                       	smpsAlterVol        $F1
000A94CD C4                         	dc.b	nG5
000A94CE E100                       	smpsAlterNote       $00
000A94D0 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A94D5 E60F                       	smpsAlterVol        $0F
000A94D7 C2                         	dc.b	nF5
000A94D8 E6F1                       	smpsAlterVol        $F1
000A94DA E1FF                       	smpsAlterNote       $FF
000A94DC C4                         	dc.b	nG5
000A94DD E60F                       	smpsAlterVol        $0F
000A94DF 08                         	dc.b	$08
000A94E0 E6F1                       	smpsAlterVol        $F1
000A94E2 10                         	dc.b	$10
000A94E3 E60F                       	smpsAlterVol        $0F
000A94E5 38                         	dc.b	$38
000A94E6 E6F1                       	smpsAlterVol        $F1
000A94E8 10                         	dc.b	$10
000A94E9 E60F                       	smpsAlterVol        $0F
000A94EB C4                         	dc.b	nG5
000A94EC E6F1                       	smpsAlterVol        $F1
000A94EE E100                       	smpsAlterNote       $00
000A94F0 C2                         	dc.b	nF5
000A94F1 E60F                       	smpsAlterVol        $0F
000A94F3 08                         	dc.b	$08
000A94F4 E6F1                       	smpsAlterVol        $F1
000A94F6 C010                       	dc.b	nEb5, $10
000A94F8 E60F                       	smpsAlterVol        $0F
000A94FA C0                         	dc.b	nEb5
000A94FB E6F1                       	smpsAlterVol        $F1
000A94FD BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9503 E60F                       	smpsAlterVol        $0F
000A9505 C9                         	dc.b	nC6
000A9506 E6F1                       	smpsAlterVol        $F1
000A9508 C5                         	dc.b	nAb5
000A9509 E60F                       	smpsAlterVol        $0F
000A950B 08                         	dc.b	$08
000A950C E6F1                       	smpsAlterVol        $F1
000A950E C010                       	dc.b	nEb5, $10
000A9510 E60F                       	smpsAlterVol        $0F
000A9512 C0                         	dc.b	nEb5
000A9513 E6F1                       	smpsAlterVol        $F1
000A9515 C208                       	dc.b	nF5, $08
000A9517 E1FF                       	smpsAlterNote       $FF
000A9519 C410                       	dc.b	nG5, $10
000A951B E100                       	smpsAlterNote       $00
000A951D C5C7                       	dc.b	nAb5, nBb5
000A951F E60F                       	smpsAlterVol        $0F
000A9521 C7                         	dc.b	nBb5
000A9522 E6F1                       	smpsAlterVol        $F1
000A9524 C5                         	dc.b	nAb5
000A9525 E60F                       	smpsAlterVol        $0F
000A9527 08                         	dc.b	$08
000A9528 E6F1                       	smpsAlterVol        $F1
000A952A E1FF                       	smpsAlterNote       $FF
000A952C C410                       	dc.b	nG5, $10
000A952E E60F                       	smpsAlterVol        $0F
000A9530 C4                         	dc.b	nG5
000A9531 E6F1                       	smpsAlterVol        $F1
000A9533 C4                         	dc.b	nG5
000A9534 E100                       	smpsAlterNote       $00
000A9536 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A953B E60F                       	smpsAlterVol        $0F
000A953D 28                         	dc.b	$28
000A953E E6F1                       	smpsAlterVol        $F1
000A9540 C008 10                    	dc.b	nEb5, $08, $10
000A9543 E60F                       	smpsAlterVol        $0F
000A9545 21                         	dc.b	$21
000A9546                            
000A9546                            GentleBreeze_Loop12:
000A9546 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A9549 F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A954E E717                       	dc.b	smpsNoAttack, $17
000A9550 E6F1                       	smpsAlterVol        $F1
000A9552 E1FF                       	smpsAlterNote       $FF
000A9554 C410                       	dc.b	nG5, $10
000A9556 E60F                       	smpsAlterVol        $0F
000A9558 C4                         	dc.b	nG5
000A9559 E6F1                       	smpsAlterVol        $F1
000A955B E100                       	smpsAlterNote       $00
000A955D C2                         	dc.b	nF5
000A955E E60F                       	smpsAlterVol        $0F
000A9560 08                         	dc.b	$08
000A9561 E6F1                       	smpsAlterVol        $F1
000A9563 C010                       	dc.b	nEb5, $10
000A9565 E60F                       	smpsAlterVol        $0F
000A9567 C0                         	dc.b	nEb5
000A9568 E6F1                       	smpsAlterVol        $F1
000A956A BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9570 E60F                       	smpsAlterVol        $0F
000A9572 C9                         	dc.b	nC6
000A9573 E6F1                       	smpsAlterVol        $F1
000A9575 C5                         	dc.b	nAb5
000A9576 E60F                       	smpsAlterVol        $0F
000A9578 08                         	dc.b	$08
000A9579 E6F1                       	smpsAlterVol        $F1
000A957B C010                       	dc.b	nEb5, $10
000A957D E60F                       	smpsAlterVol        $0F
000A957F C0                         	dc.b	nEb5
000A9580 E6F1                       	smpsAlterVol        $F1
000A9582 C208                       	dc.b	nF5, $08
000A9584 E1FF                       	smpsAlterNote       $FF
000A9586 C410                       	dc.b	nG5, $10
000A9588 E100                       	smpsAlterNote       $00
000A958A C5C7                       	dc.b	nAb5, nBb5
000A958C E60F                       	smpsAlterVol        $0F
000A958E C7                         	dc.b	nBb5
000A958F E6F1                       	smpsAlterVol        $F1
000A9591 C5                         	dc.b	nAb5
000A9592 E60F                       	smpsAlterVol        $0F
000A9594 08                         	dc.b	$08
000A9595 E6F1                       	smpsAlterVol        $F1
000A9597 E1FF                       	smpsAlterNote       $FF
000A9599 C410                       	dc.b	nG5, $10
000A959B E60F                       	smpsAlterVol        $0F
000A959D C4                         	dc.b	nG5
000A959E E6F1                       	smpsAlterVol        $F1
000A95A0 C4                         	dc.b	nG5
000A95A1 E100                       	smpsAlterNote       $00
000A95A3 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A95A8 E60F                       	smpsAlterVol        $0F
000A95AA C2                         	dc.b	nF5
000A95AB E6F1                       	smpsAlterVol        $F1
000A95AD E1FF                       	smpsAlterNote       $FF
000A95AF C4                         	dc.b	nG5
000A95B0 E60F                       	smpsAlterVol        $0F
000A95B2 08                         	dc.b	$08
000A95B3 E6F1                       	smpsAlterVol        $F1
000A95B5 10                         	dc.b	$10
000A95B6 E60F                       	smpsAlterVol        $0F
000A95B8 38                         	dc.b	$38
000A95B9 E6F1                       	smpsAlterVol        $F1
000A95BB 10                         	dc.b	$10
000A95BC E60F                       	smpsAlterVol        $0F
000A95BE C4                         	dc.b	nG5
000A95BF E6F1                       	smpsAlterVol        $F1
000A95C1 E100                       	smpsAlterNote       $00
000A95C3 C2                         	dc.b	nF5
000A95C4 E60F                       	smpsAlterVol        $0F
000A95C6 08                         	dc.b	$08
000A95C7 E6F1                       	smpsAlterVol        $F1
000A95C9 C010                       	dc.b	nEb5, $10
000A95CB E60F                       	smpsAlterVol        $0F
000A95CD C0                         	dc.b	nEb5
000A95CE E6F1                       	smpsAlterVol        $F1
000A95D0 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A95D6 E60F                       	smpsAlterVol        $0F
000A95D8 C9                         	dc.b	nC6
000A95D9 E6F1                       	smpsAlterVol        $F1
000A95DB C5                         	dc.b	nAb5
000A95DC E60F                       	smpsAlterVol        $0F
000A95DE 08                         	dc.b	$08
000A95DF E6F1                       	smpsAlterVol        $F1
000A95E1 C010                       	dc.b	nEb5, $10
000A95E3 E60F                       	smpsAlterVol        $0F
000A95E5 C0                         	dc.b	nEb5
000A95E6 E6F1                       	smpsAlterVol        $F1
000A95E8 C208                       	dc.b	nF5, $08
000A95EA E1FF                       	smpsAlterNote       $FF
000A95EC C410                       	dc.b	nG5, $10
000A95EE E100                       	smpsAlterNote       $00
000A95F0 C5C7                       	dc.b	nAb5, nBb5
000A95F2 E60F                       	smpsAlterVol        $0F
000A95F4 C7                         	dc.b	nBb5
000A95F5 E6F1                       	smpsAlterVol        $F1
000A95F7 C5                         	dc.b	nAb5
000A95F8 E60F                       	smpsAlterVol        $0F
000A95FA 08                         	dc.b	$08
000A95FB E6F1                       	smpsAlterVol        $F1
000A95FD E1FF                       	smpsAlterNote       $FF
000A95FF C410                       	dc.b	nG5, $10
000A9601 E60F                       	smpsAlterVol        $0F
000A9603 C4                         	dc.b	nG5
000A9604 E6F1                       	smpsAlterVol        $F1
000A9606 C4                         	dc.b	nG5
000A9607 E100                       	smpsAlterNote       $00
000A9609 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A960E E60F                       	smpsAlterVol        $0F
000A9610 28                         	dc.b	$28
000A9611 E6F1                       	smpsAlterVol        $F1
000A9613 C008 10                    	dc.b	nEb5, $08, $10
000A9616 E60F                       	smpsAlterVol        $0F
000A9618 21                         	dc.b	$21
000A9619 E0C0                       	smpsPan             panCenter, $00
000A961B F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A961E                            
000A961E                            ; FM2 Data
000A961E                            GentleBreeze_FM2:
000A9620 E60C                       	smpsAlterVol        $0C
000A9622 E0C0                       	smpsPan             panCenter, $00
000A9624 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A9630 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A963C 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A9648 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A9654 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A9660 A039                       	dc.b	nG2, $39
000A9662                            
000A9662                            GentleBreeze_Jump04:
000A9662 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A9665                            
000A9665                            GentleBreeze_Loop11:
000A9665 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A9671 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A967D 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A9689 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A9695 A3                         	dc.b	nBb2
000A9696 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A969B 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A96A7 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A96B3 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A96BF 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A96CB 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A96D7 A039                       	dc.b	nG2, $39
000A96D9 E0C0                       	smpsPan             panCenter, $00
000A96DB F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A96DE                            
000A96DE                            ; FM3 Data
000A96DE                            GentleBreeze_FM3:
000A96E0 E0C0                       	smpsPan             panCenter, $00
000A96E2 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A96EA E616                       	smpsAlterVol        $16
000A96EC F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A96F1                            
000A96F1                            GentleBreeze_Loop0F:
000A96F1 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A96F5 E1FF                       	smpsAlterNote       $FF
000A96F7 C4                         	dc.b	nG5
000A96F8 E100                       	smpsAlterNote       $00
000A96FA C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A96FF E608                       	smpsAlterVol        $08
000A9701 C080 08                    	dc.b	nEb5, nRst, $08
000A9704 E6F8                       	smpsAlterVol        $F8
000A9706 C7                         	dc.b	nBb5
000A9707 E1FF                       	smpsAlterNote       $FF
000A9709 C4                         	dc.b	nG5
000A970A E100                       	smpsAlterNote       $00
000A970C C0BB                       	dc.b	nEb5, nBb4
000A970E F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A9713 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A9716 E1FF                       	smpsAlterNote       $FF
000A9718 C4                         	dc.b	nG5
000A9719 E100                       	smpsAlterNote       $00
000A971B C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9720 E608                       	smpsAlterVol        $08
000A9722 C080 08                    	dc.b	nEb5, nRst, $08
000A9725 E6F8                       	smpsAlterVol        $F8
000A9727 E1FF                       	smpsAlterNote       $FF
000A9729 C4                         	dc.b	nG5
000A972A E100                       	smpsAlterNote       $00
000A972C C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A9733 E1FF                       	smpsAlterNote       $FF
000A9735 C4                         	dc.b	nG5
000A9736 E100                       	smpsAlterNote       $00
000A9738 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A973D E1FF                       	smpsAlterNote       $FF
000A973F C4                         	dc.b	nG5
000A9740 E100                       	smpsAlterNote       $00
000A9742 C7                         	dc.b	nBb5
000A9743 E1FF                       	smpsAlterNote       $FF
000A9745 C4                         	dc.b	nG5
000A9746 E100                       	smpsAlterNote       $00
000A9748 C2C0 01                    	dc.b	nF5, nEb5, $01
000A974B                            
000A974B                            GentleBreeze_Jump03:
000A974B E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A9752 E6FA                       	smpsAlterVol        $FA
000A9754 F4                         	smpsModOff
000A9755 E1FF                       	smpsAlterNote       $FF
000A9757 B850                       	dc.b	nG4, $50
000A9759 E100                       	smpsAlterNote       $00
000A975B B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A9767 E1FF                       	smpsAlterNote       $FF
000A9769 B810                       	dc.b	nG4, $10
000A976B E100                       	smpsAlterNote       $00
000A976D BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A9772 E1FF                       	smpsAlterNote       $FF
000A9774 B8                         	dc.b	nG4
000A9775 E100                       	smpsAlterNote       $00
000A9777 B610                       	dc.b	nF4, $10
000A9779 E1FF                       	smpsAlterNote       $FF
000A977B B850                       	dc.b	nG4, $50
000A977D E100                       	smpsAlterNote       $00
000A977F B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A9787 E1FF                       	smpsAlterNote       $FF
000A9789 AC08                       	dc.b	nG3, $08
000A978B E100                       	smpsAlterNote       $00
000A978D AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A9792 E1FF                       	smpsAlterNote       $FF
000A9794 B850                       	dc.b	nG4, $50
000A9796 E100                       	smpsAlterNote       $00
000A9798 BB08                       	dc.b	nBb4, $08
000A979A E1FF                       	smpsAlterNote       $FF
000A979C B8                         	dc.b	nG4
000A979D E100                       	smpsAlterNote       $00
000A979F BDBB B6                    	dc.b	nC5, nBb4, nF4
000A97A2 E1FF                       	smpsAlterNote       $FF
000A97A4 B810 08                    	dc.b	nG4, $10, $08
000A97A7 E100                       	smpsAlterNote       $00
000A97A9 B6                         	dc.b	nF4
000A97AA E1FF                       	smpsAlterNote       $FF
000A97AC B880                       	dc.b	nG4, nRst
000A97AE E100                       	smpsAlterNote       $00
000A97B0 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A97B3 E1FF                       	smpsAlterNote       $FF
000A97B5 B810                       	dc.b	nG4, $10
000A97B7 E100                       	smpsAlterNote       $00
000A97B9 B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A97C0 E1FF                       	smpsAlterNote       $FF
000A97C2 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A97D0 E606                       	smpsAlterVol        $06
000A97D2 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A97D7 E100                       	smpsAlterNote       $00
000A97D9                            
000A97D9                            GentleBreeze_Loop10:
000A97D9 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A97DD E1FF                       	smpsAlterNote       $FF
000A97DF C4                         	dc.b	nG5
000A97E0 E100                       	smpsAlterNote       $00
000A97E2 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A97E7 E608                       	smpsAlterVol        $08
000A97E9 C080 08                    	dc.b	nEb5, nRst, $08
000A97EC E6F8                       	smpsAlterVol        $F8
000A97EE C7                         	dc.b	nBb5
000A97EF E1FF                       	smpsAlterNote       $FF
000A97F1 C4                         	dc.b	nG5
000A97F2 E100                       	smpsAlterNote       $00
000A97F4 C0BB                       	dc.b	nEb5, nBb4
000A97F6 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A97FB C0BD C9                    	dc.b	nEb5, nC5, nC6
000A97FE E1FF                       	smpsAlterNote       $FF
000A9800 C4                         	dc.b	nG5
000A9801 E100                       	smpsAlterNote       $00
000A9803 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9808 E608                       	smpsAlterVol        $08
000A980A C080 08                    	dc.b	nEb5, nRst, $08
000A980D E6F8                       	smpsAlterVol        $F8
000A980F E1FF                       	smpsAlterNote       $FF
000A9811 C4                         	dc.b	nG5
000A9812 E100                       	smpsAlterNote       $00
000A9814 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A981B E1FF                       	smpsAlterNote       $FF
000A981D C4                         	dc.b	nG5
000A981E E100                       	smpsAlterNote       $00
000A9820 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A9825 E1FF                       	smpsAlterNote       $FF
000A9827 C4                         	dc.b	nG5
000A9828 E100                       	smpsAlterNote       $00
000A982A C7                         	dc.b	nBb5
000A982B E1FF                       	smpsAlterNote       $FF
000A982D C4                         	dc.b	nG5
000A982E E100                       	smpsAlterNote       $00
000A9830 C2C0 01                    	dc.b	nF5, nEb5, $01
000A9833 E0C0                       	smpsPan             panCenter, $00
000A9835 F1                         	smpsModOn
000A9836 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A9839                            
000A9839                            ; FM4 Data
000A9839                            GentleBreeze_FM4:
000A983B E0C0                       	smpsPan             panCenter, $00
000A983D 80                         	dc.b	nRst
000A983E                            
000A983E                            GentleBreeze_Loop0D:
000A983E 7F                         	dc.b	$7F
000A983F F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A9844 77                         	dc.b	$77
000A9847 E609                       	smpsAlterVol        $09
000A9849 C001                       	dc.b	nEb5, $01
000A984B                            
000A984B                            GentleBreeze_Jump02:
000A984B E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A9850 E607                       	smpsAlterVol        $07
000A9852 E1FF                       	smpsAlterNote       $FF
000A9854 C450                       	dc.b	nG5, $50
000A9856 E100                       	smpsAlterNote       $00
000A9858 C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A9864 E1FF                       	smpsAlterNote       $FF
000A9866 C410                       	dc.b	nG5, $10
000A9868 E100                       	smpsAlterNote       $00
000A986A C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A986F E1FF                       	smpsAlterNote       $FF
000A9871 C4                         	dc.b	nG5
000A9872 E100                       	smpsAlterNote       $00
000A9874 C210                       	dc.b	nF5, $10
000A9876 E1FF                       	smpsAlterNote       $FF
000A9878 C450                       	dc.b	nG5, $50
000A987A E100                       	smpsAlterNote       $00
000A987C C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A9884 E1FF                       	smpsAlterNote       $FF
000A9886 B808                       	dc.b	nG4, $08
000A9888 E100                       	smpsAlterNote       $00
000A988A BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A988F E1FF                       	smpsAlterNote       $FF
000A9891 C450                       	dc.b	nG5, $50
000A9893 E100                       	smpsAlterNote       $00
000A9895 C708                       	dc.b	nBb5, $08
000A9897 E1FF                       	smpsAlterNote       $FF
000A9899 C4                         	dc.b	nG5
000A989A E100                       	smpsAlterNote       $00
000A989C C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A989F E1FF                       	smpsAlterNote       $FF
000A98A1 C410 08                    	dc.b	nG5, $10, $08
000A98A4 E100                       	smpsAlterNote       $00
000A98A6 C2                         	dc.b	nF5
000A98A7 E1FF                       	smpsAlterNote       $FF
000A98A9 C480                       	dc.b	nG5, nRst
000A98AB E100                       	smpsAlterNote       $00
000A98AD C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A98B0 E1FF                       	smpsAlterNote       $FF
000A98B2 C410                       	dc.b	nG5, $10
000A98B4 E100                       	smpsAlterNote       $00
000A98B6 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A98BD E1FF                       	smpsAlterNote       $FF
000A98BF C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A98C7                            
000A98C7                            GentleBreeze_Loop0E:
000A98C7 7F                         	dc.b	$7F
000A98C8 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A98CD 77                         	dc.b	$77
000A98CE E100                       	smpsAlterNote       $00
000A98D0 C001                       	dc.b	nEb5, $01
000A98D2 E6F9                       	smpsAlterVol        $F9
000A98D4 E0C0                       	smpsPan             panCenter, $00
000A98D6 E100                       	smpsAlterNote       $00
000A98D8 F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A98DB                            
000A98DB                            ; FM5 Data
000A98DB                            GentleBreeze_FM5:
000A98DD E0C0                       	smpsPan             panCenter, $00
000A98DF A5                         	dc.b	nC3
000A98E0                            
000A98E0                            GentleBreeze_Loop06:
000A98E0 10                         	dc.b	$10
000A98E1 E607                       	smpsAlterVol        $07
000A98E3 A5                         	dc.b	nC3
000A98E4 E6F9                       	smpsAlterVol        $F9
000A98E6 08                         	dc.b	$08
000A98E7 E607                       	smpsAlterVol        $07
000A98E9 A5                         	dc.b	nC3
000A98EA E608                       	smpsAlterVol        $08
000A98EC A5                         	dc.b	nC3
000A98ED E6F1                       	smpsAlterVol        $F1
000A98EF 18                         	dc.b	$18
000A98F0 E607                       	smpsAlterVol        $07
000A98F2 10                         	dc.b	$10
000A98F3 E608                       	smpsAlterVol        $08
000A98F5 A5                         	dc.b	nC3
000A98F6 E6F1                       	smpsAlterVol        $F1
000A98F8 A5                         	dc.b	nC3
000A98F9 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A98FE A5                         	dc.b	nC3
000A98FF                            
000A98FF                            GentleBreeze_Loop07:
000A98FF E607                       	smpsAlterVol        $07
000A9901 A5                         	dc.b	nC3
000A9902 E6F9                       	smpsAlterVol        $F9
000A9904 08                         	dc.b	$08
000A9905 E607                       	smpsAlterVol        $07
000A9907 A5                         	dc.b	nC3
000A9908 E608                       	smpsAlterVol        $08
000A990A A5                         	dc.b	nC3
000A990B E6F1                       	smpsAlterVol        $F1
000A990D 10                         	dc.b	$10
000A990E F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A9913                            
000A9913                            GentleBreeze_Loop08:
000A9913 A5                         	dc.b	nC3
000A9914 E607                       	smpsAlterVol        $07
000A9916 A5                         	dc.b	nC3
000A9917 E6F9                       	smpsAlterVol        $F9
000A9919 08                         	dc.b	$08
000A991A E607                       	smpsAlterVol        $07
000A991C A5                         	dc.b	nC3
000A991D E608                       	smpsAlterVol        $08
000A991F A5                         	dc.b	nC3
000A9920 E6F1                       	smpsAlterVol        $F1
000A9922 18                         	dc.b	$18
000A9923 E607                       	smpsAlterVol        $07
000A9925 10                         	dc.b	$10
000A9926 E608                       	smpsAlterVol        $08
000A9928 A5                         	dc.b	nC3
000A9929 E6F1                       	smpsAlterVol        $F1
000A992B A5                         	dc.b	nC3
000A992C F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A9931 A5                         	dc.b	nC3
000A9932 E607                       	smpsAlterVol        $07
000A9934 A5                         	dc.b	nC3
000A9935 E6F9                       	smpsAlterVol        $F9
000A9937 08                         	dc.b	$08
000A9938 E607                       	smpsAlterVol        $07
000A993A A5                         	dc.b	nC3
000A993B E608                       	smpsAlterVol        $08
000A993D A5                         	dc.b	nC3
000A993E E6F1                       	smpsAlterVol        $F1
000A9940 10                         	dc.b	$10
000A9941 E607                       	smpsAlterVol        $07
000A9943 A5                         	dc.b	nC3
000A9944 E6F9                       	smpsAlterVol        $F9
000A9946 08                         	dc.b	$08
000A9947 E607                       	smpsAlterVol        $07
000A9949 A5                         	dc.b	nC3
000A994A E608                       	smpsAlterVol        $08
000A994C A5                         	dc.b	nC3
000A994D E6F1                       	smpsAlterVol        $F1
000A994F 01                         	dc.b	$01
000A9950                            
000A9950                            GentleBreeze_Jump01:
000A9950 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A9953 E607                       	smpsAlterVol        $07
000A9955                            
000A9955                            GentleBreeze_Loop09:
000A9955 10                         	dc.b	$10
000A9956 E608                       	smpsAlterVol        $08
000A9958 A5                         	dc.b	nC3
000A9959 E6F1                       	smpsAlterVol        $F1
000A995B 08                         	dc.b	$08
000A995C E60F                       	smpsAlterVol        $0F
000A995E 18                         	dc.b	$18
000A995F E6F8                       	smpsAlterVol        $F8
000A9961 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A9966 10                         	dc.b	$10
000A9967 E608                       	smpsAlterVol        $08
000A9969 A5                         	dc.b	nC3
000A996A E6F1                       	smpsAlterVol        $F1
000A996C 08                         	dc.b	$08
000A996D E60F                       	smpsAlterVol        $0F
000A996F 18                         	dc.b	$18
000A9970 E6F1                       	smpsAlterVol        $F1
000A9972                            
000A9972                            GentleBreeze_Loop0A:
000A9972 10                         	dc.b	$10
000A9973 E607                       	smpsAlterVol        $07
000A9975 A5                         	dc.b	nC3
000A9976 E6F9                       	smpsAlterVol        $F9
000A9978 08                         	dc.b	$08
000A9979 E607                       	smpsAlterVol        $07
000A997B A5                         	dc.b	nC3
000A997C E608                       	smpsAlterVol        $08
000A997E A5                         	dc.b	nC3
000A997F E6F1                       	smpsAlterVol        $F1
000A9981 18                         	dc.b	$18
000A9982 E607                       	smpsAlterVol        $07
000A9984 10                         	dc.b	$10
000A9985 E608                       	smpsAlterVol        $08
000A9987 A5                         	dc.b	nC3
000A9988 E6F1                       	smpsAlterVol        $F1
000A998A A5                         	dc.b	nC3
000A998B F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A9990 A5                         	dc.b	nC3
000A9991                            
000A9991                            GentleBreeze_Loop0B:
000A9991 E607                       	smpsAlterVol        $07
000A9993 A5                         	dc.b	nC3
000A9994 E6F9                       	smpsAlterVol        $F9
000A9996 08                         	dc.b	$08
000A9997 E607                       	smpsAlterVol        $07
000A9999 A5                         	dc.b	nC3
000A999A E608                       	smpsAlterVol        $08
000A999C A5                         	dc.b	nC3
000A999D E6F1                       	smpsAlterVol        $F1
000A999F 10                         	dc.b	$10
000A99A0 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A99A5                            
000A99A5                            GentleBreeze_Loop0C:
000A99A5 A5                         	dc.b	nC3
000A99A6 E607                       	smpsAlterVol        $07
000A99A8 A5                         	dc.b	nC3
000A99A9 E6F9                       	smpsAlterVol        $F9
000A99AB 08                         	dc.b	$08
000A99AC E607                       	smpsAlterVol        $07
000A99AE A5                         	dc.b	nC3
000A99AF E608                       	smpsAlterVol        $08
000A99B1 A5                         	dc.b	nC3
000A99B2 E6F1                       	smpsAlterVol        $F1
000A99B4 18                         	dc.b	$18
000A99B5 E607                       	smpsAlterVol        $07
000A99B7 10                         	dc.b	$10
000A99B8 E608                       	smpsAlterVol        $08
000A99BA A5                         	dc.b	nC3
000A99BB E6F1                       	smpsAlterVol        $F1
000A99BD A5                         	dc.b	nC3
000A99BE F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A99C3 A5                         	dc.b	nC3
000A99C4 E607                       	smpsAlterVol        $07
000A99C6 A5                         	dc.b	nC3
000A99C7 E6F9                       	smpsAlterVol        $F9
000A99C9 08                         	dc.b	$08
000A99CA E607                       	smpsAlterVol        $07
000A99CC A5                         	dc.b	nC3
000A99CD E608                       	smpsAlterVol        $08
000A99CF A5                         	dc.b	nC3
000A99D0 E6F1                       	smpsAlterVol        $F1
000A99D2 10                         	dc.b	$10
000A99D3 E607                       	smpsAlterVol        $07
000A99D5 A5                         	dc.b	nC3
000A99D6 E6F9                       	smpsAlterVol        $F9
000A99D8 08                         	dc.b	$08
000A99D9 E607                       	smpsAlterVol        $07
000A99DB A5                         	dc.b	nC3
000A99DC E608                       	smpsAlterVol        $08
000A99DE A5                         	dc.b	nC3
000A99DF E6F1                       	smpsAlterVol        $F1
000A99E1 01                         	dc.b	$01
000A99E2 E0C0                       	smpsPan             panCenter, $00
000A99E4 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A99E7                            
000A99E7                            ; DAC Data
000A99E7                            GentleBreeze_DAC:
000A99E7 81                         	dc.b	dKick
000A99E8                            
000A99E8                            GentleBreeze_Loop00:
000A99E8 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A99EE F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A99F3 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A99FE                            
000A99FE                            GentleBreeze_Loop01:
000A99FE 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A9A04 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A9A09 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A9A13                            
000A9A13                            GentleBreeze_Jump00:
000A9A13 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A9A17                            
000A9A17                            GentleBreeze_Loop02:
000A9A17 81                         	dc.b	dKick
000A9A18                            
000A9A18                            GentleBreeze_Loop03:
000A9A18 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A9A24 088A                       	dc.b	$08, dLowTimpani
000A9A26 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A9A2B 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A9A37 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A9A3C F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A9A41                            
000A9A41                            GentleBreeze_Loop04:
000A9A41 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A9A47 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A9A4C 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A9A57                            
000A9A57                            GentleBreeze_Loop05:
000A9A57 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A9A5D F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A9A62 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A9A6C F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A9A6F                            
000A9A6F                            ; PSG 1 Data
000A9A6F                            GentleBreeze_PSG1:
000A9A6F 80                         	dc.b	nRst
000A9A70                            
000A9A70                            GentleBreeze_LoopPSG02:
000A9A70 7F                         	dc.b	$7F
000A9A71 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A9A76 08                         	dc.b	$08
000A9A77 EC04                       	smpsPSGAlterVol     $04
000A9A79                            
000A9A79                            GentleBreeze_JumpPSG01:
000A9A79 A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A9A85 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A9A8D                            
000A9A8D                            GentleBreeze_LoopPSG03:
000A9A8D 7F                         	dc.b	$7F
000A9A8E F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A9A93 08A3 01                    	dc.b	$08, nBb2, $01
000A9A96 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A9A99                            
000A9A99                            ; PSG2 Data
000A9A99                            GentleBreeze_PSG2:
000A9A99 80                         	dc.b	nRst
000A9A9A                            
000A9A9A                            GentleBreeze_LoopPSG00:
000A9A9A 7F                         	dc.b	$7F
000A9A9B F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A9AA0 08                         	dc.b	$08
000A9AA1 EC04                       	smpsPSGAlterVol     $04
000A9AA3                            
000A9AA3                            GentleBreeze_JumpPSG00:
000A9AA3 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A9AAF A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A9AB7                            
000A9AB7                            GentleBreeze_LoopPSG01:
000A9AB7 7F                         	dc.b	$7F
000A9AB8 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A9ABD 08A8 01                    	dc.b	$08, nEb3, $01
000A9AC0 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A9AC3                            
000A9AC3                            GentleBreeze_Voices:
000A9AC3                            ;	Voice $00
000A9AC3                            ;	$0C
000A9AC3                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A9AC3                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A9AC3                            	smpsVcAlgorithm     $04
000A9AC3                            	smpsVcFeedback      $01
000A9AC3                            	smpsVcUnusedBits    $00
000A9AC3                            	smpsVcDetune        $07, $02, $07, $02
000A9AC3                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A9AC3                            	smpsVcRateScale     $00, $00, $00, $00
000A9AC3                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9AC3                            	smpsVcAmpMod        $00, $00, $00, $00
000A9AC3                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A9AC3                            	smpsVcDecayRate2    $01, $00, $00, $00
000A9AC3                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A9AC3                            	smpsVcReleaseRate   $09, $01, $04, $03
000A9AC3 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A9ADC                            
000A9ADC                            ;	Voice $01
000A9ADC                            ;	$38
000A9ADC                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A9ADC                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A9ADC                            	smpsVcAlgorithm     $00
000A9ADC                            	smpsVcFeedback      $07
000A9ADC                            	smpsVcUnusedBits    $00
000A9ADC                            	smpsVcDetune        $03, $07, $01, $05
000A9ADC                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A9ADC                            	smpsVcRateScale     $00, $02, $00, $02
000A9ADC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9ADC                            	smpsVcAmpMod        $00, $00, $00, $00
000A9ADC                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A9ADC                            	smpsVcDecayRate2    $00, $00, $10, $00
000A9ADC                            	smpsVcDecayLevel    $00, $00, $00, $00
000A9ADC                            	smpsVcReleaseRate   $08, $05, $05, $05
000A9ADC 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A9AF5                            
000A9AF5                            ;	Voice $02
000A9AF5                            ;	$00
000A9AF5                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A9AF5                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A9AF5                            	smpsVcAlgorithm     $00
000A9AF5                            	smpsVcFeedback      $00
000A9AF5                            	smpsVcUnusedBits    $00
000A9AF5                            	smpsVcDetune        $00, $00, $00, $00
000A9AF5                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A9AF5                            	smpsVcRateScale     $00, $00, $00, $00
000A9AF5                            	smpsVcAttackRate    $00, $00, $00, $00
000A9AF5                            	smpsVcAmpMod        $00, $00, $00, $00
000A9AF5                            	smpsVcDecayRate1    $00, $00, $00, $00
000A9AF5                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9AF5                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A9AF5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A9AF5 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9B0E                            
000A9B0E                            ;	Voice $03
000A9B0E                            ;	$36
000A9B0E                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A9B0E                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A9B0E                            	smpsVcAlgorithm     $06
000A9B0E                            	smpsVcFeedback      $06
000A9B0E                            	smpsVcUnusedBits    $00
000A9B0E                            	smpsVcDetune        $00, $00, $00, $00
000A9B0E                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A9B0E                            	smpsVcRateScale     $00, $00, $00, $00
000A9B0E                            	smpsVcAttackRate    $1F, $00, $18, $16
000A9B0E                            	smpsVcAmpMod        $00, $00, $00, $00
000A9B0E                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A9B0E                            	smpsVcDecayRate2    $00, $00, $12, $00
000A9B0E                            	smpsVcDecayLevel    $04, $04, $02, $00
000A9B0E                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A9B0E 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A9B27                            
000A9B27                            ;	Voice $04
000A9B27                            ;	$07
000A9B27                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A9B27                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A9B27                            	smpsVcAlgorithm     $07
000A9B27                            	smpsVcFeedback      $00
000A9B27                            	smpsVcUnusedBits    $00
000A9B27                            	smpsVcDetune        $07, $06, $05, $00
000A9B27                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A9B27                            	smpsVcRateScale     $00, $01, $01, $01
000A9B27                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A9B27                            	smpsVcAmpMod        $00, $00, $00, $00
000A9B27                            	smpsVcDecayRate1    $17, $17, $17, $17
000A9B27                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9B27                            	smpsVcDecayLevel    $02, $02, $02, $02
000A9B27                            	smpsVcReleaseRate   $06, $06, $06, $06
000A9B27 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9B40                            
000A9B40                            ;	Voice $05
000A9B40                            ;	$3C
000A9B40                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A9B40                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A9B40                            	smpsVcAlgorithm     $04
000A9B40                            	smpsVcFeedback      $07
000A9B40                            	smpsVcUnusedBits    $00
000A9B40                            	smpsVcDetune        $06, $06, $02, $02
000A9B40                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A9B40                            	smpsVcRateScale     $00, $00, $00, $00
000A9B40                            	smpsVcAttackRate    $0E, $14, $10, $13
000A9B40                            	smpsVcAmpMod        $00, $00, $00, $00
000A9B40                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A9B40                            	smpsVcDecayRate2    $04, $04, $04, $04
000A9B40                            	smpsVcDecayLevel    $02, $01, $01, $01
000A9B40                            	smpsVcReleaseRate   $07, $07, $07, $07
000A9B40 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A9B59                            
000A9B59                            
000A9B5A 00                         		even
000A9B5A                            ; ---------------------------------------------------------------------------
000A9B5A                            ; Sound	effect pointers
000A9B5A                            ; ---------------------------------------------------------------------------
000A9B5A 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A9B66 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A9B72 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A9B7E 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A9B8A 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A9B96 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A9BA2 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A9BAE 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A9BBA 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A9BC6 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A9BD2 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A9BDE 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A9BEA 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A9BF6 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A9C02 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A9C0E 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A9C1A 0000 0000                  SoundD0Index:	dc.l SoundD0
000A9C1E                            SoundA0:	include	sound\jump.asm
000A9C1E                            jump_Header:
000A9C1E =00000001                  smpsHeaderStartSong = 1
000A9C1E 0000                       	smpsHeaderVoice     jump_Voices
000A9C20 01                         	smpsHeaderTempoSFX  $01
000A9C21 01                         	smpsHeaderChanSFX   $01
000A9C22                            
000A9C2E                            
000A9C2E                            ; FM4 Data
000A9C2E                            jump_FM4:
000A9C30 E000                       	smpsPan             panNone, $00
000A9C32 E607                       	smpsAlterVol        $07
000A9C34 E0C0                       	smpsPan             panCenter, $00
000A9C36 9903 B1                    	dc.b	nC2, $03, nC4
000A9C39 E607                       	smpsAlterVol        $07
000A9C3B E040                       	smpsPan             panRight, $00
000A9C3D 99B1                       	dc.b	nC2, nC4
000A9C3F E60A                       	smpsAlterVol        $0A
000A9C41 E080                       	smpsPan             panLeft, $00
000A9C43 99B1                       	dc.b	nC2, nC4
000A9C45 E603                       	smpsAlterVol        $03
000A9C47 E0C0                       	smpsPan             panCenter, $00
000A9C49 99B1                       	dc.b	nC2, nC4
000A9C4B E000                       	smpsPan             panNone, $00
000A9C4D 803D                       	dc.b	nRst, $3D
000A9C4F F2                         	smpsStop
000A9C50                            
000A9C50                            ; PSG3 Data
000A9C50                            jump_PSG3:
000A9C50 F3E7                       	smpsPSGform         $E7
000A9C52 8056                       	dc.b	nRst, $56
000A9C54 F2                         	smpsStop
000A9C55                            
000A9C55                            jump_Voices:
000A9C55                            ;	Voice $00
000A9C55                            ;	$3C
000A9C55                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000A9C55                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000A9C55                            	smpsVcAlgorithm     $04
000A9C55                            	smpsVcFeedback      $07
000A9C55                            	smpsVcUnusedBits    $00
000A9C55                            	smpsVcDetune        $00, $00, $00, $00
000A9C55                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000A9C55                            	smpsVcRateScale     $00, $00, $00, $00
000A9C55                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9C55                            	smpsVcAmpMod        $00, $00, $00, $00
000A9C55                            	smpsVcDecayRate1    $0E, $14, $12, $00
000A9C55                            	smpsVcDecayRate2    $11, $00, $11, $00
000A9C55                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000A9C55                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A9C55 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9C6E                            
000A9C6E                            
000A9C6E                            		even
000A9C6E                            SoundA1:	incbin	sound\soundA1.bin
000A9C98                            		even
000A9C98                            SoundA2:	incbin	sound\soundA2.bin
000A9CB8                            		even
000A9CB8                            SoundA3:	incbin	sound\soundA3.bin
000A9CEA                            		even
000A9CEA                            SoundA4:	incbin	sound\soundA4.bin
000A9D20                            		even
000A9D20                            SoundA5:	include	sound\fart.asm
000A9D20                            Fart_Header:
000A9D20 =00000001                  smpsHeaderStartSong = 1
000A9D20 0000                       	smpsHeaderVoice     Fart_Voices
000A9D22 01                         	smpsHeaderTempoSFX  $01
000A9D23 04                         	smpsHeaderChanSFX   $04
000A9D24                            
000A9D3C                            
000A9D3C                            Fart_FM3:
000A9D3E E607                       	smpsAlterVol        $07
000A9D40 E0C0                       	smpsPan             panCenter, $00
000A9D42 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A9D47 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A9D4A E1FE                       	smpsAlterNote       $FE
000A9D4C A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A9D4F E100                       	smpsAlterNote       $00
000A9D51 A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A9D56 F2                         	smpsStop
000A9D57                            
000A9D57                            ; FM4 Data
000A9D57                            Fart_FM4:
000A9D59 E0C0                       	smpsPan             panCenter, $00
000A9D5B 8006                       	dc.b	nRst, $06
000A9D5F E616                       	smpsAlterVol        $16
000A9D61 E080                       	smpsPan             panLeft, $00
000A9D63 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A9D68 A212                       	dc.b	nA2, $12
000A9D6A E60A                       	smpsAlterVol        $0A
000A9D6C E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9D6F E603                       	smpsAlterVol        $03
000A9D71 E7A2                       	dc.b	smpsNoAttack, nA2
000A9D73 E603                       	smpsAlterVol        $03
000A9D75 E7A2                       	dc.b	smpsNoAttack, nA2
000A9D77 E604                       	smpsAlterVol        $04
000A9D79 E7A2                       	dc.b	smpsNoAttack, nA2
000A9D7B E606                       	smpsAlterVol        $06
000A9D7D E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A9D80 E610                       	smpsAlterVol        $10
000A9D82 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9D85 E610                       	smpsAlterVol        $10
000A9D87 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A9D8C F2                         	smpsStop
000A9D8D                            
000A9D8D                            ; FM5 Data
000A9D8D                            Fart_FM5:
000A9D8F E0C0                       	smpsPan             panCenter, $00
000A9D91 8009                       	dc.b	nRst, $09
000A9D95 E616                       	smpsAlterVol        $16
000A9D97 E040                       	smpsPan             panRight, $00
000A9D99 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A9D9E A215                       	dc.b	nA2, $15
000A9DA0 E60A                       	smpsAlterVol        $0A
000A9DA2 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9DA5 E603                       	smpsAlterVol        $03
000A9DA7 E7A2                       	dc.b	smpsNoAttack, nA2
000A9DA9 E603                       	smpsAlterVol        $03
000A9DAB E7A2                       	dc.b	smpsNoAttack, nA2
000A9DAD E604                       	smpsAlterVol        $04
000A9DAF E7A2                       	dc.b	smpsNoAttack, nA2
000A9DB1 E606                       	smpsAlterVol        $06
000A9DB3 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A9DB6 E610                       	smpsAlterVol        $10
000A9DB8 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9DBB E610                       	smpsAlterVol        $10
000A9DBD E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A9DC2 F2                         	smpsStop
000A9DC3                            
000A9DC3                            ; PSG3 Data
000A9DC3                            Fart_PSG3:
000A9DC3 F2                         	smpsStop
000A9DC4                            
000A9DC4                            ; FM Voices
000A9DC4                            Fart_Voices:
000A9DC4                            ;	Voice $00
000A9DC4                            ;	$39
000A9DC4                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A9DC4                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A9DC4                            	smpsVcAlgorithm     $01
000A9DC4                            	smpsVcFeedback      $07
000A9DC4                            	smpsVcUnusedBits    $00
000A9DC4                            	smpsVcDetune        $00, $07, $03, $07
000A9DC4                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A9DC4                            	smpsVcRateScale     $00, $03, $03, $03
000A9DC4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9DC4                            	smpsVcAmpMod        $00, $00, $00, $00
000A9DC4                            	smpsVcDecayRate1    $00, $00, $00, $04
000A9DC4                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A9DC4                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A9DC4                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A9DC4 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A9DDD                            
000A9DDD                            ;	Voice $01
000A9DDD                            ;	$00
000A9DDD                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A9DDD                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A9DDD                            	smpsVcAlgorithm     $00
000A9DDD                            	smpsVcFeedback      $00
000A9DDD                            	smpsVcUnusedBits    $00
000A9DDD                            	smpsVcDetune        $00, $00, $00, $00
000A9DDD                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A9DDD                            	smpsVcRateScale     $00, $00, $00, $00
000A9DDD                            	smpsVcAttackRate    $00, $00, $00, $00
000A9DDD                            	smpsVcAmpMod        $00, $00, $00, $00
000A9DDD                            	smpsVcDecayRate1    $00, $00, $00, $00
000A9DDD                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9DDD                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A9DDD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A9DDD 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9DDD 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9DF6                            		even
000A9DF6                            SoundA6:	incbin	sound\soundA6.bin
000A9E26                            		even
000A9E26                            SoundA7:	incbin	sound\soundA7.bin
000A9E56                            		even
000A9E56                            SoundA8:	incbin	sound\soundA8.bin
000A9E8A                            		even
000A9E8A                            SoundA9:	incbin	sound\soundA9.bin
000A9E9C                            		even
000A9E9C                            SoundAA:	incbin	sound\soundAA.bin
000A9EDE                            		even
000A9EDE                            SoundAB:	incbin	sound\soundAB.bin
000A9EFE                            		even
000A9EFE                            SoundAC:	incbin	sound\soundAC.bin
000A9F32                            		even
000A9F32                            SoundAD:	incbin	sound\soundAD.bin
000A9F68                            		even
000A9F68                            SoundAE:	incbin	sound\soundAE.bin
000A9FB2                            		even
000A9FB2                            SoundAF:	incbin	sound\soundAF.bin
000A9FE0                            		even
000A9FE0                            SoundB0:	incbin	sound\soundB0.bin
000AA012                            		even
000AA012                            SoundB1:	incbin	sound\soundB1.bin
000AA03E                            		even
000AA03E                            SoundB2:	incbin	sound\soundB2.bin
000AA08E                            		even
000AA08E                            SoundB3:	incbin	sound\soundB3.bin
000AA0D8                            		even
000AA0D8                            SoundB4:	include	sound\soundB4.asm
000AA0D8                            SndB4_Bumper_Header:
000AA0D8 =00000001                  smpsHeaderStartSong = 1
000AA0D8 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000AA0DA 01                         	smpsHeaderTempoSFX  $01
000AA0DB 03                         	smpsHeaderChanSFX   $03
000AA0DC                            
000AA0EE                            
000AA0EE                            ; FM5 Data
000AA0EE                            SndB4_Bumper_FM5:
000AA0F0 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000AA0F3                            
000AA0F3                            ; FM4 Data
000AA0F3                            SndB4_Bumper_FM4:
000AA0F3 F2                         	smpsStop
000AA0F4                            
000AA0F4                            SndB4_Bumper_Jump00:
000AA0F4 A020                       	dc.b	nG2, $20
000AA0F6 F2                         	smpsStop
000AA0F7                            
000AA0F7                            ; FM3 Data
000AA0F7                            SndB4_Bumper_FM3:
000AA0F7 F2                         	smpsStop
000AA0F8                            
000AA0F8                            SndB4_Bumper_Voices:
000AA0F8                            ;	Voice $00
000AA0F8                            ;	$32
000AA0F8                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000AA0F8                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000AA0F8                            	smpsVcAlgorithm     $02
000AA0F8                            	smpsVcFeedback      $06
000AA0F8                            	smpsVcUnusedBits    $00
000AA0F8                            	smpsVcDetune        $07, $07, $02, $00
000AA0F8                            	smpsVcCoarseFreq    $00, $00, $00, $04
000AA0F8                            	smpsVcRateScale     $00, $00, $00, $00
000AA0F8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA0F8                            	smpsVcAmpMod        $00, $00, $00, $00
000AA0F8                            	smpsVcDecayRate1    $08, $00, $00, $09
000AA0F8                            	smpsVcDecayRate2    $0B, $00, $00, $09
000AA0F8                            	smpsVcDecayLevel    $00, $00, $00, $00
000AA0F8                            	smpsVcReleaseRate   $0F, $00, $00, $00
000AA0F8 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000AA0F8 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000AA112 00                         		even
000AA112                            SoundB5:	incbin	sound\soundB5.bin
000AA130 00                         		even
000AA130                            SoundB6:	incbin	sound\soundB6.bin
000AA14E                            		even
000AA14E                            SoundB7:	incbin	sound\soundB7.bin
000AA18A                            		even
000AA18A                            SoundB8:	incbin	sound\soundB8.bin
000AA1A8                            		even
000AA1A8                            SoundB9:	incbin	sound\soundB9.bin
000AA20C                            		even
000AA20C                            SoundBA:	incbin	sound\soundBA.bin
000AA270                            		even
000AA270                            SoundBB:	incbin	sound\soundBB.bin
000AA29C                            		even
000AA29C                            SoundBC:	incbin	sound\soundBC.bin
000AA2DE                            		even
000AA2DE                            SoundBD:	incbin	sound\soundBD.bin
000AA332                            		even
000AA332                            SoundBE:	incbin	sound\soundBE.bin
000AA36C                            		even
000AA36C                            SoundBF:	incbin	sound\soundBF.bin
000AA3DE                            		even
000AA3DE                            SoundC0:	incbin	sound\soundC0.bin
000AA40C                            		even
000AA40C                            SoundC1:	incbin	sound\soundC1.bin
000AA466                            		even
000AA466                            SoundC2:	incbin	sound\soundC2.bin
000AA490                            		even
000AA490                            SoundC3:	incbin	sound\soundC3.bin
000AA50A                            		even
000AA50A                            SoundC4:	incbin	sound\soundC4.bin
000AA608                            		even
000AA608                            SoundC5:	incbin	sound\soundC5.bin
000AA670                            		even
000AA670                            SoundC6:	incbin	sound\soundC6.bin
000AA6B2                            		even
000AA6B2                            SoundC7:	incbin	sound\soundC7.bin
000AA6E0                            		even
000AA6E0                            SoundC8:	incbin	sound\soundC8.bin
000AA6F2                            		even
000AA6F2                            SoundC9:	incbin	sound\soundC9.bin
000AA720                            		even
000AA720                            SoundCA:	incbin	sound\soundCA.bin
000AA74E                            		even
000AA74E                            SoundCB:	incbin	sound\soundCB.bin
000AA79A                            		even
000AA79A                            SoundCC:	incbin	sound\C9.ssf
000AA7C8                            		even
000AA7C8                            SoundCD:	incbin	sound\soundCD.bin
000AA7F4                            		even
000AA7F4                            SoundCE:	incbin	sound\soundCE.bin
000AA812 00                         		even
000AA812                            SoundCF:	incbin	sound\soundCF.bin
000AA84A                            		even
000AA84A                            SoundD0:	incbin	sound\soundD0.bin
000AA884                            		even
000AA884                            SegaPCM:	incbin	sound\segapcm.bin
000C49DA                            SegaPCM_end:	even
000C49DA                            
000C49DA                            IdiotPCM:	incbin	sound\youare.bin
000CEAAC 00                         IdiotPCM_end:	even
000CEAAC                            
000CEAAC                            Minecraft:	include	minecraft\code\main.asm
000CEAAC                            ; Minecraft: Very Legacy Console Edition
000CEAAC                            ; Main file
000CEAAC                            
000CEAAC                            ;	align	$20000
000CEAAC                            	opt	l.
000CEAAC                            	include	"minecraft\code\variables.asm"
000CEAAC                            ; Minecraft: Very Legacy Console Edition
000CEAAC                            ; Variable Definitions
000CEAAC                            
000CEAAC =00000040                  MAP_HEIGHT	equ	64
000CEAAC =00000100                  MAP_WIDTH	equ	256
000CEAAC                            
000CEAAC                            		rsset	$FF0000
000CEAAC =00FF0000                  mcRAM		rs.b	0
000CEAAC =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000CEAAC =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000CEAAC                            
000CEAAC                            		rsset	$FFFF8000
000CEAAC =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000CEAAC =FFFF8E80                  planeBuffer_End	rs.b	0
000CEAAC =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
000CEAAC                            
000CEAAC =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000CEAAC =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000CEAAC =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000CEAAC =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000CEAAC                            
000CEAAC                            		rsset	__rs&$FFFFFF
000CEAAC =00FF8E88                  mcRAM_End	rs.b	0
000CEAAC =00FF8E88                  mcRAM_End	rs.b	0
000CEAAC                            	include	"minecraft\code\macros.asm"
000CEAAC                            ; =========================================================================================================================================================
000CEAAC                            ; MegaDrive macros
000CEAAC                            ; =========================================================================================================================================================
000CEAAC                            clrRAM		macro	starta, enda
000CEAAC                            		local	endaddr
000CEAAC                            		if narg<2
000CEAAC                            endaddr			EQUS	"\starta\_End"
000CEAAC                            		else
000CEAAC                            endaddr			EQUS	"\enda"
000CEAAC                            		endif
000CEAAC                            
000CEAAC                            		moveq	#0,d0
000CEAAC                            
000CEAAC                            		if ((\starta)&$8000)=0
000CEAAC                            			lea	\starta,a1
000CEAAC                            		else
000CEAAC                            			lea	(\starta).w,a1
000CEAAC                            		endif
000CEAAC                            		if (\starta)&1
000CEAAC                            			move.b	d0,(a1)+
000CEAAC                            		endif
000CEAAC                            
000CEAAC                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
000CEAAC                            .Clear\@:	move.l	d0,(a1)+
000CEAAC                            		dbf	d1,.Clear\@
000CEAAC                            
000CEAAC                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
000CEAAC                            			move.w	d0,(a1)+
000CEAAC                            		endif
000CEAAC                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
000CEAAC                            			move.b	d0,(a1)+
000CEAAC                            		endif
000CEAAC                            		endm
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            ; Disable interrupts
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            ; ARGUMENTS:
000CEAAC                            ;	Nothing
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            ; RETURNS:
000CEAAC                            ;	Nothing
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            intsOff		macros
000CEAAC                            		ori	#$700,sr
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            ; Enable interrupts
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            ; ARGUMENTS:
000CEAAC                            ;	Nothing
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            ; RETURNS:
000CEAAC                            ;	Nothing
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            intsOn		macros
000CEAAC                            		andi	#$F8FF,sr
000CEAAC                            
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            ; VDP command instruction
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            ; ARGUMENTS:
000CEAAC                            ;	addr	- Address in VDP memory
000CEAAC                            ;	type	- Type of VDP memory
000CEAAC                            ;	rwd	- VDP command
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            ; RETURNS:
000CEAAC                            ;	Nothing
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC =00000021                  VRAM		EQU	%100001		; VRAM
000CEAAC =0000002B                  CRAM		EQU	%101011		; CRAM
000CEAAC =00000025                  VSRAM		EQU	%100101		; VSRAM
000CEAAC =0000000C                  READ		EQU	%001100		; VDP read
000CEAAC =00000007                  WRITE		EQU	%000111		; VDP write
000CEAAC =00000027                  DMA		EQU	%100111		; VDP DMA
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            vdpCmd		macro	ins, addr, type, rwd, end, end2
000CEAAC                            		if narg=5
000CEAAC                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
000CEAAC                            		elseif narg>=6
000CEAAC                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
000CEAAC                            		else
000CEAAC                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
000CEAAC                            		endif
000CEAAC                            		endm
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            ; VDP DMA from 68000 memory to VDP memory
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            ; ARGUMENTS:
000CEAAC                            ;	src	- Source address in 68000 memory
000CEAAC                            ;	dest	- Destination address in VDP memory
000CEAAC                            ;	len	- Length of data in bytes
000CEAAC                            ;	type	- Type of VDP memory
000CEAAC                            ;	a6.l	- VDP control port
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            ; RETURNS:
000CEAAC                            ;	Nothing
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            dma68k		macro	src, dest, len, type
000CEAAC                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
000CEAAC                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
000CEAAC                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
000CEAAC                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
000CEAAC                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
000CEAAC                            		move.w	(sp)+,(a6)
000CEAAC                            		endm
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            ; Fill VRAM with byte
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            ; ARGUMENTS:
000CEAAC                            ;	byte	- Byte to fill VRAM with
000CEAAC                            ;	addr	- Address in VRAM
000CEAAC                            ;	len	- Length of fill in bytes
000CEAAC                            ;	a6.l	- VDP control port
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            ; RETURNS:
000CEAAC                            ;	Nothing
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            dmaFill		macro	byte, addr, len
000CEAAC                            		move.w	#$8F01,(a6)
000CEAAC                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000CEAAC                            		move.w	#$9780,(a6)
000CEAAC                            		move.l	#$40000080|(((\addr)&$3FFF)<<16)|(((\addr)&$C000)>>14),(a6)
000CEAAC                            		move.w	#(\byte)<<8,-4(a6)
000CEAAC                            		waitDMA	(a6)
000CEAAC                            		move.w	#$8F02,(a6)
000CEAAC                            		endm
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            ; Copy a region of VRAM to a location in VRAM
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            ; ARGUMENTS:
000CEAAC                            ;	src	- Source address in VRAM
000CEAAC                            ;	dest	- Destination address in VRAM
000CEAAC                            ;	len	- Length of copy in bytes
000CEAAC                            ;	a6.l	- VDP control port
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            ; RETURNS:
000CEAAC                            ;	Nothing
000CEAAC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CEAAC                            dmaCopy		macro	src, dest, len
000CEAAC                            		move.w	#$8F01,(a6)
000CEAAC                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000CEAAC                            		move.l	#$96009500|(((\src)&$FF00)<<8)|((\src)&$FF),(a6)
000CEAAC                            		move.w	#$97C0,(a6)
000CEAAC                            		move.l	#$000000C0|(((\dest)&$3FFF)<<16)|(((\dest)&$C000)>>14),(a6)
000CEAAC                            		waitDMA	(a6)
000CEAAC                            		move.w	#$8F02,(a6)
000CEAAC                            		endm
000CEAAC                            		endm
000CEAAC                            
000CEAAC                            MC_Init:
000CEAAC 007C 0700                  		intsOff						; disable CPU interrupts
000CEAB0 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
000CEAB8                            
000CEAB8 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
000CEABE 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
000CEAC2                            
000CEAC2 3CBC 8230                  		move.w	#$8200+($C000>>10),(a6)			; set plane A address
000CEAC6 3CBC 8334                  		move.w	#$8300+($D000>>10),(a6)			; set plane W address
000CEACA 3CBC 8407                  		move.w	#$8400+($E000>>13),(a6)			; set plane B address
000CEACE 3CBC 857C                  		move.w	#$8500+($F800>>9),(a6)			; set sprite table address
000CEAD2                            		
000CEAD2 3CBC 8B00                  		move.w	#$8B00,(a6)				; EXT-INT off, VScroll by screen, HScroll by screen
000CEAD6 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
000CEADA 3CBC 8D3F                  		move.w	#$8D00+($FC00>>10),(a6)			; set HScroll table address
000CEADE 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000CEAE2 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
000CEAE6                            
000CEAF8 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
000CEAFC                            
000CEAFC                            .waitVBlank:	
000CEAFC 44D6                       		move.w	(a6),ccr				; is v-blank active?
000CEAFE 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
000CEB00                            
000CEB34                            
000CEB34 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
000CEB38 027C F8FF                  		intsOn						; enable CPU interrupts
000CEB3C                            
000CEB3C 41FA 0000                  		lea	MC_BlockRender(pc),a0
000CEB40 43F8 8000                  		lea	(planeBuffer).w,a1
000CEB44 7E2E                       		moveq	#$2F-1,d7
000CEB46                            
000CEB46                            .loopLo:
000CEB46 32D8                       		move.w	(a0)+,(a1)+
000CEB48 51CF FFFC                  		dbf	d7,.loopLo
000CEB4C                            
000CEB4C 41FA 0000                  		lea	MC_BlockRender(pc),a0
000CEB50 43F8 8080                  		lea	(planeBuffer+(64*2)).w,a1
000CEB54 7E2E                       		moveq	#$2F-1,d7
000CEB56                            
000CEB56                            .loopHi:
000CEB56 303C 8000                  		move.w	#$8000,d0
000CEB5A 8058                       		or.w	(a0)+,d0
000CEB5C 32C0                       		move.w	d0,(a1)+
000CEB5E 51CF FFF6                  		dbf	d7,.loopHi
000CEB62                            
000CEB62 6000 FFFE                  		bra.w	*					; spin infinitely
000CEB66                            
000CEB66                            ; ===========================================================================
000CEB66                            ; ---------------------------------------------------------------------------
000CEB66                            ; Clear The Screen
000CEB66                            ; ---------------------------------------------------------------------------
000CEB66                            MC_ClearScreen:
000CEB66 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
000CEB6A                            
000CEB6A 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
000CEB70 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CEB74 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
000CEB7A 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CEB80                            
000CEB80 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CEB82 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
000CEB84                            
000CEB84 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
000CEB8A 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CEB8E 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
000CEB94 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CEB9A                            
000CEB9A 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CEB9C 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
000CEB9E                            
000CEB9E 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
000CEBA4 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CEBA8 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
000CEBAE 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CEBB4                            
000CEBB4 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CEBB6 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
000CEBB8                            
000CEBB8 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000CEBBC 4E75                       		rts						; return
000CEBBE                            ; ---------------------------------------------------------------------------
000CEBBE                            
000CEBBE                            ; ===========================================================================
000CEBBE                            ; ---------------------------------------------------------------------------
000CEBBE                            ; VBlank Interrupt
000CEBBE                            ; ---------------------------------------------------------------------------
000CEBBE                            MC_VInt:
000CEBD8                            
000CEBD8 5278 8E80                  		addq.w	#1,(camXPosFG).w			; update scrolling
000CEBE2 3D78 8E80 FFFC             		move.w	(camXPosFG).w,-4(a6)			; ^
000CEBE8                            
000CEBE8                            
000CEBE8 4E73                       		rte						; return
000CEBEA                            ; ---------------------------------------------------------------------------
000CEBEA                            
000CEBEA                            block_entry	macro	tileID, palLine, priority
000CEBEA                            	if (narg<3)
000CEBEA                            		dc.w	(palLine<<13)|tileID
000CEBEA                            	else
000CEBEA                            		dc.w	$8000|(palLine<<13)|tileID
000CEBEA                            	endif
000CEBEA                            		endm
000CEBEA                            
000CEBEA                            MC_BlockRender:
000CEC2A                            
000CEC48                            
000CEC48                            ; ---------------------------------------------------------------------------
000CEC48                            MC_Palette:
000CEC48 0E86 08AE 068E 046C 0EE0+  	dc.w	$E86, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
000CEC68 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
000CEC88 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
000CECA8 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000CECC8                            ; ---------------------------------------------------------------------------
000CECC8                            MC_Terrain:
000CECC8                            	incbin	"minecraft\assets\bin\terrain.bin"
000CF148                            MC_Terrain_End:
000CF148                            ; ---------------------------------------------------------------------------
000CF148                            ; ---------------------------------------------------------------------------
000CF148                            ; end of 'ROM'
000CF148                            EndOfRom:
000CF148                            
000CF148                            
