00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow2size+8
00000000                            lswifi: equ lsrow2size+9
00000000                            
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 003C                  		andi.w	#$3C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003BC                            ; ===========================================================================
000003BC                            
000003BC                            CheckSumError:
000003BC 6100 0000                  		bsr.w	VDPSetupGame
000003C0 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003CA 7E3F                       		moveq	#$3F,d7
000003CC                            
000003CC                            CheckSum_Red:
000003CC 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D4 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D8                            
000003D8                            CheckSum_Loop:
000003D8 60FE                       		bra.s	CheckSum_Loop
000003DA                            ; ===========================================================================
000003DA                            
000003DA                            BusError:
000003DA 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003E0 6000                       		bra.s	loc_43A
000003E2                            ; ===========================================================================
000003E2                            
000003E2                            AddressError:
000003E2 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E8 6000                       		bra.s	loc_43A
000003EA                            ; ===========================================================================
000003EA                            
000003EA                            IllegalInstr:
000003EA 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003F0 54AF 0002                  		addq.l	#2,2(sp)
000003F4 6000                       		bra.s	loc_462
000003F6                            ; ===========================================================================
000003F6                            
000003F6                            ZeroDivide:
000003F6 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003FC 6000                       		bra.s	loc_462
000003FE                            ; ===========================================================================
000003FE                            
000003FE                            ChkInstr:
000003FE 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000404 6000                       		bra.s	loc_462
00000406                            ; ===========================================================================
00000406                            
00000406                            TrapvInstr:
00000406 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000040C 6000                       		bra.s	loc_462
0000040E                            ; ===========================================================================
0000040E                            
0000040E                            PrivilegeViol:
0000040E 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000414 6000                       		bra.s	loc_462
00000416                            ; ===========================================================================
00000416                            
00000416                            Trace:
00000416 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000041C 6000                       		bra.s	loc_462
0000041E                            ; ===========================================================================
0000041E                            
0000041E                            Line1010Emu:
0000041E 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000424 54AF 0002                  		addq.l	#2,2(sp)
00000428 6000                       		bra.s	loc_462
0000042A                            ; ===========================================================================
0000042A                            
0000042A                            Line1111Emu:
0000042A 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000430 54AF 0002                  		addq.l	#2,2(sp)
00000434 6000                       		bra.s	loc_462
00000436                            ; ===========================================================================
00000436                            
00000436                            ErrorExcept:
00000436 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000043C 6000                       		bra.s	loc_462
0000043E                            ; ===========================================================================
0000043E                            
0000043E                            loc_43A:
0000043E 46FC 2700                  		move	#$2700,sr
00000442 544F                       		addq.w	#2,sp
00000444 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000448 544F                       		addq.w	#2,sp
0000044A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000450 6100 0000                  		bsr.w	ShowErrorMsg
00000454 202F 0002                  		move.l	2(sp),d0
00000458 6100 0000                  		bsr.w	sub_5BA
0000045C 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000460 6100 0000                  		bsr.w	sub_5BA
00000464 6000                       		bra.s	loc_478
00000466                            ; ===========================================================================
00000466                            
00000466                            loc_462:
00000466 46FC 2700                  		move	#$2700,sr
0000046A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000470 6100 0000                  		bsr.w	ShowErrorMsg
00000474 202F 0002                  		move.l	2(sp),d0
00000478 6100 0000                  		bsr.w	sub_5BA
0000047C                            
0000047C                            loc_478:
0000047C 6100 0000                  		bsr.w	ErrorWaitForC
00000480 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000486 46FC 2300                  		move	#$2300,sr
0000048A 4E73                       		rte	
0000048C                            
0000048C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000048C                            
0000048C                            
0000048C                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000048C 4DF9 00C0 0000             		lea	($C00000).l,a6
00000492 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000049C 41F9 0000 0000             		lea	(Art_Text).l,a0
000004A2 323C 027F                  		move.w	#$27F,d1
000004A6                            
000004A6                            Error_LoadGfx:
000004A6 3C98                       		move.w	(a0)+,(a6)
000004A8 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004AC 7000                       		moveq	#0,d0		; clear	d0
000004AE 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004B2 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B6 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004BA 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C4 7212                       		moveq	#$12,d1		; number of characters
000004C6                            
000004C6                            Error_LoopChars:
000004C6 7000                       		moveq	#0,d0
000004C8 1018                       		move.b	(a0)+,d0
000004CA 0640 0790                  		addi.w	#$790,d0
000004CE 3C80                       		move.w	d0,(a6)
000004D0 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D4 4E75                       		rts	
000004D6                            ; End of function ShowErrorMsg
000004D6                            
000004D6                            ; ===========================================================================
000004D6 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004DA 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DE 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004E2 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E6 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004EA 0000                       		dc.w asc_5A6-ErrorText
000004EC 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FF 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000512 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000525 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000538 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000054B 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055E 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000571 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000584 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000597 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005AA 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BE 00                         		even
000005BE                            
000005BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BE                            
000005BE                            
000005BE                            sub_5BA:				; XREF: loc_43A; loc_462
000005BE 3CBC 07CA                  		move.w	#$7CA,(a6)
000005C2 7407                       		moveq	#7,d2
000005C4                            
000005C4                            loc_5C0:
000005C4 E998                       		rol.l	#4,d0
000005C6 6100                       		bsr.s	sub_5CA
000005C8 51CA FFFA                  		dbf	d2,loc_5C0
000005CC 4E75                       		rts	
000005CE                            ; End of function sub_5BA
000005CE                            
000005CE                            
000005CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CE                            
000005CE                            
000005CE                            sub_5CA:				; XREF: sub_5BA
000005CE 3200                       		move.w	d0,d1
000005D0 0241 000F                  		andi.w	#$F,d1
000005D4 0C41 000A                  		cmpi.w	#$A,d1
000005D8 6500                       		bcs.s	loc_5D8
000005DA 5E41                       		addq.w	#7,d1
000005DC                            
000005DC                            loc_5D8:
000005DC 0641 07C0                  		addi.w	#$7C0,d1
000005E0 3C81                       		move.w	d1,(a6)
000005E2 4E75                       		rts	
000005E4                            ; End of function sub_5CA
000005E4                            
000005E4                            
000005E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E4                            
000005E4                            
000005E4                            ErrorWaitForC:				; XREF: loc_478
000005E4 6100 0000                  		bsr.w	ReadJoypads
000005E8 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EE 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005F2 4E75                       		rts	
000005F4                            ; End of function ErrorWaitForC
000005F4                            
000005F4                            ; ===========================================================================
000005F4                            
000005F4                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D34                            Art_Text_end:		even
00000D34                            
00000D34                            ; ===========================================================================
00000D34                            ;VBlank
00000D34                            loc_B10:				; XREF: Vectors
00000D34 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D38 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D3C 6700                       		beq.s	loc_B88
00000D3E 3039 00C0 0004             		move.w	($C00004).l,d0
00000D44 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4E 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D56 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D5C 6700                       		beq.s	loc_B42
00000D5E 303C 0700                  		move.w	#$700,d0
00000D62                            
00000D62                            loc_B3E:
00000D62 51C8 FFFE                  		dbf	d0,loc_B3E
00000D66                            
00000D66                            loc_B42:
00000D66 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D6A 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D70 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D76 0240 003E                  		andi.w	#$3E,d0
00000D7A 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7E 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D82                            
00000D82                            loc_B5E:				; XREF: loc_B88
00000D82 4EB9 0000 0000             		jsr	sub_71B4C
00000D88                            
00000D88                            loc_B64:				; XREF: loc_D50
00000D88 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D8C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D90 4E73                       		rte	
00000D92                            ; ===========================================================================
00000D92 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D96 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D9A 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9E 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA6 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DAA 0000                       		dc.w loc_E72-off_B6E
00000DAC                            ; ===========================================================================
00000DAC                            
00000DAC                            loc_B88:				; XREF: loc_B10; off_B6E
00000DAC 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DB2 6700                       		beq.s	loc_B9A
00000DB4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DBA 6600 FFC6                  		bne.w	loc_B5E
00000DBE                            
00000DBE                            loc_B9A:
00000DBE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC4 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC8 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD4 6700                       		beq.s	loc_BBA
00000DD6 303C 0700                  		move.w	#$700,d0
00000DDA                            
00000DDA                            loc_BB6:
00000DDA 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDE                            
00000DDE                            loc_BBA:
00000DDE 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DEC                            
00000DEC                            loc_BC8:
00000DEC 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF4 66F6                       		bne.s	loc_BC8
00000DF6 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DFA 6600                       		bne.s	loc_BFE
00000DFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E02 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E08 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0E 3ABC 977F                  		move.w	#$977F,(a5)
00000E12 3ABC C000                  		move.w	#$C000,(a5)
00000E16 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E20 6000                       		bra.s	loc_C22
00000E22                            ; ===========================================================================
00000E22                            
00000E22                            loc_BFE:				; XREF: loc_BC8
00000E22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E28 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E34 3ABC 977F                  		move.w	#$977F,(a5)
00000E38 3ABC C000                  		move.w	#$C000,(a5)
00000E3C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E46                            
00000E46                            loc_C22:				; XREF: loc_BC8
00000E46 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E4A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E52 6000 FF2E                  		bra.w	loc_B5E
00000E56                            ; ===========================================================================
00000E56                            
00000E56                            loc_C32:				; XREF: off_B6E
00000E56 6100 0000                  		bsr.w	sub_106E
00000E5A                            
00000E5A                            loc_C36:				; XREF: off_B6E
00000E5A 4A78 F614                  		tst.w	($FFFFF614).w
00000E5E 6700 0000                  		beq.w	locret_C42
00000E62 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E66                            
00000E66                            locret_C42:
00000E66 4E75                       		rts	
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_C44:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C 6100 0000                  		bsr.w	sub_6886
00000E70 6100 0000                  		bsr.w	sub_1642
00000E74 4A78 F614                  		tst.w	($FFFFF614).w
00000E78 6700 0000                  		beq.w	locret_C5C
00000E7C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E80                            
00000E80                            locret_C5C:
00000E80 4E75                       		rts	
00000E82                            ; ===========================================================================
00000E82                            
00000E82                            loc_C5E:				; XREF: off_B6E
00000E82 6100 0000                  		bsr.w	sub_106E
00000E86 4E75                       		rts	
00000E88                            ; ===========================================================================
00000E88                            
00000E88                            loc_C64:				; XREF: off_B6E
00000E88 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8E 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E92                            
00000E92                            loc_C6E:				; XREF: off_B6E
00000E92 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E9A                            
00000E9A                            loc_C76:
00000E9A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EA2 66F6                       		bne.s	loc_C76		; if not, branch
00000EA4 6100 0000                  		bsr.w	ReadJoypads
00000EA8 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EAC 6600                       		bne.s	loc_CB0
00000EAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EBA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EC0 3ABC 977F                  		move.w	#$977F,(a5)
00000EC4 3ABC C000                  		move.w	#$C000,(a5)
00000EC8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED2 6000                       		bra.s	loc_CD4
00000ED4                            ; ===========================================================================
00000ED4                            
00000ED4                            loc_CB0:				; XREF: loc_C76
00000ED4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EDA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EE0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE6 3ABC 977F                  		move.w	#$977F,(a5)
00000EEA 3ABC C000                  		move.w	#$C000,(a5)
00000EEE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF8                            
00000EF8                            loc_CD4:				; XREF: loc_C76
00000EF8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F02 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F08 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0E 3ABC 977F                  		move.w	#$977F,(a5)
00000F12 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F16 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F20 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F26 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F2C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F32 3ABC 977F                  		move.w	#$977F,(a5)
00000F36 3ABC 7800                  		move.w	#$7800,(a5)
00000F3A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F40 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F44 4A38 F767                  		tst.b	($FFFFF767).w
00000F48 6700                       		beq.s	loc_D50
00000F4A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F50 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F56 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F5C 3ABC 977F                  		move.w	#$977F,(a5)
00000F60 3ABC 7000                  		move.w	#$7000,(a5)
00000F64 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F6A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F74                            
00000F74                            loc_D50:
00000F74 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F7C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F82 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F88 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F94 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F9A 6400                       		bcc.s	Demo_Time
00000F9C 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FA2 588F                       		addq.l	#4,sp
00000FA4 6000 FDE2                  		bra.w	loc_B64
00000FA8                            
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            ; Subroutine to	run a demo for an amount of time
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            
00000FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA8                            
00000FA8                            
00000FA8                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA8 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FAC 4EB9 0000 0000             		jsr	AniArt_Load
00000FB2 4EB9 0000 0000             		jsr	HudUpdate
00000FB8 6100 0000                  		bsr.w	sub_165E
00000FBC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FC0 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC4 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC8                            
00000FC8                            Demo_TimeEnd:
00000FC8 4E75                       		rts	
00000FCA                            ; End of function Demo_Time
00000FCA                            
00000FCA                            ; ===========================================================================
00000FCA                            
00000FCA                            loc_DA6:				; XREF: off_B6E
00000FCA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FD2                            
00000FD2                            loc_DAE:
00000FD2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FDA 66F6                       		bne.s	loc_DAE		; if not, branch
00000FDC 6100 0000                  		bsr.w	ReadJoypads
00000FE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FEC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FF2 3ABC 977F                  		move.w	#$977F,(a5)
00000FF6 3ABC C000                  		move.w	#$C000,(a5)
00000FFA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001000 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001004 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001010 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001016 3ABC 977F                  		move.w	#$977F,(a5)
0000101A 3ABC 7800                  		move.w	#$7800,(a5)
0000101E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001024 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001028 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001034 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000103A 3ABC 977F                  		move.w	#$977F,(a5)
0000103E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001042 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001048 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000104C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001054 6100 0000                  		bsr.w	PalCycle_SS
00001058 4A38 F767                  		tst.b	($FFFFF767).w
0000105C 6700                       		beq.s	loc_E64
0000105E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001064 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000106A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001070 3ABC 977F                  		move.w	#$977F,(a5)
00001074 3ABC 7000                  		move.w	#$7000,(a5)
00001078 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001082 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001088                            
00001088                            loc_E64:
00001088 4A78 F614                  		tst.w	($FFFFF614).w
0000108C 6700 0000                  		beq.w	locret_E70
00001090 5378 F614                  		subq.w	#1,($FFFFF614).w
00001094                            
00001094                            locret_E70:
00001094 4E75                       		rts	
00001096                            ; ===========================================================================
00001096                            
00001096                            loc_E72:				; XREF: off_B6E
00001096 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109E                            
0000109E                            loc_E7A:
0000109E 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A6 66F6                       		bne.s	loc_E7A		; if not, branch
000010A8 6100 0000                  		bsr.w	ReadJoypads
000010AC 4A38 F64E                  		tst.b	($FFFFF64E).w
000010B0 6600                       		bne.s	loc_EB4
000010B2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C4 3ABC 977F                  		move.w	#$977F,(a5)
000010C8 3ABC C000                  		move.w	#$C000,(a5)
000010CC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010D2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D6 6000                       		bra.s	loc_ED8
000010D8                            ; ===========================================================================
000010D8                            
000010D8                            loc_EB4:				; XREF: loc_E7A
000010D8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DE 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E4 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010EA 3ABC 977F                  		move.w	#$977F,(a5)
000010EE 3ABC C000                  		move.w	#$C000,(a5)
000010F2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010FC                            
000010FC                            loc_ED8:				; XREF: loc_E7A
000010FC 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001100 4BF9 00C0 0004             		lea	($C00004).l,a5
00001106 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000110C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001112                            
00001112                            loc_EEE:
00001112 3ABC 977F                  		move.w	#$977F,(a5)
00001116 3ABC 7C00                  		move.w	#$7C00,(a5)
0000111A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001120 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001124 4BF9 00C0 0004             		lea	($C00004).l,a5
0000112A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001130 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001136 3ABC 977F                  		move.w	#$977F,(a5)
0000113A 3ABC 7800                  		move.w	#$7800,(a5)
0000113E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001144 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001148 4A38 F767                  		tst.b	($FFFFF767).w
0000114C 6700                       		beq.s	loc_F54
0000114E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001154 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000115A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001160 3ABC 977F                  		move.w	#$977F,(a5)
00001164 3ABC 7000                  		move.w	#$7000,(a5)
00001168 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001172 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001178                            
00001178                            loc_F54:
00001178 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001180 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001186 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000118C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001192 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001198 6100 0000                  		bsr.w	LoadTilesAsYouMove
0000119C 4EB9 0000 0000             		jsr	AniArt_Load
000011A2 4EB9 0000 0000             		jsr	HudUpdate
000011A8 6100 0000                  		bsr.w	sub_1642
000011AC 4E75                       		rts	
000011AE                            ; ===========================================================================
000011AE                            
000011AE                            loc_F8A:				; XREF: off_B6E
000011AE 6100 0000                  		bsr.w	sub_106E
000011B2 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B6 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011BC 4E75                       		rts	
000011BE                            ; ===========================================================================
000011BE                            
000011BE                            loc_F9A:				; XREF: off_B6E
000011BE 6100 0000                  		bsr.w	sub_106E
000011C2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C6 6000 0000                  		bra.w	sub_1642
000011CA                            ; ===========================================================================
000011CA                            
000011CA                            loc_FA6:				; XREF: off_B6E
000011CA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011D2                            
000011D2                            loc_FAE:
000011D2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011DA 66F6                       		bne.s	loc_FAE		; if not, branch
000011DC 6100 0000                  		bsr.w	ReadJoypads
000011E0 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011EC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011F2 3ABC 977F                  		move.w	#$977F,(a5)
000011F6 3ABC C000                  		move.w	#$C000,(a5)
000011FA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001200 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001204 4BF9 00C0 0004             		lea	($C00004).l,a5
0000120A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001210 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001216 3ABC 977F                  		move.w	#$977F,(a5)
0000121A 3ABC 7800                  		move.w	#$7800,(a5)
0000121E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001224 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001228 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001234 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000123A 3ABC 977F                  		move.w	#$977F,(a5)
0000123E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001242 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001248 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000124C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001254 4A38 F767                  		tst.b	($FFFFF767).w
00001258 6700                       		beq.s	loc_1060
0000125A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001260 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001266 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000126C 3ABC 977F                  		move.w	#$977F,(a5)
00001270 3ABC 7000                  		move.w	#$7000,(a5)
00001274 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000127A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001284                            
00001284                            loc_1060:
00001284 4A78 F614                  		tst.w	($FFFFF614).w
00001288 6700 0000                  		beq.w	locret_106C
0000128C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001290                            
00001290                            locret_106C:
00001290 4E75                       		rts	
00001292                            
00001292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001292                            
00001292                            
00001292                            sub_106E:				; XREF: loc_C32; et al
00001292 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000129A                            
0000129A                            loc_1076:
0000129A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012A2 66F6                       		bne.s	loc_1076	; if not, branch
000012A4 6100 0000                  		bsr.w	ReadJoypads
000012A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000012AC 6600                       		bne.s	loc_10B0
000012AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012C0 3ABC 977F                  		move.w	#$977F,(a5)
000012C4 3ABC C000                  		move.w	#$C000,(a5)
000012C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012D2 6000                       		bra.s	loc_10D4
000012D4                            ; ===========================================================================
000012D4                            
000012D4                            loc_10B0:				; XREF: sub_106E
000012D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E6 3ABC 977F                  		move.w	#$977F,(a5)
000012EA 3ABC C000                  		move.w	#$C000,(a5)
000012EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F8                            
000012F8                            loc_10D4:				; XREF: sub_106E
000012F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FE 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001304 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000130A 3ABC 977F                  		move.w	#$977F,(a5)
0000130E 3ABC 7800                  		move.w	#$7800,(a5)
00001312 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001318 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000131C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001322 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001328 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132E 3ABC 977F                  		move.w	#$977F,(a5)
00001332 3ABC 7C00                  		move.w	#$7C00,(a5)
00001336 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000133C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001340 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001348 4E75                       		rts	
0000134A                            ; End of function sub_106E
0000134A                            
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            ; Subroutine to	move pallets from the RAM to CRAM
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            
0000134A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000134A                            
0000134A                            
0000134A                            PalToCRAM:
0000134A 46FC 2700                  		move	#$2700,sr
0000134E 4A78 F644                  		tst.w	($FFFFF644).w
00001352 6700                       		beq.s	locret_119C
00001354 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000135A 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135E 43F9 00C0 0000             		lea	($C00000).l,a1
00001364 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001368 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001370 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B6 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013BA 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BE 6600                       		bne.s	loc_119E
000013C0                            
000013C0                            locret_119C:
000013C0 4E73                       		rte	
000013C2                            ; ===========================================================================
000013C2                            
000013C2                            loc_119E:				; XREF: PalToCRAM
000013C2 4238 F64F                  		clr.b	($FFFFF64F).w
000013C6 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013CA 6100 FBDC                  		bsr.w	Demo_Time
000013CE 4EB9 0000 0000             		jsr	sub_71B4C
000013D4 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D8 4E73                       		rte	
000013DA                            ; End of function PalToCRAM
000013DA                            
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            ; Subroutine to	initialise joypads
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            
000013DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013DA                            
000013DA                            
000013DA                            JoypadInit:				; XREF: GameClrRAM
000013DA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013E2                            
000013E2                            Joypad_WaitZ80:
000013E2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013EA 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013EC 7040                       		moveq	#$40,d0
000013EE 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F4 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013FA 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001400 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001408 4E75                       		rts	
0000140A                            ; End of function JoypadInit
0000140A                            
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            ; Subroutine to	read joypad input, and send it to the RAM
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            
0000140A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000140A                            
0000140A                            
0000140A                            ReadJoypads:
0000140A 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140E 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001414 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001416 5449                       		addq.w	#2,a1		; do the second	joypad
00001418                            
00001418                            Joypad_Read:
00001418 12BC 0000                  		move.b	#0,(a1)
0000141C 4E71                       		nop	
0000141E 4E71                       		nop	
00001420 1011                       		move.b	(a1),d0
00001422 E508                       		lsl.b	#2,d0
00001424 0200 00C0                  		andi.b	#$C0,d0
00001428 12BC 0040                  		move.b	#$40,(a1)
0000142C 4E71                       		nop	
0000142E 4E71                       		nop	
00001430 1211                       		move.b	(a1),d1
00001432 0201 003F                  		andi.b	#$3F,d1
00001436 8001                       		or.b	d1,d0
00001438 4600                       		not.b	d0
0000143A 1210                       		move.b	(a0),d1
0000143C B101                       		eor.b	d0,d1
0000143E 10C0                       		move.b	d0,(a0)+
00001440 C200                       		and.b	d0,d1
00001442 10C1                       		move.b	d1,(a0)+
00001444 4E75                       		rts	
00001446                            ; End of function ReadJoypads
00001446                            
00001446                            
00001446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001446                            
00001446                            
00001446                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001446 41F9 00C0 0004             		lea	($C00004).l,a0
0000144C 43F9 00C0 0000             		lea	($C00000).l,a1
00001452 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001458 7E12                       		moveq	#$12,d7
0000145A                            
0000145A                            VDP_Loop:
0000145A 309A                       		move.w	(a2)+,(a0)
0000145C 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001460                            
00001460 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001466 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000146A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001470 7000                       		moveq	#0,d0
00001472 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000147C 3E3C 003F                  		move.w	#$3F,d7
00001480                            
00001480                            VDP_ClrCRAM:
00001480 3280                       		move.w	d0,(a1)
00001482 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001486                            
00001486 42B8 F616                  		clr.l	($FFFFF616).w
0000148A 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148E 2F01                       		move.l	d1,-(sp)
00001490 4BF9 00C0 0004             		lea	($C00004).l,a5
00001496 3ABC 8F01                  		move.w	#$8F01,(a5)
0000149A 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014A0 3ABC 9780                  		move.w	#$9780,(a5)
000014A4 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014AA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014B2                            
000014B2                            loc_128E:
000014B2 3215                       		move.w	(a5),d1
000014B4 0801 0001                  		btst	#1,d1
000014B8 66F8                       		bne.s	loc_128E
000014BA                            
000014BA 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BE 221F                       		move.l	(sp)+,d1
000014C0 4E75                       		rts	
000014C2                            ; End of function VDPSetupGame
000014C2                            
000014C2                            ; ===========================================================================
000014C2 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014CA 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014D2 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014DA 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014E2 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E8                            
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            ; Subroutine to	clear the screen
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            
000014E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E8                            
000014E8                            
000014E8                            ClearScreen:
000014E8 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EE 3ABC 8F01                  		move.w	#$8F01,(a5)
000014F2 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F8 3ABC 9780                  		move.w	#$9780,(a5)
000014FC 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001502 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000150A                            
0000150A                            loc_12E6:
0000150A 3215                       		move.w	(a5),d1
0000150C 0801 0001                  		btst	#1,d1
00001510 66F8                       		bne.s	loc_12E6
00001512                            
00001512 3ABC 8F02                  		move.w	#$8F02,(a5)
00001516 4BF9 00C0 0004             		lea	($C00004).l,a5
0000151C 3ABC 8F01                  		move.w	#$8F01,(a5)
00001520 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001526 3ABC 9780                  		move.w	#$9780,(a5)
0000152A 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001530 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001538                            
00001538                            loc_1314:
00001538 3215                       		move.w	(a5),d1
0000153A 0801 0001                  		btst	#1,d1
0000153E 66F8                       		bne.s	loc_1314
00001540                            
00001540 3ABC 8F02                  		move.w	#$8F02,(a5)
00001544 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000154C 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001554 43F8 F800                  		lea	($FFFFF800).w,a1
00001558 7000                       		moveq	#0,d0
0000155A 323C 009F                  		move.w	#$9F,d1
0000155E                            
0000155E                            loc_133A:
0000155E 22C0                       		move.l	d0,(a1)+
00001560 51C9 FFFC                  		dbf	d1,loc_133A
00001564                            
00001564 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001568 7000                       		moveq	#0,d0
0000156A 323C 00FF                  		move.w	#$FF,d1
0000156E                            
0000156E                            loc_134A:
0000156E 22C0                       		move.l	d0,(a1)+
00001570 51C9 FFFC                  		dbf	d1,loc_134A
00001574 4E75                       		rts	
00001576                            ; End of function ClearScreen
00001576                            
00001576                            ; ---------------------------------------------------------------------------
00001576                            ; Subroutine to	load the sound driver
00001576                            ; ---------------------------------------------------------------------------
00001576                            
00001576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001576                            
00001576                            
00001576                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001576 4E71                       		nop	
00001578 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001580 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001588 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158E 43F9 00A0 0000             		lea	($A00000).l,a1
00001594 6100 0000                  		bsr.w	KosDec		; decompress
00001598 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 4E71                       		nop	
000015A6 4E71                       		nop	
000015A8 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015B0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B8 4E75                       		rts	
000015BA                            ; End of function SoundDriverLoad
000015BA                            
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            ; Subroutine to	play a sound or	music track
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            
000015BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BA                            
000015BA                            
000015BA                            PlaySound:
000015BA 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BE 4E75                       		rts	
000015C0                            ; End of function PlaySound
000015C0                            
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            ; Subroutine to	play a special sound/music (E0-E4)
000015C0                            ;
000015C0                            ; E0 - Fade out
000015C0                            ; E1 - Sega
000015C0                            ; E2 - Speed up
000015C0                            ; E3 - Normal speed
000015C0                            ; E4 - Stop
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            
000015C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C0                            
000015C0                            
000015C0                            PlaySound_Special:
000015C0 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C4 4E75                       		rts	
000015C6                            ; End of function PlaySound_Special
000015C6                            
000015C6                            ; ===========================================================================
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            ; Unused sound/music subroutine
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            
000015C6                            PlaySound_Unk:
000015C6 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015CA 4E75                       		rts	
000015CC                            
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            ; Subroutine to	pause the game
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CC                            
000015CC                            
000015CC                            PauseGame:				; XREF: Level_MainLoop; et al
000015CC 4E71                       		nop	
000015CE 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015D2 6700                       		beq.s	Unpause		; if not, branch
000015D4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D8 6600                       		bne.s	loc_13BE	; if yes, branch
000015DA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015E0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015E2                            
000015E2                            loc_13BE:
000015E2 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E8 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EE                            
000015EE                            loc_13CA:
000015EE 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F4 6100 0000                  		bsr.w	DelayProgram
000015F8 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015FC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FE 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001604 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001606 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000160C 4E71                       		nop	
0000160E 6000                       		bra.s	loc_1404
00001610                            ; ===========================================================================
00001610                            
00001610                            Pause_ChkBC:				; XREF: PauseGame
00001610 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001616 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001618 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161E 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001620                            
00001620                            Pause_ChkStart:				; XREF: PauseGame
00001620 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001626 67C6                       		beq.s	loc_13CA	; if not, branch
00001628                            
00001628                            loc_1404:				; XREF: PauseGame
00001628 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162E                            
0000162E                            Unpause:				; XREF: PauseGame
0000162E 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001634                            
00001634                            Pause_DoNothing:			; XREF: PauseGame
00001634 4E75                       		rts	
00001636                            ; ===========================================================================
00001636                            
00001636                            Pause_SlowMo:				; XREF: PauseGame
00001636 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000163C 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001642 4E75                       		rts	
00001644                            ; End of function PauseGame
00001644                            
00001644                            ; ---------------------------------------------------------------------------
00001644                            ; Subroutine to	display	patterns via the VDP
00001644                            ; ---------------------------------------------------------------------------
00001644                            
00001644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001644                            
00001644                            
00001644                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001644 4DF9 00C0 0000             		lea	($C00000).l,a6
0000164A 283C 0080 0000             		move.l	#$800000,d4
00001650                            
00001650                            loc_142C:
00001650 2D40 0004                  		move.l	d0,4(a6)
00001654 3601                       		move.w	d1,d3
00001656                            
00001656                            loc_1432:
00001656 3C99                       		move.w	(a1)+,(a6)
00001658 51CB FFFC                  		dbf	d3,loc_1432
0000165C D084                       		add.l	d4,d0
0000165E 51CA FFF0                  		dbf	d2,loc_142C
00001662 4E75                       		rts	
00001664                            ; End of function ShowVDPGraphics
00001664                            
00001664                            ; ---------------------------------------------------------------------------
00001664                            ; Nemesis decompression	algorithm
00001664                            ; ---------------------------------------------------------------------------
00001664                            
00001664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001664                            
00001664                            
00001664                            NemDec:
00001664 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001668 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166E 49F9 00C0 0000             		lea	($C00000).l,a4
00001674 6000                       		bra.s	loc_145C
00001676                            ; ===========================================================================
00001676 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000167A 47F9 0000 0000             		lea	(loc_1518).l,a3
00001680                            
00001680                            loc_145C:				; XREF: NemDec
00001680 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001684 3418                       		move.w	(a0)+,d2
00001686 E34A                       		lsl.w	#1,d2
00001688 6400                       		bcc.s	loc_146A
0000168A D6FC 000A                  		adda.w	#$A,a3
0000168E                            
0000168E                            loc_146A:
0000168E E54A                       		lsl.w	#2,d2
00001690 3A42                       		movea.w	d2,a5
00001692 7608                       		moveq	#8,d3
00001694 7400                       		moveq	#0,d2
00001696 7800                       		moveq	#0,d4
00001698 6100 0000                  		bsr.w	NemDec4
0000169C 1A18                       		move.b	(a0)+,d5
0000169E E145                       		asl.w	#8,d5
000016A0 1A18                       		move.b	(a0)+,d5
000016A2 3C3C 0010                  		move.w	#$10,d6
000016A6 6100                       		bsr.s	NemDec2
000016A8 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016AC 4E75                       		rts	
000016AE                            ; End of function NemDec
000016AE                            
000016AE                            
000016AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AE                            
000016AE                            
000016AE                            NemDec2:				; XREF: NemDec
000016AE 3E06                       		move.w	d6,d7
000016B0 5147                       		subq.w	#8,d7
000016B2 3205                       		move.w	d5,d1
000016B4 EE69                       		lsr.w	d7,d1
000016B6 0C01 00FC                  		cmpi.b	#-4,d1
000016BA 6400                       		bcc.s	loc_14D6
000016BC 0241 00FF                  		andi.w	#$FF,d1
000016C0 D241                       		add.w	d1,d1
000016C2 1031 1000                  		move.b	(a1,d1.w),d0
000016C6 4880                       		ext.w	d0
000016C8 9C40                       		sub.w	d0,d6
000016CA 0C46 0009                  		cmpi.w	#9,d6
000016CE 6400                       		bcc.s	loc_14B2
000016D0 5046                       		addq.w	#8,d6
000016D2 E145                       		asl.w	#8,d5
000016D4 1A18                       		move.b	(a0)+,d5
000016D6                            
000016D6                            loc_14B2:
000016D6 1231 1001                  		move.b	1(a1,d1.w),d1
000016DA 3001                       		move.w	d1,d0
000016DC 0241 000F                  		andi.w	#$F,d1
000016E0 0240 00F0                  		andi.w	#$F0,d0
000016E4                            
000016E4                            loc_14C0:				; XREF: NemDec3
000016E4 E848                       		lsr.w	#4,d0
000016E6                            
000016E6                            loc_14C2:				; XREF: NemDec3
000016E6 E98C                       		lsl.l	#4,d4
000016E8 8801                       		or.b	d1,d4
000016EA 5343                       		subq.w	#1,d3
000016EC 6600                       		bne.s	loc_14D0
000016EE 4ED3                       		jmp	(a3)
000016F0                            ; End of function NemDec2
000016F0                            
000016F0                            
000016F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F0                            
000016F0                            
000016F0                            NemDec3:				; XREF: loc_1502
000016F0 7800                       		moveq	#0,d4
000016F2 7608                       		moveq	#8,d3
000016F4                            
000016F4                            loc_14D0:				; XREF: NemDec2
000016F4 51C8 FFF0                  		dbf	d0,loc_14C2
000016F8 60B4                       		bra.s	NemDec2
000016FA                            ; ===========================================================================
000016FA                            
000016FA                            loc_14D6:				; XREF: NemDec2
000016FA 5D46                       		subq.w	#6,d6
000016FC 0C46 0009                  		cmpi.w	#9,d6
00001700 6400                       		bcc.s	loc_14E4
00001702 5046                       		addq.w	#8,d6
00001704 E145                       		asl.w	#8,d5
00001706 1A18                       		move.b	(a0)+,d5
00001708                            
00001708                            loc_14E4:				; XREF: NemDec3
00001708 5F46                       		subq.w	#7,d6
0000170A 3205                       		move.w	d5,d1
0000170C EC69                       		lsr.w	d6,d1
0000170E 3001                       		move.w	d1,d0
00001710 0241 000F                  		andi.w	#$F,d1
00001714 0240 0070                  		andi.w	#$70,d0
00001718 0C46 0009                  		cmpi.w	#9,d6
0000171C 64C6                       		bcc.s	loc_14C0
0000171E 5046                       		addq.w	#8,d6
00001720 E145                       		asl.w	#8,d5
00001722 1A18                       		move.b	(a0)+,d5
00001724 60BE                       		bra.s	loc_14C0
00001726                            ; End of function NemDec3
00001726                            
00001726                            ; ===========================================================================
00001726                            
00001726                            loc_1502:				; XREF: NemDec
00001726 2884                       		move.l	d4,(a4)
00001728 534D                       		subq.w	#1,a5
0000172A 380D                       		move.w	a5,d4
0000172C 66C2                       		bne.s	NemDec3
0000172E 4E75                       		rts	
00001730                            ; ===========================================================================
00001730 B982                       		eor.l	d4,d2
00001732 2882                       		move.l	d2,(a4)
00001734 534D                       		subq.w	#1,a5
00001736 380D                       		move.w	a5,d4
00001738 66B6                       		bne.s	NemDec3
0000173A 4E75                       		rts	
0000173C                            ; ===========================================================================
0000173C                            
0000173C                            loc_1518:				; XREF: NemDec
0000173C 28C4                       		move.l	d4,(a4)+
0000173E 534D                       		subq.w	#1,a5
00001740 380D                       		move.w	a5,d4
00001742 66AC                       		bne.s	NemDec3
00001744 4E75                       		rts	
00001746                            ; ===========================================================================
00001746 B982                       		eor.l	d4,d2
00001748 28C2                       		move.l	d2,(a4)+
0000174A 534D                       		subq.w	#1,a5
0000174C 380D                       		move.w	a5,d4
0000174E 66A0                       		bne.s	NemDec3
00001750 4E75                       		rts	
00001752                            
00001752                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001752                            
00001752                            
00001752                            NemDec4:				; XREF: NemDec
00001752 1018                       		move.b	(a0)+,d0
00001754                            
00001754                            loc_1530:
00001754 0C00 00FF                  		cmpi.b	#-1,d0
00001758 6600                       		bne.s	loc_1538
0000175A 4E75                       		rts	
0000175C                            ; ===========================================================================
0000175C                            
0000175C                            loc_1538:				; XREF: NemDec4
0000175C 3E00                       		move.w	d0,d7
0000175E                            
0000175E                            loc_153A:
0000175E 1018                       		move.b	(a0)+,d0
00001760 0C00 0080                  		cmpi.b	#$80,d0
00001764 64EE                       		bcc.s	loc_1530
00001766 1200                       		move.b	d0,d1
00001768 0247 000F                  		andi.w	#$F,d7
0000176C 0241 0070                  		andi.w	#$70,d1
00001770 8E41                       		or.w	d1,d7
00001772 0240 000F                  		andi.w	#$F,d0
00001776 1200                       		move.b	d0,d1
00001778 E149                       		lsl.w	#8,d1
0000177A 8E41                       		or.w	d1,d7
0000177C 7208                       		moveq	#8,d1
0000177E 9240                       		sub.w	d0,d1
00001780 6600                       		bne.s	loc_1568
00001782 1018                       		move.b	(a0)+,d0
00001784 D040                       		add.w	d0,d0
00001786 3387 0000                  		move.w	d7,(a1,d0.w)
0000178A 60D2                       		bra.s	loc_153A
0000178C                            ; ===========================================================================
0000178C                            
0000178C                            loc_1568:				; XREF: NemDec4
0000178C 1018                       		move.b	(a0)+,d0
0000178E E368                       		lsl.w	d1,d0
00001790 D040                       		add.w	d0,d0
00001792 7A01                       		moveq	#1,d5
00001794 E36D                       		lsl.w	d1,d5
00001796 5345                       		subq.w	#1,d5
00001798                            
00001798                            loc_1574:
00001798 3387 0000                  		move.w	d7,(a1,d0.w)
0000179C 5440                       		addq.w	#2,d0
0000179E 51CD FFF8                  		dbf	d5,loc_1574
000017A2 60BA                       		bra.s	loc_153A
000017A4                            ; End of function NemDec4
000017A4                            
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            ; Subroutine to	load pattern load cues
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            
000017A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A4                            
000017A4                            
000017A4                            LoadPLC:
000017A4 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A8 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AE D040                       		add.w	d0,d0
000017B0 3031 0000                  		move.w	(a1,d0.w),d0
000017B4 43F1 0000                  		lea	(a1,d0.w),a1
000017B8 45F8 F680                  		lea	($FFFFF680).w,a2
000017BC                            
000017BC                            loc_1598:
000017BC 4A92                       		tst.l	(a2)
000017BE 6700                       		beq.s	loc_15A0
000017C0 5C4A                       		addq.w	#6,a2
000017C2 60F8                       		bra.s	loc_1598
000017C4                            ; ===========================================================================
000017C4                            
000017C4                            loc_15A0:				; XREF: LoadPLC
000017C4 3019                       		move.w	(a1)+,d0
000017C6 6B00                       		bmi.s	loc_15AC
000017C8                            
000017C8                            loc_15A4:
000017C8 24D9                       		move.l	(a1)+,(a2)+
000017CA 34D9                       		move.w	(a1)+,(a2)+
000017CC 51C8 FFFA                  		dbf	d0,loc_15A4
000017D0                            
000017D0                            loc_15AC:
000017D0 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D4 4E75                       		rts	
000017D6                            ; End of function LoadPLC
000017D6                            
000017D6                            
000017D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D6                            
000017D6                            
000017D6                            LoadPLC2:
000017D6 48E7 0060                  		movem.l	a1-a2,-(sp)
000017DA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017E0 D040                       		add.w	d0,d0
000017E2 3031 0000                  		move.w	(a1,d0.w),d0
000017E6 43F1 0000                  		lea	(a1,d0.w),a1
000017EA 6100                       		bsr.s	ClearPLC
000017EC 45F8 F680                  		lea	($FFFFF680).w,a2
000017F0 3019                       		move.w	(a1)+,d0
000017F2 6B00                       		bmi.s	loc_15D8
000017F4                            
000017F4                            loc_15D0:
000017F4 24D9                       		move.l	(a1)+,(a2)+
000017F6 34D9                       		move.w	(a1)+,(a2)+
000017F8 51C8 FFFA                  		dbf	d0,loc_15D0
000017FC                            
000017FC                            loc_15D8:
000017FC 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001800 4E75                       		rts	
00001802                            ; End of function LoadPLC2
00001802                            
00001802                            ; ---------------------------------------------------------------------------
00001802                            ; Subroutine to	clear the pattern load cues
00001802                            ; ---------------------------------------------------------------------------
00001802                            
00001802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001802                            
00001802                            
00001802                            ClearPLC:				; XREF: LoadPLC2
00001802 45F8 F680                  		lea	($FFFFF680).w,a2
00001806 701F                       		moveq	#$1F,d0
00001808                            
00001808                            ClearPLC_Loop:
00001808 429A                       		clr.l	(a2)+
0000180A 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180E 4E75                       		rts	
00001810                            ; End of function ClearPLC
00001810                            
00001810                            ; ---------------------------------------------------------------------------
00001810                            ; Subroutine to	use graphics listed in a pattern load cue
00001810                            ; ---------------------------------------------------------------------------
00001810                            
00001810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001810                            
00001810                            
00001810                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001810 4AB8 F680                  		tst.l	($FFFFF680).w
00001814 6700                       		beq.s	locret_1640
00001816 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000181A 6600                       		bne.s	locret_1640
0000181C 2078 F680                  		movea.l	($FFFFF680).w,a0
00001820 47F9 0000 1726             		lea	(loc_1502).l,a3
00001826 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000182A 3418                       		move.w	(a0)+,d2
0000182C 6A00                       		bpl.s	loc_160E
0000182E D6FC 000A                  		adda.w	#$A,a3
00001832                            
00001832                            loc_160E:
00001832 0242 7FFF                  		andi.w	#$7FFF,d2
00001836 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000183A 6100 FF16                  		bsr.w	NemDec4
0000183E 1A18                       		move.b	(a0)+,d5
00001840 E145                       		asl.w	#8,d5
00001842 1A18                       		move.b	(a0)+,d5
00001844 7C10                       		moveq	#$10,d6
00001846 7000                       		moveq	#0,d0
00001848 21C8 F680                  		move.l	a0,($FFFFF680).w
0000184C 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001850 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001854 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001858 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000185C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001860 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001864                            
00001864                            locret_1640:
00001864 4E75                       		rts	
00001866                            ; End of function RunPLC_RAM
00001866                            
00001866                            
00001866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001866                            
00001866                            
00001866                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001866 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000186A 6700 0000                  		beq.w	locret_16DA
0000186E 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001874 7000                       		moveq	#0,d0
00001876 3038 F684                  		move.w	($FFFFF684).w,d0
0000187A 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001880 6000                       		bra.s	loc_1676
00001882                            ; End of function sub_1642
00001882                            
00001882                            
00001882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001882                            
00001882                            
00001882                            sub_165E:				; XREF: Demo_Time
00001882 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001886 6700                       		beq.s	locret_16DA
00001888 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188E 7000                       		moveq	#0,d0
00001890 3038 F684                  		move.w	($FFFFF684).w,d0
00001894 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000189A                            
0000189A                            loc_1676:				; XREF: sub_1642
0000189A 49F9 00C0 0004             		lea	($C00004).l,a4
000018A0 E588                       		lsl.l	#2,d0
000018A2 E448                       		lsr.w	#2,d0
000018A4 0040 4000                  		ori.w	#$4000,d0
000018A8 4840                       		swap	d0
000018AA 2880                       		move.l	d0,(a4)
000018AC 594C                       		subq.w	#4,a4
000018AE 2078 F680                  		movea.l	($FFFFF680).w,a0
000018B2 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B6 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018BA 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BE 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018C2 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C6 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018CA 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CE                            
000018CE                            loc_16AA:				; XREF: sub_165E
000018CE 3A7C 0008                  		movea.w	#8,a5
000018D2 6100 FE1C                  		bsr.w	NemDec3
000018D6 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018DA 6700                       		beq.s	loc_16DC
000018DC 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018E0 66EC                       		bne.s	loc_16AA
000018E2 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E6 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018EA 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EE 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018F2 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F6 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018FA 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FE                            
000018FE                            locret_16DA:				; XREF: sub_1642
000018FE 4E75                       		rts	
00001900                            ; ===========================================================================
00001900                            
00001900                            loc_16DC:				; XREF: sub_165E
00001900 41F8 F680                  		lea	($FFFFF680).w,a0
00001904 7015                       		moveq	#$15,d0
00001906                            
00001906                            loc_16E2:				; XREF: sub_165E
00001906 20E8 0006                  		move.l	6(a0),(a0)+
0000190A 51C8 FFFA                  		dbf	d0,loc_16E2
0000190E 4E75                       		rts	
00001910                            ; End of function sub_165E
00001910                            
00001910                            ; ---------------------------------------------------------------------------
00001910                            ; Subroutine to	execute	the pattern load cue
00001910                            ; ---------------------------------------------------------------------------
00001910                            
00001910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001910                            
00001910                            
00001910                            RunPLC_ROM:
00001910 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001916 D040                       		add.w	d0,d0
00001918 3031 0000                  		move.w	(a1,d0.w),d0
0000191C 43F1 0000                  		lea	(a1,d0.w),a1
00001920 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001922                            
00001922                            RunPLC_Loop:
00001922 2059                       		movea.l	(a1)+,a0	; get art pointer
00001924 7000                       		moveq	#0,d0
00001926 3019                       		move.w	(a1)+,d0	; get VRAM address
00001928 E588                       		lsl.l	#2,d0		; divide address by $20
0000192A E448                       		lsr.w	#2,d0
0000192C 0040 4000                  		ori.w	#$4000,d0
00001930 4840                       		swap	d0
00001932 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001938 6100 FD2A                  		bsr.w	NemDec		; decompress
0000193C 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001940 4E75                       		rts	
00001942                            ; End of function RunPLC_ROM
00001942                            
00001942                            ; ---------------------------------------------------------------------------
00001942                            ; Enigma decompression algorithm
00001942                            ; ---------------------------------------------------------------------------
00001942                            
00001942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001942                            
00001942                            
00001942                            EniDec:
00001942 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001946 3640                       		movea.w	d0,a3
00001948 1018                       		move.b	(a0)+,d0
0000194A 4880                       		ext.w	d0
0000194C 3A40                       		movea.w	d0,a5
0000194E 1818                       		move.b	(a0)+,d4
00001950 E70C                       		lsl.b	#3,d4
00001952 3458                       		movea.w	(a0)+,a2
00001954 D4CB                       		adda.w	a3,a2
00001956 3858                       		movea.w	(a0)+,a4
00001958 D8CB                       		adda.w	a3,a4
0000195A 1A18                       		move.b	(a0)+,d5
0000195C E145                       		asl.w	#8,d5
0000195E 1A18                       		move.b	(a0)+,d5
00001960 7C10                       		moveq	#$10,d6
00001962                            
00001962                            loc_173E:				; XREF: loc_1768
00001962 7007                       		moveq	#7,d0
00001964 3E06                       		move.w	d6,d7
00001966 9E40                       		sub.w	d0,d7
00001968 3205                       		move.w	d5,d1
0000196A EE69                       		lsr.w	d7,d1
0000196C 0241 007F                  		andi.w	#$7F,d1
00001970 3401                       		move.w	d1,d2
00001972 0C41 0040                  		cmpi.w	#$40,d1
00001976 6400                       		bcc.s	loc_1758
00001978 7006                       		moveq	#6,d0
0000197A E24A                       		lsr.w	#1,d2
0000197C                            
0000197C                            loc_1758:
0000197C 6100 0000                  		bsr.w	sub_188C
00001980 0242 000F                  		andi.w	#$F,d2
00001984 E849                       		lsr.w	#4,d1
00001986 D241                       		add.w	d1,d1
00001988 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000198C                            ; End of function EniDec
0000198C                            
0000198C                            ; ===========================================================================
0000198C                            
0000198C                            loc_1768:				; XREF: loc_17B4
0000198C 32CA                       		move.w	a2,(a1)+
0000198E 524A                       		addq.w	#1,a2
00001990 51CA FFFA                  		dbf	d2,loc_1768
00001994 60CC                       		bra.s	loc_173E
00001996                            ; ===========================================================================
00001996                            
00001996                            loc_1772:				; XREF: loc_17B4
00001996 32CC                       		move.w	a4,(a1)+
00001998 51CA FFFC                  		dbf	d2,loc_1772
0000199C 60C4                       		bra.s	loc_173E
0000199E                            ; ===========================================================================
0000199E                            
0000199E                            loc_177A:				; XREF: loc_17B4
0000199E 6100 0000                  		bsr.w	loc_17DC
000019A2                            
000019A2                            loc_177E:
000019A2 32C1                       		move.w	d1,(a1)+
000019A4 51CA FFFC                  		dbf	d2,loc_177E
000019A8 60B8                       		bra.s	loc_173E
000019AA                            ; ===========================================================================
000019AA                            
000019AA                            loc_1786:				; XREF: loc_17B4
000019AA 6100 0000                  		bsr.w	loc_17DC
000019AE                            
000019AE                            loc_178A:
000019AE 32C1                       		move.w	d1,(a1)+
000019B0 5241                       		addq.w	#1,d1
000019B2 51CA FFFA                  		dbf	d2,loc_178A
000019B6 60AA                       		bra.s	loc_173E
000019B8                            ; ===========================================================================
000019B8                            
000019B8                            loc_1794:				; XREF: loc_17B4
000019B8 6100 0000                  		bsr.w	loc_17DC
000019BC                            
000019BC                            loc_1798:
000019BC 32C1                       		move.w	d1,(a1)+
000019BE 5341                       		subq.w	#1,d1
000019C0 51CA FFFA                  		dbf	d2,loc_1798
000019C4 609C                       		bra.s	loc_173E
000019C6                            ; ===========================================================================
000019C6                            
000019C6                            loc_17A2:				; XREF: loc_17B4
000019C6 0C42 000F                  		cmpi.w	#$F,d2
000019CA 6700                       		beq.s	loc_17C4
000019CC                            
000019CC                            loc_17A8:
000019CC 6100 0000                  		bsr.w	loc_17DC
000019D0 32C1                       		move.w	d1,(a1)+
000019D2 51CA FFF8                  		dbf	d2,loc_17A8
000019D6 608A                       		bra.s	loc_173E
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_17B4:				; XREF: EniDec
000019D8 60B2                       		bra.s	loc_1768
000019DA                            ; ===========================================================================
000019DA 60B0                       		bra.s	loc_1768
000019DC                            ; ===========================================================================
000019DC 60B8                       		bra.s	loc_1772
000019DE                            ; ===========================================================================
000019DE 60B6                       		bra.s	loc_1772
000019E0                            ; ===========================================================================
000019E0 60BC                       		bra.s	loc_177A
000019E2                            ; ===========================================================================
000019E2 60C6                       		bra.s	loc_1786
000019E4                            ; ===========================================================================
000019E4 60D2                       		bra.s	loc_1794
000019E6                            ; ===========================================================================
000019E6 60DE                       		bra.s	loc_17A2
000019E8                            ; ===========================================================================
000019E8                            
000019E8                            loc_17C4:				; XREF: loc_17A2
000019E8 5348                       		subq.w	#1,a0
000019EA 0C46 0010                  		cmpi.w	#$10,d6
000019EE 6600                       		bne.s	loc_17CE
000019F0 5348                       		subq.w	#1,a0
000019F2                            
000019F2                            loc_17CE:
000019F2 3008                       		move.w	a0,d0
000019F4 E248                       		lsr.w	#1,d0
000019F6 6400                       		bcc.s	loc_17D6
000019F8 5248                       		addq.w	#1,a0
000019FA                            
000019FA                            loc_17D6:
000019FA 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FE 4E75                       		rts	
00001A00                            ; ===========================================================================
00001A00                            
00001A00                            loc_17DC:				; XREF: loc_17A2
00001A00 360B                       		move.w	a3,d3
00001A02 1204                       		move.b	d4,d1
00001A04 D201                       		add.b	d1,d1
00001A06 6400                       		bcc.s	loc_17EE
00001A08 5346                       		subq.w	#1,d6
00001A0A 0D05                       		btst	d6,d5
00001A0C 6700                       		beq.s	loc_17EE
00001A0E 0043 8000                  		ori.w	#-$8000,d3
00001A12                            
00001A12                            loc_17EE:
00001A12 D201                       		add.b	d1,d1
00001A14 6400                       		bcc.s	loc_17FC
00001A16 5346                       		subq.w	#1,d6
00001A18 0D05                       		btst	d6,d5
00001A1A 6700                       		beq.s	loc_17FC
00001A1C 0643 4000                  		addi.w	#$4000,d3
00001A20                            
00001A20                            loc_17FC:
00001A20 D201                       		add.b	d1,d1
00001A22 6400                       		bcc.s	loc_180A
00001A24 5346                       		subq.w	#1,d6
00001A26 0D05                       		btst	d6,d5
00001A28 6700                       		beq.s	loc_180A
00001A2A 0643 2000                  		addi.w	#$2000,d3
00001A2E                            
00001A2E                            loc_180A:
00001A2E D201                       		add.b	d1,d1
00001A30 6400                       		bcc.s	loc_1818
00001A32 5346                       		subq.w	#1,d6
00001A34 0D05                       		btst	d6,d5
00001A36 6700                       		beq.s	loc_1818
00001A38 0043 1000                  		ori.w	#$1000,d3
00001A3C                            
00001A3C                            loc_1818:
00001A3C D201                       		add.b	d1,d1
00001A3E 6400                       		bcc.s	loc_1826
00001A40 5346                       		subq.w	#1,d6
00001A42 0D05                       		btst	d6,d5
00001A44 6700                       		beq.s	loc_1826
00001A46 0043 0800                  		ori.w	#$800,d3
00001A4A                            
00001A4A                            loc_1826:
00001A4A 3205                       		move.w	d5,d1
00001A4C 3E06                       		move.w	d6,d7
00001A4E 9E4D                       		sub.w	a5,d7
00001A50 6400                       		bcc.s	loc_1856
00001A52 3C07                       		move.w	d7,d6
00001A54 0646 0010                  		addi.w	#$10,d6
00001A58 4447                       		neg.w	d7
00001A5A EF69                       		lsl.w	d7,d1
00001A5C 1A10                       		move.b	(a0),d5
00001A5E EF3D                       		rol.b	d7,d5
00001A60 DE47                       		add.w	d7,d7
00001A62 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A66 D245                       		add.w	d5,d1
00001A68                            
00001A68                            loc_1844:				; XREF: loc_1868
00001A68 300D                       		move.w	a5,d0
00001A6A D040                       		add.w	d0,d0
00001A6C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A70 D243                       		add.w	d3,d1
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 E14D                       		lsl.w	#8,d5
00001A76 1A18                       		move.b	(a0)+,d5
00001A78 4E75                       		rts	
00001A7A                            ; ===========================================================================
00001A7A                            
00001A7A                            loc_1856:				; XREF: loc_1826
00001A7A 6700                       		beq.s	loc_1868
00001A7C EE69                       		lsr.w	d7,d1
00001A7E 300D                       		move.w	a5,d0
00001A80 D040                       		add.w	d0,d0
00001A82 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A86 D243                       		add.w	d3,d1
00001A88 300D                       		move.w	a5,d0
00001A8A 6000                       		bra.s	sub_188C
00001A8C                            ; ===========================================================================
00001A8C                            
00001A8C                            loc_1868:				; XREF: loc_1856
00001A8C 7C10                       		moveq	#$10,d6
00001A8E                            
00001A8E                            loc_186A:
00001A8E 60D8                       		bra.s	loc_1844
00001A90                            ; ===========================================================================
00001A90 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA6 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AB0                            
00001AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB0                            
00001AB0                            
00001AB0                            sub_188C:				; XREF: EniDec
00001AB0 9C40                       		sub.w	d0,d6
00001AB2 0C46 0009                  		cmpi.w	#9,d6
00001AB6 6400                       		bcc.s	locret_189A
00001AB8 5046                       		addq.w	#8,d6
00001ABA E145                       		asl.w	#8,d5
00001ABC 1A18                       		move.b	(a0)+,d5
00001ABE                            
00001ABE                            locret_189A:
00001ABE 4E75                       		rts	
00001AC0                            ; End of function sub_188C
00001AC0                            
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            ; Kosinski decompression algorithm
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            
00001AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC0                            
00001AC0                            
00001AC0                            KosDec:
00001AC0                            
00001AC0 =FFFFFFFE                  var_2		= -2
00001AC0 =FFFFFFFF                  var_1		= -1
00001AC0                            
00001AC0 558F                       		subq.l	#2,sp
00001AC2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC6 1E98                       		move.b	(a0)+,(sp)
00001AC8 3A17                       		move.w	(sp),d5
00001ACA 780F                       		moveq	#$F,d4
00001ACC                            
00001ACC                            loc_18A8:
00001ACC E24D                       		lsr.w	#1,d5
00001ACE 40C6                       		move	sr,d6
00001AD0 51CC 0000                  		dbf	d4,loc_18BA
00001AD4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD8 1E98                       		move.b	(a0)+,(sp)
00001ADA 3A17                       		move.w	(sp),d5
00001ADC 780F                       		moveq	#$F,d4
00001ADE                            
00001ADE                            loc_18BA:
00001ADE 44C6                       		move	d6,ccr
00001AE0 6400                       		bcc.s	loc_18C2
00001AE2 12D8                       		move.b	(a0)+,(a1)+
00001AE4 60E6                       		bra.s	loc_18A8
00001AE6                            ; ===========================================================================
00001AE6                            
00001AE6                            loc_18C2:				; XREF: KosDec
00001AE6 7600                       		moveq	#0,d3
00001AE8 E24D                       		lsr.w	#1,d5
00001AEA 40C6                       		move	sr,d6
00001AEC 51CC 0000                  		dbf	d4,loc_18D6
00001AF0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF4 1E98                       		move.b	(a0)+,(sp)
00001AF6 3A17                       		move.w	(sp),d5
00001AF8 780F                       		moveq	#$F,d4
00001AFA                            
00001AFA                            loc_18D6:
00001AFA 44C6                       		move	d6,ccr
00001AFC 6500                       		bcs.s	loc_1906
00001AFE E24D                       		lsr.w	#1,d5
00001B00 51CC 0000                  		dbf	d4,loc_18EA
00001B04 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B08 1E98                       		move.b	(a0)+,(sp)
00001B0A 3A17                       		move.w	(sp),d5
00001B0C 780F                       		moveq	#$F,d4
00001B0E                            
00001B0E                            loc_18EA:
00001B0E E353                       		roxl.w	#1,d3
00001B10 E24D                       		lsr.w	#1,d5
00001B12 51CC 0000                  		dbf	d4,loc_18FC
00001B16 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1A 1E98                       		move.b	(a0)+,(sp)
00001B1C 3A17                       		move.w	(sp),d5
00001B1E 780F                       		moveq	#$F,d4
00001B20                            
00001B20                            loc_18FC:
00001B20 E353                       		roxl.w	#1,d3
00001B22 5243                       		addq.w	#1,d3
00001B24 74FF                       		moveq	#-1,d2
00001B26 1418                       		move.b	(a0)+,d2
00001B28 6000                       		bra.s	loc_191C
00001B2A                            ; ===========================================================================
00001B2A                            
00001B2A                            loc_1906:				; XREF: loc_18C2
00001B2A 1018                       		move.b	(a0)+,d0
00001B2C 1218                       		move.b	(a0)+,d1
00001B2E 74FF                       		moveq	#-1,d2
00001B30 1401                       		move.b	d1,d2
00001B32 EB4A                       		lsl.w	#5,d2
00001B34 1400                       		move.b	d0,d2
00001B36 0241 0007                  		andi.w	#7,d1
00001B3A 6700                       		beq.s	loc_1928
00001B3C 1601                       		move.b	d1,d3
00001B3E 5243                       		addq.w	#1,d3
00001B40                            
00001B40                            loc_191C:
00001B40 1031 2000                  		move.b	(a1,d2.w),d0
00001B44 12C0                       		move.b	d0,(a1)+
00001B46 51CB FFF8                  		dbf	d3,loc_191C
00001B4A 6080                       		bra.s	loc_18A8
00001B4C                            ; ===========================================================================
00001B4C                            
00001B4C                            loc_1928:				; XREF: loc_1906
00001B4C 1218                       		move.b	(a0)+,d1
00001B4E 6700                       		beq.s	loc_1938
00001B50 0C01 0001                  		cmpi.b	#1,d1
00001B54 6700 FF76                  		beq.w	loc_18A8
00001B58 1601                       		move.b	d1,d3
00001B5A 60E4                       		bra.s	loc_191C
00001B5C                            ; ===========================================================================
00001B5C                            
00001B5C                            loc_1938:				; XREF: loc_1928
00001B5C 548F                       		addq.l	#2,sp
00001B5E 4E75                       		rts	
00001B60                            ; End of function KosDec
00001B60                            
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            ; Pallet cycling routine loading subroutine
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            
00001B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B60                            
00001B60                            
00001B60                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B60 7400                       		moveq	#0,d2
00001B62 7000                       		moveq	#0,d0
00001B64 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B68 D040                       		add.w	d0,d0		; multiply by 2
00001B6A 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6E 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B72                            ; End of function PalCycle_Load
00001B72                            
00001B72                            ; ===========================================================================
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            ; Pallet cycling routines
00001B72                            ; ---------------------------------------------------------------------------
00001B72 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B74 0000                       		dc.w PalCycle_LZ-PalCycle
00001B76 0000                       		dc.w PalCycle_MZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B7C 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7E 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B80                            
00001B80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B80                            
00001B80                            
00001B80                            PalCycle_Title:				; XREF: TitleScreen
00001B80 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B86 6000                       		bra.s	loc_196A
00001B88                            ; ===========================================================================
00001B88                            
00001B88                            PalCycle_GHZ:				; XREF: PalCycle
00001B88 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8E                            
00001B8E                            loc_196A:				; XREF: PalCycle_Title
00001B8E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B92 6A00                       		bpl.s	locret_1990
00001B94 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B9A 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9E 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BA2 0240 0003                  		andi.w	#3,d0
00001BA6 E748                       		lsl.w	#3,d0
00001BA8 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BAC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BB0 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB4                            
00001BB4                            locret_1990:
00001BB4 4E75                       		rts	
00001BB6                            ; End of function PalCycle_Title
00001BB6                            
00001BB6                            
00001BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB6                            
00001BB6                            
00001BB6                            PalCycle_LZ:				; XREF: PalCycle
00001BB6 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BBA 6A00                       		bpl.s	loc_19D8
00001BBC 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BC2 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC6 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BCA 0240 0003                  		andi.w	#3,d0
00001BCE E748                       		lsl.w	#3,d0
00001BD0 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BDC 6600                       		bne.s	loc_19C0
00001BDE 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE4                            
00001BE4                            loc_19C0:
00001BE4 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BEC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF0 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BFC                            
00001BFC                            loc_19D8:
00001BFC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C00 0240 0007                  		andi.w	#7,d0
00001C04 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C08 6700                       		beq.s	locret_1A3A
00001C0A 7201                       		moveq	#1,d1
00001C0C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C10 6700                       		beq.s	loc_19F0
00001C12 4441                       		neg.w	d1
00001C14                            
00001C14                            loc_19F0:
00001C14 3038 F650                  		move.w	($FFFFF650).w,d0
00001C18 0240 0003                  		andi.w	#3,d0
00001C1C D041                       		add.w	d1,d0
00001C1E 0C40 0003                  		cmpi.w	#3,d0
00001C22 6500                       		bcs.s	loc_1A0A
00001C24 3200                       		move.w	d0,d1
00001C26 7000                       		moveq	#0,d0
00001C28 4A41                       		tst.w	d1
00001C2A 6A00                       		bpl.s	loc_1A0A
00001C2C 7002                       		moveq	#2,d0
00001C2E                            
00001C2E                            loc_1A0A:
00001C2E 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C32 D040                       		add.w	d0,d0
00001C34 3200                       		move.w	d0,d1
00001C36 D040                       		add.w	d0,d0
00001C38 D041                       		add.w	d1,d0
00001C3A 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C40 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C44 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C48 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C4C 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C52 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C5A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5E                            
00001C5E                            locret_1A3A:
00001C5E 4E75                       		rts	
00001C60                            ; End of function PalCycle_LZ
00001C60                            
00001C60                            ; ===========================================================================
00001C60 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C68                            ; ===========================================================================
00001C68                            
00001C68                            PalCycle_MZ:				; XREF: PalCycle
00001C68 4E75                       		rts	
00001C6A                            
00001C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6A                            
00001C6A                            
00001C6A                            PalCycle_SLZ:				; XREF: PalCycle
00001C6A 4E75                       		rts	
00001C6C                            ; End of function PalCycle_SLZ
00001C6C                            
00001C6C                            
00001C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6C                            
00001C6C                            
00001C6C                            PalCycle_SYZ:				; XREF: PalCycle
00001C6C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C70 6A00                       		bpl.s	locret_1AC6
00001C72 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C78 3038 F632                  		move.w	($FFFFF632).w,d0
00001C7C 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C80 0240 0003                  		andi.w	#3,d0
00001C84 E548                       		lsl.w	#2,d0
00001C86 3200                       		move.w	d0,d1
00001C88 D040                       		add.w	d0,d0
00001C8A 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C90 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C94 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C98 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C9C 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CA2 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CA6 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CAA 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CB0                            
00001CB0                            locret_1AC6:
00001CB0 4E75                       		rts	
00001CB2                            ; End of function PalCycle_SYZ
00001CB2                            
00001CB2                            
00001CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CB2                            
00001CB2                            
00001CB2                            PalCycle_SBZ:				; XREF: PalCycle
00001CB2 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CB8 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CBC 6700                       		beq.s	loc_1ADA
00001CBE 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CC4                            
00001CC4                            loc_1ADA:
00001CC4 43F8 F650                  		lea	($FFFFF650).w,a1
00001CC8 321A                       		move.w	(a2)+,d1
00001CCA                            
00001CCA                            loc_1AE0:
00001CCA 5311                       		subq.b	#1,(a1)
00001CCC 6B00                       		bmi.s	loc_1AEA
00001CCE 5489                       		addq.l	#2,a1
00001CD0 5C8A                       		addq.l	#6,a2
00001CD2 6000                       		bra.s	loc_1B06
00001CD4                            ; ===========================================================================
00001CD4                            
00001CD4                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CD4 12DA                       		move.b	(a2)+,(a1)+
00001CD6 1011                       		move.b	(a1),d0
00001CD8 5200                       		addq.b	#1,d0
00001CDA B01A                       		cmp.b	(a2)+,d0
00001CDC 6500                       		bcs.s	loc_1AF6
00001CDE 7000                       		moveq	#0,d0
00001CE0                            
00001CE0                            loc_1AF6:
00001CE0 12C0                       		move.b	d0,(a1)+
00001CE2 0240 000F                  		andi.w	#$F,d0
00001CE6 D040                       		add.w	d0,d0
00001CE8 305A                       		movea.w	(a2)+,a0
00001CEA 365A                       		movea.w	(a2)+,a3
00001CEC 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CF0                            
00001CF0                            loc_1B06:				; XREF: PalCycle_SBZ
00001CF0 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CF4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CF8 6A00                       		bpl.s	locret_1B64
00001CFA 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D00 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D06 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D0A 6700                       		beq.s	loc_1B2E
00001D0C 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D12 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D18                            
00001D18                            loc_1B2E:
00001D18 72FF                       		moveq	#-1,d1
00001D1A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D1E 6700                       		beq.s	loc_1B38
00001D20 4441                       		neg.w	d1
00001D22                            
00001D22                            loc_1B38:
00001D22 3038 F632                  		move.w	($FFFFF632).w,d0
00001D26 0240 0003                  		andi.w	#3,d0
00001D2A D041                       		add.w	d1,d0
00001D2C 0C40 0003                  		cmpi.w	#3,d0
00001D30 6500                       		bcs.s	loc_1B52
00001D32 3200                       		move.w	d0,d1
00001D34 7000                       		moveq	#0,d0
00001D36 4A41                       		tst.w	d1
00001D38 6A00                       		bpl.s	loc_1B52
00001D3A 7002                       		moveq	#2,d0
00001D3C                            
00001D3C                            loc_1B52:
00001D3C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D40 D040                       		add.w	d0,d0
00001D42 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D46 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D4A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D4E                            
00001D4E                            locret_1B64:
00001D4E 4E75                       		rts	
00001D50                            ; End of function PalCycle_SBZ
00001D50                            
00001D50                            ; ===========================================================================
00001D50                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D70                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D90                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DB0                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DC2                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DD4                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E3C                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E60                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E80                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E90                            
00001E90                            Pal_SBZCycList:
00001E90                            	include "_inc\SBZ pallet script 1.asm"
00001E90                            ; ---------------------------------------------------------------------------
00001E90                            ; Scrap Brain Zone 1 pallet cycling script
00001E90                            ; ---------------------------------------------------------------------------
00001E90 0008                       	dc.w 8			; number of entries - 1
00001E92 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E94 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E96 FB50                       	dc.w $FB50		; RAM address
00001E98 0D08                       	dc.b $D, 8
00001E9A 0000                       	dc.w Pal_SBZCyc2
00001E9C FB52                       	dc.w $FB52
00001E9E 0E08                       	dc.b $E, 8
00001EA0 0000                       	dc.w Pal_SBZCyc3
00001EA2 FB6E                       	dc.w $FB6E
00001EA4 0B08                       	dc.b $B, 8
00001EA6 0000                       	dc.w Pal_SBZCyc5
00001EA8 FB70                       	dc.w $FB70
00001EAA 0708                       	dc.b 7,	8
00001EAC 0000                       	dc.w Pal_SBZCyc6
00001EAE FB72                       	dc.w $FB72
00001EB0 1C10                       	dc.b $1C, $10
00001EB2 0000                       	dc.w Pal_SBZCyc7
00001EB4 FB7E                       	dc.w $FB7E
00001EB6 0303                       	dc.b 3,	3
00001EB8 0000                       	dc.w Pal_SBZCyc8
00001EBA FB78                       	dc.w $FB78
00001EBC 0303                       	dc.b 3,	3
00001EBE 0000                       	dc.w Pal_SBZCyc8+2
00001EC0 FB7A                       	dc.w $FB7A
00001EC2 0303                       	dc.b 3,	3
00001EC4 0000                       	dc.w Pal_SBZCyc8+4
00001EC6 FB7C                       	dc.w $FB7C
00001EC8                            	even
00001EC8                            	even
00001EC8                            
00001EC8                            Pal_SBZCycList2:
00001EC8                            	include "_inc\SBZ pallet script 2.asm"
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8                            ; Scrap Brain Zone 2 pallet cycling script
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8 0006                       	dc.w 6
00001ECA 0708                       	dc.b 7,	8
00001ECC 0000                       	dc.w Pal_SBZCyc1
00001ECE FB50                       	dc.w $FB50
00001ED0 0D08                       	dc.b $D, 8
00001ED2 0000                       	dc.w Pal_SBZCyc2
00001ED4 FB52                       	dc.w $FB52
00001ED6 0908                       	dc.b 9,	8
00001ED8 0000                       	dc.w Pal_SBZCyc9
00001EDA FB70                       	dc.w $FB70
00001EDC 0708                       	dc.b 7,	8
00001EDE 0000                       	dc.w Pal_SBZCyc6
00001EE0 FB72                       	dc.w $FB72
00001EE2 0303                       	dc.b 3,	3
00001EE4 0000                       	dc.w Pal_SBZCyc8
00001EE6 FB78                       	dc.w $FB78
00001EE8 0303                       	dc.b 3,	3
00001EEA 0000                       	dc.w Pal_SBZCyc8+2
00001EEC FB7A                       	dc.w $FB7A
00001EEE 0303                       	dc.b 3,	3
00001EF0 0000                       	dc.w Pal_SBZCyc8+4
00001EF2 FB7C                       	dc.w $FB7C
00001EF4                            	even
00001EF4                            	even
00001EF4                            
00001EF4                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F04                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F14                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F24                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F30                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F40                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F50                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F70                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F7A                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F8A                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            ; Subroutine to	fade out and fade in
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            
00001F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F96                            
00001F96                            
00001F96                            Pal_FadeTo:
00001F96 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F9C                            
00001F9C                            Pal_FadeTo2:
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 7200                       		moveq	#0,d1
00001FAA 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAE                            
00001FAE                            Pal_ToBlack:
00001FAE 30C1                       		move.w	d1,(a0)+
00001FB0 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FB4                            
00001FB4 383C 0015                  		move.w	#$15,d4
00001FB8                            
00001FB8                            loc_1DCE:
00001FB8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FBE 6100 0000                  		bsr.w	DelayProgram
00001FC2 6100                       		bsr.s	Pal_FadeIn
00001FC4 6100 F84A                  		bsr.w	RunPLC_RAM
00001FC8 51CC FFEE                  		dbf	d4,loc_1DCE
00001FCC 4E75                       		rts	
00001FCE                            ; End of function Pal_FadeTo
00001FCE                            
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            ; Pallet fade-in subroutine
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            
00001FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCE                            
00001FCE                            
00001FCE                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FCE 7000                       		moveq	#0,d0
00001FD0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE D2C0                       		adda.w	d0,a1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            loc_1DFA:
00001FE4 6100                       		bsr.s	Pal_AddColor
00001FE6 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FEA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FF0 6600                       		bne.s	locret_1E24
00001FF2 7000                       		moveq	#0,d0
00001FF4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FF8 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FFC 1038 F626                  		move.b	($FFFFF626).w,d0
00002000 D0C0                       		adda.w	d0,a0
00002002 D2C0                       		adda.w	d0,a1
00002004 1038 F627                  		move.b	($FFFFF627).w,d0
00002008                            
00002008                            loc_1E1E:
00002008 6100                       		bsr.s	Pal_AddColor
0000200A 51C8 FFFC                  		dbf	d0,loc_1E1E
0000200E                            
0000200E                            locret_1E24:
0000200E 4E75                       		rts	
00002010                            ; End of function Pal_FadeIn
00002010                            
00002010                            
00002010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002010                            
00002010                            
00002010                            Pal_AddColor:				; XREF: Pal_FadeIn
00002010 3419                       		move.w	(a1)+,d2
00002012 3610                       		move.w	(a0),d3
00002014 B642                       		cmp.w	d2,d3
00002016 6700                       		beq.s	loc_1E4E
00002018 3203                       		move.w	d3,d1
0000201A 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000201E B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002020 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002022 30C1                       		move.w	d1,(a0)+	; update pallet
00002024 4E75                       		rts	
00002026                            ; ===========================================================================
00002026                            
00002026                            Pal_AddGreen:				; XREF: Pal_AddColor
00002026 3203                       		move.w	d3,d1
00002028 0641 0020                  		addi.w	#$20,d1		; increase green value
0000202C B242                       		cmp.w	d2,d1
0000202E 6200                       		bhi.s	Pal_AddRed
00002030 30C1                       		move.w	d1,(a0)+	; update pallet
00002032 4E75                       		rts	
00002034                            ; ===========================================================================
00002034                            
00002034                            Pal_AddRed:				; XREF: Pal_AddGreen
00002034 5458                       		addq.w	#2,(a0)+	; increase red value
00002036 4E75                       		rts	
00002038                            ; ===========================================================================
00002038                            
00002038                            loc_1E4E:				; XREF: Pal_AddColor
00002038 5448                       		addq.w	#2,a0
0000203A 4E75                       		rts	
0000203C                            ; End of function Pal_AddColor
0000203C                            
0000203C                            
0000203C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203C                            
0000203C                            
0000203C                            Pal_FadeFrom:
0000203C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002042 383C 0015                  		move.w	#$15,d4
00002046                            
00002046                            loc_1E5C:
00002046 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000204C 6100 0000                  		bsr.w	DelayProgram
00002050 6100                       		bsr.s	Pal_FadeOut
00002052 6100 F7BC                  		bsr.w	RunPLC_RAM
00002056 51CC FFEE                  		dbf	d4,loc_1E5C
0000205A 4E75                       		rts	
0000205C                            ; End of function Pal_FadeFrom
0000205C                            
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            ; Pallet fade-out subroutine
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            
0000205C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000205C                            
0000205C                            
0000205C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000205C 7000                       		moveq	#0,d0
0000205E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002062 1038 F626                  		move.b	($FFFFF626).w,d0
00002066 D0C0                       		adda.w	d0,a0
00002068 1038 F627                  		move.b	($FFFFF627).w,d0
0000206C                            
0000206C                            loc_1E82:
0000206C 6100                       		bsr.s	Pal_DecColor
0000206E 51C8 FFFC                  		dbf	d0,loc_1E82
00002072                            
00002072 7000                       		moveq	#0,d0
00002074 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002078 1038 F626                  		move.b	($FFFFF626).w,d0
0000207C D0C0                       		adda.w	d0,a0
0000207E 1038 F627                  		move.b	($FFFFF627).w,d0
00002082                            
00002082                            loc_1E98:
00002082 6100                       		bsr.s	Pal_DecColor
00002084 51C8 FFFC                  		dbf	d0,loc_1E98
00002088 4E75                       		rts	
0000208A                            ; End of function Pal_FadeOut
0000208A                            
0000208A                            
0000208A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000208A                            
0000208A                            
0000208A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000208A 3410                       		move.w	(a0),d2
0000208C 6700                       		beq.s	loc_1ECC
0000208E 3202                       		move.w	d2,d1
00002090 0241 000E                  		andi.w	#$E,d1
00002094 6700                       		beq.s	Pal_DecGreen
00002096 5558                       		subq.w	#2,(a0)+	; decrease red value
00002098 4E75                       		rts	
0000209A                            ; ===========================================================================
0000209A                            
0000209A                            Pal_DecGreen:				; XREF: Pal_DecColor
0000209A 3202                       		move.w	d2,d1
0000209C 0241 00E0                  		andi.w	#$E0,d1
000020A0 6700                       		beq.s	Pal_DecBlue
000020A2 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020A6 4E75                       		rts	
000020A8                            ; ===========================================================================
000020A8                            
000020A8                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020A8 3202                       		move.w	d2,d1
000020AA 0241 0E00                  		andi.w	#$E00,d1
000020AE 6700                       		beq.s	loc_1ECC
000020B0 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020B4 4E75                       		rts	
000020B6                            ; ===========================================================================
000020B6                            
000020B6                            loc_1ECC:				; XREF: Pal_DecColor
000020B6 5448                       		addq.w	#2,a0
000020B8 4E75                       		rts	
000020BA                            ; End of function Pal_DecColor
000020BA                            
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            ; Subroutine to	fill the pallet	with white (special stage)
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            
000020BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020BA                            
000020BA                            
000020BA                            Pal_MakeWhite:				; XREF: SpecialStage
000020BA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020C0 7000                       		moveq	#0,d0
000020C2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020C6 1038 F626                  		move.b	($FFFFF626).w,d0
000020CA D0C0                       		adda.w	d0,a0
000020CC 323C 0EEE                  		move.w	#$EEE,d1
000020D0 1038 F627                  		move.b	($FFFFF627).w,d0
000020D4                            
000020D4                            PalWhite_Loop:
000020D4 30C1                       		move.w	d1,(a0)+
000020D6 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020DA 383C 0015                  		move.w	#$15,d4
000020DE                            
000020DE                            loc_1EF4:
000020DE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020E4 6100 0000                  		bsr.w	DelayProgram
000020E8 6100                       		bsr.s	Pal_WhiteToBlack
000020EA 6100 F724                  		bsr.w	RunPLC_RAM
000020EE 51CC FFEE                  		dbf	d4,loc_1EF4
000020F2 4E75                       		rts	
000020F4                            ; End of function Pal_MakeWhite
000020F4                            
000020F4                            
000020F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F4                            
000020F4                            
000020F4                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020F4 7000                       		moveq	#0,d0
000020F6 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020FE 1038 F626                  		move.b	($FFFFF626).w,d0
00002102 D0C0                       		adda.w	d0,a0
00002104 D2C0                       		adda.w	d0,a1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            loc_1F20:
0000210A 6100                       		bsr.s	Pal_DecColor2
0000210C 51C8 FFFC                  		dbf	d0,loc_1F20
00002110                            
00002110 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002116 6600                       		bne.s	locret_1F4A
00002118 7000                       		moveq	#0,d0
0000211A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000211E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002122 1038 F626                  		move.b	($FFFFF626).w,d0
00002126 D0C0                       		adda.w	d0,a0
00002128 D2C0                       		adda.w	d0,a1
0000212A 1038 F627                  		move.b	($FFFFF627).w,d0
0000212E                            
0000212E                            loc_1F44:
0000212E 6100                       		bsr.s	Pal_DecColor2
00002130 51C8 FFFC                  		dbf	d0,loc_1F44
00002134                            
00002134                            locret_1F4A:
00002134 4E75                       		rts	
00002136                            ; End of function Pal_WhiteToBlack
00002136                            
00002136                            
00002136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002136                            
00002136                            
00002136                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002136 3419                       		move.w	(a1)+,d2
00002138 3610                       		move.w	(a0),d3
0000213A B642                       		cmp.w	d2,d3
0000213C 6700                       		beq.s	loc_1F78
0000213E 3203                       		move.w	d3,d1
00002140 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002144 6500                       		bcs.s	loc_1F64
00002146 B242                       		cmp.w	d2,d1
00002148 6500                       		bcs.s	loc_1F64
0000214A 30C1                       		move.w	d1,(a0)+
0000214C 4E75                       		rts	
0000214E                            ; ===========================================================================
0000214E                            
0000214E                            loc_1F64:				; XREF: Pal_DecColor2
0000214E 3203                       		move.w	d3,d1
00002150 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002154 6500                       		bcs.s	loc_1F74
00002156 B242                       		cmp.w	d2,d1
00002158 6500                       		bcs.s	loc_1F74
0000215A 30C1                       		move.w	d1,(a0)+
0000215C 4E75                       		rts	
0000215E                            ; ===========================================================================
0000215E                            
0000215E                            loc_1F74:				; XREF: loc_1F64
0000215E 5558                       		subq.w	#2,(a0)+	; decrease red value
00002160 4E75                       		rts	
00002162                            ; ===========================================================================
00002162                            
00002162                            loc_1F78:				; XREF: Pal_DecColor2
00002162 5448                       		addq.w	#2,a0
00002164 4E75                       		rts	
00002166                            ; End of function Pal_DecColor2
00002166                            
00002166                            ; ---------------------------------------------------------------------------
00002166                            ; Subroutine to	make a white flash when	you enter a special stage
00002166                            ; ---------------------------------------------------------------------------
00002166                            
00002166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002166                            
00002166                            
00002166                            Pal_MakeFlash:				; XREF: SpecialStage
00002166 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000216C 383C 0015                  		move.w	#$15,d4
00002170                            
00002170                            loc_1F86:
00002170 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002176 6100 0000                  		bsr.w	DelayProgram
0000217A 6100                       		bsr.s	Pal_ToWhite
0000217C 6100 F692                  		bsr.w	RunPLC_RAM
00002180 51CC FFEE                  		dbf	d4,loc_1F86
00002184 4E75                       		rts	
00002186                            ; End of function Pal_MakeFlash
00002186                            
00002186                            
00002186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002186                            
00002186                            
00002186                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002186 7000                       		moveq	#0,d0
00002188 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000218C 1038 F626                  		move.b	($FFFFF626).w,d0
00002190 D0C0                       		adda.w	d0,a0
00002192 1038 F627                  		move.b	($FFFFF627).w,d0
00002196                            
00002196                            loc_1FAC:
00002196 6100                       		bsr.s	Pal_AddColor2
00002198 51C8 FFFC                  		dbf	d0,loc_1FAC
0000219C 7000                       		moveq	#0,d0
0000219E 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021A2 1038 F626                  		move.b	($FFFFF626).w,d0
000021A6 D0C0                       		adda.w	d0,a0
000021A8 1038 F627                  		move.b	($FFFFF627).w,d0
000021AC                            
000021AC                            loc_1FC2:
000021AC 6100                       		bsr.s	Pal_AddColor2
000021AE 51C8 FFFC                  		dbf	d0,loc_1FC2
000021B2 4E75                       		rts	
000021B4                            ; End of function Pal_ToWhite
000021B4                            
000021B4                            
000021B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021B4                            
000021B4                            
000021B4                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021B4 3410                       		move.w	(a0),d2
000021B6 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021BA 6700                       		beq.s	loc_2006
000021BC 3202                       		move.w	d2,d1
000021BE 0241 000E                  		andi.w	#$E,d1
000021C2 0C41 000E                  		cmpi.w	#$E,d1
000021C6 6700                       		beq.s	loc_1FE2
000021C8 5458                       		addq.w	#2,(a0)+	; increase red value
000021CA 4E75                       		rts	
000021CC                            ; ===========================================================================
000021CC                            
000021CC                            loc_1FE2:				; XREF: Pal_AddColor2
000021CC 3202                       		move.w	d2,d1
000021CE 0241 00E0                  		andi.w	#$E0,d1
000021D2 0C41 00E0                  		cmpi.w	#$E0,d1
000021D6 6700                       		beq.s	loc_1FF4
000021D8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021DC 4E75                       		rts	
000021DE                            ; ===========================================================================
000021DE                            
000021DE                            loc_1FF4:				; XREF: loc_1FE2
000021DE 3202                       		move.w	d2,d1
000021E0 0241 0E00                  		andi.w	#$E00,d1
000021E4 0C41 0E00                  		cmpi.w	#$E00,d1
000021E8 6700                       		beq.s	loc_2006
000021EA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021EE 4E75                       		rts	
000021F0                            ; ===========================================================================
000021F0                            
000021F0                            loc_2006:				; XREF: Pal_AddColor2
000021F0 5448                       		addq.w	#2,a0
000021F2 4E75                       		rts	
000021F4                            ; End of function Pal_AddColor2
000021F4                            
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            ; Pallet cycling routine - Sega	logo
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            
000021F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021F4                            
000021F4                            
000021F4                            PalCycle_Sega:				; XREF: SegaScreen
000021F4 4A38 F635                  		tst.b	($FFFFF635).w
000021F8 6600                       		bne.s	loc_206A
000021FA 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021FE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002204 7205                       		moveq	#5,d1
00002206 3038 F632                  		move.w	($FFFFF632).w,d0
0000220A                            
0000220A                            loc_2020:
0000220A 6A00                       		bpl.s	loc_202A
0000220C 5448                       		addq.w	#2,a0
0000220E 5341                       		subq.w	#1,d1
00002210 5440                       		addq.w	#2,d0
00002212 60F6                       		bra.s	loc_2020
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_202A:				; XREF: PalCycle_Sega
00002214 3400                       		move.w	d0,d2
00002216 0242 001E                  		andi.w	#$1E,d2
0000221A 6600                       		bne.s	loc_2034
0000221C 5440                       		addq.w	#2,d0
0000221E                            
0000221E                            loc_2034:
0000221E 0C40 0060                  		cmpi.w	#$60,d0
00002222 6400                       		bcc.s	loc_203E
00002224 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002228                            
00002228                            loc_203E:
00002228 5440                       		addq.w	#2,d0
0000222A 51C9 FFE8                  		dbf	d1,loc_202A
0000222E 3038 F632                  		move.w	($FFFFF632).w,d0
00002232 5440                       		addq.w	#2,d0
00002234 3400                       		move.w	d0,d2
00002236 0242 001E                  		andi.w	#$1E,d2
0000223A 6600                       		bne.s	loc_2054
0000223C 5440                       		addq.w	#2,d0
0000223E                            
0000223E                            loc_2054:
0000223E 0C40 0064                  		cmpi.w	#$64,d0
00002242 6D00                       		blt.s	loc_2062
00002244 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000224A 70F4                       		moveq	#-$C,d0
0000224C                            
0000224C                            loc_2062:
0000224C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002250 7001                       		moveq	#1,d0
00002252 4E75                       		rts	
00002254                            ; ===========================================================================
00002254                            
00002254                            loc_206A:				; XREF: loc_202A
00002254 5338 F634                  		subq.b	#1,($FFFFF634).w
00002258 6A00                       		bpl.s	loc_20BC
0000225A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002260 3038 F632                  		move.w	($FFFFF632).w,d0
00002264 0640 000C                  		addi.w	#$C,d0
00002268 0C40 0030                  		cmpi.w	#$30,d0
0000226C 6500                       		bcs.s	loc_2088
0000226E 7000                       		moveq	#0,d0
00002270 4E75                       		rts	
00002272                            ; ===========================================================================
00002272                            
00002272                            loc_2088:				; XREF: loc_206A
00002272 31C0 F632                  		move.w	d0,($FFFFF632).w
00002276 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000227C 41F0 0000                  		lea	(a0,d0.w),a0
00002280 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002284 22D8                       		move.l	(a0)+,(a1)+
00002286 22D8                       		move.l	(a0)+,(a1)+
00002288 3298                       		move.w	(a0)+,(a1)
0000228A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000228E 7000                       		moveq	#0,d0
00002290 722C                       		moveq	#$2C,d1
00002292                            
00002292                            loc_20A8:
00002292 3400                       		move.w	d0,d2
00002294 0242 001E                  		andi.w	#$1E,d2
00002298 6600                       		bne.s	loc_20B2
0000229A 5440                       		addq.w	#2,d0
0000229C                            
0000229C                            loc_20B2:
0000229C 3390 0000                  		move.w	(a0),(a1,d0.w)
000022A0 5440                       		addq.w	#2,d0
000022A2 51C9 FFEE                  		dbf	d1,loc_20A8
000022A6                            
000022A6                            loc_20BC:
000022A6 7001                       		moveq	#1,d0
000022A8 4E75                       		rts	
000022AA                            ; End of function PalCycle_Sega
000022AA                            
000022AA                            ; ===========================================================================
000022AA                            
000022AA                            Pal_Sega1:	incbin	pallet\sega1.bin
000022B6                            Pal_Sega2:	incbin	pallet\sega2.bin
000022E6                            
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            ; Subroutines to load pallets
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            
000022E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E6                            
000022E6                            
000022E6                            PalLoad1:
000022E6 43F9 0000 0000             		lea	(PalPointers).l,a1
000022EC E748                       		lsl.w	#3,d0
000022EE D2C0                       		adda.w	d0,a1
000022F0 2459                       		movea.l	(a1)+,a2
000022F2 3659                       		movea.w	(a1)+,a3
000022F4 D6FC 0080                  		adda.w	#$80,a3
000022F8 3E19                       		move.w	(a1)+,d7
000022FA                            
000022FA                            loc_2110:
000022FA 26DA                       		move.l	(a2)+,(a3)+
000022FC 51CF FFFC                  		dbf	d7,loc_2110
00002300 4E75                       		rts	
00002302                            ; End of function PalLoad1
00002302                            
00002302                            
00002302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002302                            
00002302                            
00002302                            PalLoad2:
00002302 43F9 0000 0000             		lea	(PalPointers).l,a1
00002308 E748                       		lsl.w	#3,d0
0000230A D2C0                       		adda.w	d0,a1
0000230C 2459                       		movea.l	(a1)+,a2
0000230E 3659                       		movea.w	(a1)+,a3
00002310 3E19                       		move.w	(a1)+,d7
00002312                            
00002312                            loc_2128:
00002312 26DA                       		move.l	(a2)+,(a3)+
00002314 51CF FFFC                  		dbf	d7,loc_2128
00002318 4E75                       		rts	
0000231A                            ; End of function PalLoad2
0000231A                            
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            ; Underwater pallet loading subroutine
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            
0000231A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231A                            
0000231A                            
0000231A                            PalLoad3_Water:
0000231A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002320 E748                       		lsl.w	#3,d0
00002322 D2C0                       		adda.w	d0,a1
00002324 2459                       		movea.l	(a1)+,a2
00002326 3659                       		movea.w	(a1)+,a3
00002328 96FC 0080                  		suba.w	#$80,a3
0000232C 3E19                       		move.w	(a1)+,d7
0000232E                            
0000232E                            loc_2144:
0000232E 26DA                       		move.l	(a2)+,(a3)+
00002330 51CF FFFC                  		dbf	d7,loc_2144
00002334 4E75                       		rts	
00002336                            ; End of function PalLoad3_Water
00002336                            
00002336                            
00002336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002336                            
00002336                            
00002336                            PalLoad4_Water:
00002336 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233C E748                       		lsl.w	#3,d0
0000233E D2C0                       		adda.w	d0,a1
00002340 2459                       		movea.l	(a1)+,a2
00002342 3659                       		movea.w	(a1)+,a3
00002344 96FC 0100                  		suba.w	#$100,a3
00002348 3E19                       		move.w	(a1)+,d7
0000234A                            
0000234A                            loc_2160:
0000234A 26DA                       		move.l	(a2)+,(a3)+
0000234C 51CF FFFC                  		dbf	d7,loc_2160
00002350 4E75                       		rts	
00002352                            ; End of function PalLoad4_Water
00002352                            
00002352                            ; ===========================================================================
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352                            PalPointers:
00002352                            	include "_inc\Pallet pointers.asm"
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002356 FB00                       	dc.w $FB00		; RAM address
00002358 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000235A 0000 0000                  	dc.l Pal_Title
0000235E FB00                       	dc.w $FB00
00002360 001F                       	dc.w $1F
00002362 0000 0000                  	dc.l Pal_LevelSel
00002366 FB00                       	dc.w $FB00
00002368 001F                       	dc.w $1F
0000236A 0000 0000                  	dc.l Pal_Sonic
0000236E FB00                       	dc.w $FB00
00002370 0007                       	dc.w 7
00002372 0000 0000                  	dc.l Pal_GHZ
00002376 FB20                       	dc.w $FB20
00002378 0017                       	dc.w $17
0000237A 0000 0000                  	dc.l Pal_LZ
0000237E FB20                       	dc.w $FB20
00002380 0017                       	dc.w $17
00002382 0000 0000                  	dc.l Pal_MZ
00002386 FB20                       	dc.w $FB20
00002388 0017                       	dc.w $17
0000238A 0000 0000                  	dc.l Pal_SLZ
0000238E FB20                       	dc.w $FB20
00002390 0017                       	dc.w $17
00002392 0000 0000                  	dc.l Pal_SYZ
00002396 FB20                       	dc.w $FB20
00002398 0017                       	dc.w $17
0000239A 0000 0000                  	dc.l Pal_SBZ1
0000239E FB20                       	dc.w $FB20
000023A0 0017                       	dc.w $17
000023A2 0000 0000                  	dc.l Pal_Special
000023A6 FB00                       	dc.w $FB00
000023A8 001F                       	dc.w $1F
000023AA 0000 0000                  	dc.l Pal_LZWater
000023AE FB00                       	dc.w $FB00
000023B0 001F                       	dc.w $1F
000023B2 0000 0000                  	dc.l Pal_SBZ3
000023B6 FB20                       	dc.w $FB20
000023B8 0017                       	dc.w $17
000023BA 0000 0000                  	dc.l Pal_SBZ3Water
000023BE FB00                       	dc.w $FB00
000023C0 001F                       	dc.w $1F
000023C2 0000 0000                  	dc.l Pal_SBZ2
000023C6 FB20                       	dc.w $FB20
000023C8 0017                       	dc.w $17
000023CA 0000 0000                  	dc.l Pal_LZSonWater
000023CE FB00                       	dc.w $FB00
000023D0 0007                       	dc.w 7
000023D2 0000 0000                  	dc.l Pal_SBZ3SonWat
000023D6 FB00                       	dc.w $FB00
000023D8 0007                       	dc.w 7
000023DA 0000 0000                  	dc.l Pal_SpeResult
000023DE FB00                       	dc.w $FB00
000023E0 001F                       	dc.w $1F
000023E2 0000 0000                  	dc.l Pal_SpeContinue
000023E6 FB00                       	dc.w $FB00
000023E8 000F                       	dc.w $F
000023EA 0000 0000                  	dc.l Pal_Ending
000023EE FB00                       	dc.w $FB00
000023F0 001F                       	dc.w $1F
000023F2 0000 0000                  	dc.l Pal_Idiot
000023F6 FB20                       	dc.w $FB20
000023F8 0007                       	dc.w 7
000023FA 0000 0000                  	dc.l Pal_Gronic
000023FE FB00                       	dc.w $FB00
00002400 0007                       	dc.w 7
00002402 0000 0000                  	dc.l Pal_LZGroWater
00002406 FB00                       	dc.w $FB00
00002408 0007                       	dc.w 7
0000240A 0000 0000                  	dc.l Pal_SBZ3GroWat
0000240E FB00                       	dc.w $FB00
00002410 0007                       	dc.w 7
00002412 0000 0000                  	dc.l Pal_Anakama
00002416 FB00                       	dc.w $FB00
00002418 0007                       	dc.w 7
00002418 0007                       	dc.w 7
0000241A                            
0000241A                            ; ---------------------------------------------------------------------------
0000241A                            ; Pallet data
0000241A                            ; ---------------------------------------------------------------------------
0000241A                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
0000249A                            Pal_Title:	incbin	pallet\title.bin
0000251A                            Pal_LevelSel:	incbin	pallet\levelsel.bin
0000259A                            Pal_Sonic:	incbin	pallet\sonic.bin
000025BA                            Pal_GHZ:	incbin	pallet\ghz.bin
0000261A                            Pal_LZ:		incbin	pallet\lz.bin
0000267A                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000026FA                            Pal_MZ:		incbin	pallet\mz.bin
0000275A                            Pal_SLZ:	incbin	pallet\slz.bin
000027BA                            Pal_SYZ:	incbin	pallet\syz.bin
0000281A                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
0000287A                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028DA                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000295A                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029BA                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A3A                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A5A                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A7A                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002AFA                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B3A                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BBA                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BDA                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002BFA                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C1A                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C3A                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002CBA                            
00002CBA                            ; ---------------------------------------------------------------------------
00002CBA                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002CBA                            ; ---------------------------------------------------------------------------
00002CBA                            
00002CBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CBA                            
00002CBA                            
00002CBA                            DelayProgram:				; XREF: PauseGame
00002CBA 46FC 2300                  		move	#$2300,sr
00002CBE                            
00002CBE                            loc_29AC:
00002CBE 4A38 F62A                  		tst.b	($FFFFF62A).w
00002CC2 66FA                       		bne.s	loc_29AC
00002CC4 4E75                       		rts	
00002CC6                            ; End of function DelayProgram
00002CC6                            
00002CC6                            ; ---------------------------------------------------------------------------
00002CC6                            ; Subroutine to	generate a pseudo-random number	in d0
00002CC6                            ; ---------------------------------------------------------------------------
00002CC6                            
00002CC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CC6                            
00002CC6                            
00002CC6                            RandomNumber:
00002CC6 2238 F636                  		move.l	($FFFFF636).w,d1
00002CCA 6600                       		bne.s	loc_29C0
00002CCC 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002CD2                            
00002CD2                            loc_29C0:
00002CD2 2001                       		move.l	d1,d0
00002CD4 E581                       		asl.l	#2,d1
00002CD6 D280                       		add.l	d0,d1
00002CD8 E781                       		asl.l	#3,d1
00002CDA D280                       		add.l	d0,d1
00002CDC 3001                       		move.w	d1,d0
00002CDE 4841                       		swap	d1
00002CE0 D041                       		add.w	d1,d0
00002CE2 3200                       		move.w	d0,d1
00002CE4 4841                       		swap	d1
00002CE6 21C1 F636                  		move.l	d1,($FFFFF636).w
00002CEA 4E75                       		rts	
00002CEC                            ; End of function RandomNumber
00002CEC                            
00002CEC                            
00002CEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CEC                            
00002CEC                            
00002CEC                            CalcSine:				; XREF: SS_BGAnimate; et al
00002CEC 0240 00FF                  		andi.w	#$FF,d0
00002CF0 D040                       		add.w	d0,d0
00002CF2 0640 0080                  		addi.w	#$80,d0
00002CF6 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002CFA 0440 0080                  		subi.w	#$80,d0
00002CFE 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002D02 4E75                       		rts	
00002D04                            ; End of function CalcSine
00002D04                            
00002D04                            ; ===========================================================================
00002D04                            
00002D04                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002F84                            
00002F84                            ; ===========================================================================
00002F84 48E7 6000                  		movem.l	d1-d2,-(sp)
00002F88 3200                       		move.w	d0,d1
00002F8A 4841                       		swap	d1
00002F8C 7000                       		moveq	#0,d0
00002F8E 3200                       		move.w	d0,d1
00002F90 7407                       		moveq	#7,d2
00002F92                            
00002F92                            loc_2C80:
00002F92 E599                       		rol.l	#2,d1
00002F94 D040                       		add.w	d0,d0
00002F96 5240                       		addq.w	#1,d0
00002F98 9240                       		sub.w	d0,d1
00002F9A 6400                       		bcc.s	loc_2C9A
00002F9C D240                       		add.w	d0,d1
00002F9E 5340                       		subq.w	#1,d0
00002FA0 51CA FFF0                  		dbf	d2,loc_2C80
00002FA4 E248                       		lsr.w	#1,d0
00002FA6 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002FAA 4E75                       		rts	
00002FAC                            ; ===========================================================================
00002FAC                            
00002FAC                            loc_2C9A:
00002FAC 5240                       		addq.w	#1,d0
00002FAE 51CA FFE2                  		dbf	d2,loc_2C80
00002FB2 E248                       		lsr.w	#1,d0
00002FB4 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002FB8 4E75                       		rts	
00002FBA                            
00002FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002FBA                            
00002FBA                            
00002FBA                            CalcAngle:
00002FBA 48E7 1800                  		movem.l	d3-d4,-(sp)
00002FBE 7600                       		moveq	#0,d3
00002FC0 7800                       		moveq	#0,d4
00002FC2 3601                       		move.w	d1,d3
00002FC4 3802                       		move.w	d2,d4
00002FC6 8843                       		or.w	d3,d4
00002FC8 6700                       		beq.s	loc_2D04
00002FCA 3802                       		move.w	d2,d4
00002FCC 4A43                       		tst.w	d3
00002FCE 6A00 0000                  		bpl.w	loc_2CC2
00002FD2 4443                       		neg.w	d3
00002FD4                            
00002FD4                            loc_2CC2:
00002FD4 4A44                       		tst.w	d4
00002FD6 6A00 0000                  		bpl.w	loc_2CCA
00002FDA 4444                       		neg.w	d4
00002FDC                            
00002FDC                            loc_2CCA:
00002FDC B843                       		cmp.w	d3,d4
00002FDE 6400 0000                  		bcc.w	loc_2CDC
00002FE2 E18C                       		lsl.l	#8,d4
00002FE4 88C3                       		divu.w	d3,d4
00002FE6 7000                       		moveq	#0,d0
00002FE8 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002FEC 6000                       		bra.s	loc_2CE6
00002FEE                            ; ===========================================================================
00002FEE                            
00002FEE                            loc_2CDC:				; XREF: CalcAngle
00002FEE E18B                       		lsl.l	#8,d3
00002FF0 86C4                       		divu.w	d4,d3
00002FF2 7040                       		moveq	#$40,d0
00002FF4 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002FF8                            
00002FF8                            loc_2CE6:
00002FF8 4A41                       		tst.w	d1
00002FFA 6A00 0000                  		bpl.w	loc_2CF2
00002FFE 4440                       		neg.w	d0
00003000 0640 0080                  		addi.w	#$80,d0
00003004                            
00003004                            loc_2CF2:
00003004 4A42                       		tst.w	d2
00003006 6A00 0000                  		bpl.w	loc_2CFE
0000300A 4440                       		neg.w	d0
0000300C 0640 0100                  		addi.w	#$100,d0
00003010                            
00003010                            loc_2CFE:
00003010 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003014 4E75                       		rts	
00003016                            ; ===========================================================================
00003016                            
00003016                            loc_2D04:				; XREF: CalcAngle
00003016 303C 0040                  		move.w	#$40,d0
0000301A 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000301E 4E75                       		rts	
00003020                            ; End of function CalcAngle
00003020                            
00003020                            ; ===========================================================================
00003020                            
00003020                            Angle_Data:	incbin	misc\angles.bin
00003122                            
00003122                            ; ===========================================================================
00003122                            
00003122                            ; ---------------------------------------------------------------------------
00003122                            ; Sega screen
00003122                            ; ---------------------------------------------------------------------------
00003122                            
00003122                            SegaScreen:				; XREF: GameModeArray
00003122 103C 00E4                  		move.b	#$E4,d0
00003126 6100 E498                  		bsr.w	PlaySound_Special ; stop music
0000312A 6100 E6D6                  		bsr.w	ClearPLC
0000312E 6100 EF0C                  		bsr.w	Pal_FadeFrom
00003132 4DF9 00C0 0004             		lea	($C00004).l,a6
00003138 3CBC 8004                  		move.w	#$8004,(a6)
0000313C 3CBC 8230                  		move.w	#$8230,(a6)
00003140 3CBC 8407                  		move.w	#$8407,(a6)
00003144 3CBC 8700                  		move.w	#$8700,(a6)
00003148 3CBC 8B00                  		move.w	#$8B00,(a6)
0000314C 4238 F64E                  		clr.b	($FFFFF64E).w
00003150 46FC 2700                  		move	#$2700,sr
00003154 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003158 0200 00BF                  		andi.b	#$BF,d0
0000315C 33C0 00C0 0004             		move.w	d0,($C00004).l
00003162 6100 E384                  		bsr.w	ClearScreen
00003166 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003170 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003176 6100 E4EC                  		bsr.w	NemDec
0000317A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003180 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003186 303C 0000                  		move.w	#0,d0
0000318A 6100 E7B6                  		bsr.w	EniDec
0000318E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003194 203C 6510 0003             		move.l	#$65100003,d0
0000319A 7217                       		moveq	#$17,d1
0000319C 7407                       		moveq	#7,d2
0000319E 6100 E4A4                  		bsr.w	ShowVDPGraphics
000031A2 43F9 00FF 0180             		lea	($FF0180).l,a1
000031A8 203C 4000 0003             		move.l	#$40000003,d0
000031AE 7227                       		moveq	#$27,d1
000031B0 741B                       		moveq	#$1B,d2
000031B2 6100 E490                  		bsr.w	ShowVDPGraphics
000031B6 7000                       		moveq	#0,d0
000031B8 6100 F148                  		bsr.w	PalLoad2	; load Sega logo pallet
000031BC 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000031C2 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000031C8 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000031CE 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000031D4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031D8 0000 0040                  		ori.b	#$40,d0
000031DC 33C0 00C0 0004             		move.w	d0,($C00004).l
000031E2                            
000031E2                            Sega_WaitPallet:
000031E2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000031E8 6100 FAD0                  		bsr.w	DelayProgram
000031EC 6100 F006                  		bsr.w	PalCycle_Sega
000031F0 66F0                       		bne.s	Sega_WaitPallet
000031F2                            
000031F2 103C 00E1                  		move.b	#$E1,d0
000031F6 6100 E3C8                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
000031FA 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003200 6100 FAB8                  		bsr.w	DelayProgram
00003204 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000320A                            
0000320A                            Sega_WaitEnd:
0000320A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003210 6100 FAA8                  		bsr.w	DelayProgram
00003214 4A78 F614                  		tst.w	($FFFFF614).w
00003218 6700                       		beq.s	Sega_GotoTitle
0000321A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003220 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003222                            
00003222                            Sega_GotoTitle:
00003222 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00003228 4E75                       		rts	
0000322A                            ; ===========================================================================
0000322A                            
0000322A                            ; ---------------------------------------------------------------------------
0000322A                            ; Title	screen
0000322A                            ; ---------------------------------------------------------------------------
0000322A                            
0000322A                            TitleScreen:				; XREF: GameModeArray
0000322A 103C 00E4                  		move.b	#$E4,d0
0000322E 6100 E390                  		bsr.w	PlaySound_Special ; stop music
00003232 6100 EE08                  		bsr.w	Pal_FadeFrom
00003236 6100 E5CA                  		bsr.w	ClearPLC
0000323A 46FC 2700                  		move	#$2700,sr
0000323E 6100 E336                  		bsr.w	SoundDriverLoad
00003242 4DF9 00C0 0004             		lea	($C00004).l,a6
00003248 3CBC 8004                  		move.w	#$8004,(a6)
0000324C 3CBC 8230                  		move.w	#$8230,(a6)
00003250 3CBC 8407                  		move.w	#$8407,(a6)
00003254 3CBC 9001                  		move.w	#$9001,(a6)
00003258 3CBC 9200                  		move.w	#$9200,(a6)
0000325C 3CBC 8B03                  		move.w	#$8B03,(a6)
00003260 3CBC 8720                  		move.w	#$8720,(a6)
00003264 4238 F64E                  		clr.b	($FFFFF64E).w
00003268 6100 E27E                  		bsr.w	ClearScreen
0000326C 43F8 D000                  		lea	($FFFFD000).w,a1
00003270 7000                       		moveq	#0,d0
00003272 323C 07FF                  		move.w	#$7FF,d1
00003276                            
00003276                            Title_ClrObjRam:
00003276 22C0                       		move.l	d0,(a1)+
00003278 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
0000327C                            
0000327C                            ; gomer
0000327C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003286 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
0000328C 6100 E3D6                  		bsr.w	NemDec
00003290 7003                       		moveq	#3,d0		; load Sonic's pallet
00003292 6100 F052                  		bsr.w	PalLoad1
00003296                            
00003296 43F9 00FF 0000             		lea	($FF0000).l,a1
0000329C 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
000032A2 303C 0000                  		move.w	#0,d0
000032A6 6100 E69A                  		bsr.w	EniDec
000032AA                            ; help how the fuck can i do this IT SHOWS NOTHING
000032AA 43F9 00FF 0000             		lea	($FF0000).l,a1
000032B0 203C 4000 0003             		move.l	#$40000003,d0
000032B6 7227                       		moveq	#$27,d1
000032B8 741B                       		moveq	#$1B,d2
000032BA 6100 E388                  		bsr.w	ShowVDPGraphics
000032BE                            
000032BE                            
000032BE 43F9 00FF 0000             		lea	($FF0000).l,a1
000032C4 203C 6000 0003             		move.l	#$60000003,d0
000032CA 7227                       		moveq	#$27,d1
000032CC 741B                       		moveq	#$1B,d2
000032CE                            
000032CE 6100 ECC6                  		bsr.w	Pal_FadeTo
000032D2 6100 ED68                  		bsr.w	Pal_FadeFrom
000032D6                            
000032D6                            
000032D6 6100 E210                  		bsr.w	ClearScreen
000032DA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000032E4 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000032EA 6100 E378                  		bsr.w	NemDec
000032EE 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000032F8 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000032FE 6100 E364                  		bsr.w	NemDec
00003302 43F9 00FF 0000             		lea	($FF0000).l,a1
00003308 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000330E 303C 0000                  		move.w	#0,d0
00003312 6100 E62E                  		bsr.w	EniDec
00003316 43F9 00FF 0000             		lea	($FF0000).l,a1
0000331C 203C 4000 0003             		move.l	#$40000003,d0
00003322 7227                       		moveq	#$27,d1
00003324 741B                       		moveq	#$1B,d2
00003326 6100 E31C                  		bsr.w	ShowVDPGraphics
0000332A 6100 ED10                  		bsr.w	Pal_FadeFrom
0000332E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003332 7000                       		moveq	#0,d0
00003334 323C 001F                  		move.w	#$1F,d1
00003338                            
00003338                            
00003338                            Title_ClrPallet:
00003338 22C0                       		move.l	d0,(a1)+
0000333A 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
0000333E                            
0000333E 7003                       		moveq	#3,d0		; load Sonic's pallet
00003340 6100 EFA4                  		bsr.w	PalLoad1
00003344 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
0000334A 4EB9 0000 0000             		jsr	ObjectsLoad
00003350 4EB9 0000 0000             		jsr	BuildSprites
00003356 6100 EC3E                  		bsr.w	Pal_FadeTo
0000335A 46FC 2700                  		move	#$2700,sr
0000335E 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003368 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000336E 6100 E2F4                  		bsr.w	NemDec
00003372 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
0000337C 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003382 6100 E2E0                  		bsr.w	NemDec
00003386 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003390 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003396 6100 E2CC                  		bsr.w	NemDec
0000339A 4DF9 00C0 0000             		lea	($C00000).l,a6
000033A0 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000033A8 4BF9 0000 05F4             		lea	(Art_Text).l,a5
000033AE 323C 0BB6                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
000033B2                            
000033B2                            Title_LoadText:
000033B2 2C9D                       		move.l	(a5)+,(a6)
000033B4 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000033B8                            
000033B8 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000033BE 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000033C4 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000033CA 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000033D0 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000033D6 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000033DC 6100 0000                  		bsr.w	LevelSizeLoad
000033E0 6100 0000                  		bsr.w	DeformBgLayer
000033E4                            
000033E4 43F8 B000                  		lea	($FFFFB000).w,a1
000033E8 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000033EE 303C 0000                  		move.w	#0,d0
000033F2 6100 E54E                  		bsr.w	EniDec
000033F6 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
000033FC 43F9 00FF 0000             		lea	($FF0000).l,a1
00003402 6100 E6BC                  		bsr.w	KosDec
00003406 6100 0000                  		bsr.w	LevelLayoutLoad
0000340A                            
0000340A 46FC 2700                  		move	#$2700,sr
0000340E 6100 E0D8                  		bsr.w	ClearScreen
00003412 4BF9 00C0 0004             		lea	($C00004).l,a5
00003418 4DF9 00C0 0000             		lea	($C00000).l,a6
0000341E 47F8 F708                  		lea	($FFFFF708).w,a3
00003422 49F8 A440                  		lea	($FFFFA440).w,a4
00003426 343C 6000                  		move.w	#$6000,d2
0000342A 6100 0000                  		bsr.w	LoadTilesFromStart2
0000342E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003434 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
0000343A 303C 0000                  		move.w	#0,d0
0000343E 6100 E502                  		bsr.w	EniDec
00003442 43F9 00FF 0000             		lea	($FF0000).l,a1
00003448 203C 4206 0003             		move.l	#$42060003,d0
0000344E 7221                       		moveq	#$21,d1
00003450 7415                       		moveq	#$15,d2
00003452 6100 E1F0                  		bsr.w	ShowVDPGraphics
00003456 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003460 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003466 6100 E1FC                  		bsr.w	NemDec
0000346A 7001                       		moveq	#1,d0		; load title screen pallet
0000346C 6100 EE78                  		bsr.w	PalLoad1
00003470 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003474 6100 E14A                  		bsr.w	PlaySound_Special
00003478 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
0000347E 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003484 43F8 D080                  		lea	($FFFFD080).w,a1
00003488 7000                       		moveq	#0,d0
0000348A 323C 000F                  		move.w	#$F,d1
0000348E                            
0000348E                            Title_ClrObjRam2:
0000348E 22C0                       		move.l	d0,(a1)+
00003490 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003494                            
00003494 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000349A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000034A0 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000034A6 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000034AC 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000034B2 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000034B8 4EB9 0000 0000             		jsr	ObjectsLoad
000034BE 6100 0000                  		bsr.w	DeformBgLayer
000034C2 4EB9 0000 0000             		jsr	BuildSprites
000034C8 7000                       		moveq	#0,d0
000034CA 6100 E30A                  		bsr.w	LoadPLC2
000034CE 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000034D4 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000034DA 3038 F60C                  		move.w	($FFFFF60C).w,d0
000034DE 0000 0040                  		ori.b	#$40,d0
000034E2 33C0 00C0 0004             		move.w	d0,($C00004).l
000034E8 6100 EAAC                  		bsr.w	Pal_FadeTo
000034EC                            
000034EC                            loc_317C:
000034EC 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000034F2 6100 F7C6                  		bsr.w	DelayProgram
000034F6 4EB9 0000 0000             		jsr	ObjectsLoad
000034FC 6100 0000                  		bsr.w	DeformBgLayer
00003500 4EB9 0000 0000             		jsr	BuildSprites
00003506 6100 E678                  		bsr.w	PalCycle_Title
0000350A 6100 E304                  		bsr.w	RunPLC_RAM
0000350E 3038 D008                  		move.w	($FFFFD008).w,d0
00003512 5440                       		addq.w	#2,d0
00003514 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003518 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
0000351C 6500                       		bcs.s	Title_ChkRegion	; if not, branch
0000351E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003524 4E75                       		rts	
00003526                            ; ===========================================================================
00003526                            
00003526                            Title_ChkRegion:
00003526 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
0000352A 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
0000352C 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003532 6000                       		bra.s	Title_EnterCheat
00003534                            ; ===========================================================================
00003534                            
00003534                            Title_RegionJ:				; XREF: Title_ChkRegion
00003534 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
0000353A                            
0000353A                            Title_EnterCheat:			; XREF: Title_ChkRegion
0000353A 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
0000353E D0C0                       		adda.w	d0,a0
00003540 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003544 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003548 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
0000354A 6600                       		bne.s	loc_3210	; if not, branch
0000354C 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003550 4A00                       		tst.b	d0
00003552 6600                       		bne.s	Title_CountC
00003554 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003558 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
0000355C E249                       		lsr.w	#1,d1
0000355E 0241 0003                  		andi.w	#3,d1
00003562 6700                       		beq.s	Title_PlayRing
00003564 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003568 6A00                       		bpl.s	Title_PlayRing
0000356A 7201                       		moveq	#1,d1
0000356C 1181 1001                  		move.b	d1,1(a0,d1.w)
00003570                            
00003570                            Title_PlayRing:
00003570 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003576 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000357A 6100 E044                  		bsr.w	PlaySound_Special
0000357E 6000                       		bra.s	Title_CountC
00003580                            ; ===========================================================================
00003580                            
00003580                            loc_3210:				; XREF: Title_EnterCheat
00003580 4A00                       		tst.b	d0
00003582 6700                       		beq.s	Title_CountC
00003584 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
0000358A 6700                       		beq.s	Title_CountC
0000358C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003592                            
00003592                            Title_CountC:
00003592 1038 F605                  		move.b	($FFFFF605).w,d0
00003596 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000359A 6700                       		beq.s	loc_3230	; if not, branch
0000359C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000035A0                            
000035A0                            loc_3230:
000035A0 4A78 F614                  		tst.w	($FFFFF614).w
000035A4 6700 0000                  		beq.w	Demo
000035A8                            		; (temporary until we have an actual options screen)
000035A8 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
000035AE 6700                       		beq.s	@notc
000035B0                            
000035B0 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
000035B4 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
000035BA 6D00                       		blt.s	@notoverflow
000035BC 11FC 0000 FFE8             		move.b	#0,(v_character).w
000035C2                            	@notoverflow:
000035C2 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000035C6 6100 DFF8                  		bsr.w	PlaySound_Special
000035CA                            	@notc:
000035CA 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
000035D0 6700 FF1A                  		beq.w	loc_317C	; if not, branch
000035D4                            
000035D4                            Title_ChkLevSel:
000035D4 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000035D8 6700 0000                  		beq.w	PlayLevel	; if not, play level
000035DC 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
000035E2 6700 0000                  		beq.w	PlayLevel	; if not, play level
000035E6                            		
000035E6                            		
000035E6 7002                       		moveq	#2,d0
000035E8 6100 ED18                  		bsr.w	PalLoad2	; load level select pallet
000035EC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000035F0 7000                       		moveq	#0,d0
000035F2 323C 00DF                  		move.w	#$DF,d1
000035F6                            
000035F6                            Title_ClrScroll:
000035F6 22C0                       		move.l	d0,(a1)+
000035F8 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000035FC                            
000035FC 21C0 F616                  		move.l	d0,($FFFFF616).w
00003600 46FC 2700                  		move	#$2700,sr
00003604 4DF9 00C0 0000             		lea	($C00000).l,a6
0000360A 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003614 323C 03FF                  		move.w	#$3FF,d1
00003618                            
00003618                            Title_ClrVram:
00003618 2C80                       		move.l	d0,(a6)
0000361A 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000361E                            
0000361E 6100 0000                  		bsr.w	LevSelTextLoad
00003622                            		
00003622                            		; sound test fix
00003622 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003626 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
0000362C                            		
0000362C 363C C65F                  		move.w	#$C680-$21,d3 ; selected
00003630 0C46 0014                  		cmpi.w	#$14,d6
00003634 6700                       		beq.s	@issndtst
00003636 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
0000363A                            	@issndtst:
0000363A 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
0000363E 31C6 FF82                  		move.w	d6,($FFFFFF82).w
00003642                            		
00003642 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003646 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000364E                            		
0000364E 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003654 6700                       		beq.s	@issndtst2
00003656                            		
00003656 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
0000365C 6100 0000                  		bsr.w	CStringSlop
00003660 6000                       		bra.s	LevelSelect
00003662                            	@issndtst2:
00003662 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003668 6100 0000                  		bsr.w	CStringSlop
0000366C                            ; ---------------------------------------------------------------------------
0000366C                            ; Level	Select
0000366C                            ; ---------------------------------------------------------------------------
0000366C                            LevelSelect:
0000366C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003672 6100 F646                  		bsr.w	DelayProgram
00003676 6100 0000                  		bsr.w	LevSelControls
0000367A 6100 E194                  		bsr.w	RunPLC_RAM
0000367E 4AB8 F680                  		tst.l	($FFFFF680).w
00003682 66E8                       		bne.s	LevelSelect
00003684 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
0000368A 67E0                       		beq.s	LevelSelect	; if not, branch
0000368C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003690 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
00003694 6600                       		bne.s	@dont	; if not, dont blow this place up
00003696                            			
00003696 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
0000369C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036A2 6100 F616                  		bsr.w	DelayProgram
000036A6                            	@dont:
000036A6 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
000036AA 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000036AC                            		
000036AC 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
000036B2 67B8                       		beq.s	LevelSelect	; if not, branch
000036B4                            		
000036B4 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
000036BA 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
000036BC                            		
000036BC 1038 FF84                  		move.b	($FFFFFF84).w,d0
000036C0 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
000036C4                            		
000036C4 4EB9 0000 0000             		jsr		ShowNow_Playing
000036CA 60A0                       		bra.s	LevelSelect
000036CC                            ; ===========================================================================
000036CC                            
000036CC                            LevSel_SEGA:				; XREF: LevelSelect
000036CC 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
000036D2 4E75                       		rts	
000036D4                            ; ===========================================================================
000036D4                            
000036D4                            LevSel_Ending:				; XREF: LevelSelect
000036D4 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000036DA 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000036E0 4E75                       		rts	
000036E2                            ; ===========================================================================
000036E2                            
000036E2                            LevSel_Credits:				; XREF: LevelSelect
000036E2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000036E8 103C 0091                  		move.b	#$91,d0
000036EC 6100 DED2                  		bsr.w	PlaySound_Special ; play credits music
000036F0 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000036F6 4E75                       		rts	
000036F8                            ; ===========================================================================
000036F8                            
000036F8                            LevSel_Level_SS:			; XREF: LevelSelect
000036F8 D040                       		add.w	d0,d0
000036FA 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000036FE 6B00 FF6C                  		bmi.w	LevelSelect
00003702 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003706 6600                       		bne.s	LevSel_Level	; if not, branch
00003708 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000370E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003712 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003718 7000                       		moveq	#0,d0
0000371A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000371E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003722 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003726 4E75                       		rts	
00003728                            ; ===========================================================================
00003728                            
00003728                            LevSel_Level:				; XREF: LevSel_Level_SS
00003728 0240 3FFF                  		andi.w	#$3FFF,d0
0000372C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003730                            
00003730                            PlayLevel:				; XREF: ROM:00003246j ...
00003730 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003736 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000373C 7000                       		moveq	#0,d0
0000373E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003742 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003746 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000374A 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000374E 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003752 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003756 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
0000375A 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
0000375E 103C 00E0                  		move.b	#$E0,d0
00003762 6100 DE5C                  		bsr.w	PlaySound_Special ; fade out music
00003766 4E75                       		rts	
00003768                            ; ===========================================================================
00003768                            ; ---------------------------------------------------------------------------
00003768                            ; Level	select - level pointers
00003768                            ; ---------------------------------------------------------------------------
00003768                            LSelectPointers:
00003768                            		incbin	misc\ls_point.bin
00003792                            		even
00003792                            ; ---------------------------------------------------------------------------
00003792                            ; Level	select codes
00003792                            ; ---------------------------------------------------------------------------
00003792                            LevelSelectCode_J:
00003792                            		incbin	misc\ls_jcode.bin
00003798                            		even
00003798                            
00003798                            LevelSelectCode_US:
00003798                            		incbin	misc\ls_ucode.bin
0000379E                            		even
0000379E                            ; ===========================================================================
0000379E                            
0000379E                            ; ---------------------------------------------------------------------------
0000379E                            ; Demo mode
0000379E                            ; ---------------------------------------------------------------------------
0000379E                            
0000379E                            Demo:					; XREF: TitleScreen
0000379E 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000037A4                            
000037A4                            loc_33B6:				; XREF: loc_33E4
000037A4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000037AA 6100 F50E                  		bsr.w	DelayProgram
000037AE 6100 0000                  		bsr.w	DeformBgLayer
000037B2 6100 E3AC                  		bsr.w	PalCycle_Load
000037B6 6100 E058                  		bsr.w	RunPLC_RAM
000037BA 3038 D008                  		move.w	($FFFFD008).w,d0
000037BE 5440                       		addq.w	#2,d0
000037C0 31C0 D008                  		move.w	d0,($FFFFD008).w
000037C4 0C40 1C00                  		cmpi.w	#$1C00,d0
000037C8 6500                       		bcs.s	loc_33E4
000037CA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000037D0 4E75                       		rts	
000037D2                            ; ===========================================================================
000037D2                            
000037D2                            loc_33E4:				; XREF: Demo
000037D2 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000037D8 6600 FDFA                  		bne.w	Title_ChkLevSel	; if yes, branch
000037DC 4A78 F614                  		tst.w	($FFFFF614).w
000037E0 6600 FFC2                  		bne.w	loc_33B6
000037E4 103C 00E0                  		move.b	#$E0,d0
000037E8 6100 DDD6                  		bsr.w	PlaySound_Special ; fade out music
000037EC 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000037F0 0240 0007                  		andi.w	#7,d0
000037F4 D040                       		add.w	d0,d0
000037F6 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000037FA 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000037FE 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003802 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003808 6500                       		bcs.s	loc_3422	; if yes, branch
0000380A 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003810                            
00003810                            loc_3422:
00003810 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003816 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000381C 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003820 6600                       		bne.s	Demo_Level	; if not, branch
00003822 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003828 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
0000382C 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003830                            
00003830                            Demo_Level:
00003830 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003836 7000                       		moveq	#0,d0
00003838 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000383C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003840 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003844 4E75                       		rts	
00003846                            ; ===========================================================================
00003846                            ; ---------------------------------------------------------------------------
00003846                            ; Levels used in demos
00003846                            ; ---------------------------------------------------------------------------
00003846                            Demo_Levels:	incbin	misc\dm_ord1.bin
0000384E                            		even
0000384E                            
0000384E                            ; ---------------------------------------------------------------------------
0000384E                            ; Subroutine to	change what you're selecting in the level select
0000384E                            ; ---------------------------------------------------------------------------
0000384E                            
0000384E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000384E                            
0000384E                            
0000384E                            LevSelControls:				; XREF: LevelSelect
0000384E 1238 F605                  		move.b	($FFFFF605).w,d1
00003852 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003856 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003858 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000385C 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
00003860                            
00003860                            LevSel_UpDown:
00003860 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003866 1238 F604                  		move.b	($FFFFF604).w,d1
0000386A 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
0000386E 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
00003872 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003876 0801 0000                  		btst	#0,d1		; is up	pressed?
0000387A 6700                       		beq.s	LevSel_Down	; if not, branch
0000387C 5346                       		subq.w	#1,d6		; move up 1 selection
0000387E 6400                       		bcc.s	LevSel_Down
00003880 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003882                            
00003882                            LevSel_Down:
00003882 0801 0001                  		btst	#1,d1		; is down pressed?
00003886 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003888 5246                       		addq.w	#1,d6		; move down 1 selection
0000388A 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000388E 6500                       		bcs.s	LevSel_Refresh
00003890 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003892 6000                       		bra.s	LevSel_Refresh
00003894                            		
00003894                            LevSel_LR:
00003894 0801 0002                  		btst	#2,d1		; is left pressed?
00003898 6700                       		beq.s	LevSel_Right	; if not, branch
0000389A 0446 0000                  		sub.w	#lsrow2size,d6
0000389E 64E2                       		bcc.s	LevSel_Down
000038A0 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
000038A4                            LevSel_Right:
000038A4 0801 0003                  		btst	#3,d1		; is right pressed?
000038A8 6700                       		beq.s	LevSel_Refresh	; if not, branch
000038AA 0646 0000                  		add.w	#lsrow1size,d6
000038AE 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000038B2 6500                       		bcs.s	LevSel_Refresh
000038B4 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
000038B8                            ; ===========================================================================
000038B8                            LevSel_Refresh:
000038B8                            		
000038B8 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000038BC 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000038C0                            		
000038C0 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
000038C6 6600                       		bne.s	@exitsndtest
000038C8                            		
000038C8 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
000038CC 43F9 0000 0000             		lea	(Controls_Normal).l,a1
000038D2 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000038DA 6100 0000                  		bsr.w	CStringSlop
000038DE                            	@exitsndtest:
000038DE                            	
000038DE 363C C65F                  		move.w	#$C680-$21,d3
000038E2 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
000038E6 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000038EA                            		
000038EA 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
000038F0 6600                       		bne.s	@entersndtest
000038F2                            		
000038F2 363C C65F                  		move.w	#$C680-$21,d3
000038F6 43F9 0000 0000             		lea	(Controls_SND).l,a1
000038FC 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003904 6100 0000                  		bsr.w	CStringSlop
00003908                            	@entersndtest:
00003908 4E75                       		rts	
0000390A                            		
0000390A                            LevSel_SndTest:				; XREF: LevSelControls
0000390A 1238 F605                  		move.b	($FFFFF605).w,d1
0000390E 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
00003912 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003914 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
0000391A 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
0000391E                            		
0000391E 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003922 0801 0002                  		btst	#2,d1		; is left pressed?
00003926 6700                       		beq.s	SndTest_Right	; if not, branch
00003928 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
0000392A                            		; no need the fact it's a byte does the trick
0000392A                            
0000392A                            SndTest_Right:
0000392A 0801 0003                  		btst	#3,d1		; is right pressed?
0000392E 6700                       		beq.s	SndTest_A	; if not, branch
00003930 5200                       		addq.b	#1,d0		; add 1	to sound test
00003932                            		; same here
00003932                            		
00003932                            SndTest_A:
00003932 0801 0006                  		btst	#6,d1		; is A pressed?
00003936 6700                       		beq.s	SndTest_B	; if not, branch
00003938 5100                       		subq.b	#8,d0		; subtract $10 to sound test
0000393A 5100                       		subq.b	#8,d0
0000393C                            		
0000393C                            SndTest_B:
0000393C 0801 0004                  		btst	#4,d1		; is B pressed?
00003940 6700                       		beq.s	SndTest_Refresh	; if not, branch
00003942 5000                       		addq.b	#8,d0		; add $10 to sound test
00003944 5000                       		addq.b	#8,d0
00003946                            
00003946                            SndTest_Refresh:
00003946 363C C65F                  		move.w	#$C680-$21,d3
0000394A 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
0000394E 6000 0000                  		bra.w	LevSelSndTest	; refresh text
00003952                            
00003952                            LevSel_NoMove:
00003952 4E75                       		rts	
00003954                            ; End of function LevSelControls
00003954                            
00003954                            ; ---------------------------------------------------------------------------
00003954                            ; Subroutine to load level select text
00003954                            ; ---------------------------------------------------------------------------
00003954                            
00003954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003954                            
00003954                            LevSelTextLoad_loop:
00003954 2D44 0004                  		move.l	d4,4(a6)
00003958 6100 0000                  		bsr.w	LevSel_ChgLine
0000395C 0684 0080 0000             		addi.l	#$800000,d4
00003962 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
00003966 4E75                       		rts
00003968                            LevSelTextLoad:				; XREF: TitleScreen
00003968 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000396E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003974 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003978 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
0000397E                            		
0000397E 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
00003982 61D0                       		bsr.s	LevSelTextLoad_loop
00003984                            		
00003984                            		
00003984 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
0000398A 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
0000398E 61C4                       		bsr.s	LevSelTextLoad_loop
00003990 363C C65F                  		move.w	#$C680-$21,d3
00003994                            		
00003994                            LevSelHighlightCode:
00003994 4DF9 00C0 0000             		lea	($C00000).l,a6
0000399A 7000                       		moveq	#0,d0
0000399C 3038 FF82                  		move.w	($FFFFFF82).w,d0
000039A0 3200                       		move.w	d0,d1
000039A2 283C 6086 0003             		move.l	#lsscrpos,d4
000039A8                            		
000039A8 0C40 0000                  		cmpi.w	#lsrow1size,d0
000039AC 6D00                       		blt.s	@notsecond
000039AE                            		
000039AE 0440 0000                  		sub.w	#lsrow1size,d0
000039B2 0684 0024 0000             		addi.l	#lsoff,d4
000039B8                            	@notsecond:
000039B8 EF48                       		lsl.w	#7,d0
000039BA 4840                       		swap	d0
000039BC D880                       		add.l	d0,d4
000039BE 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000039C4 E749                       		lsl.w	#3,d1
000039C6 D241                       		add.w	d1,d1
000039C8 D2C1                       		adda.w	d1,a1
000039CA 2D44 0004                  		move.l	d4,4(a6)
000039CE 6100 0000                  		bsr.w	LevSel_ChgLine
000039D2 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
000039D8 6700                       		beq.s	LevSelSndTest
000039DA 4E75                       		rts
000039DC                            
000039DC                            LevSelSndTest:
000039DC 0643 0030                  		add.w	#$30,d3
000039E0 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
000039EA 1038 FF84                  		move.b	($FFFFFF84).w,d0
000039EE 1400                       		move.b	d0,d2
000039F0 E808                       		lsr.b	#4,d0
000039F2 6100 0000                  		bsr.w	LevSel_ChgSnd
000039F6 1002                       		move.b	d2,d0
000039F8 6100 0000                  		bsr.w	LevSel_ChgSnd
000039FC 4E75                       		rts	
000039FE                            ; End of function LevSelTextLoad
000039FE                            
000039FE                            
000039FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000039FE                            
000039FE                            
000039FE                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
000039FE 0240 000F                  		andi.w	#$F,d0
00003A02 0C00 000A                  		cmpi.b	#$A,d0
00003A06 6500                       		bcs.s	loc_3580
00003A08 5E00                       		addi.b	#7,d0
00003A0A                            
00003A0A                            loc_3580:
00003A0A D043                       		add.w	d3,d0
00003A0C 3C80                       		move.w	d0,(a6)
00003A0E 4E75                       		rts	
00003A10                            ; End of function LevSel_ChgSnd
00003A10                            
00003A10                            
00003A10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A10                            
00003A10                            
00003A10                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003A10 740F                       		moveq	#$10-1,d2		; number of characters per line
00003A12                            
00003A12                            @loop:
00003A12 7000                       		moveq	#0,d0
00003A14 1019                       		move.b	(a1)+,d0
00003A16 0C00 0020                  		cmpi.b	#$20,d0
00003A1A 6E00                       		bgt.s	@draw
00003A1C 3CBC 0000                  		move.w	#0,(a6)
00003A20 51CA FFF0                  		dbf	d2,@loop
00003A24 4E75                       		rts	
00003A26                            ; ===========================================================================
00003A26                            
00003A26                            @draw:				; XREF: LevSel_ChgLine
00003A26 D043                       		add.w	d3,d0
00003A28 3C80                       		move.w	d0,(a6)
00003A2A 51CA FFE6                  		dbf	d2,@loop
00003A2E 4E75                       		rts	
00003A30                            ; End of function LevSel_ChgLine
00003A30                            		
00003A30                            CStringSlop_draw:
00003A30 D043                       		add.w	d3,d0
00003A32 3C80                       		move.w	d0,(a6)
00003A34                            CStringSlop:				; XREF: LevSelTextLoad
00003A34 7000                       		moveq	#0,d0
00003A36 1019                       		move.b	(a1)+,d0
00003A38 0C00 0020                  		cmpi.b	#$20,d0
00003A3C 6EF2                       		bgt.s	CStringSlop_draw
00003A3E                            		
00003A3E 0C00 0001                  		cmpi.b	#1,d0
00003A42 6700                       		beq.s	@InsertSpaces
00003A44 6500                       		blo.s	@end
00003A46                            		
00003A46 3CBC 0000                  		move.w	#0,(a6)
00003A4A 60E8                       		bra.s	CStringSlop
00003A4C                            	@end:
00003A4C 4E75                       		rts
00003A4E                            	@InsertSpaces:
00003A4E 7000                       		moveq	#0,d0
00003A50 1019                       		move.b	(a1)+,d0
00003A52                            		
00003A52                            	@insert:
00003A52 3CBC 0000                  		move.w	#0,(a6)
00003A56 51C8 FFFA                  		dbf.w	d0,@insert
00003A5A 60D8                       		bra.s	CStringSlop
00003A5C                            ; End of function LevSel_ChgLine
00003A5C                            
00003A5C                            ; ===========================================================================
00003A5C                            ; ---------------------------------------------------------------------------
00003A5C                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003A5C                            ; ---------------------------------------------------------------------------
00003A5C                            LevelMenuText:	
00003A5C 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003A6C 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A7C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A8C 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003A9C 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003AAC 2020 2020 2020 2020 2020+          dc.b    "               3"
00003ABC 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003ACC 2020 2020 2020 2020 2020+          dc.b    "               2"
00003ADC 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AEC 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003AFC 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B0C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B1C                            LMTSecondRow:
00003B1C 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003B2C 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003B3C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B4C 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003B5C 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B6C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B7C 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003B8C 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003B9C 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003BAC 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003BBC 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003BCC                            LMTSelectableEnd:
00003BCC 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003BDC                            LMTEnd:
00003BDC                            
00003BDC                            Now_Playing:
00003BDC 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003BEC                            		even
00003BEC                            NP_Track:
00003BEC 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003BF4                            		even
00003BF4                            NP_SFX:
00003BF4 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003BFC                            		even
00003BFC                            
00003BFC                            ShowNow_Playing:
00003BFC 1C00                       		move.b	d0,d6
00003BFE 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003C02 43FA FFD8                  		lea	Now_Playing(pc),a1
00003C06 4DF9 00C0 0000             		lea		($C00000).l,a6
00003C0C 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003C14 6100 FE1E                  		bsr.w	CStringSlop
00003C18                            		
00003C18 43FA FFD2                  		lea	NP_Track(pc),a1
00003C1C 0C06 00A0                  		cmpi.b	#$A0,d6
00003C20 6D00                       		blt.s	@track
00003C22                            		
00003C22 43FA FFD0                  		lea	NP_SFX(pc),a1
00003C26                            	@track:
00003C26 6100 FE0C                  		bsr.w	CStringSlop
00003C2A                            		
00003C2A 0643 0030                  		add.w	#$30,d3
00003C2E 1006                       		move.b	d6,d0
00003C30 1400                       		move.b	d0,d2
00003C32 E808                       		lsr.b	#4,d0
00003C34 6100 FDC8                  		bsr.w	LevSel_ChgSnd
00003C38 1002                       		move.b	d2,d0
00003C3A 6100 FDC2                  		bsr.w	LevSel_ChgSnd
00003C3E 4E75                       		rts	
00003C40                            
00003C40                            ; 1 is insert spaces btw
00003C40                            Controls_Normal:
00003C40 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003C4C                            		even		
00003C4C                            Controls_SND:
00003C4C 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003C72 00                         		even
00003C72                            ; ---------------------------------------------------------------------------
00003C72                            ; Music	playlist
00003C72                            ; ---------------------------------------------------------------------------
00003C72                            MusicList1:	incbin	misc\muslist1.bin
00003C7A                            		even
00003C7A                            MusicList2:	incbin	misc\muslist2.bin
00003C80                            		even
00003C80                            MusicList3:	incbin	misc\muslist3.bin
00003C86                            		even
00003C86                            MusicList4:	incbin	misc\muslist4.bin
00003C8C                            		even
00003C8C                            ; ===========================================================================
00003C8C                            
00003C8C                            ; ---------------------------------------------------------------------------
00003C8C                            ; Level
00003C8C                            ; ---------------------------------------------------------------------------
00003C8C                            
00003C8C                            Level:					; XREF: GameModeArray
00003C8C 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003C92 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C96 6B00                       		bmi.s	loc_37B6
00003C98 103C 00E0                  		move.b	#$E0,d0
00003C9C 6100 D922                  		bsr.w	PlaySound_Special ; fade out music
00003CA0                            
00003CA0                            loc_37B6:
00003CA0 6100 DB60                  		bsr.w	ClearPLC
00003CA4 6100 E396                  		bsr.w	Pal_FadeFrom
00003CA8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003CAC 6B00                       		bmi.s	Level_ClrRam
00003CAE 46FC 2700                  		move	#$2700,sr
00003CB2 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003CBC 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003CC2 6100 D9A0                  		bsr.w	NemDec
00003CC6 46FC 2300                  		move	#$2300,sr
00003CCA 7000                       		moveq	#0,d0
00003CCC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003CD0 E948                       		lsl.w	#4,d0
00003CD2 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003CD8 45F2 0000                  		lea	(a2,d0.w),a2
00003CDC 7000                       		moveq	#0,d0
00003CDE 1012                       		move.b	(a2),d0
00003CE0 6700                       		beq.s	loc_37FC
00003CE2 6100 DAC0                  		bsr.w	LoadPLC		; load level patterns
00003CE6                            
00003CE6                            loc_37FC:
00003CE6 7001                       		moveq	#1,d0
00003CE8 6100 DABA                  		bsr.w	LoadPLC		; load standard	patterns
00003CEC                            
00003CEC                            Level_ClrRam:
00003CEC 43F8 D000                  		lea	($FFFFD000).w,a1
00003CF0 7000                       		moveq	#0,d0
00003CF2 323C 07FF                  		move.w	#$7FF,d1
00003CF6                            
00003CF6                            Level_ClrObjRam:
00003CF6 22C0                       		move.l	d0,(a1)+
00003CF8 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003CFC                            
00003CFC 43F8 F628                  		lea	($FFFFF628).w,a1
00003D00 7000                       		moveq	#0,d0
00003D02 323C 0015                  		move.w	#$15,d1
00003D06                            
00003D06                            Level_ClrVars:
00003D06 22C0                       		move.l	d0,(a1)+
00003D08 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003D0C                            
00003D0C 43F8 F700                  		lea	($FFFFF700).w,a1
00003D10 7000                       		moveq	#0,d0
00003D12 323C 003F                  		move.w	#$3F,d1
00003D16                            
00003D16                            Level_ClrVars2:
00003D16 22C0                       		move.l	d0,(a1)+
00003D18 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003D1C                            
00003D1C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003D20 7000                       		moveq	#0,d0
00003D22 323C 0047                  		move.w	#$47,d1
00003D26                            
00003D26                            Level_ClrVars3:
00003D26 22C0                       		move.l	d0,(a1)+
00003D28 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003D2C                            
00003D2C 46FC 2700                  		move	#$2700,sr
00003D30 6100 D7B6                  		bsr.w	ClearScreen
00003D34 4DF9 00C0 0004             		lea	($C00004).l,a6
00003D3A 3CBC 8B03                  		move.w	#$8B03,(a6)
00003D3E 3CBC 8230                  		move.w	#$8230,(a6)
00003D42 3CBC 8407                  		move.w	#$8407,(a6)
00003D46 3CBC 857C                  		move.w	#$857C,(a6)
00003D4A 3CBC 9001                  		move.w	#$9001,(a6)
00003D4E 3CBC 8004                  		move.w	#$8004,(a6)
00003D52 3CBC 8720                  		move.w	#$8720,(a6)
00003D56 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003D5C 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003D60 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D66 6600                       		bne.s	Level_LoadPal	; if not, branch
00003D68 3CBC 8014                  		move.w	#$8014,(a6)
00003D6C 7000                       		moveq	#0,d0
00003D6E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003D72 D040                       		add.w	d0,d0
00003D74 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003D7A 3031 0000                  		move.w	(a1,d0.w),d0
00003D7E 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003D82 31C0 F648                  		move.w	d0,($FFFFF648).w
00003D86 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003D8A 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003D8E 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003D92 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003D98 6000 0000                  		bra.w	Level_LoadPal
00003D9C                            Player_Palette:
00003D9C                            		; normal, lz, sbz, blank
00003D9C 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003DA4                            		
00003DA4 0015 0016 0017 0000        		dc.w	21,22,23,0 ; Pal_Gronic 
00003DAC 0018 0016 0017 0000        		dc.w	24,22,23,0 ; Pal_Anakama 
00003DB4                            		; add more player palettes
00003DB4                            Level_LoadPal:
00003DB4 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003DBA 46FC 2300                  		move	#$2300,sr
00003DBE                            
00003DBE 7200                       		moveq	#0,d1
00003DC0 1238 FFE8                  		move.b	(v_character),d1
00003DC4 D241                       		add.w	d1,d1
00003DC6 D241                       		add.w	d1,d1
00003DC8 D241                       		add.w	d1,d1
00003DCA 303B 10D0                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003DCE                            		
00003DCE 6100 E532                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003DD2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003DD8 6600                       		bne.s	Level_GetBgm	; if not, branch
00003DDA 303B 10C2                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003DDE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003DE4 6600                       		bne.s	Level_WaterPal	; if not, branch
00003DE6 303B 10B8                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003DEA                            
00003DEA                            Level_WaterPal:
00003DEA 6100 E52E                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003DEE 4A38 FE30                  		tst.b	($FFFFFE30).w
00003DF2 6700                       		beq.s	Level_GetBgm
00003DF4 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003DFA                            
00003DFA                            ; NineKode begins here - How to play different songs on different acts
00003DFA                             
00003DFA                            Level_GetBgm:
00003DFA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DFE 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003E02 7000                       		moveq	#0,d0
00003E04 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E08                             
00003E08 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003E0E 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003E10 43F9 0000 3C72             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003E16 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003E18                             
00003E18                            Level_GetBgm2:
00003E18 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003E1E 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003E20 43F9 0000 3C7A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003E26 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003E28                             
00003E28                            Level_GetBgm3:
00003E28 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003E2E 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003E30 43F9 0000 3C80             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003E36 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003E38                             
00003E38                            Level_GetBgm4:
00003E38 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003E3E 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003E40 43F9 0000 3C86             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003E46                             
00003E46                            Level_PlayBgm:
00003E46 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003E4A 6100 D76E                  		bsr.w	PlaySound	; play music
00003E4E 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003E54                             
00003E54                            ; NineKode ends here
00003E54                            
00003E54                            Level_TtlCard:
00003E54 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003E5A 6100 EE5E                  		bsr.w	DelayProgram
00003E5E 4EB9 0000 0000             		jsr	ObjectsLoad
00003E64 4EB9 0000 0000             		jsr	BuildSprites
00003E6A 6100 D9A4                  		bsr.w	RunPLC_RAM
00003E6E 3038 D108                  		move.w	($FFFFD108).w,d0
00003E72 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003E76 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003E78 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003E7C 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003E7E 4EB9 0000 0000             		jsr	Hud_Base
00003E84                            
00003E84                            loc_3946:
00003E84 7003                       		moveq	#3,d0
00003E86 6100 E45E                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003E8A 6100 0000                  		bsr.w	LevelSizeLoad
00003E8E 6100 0000                  		bsr.w	DeformBgLayer
00003E92 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003E98 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003E9C 6100 0000                  		bsr.w	LoadTilesFromStart
00003EA0 4EB9 0000 0000             		jsr	FloorLog_Unk
00003EA6 6100 0000                  		bsr.w	ColIndexLoad
00003EAA 6100 0000                  		bsr.w	LZWaterEffects
00003EAE 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003EB4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003EB8 6B00                       		bmi.s	Level_ChkDebug
00003EBA 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003EC0                            
00003EC0                            Level_ChkDebug:
00003EC0 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003EC4 6700                       		beq.s	Level_ChkWater	; if not, branch
00003EC6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003ECC 6700                       		beq.s	Level_ChkWater	; if not, branch
00003ECE 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003ED4                            
00003ED4                            Level_ChkWater:
00003ED4 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003EDA 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003EE0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003EE6 6600                       		bne.s	Level_LoadObj	; if not, branch
00003EE8 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003EEE 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003EF4 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003EFA 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003F00                            
00003F00                            Level_LoadObj:
00003F00 4EB9 0000 0000             		jsr	ObjPosLoad
00003F06 4EB9 0000 0000             		jsr	ObjectsLoad
00003F0C 4EB9 0000 0000             		jsr	BuildSprites
00003F12 7000                       		moveq	#0,d0
00003F14 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003F18 6600                       		bne.s	loc_39E8	; if yes, branch
00003F1A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003F1E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003F22 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003F26                            
00003F26                            loc_39E8:
00003F26 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003F2A 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003F2E 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003F32 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003F36                            		; move.b	d0,($FFFFFE2F).w
00003F36 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003F3C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003F40 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003F44 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003F48 6100 0000                  		bsr.w	OscillateNumInit
00003F4C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003F52 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003F58 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003F5E 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003F64 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003F6A 7000                       		moveq	#0,d0
00003F6C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F70 E548                       		lsl.w	#2,d0
00003F72 2271 0000                  		movea.l	(a1,d0.w),a1
00003F76 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003F7A 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003F7C 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003F82 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003F86 5340                       		subq.w	#1,d0
00003F88 E548                       		lsl.w	#2,d0
00003F8A 2271 0000                  		movea.l	(a1,d0.w),a1
00003F8E                            
00003F8E                            Level_Demo:
00003F8E 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003F94 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003F98 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003F9E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FA2 6A00                       		bpl.s	Level_ChkWaterPal
00003FA4 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003FAA 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003FB0 6600                       		bne.s	Level_ChkWaterPal
00003FB2 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003FB8                            
00003FB8                            Level_ChkWaterPal:
00003FB8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003FBE 6600                       		bne.s	Level_Delay	; if not, branch
00003FC0 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003FC2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003FC8 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003FCA 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003FCC                            
00003FCC                            Level_WaterPal2:
00003FCC 6100 E368                  		bsr.w	PalLoad4_Water
00003FD0                            
00003FD0                            Level_Delay:
00003FD0 323C 0003                  		move.w	#3,d1
00003FD4                            
00003FD4                            Level_DelayLoop:
00003FD4 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003FDA 6100 ECDE                  		bsr.w	DelayProgram
00003FDE 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003FE2                            
00003FE2 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003FE8 6100 DFB2                  		bsr.w	Pal_FadeTo2
00003FEC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FF0 6B00                       		bmi.s	Level_ClrCardArt
00003FF2 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003FF6 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003FFA 5838 D124                  		addq.b	#4,($FFFFD124).w
00003FFE 5838 D164                  		addq.b	#4,($FFFFD164).w
00004002 6000                       		bra.s	Level_StartGame
00004004                            ; ===========================================================================
00004004                            
00004004                            Level_ClrCardArt:
00004004 7002                       		moveq	#2,d0
00004006 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
0000400C 7000                       		moveq	#0,d0
0000400E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004012 0640 0015                  		addi.w	#$15,d0
00004016 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
0000401C                            
0000401C                            Level_StartGame:
0000401C 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00004022                            
00004022                            ; ---------------------------------------------------------------------------
00004022                            ; Main level loop (when	all title card and loading sequences are finished)
00004022                            ; ---------------------------------------------------------------------------
00004022                            
00004022                            Level_MainLoop:
00004022 6100 D5A8                  		bsr.w	PauseGame
00004026 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000402C 6100 EC8C                  		bsr.w	DelayProgram
00004030 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00004034 6100 0000                  		bsr.w	MoveSonicInDemo
00004038 6100 0000                  		bsr.w	LZWaterEffects
0000403C 4EB9 0000 0000             		jsr	ObjectsLoad
00004042 4A78 FE08                  		tst.w	($FFFFFE08).w
00004046 6600                       		bne.s	loc_3B10
00004048 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000404E 6400                       		bcc.s	loc_3B14
00004050                            
00004050                            loc_3B10:
00004050 6100 0000                  		bsr.w	DeformBgLayer
00004054                            
00004054                            loc_3B14:
00004054 4EB9 0000 0000             		jsr	BuildSprites
0000405A 4EB9 0000 0000             		jsr	ObjPosLoad
00004060 6100 DAFE                  		bsr.w	PalCycle_Load
00004064 6100 D7AA                  		bsr.w	RunPLC_RAM
00004068 6100 0000                  		bsr.w	OscillateNumDo
0000406C 6100 0000                  		bsr.w	ChangeRingFrame
00004070 6100 0000                  		bsr.w	SignpostArtLoad
00004074 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000407A 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
0000407C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00004080 6600 FC0A                  		bne.w	Level		; if yes, branch
00004084 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
0000408A 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
0000408E 4E75                       		rts	
00004090                            ; ===========================================================================
00004090                            
00004090                            Level_ChkDemo:				; XREF: Level_MainLoop
00004090 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00004094 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004096 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000409A 6700                       		beq.s	Level_EndDemo	; if not, branch
0000409C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000040A2 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000040A6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000040AC 4E75                       		rts	
000040AE                            ; ===========================================================================
000040AE                            
000040AE                            Level_EndDemo:				; XREF: Level_ChkDemo
000040AE 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000040B4 6600                       		bne.s	loc_3B88	; if not, branch
000040B6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000040BC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040C0 6A00                       		bpl.s	loc_3B88	; if yes, branch
000040C2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000040C8                            
000040C8                            loc_3B88:
000040C8 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000040CE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000040D4 4278 F794                  		clr.w	($FFFFF794).w
000040D8                            
000040D8                            loc_3B98:
000040D8 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000040DE 6100 EBDA                  		bsr.w	DelayProgram
000040E2 6100 0000                  		bsr.w	MoveSonicInDemo
000040E6 4EB9 0000 0000             		jsr	ObjectsLoad
000040EC 4EB9 0000 0000             		jsr	BuildSprites
000040F2 4EB9 0000 0000             		jsr	ObjPosLoad
000040F8 5378 F794                  		subq.w	#1,($FFFFF794).w
000040FC 6A00                       		bpl.s	loc_3BC8
000040FE 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004104 6100 DF56                  		bsr.w	Pal_FadeOut
00004108                            
00004108                            loc_3BC8:
00004108 4A78 F614                  		tst.w	($FFFFF614).w
0000410C 66CA                       		bne.s	loc_3B98
0000410E 4E75                       		rts	
00004110                            ; ===========================================================================
00004110                            ; ---------------------------------------------------------------------------
00004110                            ; Subroutine to	do special water effects in Labyrinth Zone
00004110                            ; ---------------------------------------------------------------------------
00004110                            
00004110                            LZWaterEffects:				; XREF: Level
00004110 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004116 6600                       		bne.s	locret_3C28	; if not, branch
00004118 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000411E 6400                       		bcc.s	LZMoveWater
00004120 6100 0000                  		bsr.w	LZWindTunnels
00004124 6100 0000                  		bsr.w	LZWaterSlides
00004128 6100 0000                  		bsr.w	LZDynamicWater
0000412C                            
0000412C                            LZMoveWater:
0000412C 4238 F64E                  		clr.b	($FFFFF64E).w
00004130 7000                       		moveq	#0,d0
00004132 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004136 E248                       		lsr.w	#1,d0
00004138 D078 F648                  		add.w	($FFFFF648).w,d0
0000413C 31C0 F646                  		move.w	d0,($FFFFF646).w
00004140 3038 F646                  		move.w	($FFFFF646).w,d0
00004144 9078 F704                  		sub.w	($FFFFF704).w,d0
00004148 6400                       		bcc.s	loc_3C1A
0000414A 4A40                       		tst.w	d0
0000414C 6A00                       		bpl.s	loc_3C1A
0000414E 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00004154 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
0000415A                            
0000415A                            loc_3C1A:
0000415A 0C40 00DF                  		cmpi.w	#$DF,d0
0000415E 6500                       		bcs.s	loc_3C24
00004160 303C 00DF                  		move.w	#$DF,d0
00004164                            
00004164                            loc_3C24:
00004164 11C0 F625                  		move.b	d0,($FFFFF625).w
00004168                            
00004168                            locret_3C28:
00004168 4E75                       		rts	
0000416A                            ; ===========================================================================
0000416A                            ; ---------------------------------------------------------------------------
0000416A                            ; Labyrinth default water heights
0000416A                            ; ---------------------------------------------------------------------------
0000416A                            WaterHeight:	incbin	misc\lz_heigh.bin
00004172                            		even
00004172                            ; ===========================================================================
00004172                            
00004172                            ; ---------------------------------------------------------------------------
00004172                            ; Labyrinth dynamic water routines
00004172                            ; ---------------------------------------------------------------------------
00004172                            
00004172                            LZDynamicWater:				; XREF: LZWaterEffects
00004172 7000                       		moveq	#0,d0
00004174 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004178 D040                       		add.w	d0,d0
0000417A 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
0000417E 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004182 7200                       		moveq	#0,d1
00004184 1238 F64C                  		move.b	($FFFFF64C).w,d1
00004188 3038 F64A                  		move.w	($FFFFF64A).w,d0
0000418C 9078 F648                  		sub.w	($FFFFF648).w,d0
00004190 6700                       		beq.s	locret_3C5A
00004192 6400                       		bcc.s	loc_3C56
00004194 4441                       		neg.w	d1
00004196                            
00004196                            loc_3C56:
00004196 D378 F648                  		add.w	d1,($FFFFF648).w
0000419A                            
0000419A                            locret_3C5A:
0000419A 4E75                       		rts	
0000419C                            ; ===========================================================================
0000419C 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
0000419E 0000                       		dc.w DynWater_LZ2-DynWater_Index
000041A0 0000                       		dc.w DynWater_LZ3-DynWater_Index
000041A2 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000041A4                            ; ===========================================================================
000041A4                            
000041A4                            DynWater_LZ1:				; XREF: DynWater_Index
000041A4 3038 F700                  		move.w	($FFFFF700).w,d0
000041A8 1438 F64D                  		move.b	($FFFFF64D).w,d2
000041AC 6600                       		bne.s	loc_3CD0
000041AE 323C 00B8                  		move.w	#$B8,d1
000041B2 0C40 0600                  		cmpi.w	#$600,d0
000041B6 6500                       		bcs.s	loc_3CB4
000041B8 323C 0108                  		move.w	#$108,d1
000041BC 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000041C2 6500                       		bcs.s	loc_3CBA
000041C4 0C40 0C00                  		cmpi.w	#$C00,d0
000041C8 6500                       		bcs.s	loc_3CB4
000041CA 323C 0318                  		move.w	#$318,d1
000041CE 0C40 1080                  		cmpi.w	#$1080,d0
000041D2 6500                       		bcs.s	loc_3CB4
000041D4 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
000041DA 323C 05C8                  		move.w	#$5C8,d1
000041DE 0C40 1380                  		cmpi.w	#$1380,d0
000041E2 6500                       		bcs.s	loc_3CB4
000041E4 323C 03A8                  		move.w	#$3A8,d1
000041E8 B278 F648                  		cmp.w	($FFFFF648).w,d1
000041EC 6600                       		bne.s	loc_3CB4
000041EE 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000041F4                            
000041F4                            loc_3CB4:
000041F4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041F8 4E75                       		rts	
000041FA                            ; ===========================================================================
000041FA                            
000041FA                            loc_3CBA:				; XREF: DynWater_LZ1
000041FA 0C40 0C80                  		cmpi.w	#$C80,d0
000041FE 65F4                       		bcs.s	loc_3CB4
00004200 323C 00E8                  		move.w	#$E8,d1
00004204 0C40 1500                  		cmpi.w	#$1500,d0
00004208 65EA                       		bcs.s	loc_3CB4
0000420A 323C 0108                  		move.w	#$108,d1
0000420E 60E4                       		bra.s	loc_3CB4
00004210                            ; ===========================================================================
00004210                            
00004210                            loc_3CD0:				; XREF: DynWater_LZ1
00004210 5302                       		subq.b	#1,d2
00004212 6600                       		bne.s	locret_3CF4
00004214 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000421A 6400                       		bcc.s	locret_3CF4
0000421C 323C 03A8                  		move.w	#$3A8,d1
00004220 0C40 1300                  		cmpi.w	#$1300,d0
00004224 6500                       		bcs.s	loc_3CF0
00004226 323C 0108                  		move.w	#$108,d1
0000422A 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004230                            
00004230                            loc_3CF0:
00004230 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004234                            
00004234                            locret_3CF4:
00004234 4E75                       		rts	
00004236                            ; ===========================================================================
00004236                            
00004236                            DynWater_LZ2:				; XREF: DynWater_Index
00004236 3038 F700                  		move.w	($FFFFF700).w,d0
0000423A 323C 0328                  		move.w	#$328,d1
0000423E 0C40 0500                  		cmpi.w	#$500,d0
00004242 6500                       		bcs.s	loc_3D12
00004244 323C 03C8                  		move.w	#$3C8,d1
00004248 0C40 0B00                  		cmpi.w	#$B00,d0
0000424C 6500                       		bcs.s	loc_3D12
0000424E 323C 0428                  		move.w	#$428,d1
00004252                            
00004252                            loc_3D12:
00004252 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004256 4E75                       		rts	
00004258                            ; ===========================================================================
00004258                            
00004258                            DynWater_LZ3:				; XREF: DynWater_Index
00004258 3038 F700                  		move.w	($FFFFF700).w,d0
0000425C 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004260 6600                       		bne.s	loc_3D5E
00004262 323C 0500                  		move.w	#$500,d1
00004266 0C40 0600                  		cmpi.w	#$600,d0
0000426A 6500                       		bcs.s	loc_3D54
0000426C 0C40 1B00                  		cmpi.w	#$1B00,d0
00004270 6500                       		bcs.s	loc_3D54
00004272 323C 0850                  		move.w	#$850,d1
00004276                            
00004276                            loc_3D54:
00004276 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000427A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000427E 4E75                       		rts	
00004280                            ; ===========================================================================
00004280                            
00004280                            loc_3D5E:				; XREF: DynWater_LZ3
00004280 5302                       		subq.b	#1,d2
00004282 6600                       		bne.s	loc_3DA8
00004284 323C 04C8                  		move.w	#$4C8,d1
00004288 0C40 0770                  		cmpi.w	#$770,d0
0000428C 6500                       		bcs.s	loc_3DA2
0000428E 323C 0308                  		move.w	#$308,d1
00004292 0C40 1400                  		cmpi.w	#$1400,d0
00004296 6500                       		bcs.s	loc_3DA2
00004298 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
0000429E 6700                       		beq.s	loc_3D8E
000042A0 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000042A6 6400                       		bcc.s	loc_3D8E
000042A8 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000042AE 6400                       		bcc.s	loc_3DA2
000042B0                            
000042B0                            loc_3D8E:
000042B0 323C 0508                  		move.w	#$508,d1
000042B4 31C1 F648                  		move.w	d1,($FFFFF648).w
000042B8 0C40 1770                  		cmpi.w	#$1770,d0
000042BC 6500                       		bcs.s	loc_3DA2
000042BE 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000042C4                            
000042C4                            loc_3DA2:
000042C4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042C8 4E75                       		rts	
000042CA                            ; ===========================================================================
000042CA                            
000042CA                            loc_3DA8:
000042CA 5302                       		subq.b	#1,d2
000042CC 6600                       		bne.s	loc_3DD2
000042CE 323C 0508                  		move.w	#$508,d1
000042D2 0C40 1860                  		cmpi.w	#$1860,d0
000042D6 6500                       		bcs.s	loc_3DCC
000042D8 323C 0188                  		move.w	#$188,d1
000042DC 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000042E0 6400                       		bcc.s	loc_3DC6
000042E2 B278 F648                  		cmp.w	($FFFFF648).w,d1
000042E6 6600                       		bne.s	loc_3DCC
000042E8                            
000042E8                            loc_3DC6:
000042E8 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
000042EE                            
000042EE                            loc_3DCC:
000042EE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042F2 4E75                       		rts	
000042F4                            ; ===========================================================================
000042F4                            
000042F4                            loc_3DD2:
000042F4 5302                       		subq.b	#1,d2
000042F6 6600                       		bne.s	loc_3E0E
000042F8 323C 0188                  		move.w	#$188,d1
000042FC 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004300 6500                       		bcs.s	loc_3E04
00004302 323C 0900                  		move.w	#$900,d1
00004306 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000430A 6500                       		bcs.s	loc_3E04
0000430C 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004312 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004318 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000431E 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004324 4E75                       		rts	
00004326                            ; ===========================================================================
00004326                            
00004326                            loc_3E04:
00004326 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000432A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000432E 4E75                       		rts	
00004330                            ; ===========================================================================
00004330                            
00004330                            loc_3E0E:
00004330 0C40 1E00                  		cmpi.w	#$1E00,d0
00004334 6500                       		bcs.s	locret_3E1A
00004336 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000433C                            
0000433C                            locret_3E1A:
0000433C 4E75                       		rts	
0000433E                            ; ===========================================================================
0000433E                            
0000433E                            DynWater_SBZ3:				; XREF: DynWater_Index
0000433E 323C 0228                  		move.w	#$228,d1
00004342 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004348 6500                       		bcs.s	loc_3E2C
0000434A 323C 04C8                  		move.w	#$4C8,d1
0000434E                            
0000434E                            loc_3E2C:
0000434E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004352 4E75                       		rts
00004354                            
00004354                            ; ---------------------------------------------------------------------------
00004354                            ; Labyrinth Zone "wind tunnels"	subroutine
00004354                            ; ---------------------------------------------------------------------------
00004354                            
00004354                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004354                            
00004354                            
00004354                            LZWindTunnels:				; XREF: LZWaterEffects
00004354 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004358 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
0000435C 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004362 7000                       		moveq	#0,d0
00004364 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004368 E748                       		lsl.w	#3,d0
0000436A D4C0                       		adda.w	d0,a2
0000436C 7200                       		moveq	#0,d1
0000436E 4A38 FE11                  		tst.b	($FFFFFE11).w
00004372 6600                       		bne.s	loc_3E56
00004374 7201                       		moveq	#1,d1
00004376 514A                       		subq.w	#8,a2
00004378                            
00004378                            loc_3E56:
00004378 43F8 D000                  		lea	($FFFFD000).w,a1
0000437C                            
0000437C                            LZWind_Loop:
0000437C 3029 0008                  		move.w	8(a1),d0
00004380 B052                       		cmp.w	(a2),d0
00004382 6500 0000                  		bcs.w	loc_3EF4
00004386 B06A 0004                  		cmp.w	4(a2),d0
0000438A 6400 0000                  		bcc.w	loc_3EF4
0000438E 3429 000C                  		move.w	$C(a1),d2
00004392 B46A 0002                  		cmp.w	2(a2),d2
00004396 6500                       		bcs.s	loc_3EF4
00004398 B46A 0006                  		cmp.w	6(a2),d2
0000439C 6400                       		bcc.s	loc_3EF4
0000439E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000043A2 0200 003F                  		andi.b	#$3F,d0
000043A6 6600                       		bne.s	loc_3E90
000043A8 303C 00D0                  		move.w	#$D0,d0
000043AC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rushing water sound
000043B2                            
000043B2                            loc_3E90:
000043B2 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000043B6 6600 0000                  		bne.w	locret_3F0A
000043BA 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000043C0 6400                       		bcc.s	loc_3F06
000043C2 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000043C8 0440 0080                  		subi.w	#$80,d0
000043CC B052                       		cmp.w	(a2),d0
000043CE 6400                       		bcc.s	LZWind_Move
000043D0 7002                       		moveq	#2,d0
000043D2 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
000043D8 6600                       		bne.s	loc_3EBA
000043DA 4440                       		neg.w	d0
000043DC                            
000043DC                            loc_3EBA:
000043DC D169 000C                  		add.w	d0,$C(a1)
000043E0                            
000043E0                            LZWind_Move:
000043E0 5869 0008                  		addq.w	#4,8(a1)
000043E4 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
000043EA 337C 0000 0012             		move.w	#0,$12(a1)
000043F0 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
000043F6 08E9 0001 0022             		bset	#1,$22(a1)
000043FC 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004402 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004404 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004408                            
00004408                            LZWind_MoveDown:
00004408 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0000440E 6700                       		beq.s	locret_3EF2	; if not, branch
00004410 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004414                            
00004414                            locret_3EF2:
00004414 4E75                       		rts	
00004416                            ; ===========================================================================
00004416                            
00004416                            loc_3EF4:				; XREF: LZWindTunnels
00004416 504A                       		addq.w	#8,a2
00004418 51C9 FF62                  		dbf	d1,LZWind_Loop
0000441C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004420 6700                       		beq.s	locret_3F0A
00004422 137C 0000 001C             		move.b	#0,$1C(a1)
00004428                            
00004428                            loc_3F06:
00004428 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000442C                            
0000442C                            locret_3F0A:
0000442C 4E75                       		rts	
0000442E                            ; End of function LZWindTunnels
0000442E                            
0000442E                            ; ===========================================================================
0000442E 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004436 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004448 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004456                            					; XREF: LZWindTunnels
00004456                            		even
00004456                            
00004456                            ; ---------------------------------------------------------------------------
00004456                            ; Labyrinth Zone water slide subroutine
00004456                            ; ---------------------------------------------------------------------------
00004456                            
00004456                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004456                            
00004456                            
00004456                            LZWaterSlides:				; XREF: LZWaterEffects
00004456 43F8 D000                  		lea	($FFFFD000).w,a1
0000445A 0829 0001 0022             		btst	#1,$22(a1)
00004460 6600                       		bne.s	loc_3F6A
00004462 3029 000C                  		move.w	$C(a1),d0
00004466 E248                       		lsr.w	#1,d0
00004468 0240 0380                  		andi.w	#$380,d0
0000446C 1229 0008                  		move.b	8(a1),d1
00004470 0241 007F                  		andi.w	#$7F,d1
00004474 D041                       		add.w	d1,d0
00004476 45F8 A400                  		lea	($FFFFA400).w,a2
0000447A 1032 0000                  		move.b	(a2,d0.w),d0
0000447E 45FA 0000                  		lea	byte_3FCF(pc),a2
00004482 7206                       		moveq	#6,d1
00004484                            
00004484                            loc_3F62:
00004484 B022                       		cmp.b	-(a2),d0
00004486 57C9 FFFC                  		dbeq	d1,loc_3F62
0000448A 6700                       		beq.s	LZSlide_Move
0000448C                            
0000448C                            loc_3F6A:
0000448C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004490 6700                       		beq.s	locret_3F7A
00004492 337C 0005 003E             		move.w	#5,$3E(a1)
00004498 4238 F7CA                  		clr.b	($FFFFF7CA).w
0000449C                            
0000449C                            locret_3F7A:
0000449C 4E75                       		rts	
0000449E                            ; ===========================================================================
0000449E                            
0000449E                            LZSlide_Move:				; XREF: LZWaterSlides
0000449E 0C41 0003                  		cmpi.w	#3,d1
000044A2 6400                       		bcc.s	loc_3F84
000044A4 4E71                       		nop	
000044A6                            
000044A6                            loc_3F84:
000044A6 08A9 0000 0022             		bclr	#0,$22(a1)
000044AC 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000044B0 1340 0014                  		move.b	d0,$14(a1)
000044B4 6A00                       		bpl.s	loc_3F9A
000044B6 08E9 0000 0022             		bset	#0,$22(a1)
000044BC                            
000044BC                            loc_3F9A:
000044BC 4229 0015                  		clr.b	$15(a1)
000044C0 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000044C6 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000044CC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000044D0 0200 001F                  		andi.b	#$1F,d0
000044D4 6600                       		bne.s	locret_3FBE
000044D6 303C 00D0                  		move.w	#$D0,d0
000044DA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play water sound
000044E0                            
000044E0                            locret_3FBE:
000044E0 4E75                       		rts	
000044E2                            ; End of function LZWaterSlides
000044E2                            
000044E2                            ; ===========================================================================
000044E2 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
000044F1 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
000044F2                            		even
000044F2                            
000044F2                            ; ---------------------------------------------------------------------------
000044F2                            ; Subroutine to	move Sonic in demo mode
000044F2                            ; ---------------------------------------------------------------------------
000044F2                            
000044F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044F2                            
000044F2                            
000044F2                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
000044F2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000044F6 6600                       		bne.s	MoveDemo_On	; if yes, branch
000044F8 4E75                       		rts	
000044FA                            ; ===========================================================================
000044FA                            
000044FA                            ; This is an unused subroutine for recording a demo
000044FA                            
000044FA                            MoveDemo_Record:
000044FA 43F9 0008 0000             		lea	($80000).l,a1
00004500 3038 F790                  		move.w	($FFFFF790).w,d0
00004504 D2C0                       		adda.w	d0,a1
00004506 1038 F604                  		move.b	($FFFFF604).w,d0
0000450A B011                       		cmp.b	(a1),d0
0000450C 6600                       		bne.s	loc_3FFA
0000450E 5229 0001                  		addq.b	#1,1(a1)
00004512 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004518 6700                       		beq.s	loc_3FFA
0000451A 4E75                       		rts	
0000451C                            ; ===========================================================================
0000451C                            
0000451C                            loc_3FFA:				; XREF: MoveDemo_Record
0000451C 1340 0002                  		move.b	d0,2(a1)
00004520 137C 0000 0003             		move.b	#0,3(a1)
00004526 5478 F790                  		addq.w	#2,($FFFFF790).w
0000452A 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004530 4E75                       		rts	
00004532                            ; ===========================================================================
00004532                            
00004532                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004532 4A38 F604                  		tst.b	($FFFFF604).w
00004536 6A00                       		bpl.s	loc_4022
00004538 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000453C 6B00                       		bmi.s	loc_4022
0000453E 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004544                            
00004544                            loc_4022:
00004544 43F9 0000 0000             		lea	(Demo_Index).l,a1
0000454A 7000                       		moveq	#0,d0
0000454C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004550 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004556 6600                       		bne.s	loc_4038
00004558 7006                       		moveq	#6,d0
0000455A                            
0000455A                            loc_4038:
0000455A E548                       		lsl.w	#2,d0
0000455C 2271 0000                  		movea.l	(a1,d0.w),a1
00004560 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004564 6A00                       		bpl.s	loc_4056
00004566 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000456C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004570 5340                       		subq.w	#1,d0
00004572 E548                       		lsl.w	#2,d0
00004574 2271 0000                  		movea.l	(a1,d0.w),a1
00004578                            
00004578                            loc_4056:
00004578 3038 F790                  		move.w	($FFFFF790).w,d0
0000457C D2C0                       		adda.w	d0,a1
0000457E 1011                       		move.b	(a1),d0
00004580 41F8 F604                  		lea	($FFFFF604).w,a0
00004584 1200                       		move.b	d0,d1
00004586 1410                       		move.b	(a0),d2
00004588 B500                       		eor.b	d2,d0
0000458A 10C1                       		move.b	d1,(a0)+
0000458C C001                       		and.b	d1,d0
0000458E 10C0                       		move.b	d0,(a0)+
00004590 5338 F792                  		subq.b	#1,($FFFFF792).w
00004594 6400                       		bcc.s	locret_407E
00004596 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
0000459C 5478 F790                  		addq.w	#2,($FFFFF790).w
000045A0                            
000045A0                            locret_407E:
000045A0 4E75                       		rts	
000045A2                            ; End of function MoveSonicInDemo
000045A2                            
000045A2                            ; ===========================================================================
000045A2                            ; ---------------------------------------------------------------------------
000045A2                            ; Demo sequence	pointers
000045A2                            ; ---------------------------------------------------------------------------
000045A2                            Demo_Index:
000045A2                            	include "_inc\Demo pointers for intro.asm"
000045A2                            ; ---------------------------------------------------------------------------
000045A2                            ; Demo sequence	pointers
000045A2                            ; ---------------------------------------------------------------------------
000045A2 0000 0000                  	dc.l Demo_GHZ
000045A6 0000 0000                  	dc.l Demo_GHZ
000045AA 0000 0000                  	dc.l Demo_MZ
000045AE 0000 0000                  	dc.l Demo_MZ
000045B2 0000 0000                  	dc.l Demo_SYZ
000045B6 0000 0000                  	dc.l Demo_SYZ
000045BA 0000 0000                  	dc.l Demo_SS
000045BE 0000 0000                  	dc.l Demo_SS
000045BE 0000 0000                  	dc.l Demo_SS
000045C2                            
000045C2                            Demo_EndIndex:
000045C2                            	include "_inc\Demo pointers for ending.asm"
000045C2                            ; ---------------------------------------------------------------------------
000045C2                            ; Demo (ending) sequence pointers
000045C2                            ; ---------------------------------------------------------------------------
000045C2 0000 0000                  	dc.l Demo_EndGHZ1
000045C6 0000 0000                  	dc.l Demo_EndMZ
000045CA 0000 0000                  	dc.l Demo_EndSYZ
000045CE 0000 0000                  	dc.l Demo_EndLZ
000045D2 0000 0000                  	dc.l Demo_EndSLZ
000045D6 0000 0000                  	dc.l Demo_EndSBZ1
000045DA 0000 0000                  	dc.l Demo_EndSBZ2
000045DE 0000 0000                  	dc.l Demo_EndGHZ2
000045DE 0000 0000                  	dc.l Demo_EndGHZ2
000045E2                            
000045E2 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000045F2 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004602 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004612                            		even
00004612                            
00004612                            ; ---------------------------------------------------------------------------
00004612                            ; Collision index loading subroutine
00004612                            ; ---------------------------------------------------------------------------
00004612                            
00004612                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004612                            
00004612                            
00004612                            ColIndexLoad:				; XREF: Level
00004612 7000                       		moveq	#0,d0
00004614 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004618 E548                       		lsl.w	#2,d0
0000461A 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004620 4E75                       		rts	
00004622                            ; End of function ColIndexLoad
00004622                            
00004622                            ; ===========================================================================
00004622                            ; ---------------------------------------------------------------------------
00004622                            ; Collision index pointers
00004622                            ; ---------------------------------------------------------------------------
00004622                            ColPointers:
00004622                            	include "_inc\Collision index pointers.asm"
00004622                            ; ---------------------------------------------------------------------------
00004622                            ; Collision index pointers
00004622                            ; ---------------------------------------------------------------------------
00004622 0000 0000                  	dc.l Col_GHZ
00004626 0000 0000                  	dc.l Col_LZ
0000462A 0000 0000                  	dc.l Col_MZ
0000462E 0000 0000                  	dc.l Col_SLZ
00004632 0000 0000                  	dc.l Col_SYZ
00004636 0000 0000                  	dc.l Col_SBZ
00004636 0000 0000                  	dc.l Col_SBZ
0000463A                            
0000463A                            ; ---------------------------------------------------------------------------
0000463A                            ; Oscillating number subroutine
0000463A                            ; ---------------------------------------------------------------------------
0000463A                            
0000463A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000463A                            
0000463A                            
0000463A                            OscillateNumInit:			; XREF: Level
0000463A 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000463E 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004644 7220                       		moveq	#$20,d1
00004646                            
00004646                            Osc_Loop:
00004646 32DA                       		move.w	(a2)+,(a1)+
00004648 51C9 FFFC                  		dbf	d1,Osc_Loop
0000464C 4E75                       		rts	
0000464E                            ; End of function OscillateNumInit
0000464E                            
0000464E                            ; ===========================================================================
0000464E 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004652 0000 0080                  		dc.w 0,	$80
00004656 0000 0080                  		dc.w 0,	$80
0000465A 0000 0080                  		dc.w 0,	$80
0000465E 0000 0080                  		dc.w 0,	$80
00004662 0000 0080                  		dc.w 0,	$80
00004666 0000 0080                  		dc.w 0,	$80
0000466A 0000 0080                  		dc.w 0,	$80
0000466E 0000 0080                  		dc.w 0,	$80
00004672 0000 50F0                  		dc.w 0,	$50F0
00004676 011E 2080                  		dc.w $11E, $2080
0000467A 00B4 3080                  		dc.w $B4, $3080
0000467E 010E 5080                  		dc.w $10E, $5080
00004682 01C2 7080                  		dc.w $1C2, $7080
00004686 0276 0080                  		dc.w $276, $80
0000468A 0000 0080                  		dc.w 0,	$80
0000468E 0000                       		dc.w 0
00004690                            		even
00004690                            
00004690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004690                            
00004690                            
00004690                            OscillateNumDo:				; XREF: Level
00004690 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004696 6400                       		bcc.s	locret_41C4
00004698 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000469C 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000046A2 3619                       		move.w	(a1)+,d3
000046A4 720F                       		moveq	#$F,d1
000046A6                            
000046A6                            loc_4184:
000046A6 341A                       		move.w	(a2)+,d2
000046A8 381A                       		move.w	(a2)+,d4
000046AA 0303                       		btst	d1,d3
000046AC 6600                       		bne.s	loc_41A4
000046AE 3029 0002                  		move.w	2(a1),d0
000046B2 D042                       		add.w	d2,d0
000046B4 3340 0002                  		move.w	d0,2(a1)
000046B8 D151                       		add.w	d0,0(a1)
000046BA B811                       		cmp.b	0(a1),d4
000046BC 6200                       		bhi.s	loc_41BA
000046BE 03C3                       		bset	d1,d3
000046C0 6000                       		bra.s	loc_41BA
000046C2                            ; ===========================================================================
000046C2                            
000046C2                            loc_41A4:				; XREF: OscillateNumDo
000046C2 3029 0002                  		move.w	2(a1),d0
000046C6 9042                       		sub.w	d2,d0
000046C8 3340 0002                  		move.w	d0,2(a1)
000046CC D151                       		add.w	d0,0(a1)
000046CE B811                       		cmp.b	0(a1),d4
000046D0 6300                       		bls.s	loc_41BA
000046D2 0383                       		bclr	d1,d3
000046D4                            
000046D4                            loc_41BA:
000046D4 5849                       		addq.w	#4,a1
000046D6 51C9 FFCE                  		dbf	d1,loc_4184
000046DA 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000046DE                            
000046DE                            locret_41C4:
000046DE 4E75                       		rts	
000046E0                            ; End of function OscillateNumDo
000046E0                            
000046E0                            ; ===========================================================================
000046E0 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000046E4 0002 0018                  		dc.w 2,	$18
000046E8 0002 0020                  		dc.w 2,	$20
000046EC 0002 0030                  		dc.w 2,	$30
000046F0 0004 0020                  		dc.w 4,	$20
000046F4 0008 0008                  		dc.w 8,	8
000046F8 0008 0040                  		dc.w 8,	$40
000046FC 0004 0040                  		dc.w 4,	$40
00004700 0002 0050                  		dc.w 2,	$50
00004704 0002 0050                  		dc.w 2,	$50
00004708 0002 0020                  		dc.w 2,	$20
0000470C 0003 0030                  		dc.w 3,	$30
00004710 0005 0050                  		dc.w 5,	$50
00004714 0007 0070                  		dc.w 7,	$70
00004718 0002 0010                  		dc.w 2,	$10
0000471C 0002 0010                  		dc.w 2,	$10
00004720                            		even
00004720                            
00004720                            ; ---------------------------------------------------------------------------
00004720                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004720                            ; ---------------------------------------------------------------------------
00004720                            
00004720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004720                            
00004720                            
00004720                            ChangeRingFrame:			; XREF: Level
00004720 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004724 6A00                       		bpl.s	loc_421C
00004726 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000472C 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004730 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004736                            
00004736                            loc_421C:
00004736 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000473A 6A00                       		bpl.s	loc_4232
0000473C 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004742 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004746 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000474C                            
0000474C                            loc_4232:
0000474C 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004750 6A00                       		bpl.s	loc_4250
00004752 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004758 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000475C 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004762 6500                       		bcs.s	loc_4250
00004764 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000476A                            
0000476A                            loc_4250:
0000476A 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000476E 6700                       		beq.s	locret_4272
00004770 7000                       		moveq	#0,d0
00004772 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004776 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
0000477A 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000477E EF58                       		rol.w	#7,d0
00004780 0240 0003                  		andi.w	#3,d0
00004784 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004788 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000478C                            
0000478C                            locret_4272:
0000478C 4E75                       		rts	
0000478E                            ; End of function ChangeRingFrame
0000478E                            
0000478E                            ; ---------------------------------------------------------------------------
0000478E                            ; End-of-act signpost pattern loading subroutine
0000478E                            ; ---------------------------------------------------------------------------
0000478E                            
0000478E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000478E                            
0000478E                            
0000478E                            SignpostArtLoad:			; XREF: Level
0000478E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004792 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004796 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
0000479C 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000479E 3038 F700                  		move.w	($FFFFF700).w,d0
000047A2 3238 F72A                  		move.w	($FFFFF72A).w,d1
000047A6 0441 0100                  		subi.w	#$100,d1
000047AA B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000047AC 6D00                       		blt.s	Signpost_Exit	; if not, branch
000047AE 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000047B2 6700                       		beq.s	Signpost_Exit
000047B4 B278 F728                  		cmp.w	($FFFFF728).w,d1
000047B8 6700                       		beq.s	Signpost_Exit
000047BA 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000047BE 7012                       		moveq	#$12,d0
000047C0 6000 D014                  		bra.w	LoadPLC2	; load signpost	patterns
000047C4                            ; ===========================================================================
000047C4                            
000047C4                            Signpost_Exit:
000047C4 4E75                       		rts	
000047C6                            ; End of function SignpostArtLoad
000047C6                            
000047C6                            ; ===========================================================================
000047C6                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004846                            Demo_MZ:	incbin	demodata\i_mz.bin
00004976                            Demo_SYZ:	incbin	demodata\i_syz.bin
000049F6                            Demo_SS:	incbin	demodata\i_ss.bin
00004AF6                            ; ===========================================================================
00004AF6                            
00004AF6                            ; ---------------------------------------------------------------------------
00004AF6                            ; Special Stage
00004AF6                            ; ---------------------------------------------------------------------------
00004AF6                            
00004AF6                            SpecialStage:				; XREF: GameModeArray
00004AF6 303C 00CA                  		move.w	#$CA,d0
00004AFA 6100 CAC4                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004AFE 6100 D666                  		bsr.w	Pal_MakeFlash
00004B02 46FC 2700                  		move	#$2700,sr
00004B06 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B0C 3CBC 8B03                  		move.w	#$8B03,(a6)
00004B10 3CBC 8004                  		move.w	#$8004,(a6)
00004B14 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004B1A 3CBC 9011                  		move.w	#$9011,(a6)
00004B1E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004B22 0200 00BF                  		andi.b	#$BF,d0
00004B26 33C0 00C0 0004             		move.w	d0,($C00004).l
00004B2C 6100 C9BA                  		bsr.w	ClearScreen
00004B30 46FC 2300                  		move	#$2300,sr
00004B34 4BF9 00C0 0004             		lea	($C00004).l,a5
00004B3A 3ABC 8F01                  		move.w	#$8F01,(a5)
00004B3E 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004B44 3ABC 9780                  		move.w	#$9780,(a5)
00004B48 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004B4E 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004B56                            
00004B56                            loc_463C:
00004B56 3215                       		move.w	(a5),d1
00004B58 0801 0001                  		btst	#1,d1
00004B5C 66F8                       		bne.s	loc_463C
00004B5E 3ABC 8F02                  		move.w	#$8F02,(a5)
00004B62 6100 0000                  		bsr.w	SS_BGLoad
00004B66 7014                       		moveq	#$14,d0
00004B68 6100 CDA6                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004B6C 43F8 D000                  		lea	($FFFFD000).w,a1
00004B70 7000                       		moveq	#0,d0
00004B72 323C 07FF                  		move.w	#$7FF,d1
00004B76                            
00004B76                            SS_ClrObjRam:
00004B76 22C0                       		move.l	d0,(a1)+
00004B78 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004B7C                            
00004B7C 43F8 F700                  		lea	($FFFFF700).w,a1
00004B80 7000                       		moveq	#0,d0
00004B82 323C 003F                  		move.w	#$3F,d1
00004B86                            
00004B86                            SS_ClrRam:
00004B86 22C0                       		move.l	d0,(a1)+
00004B88 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004B8C                            
00004B8C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004B90 7000                       		moveq	#0,d0
00004B92 323C 0027                  		move.w	#$27,d1
00004B96                            
00004B96                            SS_ClrRam2:
00004B96 22C0                       		move.l	d0,(a1)+
00004B98 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004B9C                            
00004B9C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004BA0 7000                       		moveq	#0,d0
00004BA2 323C 007F                  		move.w	#$7F,d1
00004BA6                            
00004BA6                            SS_ClrNemRam:
00004BA6 22C0                       		move.l	d0,(a1)+
00004BA8 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004BAC                            
00004BAC 4238 F64E                  		clr.b	($FFFFF64E).w
00004BB0 4278 FE02                  		clr.w	($FFFFFE02).w
00004BB4 700A                       		moveq	#$A,d0
00004BB6 6100 D72E                  		bsr.w	PalLoad1	; load special stage pallet
00004BBA 4EB9 0000 0000             		jsr	SS_Load
00004BC0 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004BC8 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004BD0 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004BD6 6100 0000                  		bsr.w	PalCycle_SS
00004BDA 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004BDE 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004BE4 303C 0089                  		move.w	#$89,d0
00004BE8 6100 C9D0                  		bsr.w	PlaySound	; play special stage BG	music
00004BEC 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004BF2 43F9 0000 45A2             		lea	(Demo_Index).l,a1
00004BF8 7006                       		moveq	#6,d0
00004BFA E548                       		lsl.w	#2,d0
00004BFC 2271 0000                  		movea.l	(a1,d0.w),a1
00004C00 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004C06 5338 F792                  		subq.b	#1,($FFFFF792).w
00004C0A 4278 FE20                  		clr.w	($FFFFFE20).w
00004C0E 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004C12 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004C18 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004C1E 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004C22 6700                       		beq.s	SS_NoDebug	; if not, branch
00004C24 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004C2A 6700                       		beq.s	SS_NoDebug	; if not, branch
00004C2C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004C32                            
00004C32                            SS_NoDebug:
00004C32 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004C36 0000 0040                  		ori.b	#$40,d0
00004C3A 33C0 00C0 0004             		move.w	d0,($C00004).l
00004C40 6100 D478                  		bsr.w	Pal_MakeWhite
00004C44                            
00004C44                            ; ---------------------------------------------------------------------------
00004C44                            ; Main Special Stage loop
00004C44                            ; ---------------------------------------------------------------------------
00004C44                            
00004C44                            SS_MainLoop:
00004C44 6100 C986                  		bsr.w	PauseGame
00004C48 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004C4E 6100 E06A                  		bsr.w	DelayProgram
00004C52 6100 F89E                  		bsr.w	MoveSonicInDemo
00004C56 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004C5C 4EB9 0000 0000             		jsr	ObjectsLoad
00004C62 4EB9 0000 0000             		jsr	BuildSprites
00004C68 4EB9 0000 0000             		jsr	SS_ShowLayout
00004C6E 6100 0000                  		bsr.w	SS_BGAnimate
00004C72 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004C76 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004C78 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004C7C 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004C80                            
00004C80                            SS_ChkEnd:
00004C80 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004C86 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004C8A                            
00004C8A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004C8E 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004C92 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004C98 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004C9E 6500                       		bcs.s	SS_End		; if not, branch
00004CA0 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004CA4                            
00004CA4                            SS_End:
00004CA4 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004CAA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004CB0 4278 F794                  		clr.w	($FFFFF794).w
00004CB4                            
00004CB4                            SS_EndLoop:
00004CB4 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004CBA 6100 DFFE                  		bsr.w	DelayProgram
00004CBE 6100 F832                  		bsr.w	MoveSonicInDemo
00004CC2 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004CC8 4EB9 0000 0000             		jsr	ObjectsLoad
00004CCE 4EB9 0000 0000             		jsr	BuildSprites
00004CD4 4EB9 0000 0000             		jsr	SS_ShowLayout
00004CDA 6100 0000                  		bsr.w	SS_BGAnimate
00004CDE 5378 F794                  		subq.w	#1,($FFFFF794).w
00004CE2 6A00                       		bpl.s	loc_47D4
00004CE4 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004CEA 6100 D49A                  		bsr.w	Pal_ToWhite
00004CEE                            
00004CEE                            loc_47D4:
00004CEE 4A78 F614                  		tst.w	($FFFFF614).w
00004CF2 66C0                       		bne.s	SS_EndLoop
00004CF4                            
00004CF4 46FC 2700                  		move	#$2700,sr
00004CF8 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CFE 3CBC 8230                  		move.w	#$8230,(a6)
00004D02 3CBC 8407                  		move.w	#$8407,(a6)
00004D06 3CBC 9001                  		move.w	#$9001,(a6)
00004D0A 6100 C7DC                  		bsr.w	ClearScreen
00004D0E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004D18 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004D1E 6100 C944                  		bsr.w	NemDec
00004D22 4EB9 0000 0000             		jsr	Hud_Base
00004D28 46FC 2300                  		move	#$2300,sr
00004D2C 7011                       		moveq	#$11,d0
00004D2E 6100 D5D2                  		bsr.w	PalLoad2	; load results screen pallet
00004D32 7000                       		moveq	#0,d0
00004D34 6100 CAA0                  		bsr.w	LoadPLC2
00004D38 701B                       		moveq	#$1B,d0
00004D3A 6100 CA68                  		bsr.w	LoadPLC		; load results screen patterns
00004D3E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004D44 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004D4A 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004D4E C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004D52 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004D56 303C 008E                  		move.w	#$8E,d0
00004D5A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004D60 43F8 D000                  		lea	($FFFFD000).w,a1
00004D64 7000                       		moveq	#0,d0
00004D66 323C 07FF                  		move.w	#$7FF,d1
00004D6A                            
00004D6A                            SS_EndClrObjRam:
00004D6A 22C0                       		move.l	d0,(a1)+
00004D6C 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004D70                            
00004D70 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004D76                            
00004D76                            SS_NormalExit:
00004D76 6100 C854                  		bsr.w	PauseGame
00004D7A 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004D80 6100 DF38                  		bsr.w	DelayProgram
00004D84 4EB9 0000 0000             		jsr	ObjectsLoad
00004D8A 4EB9 0000 0000             		jsr	BuildSprites
00004D90 6100 CA7E                  		bsr.w	RunPLC_RAM
00004D94 4A78 FE02                  		tst.w	($FFFFFE02).w
00004D98 67DC                       		beq.s	SS_NormalExit
00004D9A 4AB8 F680                  		tst.l	($FFFFF680).w
00004D9E 66D6                       		bne.s	SS_NormalExit
00004DA0 303C 00CA                  		move.w	#$CA,d0
00004DA4 6100 C81A                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004DA8 6100 D3BC                  		bsr.w	Pal_MakeFlash
00004DAC 4E75                       		rts	
00004DAE                            ; ===========================================================================
00004DAE                            
00004DAE                            SS_ToSegaScreen:
00004DAE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004DB4 4E75                       		rts
00004DB6                            
00004DB6                            ; ---------------------------------------------------------------------------
00004DB6                            ; Special stage	background loading subroutine
00004DB6                            ; ---------------------------------------------------------------------------
00004DB6                            
00004DB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DB6                            
00004DB6                            
00004DB6                            SS_BGLoad:				; XREF: SpecialStage
00004DB6 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DBC 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004DC2 303C 4051                  		move.w	#$4051,d0
00004DC6 6100 CB7A                  		bsr.w	EniDec
00004DCA 263C 5000 0001             		move.l	#$50000001,d3
00004DD0 45F9 00FF 0080             		lea	($FF0080).l,a2
00004DD6 7E06                       		moveq	#6,d7
00004DD8                            
00004DD8                            loc_48BE:
00004DD8 2003                       		move.l	d3,d0
00004DDA 7C03                       		moveq	#3,d6
00004DDC 7800                       		moveq	#0,d4
00004DDE 0C47 0003                  		cmpi.w	#3,d7
00004DE2 6400                       		bcc.s	loc_48CC
00004DE4 7801                       		moveq	#1,d4
00004DE6                            
00004DE6                            loc_48CC:
00004DE6 7A07                       		moveq	#7,d5
00004DE8                            
00004DE8                            loc_48CE:
00004DE8 224A                       		movea.l	a2,a1
00004DEA 0A04 0001                  		eori.b	#1,d4
00004DEE 6600                       		bne.s	loc_48E2
00004DF0 0C47 0006                  		cmpi.w	#6,d7
00004DF4 6600                       		bne.s	loc_48F2
00004DF6 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DFC                            
00004DFC                            loc_48E2:
00004DFC 48E7 F800                  		movem.l	d0-d4,-(sp)
00004E00 7207                       		moveq	#7,d1
00004E02 7407                       		moveq	#7,d2
00004E04 6100 C83E                  		bsr.w	ShowVDPGraphics
00004E08 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004E0C                            
00004E0C                            loc_48F2:
00004E0C 0680 0010 0000             		addi.l	#$100000,d0
00004E12 51CD FFD4                  		dbf	d5,loc_48CE
00004E16 0680 0380 0000             		addi.l	#$3800000,d0
00004E1C 0A04 0001                  		eori.b	#1,d4
00004E20 51CE FFC4                  		dbf	d6,loc_48CC
00004E24 0683 1000 0000             		addi.l	#$10000000,d3
00004E2A 6A00                       		bpl.s	loc_491C
00004E2C 4843                       		swap	d3
00004E2E 0683 0000 C000             		addi.l	#$C000,d3
00004E34 4843                       		swap	d3
00004E36                            
00004E36                            loc_491C:
00004E36 D4FC 0080                  		adda.w	#$80,a2
00004E3A 51CF FF9C                  		dbf	d7,loc_48BE
00004E3E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E44 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004E4A 303C 4000                  		move.w	#$4000,d0
00004E4E 6100 CAF2                  		bsr.w	EniDec
00004E52 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E58 203C 4000 0003             		move.l	#$40000003,d0
00004E5E 723F                       		moveq	#$3F,d1
00004E60 741F                       		moveq	#$1F,d2
00004E62 6100 C7E0                  		bsr.w	ShowVDPGraphics
00004E66 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E6C 203C 5000 0003             		move.l	#$50000003,d0
00004E72 723F                       		moveq	#$3F,d1
00004E74 743F                       		moveq	#$3F,d2
00004E76 6100 C7CC                  		bsr.w	ShowVDPGraphics
00004E7A 4E75                       		rts	
00004E7C                            ; End of function SS_BGLoad
00004E7C                            
00004E7C                            ; ---------------------------------------------------------------------------
00004E7C                            ; Pallet cycling routine - special stage
00004E7C                            ; ---------------------------------------------------------------------------
00004E7C                            
00004E7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E7C                            
00004E7C                            
00004E7C                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004E7C 4A78 F63A                  		tst.w	($FFFFF63A).w
00004E80 6600                       		bne.s	locret_49E6
00004E82 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004E86 6A00                       		bpl.s	locret_49E6
00004E88 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E8E 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004E92 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004E96 0240 001F                  		andi.w	#$1F,d0
00004E9A E548                       		lsl.w	#2,d0
00004E9C 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004EA2 D0C0                       		adda.w	d0,a0
00004EA4 1018                       		move.b	(a0)+,d0
00004EA6 6A00                       		bpl.s	loc_4992
00004EA8 303C 01FF                  		move.w	#$1FF,d0
00004EAC                            
00004EAC                            loc_4992:
00004EAC 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004EB0 7000                       		moveq	#0,d0
00004EB2 1018                       		move.b	(a0)+,d0
00004EB4 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004EB8 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004EBE 43F1 0000                  		lea	(a1,d0.w),a1
00004EC2 303C 8200                  		move.w	#-$7E00,d0
00004EC6 1019                       		move.b	(a1)+,d0
00004EC8 3C80                       		move.w	d0,(a6)
00004ECA 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004ECE 303C 8400                  		move.w	#-$7C00,d0
00004ED2 1018                       		move.b	(a0)+,d0
00004ED4 3C80                       		move.w	d0,(a6)
00004ED6 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004EE0 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004EE8 7000                       		moveq	#0,d0
00004EEA 1018                       		move.b	(a0)+,d0
00004EEC 6B00                       		bmi.s	loc_49E8
00004EEE 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004EF4 D2C0                       		adda.w	d0,a1
00004EF6 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004EFA 24D9                       		move.l	(a1)+,(a2)+
00004EFC 24D9                       		move.l	(a1)+,(a2)+
00004EFE 24D9                       		move.l	(a1)+,(a2)+
00004F00                            
00004F00                            locret_49E6:
00004F00 4E75                       		rts	
00004F02                            ; ===========================================================================
00004F02                            
00004F02                            loc_49E8:				; XREF: PalCycle_SS
00004F02 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004F06 0C40 008A                  		cmpi.w	#$8A,d0
00004F0A 6500                       		bcs.s	loc_49F4
00004F0C 5241                       		addq.w	#1,d1
00004F0E                            
00004F0E                            loc_49F4:
00004F0E C2FC 002A                  		mulu.w	#$2A,d1
00004F12 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004F18 D2C1                       		adda.w	d1,a1
00004F1A 0240 007F                  		andi.w	#$7F,d0
00004F1E 0880 0000                  		bclr	#0,d0
00004F22 6700                       		beq.s	loc_4A18
00004F24 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004F28 24D1                       		move.l	(a1),(a2)+
00004F2A 24E9 0004                  		move.l	4(a1),(a2)+
00004F2E 24E9 0008                  		move.l	8(a1),(a2)+
00004F32                            
00004F32                            loc_4A18:
00004F32 D2FC 000C                  		adda.w	#$C,a1
00004F36 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004F3A 0C40 000A                  		cmpi.w	#$A,d0
00004F3E 6500                       		bcs.s	loc_4A2E
00004F40 0440 000A                  		subi.w	#$A,d0
00004F44 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004F48                            
00004F48                            loc_4A2E:
00004F48 3200                       		move.w	d0,d1
00004F4A D040                       		add.w	d0,d0
00004F4C D041                       		add.w	d1,d0
00004F4E D2C0                       		adda.w	d0,a1
00004F50 24D9                       		move.l	(a1)+,(a2)+
00004F52 34D9                       		move.w	(a1)+,(a2)+
00004F54 4E75                       		rts	
00004F56                            ; End of function PalCycle_SS
00004F56                            
00004F56                            ; ===========================================================================
00004F56 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004F66                            					; XREF: PalCycle_SS
00004F66 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004F76 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004F86 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004F96 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004FA6 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004FB6 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004FC6 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004FD6                            		even
00004FD6 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004FE4                            					; XREF: PalCycle_SS
00004FE4                            		even
00004FE4                            
00004FE4                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
0000502C                            		even
0000502C                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
000050FE                            		even
000050FE                            
000050FE                            ; ---------------------------------------------------------------------------
000050FE                            ; Subroutine to	make the special stage background animated
000050FE                            ; ---------------------------------------------------------------------------
000050FE                            
000050FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050FE                            
000050FE                            
000050FE                            SS_BGAnimate:				; XREF: SpecialStage
000050FE 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005102 6600                       		bne.s	loc_4BF6
00005104 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000510A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005110                            
00005110                            loc_4BF6:
00005110 0C40 0008                  		cmpi.w	#8,d0
00005114 6400                       		bcc.s	loc_4C4E
00005116 0C40 0006                  		cmpi.w	#6,d0
0000511A 6600                       		bne.s	loc_4C10
0000511C 5278 F718                  		addq.w	#1,($FFFFF718).w
00005120 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005124 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000512A                            
0000512A                            loc_4C10:
0000512A 7000                       		moveq	#0,d0
0000512C 3038 F708                  		move.w	($FFFFF708).w,d0
00005130 4440                       		neg.w	d0
00005132 4840                       		swap	d0
00005134 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000513A 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000513E 7609                       		moveq	#9,d3
00005140                            
00005140                            loc_4C26:
00005140 302B 0002                  		move.w	2(a3),d0
00005144 6100 DBA6                  		bsr.w	CalcSine
00005148 7400                       		moveq	#0,d2
0000514A 1419                       		move.b	(a1)+,d2
0000514C C1C2                       		muls.w	d2,d0
0000514E E080                       		asr.l	#8,d0
00005150 36C0                       		move.w	d0,(a3)+
00005152 1419                       		move.b	(a1)+,d2
00005154 4882                       		ext.w	d2
00005156 D55B                       		add.w	d2,(a3)+
00005158 51CB FFE6                  		dbf	d3,loc_4C26
0000515C 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005160 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005166 6000                       		bra.s	loc_4C7E
00005168                            ; ===========================================================================
00005168                            
00005168                            loc_4C4E:				; XREF: SS_BGAnimate
00005168 0C40 000C                  		cmpi.w	#$C,d0
0000516C 6600                       		bne.s	loc_4C74
0000516E 5378 F718                  		subq.w	#1,($FFFFF718).w
00005172 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005176 243C 0001 8000             		move.l	#$18000,d2
0000517C 7206                       		moveq	#6,d1
0000517E                            
0000517E                            loc_4C64:
0000517E 2013                       		move.l	(a3),d0
00005180 9082                       		sub.l	d2,d0
00005182 26C0                       		move.l	d0,(a3)+
00005184 0482 0000 2000             		subi.l	#$2000,d2
0000518A 51C9 FFF2                  		dbf	d1,loc_4C64
0000518E                            
0000518E                            loc_4C74:
0000518E 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005192 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005198                            
00005198                            loc_4C7E:
00005198 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000519C 3038 F718                  		move.w	($FFFFF718).w,d0
000051A0 4440                       		neg.w	d0
000051A2 4840                       		swap	d0
000051A4 7600                       		moveq	#0,d3
000051A6 161A                       		move.b	(a2)+,d3
000051A8 3438 F70C                  		move.w	($FFFFF70C).w,d2
000051AC 4442                       		neg.w	d2
000051AE 0242 00FF                  		andi.w	#$FF,d2
000051B2 E54A                       		lsl.w	#2,d2
000051B4                            
000051B4                            loc_4C9A:
000051B4 301B                       		move.w	(a3)+,d0
000051B6 544B                       		addq.w	#2,a3
000051B8 7200                       		moveq	#0,d1
000051BA 121A                       		move.b	(a2)+,d1
000051BC 5341                       		subq.w	#1,d1
000051BE                            
000051BE                            loc_4CA4:
000051BE 2380 2000                  		move.l	d0,(a1,d2.w)
000051C2 5842                       		addq.w	#4,d2
000051C4 0242 03FC                  		andi.w	#$3FC,d2
000051C8 51C9 FFF4                  		dbf	d1,loc_4CA4
000051CC 51CB FFE6                  		dbf	d3,loc_4C9A
000051D0 4E75                       		rts	
000051D2                            ; End of function SS_BGAnimate
000051D2                            
000051D2                            ; ===========================================================================
000051D2 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
000051DE                            		even
000051DE 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
000051E6                            		even
000051E6 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
000051FA                            		even
000051FA                            					; XREF: SS_BGAnimate
000051FA                            ; ===========================================================================
000051FA                            
000051FA                            ; ---------------------------------------------------------------------------
000051FA                            ; Continue screen
000051FA                            ; ---------------------------------------------------------------------------
000051FA                            
000051FA                            ContinueScreen:				; XREF: GameModeArray
000051FA 6100 CE40                  		bsr.w	Pal_FadeFrom
000051FE 46FC 2700                  		move	#$2700,sr
00005202 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005206 0200 00BF                  		andi.b	#$BF,d0
0000520A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005210 4DF9 00C0 0004             		lea	($C00004).l,a6
00005216 3CBC 8004                  		move.w	#$8004,(a6)
0000521A 3CBC 8700                  		move.w	#$8700,(a6)
0000521E 6100 C2C8                  		bsr.w	ClearScreen
00005222 43F8 D000                  		lea	($FFFFD000).w,a1
00005226 7000                       		moveq	#0,d0
00005228 323C 07FF                  		move.w	#$7FF,d1
0000522C                            
0000522C                            Cont_ClrObjRam:
0000522C 22C0                       		move.l	d0,(a1)+
0000522E 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005232                            
00005232 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000523C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005242 6100 C420                  		bsr.w	NemDec
00005246 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00005250 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005256 6100 C40C                  		bsr.w	NemDec
0000525A 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005264 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
0000526A 6100 C3F8                  		bsr.w	NemDec
0000526E 720A                       		moveq	#10,d1
00005270 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00005276 7012                       		moveq	#$12,d0
00005278 6100 D06C                  		bsr.w	PalLoad1	; load continue	screen pallet
0000527C 103C 0090                  		move.b	#$90,d0
00005280 6100 C338                  		bsr.w	PlaySound	; play continue	music
00005284 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
0000528A 42B8 F700                  		clr.l	($FFFFF700).w
0000528E 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00005296 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
0000529C 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000052A2 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000052A8 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000052AE 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000052B4 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000052BA 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000052C0 4EB9 0000 0000             		jsr	ObjectsLoad
000052C6 4EB9 0000 0000             		jsr	BuildSprites
000052CC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000052D0 0000 0040                  		ori.b	#$40,d0
000052D4 33C0 00C0 0004             		move.w	d0,($C00004).l
000052DA 6100 CCBA                  		bsr.w	Pal_FadeTo
000052DE                            
000052DE                            ; ---------------------------------------------------------------------------
000052DE                            ; Continue screen main loop
000052DE                            ; ---------------------------------------------------------------------------
000052DE                            
000052DE                            Cont_MainLoop:
000052DE 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000052E4 6100 D9D4                  		bsr.w	DelayProgram
000052E8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000052EE 6400                       		bcc.s	loc_4DF2
000052F0 46FC 2700                  		move	#$2700,sr
000052F4 3238 F614                  		move.w	($FFFFF614).w,d1
000052F8 82FC 003C                  		divu.w	#$3C,d1
000052FC 0281 0000 000F             		andi.l	#$F,d1
00005302 4EB9 0000 0000             		jsr	ContScrCounter
00005308 46FC 2300                  		move	#$2300,sr
0000530C                            
0000530C                            loc_4DF2:
0000530C 4EB9 0000 0000             		jsr	ObjectsLoad
00005312 4EB9 0000 0000             		jsr	BuildSprites
00005318 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000531E 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005320 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005326 64B6                       		bcc.s	Cont_MainLoop
00005328 4A78 F614                  		tst.w	($FFFFF614).w
0000532C 6600 FFB0                  		bne.w	Cont_MainLoop
00005330 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005336 4E75                       		rts	
00005338                            ; ===========================================================================
00005338                            
00005338                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005338 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000533E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005344 7000                       		moveq	#0,d0
00005346 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000534A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000534E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005352 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005356 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000535A 4E75                       		rts	
0000535C                            ; ===========================================================================
0000535C                            
0000535C                            ; ---------------------------------------------------------------------------
0000535C                            ; Object 80 - Continue screen elements
0000535C                            ; ---------------------------------------------------------------------------
0000535C                            
0000535C                            Obj80:					; XREF: Obj_Index
0000535C 7000                       		moveq	#0,d0
0000535E 1028 0024                  		move.b	$24(a0),d0
00005362 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005366 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000536A                            ; ===========================================================================
0000536A 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
0000536C 0000                       		dc.w Obj80_Display-Obj80_Index
0000536E 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005370 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005372                            ; ===========================================================================
00005372                            
00005372                            Obj80_Main:				; XREF: Obj80_Index
00005372 5428 0024                  		addq.b	#2,$24(a0)
00005376 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000537E 317C 8500 0002             		move.w	#$8500,2(a0)
00005384 117C 0000 0001             		move.b	#0,1(a0)
0000538A 117C 003C 0019             		move.b	#$3C,$19(a0)
00005390 317C 0120 0008             		move.w	#$120,8(a0)
00005396 317C 00C0 000A             		move.w	#$C0,$A(a0)
0000539C 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000053A2                            
000053A2                            Obj80_Display:				; XREF: Obj80_Index
000053A2 4EF9 0000 0000             		jmp	DisplaySprite
000053A8                            ; ===========================================================================
000053A8                            Obj80_MiniSonicPos:
000053A8 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000053BA 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000053C6                            ; ===========================================================================
000053C6                            
000053C6                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000053C6 2248                       		movea.l	a0,a1
000053C8 45F9 0000 53A8             		lea	(Obj80_MiniSonicPos).l,a2
000053CE 7200                       		moveq	#0,d1
000053D0 1238 FE18                  		move.b	($FFFFFE18).w,d1
000053D4 5501                       		subq.b	#2,d1
000053D6 6400                       		bcc.s	loc_4EC4
000053D8 4EF9 0000 0000             		jmp	DeleteObject
000053DE                            ; ===========================================================================
000053DE                            
000053DE                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
000053DE 7601                       		moveq	#1,d3
000053E0 0C01 000E                  		cmpi.b	#$E,d1
000053E4 6500                       		bcs.s	loc_4ED0
000053E6 7600                       		moveq	#0,d3
000053E8 720E                       		moveq	#$E,d1
000053EA                            
000053EA                            loc_4ED0:
000053EA 1401                       		move.b	d1,d2
000053EC 0202 0001                  		andi.b	#1,d2
000053F0                            
000053F0                            Obj80_MiniSonLoop:
000053F0 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000053F4 335A 0008                  		move.w	(a2)+,8(a1)
000053F8 4A02                       		tst.b	d2
000053FA 6700                       		beq.s	loc_4EEA
000053FC 0469 000A 0008             		subi.w	#$A,8(a1)
00005402                            
00005402                            loc_4EEA:
00005402 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005408 137C 0006 001A             		move.b	#6,$1A(a1)
0000540E 137C 0006 0024             		move.b	#6,$24(a1)
00005414 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
0000541C 337C 8551 0002             		move.w	#$8551,2(a1)
00005422 137C 0000 0001             		move.b	#0,1(a1)
00005428 43E9 0040                  		lea	$40(a1),a1
0000542C 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005430 43E9 FFC0                  		lea	-$40(a1),a1
00005434 1343 0028                  		move.b	d3,$28(a1)
00005438                            
00005438                            Obj80_ChkType:				; XREF: Obj80_Index
00005438 4A28 0028                  		tst.b	$28(a0)
0000543C 6700                       		beq.s	loc_4F40
0000543E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005444 6500                       		bcs.s	loc_4F40
00005446 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000544A 0200 0001                  		andi.b	#1,d0
0000544E 6600                       		bne.s	loc_4F40
00005450 4A78 D010                  		tst.w	($FFFFD010).w
00005454 6600                       		bne.s	Obj80_Delete
00005456 4E75                       		rts	
00005458                            ; ===========================================================================
00005458                            
00005458                            loc_4F40:				; XREF: Obj80_ChkType
00005458 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000545C 0200 000F                  		andi.b	#$F,d0
00005460 6600                       		bne.s	Obj80_Display2
00005462 0868 0000 001A             		bchg	#0,$1A(a0)
00005468                            
00005468                            Obj80_Display2:
00005468 4EF9 0000 0000             		jmp	DisplaySprite
0000546E                            ; ===========================================================================
0000546E                            
0000546E                            Obj80_Delete:				; XREF: Obj80_ChkType
0000546E 4EF9 0000 0000             		jmp	DeleteObject
00005474                            ; ===========================================================================
00005474                            
00005474                            ; ---------------------------------------------------------------------------
00005474                            ; Object 81 - Sonic on the continue screen
00005474                            ; ---------------------------------------------------------------------------
00005474                            
00005474                            Obj81:					; XREF: Obj_Index
00005474 7000                       		moveq	#0,d0
00005476 1028 0024                  		move.b	$24(a0),d0
0000547A 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
0000547E 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005482 4EF9 0000 0000             		jmp	DisplaySprite
00005488                            ; ===========================================================================
00005488 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000548A 0000                       		dc.w Obj81_ChkLand-Obj81_Index
0000548C 0000                       		dc.w Obj81_Animate-Obj81_Index
0000548E 0000                       		dc.w Obj81_Run-Obj81_Index
00005490                            ; ===========================================================================
00005490                            
00005490                            Obj81_Main:				; XREF: Obj81_Index
00005490 5428 0024                  		addq.b	#2,$24(a0)
00005494 317C 00A0 0008             		move.w	#$A0,8(a0)
0000549A 317C 00C0 000C             		move.w	#$C0,$C(a0)
000054A0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000054A8 317C 0780 0002             		move.w	#$780,2(a0)
000054AE 117C 0004 0001             		move.b	#4,1(a0)
000054B4 117C 0002 0018             		move.b	#2,$18(a0)
000054BA 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000054C0 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000054C6                            
000054C6                            Obj81_ChkLand:				; XREF: Obj81_Index
000054C6 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000054CC 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000054CE 5428 0024                  		addq.b	#2,$24(a0)
000054D2 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
000054D6 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000054DE 317C 8500 0002             		move.w	#$8500,2(a0)
000054E4 117C 0000 001C             		move.b	#0,$1C(a0)
000054EA 6000                       		bra.s	Obj81_Animate
000054EC                            ; ===========================================================================
000054EC                            
000054EC                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000054EC 4EB9 0000 0000             		jsr	SpeedToPos
000054F2 4EB9 0000 0000             		jsr	Sonic_Animate
000054F8 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000054FE                            ; ===========================================================================
000054FE                            
000054FE                            Obj81_Animate:				; XREF: Obj81_Index
000054FE 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005502 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005504 43F9 0000 0000             		lea	(Ani_obj81).l,a1
0000550A 4EF9 0000 0000             		jmp	AnimateSprite
00005510                            ; ===========================================================================
00005510                            
00005510                            Obj81_GetUp:				; XREF: Obj81_Animate
00005510 5428 0024                  		addq.b	#2,$24(a0)
00005514 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000551C 317C 0780 0002             		move.w	#$780,2(a0)
00005522 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005528 4268 0014                  		clr.w	$14(a0)
0000552C 5168 000C                  		subq.w	#8,$C(a0)
00005530 103C 00E0                  		move.b	#$E0,d0
00005534 6100 C08A                  		bsr.w	PlaySound_Special ; fade out music
00005538                            
00005538                            Obj81_Run:				; XREF: Obj81_Index
00005538 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000553E 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005540 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005546 6000                       		bra.s	Obj81_ShowRun
00005548                            ; ===========================================================================
00005548                            
00005548                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005548 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000554E                            
0000554E                            Obj81_ShowRun:				; XREF: Obj81_Run
0000554E 4EB9 0000 0000             		jsr	SpeedToPos
00005554 4EB9 0000 0000             		jsr	Sonic_Animate
0000555A 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005560                            ; ===========================================================================
00005560                            Ani_obj81:
00005560                            	include "_anim\obj81.asm"
00005560                            ; ---------------------------------------------------------------------------
00005560                            ; Animation script - Sonic on the continue screen
00005560                            ; ---------------------------------------------------------------------------
00005560 0000                       		dc.w byte_504A-Ani_obj81
00005562 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000556E 00                         		even
0000556E 00                         		even
0000556E                            
0000556E                            ; ---------------------------------------------------------------------------
0000556E                            ; Sprite mappings - Continue screen
0000556E                            ; ---------------------------------------------------------------------------
0000556E                            Map_obj80:
0000556E                            	include "_maps\obj80.asm"
0000556E                            ; ---------------------------------------------------------------------------
0000556E                            ; Sprite mappings - Continue screen
0000556E                            ; ---------------------------------------------------------------------------
0000556E 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005572 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005576 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
0000557A 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
0000557E 0B                         byte_5066:	dc.b $B
0000557F F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005584 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005589 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000558E F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005593 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005598 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
0000559D F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000055A2 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000055A7 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000055AC 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000055B1 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000055B6 03                         byte_509E:	dc.b 3
000055B7 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000055BC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000055C1 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000055C6 03                         byte_50AE:	dc.b 3
000055C7 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000055CC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000055D1 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000055D6 03                         byte_50BE:	dc.b 3
000055D7 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000055DC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000055E1 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000055E6 02                         byte_50CE:	dc.b 2
000055E7 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000055EC 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000055F1 01                         byte_50D9:	dc.b 1
000055F2 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000055F7 01                         byte_50DF:	dc.b 1
000055F8 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000055FE 00                         		even
000055FE 00                         		even
000055FE                            
000055FE                            ; ===========================================================================
000055FE                            ; ---------------------------------------------------------------------------
000055FE                            ; Ending sequence in Green Hill	Zone
000055FE                            ; ---------------------------------------------------------------------------
000055FE                            
000055FE                            EndingSequence:				; XREF: GameModeArray
000055FE 103C 00E4                  		move.b	#$E4,d0
00005602 6100 BFBC                  		bsr.w	PlaySound_Special ; stop music
00005606 6100 CA34                  		bsr.w	Pal_FadeFrom
0000560A 43F8 D000                  		lea	($FFFFD000).w,a1
0000560E 7000                       		moveq	#0,d0
00005610 323C 07FF                  		move.w	#$7FF,d1
00005614                            
00005614                            End_ClrObjRam:
00005614 22C0                       		move.l	d0,(a1)+
00005616 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000561A                            
0000561A 43F8 F628                  		lea	($FFFFF628).w,a1
0000561E 7000                       		moveq	#0,d0
00005620 323C 0015                  		move.w	#$15,d1
00005624                            
00005624                            End_ClrRam:
00005624 22C0                       		move.l	d0,(a1)+
00005626 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
0000562A                            
0000562A 43F8 F700                  		lea	($FFFFF700).w,a1
0000562E 7000                       		moveq	#0,d0
00005630 323C 003F                  		move.w	#$3F,d1
00005634                            
00005634                            End_ClrRam2:
00005634 22C0                       		move.l	d0,(a1)+
00005636 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000563A                            
0000563A 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000563E 7000                       		moveq	#0,d0
00005640 323C 0047                  		move.w	#$47,d1
00005644                            
00005644                            End_ClrRam3:
00005644 22C0                       		move.l	d0,(a1)+
00005646 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
0000564A                            
0000564A 46FC 2700                  		move	#$2700,sr
0000564E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005652 0200 00BF                  		andi.b	#$BF,d0
00005656 33C0 00C0 0004             		move.w	d0,($C00004).l
0000565C 6100 BE8A                  		bsr.w	ClearScreen
00005660 4DF9 00C0 0004             		lea	($C00004).l,a6
00005666 3CBC 8B03                  		move.w	#$8B03,(a6)
0000566A 3CBC 8230                  		move.w	#$8230,(a6)
0000566E 3CBC 8407                  		move.w	#$8407,(a6)
00005672 3CBC 857C                  		move.w	#$857C,(a6)
00005676 3CBC 9001                  		move.w	#$9001,(a6)
0000567A 3CBC 8004                  		move.w	#$8004,(a6)
0000567E 3CBC 8720                  		move.w	#$8720,(a6)
00005682 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005688 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000568C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005692 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005698 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000569E 6700                       		beq.s	End_LoadData	; if yes, branch
000056A0 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000056A6                            
000056A6                            End_LoadData:
000056A6 701C                       		moveq	#$1C,d0
000056A8 6100 C266                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000056AC 4EB9 0000 0000             		jsr	Hud_Base
000056B2 6100 0000                  		bsr.w	LevelSizeLoad
000056B6 6100 0000                  		bsr.w	DeformBgLayer
000056BA 08F8 0002 F754             		bset	#2,($FFFFF754).w
000056C0 6100 0000                  		bsr.w	MainLoadBlockLoad
000056C4 6100 0000                  		bsr.w	LoadTilesFromStart
000056C8 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000056D0 46FC 2300                  		move	#$2300,sr
000056D4 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000056DA 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000056DE 6100 C3E0                  		bsr.w	KosDec
000056E2 7003                       		moveq	#3,d0
000056E4 6100 CC00                  		bsr.w	PalLoad1	; load Sonic's pallet
000056E8 303C 008B                  		move.w	#$8B,d0
000056EC 6100 BECC                  		bsr.w	PlaySound	; play ending sequence music
000056F0 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000056F6 6700                       		beq.s	End_LoadSonic	; if not, branch
000056F8 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000056FE                            
000056FE                            End_LoadSonic:
000056FE 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005704 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
0000570A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005710 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005716 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
0000571C 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005722 4EB9 0000 0000             		jsr	ObjPosLoad
00005728 4EB9 0000 0000             		jsr	ObjectsLoad
0000572E 4EB9 0000 0000             		jsr	BuildSprites
00005734 7000                       		moveq	#0,d0
00005736 31C0 FE20                  		move.w	d0,($FFFFFE20).w
0000573A 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000573E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005742 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005746 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
0000574A 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000574E 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005752 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005756 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000575A 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000575E 6100 EEDA                  		bsr.w	OscillateNumInit
00005762 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005768 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000576E 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005774 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000577A 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005780 6100 D538                  		bsr.w	DelayProgram
00005784 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005788 0000 0040                  		ori.b	#$40,d0
0000578C 33C0 00C0 0004             		move.w	d0,($C00004).l
00005792 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005798 6100 C7FC                  		bsr.w	Pal_FadeTo
0000579C                            
0000579C                            ; ---------------------------------------------------------------------------
0000579C                            ; Main ending sequence loop
0000579C                            ; ---------------------------------------------------------------------------
0000579C                            
0000579C                            End_MainLoop:
0000579C 6100 BE2E                  		bsr.w	PauseGame
000057A0 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000057A6 6100 D512                  		bsr.w	DelayProgram
000057AA 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000057AE 6100 0000                  		bsr.w	End_MoveSonic
000057B2 4EB9 0000 0000             		jsr	ObjectsLoad
000057B8 6100 0000                  		bsr.w	DeformBgLayer
000057BC 4EB9 0000 0000             		jsr	BuildSprites
000057C2 4EB9 0000 0000             		jsr	ObjPosLoad
000057C8 6100 C396                  		bsr.w	PalCycle_Load
000057CC 6100 EEC2                  		bsr.w	OscillateNumDo
000057D0 6100 EF4E                  		bsr.w	ChangeRingFrame
000057D4 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000057DA 6700                       		beq.s	loc_52DA	; if yes, branch
000057DC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000057E2 103C 0091                  		move.b	#$91,d0
000057E6 6100 BDD8                  		bsr.w	PlaySound_Special ; play credits music
000057EA 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000057F0 4E75                       		rts	
000057F2                            ; ===========================================================================
000057F2                            
000057F2                            loc_52DA:
000057F2 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000057F6 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000057FA                            
000057FA 4278 FE02                  		clr.w	($FFFFFE02).w
000057FE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005804 4278 F794                  		clr.w	($FFFFF794).w
00005808                            
00005808                            End_AllEmlds:				; XREF: loc_5334
00005808 6100 BDC2                  		bsr.w	PauseGame
0000580C 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005812 6100 D4A6                  		bsr.w	DelayProgram
00005816 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000581A 6100 0000                  		bsr.w	End_MoveSonic
0000581E 4EB9 0000 0000             		jsr	ObjectsLoad
00005824 6100 0000                  		bsr.w	DeformBgLayer
00005828 4EB9 0000 0000             		jsr	BuildSprites
0000582E 4EB9 0000 0000             		jsr	ObjPosLoad
00005834 6100 EE5A                  		bsr.w	OscillateNumDo
00005838 6100 EEE6                  		bsr.w	ChangeRingFrame
0000583C 5378 F794                  		subq.w	#1,($FFFFF794).w
00005840 6A00                       		bpl.s	loc_5334
00005842 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005848 6100 C93C                  		bsr.w	Pal_ToWhite
0000584C                            
0000584C                            loc_5334:
0000584C 4A78 FE02                  		tst.w	($FFFFFE02).w
00005850 6700 FFB6                  		beq.w	End_AllEmlds
00005854 4278 FE02                  		clr.w	($FFFFFE02).w
00005858 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000585E 4BF9 00C0 0004             		lea	($C00004).l,a5
00005864 4DF9 00C0 0000             		lea	($C00000).l,a6
0000586A 47F8 F700                  		lea	($FFFFF700).w,a3
0000586E 49F8 A400                  		lea	($FFFFA400).w,a4
00005872 343C 4000                  		move.w	#$4000,d2
00005876 6100 0000                  		bsr.w	LoadTilesFromStart2
0000587A 7013                       		moveq	#$13,d0
0000587C 6100 CA68                  		bsr.w	PalLoad1	; load ending pallet
00005880 6100 C838                  		bsr.w	Pal_MakeWhite
00005884 6000 FF16                  		bra.w	End_MainLoop
00005888                            
00005888                            ; ---------------------------------------------------------------------------
00005888                            ; Subroutine controlling Sonic on the ending sequence
00005888                            ; ---------------------------------------------------------------------------
00005888                            
00005888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005888                            
00005888                            
00005888                            End_MoveSonic:				; XREF: End_MainLoop
00005888 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
0000588C 6600                       		bne.s	End_MoveSonic2
0000588E 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005894 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005896 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000589A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000058A0 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000058A6 4E75                       		rts	
000058A8                            ; ===========================================================================
000058A8                            
000058A8                            End_MoveSonic2:				; XREF: End_MoveSonic
000058A8 5500                       		subq.b	#2,d0
000058AA 6600                       		bne.s	End_MoveSonic3
000058AC 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000058B2 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000058B4 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000058B8 7000                       		moveq	#0,d0
000058BA 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000058BE 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000058C2 31C0 D014                  		move.w	d0,($FFFFD014).w
000058C6 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000058CC 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000058D2 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000058D8 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000058DE 4E75                       		rts	
000058E0                            ; ===========================================================================
000058E0                            
000058E0                            End_MoveSonic3:				; XREF: End_MoveSonic
000058E0 5500                       		subq.b	#2,d0
000058E2 6600                       		bne.s	End_MoveSonExit
000058E4 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000058E8 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000058EE 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000058F4 4278 D024                  		clr.w	($FFFFD024).w
000058F8                            
000058F8                            End_MoveSonExit:
000058F8 4E75                       		rts	
000058FA                            ; End of function End_MoveSonic
000058FA                            
000058FA                            ; ===========================================================================
000058FA                            ; ---------------------------------------------------------------------------
000058FA                            ; Object 87 - Sonic on ending sequence
000058FA                            ; ---------------------------------------------------------------------------
000058FA                            
000058FA                            Obj87:					; XREF: Obj_Index
000058FA 7000                       		moveq	#0,d0
000058FC 1028 0025                  		move.b	$25(a0),d0
00005900 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005904 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005908 4EF9 0000 0000             		jmp	DisplaySprite
0000590E                            ; ===========================================================================
0000590E 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005912 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005916 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
0000591A 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
0000591E 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005922                            ; ===========================================================================
00005922                            
00005922                            Obj87_Main:				; XREF: Obj87_Index
00005922 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005928 6700                       		beq.s	Obj87_Main2	; if yes, branch
0000592A 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005930 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005936 4E75                       		rts	
00005938                            ; ===========================================================================
00005938                            
00005938                            Obj87_Main2:				; XREF: Obj87_Main
00005938 5428 0025                  		addq.b	#2,$25(a0)
0000593C 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005944 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000594A 117C 0004 0001             		move.b	#4,1(a0)
00005950 4228 0022                  		clr.b	$22(a0)
00005954 117C 0002 0018             		move.b	#2,$18(a0)
0000595A 117C 0000 001A             		move.b	#0,$1A(a0)
00005960 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005966                            
00005966                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005966 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000596A 6600                       		bne.s	Obj87_Wait
0000596C 5428 0025                  		addq.b	#2,$25(a0)
00005970 317C 0001 001C             		move.w	#1,$1C(a0)
00005976 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
0000597C                            
0000597C                            Obj87_Wait:
0000597C 4E75                       		rts	
0000597E                            ; ===========================================================================
0000597E                            
0000597E                            Obj87_LookUp:				; XREF: Obj87_Index
0000597E 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005986 6600                       		bne.s	locret_5480
00005988 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
0000598E 317C 005A 0030             		move.w	#$5A,$30(a0)
00005994 5428 0025                  		addq.b	#2,$25(a0)
00005998                            
00005998                            locret_5480:
00005998 4E75                       		rts	
0000599A                            ; ===========================================================================
0000599A                            
0000599A                            Obj87_ClrObjRam:			; XREF: Obj87_Index
0000599A 5368 0030                  		subq.w	#1,$30(a0)
0000599E 6600                       		bne.s	Obj87_Wait2
000059A0 43F8 D400                  		lea	($FFFFD400).w,a1
000059A4 323C 00FF                  		move.w	#$FF,d1
000059A8                            
000059A8                            Obj87_ClrLoop:
000059A8 4299                       		clr.l	(a1)+
000059AA 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000059AE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000059B4 5428 0025                  		addq.b	#2,$25(a0)
000059B8 117C 0001 001C             		move.b	#1,$1C(a0)
000059BE 317C 003C 0030             		move.w	#$3C,$30(a0)
000059C4                            
000059C4                            Obj87_Wait2:
000059C4 4E75                       		rts	
000059C6                            ; ===========================================================================
000059C6                            
000059C6                            Obj87_MakeLogo:				; XREF: Obj87_Index
000059C6 5368 0030                  		subq.w	#1,$30(a0)
000059CA 6600                       		bne.s	Obj87_Wait3
000059CC 5428 0025                  		addq.b	#2,$25(a0)
000059D0 317C 00B4 0030             		move.w	#$B4,$30(a0)
000059D6 117C 0002 001C             		move.b	#2,$1C(a0)
000059DC 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000059E2                            
000059E2                            Obj87_Wait3:
000059E2 4E75                       		rts	
000059E4                            ; ===========================================================================
000059E4                            
000059E4                            Obj87_Animate:				; XREF: Obj87_Index
000059E4 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000059EA 4EF9 0000 0000             		jmp	AnimateSprite
000059F0                            ; ===========================================================================
000059F0                            
000059F0                            Obj87_Leap:				; XREF: Obj87_Index
000059F0 5368 0030                  		subq.w	#1,$30(a0)
000059F4 6600                       		bne.s	Obj87_Wait4
000059F6 5428 0025                  		addq.b	#2,$25(a0)
000059FA 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005A02 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A08 117C 0004 0001             		move.b	#4,1(a0)
00005A0E 4228 0022                  		clr.b	$22(a0)
00005A12 117C 0002 0018             		move.b	#2,$18(a0)
00005A18 117C 0005 001A             		move.b	#5,$1A(a0)
00005A1E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005A24 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005A2A 60B8                       		bra.s	Obj87_Animate
00005A2C                            ; ===========================================================================
00005A2C                            
00005A2C                            Obj87_Wait4:				; XREF: Obj87_Leap
00005A2C 4E75                       		rts	
00005A2E                            ; ===========================================================================
00005A2E                            Ani_obj87:
00005A2E                            	include "_anim\obj87.asm"
00005A2E                            ; ---------------------------------------------------------------------------
00005A2E                            ; Animation script - Sonic on the ending sequence
00005A2E                            ; ---------------------------------------------------------------------------
00005A2E 0000                       		dc.w byte_551C-Ani_obj87
00005A30 0000                       		dc.w byte_552A-Ani_obj87
00005A32 0000                       		dc.w byte_5534-Ani_obj87
00005A34 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005A42 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005A4C 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005A54                            		even
00005A54                            		even
00005A54                            
00005A54                            ; ===========================================================================
00005A54                            ; ---------------------------------------------------------------------------
00005A54                            ; Object 88 - chaos emeralds on	the ending sequence
00005A54                            ; ---------------------------------------------------------------------------
00005A54                            
00005A54                            Obj88:					; XREF: Obj_Index
00005A54 7000                       		moveq	#0,d0
00005A56 1028 0024                  		move.b	$24(a0),d0
00005A5A 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005A5E 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005A62 4EF9 0000 0000             		jmp	DisplaySprite
00005A68                            ; ===========================================================================
00005A68 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005A6A 0000                       		dc.w Obj88_Move-Obj88_Index
00005A6C                            ; ===========================================================================
00005A6C                            
00005A6C                            Obj88_Main:				; XREF: Obj88_Index
00005A6C 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005A72 6700                       		beq.s	Obj88_Main2
00005A74 588F                       		addq.l	#4,sp
00005A76 4E75                       		rts	
00005A78                            ; ===========================================================================
00005A78                            
00005A78                            Obj88_Main2:				; XREF: Obj88_Main
00005A78 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005A7E 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005A84 2248                       		movea.l	a0,a1
00005A86 7600                       		moveq	#0,d3
00005A88 7401                       		moveq	#1,d2
00005A8A 7205                       		moveq	#5,d1
00005A8C                            
00005A8C                            Obj88_MainLoop:
00005A8C 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005A90 5429 0024                  		addq.b	#2,$24(a1)
00005A94 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005A9C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005AA2 137C 0004 0001             		move.b	#4,1(a1)
00005AA8 137C 0001 0018             		move.b	#1,$18(a1)
00005AAE 3368 0008 0038             		move.w	8(a0),$38(a1)
00005AB4 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005ABA 1342 001C                  		move.b	d2,$1C(a1)
00005ABE 1342 001A                  		move.b	d2,$1A(a1)
00005AC2 5202                       		addq.b	#1,d2
00005AC4 1343 0026                  		move.b	d3,$26(a1)
00005AC8 0603 002A                  		addi.b	#$2A,d3
00005ACC 43E9 0040                  		lea	$40(a1),a1
00005AD0 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005AD4                            
00005AD4                            Obj88_Move:				; XREF: Obj88_Index
00005AD4 3028 003E                  		move.w	$3E(a0),d0
00005AD8 D168 0026                  		add.w	d0,$26(a0)
00005ADC 1028 0026                  		move.b	$26(a0),d0
00005AE0 4EB9 0000 2CEC             		jsr	(CalcSine).l
00005AE6 7800                       		moveq	#0,d4
00005AE8 1828 003C                  		move.b	$3C(a0),d4
00005AEC C3C4                       		muls.w	d4,d1
00005AEE E081                       		asr.l	#8,d1
00005AF0 C1C4                       		muls.w	d4,d0
00005AF2 E080                       		asr.l	#8,d0
00005AF4 D268 0038                  		add.w	$38(a0),d1
00005AF8 D068 003A                  		add.w	$3A(a0),d0
00005AFC 3141 0008                  		move.w	d1,8(a0)
00005B00 3140 000C                  		move.w	d0,$C(a0)
00005B04 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005B0A 6700                       		beq.s	loc_55FA
00005B0C 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005B12                            
00005B12                            loc_55FA:
00005B12 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005B18 6700                       		beq.s	loc_5608
00005B1A 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005B20                            
00005B20                            loc_5608:
00005B20 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005B26 6700                       		beq.s	locret_5614
00005B28 5368 003A                  		subq.w	#1,$3A(a0)
00005B2C                            
00005B2C                            locret_5614:
00005B2C 4E75                       		rts	
00005B2E                            ; ===========================================================================
00005B2E                            ; ---------------------------------------------------------------------------
00005B2E                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005B2E                            ; ---------------------------------------------------------------------------
00005B2E                            
00005B2E                            Obj89:					; XREF: Obj_Index
00005B2E 7000                       		moveq	#0,d0
00005B30 1028 0024                  		move.b	$24(a0),d0
00005B34 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005B38 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005B3C                            ; ===========================================================================
00005B3C 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005B3E 0000                       		dc.w Obj89_Move-Obj89_Index
00005B40 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005B42                            ; ===========================================================================
00005B42                            
00005B42                            Obj89_Main:				; XREF: Obj89_Index
00005B42 5428 0024                  		addq.b	#2,$24(a0)
00005B46 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005B4C 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005B52 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005B5A 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005B60 117C 0000 0001             		move.b	#0,1(a0)
00005B66 117C 0000 0018             		move.b	#0,$18(a0)
00005B6C                            
00005B6C                            Obj89_Move:				; XREF: Obj89_Index
00005B6C 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005B72 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005B74 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005B7A 4EB9 0000 0000             		jsr	DisplaySprite
00005B80                            ; ===========================================================================
00005B80                            
00005B80                            Obj89_Delay:				; XREF: Obj89_Move
00005B80 5428 0024                  		addq.b	#2,$24(a0)
00005B84 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005B8A                            
00005B8A                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005B8A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005B8E 6A00                       		bpl.s	Obj89_Display
00005B90 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005B96                            
00005B96                            Obj89_Display:
00005B96 4EB9 0000 0000             		jsr	DisplaySprite
00005B9C                            ; ===========================================================================
00005B9C                            ; ---------------------------------------------------------------------------
00005B9C                            ; Sprite mappings - Sonic on the ending	sequence
00005B9C                            ; ---------------------------------------------------------------------------
00005B9C                            Map_obj87:
00005B9C                            	include "_maps\obj87.asm"
00005B9C                            ; ---------------------------------------------------------------------------
00005B9C                            ; Sprite mappings - Sonic on the ending	sequence
00005B9C                            ; ---------------------------------------------------------------------------
00005B9C 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005BA0 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005BA4 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005BA8 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005BAC 02                         byte_5690:	dc.b 2
00005BAD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005BB2 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005BB7 03                         byte_569B:	dc.b 3
00005BB8 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005BBD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005BC2 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005BC7 02                         byte_56AB:	dc.b 2
00005BC8 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005BCD FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005BD2 02                         byte_56B6:	dc.b 2
00005BD3 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005BD8 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005BDD 02                         byte_56C1:	dc.b 2
00005BDE EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005BE3 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005BE8 03                         byte_56CC:	dc.b 3
00005BE9 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005BEE EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005BF3 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005BF8 07                         byte_56DC:	dc.b 7
00005BF9 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005BFE BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005C03 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005C08 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005C0D DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005C12 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005C17 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005C1C 18                         byte_5700:	dc.b $18
00005C1D 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005C22 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005C27 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005C2C 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005C31 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005C36 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005C3B 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005C40 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005C45 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005C4A B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005C4F A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005C54 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005C59 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005C5E B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005C63 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005C68 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005C6D D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005C72 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005C77 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005C7C E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005C81 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005C86 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005C8B F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005C90 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005C96 00                         		even
00005C96 00                         		even
00005C96                            
00005C96                            ; ---------------------------------------------------------------------------
00005C96                            ; Sprite mappings - chaos emeralds on the ending sequence
00005C96                            ; ---------------------------------------------------------------------------
00005C96                            Map_obj88:
00005C96                            	include "_maps\obj88.asm"
00005C96                            ; ---------------------------------------------------------------------------
00005C96                            ; Sprite mappings - chaos emeralds on the ending sequence
00005C96                            ; ---------------------------------------------------------------------------
00005C96 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005C9A 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005C9E 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005CA2 0000                       		dc.w byte_57AC-Map_obj88
00005CA4 01                         byte_5788:	dc.b 1
00005CA5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005CAA 01                         byte_578E:	dc.b 1
00005CAB F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005CB0 01                         byte_5794:	dc.b 1
00005CB1 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005CB6 01                         byte_579A:	dc.b 1
00005CB7 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005CBC 01                         byte_57A0:	dc.b 1
00005CBD F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005CC2 01                         byte_57A6:	dc.b 1
00005CC3 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005CC8 01                         byte_57AC:	dc.b 1
00005CC9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005CCE                            		even
00005CCE                            		even
00005CCE                            
00005CCE                            ; ---------------------------------------------------------------------------
00005CCE                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005CCE                            ; ---------------------------------------------------------------------------
00005CCE                            Map_obj89:
00005CCE                            	include "_maps\obj89.asm"
00005CCE                            ; ---------------------------------------------------------------------------
00005CCE                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005CCE                            ; ---------------------------------------------------------------------------
00005CCE 0000                       		dc.w byte_57B4-Map_obj89
00005CD0 03                         byte_57B4:	dc.b 3
00005CD1 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005CD6 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005CDB F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005CE0                            		even
00005CE0                            		even
00005CE0                            
00005CE0                            ; ===========================================================================
00005CE0                            ; ---------------------------------------------------------------------------
00005CE0                            ; Credits ending sequence
00005CE0                            ; ---------------------------------------------------------------------------
00005CE0                            
00005CE0                            Credits:				; XREF: GameModeArray
00005CE0 6100 BB20                  		bsr.w	ClearPLC
00005CE4 6100 C356                  		bsr.w	Pal_FadeFrom
00005CE8 4DF9 00C0 0004             		lea	($C00004).l,a6
00005CEE 3CBC 8004                  		move.w	#$8004,(a6)
00005CF2 3CBC 8230                  		move.w	#$8230,(a6)
00005CF6 3CBC 8407                  		move.w	#$8407,(a6)
00005CFA 3CBC 9001                  		move.w	#$9001,(a6)
00005CFE 3CBC 9200                  		move.w	#$9200,(a6)
00005D02 3CBC 8B03                  		move.w	#$8B03,(a6)
00005D06 3CBC 8720                  		move.w	#$8720,(a6)
00005D0A 4238 F64E                  		clr.b	($FFFFF64E).w
00005D0E 6100 B7D8                  		bsr.w	ClearScreen
00005D12 43F8 D000                  		lea	($FFFFD000).w,a1
00005D16 7000                       		moveq	#0,d0
00005D18 323C 07FF                  		move.w	#$7FF,d1
00005D1C                            
00005D1C                            Cred_ClrObjRam:
00005D1C 22C0                       		move.l	d0,(a1)+
00005D1E 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005D22                            
00005D22 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005D2C 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005D32 6100 B930                  		bsr.w	NemDec
00005D36 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005D3A 7000                       		moveq	#0,d0
00005D3C 323C 001F                  		move.w	#$1F,d1
00005D40                            
00005D40                            Cred_ClrPallet:
00005D40 22C0                       		move.l	d0,(a1)+
00005D42 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005D46                            
00005D46 7003                       		moveq	#3,d0
00005D48 6100 C59C                  		bsr.w	PalLoad1	; load Sonic's pallet
00005D4C 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005D52 4EB9 0000 0000             		jsr	ObjectsLoad
00005D58 4EB9 0000 0000             		jsr	BuildSprites
00005D5E 6100 0000                  		bsr.w	EndingDemoLoad
00005D62 7000                       		moveq	#0,d0
00005D64 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005D68 E948                       		lsl.w	#4,d0
00005D6A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005D70 45F2 0000                  		lea	(a2,d0.w),a2
00005D74 7000                       		moveq	#0,d0
00005D76 1012                       		move.b	(a2),d0
00005D78 6700                       		beq.s	loc_5862
00005D7A 6100 BA28                  		bsr.w	LoadPLC		; load level patterns
00005D7E                            
00005D7E                            loc_5862:
00005D7E 7001                       		moveq	#1,d0
00005D80 6100 BA22                  		bsr.w	LoadPLC		; load standard	level patterns
00005D84 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005D8A 6100 C20A                  		bsr.w	Pal_FadeTo
00005D8E                            
00005D8E                            Cred_WaitLoop:
00005D8E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005D94 6100 CF24                  		bsr.w	DelayProgram
00005D98 6100 BA76                  		bsr.w	RunPLC_RAM
00005D9C 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005DA0 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005DA2 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005DA6 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005DA8 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005DAE 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005DB2 4E75                       		rts	
00005DB4                            
00005DB4                            ; ---------------------------------------------------------------------------
00005DB4                            ; Ending sequence demo loading subroutine
00005DB4                            ; ---------------------------------------------------------------------------
00005DB4                            
00005DB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005DB4                            
00005DB4                            
00005DB4                            EndingDemoLoad:				; XREF: Credits
00005DB4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005DB8 0240 000F                  		andi.w	#$F,d0
00005DBC D040                       		add.w	d0,d0
00005DBE 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005DC2 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005DC6 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005DCA 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005DD0 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005DD2 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005DD8 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005DDE 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005DE4 7000                       		moveq	#0,d0
00005DE6 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005DEA 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005DEE 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005DF2 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005DF6 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005DFC 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005DFE 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005E04 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005E08 303C 0008                  		move.w	#8,d0
00005E0C                            
00005E0C                            EndDemo_LampLoad:
00005E0C 24D9                       		move.l	(a1)+,(a2)+
00005E0E 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005E12                            
00005E12                            EndDemo_Exit:
00005E12 4E75                       		rts	
00005E14                            ; End of function EndingDemoLoad
00005E14                            
00005E14                            ; ===========================================================================
00005E14                            ; ---------------------------------------------------------------------------
00005E14                            ; Levels used in the end sequence demos
00005E14                            ; ---------------------------------------------------------------------------
00005E14                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005E24                            
00005E24                            ; ---------------------------------------------------------------------------
00005E24                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005E24                            ; ---------------------------------------------------------------------------
00005E24                            EndDemo_LampVar:
00005E24 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005E26 0A00 062C 000D             		dc.w $A00, $62C, $D
00005E2C 0000 0000                  		dc.l 0
00005E30 0000                       		dc.b 0,	0
00005E32 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005E46 0101                       		dc.b 1,	1
00005E48                            ; ===========================================================================
00005E48                            ; ---------------------------------------------------------------------------
00005E48                            ; "TRY AGAIN" and "END"	screens
00005E48                            ; ---------------------------------------------------------------------------
00005E48                            
00005E48                            TryAgainEnd:				; XREF: Credits
00005E48 6100 B9B8                  		bsr.w	ClearPLC
00005E4C 6100 C1EE                  		bsr.w	Pal_FadeFrom
00005E50 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E56 3CBC 8004                  		move.w	#$8004,(a6)
00005E5A 3CBC 8230                  		move.w	#$8230,(a6)
00005E5E 3CBC 8407                  		move.w	#$8407,(a6)
00005E62 3CBC 9001                  		move.w	#$9001,(a6)
00005E66 3CBC 9200                  		move.w	#$9200,(a6)
00005E6A 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E6E 3CBC 8720                  		move.w	#$8720,(a6)
00005E72 4238 F64E                  		clr.b	($FFFFF64E).w
00005E76 6100 B670                  		bsr.w	ClearScreen
00005E7A 43F8 D000                  		lea	($FFFFD000).w,a1
00005E7E 7000                       		moveq	#0,d0
00005E80 323C 07FF                  		move.w	#$7FF,d1
00005E84                            
00005E84                            TryAg_ClrObjRam:
00005E84 22C0                       		move.l	d0,(a1)+
00005E86 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005E8A                            
00005E8A 701D                       		moveq	#$1D,d0
00005E8C 6100 BA82                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005E90 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005E94 7000                       		moveq	#0,d0
00005E96 323C 001F                  		move.w	#$1F,d1
00005E9A                            
00005E9A                            TryAg_ClrPallet:
00005E9A 22C0                       		move.l	d0,(a1)+
00005E9C 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005EA0                            
00005EA0 7013                       		moveq	#$13,d0
00005EA2 6100 C442                  		bsr.w	PalLoad1	; load ending pallet
00005EA6 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005EAA 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005EB0 4EB9 0000 0000             		jsr	ObjectsLoad
00005EB6 4EB9 0000 0000             		jsr	BuildSprites
00005EBC 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005EC2 6100 C0D2                  		bsr.w	Pal_FadeTo
00005EC6                            
00005EC6                            ; ---------------------------------------------------------------------------
00005EC6                            ; "TRY AGAIN" and "END"	screen main loop
00005EC6                            ; ---------------------------------------------------------------------------
00005EC6                            TryAg_MainLoop:
00005EC6 6100 B704                  		bsr.w	PauseGame
00005ECA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005ED0 6100 CDE8                  		bsr.w	DelayProgram
00005ED4 4EB9 0000 0000             		jsr	ObjectsLoad
00005EDA 4EB9 0000 0000             		jsr	BuildSprites
00005EE0 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005EE6 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005EE8 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005EEC 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005EEE 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005EF4 67D0                       		beq.s	TryAg_MainLoop
00005EF6                            
00005EF6                            TryAg_Exit:
00005EF6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005EFC 4E75                       		rts	
00005EFE                            
00005EFE                            ; ===========================================================================
00005EFE                            ; ---------------------------------------------------------------------------
00005EFE                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005EFE                            ; ---------------------------------------------------------------------------
00005EFE                            
00005EFE                            Obj8B:					; XREF: Obj_Index
00005EFE 7000                       		moveq	#0,d0
00005F00 1028 0024                  		move.b	$24(a0),d0
00005F04 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005F08 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005F0C 4EF9 0000 0000             		jmp	DisplaySprite
00005F12                            ; ===========================================================================
00005F12 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005F14 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005F16 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005F18 0000                       		dc.w loc_5A8E-Obj8B_Index
00005F1A                            ; ===========================================================================
00005F1A                            
00005F1A                            Obj8B_Main:				; XREF: Obj8B_Index
00005F1A 5428 0024                  		addq.b	#2,$24(a0)
00005F1E 317C 0120 0008             		move.w	#$120,8(a0)
00005F24 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005F2A 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005F32 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005F38 117C 0000 0001             		move.b	#0,1(a0)
00005F3E 117C 0002 0018             		move.b	#2,$18(a0)
00005F44 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005F4A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005F50 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005F52 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005F58 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005F5E 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005F64 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005F6A                            
00005F6A                            Obj8B_Animate:				; XREF: Obj8B_Index
00005F6A 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005F70 4EF9 0000 0000             		jmp	AnimateSprite
00005F76                            ; ===========================================================================
00005F76                            
00005F76                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005F76 5428 0024                  		addq.b	#2,$24(a0)
00005F7A 7002                       		moveq	#2,d0
00005F7C 0828 0000 001C             		btst	#0,$1C(a0)
00005F82 6700                       		beq.s	loc_5A6A
00005F84 4440                       		neg.w	d0
00005F86                            
00005F86                            loc_5A6A:
00005F86 43F8 D800                  		lea	($FFFFD800).w,a1
00005F8A 7205                       		moveq	#5,d1
00005F8C                            
00005F8C                            loc_5A70:
00005F8C 1340 003E                  		move.b	d0,$3E(a1)
00005F90 3400                       		move.w	d0,d2
00005F92 E742                       		asl.w	#3,d2
00005F94 D529 0026                  		add.b	d2,$26(a1)
00005F98 43E9 0040                  		lea	$40(a1),a1
00005F9C 51C9 FFEE                  		dbf	d1,loc_5A70
00005FA0 5228 001A                  		addq.b	#1,$1A(a0)
00005FA4 317C 0070 0030             		move.w	#112,$30(a0)
00005FAA                            
00005FAA                            loc_5A8E:				; XREF: Obj8B_Index
00005FAA 5368 0030                  		subq.w	#1,$30(a0)
00005FAE 6A00                       		bpl.s	locret_5AA0
00005FB0 0868 0000 001C             		bchg	#0,$1C(a0)
00005FB6 117C 0002 0024             		move.b	#2,$24(a0)
00005FBC                            
00005FBC                            locret_5AA0:
00005FBC 4E75                       		rts	
00005FBE                            ; ===========================================================================
00005FBE                            Ani_obj8B:
00005FBE                            	include "_anim\obj8B.asm"
00005FBE                            ; ---------------------------------------------------------------------------
00005FBE                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005FBE                            ; ---------------------------------------------------------------------------
00005FBE 0000                       		dc.w byte_5AA8-Ani_obj8B
00005FC0 0000                       		dc.w byte_5AAC-Ani_obj8B
00005FC2 0000                       		dc.w byte_5AB0-Ani_obj8B
00005FC4 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005FC8 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005FCC 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005FDE                            		even
00005FDE                            		even
00005FDE                            
00005FDE                            ; ===========================================================================
00005FDE                            ; ---------------------------------------------------------------------------
00005FDE                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005FDE                            ; ---------------------------------------------------------------------------
00005FDE                            
00005FDE                            Obj8C:					; XREF: Obj_Index
00005FDE 7000                       		moveq	#0,d0
00005FE0 1028 0024                  		move.b	$24(a0),d0
00005FE4 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005FE8 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005FEC 4EF9 0000 0000             		jmp	DisplaySprite
00005FF2                            ; ===========================================================================
00005FF2 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005FF4 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005FF6                            ; ===========================================================================
00005FF6                            
00005FF6                            Obj8C_Main:				; XREF: Obj8C_Index
00005FF6 2248                       		movea.l	a0,a1
00005FF8 7400                       		moveq	#0,d2
00005FFA 7600                       		moveq	#0,d3
00005FFC 7205                       		moveq	#5,d1
00005FFE 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00006002                            
00006002                            Obj8C_MakeEms:				; XREF: loc_5B42
00006002 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00006006 5429 0024                  		addq.b	#2,$24(a1)
0000600A 237C 0000 5C96 0004        		move.l	#Map_obj88,4(a1)
00006012 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006018 137C 0000 0001             		move.b	#0,1(a1)
0000601E 137C 0001 0018             		move.b	#1,$18(a1)
00006024 337C 0104 0008             		move.w	#$104,8(a1)
0000602A 337C 0120 0038             		move.w	#$120,$38(a1)
00006030 337C 00EC 000A             		move.w	#$EC,$A(a1)
00006036 3369 000A 003A             		move.w	$A(a1),$3A(a1)
0000603C 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006042 47F8 FE58                  		lea	($FFFFFE58).w,a3
00006046                            
00006046                            Obj8C_ChkEms:
00006046 7000                       		moveq	#0,d0
00006048 1038 FE57                  		move.b	($FFFFFE57).w,d0
0000604C 5340                       		subq.w	#1,d0
0000604E 6500                       		bcs.s	loc_5B42
00006050                            
00006050                            Obj8C_ChkEmLoop:
00006050 B433 0000                  		cmp.b	(a3,d0.w),d2
00006054 6600                       		bne.s	loc_5B3E
00006056 5202                       		addq.b	#1,d2
00006058 60EC                       		bra.s	Obj8C_ChkEms
0000605A                            ; ===========================================================================
0000605A                            
0000605A                            loc_5B3E:
0000605A 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
0000605E                            
0000605E                            loc_5B42:
0000605E 1342 001A                  		move.b	d2,$1A(a1)
00006062 5229 001A                  		addq.b	#1,$1A(a1)
00006066 5202                       		addq.b	#1,d2
00006068 137C 0080 0026             		move.b	#$80,$26(a1)
0000606E 1343 001E                  		move.b	d3,$1E(a1)
00006072 1343 001F                  		move.b	d3,$1F(a1)
00006076 0643 000A                  		addi.w	#$A,d3
0000607A 43E9 0040                  		lea	$40(a1),a1
0000607E 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00006082                            
00006082                            Obj8C_Move:				; XREF: Obj8C_Index
00006082 4A68 003E                  		tst.w	$3E(a0)
00006086 6700                       		beq.s	locret_5BBA
00006088 4A28 001E                  		tst.b	$1E(a0)
0000608C 6700                       		beq.s	loc_5B78
0000608E 5328 001E                  		subq.b	#1,$1E(a0)
00006092 6600                       		bne.s	loc_5B80
00006094                            
00006094                            loc_5B78:
00006094 3028 003E                  		move.w	$3E(a0),d0
00006098 D168 0026                  		add.w	d0,$26(a0)
0000609C                            
0000609C                            loc_5B80:
0000609C 1028 0026                  		move.b	$26(a0),d0
000060A0 6700                       		beq.s	loc_5B8C
000060A2 0C00 0080                  		cmpi.b	#$80,d0
000060A6 6600                       		bne.s	loc_5B96
000060A8                            
000060A8                            loc_5B8C:
000060A8 4268 003E                  		clr.w	$3E(a0)
000060AC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000060B2                            
000060B2                            loc_5B96:
000060B2 4EB9 0000 2CEC             		jsr	(CalcSine).l
000060B8 7800                       		moveq	#0,d4
000060BA 1828 003C                  		move.b	$3C(a0),d4
000060BE C3C4                       		muls.w	d4,d1
000060C0 E081                       		asr.l	#8,d1
000060C2 C1C4                       		muls.w	d4,d0
000060C4 E080                       		asr.l	#8,d0
000060C6 D268 0038                  		add.w	$38(a0),d1
000060CA D068 003A                  		add.w	$3A(a0),d0
000060CE 3141 0008                  		move.w	d1,8(a0)
000060D2 3140 000A                  		move.w	d0,$A(a0)
000060D6                            
000060D6                            locret_5BBA:
000060D6 4E75                       		rts	
000060D8                            ; ===========================================================================
000060D8                            ; ---------------------------------------------------------------------------
000060D8                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
000060D8                            ; ---------------------------------------------------------------------------
000060D8                            Map_obj8B:
000060D8                            	include "_maps\obj8B.asm"
000060D8                            ; ---------------------------------------------------------------------------
000060D8                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000060D8                            ; ---------------------------------------------------------------------------
000060D8 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
000060DC 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
000060E0 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
000060E4 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
000060E8 08                         byte_5BCC:	dc.b 8
000060E9 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
000060EE F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
000060F3 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
000060F8 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
000060FD 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006102 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006107 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000610C 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006111 08                         byte_5BF5:	dc.b 8
00006112 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006117 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
0000611C E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006121 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006126 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000612B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006130 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006135 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000613A 08                         byte_5C1E:	dc.b 8
0000613B E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006140 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006145 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000614A F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
0000614F 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006154 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006159 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000615E 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006163 08                         byte_5C47:	dc.b 8
00006164 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006169 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
0000616E E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006173 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006178 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000617D 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006182 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006187 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000618C 0C                         byte_5C70:	dc.b $C
0000618D ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006192 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006197 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
0000619C 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000061A1 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000061A6 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000061AB 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000061B0 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000061B5 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000061BA 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000061BF 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000061C4 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000061C9 0A                         byte_5CAD:	dc.b $A
000061CA D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000061CF DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000061D4 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000061D9 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
000061DE DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
000061E3 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
000061E8 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000061ED 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000061F2 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
000061F7 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
000061FC 0A                         byte_5CE0:	dc.b $A
000061FD C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006202 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006207 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
0000620C C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006211 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006216 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000621B 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006220 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006225 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000622A 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
0000622F 0C                         byte_5D13:	dc.b $C
00006230 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006235 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000623A 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
0000623F 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006244 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006249 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
0000624E 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006253 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006258 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
0000625D 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006262 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006267 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000626C                            		even
0000626C                            		even
0000626C                            
0000626C                            ; ---------------------------------------------------------------------------
0000626C                            ; Ending sequence demos
0000626C                            ; ---------------------------------------------------------------------------
0000626C                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
0000629A                            		even
0000629A                            Demo_EndMZ:	incbin	demodata\e_mz.bin
000062DA                            		even
000062DA                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000630A                            		even
0000630A                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000633A                            		even
0000633A                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000635A                            		even
0000635A                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000637A                            		even
0000637A                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000063AA                            		even
000063AA                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000063DA                            		even
000063DA                            
000063DA                            ; ---------------------------------------------------------------------------
000063DA                            ; Subroutine to	load level boundaries and start	locations
000063DA                            ; ---------------------------------------------------------------------------
000063DA                            
000063DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063DA                            
000063DA                            
000063DA                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000063DA 7000                       		moveq	#0,d0
000063DC 11C0 F740                  		move.b	d0,($FFFFF740).w
000063E0 11C0 F741                  		move.b	d0,($FFFFF741).w
000063E4 11C0 F746                  		move.b	d0,($FFFFF746).w
000063E8 11C0 F748                  		move.b	d0,($FFFFF748).w
000063EC 11C0 F742                  		move.b	d0,($FFFFF742).w
000063F0 3038 FE10                  		move.w	($FFFFFE10).w,d0
000063F4 ED08                       		lsl.b	#6,d0
000063F6 E848                       		lsr.w	#4,d0
000063F8 3200                       		move.w	d0,d1
000063FA D040                       		add.w	d0,d0
000063FC D041                       		add.w	d1,d0
000063FE 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006402 3018                       		move.w	(a0)+,d0
00006404 31C0 F730                  		move.w	d0,($FFFFF730).w
00006408 2018                       		move.l	(a0)+,d0
0000640A 21C0 F728                  		move.l	d0,($FFFFF728).w
0000640E 21C0 F720                  		move.l	d0,($FFFFF720).w
00006412 2018                       		move.l	(a0)+,d0
00006414 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006418 21C0 F724                  		move.l	d0,($FFFFF724).w
0000641C 3038 F728                  		move.w	($FFFFF728).w,d0
00006420 0640 0240                  		addi.w	#$240,d0
00006424 31C0 F732                  		move.w	d0,($FFFFF732).w
00006428 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000642E 3018                       		move.w	(a0)+,d0
00006430 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006434 6000 0000                  		bra.w	LevSz_ChkLamp
00006438                            ; ===========================================================================
00006438                            ; ---------------------------------------------------------------------------
00006438                            ; Level size array and ending start location array
00006438                            ; ---------------------------------------------------------------------------
00006438                            LevelSizeArray:        ; GHZ
00006438 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006444 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006450 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
0000645C 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006468                                    ; LZ
00006468 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
00006474 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
00006480 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
0000648C 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
00006498                                    ; MZ
00006498 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
000064A4 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
000064B0 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
000064BC 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
000064C8                                    ; SLZ
000064C8 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
000064D4 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
000064E0 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
000064EC 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
000064F8                                    ; SYZ
000064F8 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006504 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00006510 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
0000651C 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
00006528                                    ; SBZ
00006528 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006534 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
00006540 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
0000654C 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006558                                    ; Ending
00006558 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
00006564 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
00006570 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
0000657C 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
00006588                                    even
00006588                            EndingStLocArray:
00006588                            		incbin	misc\sloc_end.bin
000065A8                            		even
000065A8                            
000065A8                            ; ===========================================================================
000065A8                            
000065A8                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000065A8 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000065AC 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000065AE 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000065B4 3238 D008                  		move.w	($FFFFD008).w,d1
000065B8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000065BC 6000                       		bra.s	loc_60D0
000065BE                            ; ===========================================================================
000065BE                            
000065BE                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000065BE 3038 FE10                  		move.w	($FFFFFE10).w,d0
000065C2 ED08                       		lsl.b	#6,d0
000065C4 E848                       		lsr.w	#4,d0
000065C6 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000065CA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000065CE 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000065D0 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000065D4 5340                       		subq.w	#1,d0
000065D6 E548                       		lsl.w	#2,d0
000065D8 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000065DC                            
000065DC                            LevSz_SonicPos:
000065DC 7200                       		moveq	#0,d1
000065DE 3219                       		move.w	(a1)+,d1
000065E0 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000065E4 7000                       		moveq	#0,d0
000065E6 3011                       		move.w	(a1),d0
000065E8 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000065EC                            
000065EC                            loc_60D0:				; XREF: LevSz_ChkLamp
000065EC 0441 00A0                  		subi.w	#$A0,d1
000065F0 6400                       		bcc.s	loc_60D8
000065F2 7200                       		moveq	#0,d1
000065F4                            
000065F4                            loc_60D8:
000065F4 3438 F72A                  		move.w	($FFFFF72A).w,d2
000065F8 B242                       		cmp.w	d2,d1
000065FA 6500                       		bcs.s	loc_60E2
000065FC 3202                       		move.w	d2,d1
000065FE                            
000065FE                            loc_60E2:
000065FE 31C1 F700                  		move.w	d1,($FFFFF700).w
00006602 0440 0060                  		subi.w	#$60,d0
00006606 6400                       		bcc.s	loc_60EE
00006608 7000                       		moveq	#0,d0
0000660A                            
0000660A                            loc_60EE:
0000660A B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000660E 6D00                       		blt.s	loc_60F8
00006610 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006614                            
00006614                            loc_60F8:
00006614 31C0 F704                  		move.w	d0,($FFFFF704).w
00006618 6100 0000                  		bsr.w	BgScrollSpeed
0000661C 7000                       		moveq	#0,d0
0000661E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006622 E508                       		lsl.b	#2,d0
00006624 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000662A 6000 0000                  		bra.w	LevSz_Unk
0000662E                            ; ===========================================================================
0000662E                            ; ---------------------------------------------------------------------------
0000662E                            ; Sonic	start location array
0000662E                            ; ---------------------------------------------------------------------------
0000662E                            StartLocArray:	incbin	misc\sloc_lev.bin
0000669E                            		even
0000669E                            
0000669E                            ; ---------------------------------------------------------------------------
0000669E                            ; Which	256x256	tiles contain loops or roll-tunnels
0000669E                            ; ---------------------------------------------------------------------------
0000669E                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
0000669E                            ; loop,	loop, tunnel, tunnel
0000669E                            ; ---------------------------------------------------------------------------
0000669E                            LoopTileNums:	incbin	misc\loopnums.bin
000066BA                            		even
000066BA                            
000066BA                            ; ===========================================================================
000066BA                            
000066BA                            LevSz_Unk:				; XREF: LevelSizeLoad
000066BA 7000                       		moveq	#0,d0
000066BC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000066C0 E748                       		lsl.w	#3,d0
000066C2 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000066C6 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000066CA 24D9                       		move.l	(a1)+,(a2)+
000066CC 24D9                       		move.l	(a1)+,(a2)+
000066CE 4E75                       		rts	
000066D0                            ; End of function LevelSizeLoad
000066D0                            
000066D0                            ; ===========================================================================
000066D0 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000066D8 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066E0 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066E8 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066F0 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066F8 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006700 0070 0100 0100 0100        		dc.l $700100, $1000100
00006708                            
00006708                            ; ---------------------------------------------------------------------------
00006708                            ; Subroutine to	set scroll speed of some backgrounds
00006708                            ; ---------------------------------------------------------------------------
00006708                            
00006708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006708                            
00006708                            
00006708                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006708 4A38 FE30                  		tst.b	($FFFFFE30).w
0000670C 6600                       		bne.s	loc_6206
0000670E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006712 31C0 F714                  		move.w	d0,($FFFFF714).w
00006716 31C1 F708                  		move.w	d1,($FFFFF708).w
0000671A 31C1 F710                  		move.w	d1,($FFFFF710).w
0000671E 31C1 F718                  		move.w	d1,($FFFFF718).w
00006722                            
00006722                            loc_6206:
00006722 7400                       		moveq	#0,d2
00006724 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006728 D442                       		add.w	d2,d2
0000672A 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000672E 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006732                            ; End of function BgScrollSpeed
00006732                            
00006732                            ; ===========================================================================
00006732 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006736 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000673A 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000673E 0000                       		dc.w BgScroll_End-BgScroll_Index
00006740                            ; ===========================================================================
00006740                            
00006740                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006740 6000 0000                  		bra.w	Deform_GHZ
00006744                            ; ===========================================================================
00006744                            
00006744                            BgScroll_LZ:				; XREF: BgScroll_Index
00006744 E280                       		asr.l	#1,d0
00006746 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000674A 4E75                       		rts	
0000674C                            ; ===========================================================================
0000674C                            
0000674C                            BgScroll_MZ:				; XREF: BgScroll_Index
0000674C 4E75                       		rts	
0000674E                            ; ===========================================================================
0000674E                            
0000674E                            BgScroll_SLZ:				; XREF: BgScroll_Index
0000674E E280                       		asr.l	#1,d0
00006750 0640 00C0                  		addi.w	#$C0,d0
00006754 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006758 4E75                       		rts	
0000675A                            ; ===========================================================================
0000675A                            
0000675A                            BgScroll_SYZ:				; XREF: BgScroll_Index
0000675A E980                       		asl.l	#4,d0
0000675C 2400                       		move.l	d0,d2
0000675E E380                       		asl.l	#1,d0
00006760 D082                       		add.l	d2,d0
00006762 E080                       		asr.l	#8,d0
00006764 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006768 31C0 F714                  		move.w	d0,($FFFFF714).w
0000676C 4E75                       		rts	
0000676E                            ; ===========================================================================
0000676E                            
0000676E                            BgScroll_SBZ:				; XREF: BgScroll_Index
0000676E E980                       		asl.l	#4,d0
00006770 E380                       		asl.l	#1,d0
00006772 E080                       		asr.l	#8,d0
00006774 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006778 4E75                       		rts	
0000677A                            ; ===========================================================================
0000677A                            
0000677A                            BgScroll_End:				; XREF: BgScroll_Index
0000677A 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006780 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006786 4E75                       		rts	
00006788                            ; ===========================================================================
00006788 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
0000678E 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006794 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000679A 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000067A0 4E75                       		rts
000067A2                            
000067A2                            ; ---------------------------------------------------------------------------
000067A2                            ; Background layer deformation subroutines
000067A2                            ; ---------------------------------------------------------------------------
000067A2                            
000067A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067A2                            
000067A2                            
000067A2                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000067A2 4A38 F744                  		tst.b	($FFFFF744).w
000067A6 6700                       		beq.s	loc_628E
000067A8 4E75                       		rts	
000067AA                            ; ===========================================================================
000067AA                            
000067AA                            loc_628E:
000067AA 4278 F754                  		clr.w	($FFFFF754).w
000067AE 4278 F756                  		clr.w	($FFFFF756).w
000067B2 4278 F758                  		clr.w	($FFFFF758).w
000067B6 4278 F75A                  		clr.w	($FFFFF75A).w
000067BA 6100 0000                  		bsr.w	ScrollHoriz
000067BE 6100 0000                  		bsr.w	ScrollVertical
000067C2 6100 0000                  		bsr.w	DynScrResizeLoad
000067C6 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000067CC 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000067D2 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000067D8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000067DE 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000067E4 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000067EA 7000                       		moveq	#0,d0
000067EC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000067F0 D040                       		add.w	d0,d0
000067F2 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000067F6 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000067FA                            ; End of function DeformBgLayer
000067FA                            
000067FA                            ; ===========================================================================
000067FA                            ; ---------------------------------------------------------------------------
000067FA                            ; Offset index for background layer deformation	code
000067FA                            ; ---------------------------------------------------------------------------
000067FA 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000067FE 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006802 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006806 0000                       		dc.w Deform_GHZ-Deform_Index
00006808                            ; ---------------------------------------------------------------------------
00006808                            ; Green	Hill Zone background layer deformation code
00006808                            ; ---------------------------------------------------------------------------
00006808                            
00006808                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006808                            
00006808                            
00006808                            Deform_GHZ:				; XREF: Deform_Index
00006808 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000680C 48C4                       		ext.l	d4
0000680E EB84                       		asl.l	#5,d4
00006810 2204                       		move.l	d4,d1
00006812 E384                       		asl.l	#1,d4
00006814 D881                       		add.l	d1,d4
00006816 7A00                       		moveq	#0,d5
00006818 6100 0000                  		bsr.w	ScrollBlock1
0000681C 6100 0000                  		bsr.w	ScrollBlock4
00006820 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006824 3038 F704                  		move.w	($FFFFF704).w,d0
00006828 0240 07FF                  		andi.w	#$7FF,d0
0000682C EA48                       		lsr.w	#5,d0
0000682E 4440                       		neg.w	d0
00006830 0640 0026                  		addi.w	#$26,d0
00006834 31C0 F714                  		move.w	d0,($FFFFF714).w
00006838 3800                       		move.w	d0,d4
0000683A 6100 0000                  		bsr.w	ScrollBlock3
0000683E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006844 323C 006F                  		move.w	#$6F,d1
00006848 9244                       		sub.w	d4,d1
0000684A 3038 F700                  		move.w	($FFFFF700).w,d0
0000684E 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006854 6600                       		bne.s	loc_633C
00006856 7000                       		moveq	#0,d0
00006858                            
00006858                            loc_633C:
00006858 4440                       		neg.w	d0
0000685A 4840                       		swap	d0
0000685C 3038 F708                  		move.w	($FFFFF708).w,d0
00006860 4440                       		neg.w	d0
00006862                            
00006862                            loc_6346:
00006862 22C0                       		move.l	d0,(a1)+
00006864 51C9 FFFC                  		dbf	d1,loc_6346
00006868 323C 0027                  		move.w	#$27,d1
0000686C 3038 F710                  		move.w	($FFFFF710).w,d0
00006870 4440                       		neg.w	d0
00006872                            
00006872                            loc_6356:
00006872 22C0                       		move.l	d0,(a1)+
00006874 51C9 FFFC                  		dbf	d1,loc_6356
00006878 3038 F710                  		move.w	($FFFFF710).w,d0
0000687C 0640 0000                  		addi.w	#0,d0
00006880 3438 F700                  		move.w	($FFFFF700).w,d2
00006884 0642 FE00                  		addi.w	#-$200,d2
00006888 9440                       		sub.w	d0,d2
0000688A 48C2                       		ext.l	d2
0000688C E182                       		asl.l	#8,d2
0000688E 85FC 0068                  		divs.w	#$68,d2
00006892 48C2                       		ext.l	d2
00006894 E182                       		asl.l	#8,d2
00006896 7600                       		moveq	#0,d3
00006898 3600                       		move.w	d0,d3
0000689A 323C 0047                  		move.w	#$47,d1
0000689E D244                       		add.w	d4,d1
000068A0                            
000068A0                            loc_6384:
000068A0 3003                       		move.w	d3,d0
000068A2 4440                       		neg.w	d0
000068A4 22C0                       		move.l	d0,(a1)+
000068A6 4843                       		swap	d3
000068A8 D682                       		add.l	d2,d3
000068AA 4843                       		swap	d3
000068AC 51C9 FFF2                  		dbf	d1,loc_6384
000068B0 4E75                       		rts	
000068B2                            ; End of function Deform_GHZ
000068B2                            
000068B2                            ; ---------------------------------------------------------------------------
000068B2                            ; Labyrinth Zone background layer deformation code
000068B2                            ; ---------------------------------------------------------------------------
000068B2                            
000068B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068B2                            
000068B2                            
000068B2                            Deform_LZ:				; XREF: Deform_Index
000068B2 3838 F73A                  		move.w	($FFFFF73A).w,d4
000068B6 48C4                       		ext.l	d4
000068B8 EF84                       		asl.l	#7,d4
000068BA 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000068BE 48C5                       		ext.l	d5
000068C0 EF85                       		asl.l	#7,d5
000068C2 6100 0000                  		bsr.w	ScrollBlock1
000068C6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000068CC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000068D0 323C 00DF                  		move.w	#$DF,d1
000068D4 3038 F700                  		move.w	($FFFFF700).w,d0
000068D8 4440                       		neg.w	d0
000068DA 4840                       		swap	d0
000068DC 3038 F708                  		move.w	($FFFFF708).w,d0
000068E0 4440                       		neg.w	d0
000068E2                            
000068E2                            loc_63C6:
000068E2 22C0                       		move.l	d0,(a1)+
000068E4 51C9 FFFC                  		dbf	d1,loc_63C6
000068E8 3038 F646                  		move.w	($FFFFF646).w,d0
000068EC 9078 F704                  		sub.w	($FFFFF704).w,d0
000068F0 4E75                       		rts	
000068F2                            ; End of function Deform_LZ
000068F2                            
000068F2                            ; ---------------------------------------------------------------------------
000068F2                            ; Marble Zone background layer deformation code
000068F2                            ; ---------------------------------------------------------------------------
000068F2                            
000068F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068F2                            
000068F2                            
000068F2                            Deform_MZ:				; XREF: Deform_Index
000068F2 3838 F73A                  		move.w	($FFFFF73A).w,d4
000068F6 48C4                       		ext.l	d4
000068F8 ED84                       		asl.l	#6,d4
000068FA 2204                       		move.l	d4,d1
000068FC E384                       		asl.l	#1,d4
000068FE D881                       		add.l	d1,d4
00006900 7A00                       		moveq	#0,d5
00006902 6100 0000                  		bsr.w	ScrollBlock1
00006906 303C 0200                  		move.w	#$200,d0
0000690A 3238 F704                  		move.w	($FFFFF704).w,d1
0000690E 0441 01C8                  		subi.w	#$1C8,d1
00006912 6500                       		bcs.s	loc_6402
00006914 3401                       		move.w	d1,d2
00006916 D241                       		add.w	d1,d1
00006918 D242                       		add.w	d2,d1
0000691A E441                       		asr.w	#2,d1
0000691C D041                       		add.w	d1,d0
0000691E                            
0000691E                            loc_6402:
0000691E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006922 6100 0000                  		bsr.w	ScrollBlock3
00006926 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000692C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006930 323C 00DF                  		move.w	#$DF,d1
00006934 3038 F700                  		move.w	($FFFFF700).w,d0
00006938 4440                       		neg.w	d0
0000693A 4840                       		swap	d0
0000693C 3038 F708                  		move.w	($FFFFF708).w,d0
00006940 4440                       		neg.w	d0
00006942                            
00006942                            loc_6426:
00006942 22C0                       		move.l	d0,(a1)+
00006944 51C9 FFFC                  		dbf	d1,loc_6426
00006948 4E75                       		rts	
0000694A                            ; End of function Deform_MZ
0000694A                            
0000694A                            ; ---------------------------------------------------------------------------
0000694A                            ; Star Light Zone background layer deformation code
0000694A                            ; ---------------------------------------------------------------------------
0000694A                            
0000694A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000694A                            
0000694A                            
0000694A                            Deform_SLZ:				; XREF: Deform_Index
0000694A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000694E 48C4                       		ext.l	d4
00006950 EB84                       		asl.l	#5,d4
00006952 2204                       		move.l	d4,d1
00006954 E384                       		asl.l	#1,d4
00006956 D881                       		add.l	d1,d4
00006958 7A00                       		moveq	#0,d5
0000695A 6100 0000                  		bsr.w	ScrollBlock1
0000695E 6100 0000                  		bsr.w	ScrollBlock3
00006962 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006966                            	;	move.w	($FFFFF704).w,d0
00006966                            	;	andi.w	#$7FF,d0
00006966 EA48                       		lsr.w	#5,d0
00006968 4440                       		neg.w	d0
0000696A 0640 0026                  		addi.w	#$26,d0
0000696E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006972 3800                       		move.w	d0,d4
00006974                            	;	bsr.w	ScrollBlock3
00006974 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
0000697A 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
0000697E                            
0000697E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006982 4440                       		neg.w	d0			; negate (positive to negative)
00006984 4840                       		swap	d0			; send to the left side of d0
00006986 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000698A 45F8 A800                  		lea	($FFFFA800).w,a2
0000698E 069A 0000 5000             		addi.l	#$5000,(a2)+
00006994 069A 0000 C000             		addi.l	#$C000,(a2)+
0000699A 3038 A800                  		move.w	($FFFFA800).w,d0
0000699E 4440                       		neg.w	d0			; negate (positive to negative)
000069A0 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000069A2 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069A6                            slz_DeformLoop_1:
000069A6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069A8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
000069AC                            
000069AC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069B0 4440                       		neg.w	d0			; negate (positive to negative)
000069B2 4840                       		swap	d0			; send to the left side of d0
000069B4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069B8 45F8 A800                  		lea	($FFFFA800).w,a2
000069BC 069A 0000 5000             		addi.l	#$5000,(a2)+
000069C2 069A 0000 C000             		addi.l	#$C000,(a2)+
000069C8 3038 A800                  		move.w	($FFFFA800).w,d0
000069CC 4440                       		neg.w	d0			; negate (positive to negative)
000069CE E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000069D0 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069D4                            slz_DeformLoop_2:
000069D4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069D6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
000069DA                            
000069DA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069DE 4440                       		neg.w	d0			; negate (positive to negative)
000069E0 4840                       		swap	d0			; send to the left side of d0
000069E2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069E6 45F8 A800                  		lea	($FFFFA800).w,a2
000069EA 069A 0000 5000             		addi.l	#$5000,(a2)+
000069F0 069A 0000 C000             		addi.l	#$C000,(a2)+
000069F6 3038 A800                  		move.w	($FFFFA800).w,d0
000069FA 4440                       		neg.w	d0			; negate (positive to negative)
000069FC E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000069FE 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A02                            slz_DeformLoop_3:
00006A02 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A04 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006A08                            
00006A08 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A0C 4440                       		neg.w	d0			; negate (positive to negative)
00006A0E 4840                       		swap	d0			; send to the left side of d0
00006A10 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A14 45F8 A800                  		lea	($FFFFA800).w,a2
00006A18 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A1E 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A24 3038 A800                  		move.w	($FFFFA800).w,d0
00006A28 4440                       		neg.w	d0			; negate (positive to negative)
00006A2A E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006A2C 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A30                            slz_DeformLoop_4:
00006A30 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A32 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006A36                            
00006A36 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A3A 4440                       		neg.w	d0			; negate (positive to negative)
00006A3C 4840                       		swap	d0			; send to the left side of d0
00006A3E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A42 45F8 A800                  		lea	($FFFFA800).w,a2
00006A46 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A4C 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A52 3038 A800                  		move.w	($FFFFA800).w,d0
00006A56 4440                       		neg.w	d0			; negate (positive to negative)
00006A58 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006A5A 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A5E                            slz_DeformLoop_5:
00006A5E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A60 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006A64                            
00006A64 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A68 4440                       		neg.w	d0			; negate (positive to negative)
00006A6A 4840                       		swap	d0			; send to the left side of d0
00006A6C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A70 4440                       		neg.w	d0			; negate (positive to negative)
00006A72 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006A74 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A78                            slz_DeformLoop_6:
00006A78 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A7A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006A7E                            
00006A7E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A82 4440                       		neg.w	d0			; negate (positive to negative)
00006A84 4840                       		swap	d0			; send to the left side of d0
00006A86 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A8A 4440                       		neg.w	d0			; negate (positive to negative)
00006A8C EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006A8E 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A92                            slz_DeformLoop_7:
00006A92 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A94 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006A98                            
00006A98 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A9C 4440                       		neg.w	d0			; negate (positive to negative)
00006A9E 4840                       		swap	d0			; send to the left side of d0
00006AA0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AA4 4440                       		neg.w	d0			; negate (positive to negative)
00006AA6 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006AA8 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AAC                            slz_DeformLoop_8:
00006AAC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AAE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006AB2                            
00006AB2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AB6 4440                       		neg.w	d0			; negate (positive to negative)
00006AB8 4840                       		swap	d0			; send to the left side of d0
00006ABA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006ABE 4440                       		neg.w	d0			; negate (positive to negative)
00006AC0 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006AC2 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AC6                            slz_DeformLoop_9:
00006AC6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AC8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006ACC                            
00006ACC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AD0 4440                       		neg.w	d0			; negate (positive to negative)
00006AD2 4840                       		swap	d0			; send to the left side of d0
00006AD4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AD8 4440                       		neg.w	d0			; negate (positive to negative)
00006ADA E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006ADC 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AE0                            slz_DeformLoop_10:
00006AE0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AE2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006AE6                            
00006AE6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AEA 4440                       		neg.w	d0			; negate (positive to negative)
00006AEC 4840                       		swap	d0			; send to the left side of d0
00006AEE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AF2 4440                       		neg.w	d0			; negate (positive to negative)
00006AF4 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006AF6 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AFA                            slz_DeformLoop_11:
00006AFA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AFC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006B00                            
00006B00 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B04 4440                       		neg.w	d0			; negate (positive to negative)
00006B06 4840                       		swap	d0			; send to the left side of d0
00006B08 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B0C 4440                       		neg.w	d0			; negate (positive to negative)
00006B0E E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006B10 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B14                            slz_DeformLoop_12:
00006B14 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B16 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006B1A                            
00006B1A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B1E 4440                       		neg.w	d0			; negate (positive to negative)
00006B20 4840                       		swap	d0			; send to the left side of d0
00006B22 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B26 4440                       		neg.w	d0			; negate (positive to negative)
00006B28 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006B2A 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B2E                            slz_DeformLoop_13:
00006B2E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B30 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006B34 4E75                       		rts	
00006B36                            ; End of function Deform_SLZ
00006B36 4E75                       		rts	
00006B38                            ; End of function Deform_SLZ_2
00006B38                            
00006B38                            ; ---------------------------------------------------------------------------
00006B38                            ; Spring Yard Zone background layer deformation	code
00006B38                            ; ---------------------------------------------------------------------------
00006B38                            
00006B38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B38                            
00006B38                            
00006B38                            Deform_SYZ:				; XREF: Deform_Index
00006B38 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B3C 48C4                       		ext.l	d4
00006B3E ED84                       		asl.l	#6,d4
00006B40 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B44 48C5                       		ext.l	d5
00006B46 E985                       		asl.l	#4,d5
00006B48 2205                       		move.l	d5,d1
00006B4A E385                       		asl.l	#1,d5
00006B4C DA81                       		add.l	d1,d5
00006B4E 6100 0000                  		bsr.w	ScrollBlock1
00006B52 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B58 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B5C 323C 00DF                  		move.w	#$DF,d1
00006B60 3038 F700                  		move.w	($FFFFF700).w,d0
00006B64 4440                       		neg.w	d0
00006B66 4840                       		swap	d0
00006B68 3038 F708                  		move.w	($FFFFF708).w,d0
00006B6C 4440                       		neg.w	d0
00006B6E                            
00006B6E                            loc_653C:
00006B6E 22C0                       		move.l	d0,(a1)+
00006B70 51C9 FFFC                  		dbf	d1,loc_653C
00006B74 4E75                       		rts	
00006B76                            ; End of function Deform_SYZ
00006B76                            
00006B76                            ; ---------------------------------------------------------------------------
00006B76                            ; Scrap	Brain Zone background layer deformation	code
00006B76                            ; ---------------------------------------------------------------------------
00006B76                            
00006B76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B76                            
00006B76                            
00006B76                            Deform_SBZ:				; XREF: Deform_Index
00006B76 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B7A 48C4                       		ext.l	d4
00006B7C ED84                       		asl.l	#6,d4
00006B7E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B82 48C5                       		ext.l	d5
00006B84 E985                       		asl.l	#4,d5
00006B86 E385                       		asl.l	#1,d5
00006B88 6100 0000                  		bsr.w	ScrollBlock1
00006B8C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B92 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B96 323C 00DF                  		move.w	#$DF,d1
00006B9A 3038 F700                  		move.w	($FFFFF700).w,d0
00006B9E 4440                       		neg.w	d0
00006BA0 4840                       		swap	d0
00006BA2 3038 F708                  		move.w	($FFFFF708).w,d0
00006BA6 4440                       		neg.w	d0
00006BA8                            
00006BA8                            loc_6576:
00006BA8 22C0                       		move.l	d0,(a1)+
00006BAA 51C9 FFFC                  		dbf	d1,loc_6576
00006BAE 4E75                       		rts	
00006BB0                            ; End of function Deform_SBZ
00006BB0                            
00006BB0                            ; ---------------------------------------------------------------------------
00006BB0                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006BB0                            ; ---------------------------------------------------------------------------
00006BB0                            
00006BB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BB0                            
00006BB0                            
00006BB0                            ScrollHoriz:				; XREF: DeformBgLayer
00006BB0 3838 F700                  		move.w	($FFFFF700).w,d4
00006BB4 6100                       		bsr.s	ScrollHoriz2
00006BB6 3038 F700                  		move.w	($FFFFF700).w,d0
00006BBA 0240 0010                  		andi.w	#$10,d0
00006BBE 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006BC2 B300                       		eor.b	d1,d0
00006BC4 6600                       		bne.s	locret_65B0
00006BC6 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006BCC 3038 F700                  		move.w	($FFFFF700).w,d0
00006BD0 9044                       		sub.w	d4,d0
00006BD2 6A00                       		bpl.s	loc_65AA
00006BD4 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006BDA 4E75                       		rts	
00006BDC                            ; ===========================================================================
00006BDC                            
00006BDC                            loc_65AA:
00006BDC 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006BE2                            
00006BE2                            locret_65B0:
00006BE2 4E75                       		rts	
00006BE4                            ; End of function ScrollHoriz
00006BE4                            
00006BE4                            
00006BE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BE4                            
00006BE4                            
00006BE4                            ScrollHoriz2:				; XREF: ScrollHoriz
00006BE4 3038 D008                  		move.w	($FFFFD008).w,d0
00006BE8 9078 F700                  		sub.w	($FFFFF700).w,d0
00006BEC 0440 0090                  		subi.w	#$90,d0
00006BF0 6500                       		bcs.s	loc_65F6
00006BF2 0440 0010                  		subi.w	#$10,d0
00006BF6 6400                       		bcc.s	loc_65CC
00006BF8 4278 F73A                  		clr.w	($FFFFF73A).w
00006BFC 4E75                       		rts	
00006BFE                            ; ===========================================================================
00006BFE                            
00006BFE                            loc_65CC:
00006BFE 0C40 0010                  		cmpi.w	#$10,d0
00006C02 6500                       		bcs.s	loc_65D6
00006C04 303C 0010                  		move.w	#$10,d0
00006C08                            
00006C08                            loc_65D6:
00006C08 D078 F700                  		add.w	($FFFFF700).w,d0
00006C0C B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006C10 6D00                       		blt.s	loc_65E4
00006C12 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006C16                            
00006C16                            loc_65E4:
00006C16 3200                       		move.w	d0,d1
00006C18 9278 F700                  		sub.w	($FFFFF700).w,d1
00006C1C E141                       		asl.w	#8,d1
00006C1E 31C0 F700                  		move.w	d0,($FFFFF700).w
00006C22 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006C26 4E75                       		rts	
00006C28                            ; ===========================================================================
00006C28                            
00006C28                            loc_65F6:				; XREF: ScrollHoriz2
00006C28 D078 F700                  		add.w	($FFFFF700).w,d0
00006C2C B078 F728                  		cmp.w	($FFFFF728).w,d0
00006C30 6EE4                       		bgt.s	loc_65E4
00006C32 3038 F728                  		move.w	($FFFFF728).w,d0
00006C36 60DE                       		bra.s	loc_65E4
00006C38                            ; End of function ScrollHoriz2
00006C38                            
00006C38                            ; ===========================================================================
00006C38 4A40                       		tst.w	d0
00006C3A 6A00                       		bpl.s	loc_6610
00006C3C 303C FFFE                  		move.w	#-2,d0
00006C40 60E6                       		bra.s	loc_65F6
00006C42                            ; ===========================================================================
00006C42                            
00006C42                            loc_6610:
00006C42 303C 0002                  		move.w	#2,d0
00006C46 60B6                       		bra.s	loc_65CC
00006C48                            
00006C48                            ; ---------------------------------------------------------------------------
00006C48                            ; Subroutine to	scroll the level vertically as Sonic moves
00006C48                            ; ---------------------------------------------------------------------------
00006C48                            
00006C48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C48                            
00006C48                            
00006C48                            ScrollVertical:				; XREF: DeformBgLayer
00006C48 7200                       		moveq	#0,d1
00006C4A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006C4E 9078 F704                  		sub.w	($FFFFF704).w,d0
00006C52 0838 0002 D022             		btst	#2,($FFFFD022).w
00006C58 6700                       		beq.s	loc_662A
00006C5A 5B40                       		subq.w	#5,d0
00006C5C                            
00006C5C                            loc_662A:
00006C5C 0838 0001 D022             		btst	#1,($FFFFD022).w
00006C62 6700                       		beq.s	loc_664A
00006C64 0640 0020                  		addi.w	#$20,d0
00006C68 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C6C 6500                       		bcs.s	loc_6696
00006C6E 0440 0040                  		subi.w	#$40,d0
00006C72 6400                       		bcc.s	loc_6696
00006C74 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C78 6600                       		bne.s	loc_66A8
00006C7A 6000                       		bra.s	loc_6656
00006C7C                            ; ===========================================================================
00006C7C                            
00006C7C                            loc_664A:
00006C7C 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C80 6600                       		bne.s	loc_665C
00006C82 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C86 6600                       		bne.s	loc_66A8
00006C88                            
00006C88                            loc_6656:
00006C88 4278 F73C                  		clr.w	($FFFFF73C).w
00006C8C 4E75                       		rts	
00006C8E                            ; ===========================================================================
00006C8E                            
00006C8E                            loc_665C:
00006C8E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006C94 6600                       		bne.s	loc_6684
00006C96 3238 D014                  		move.w	($FFFFD014).w,d1
00006C9A 6A00                       		bpl.s	loc_666C
00006C9C 4441                       		neg.w	d1
00006C9E                            
00006C9E                            loc_666C:
00006C9E 0C41 0800                  		cmpi.w	#$800,d1
00006CA2 6400                       		bcc.s	loc_6696
00006CA4 323C 0600                  		move.w	#$600,d1
00006CA8 0C40 0006                  		cmpi.w	#6,d0
00006CAC 6E00                       		bgt.s	loc_66F6
00006CAE 0C40 FFFA                  		cmpi.w	#-6,d0
00006CB2 6D00                       		blt.s	loc_66C0
00006CB4 6000                       		bra.s	loc_66AE
00006CB6                            ; ===========================================================================
00006CB6                            
00006CB6                            loc_6684:
00006CB6 323C 0200                  		move.w	#$200,d1
00006CBA 0C40 0002                  		cmpi.w	#2,d0
00006CBE 6E00                       		bgt.s	loc_66F6
00006CC0 0C40 FFFE                  		cmpi.w	#-2,d0
00006CC4 6D00                       		blt.s	loc_66C0
00006CC6 6000                       		bra.s	loc_66AE
00006CC8                            ; ===========================================================================
00006CC8                            
00006CC8                            loc_6696:
00006CC8 323C 1000                  		move.w	#$1000,d1
00006CCC 0C40 0010                  		cmpi.w	#$10,d0
00006CD0 6E00                       		bgt.s	loc_66F6
00006CD2 0C40 FFF0                  		cmpi.w	#-$10,d0
00006CD6 6D00                       		blt.s	loc_66C0
00006CD8 6000                       		bra.s	loc_66AE
00006CDA                            ; ===========================================================================
00006CDA                            
00006CDA                            loc_66A8:
00006CDA 7000                       		moveq	#0,d0
00006CDC 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006CE0                            
00006CE0                            loc_66AE:
00006CE0 7200                       		moveq	#0,d1
00006CE2 3200                       		move.w	d0,d1
00006CE4 D278 F704                  		add.w	($FFFFF704).w,d1
00006CE8 4A40                       		tst.w	d0
00006CEA 6A00 0000                  		bpl.w	loc_6700
00006CEE 6000 0000                  		bra.w	loc_66CC
00006CF2                            ; ===========================================================================
00006CF2                            
00006CF2                            loc_66C0:
00006CF2 4441                       		neg.w	d1
00006CF4 48C1                       		ext.l	d1
00006CF6 E181                       		asl.l	#8,d1
00006CF8 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006CFC 4841                       		swap	d1
00006CFE                            
00006CFE                            loc_66CC:
00006CFE B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006D02 6E00                       		bgt.s	loc_6724
00006D04 0C41 FF00                  		cmpi.w	#-$100,d1
00006D08 6E00                       		bgt.s	loc_66F0
00006D0A 0241 07FF                  		andi.w	#$7FF,d1
00006D0E 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D14 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006D1A 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D20 6000                       		bra.s	loc_6724
00006D22                            ; ===========================================================================
00006D22                            
00006D22                            loc_66F0:
00006D22 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006D26 6000                       		bra.s	loc_6724
00006D28                            ; ===========================================================================
00006D28                            
00006D28                            loc_66F6:
00006D28 48C1                       		ext.l	d1
00006D2A E181                       		asl.l	#8,d1
00006D2C D2B8 F704                  		add.l	($FFFFF704).w,d1
00006D30 4841                       		swap	d1
00006D32                            
00006D32                            loc_6700:
00006D32 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006D36 6D00                       		blt.s	loc_6724
00006D38 0441 0800                  		subi.w	#$800,d1
00006D3C 6500                       		bcs.s	loc_6720
00006D3E 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D44 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006D4A 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D50 6000                       		bra.s	loc_6724
00006D52                            ; ===========================================================================
00006D52                            
00006D52                            loc_6720:
00006D52 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006D56                            
00006D56                            loc_6724:
00006D56 3838 F704                  		move.w	($FFFFF704).w,d4
00006D5A 4841                       		swap	d1
00006D5C 2601                       		move.l	d1,d3
00006D5E 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006D62 E09B                       		ror.l	#8,d3
00006D64 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006D68 21C1 F704                  		move.l	d1,($FFFFF704).w
00006D6C 3038 F704                  		move.w	($FFFFF704).w,d0
00006D70 0240 0010                  		andi.w	#$10,d0
00006D74 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006D78 B300                       		eor.b	d1,d0
00006D7A 6600                       		bne.s	locret_6766
00006D7C 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006D82 3038 F704                  		move.w	($FFFFF704).w,d0
00006D86 9044                       		sub.w	d4,d0
00006D88 6A00                       		bpl.s	loc_6760
00006D8A 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006D90 4E75                       		rts	
00006D92                            ; ===========================================================================
00006D92                            
00006D92                            loc_6760:
00006D92 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006D98                            
00006D98                            locret_6766:
00006D98 4E75                       		rts	
00006D9A                            ; End of function ScrollVertical
00006D9A                            
00006D9A                            
00006D9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D9A                            
00006D9A                            
00006D9A                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006D9A 2438 F708                  		move.l	($FFFFF708).w,d2
00006D9E 2002                       		move.l	d2,d0
00006DA0 D084                       		add.l	d4,d0
00006DA2 21C0 F708                  		move.l	d0,($FFFFF708).w
00006DA6 2200                       		move.l	d0,d1
00006DA8 4841                       		swap	d1
00006DAA 0241 0010                  		andi.w	#$10,d1
00006DAE 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006DB2 B701                       		eor.b	d3,d1
00006DB4 6600                       		bne.s	loc_679C
00006DB6 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006DBC 9082                       		sub.l	d2,d0
00006DBE 6A00                       		bpl.s	loc_6796
00006DC0 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006DC6 6000                       		bra.s	loc_679C
00006DC8                            ; ===========================================================================
00006DC8                            
00006DC8                            loc_6796:
00006DC8 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006DCE                            
00006DCE                            loc_679C:
00006DCE 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006DD2 2003                       		move.l	d3,d0
00006DD4 D085                       		add.l	d5,d0
00006DD6 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006DDA 2200                       		move.l	d0,d1
00006DDC 4841                       		swap	d1
00006DDE 0241 0010                  		andi.w	#$10,d1
00006DE2 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006DE6 B501                       		eor.b	d2,d1
00006DE8 6600                       		bne.s	locret_67D0
00006DEA 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006DF0 9083                       		sub.l	d3,d0
00006DF2 6A00                       		bpl.s	loc_67CA
00006DF4 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006DFA 4E75                       		rts	
00006DFC                            ; ===========================================================================
00006DFC                            
00006DFC                            loc_67CA:
00006DFC 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E02                            
00006E02                            locret_67D0:
00006E02 4E75                       		rts	
00006E04                            ; End of function ScrollBlock1
00006E04                            
00006E04                            
00006E04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E04                            
00006E04                            
00006E04                            ScrollBlock2:				; XREF: Deform_SLZ
00006E04 2438 F708                  		move.l	($FFFFF708).w,d2
00006E08 2002                       		move.l	d2,d0
00006E0A D084                       		add.l	d4,d0
00006E0C 21C0 F708                  		move.l	d0,($FFFFF708).w
00006E10 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006E14 2003                       		move.l	d3,d0
00006E16 D085                       		add.l	d5,d0
00006E18 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006E1C 2200                       		move.l	d0,d1
00006E1E 4841                       		swap	d1
00006E20 0241 0010                  		andi.w	#$10,d1
00006E24 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E28 B501                       		eor.b	d2,d1
00006E2A 6600                       		bne.s	locret_6812
00006E2C 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E32 9083                       		sub.l	d3,d0
00006E34 6A00                       		bpl.s	loc_680C
00006E36 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E3C 4E75                       		rts	
00006E3E                            ; ===========================================================================
00006E3E                            
00006E3E                            loc_680C:
00006E3E 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E44                            
00006E44                            locret_6812:
00006E44 4E75                       		rts	
00006E46                            ; End of function ScrollBlock2
00006E46                            
00006E46                            
00006E46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E46                            
00006E46                            
00006E46                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006E46 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006E4A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006E4E 3200                       		move.w	d0,d1
00006E50 0241 0010                  		andi.w	#$10,d1
00006E54 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E58 B501                       		eor.b	d2,d1
00006E5A 6600                       		bne.s	locret_6842
00006E5C 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E62 9043                       		sub.w	d3,d0
00006E64 6A00                       		bpl.s	loc_683C
00006E66 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E6C 4E75                       		rts	
00006E6E                            ; ===========================================================================
00006E6E                            
00006E6E                            loc_683C:
00006E6E 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E74                            
00006E74                            locret_6842:
00006E74 4E75                       		rts	
00006E76                            ; End of function ScrollBlock3
00006E76                            
00006E76                            
00006E76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E76                            
00006E76                            
00006E76                            ScrollBlock4:				; XREF: Deform_GHZ
00006E76 3438 F710                  		move.w	($FFFFF710).w,d2
00006E7A 3638 F714                  		move.w	($FFFFF714).w,d3
00006E7E 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006E82 48C0                       		ext.l	d0
00006E84 EF80                       		asl.l	#7,d0
00006E86 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006E8A 3038 F710                  		move.w	($FFFFF710).w,d0
00006E8E 0240 0010                  		andi.w	#$10,d0
00006E92 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006E96 B300                       		eor.b	d1,d0
00006E98 6600                       		bne.s	locret_6884
00006E9A 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006EA0 3038 F710                  		move.w	($FFFFF710).w,d0
00006EA4 9042                       		sub.w	d2,d0
00006EA6 6A00                       		bpl.s	loc_687E
00006EA8 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006EAE 6000                       		bra.s	locret_6884
00006EB0                            ; ===========================================================================
00006EB0                            
00006EB0                            loc_687E:
00006EB0 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006EB6                            
00006EB6                            locret_6884:
00006EB6 4E75                       		rts	
00006EB8                            ; End of function ScrollBlock4
00006EB8                            
00006EB8                            
00006EB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EB8                            
00006EB8                            
00006EB8                            sub_6886:				; XREF: loc_C44
00006EB8 4BF9 00C0 0004             		lea	($C00004).l,a5
00006EBE 4DF9 00C0 0000             		lea	($C00000).l,a6
00006EC4 45F8 F756                  		lea	($FFFFF756).w,a2
00006EC8 47F8 F708                  		lea	($FFFFF708).w,a3
00006ECC 49F8 A440                  		lea	($FFFFA440).w,a4
00006ED0 343C 6000                  		move.w	#$6000,d2
00006ED4 6100 0000                  		bsr.w	sub_6954
00006ED8 45F8 F758                  		lea	($FFFFF758).w,a2
00006EDC 47F8 F710                  		lea	($FFFFF710).w,a3
00006EE0 6000 0000                  		bra.w	sub_69F4
00006EE4                            ; End of function sub_6886
00006EE4                            
00006EE4                            ; ---------------------------------------------------------------------------
00006EE4                            ; Subroutine to	display	correct	tiles as you move
00006EE4                            ; ---------------------------------------------------------------------------
00006EE4                            
00006EE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EE4                            
00006EE4                            
00006EE4                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006EE4 4BF9 00C0 0004             		lea	($C00004).l,a5
00006EEA 4DF9 00C0 0000             		lea	($C00000).l,a6
00006EF0 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006EF4 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006EF8 49F8 A440                  		lea	($FFFFA440).w,a4
00006EFC 343C 6000                  		move.w	#$6000,d2
00006F00 6100 0000                  		bsr.w	sub_6954
00006F04 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006F08 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006F0C 6100 0000                  		bsr.w	sub_69F4
00006F10 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006F14 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006F18 49F8 A400                  		lea	($FFFFA400).w,a4
00006F1C 343C 4000                  		move.w	#$4000,d2
00006F20 4A12                       		tst.b	(a2)
00006F22 6700                       		beq.s	locret_6952
00006F24 0892 0000                  		bclr	#0,(a2)
00006F28 6700                       		beq.s	loc_6908
00006F2A 78F0                       		moveq	#-$10,d4
00006F2C 7AF0                       		moveq	#-$10,d5
00006F2E 6100 0000                  		bsr.w	sub_6C20
00006F32 78F0                       		moveq	#-$10,d4
00006F34 7AF0                       		moveq	#-$10,d5
00006F36 6100 0000                  		bsr.w	sub_6AD8
00006F3A                            
00006F3A                            loc_6908:
00006F3A 0892 0001                  		bclr	#1,(a2)
00006F3E 6700                       		beq.s	loc_6922
00006F40 383C 00E0                  		move.w	#$E0,d4
00006F44 7AF0                       		moveq	#-$10,d5
00006F46 6100 0000                  		bsr.w	sub_6C20
00006F4A 383C 00E0                  		move.w	#$E0,d4
00006F4E 7AF0                       		moveq	#-$10,d5
00006F50 6100 0000                  		bsr.w	sub_6AD8
00006F54                            
00006F54                            loc_6922:
00006F54 0892 0002                  		bclr	#2,(a2)
00006F58 6700                       		beq.s	loc_6938
00006F5A 78F0                       		moveq	#-$10,d4
00006F5C 7AF0                       		moveq	#-$10,d5
00006F5E 6100 0000                  		bsr.w	sub_6C20
00006F62 78F0                       		moveq	#-$10,d4
00006F64 7AF0                       		moveq	#-$10,d5
00006F66 6100 0000                  		bsr.w	sub_6B04
00006F6A                            
00006F6A                            loc_6938:
00006F6A 0892 0003                  		bclr	#3,(a2)
00006F6E 6700                       		beq.s	locret_6952
00006F70 78F0                       		moveq	#-$10,d4
00006F72 3A3C 0140                  		move.w	#$140,d5
00006F76 6100 0000                  		bsr.w	sub_6C20
00006F7A 78F0                       		moveq	#-$10,d4
00006F7C 3A3C 0140                  		move.w	#$140,d5
00006F80 6100 0000                  		bsr.w	sub_6B04
00006F84                            
00006F84                            locret_6952:
00006F84 4E75                       		rts	
00006F86                            ; End of function LoadTilesAsYouMove
00006F86                            
00006F86                            
00006F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F86                            
00006F86                            
00006F86                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006F86 4A12                       		tst.b	(a2)
00006F88 6700 0000                  		beq.w	locret_69F2
00006F8C 0892 0000                  		bclr	#0,(a2)
00006F90 6700                       		beq.s	loc_6972
00006F92 78F0                       		moveq	#-$10,d4
00006F94 7AF0                       		moveq	#-$10,d5
00006F96 6100 0000                  		bsr.w	sub_6C20
00006F9A 78F0                       		moveq	#-$10,d4
00006F9C 7AF0                       		moveq	#-$10,d5
00006F9E 7C1F                       		moveq	#$1F,d6
00006FA0 6100 0000                  		bsr.w	sub_6ADA
00006FA4                            
00006FA4                            loc_6972:
00006FA4 0892 0001                  		bclr	#1,(a2)
00006FA8 6700                       		beq.s	loc_698E
00006FAA 383C 00E0                  		move.w	#$E0,d4
00006FAE 7AF0                       		moveq	#-$10,d5
00006FB0 6100 0000                  		bsr.w	sub_6C20
00006FB4 383C 00E0                  		move.w	#$E0,d4
00006FB8 7AF0                       		moveq	#-$10,d5
00006FBA 7C1F                       		moveq	#$1F,d6
00006FBC 6100 0000                  		bsr.w	sub_6ADA
00006FC0                            
00006FC0                            loc_698E:
00006FC0 0892 0002                  		bclr	#2,(a2)
00006FC4 6700                       		beq.s	loc_69BE
00006FC6 78F0                       		moveq	#-$10,d4
00006FC8 7AF0                       		moveq	#-$10,d5
00006FCA 6100 0000                  		bsr.w	sub_6C20
00006FCE 78F0                       		moveq	#-$10,d4
00006FD0 7AF0                       		moveq	#-$10,d5
00006FD2 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006FD6 322B 0004                  		move.w	4(a3),d1
00006FDA 0241 FFF0                  		andi.w	#-$10,d1
00006FDE 9C41                       		sub.w	d1,d6
00006FE0 6D00                       		blt.s	loc_69BE
00006FE2 E84E                       		lsr.w	#4,d6
00006FE4 0C46 000F                  		cmpi.w	#$F,d6
00006FE8 6500                       		bcs.s	loc_69BA
00006FEA 7C0F                       		moveq	#$F,d6
00006FEC                            
00006FEC                            loc_69BA:
00006FEC 6100 0000                  		bsr.w	sub_6B06
00006FF0                            
00006FF0                            loc_69BE:
00006FF0 0892 0003                  		bclr	#3,(a2)
00006FF4 6700                       		beq.s	locret_69F2
00006FF6 78F0                       		moveq	#-$10,d4
00006FF8 3A3C 0140                  		move.w	#$140,d5
00006FFC 6100 0000                  		bsr.w	sub_6C20
00007000 78F0                       		moveq	#-$10,d4
00007002 3A3C 0140                  		move.w	#$140,d5
00007006 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000700A 322B 0004                  		move.w	4(a3),d1
0000700E 0241 FFF0                  		andi.w	#-$10,d1
00007012 9C41                       		sub.w	d1,d6
00007014 6D00                       		blt.s	locret_69F2
00007016 E84E                       		lsr.w	#4,d6
00007018 0C46 000F                  		cmpi.w	#$F,d6
0000701C 6500                       		bcs.s	loc_69EE
0000701E 7C0F                       		moveq	#$F,d6
00007020                            
00007020                            loc_69EE:
00007020 6100 0000                  		bsr.w	sub_6B06
00007024                            
00007024                            locret_69F2:
00007024 4E75                       		rts	
00007026                            ; End of function sub_6954
00007026                            
00007026                            
00007026                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007026                            
00007026                            
00007026                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00007026 4A12                       		tst.b	(a2)
00007028 6700 0000                  		beq.w	locret_6A80
0000702C 0892 0002                  		bclr	#2,(a2)
00007030 6700                       		beq.s	loc_6A3E
00007032 0C53 0010                  		cmpi.w	#$10,(a3)
00007036 6500                       		bcs.s	loc_6A3E
00007038 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000703C 322B 0004                  		move.w	4(a3),d1
00007040 0241 FFF0                  		andi.w	#-$10,d1
00007044 9841                       		sub.w	d1,d4
00007046 3F04                       		move.w	d4,-(sp)
00007048 7AF0                       		moveq	#-$10,d5
0000704A 6100 0000                  		bsr.w	sub_6C20
0000704E 381F                       		move.w	(sp)+,d4
00007050 7AF0                       		moveq	#-$10,d5
00007052 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007056 322B 0004                  		move.w	4(a3),d1
0000705A 0241 FFF0                  		andi.w	#-$10,d1
0000705E 9C41                       		sub.w	d1,d6
00007060 6D00                       		blt.s	loc_6A3E
00007062 E84E                       		lsr.w	#4,d6
00007064 0446 000E                  		subi.w	#$E,d6
00007068 6400                       		bcc.s	loc_6A3E
0000706A 4446                       		neg.w	d6
0000706C 6100 0000                  		bsr.w	sub_6B06
00007070                            
00007070                            loc_6A3E:
00007070 0892 0003                  		bclr	#3,(a2)
00007074 6700                       		beq.s	locret_6A80
00007076 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000707A 322B 0004                  		move.w	4(a3),d1
0000707E 0241 FFF0                  		andi.w	#-$10,d1
00007082 9841                       		sub.w	d1,d4
00007084 3F04                       		move.w	d4,-(sp)
00007086 3A3C 0140                  		move.w	#$140,d5
0000708A 6100 0000                  		bsr.w	sub_6C20
0000708E 381F                       		move.w	(sp)+,d4
00007090 3A3C 0140                  		move.w	#$140,d5
00007094 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007098 322B 0004                  		move.w	4(a3),d1
0000709C 0241 FFF0                  		andi.w	#-$10,d1
000070A0 9C41                       		sub.w	d1,d6
000070A2 6D00                       		blt.s	locret_6A80
000070A4 E84E                       		lsr.w	#4,d6
000070A6 0446 000E                  		subi.w	#$E,d6
000070AA 6400                       		bcc.s	locret_6A80
000070AC 4446                       		neg.w	d6
000070AE 6100 0000                  		bsr.w	sub_6B06
000070B2                            
000070B2                            locret_6A80:
000070B2 4E75                       		rts	
000070B4                            ; End of function sub_69F4
000070B4                            
000070B4                            ; ===========================================================================
000070B4 4A12                       		tst.b	(a2)
000070B6 6700                       		beq.s	locret_6AD6
000070B8 0892 0002                  		bclr	#2,(a2)
000070BC 6700                       		beq.s	loc_6AAC
000070BE 383C 00D0                  		move.w	#$D0,d4
000070C2 322B 0004                  		move.w	4(a3),d1
000070C6 0241 FFF0                  		andi.w	#-$10,d1
000070CA 9841                       		sub.w	d1,d4
000070CC 3F04                       		move.w	d4,-(sp)
000070CE 7AF0                       		moveq	#-$10,d5
000070D0 6100 0000                  		bsr.w	sub_6C3C
000070D4 381F                       		move.w	(sp)+,d4
000070D6 7AF0                       		moveq	#-$10,d5
000070D8 7C02                       		moveq	#2,d6
000070DA 6100 0000                  		bsr.w	sub_6B06
000070DE                            
000070DE                            loc_6AAC:
000070DE 0892 0003                  		bclr	#3,(a2)
000070E2 6700                       		beq.s	locret_6AD6
000070E4 383C 00D0                  		move.w	#$D0,d4
000070E8 322B 0004                  		move.w	4(a3),d1
000070EC 0241 FFF0                  		andi.w	#-$10,d1
000070F0 9841                       		sub.w	d1,d4
000070F2 3F04                       		move.w	d4,-(sp)
000070F4 3A3C 0140                  		move.w	#$140,d5
000070F8 6100 0000                  		bsr.w	sub_6C3C
000070FC 381F                       		move.w	(sp)+,d4
000070FE 3A3C 0140                  		move.w	#$140,d5
00007102 7C02                       		moveq	#2,d6
00007104 6100 0000                  		bsr.w	sub_6B06
00007108                            
00007108                            locret_6AD6:
00007108 4E75                       		rts	
0000710A                            
0000710A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000710A                            
0000710A                            
0000710A                            sub_6AD8:				; XREF: LoadTilesAsYouMove
0000710A 7C15                       		moveq	#$15,d6
0000710C                            ; End of function sub_6AD8
0000710C                            
0000710C                            
0000710C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000710C                            
0000710C                            
0000710C                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
0000710C 2E3C 0080 0000             		move.l	#$800000,d7
00007112 2200                       		move.l	d0,d1
00007114                            
00007114                            loc_6AE2:
00007114 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007118 6100 0000                  		bsr.w	sub_6BD6
0000711C 2001                       		move.l	d1,d0
0000711E 6100 0000                  		bsr.w	sub_6B32
00007122 5801                       		addq.b	#4,d1
00007124 0201 007F                  		andi.b	#$7F,d1
00007128 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000712C 0645 0010                  		addi.w	#$10,d5
00007130 51CE FFE2                  		dbf	d6,loc_6AE2
00007134 4E75                       		rts	
00007136                            ; End of function sub_6ADA
00007136                            
00007136                            
00007136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007136                            
00007136                            
00007136                            sub_6B04:				; XREF: LoadTilesAsYouMove
00007136 7C0F                       		moveq	#$F,d6
00007138                            ; End of function sub_6B04
00007138                            
00007138                            
00007138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007138                            
00007138                            
00007138                            sub_6B06:				; XREF: sub_6954
00007138 2E3C 0080 0000             		move.l	#$800000,d7
0000713E 2200                       		move.l	d0,d1
00007140                            
00007140                            loc_6B0E:
00007140 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007144 6100 0000                  		bsr.w	sub_6BD6
00007148 2001                       		move.l	d1,d0
0000714A 6100 0000                  		bsr.w	sub_6B32
0000714E 0641 0100                  		addi.w	#$100,d1
00007152 0241 0FFF                  		andi.w	#$FFF,d1
00007156 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000715A 0644 0010                  		addi.w	#$10,d4
0000715E 51CE FFE0                  		dbf	d6,loc_6B0E
00007162 4E75                       		rts	
00007164                            ; End of function sub_6B06
00007164                            
00007164                            
00007164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007164                            
00007164                            
00007164                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007164 8042                       		or.w	d2,d0
00007166 4840                       		swap	d0
00007168 0810 0004                  		btst	#4,(a0)
0000716C 6600                       		bne.s	loc_6B6E
0000716E 0810 0003                  		btst	#3,(a0)
00007172 6600                       		bne.s	loc_6B4E
00007174 2A80                       		move.l	d0,(a5)
00007176 2C99                       		move.l	(a1)+,(a6)
00007178 D087                       		add.l	d7,d0
0000717A 2A80                       		move.l	d0,(a5)
0000717C 2C99                       		move.l	(a1)+,(a6)
0000717E 4E75                       		rts	
00007180                            ; ===========================================================================
00007180                            
00007180                            loc_6B4E:
00007180 2A80                       		move.l	d0,(a5)
00007182 2819                       		move.l	(a1)+,d4
00007184 0A84 0800 0800             		eori.l	#$8000800,d4
0000718A 4844                       		swap	d4
0000718C 2C84                       		move.l	d4,(a6)
0000718E D087                       		add.l	d7,d0
00007190 2A80                       		move.l	d0,(a5)
00007192 2819                       		move.l	(a1)+,d4
00007194 0A84 0800 0800             		eori.l	#$8000800,d4
0000719A 4844                       		swap	d4
0000719C 2C84                       		move.l	d4,(a6)
0000719E 4E75                       		rts	
000071A0                            ; ===========================================================================
000071A0                            
000071A0                            loc_6B6E:
000071A0 0810 0003                  		btst	#3,(a0)
000071A4 6600                       		bne.s	loc_6B90
000071A6 2A80                       		move.l	d0,(a5)
000071A8 2A19                       		move.l	(a1)+,d5
000071AA 2819                       		move.l	(a1)+,d4
000071AC 0A84 1000 1000             		eori.l	#$10001000,d4
000071B2 2C84                       		move.l	d4,(a6)
000071B4 D087                       		add.l	d7,d0
000071B6 2A80                       		move.l	d0,(a5)
000071B8 0A85 1000 1000             		eori.l	#$10001000,d5
000071BE 2C85                       		move.l	d5,(a6)
000071C0 4E75                       		rts	
000071C2                            ; ===========================================================================
000071C2                            
000071C2                            loc_6B90:
000071C2 2A80                       		move.l	d0,(a5)
000071C4 2A19                       		move.l	(a1)+,d5
000071C6 2819                       		move.l	(a1)+,d4
000071C8 0A84 1800 1800             		eori.l	#$18001800,d4
000071CE 4844                       		swap	d4
000071D0 2C84                       		move.l	d4,(a6)
000071D2 D087                       		add.l	d7,d0
000071D4 2A80                       		move.l	d0,(a5)
000071D6 0A85 1800 1800             		eori.l	#$18001800,d5
000071DC 4845                       		swap	d5
000071DE 2C85                       		move.l	d5,(a6)
000071E0 4E75                       		rts	
000071E2                            ; End of function sub_6B32
000071E2                            
000071E2                            ; ===========================================================================
000071E2 4E75                       		rts	
000071E4                            ; ===========================================================================
000071E4 2A80                       		move.l	d0,(a5)
000071E6 3A3C 2000                  		move.w	#$2000,d5
000071EA 3819                       		move.w	(a1)+,d4
000071EC D845                       		add.w	d5,d4
000071EE 3C84                       		move.w	d4,(a6)
000071F0 3819                       		move.w	(a1)+,d4
000071F2 D845                       		add.w	d5,d4
000071F4 3C84                       		move.w	d4,(a6)
000071F6 D087                       		add.l	d7,d0
000071F8 2A80                       		move.l	d0,(a5)
000071FA 3819                       		move.w	(a1)+,d4
000071FC D845                       		add.w	d5,d4
000071FE 3C84                       		move.w	d4,(a6)
00007200 3819                       		move.w	(a1)+,d4
00007202 D845                       		add.w	d5,d4
00007204 3C84                       		move.w	d4,(a6)
00007206 4E75                       		rts	
00007208                            
00007208                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007208                            
00007208                            
00007208                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007208 43F8 B000                  		lea	($FFFFB000).w,a1
0000720C D86B 0004                  		add.w	4(a3),d4
00007210 DA53                       		add.w	(a3),d5
00007212 3604                       		move.w	d4,d3
00007214 E24B                       		lsr.w	#1,d3
00007216 0243 0380                  		andi.w	#$380,d3
0000721A E64D                       		lsr.w	#3,d5
0000721C 3005                       		move.w	d5,d0
0000721E EA48                       		lsr.w	#5,d0
00007220 0240 007F                  		andi.w	#$7F,d0
00007224 D043                       		add.w	d3,d0
00007226 76FF                       		moveq	#-1,d3
00007228 1634 0000                  		move.b	(a4,d0.w),d3
0000722C 6700                       		beq.s	locret_6C1E
0000722E 5303                       		subq.b	#1,d3
00007230 0243 007F                  		andi.w	#$7F,d3
00007234 EE5B                       		ror.w	#7,d3
00007236 D844                       		add.w	d4,d4
00007238 0244 01E0                  		andi.w	#$1E0,d4
0000723C 0245 001E                  		andi.w	#$1E,d5
00007240 D644                       		add.w	d4,d3
00007242 D645                       		add.w	d5,d3
00007244 2043                       		movea.l	d3,a0
00007246 3610                       		move.w	(a0),d3
00007248 0243 03FF                  		andi.w	#$3FF,d3
0000724C E74B                       		lsl.w	#3,d3
0000724E D2C3                       		adda.w	d3,a1
00007250                            
00007250                            locret_6C1E:
00007250 4E75                       		rts	
00007252                            ; End of function sub_6BD6
00007252                            
00007252                            
00007252                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007252                            
00007252                            
00007252                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007252 D86B 0004                  		add.w	4(a3),d4
00007256 DA53                       		add.w	(a3),d5
00007258 0244 00F0                  		andi.w	#$F0,d4
0000725C 0245 01F0                  		andi.w	#$1F0,d5
00007260 E94C                       		lsl.w	#4,d4
00007262 E44D                       		lsr.w	#2,d5
00007264 D845                       		add.w	d5,d4
00007266 7003                       		moveq	#3,d0
00007268 4840                       		swap	d0
0000726A 3004                       		move.w	d4,d0
0000726C 4E75                       		rts	
0000726E                            ; End of function sub_6C20
0000726E                            
0000726E                            
0000726E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000726E                            ; not used
0000726E                            
0000726E                            
0000726E                            sub_6C3C:
0000726E D86B 0004                  		add.w	4(a3),d4
00007272 DA53                       		add.w	(a3),d5
00007274 0244 00F0                  		andi.w	#$F0,d4
00007278 0245 01F0                  		andi.w	#$1F0,d5
0000727C E94C                       		lsl.w	#4,d4
0000727E E44D                       		lsr.w	#2,d5
00007280 D845                       		add.w	d5,d4
00007282 7002                       		moveq	#2,d0
00007284 4840                       		swap	d0
00007286 3004                       		move.w	d4,d0
00007288 4E75                       		rts	
0000728A                            ; End of function sub_6C3C
0000728A                            
0000728A                            ; ---------------------------------------------------------------------------
0000728A                            ; Subroutine to	load tiles as soon as the level	appears
0000728A                            ; ---------------------------------------------------------------------------
0000728A                            
0000728A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000728A                            
0000728A                            
0000728A                            LoadTilesFromStart:			; XREF: Level; EndingSequence
0000728A 4BF9 00C0 0004             		lea	($C00004).l,a5
00007290 4DF9 00C0 0000             		lea	($C00000).l,a6
00007296 47F8 F700                  		lea	($FFFFF700).w,a3
0000729A 49F8 A400                  		lea	($FFFFA400).w,a4
0000729E 343C 4000                  		move.w	#$4000,d2
000072A2 6100                       		bsr.s	LoadTilesFromStart2
000072A4 47F8 F708                  		lea	($FFFFF708).w,a3
000072A8 49F8 A440                  		lea	($FFFFA440).w,a4
000072AC 343C 6000                  		move.w	#$6000,d2
000072B0                            ; End of function LoadTilesFromStart
000072B0                            
000072B0                            
000072B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072B0                            
000072B0                            
000072B0                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000072B0 78F0                       		moveq	#-$10,d4
000072B2 7C0F                       		moveq	#$F,d6
000072B4                            
000072B4                            loc_6C82:
000072B4 48E7 0E00                  		movem.l	d4-d6,-(sp)
000072B8 7A00                       		moveq	#0,d5
000072BA 3204                       		move.w	d4,d1
000072BC 6100 FF94                  		bsr.w	sub_6C20
000072C0 3801                       		move.w	d1,d4
000072C2 7A00                       		moveq	#0,d5
000072C4 7C1F                       		moveq	#$1F,d6
000072C6 6100 FE44                  		bsr.w	sub_6ADA
000072CA 4CDF 0070                  		movem.l	(sp)+,d4-d6
000072CE 0644 0010                  		addi.w	#$10,d4
000072D2 51CE FFE0                  		dbf	d6,loc_6C82
000072D6 4E75                       		rts	
000072D8                            ; End of function LoadTilesFromStart2
000072D8                            
000072D8                            ; ---------------------------------------------------------------------------
000072D8                            ; Main Load Block loading subroutine
000072D8                            ; ---------------------------------------------------------------------------
000072D8                            
000072D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072D8                            
000072D8                            
000072D8                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000072D8 7000                       		moveq	#0,d0
000072DA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000072DE E948                       		lsl.w	#4,d0
000072E0 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000072E6 45F2 0000                  		lea	(a2,d0.w),a2
000072EA 2F0A                       		move.l	a2,-(sp)
000072EC 588A                       		addq.l	#4,a2
000072EE 205A                       		movea.l	(a2)+,a0
000072F0 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000072F4 303C 0000                  		move.w	#0,d0
000072F8 6100 A648                  		bsr.w	EniDec
000072FC 205A                       		movea.l	(a2)+,a0
000072FE 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007304 6100 A7BA                  		bsr.w	KosDec
00007308 6100 0000                  		bsr.w	LevelLayoutLoad
0000730C 301A                       		move.w	(a2)+,d0
0000730E 3012                       		move.w	(a2),d0
00007310 0240 00FF                  		andi.w	#$FF,d0
00007314 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
0000731A 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
0000731C 700C                       		moveq	#$C,d0		; use SB3 pallet
0000731E                            
0000731E                            MLB_ChkSBZPal:
0000731E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007324 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007326 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000732C 6600                       		bne.s	MLB_NormalPal	; if not, branch
0000732E                            
0000732E                            MLB_UsePal0E:
0000732E 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007330                            
00007330                            MLB_NormalPal:
00007330 6100 AFB4                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007334 245F                       		movea.l	(sp)+,a2
00007336 584A                       		addq.w	#4,a2
00007338 7000                       		moveq	#0,d0
0000733A 1012                       		move.b	(a2),d0
0000733C 6700                       		beq.s	locret_6D10
0000733E 6100 A464                  		bsr.w	LoadPLC		; load pattern load cues
00007342                            
00007342                            locret_6D10:
00007342 4E75                       		rts	
00007344                            ; End of function MainLoadBlockLoad
00007344                            
00007344                            ; ---------------------------------------------------------------------------
00007344                            ; Level	layout loading subroutine
00007344                            ; ---------------------------------------------------------------------------
00007344                            
00007344                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007344                            
00007344                            
00007344                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007344 47F8 A400                  		lea	($FFFFA400).w,a3
00007348 323C 01FF                  		move.w	#$1FF,d1
0000734C 7000                       		moveq	#0,d0
0000734E                            
0000734E                            LevLoad_ClrRam:
0000734E 26C0                       		move.l	d0,(a3)+
00007350 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007354                            
00007354 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007358 7200                       		moveq	#0,d1
0000735A 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
0000735E 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007362 7202                       		moveq	#2,d1
00007364                            ; End of function LevelLayoutLoad
00007364                            
00007364                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007364                            
00007364                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007364                            
00007364                            
00007364                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007364 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007368 ED08                       		lsl.b	#6,d0
0000736A EA48                       		lsr.w	#5,d0
0000736C 3400                       		move.w	d0,d2
0000736E D040                       		add.w	d0,d0
00007370 D042                       		add.w	d2,d0
00007372 D041                       		add.w	d1,d0
00007374 43F9 0000 0000             		lea	(Level_Index).l,a1
0000737A 3031 0000                  		move.w	(a1,d0.w),d0
0000737E 43F1 0000                  		lea	(a1,d0.w),a1
00007382 7200                       		moveq	#0,d1
00007384 3401                       		move.w	d1,d2
00007386 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007388 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000738A                            
0000738A                            LevLoad_NumRows:
0000738A 3001                       		move.w	d1,d0
0000738C 204B                       		movea.l	a3,a0
0000738E                            
0000738E                            LevLoad_Row:
0000738E 10D9                       		move.b	(a1)+,(a0)+
00007390 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007394 47EB 0080                  		lea	$80(a3),a3	; do next row
00007398 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
0000739C 4E75                       		rts	
0000739E                            ; End of function LevelLayoutLoad2
0000739E                            
0000739E                            ; ---------------------------------------------------------------------------
0000739E                            ; Dynamic screen resize	loading	subroutine
0000739E                            ; ---------------------------------------------------------------------------
0000739E                            
0000739E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000739E                            
0000739E                            
0000739E                            DynScrResizeLoad:			; XREF: DeformBgLayer
0000739E 7000                       		moveq	#0,d0
000073A0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000073A4 D040                       		add.w	d0,d0
000073A6 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000073AA 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000073AE 7202                       		moveq	#2,d1
000073B0 3038 F726                  		move.w	($FFFFF726).w,d0
000073B4 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000073B8 6700                       		beq.s	locret_6DAA
000073BA 6400                       		bcc.s	loc_6DAC
000073BC 4441                       		neg.w	d1
000073BE 3038 F704                  		move.w	($FFFFF704).w,d0
000073C2 B078 F726                  		cmp.w	($FFFFF726).w,d0
000073C6 6300                       		bls.s	loc_6DA0
000073C8 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000073CC 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000073D2                            
000073D2                            loc_6DA0:
000073D2 D378 F72E                  		add.w	d1,($FFFFF72E).w
000073D6 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000073DC                            
000073DC                            locret_6DAA:
000073DC 4E75                       		rts	
000073DE                            ; ===========================================================================
000073DE                            
000073DE                            loc_6DAC:				; XREF: DynScrResizeLoad
000073DE 3038 F704                  		move.w	($FFFFF704).w,d0
000073E2 5040                       		addq.w	#8,d0
000073E4 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000073E8 6500                       		bcs.s	loc_6DC4
000073EA 0838 0001 D022             		btst	#1,($FFFFD022).w
000073F0 6700                       		beq.s	loc_6DC4
000073F2 D241                       		add.w	d1,d1
000073F4 D241                       		add.w	d1,d1
000073F6                            
000073F6                            loc_6DC4:
000073F6 D378 F72E                  		add.w	d1,($FFFFF72E).w
000073FA 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007400 4E75                       		rts	
00007402                            ; End of function DynScrResizeLoad
00007402                            
00007402                            ; ===========================================================================
00007402                            ; ---------------------------------------------------------------------------
00007402                            ; Offset index for dynamic screen resizing
00007402                            ; ---------------------------------------------------------------------------
00007402 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007406 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
0000740A 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
0000740E 0000                       		dc.w Resize_Ending-Resize_Index
00007410                            ; ===========================================================================
00007410                            ; ---------------------------------------------------------------------------
00007410                            ; Green	Hill Zone dynamic screen resizing
00007410                            ; ---------------------------------------------------------------------------
00007410                            
00007410                            Resize_GHZ:				; XREF: Resize_Index
00007410 7000                       		moveq	#0,d0
00007412 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007416 D040                       		add.w	d0,d0
00007418 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
0000741C 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007420                            ; ===========================================================================
00007420 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007422 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007424 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007426                            ; ===========================================================================
00007426                            
00007426                            Resize_GHZ1:
00007426 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
0000742C 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007432 6500                       		bcs.s	locret_6E08	; if not, branch
00007434 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
0000743A                            
0000743A                            locret_6E08:
0000743A 4E75                       		rts	
0000743C                            ; ===========================================================================
0000743C                            
0000743C                            Resize_GHZ2:
0000743C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007442 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007448 6500                       		bcs.s	locret_6E3A
0000744A 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007450 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007456 6500                       		bcs.s	locret_6E3A
00007458 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000745E 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007464 6500                       		bcs.s	locret_6E3A
00007466 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000746C                            
0000746C                            locret_6E3A:
0000746C 4E75                       		rts	
0000746E                            ; ===========================================================================
0000746E                            
0000746E                            Resize_GHZ3:
0000746E 7000                       		moveq	#0,d0
00007470 1038 F742                  		move.b	($FFFFF742).w,d0
00007474 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007478 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000747C                            ; ===========================================================================
0000747C 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
0000747E 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007480 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007482                            ; ===========================================================================
00007482                            
00007482                            Resize_GHZ3main:
00007482 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007488 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
0000748E 6500                       		bcs.s	locret_6E96
00007490 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007496 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000749C 6500                       		bcs.s	locret_6E96
0000749E 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000074A4 6500                       		bcs.s	loc_6E98
000074A6 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000074AC 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000074B2 6400                       		bcc.s	loc_6E8E
000074B4 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000074BA 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000074C0                            
000074C0                            loc_6E8E:
000074C0 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000074C6 6400                       		bcc.s	loc_6E98
000074C8                            
000074C8                            locret_6E96:
000074C8 4E75                       		rts	
000074CA                            ; ===========================================================================
000074CA                            
000074CA                            loc_6E98:
000074CA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000074D0 5438 F742                  		addq.b	#2,($FFFFF742).w
000074D4 4E75                       		rts	
000074D6                            ; ===========================================================================
000074D6                            
000074D6                            Resize_GHZ3boss:
000074D6 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000074DC 6400                       		bcc.s	loc_6EB0
000074DE 5538 F742                  		subq.b	#2,($FFFFF742).w
000074E2                            
000074E2                            loc_6EB0:
000074E2 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000074E8 6500                       		bcs.s	locret_6EE8
000074EA 6100 0000                  		bsr.w	SingleObjLoad
000074EE 6600                       		bne.s	loc_6ED0
000074F0 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000074F4 337C 2A60 0008             		move.w	#$2A60,8(a1)
000074FA 337C 0280 000C             		move.w	#$280,$C(a1)
00007500                            
00007500                            loc_6ED0:
00007500 303C 008C                  		move.w	#$8C,d0
00007504 6100 A0B4                  		bsr.w	PlaySound	; play boss music
00007508 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000750E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007512 7011                       		moveq	#$11,d0
00007514 6000 A28E                  		bra.w	LoadPLC		; load boss patterns
00007518                            ; ===========================================================================
00007518                            
00007518                            locret_6EE8:
00007518 4E75                       		rts	
0000751A                            ; ===========================================================================
0000751A                            
0000751A                            Resize_GHZ3end:
0000751A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007520 4E75                       		rts	
00007522                            ; ===========================================================================
00007522                            ; ---------------------------------------------------------------------------
00007522                            ; Labyrinth Zone dynamic screen	resizing
00007522                            ; ---------------------------------------------------------------------------
00007522                            
00007522                            Resize_LZ:				; XREF: Resize_Index
00007522 7000                       		moveq	#0,d0
00007524 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007528 D040                       		add.w	d0,d0
0000752A 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
0000752E 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007532                            ; ===========================================================================
00007532 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007534 0000                       		dc.w Resize_LZ12-Resize_LZx
00007536 0000                       		dc.w Resize_LZ3-Resize_LZx
00007538 0000                       		dc.w Resize_SBZ3-Resize_LZx
0000753A                            ; ===========================================================================
0000753A                            
0000753A                            Resize_LZ12:
0000753A 4E75                       		rts	
0000753C                            ; ===========================================================================
0000753C                            
0000753C                            Resize_LZ3:
0000753C 7000                       		moveq	#0,d0
0000753E 1038 F742                  		move.b	($FFFFF742).w,d0
00007542 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
00007546 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
0000754A                            ; ===========================================================================
0000754A                            off_6E4A2:	
0000754A 0000                       		dc.w Resize_LZ3boss-off_6E4A2
0000754C 0000                       		dc.w Resize_LZ3end-off_6E4A2
0000754E                            ; ===========================================================================
0000754E                            Resize_LZ3boss:
0000754E 4A38 F742                  		tst.b	($FFFFF742).w
00007552 6600                       		bne.s	locret_6F62
00007554 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000755A 6500                       		bcs.s	locret_6F62
0000755C 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
00007562 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00007568                            
00007568 6100 0000                  		bsr.w	SingleObjLoad
0000756C 6600                       		bne.s	loc_6F4A
0000756E 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007572 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
00007578 337C 06E0 000C             		move.w	#$6E0,$C(a1)
0000757E                            loc_6F4A:
0000757E 303C 008C                  		move.w	#$8C,d0
00007582 6100 A036                  		bsr.w	PlaySound	; play boss music
00007586 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000758C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007590 7020                       		moveq	#$20,d0
00007592 6000 A210                  		bra.w	LoadPLC		; load boss patterns
00007596                            ; ===========================================================================
00007596                            
00007596                            locret_6F62:
00007596 4E75                       		rts	
00007598                            ; ===========================================================================
00007598                            
00007598                            Resize_LZ3end:
00007598 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000759E 4E75                       		rts	
000075A0                            ; ===========================================================================
000075A0                            
000075A0                            Resize_SBZ3:
000075A0 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000075A6 6500                       		bcs.s	locret_6F8C
000075A8 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000075AE 6400                       		bcc.s	locret_6F8C	; if not, branch
000075B0 4238 FE30                  		clr.b	($FFFFFE30).w
000075B4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000075BA 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000075C0 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000075C6                            
000075C6                            locret_6F8C:
000075C6 4E75                       		rts	
000075C8                            ; ===========================================================================
000075C8                            ; ---------------------------------------------------------------------------
000075C8                            ; Marble Zone dynamic screen resizing
000075C8                            ; ---------------------------------------------------------------------------
000075C8                            
000075C8                            Resize_MZ:				; XREF: Resize_Index
000075C8 7000                       		moveq	#0,d0
000075CA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075CE D040                       		add.w	d0,d0
000075D0 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000075D4 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000075D8                            ; ===========================================================================
000075D8 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000075DA 0000                       		dc.w Resize_MZ2-Resize_MZx
000075DC 0000                       		dc.w Resize_MZ3-Resize_MZx
000075DE                            ; ===========================================================================
000075DE                            
000075DE                            Resize_MZ1:
000075DE 7000                       		moveq	#0,d0
000075E0 1038 F742                  		move.b	($FFFFF742).w,d0
000075E4 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000075E8 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000075EC                            ; ===========================================================================
000075EC 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000075EE 0000                       		dc.w loc_6FEA-off_6FB2
000075F0 0000                       		dc.w loc_702E-off_6FB2
000075F2 0000                       		dc.w loc_7050-off_6FB2
000075F4                            ; ===========================================================================
000075F4                            
000075F4                            loc_6FBA:
000075F4 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000075FA 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007600 6500                       		bcs.s	locret_6FE8
00007602 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007608 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000760E 6500                       		bcs.s	locret_6FE8
00007610 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007616 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000761C 6500                       		bcs.s	locret_6FE8
0000761E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007622                            
00007622                            locret_6FE8:
00007622 4E75                       		rts	
00007624                            ; ===========================================================================
00007624                            
00007624                            loc_6FEA:
00007624 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000762A 6400                       		bcc.s	loc_6FF8
0000762C 5538 F742                  		subq.b	#2,($FFFFF742).w
00007630 4E75                       		rts	
00007632                            ; ===========================================================================
00007632                            
00007632                            loc_6FF8:
00007632 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007638 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
0000763E 6400                       		bcc.s	locret_702C
00007640 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007646 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000764C 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007652 6400                       		bcc.s	locret_702C
00007654 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000765A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007660 6500                       		bcs.s	locret_702C
00007662 5438 F742                  		addq.b	#2,($FFFFF742).w
00007666                            
00007666                            locret_702C:
00007666 4E75                       		rts	
00007668                            ; ===========================================================================
00007668                            
00007668                            loc_702E:
00007668 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000766E 6400                       		bcc.s	loc_703C
00007670 5538 F742                  		subq.b	#2,($FFFFF742).w
00007674 4E75                       		rts	
00007676                            ; ===========================================================================
00007676                            
00007676                            loc_703C:
00007676 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000767C 6500                       		bcs.s	locret_704E
0000767E 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007684 5438 F742                  		addq.b	#2,($FFFFF742).w
00007688                            
00007688                            locret_704E:
00007688 4E75                       		rts	
0000768A                            ; ===========================================================================
0000768A                            
0000768A                            loc_7050:
0000768A 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007690 6500                       		bcs.s	locret_7072
00007692 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007698 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000769E 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
000076A4 6500                       		bcs.s	locret_7072
000076A6 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000076AC                            
000076AC                            locret_7072:
000076AC 4E75                       		rts	
000076AE                            ; ===========================================================================
000076AE                            
000076AE                            Resize_MZ2:
000076AE 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000076B4 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000076BA 6500                       		bcs.s	locret_7088
000076BC 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000076C2                            
000076C2                            locret_7088:
000076C2 4E75                       		rts	
000076C4                            ; ===========================================================================
000076C4                            
000076C4                            Resize_MZ3:
000076C4 7000                       		moveq	#0,d0
000076C6 1038 F742                  		move.b	($FFFFF742).w,d0
000076CA 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000076CE 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000076D2                            ; ===========================================================================
000076D2 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000076D4 0000                       		dc.w Resize_MZ3end-off_7098
000076D6                            ; ===========================================================================
000076D6                            
000076D6                            Resize_MZ3boss:
000076D6 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000076DC 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000076E2 6500                       		bcs.s	locret_70E8
000076E4 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000076EA 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000076F0 6500                       		bcs.s	locret_70E8
000076F2 6100 0000                  		bsr.w	SingleObjLoad
000076F6 6600                       		bne.s	loc_70D0
000076F8 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000076FC 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007702 337C 022C 000C             		move.w	#$22C,$C(a1)
00007708                            
00007708                            loc_70D0:
00007708 303C 008C                  		move.w	#$8C,d0
0000770C 6100 9EAC                  		bsr.w	PlaySound	; play boss music
00007710 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007716 5438 F742                  		addq.b	#2,($FFFFF742).w
0000771A 7011                       		moveq	#$11,d0
0000771C 6000 A086                  		bra.w	LoadPLC		; load boss patterns
00007720                            ; ===========================================================================
00007720                            
00007720                            locret_70E8:
00007720 4E75                       		rts	
00007722                            ; ===========================================================================
00007722                            
00007722                            Resize_MZ3end:
00007722 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007728 4E75                       		rts	
0000772A                            ; ===========================================================================
0000772A                            ; ---------------------------------------------------------------------------
0000772A                            ; Star Light Zone dynamic screen resizing
0000772A                            ; ---------------------------------------------------------------------------
0000772A                            
0000772A                            Resize_SLZ:				; XREF: Resize_Index
0000772A 7000                       		moveq	#0,d0
0000772C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007730 D040                       		add.w	d0,d0
00007732 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007736 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000773A                            ; ===========================================================================
0000773A 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
0000773C 0000                       		dc.w Resize_SLZ2-Resize_SLZx
0000773E 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007740                            ; ===========================================================================
00007740                            
00007740                            Resize_SLZ1:
00007740 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
00007746 4E75                       		rts	
00007748                            
00007748                            Resize_SLZ2:
00007748 4E75                       		rts	
0000774A                            ; ===========================================================================
0000774A                            
0000774A                            Resize_SLZ3:
0000774A 7000                       		moveq	#0,d0
0000774C 1038 F742                  		move.b	($FFFFF742).w,d0
00007750 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007754 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007758                            ; ===========================================================================
00007758 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000775A 0000                       		dc.w Resize_SLZ3boss-off_7118
0000775C 0000                       		dc.w Resize_SLZ3end-off_7118
0000775E                            ; ===========================================================================
0000775E                            
0000775E                            Resize_SLZ3main:
0000775E 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007764 6500                       		bcs.s	locret_7130
00007766 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000776C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007770                            
00007770                            locret_7130:
00007770 4E75                       		rts	
00007772                            ; ===========================================================================
00007772                            
00007772                            Resize_SLZ3boss:
00007772 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007778 6500                       		bcs.s	locret_715C
0000777A 6100 0000                  		bsr.w	SingleObjLoad
0000777E 6600                       		bne.s	loc_7144
00007780 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007784                            
00007784                            loc_7144:
00007784 303C 008C                  		move.w	#$8C,d0
00007788 6100 9E30                  		bsr.w	PlaySound	; play boss music
0000778C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007792 5438 F742                  		addq.b	#2,($FFFFF742).w
00007796 7011                       		moveq	#$11,d0
00007798 6000 A00A                  		bra.w	LoadPLC		; load boss patterns
0000779C                            ; ===========================================================================
0000779C                            
0000779C                            locret_715C:
0000779C 4E75                       		rts	
0000779E                            ; ===========================================================================
0000779E                            
0000779E                            Resize_SLZ3end:
0000779E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000077A4 4E75                       		rts
000077A6 4E75                       		rts
000077A8                            ; ===========================================================================
000077A8                            ; ---------------------------------------------------------------------------
000077A8                            ; Spring Yard Zone dynamic screen resizing
000077A8                            ; ---------------------------------------------------------------------------
000077A8                            
000077A8                            Resize_SYZ:				; XREF: Resize_Index
000077A8 7000                       		moveq	#0,d0
000077AA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000077AE D040                       		add.w	d0,d0
000077B0 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
000077B4 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000077B8                            ; ===========================================================================
000077B8 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000077BA 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000077BC 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000077BE                            ; ===========================================================================
000077BE                            
000077BE                            Resize_SYZ1:
000077BE 4E75                       		rts	
000077C0                            ; ===========================================================================
000077C0                            
000077C0                            Resize_SYZ2:
000077C0 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000077C6 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000077CC 6500                       		bcs.s	locret_71A2
000077CE 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000077D4 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000077DA 6500                       		bcs.s	locret_71A2
000077DC 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000077E2                            
000077E2                            locret_71A2:
000077E2 4E75                       		rts	
000077E4                            ; ===========================================================================
000077E4                            
000077E4                            Resize_SYZ3:
000077E4 7000                       		moveq	#0,d0
000077E6 1038 F742                  		move.b	($FFFFF742).w,d0
000077EA 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000077EE 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000077F2                            ; ===========================================================================
000077F2 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000077F4 0000                       		dc.w Resize_SYZ3boss-off_71B2
000077F6 0000                       		dc.w Resize_SYZ3end-off_71B2
000077F8                            ; ===========================================================================
000077F8                            
000077F8                            Resize_SYZ3main:
000077F8 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000077FE 6500                       		bcs.s	locret_71CE
00007800 6100 0000                  		bsr.w	SingleObjLoad
00007804 6600                       		bne.s	locret_71CE
00007806 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
0000780A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000780E                            
0000780E                            locret_71CE:
0000780E 4E75                       		rts	
00007810                            ; ===========================================================================
00007810                            
00007810                            Resize_SYZ3boss:
00007810 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007816 6500                       		bcs.s	locret_7200
00007818 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
0000781E 6100 0000                  		bsr.w	SingleObjLoad
00007822 6600                       		bne.s	loc_71EC
00007824 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007828 5438 F742                  		addq.b	#2,($FFFFF742).w
0000782C                            
0000782C                            loc_71EC:
0000782C 303C 008C                  		move.w	#$8C,d0
00007830 6100 9D88                  		bsr.w	PlaySound	; play boss music
00007834 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000783A 7011                       		moveq	#$11,d0
0000783C 6000 9F66                  		bra.w	LoadPLC		; load boss patterns
00007840                            ; ===========================================================================
00007840                            
00007840                            locret_7200:
00007840 4E75                       		rts	
00007842                            ; ===========================================================================
00007842                            
00007842                            Resize_SYZ3end:
00007842 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007848 4E75                       		rts	
0000784A                            ; ===========================================================================
0000784A                            ; ---------------------------------------------------------------------------
0000784A                            ; Scrap	Brain Zone dynamic screen resizing
0000784A                            ; ---------------------------------------------------------------------------
0000784A                            
0000784A                            Resize_SBZ:				; XREF: Resize_Index
0000784A 7000                       		moveq	#0,d0
0000784C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007850 D040                       		add.w	d0,d0
00007852 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007856 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000785A                            ; ===========================================================================
0000785A 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
0000785C 0000                       		dc.w Resize_SBZ2-Resize_SBZx
0000785E 0000                       		dc.w Resize_FZ-Resize_SBZx
00007860                            ; ===========================================================================
00007860                            
00007860                            Resize_SBZ1:
00007860 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007866 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000786C 6500                       		bcs.s	locret_7242
0000786E 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007874 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000787A 6500                       		bcs.s	locret_7242
0000787C 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007882                            
00007882                            locret_7242:
00007882 4E75                       		rts	
00007884                            ; ===========================================================================
00007884                            
00007884                            Resize_SBZ2:
00007884 7000                       		moveq	#0,d0
00007886 1038 F742                  		move.b	($FFFFF742).w,d0
0000788A 303B 0000                  		move.w	off_7252(pc,d0.w),d0
0000788E 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007892                            ; ===========================================================================
00007892 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007894 0000                       		dc.w Resize_SBZ2boss-off_7252
00007896 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007898 0000                       		dc.w Resize_SBZ2end-off_7252
0000789A                            ; ===========================================================================
0000789A                            
0000789A                            Resize_SBZ2main:
0000789A 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
000078A0 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
000078A6 6500                       		bcs.s	locret_727A
000078A8 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
000078AE 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
000078B4 6500                       		bcs.s	locret_727A
000078B6 5438 F742                  		addq.b	#2,($FFFFF742).w
000078BA                            
000078BA                            locret_727A:
000078BA 4E75                       		rts	
000078BC                            ; ===========================================================================
000078BC                            
000078BC                            Resize_SBZ2boss:
000078BC 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000078C2 6500                       		bcs.s	locret_7298
000078C4 6100 0000                  		bsr.w	SingleObjLoad
000078C8 6600                       		bne.s	locret_7298
000078CA 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000078CE 5438 F742                  		addq.b	#2,($FFFFF742).w
000078D2 701E                       		moveq	#$1E,d0
000078D4 6000 9ECE                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000078D8                            ; ===========================================================================
000078D8                            
000078D8                            locret_7298:
000078D8 4E75                       		rts	
000078DA                            ; ===========================================================================
000078DA                            
000078DA                            Resize_SBZ2boss2:
000078DA 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000078E0 6500                       		bcs.s	loc_72B6
000078E2 6100 0000                  		bsr.w	SingleObjLoad
000078E6 6600                       		bne.s	loc_72B0
000078E8 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000078EC 5438 F742                  		addq.b	#2,($FFFFF742).w
000078F0                            
000078F0                            loc_72B0:
000078F0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000078F6                            
000078F6                            loc_72B6:
000078F6 6000                       		bra.s	loc_72C2
000078F8                            ; ===========================================================================
000078F8                            
000078F8                            Resize_SBZ2end:
000078F8 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000078FE 6500                       		bcs.s	loc_72C2
00007900 4E75                       		rts	
00007902                            ; ===========================================================================
00007902                            
00007902                            loc_72C2:
00007902 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007908 4E75                       		rts	
0000790A                            ; ===========================================================================
0000790A                            
0000790A                            Resize_FZ:
0000790A 7000                       		moveq	#0,d0
0000790C 1038 F742                  		move.b	($FFFFF742).w,d0
00007910 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007914 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007918                            ; ===========================================================================
00007918 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
0000791C 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007920 0000                       		dc.w Resize_FZend2-off_72D8
00007922                            ; ===========================================================================
00007922                            
00007922                            Resize_FZmain:
00007922 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007928 6500                       		bcs.s	loc_72F4
0000792A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000792E 701F                       		moveq	#$1F,d0
00007930 6100 9E72                  		bsr.w	LoadPLC		; load FZ boss patterns
00007934                            
00007934                            loc_72F4:
00007934 60CC                       		bra.s	loc_72C2
00007936                            ; ===========================================================================
00007936                            
00007936                            Resize_FZboss:
00007936 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
0000793C 6500                       		bcs.s	loc_7312
0000793E 6100 0000                  		bsr.w	SingleObjLoad
00007942 6600                       		bne.s	loc_7312
00007944 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007948 5438 F742                  		addq.b	#2,($FFFFF742).w
0000794C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007952                            
00007952                            loc_7312:
00007952 60AE                       		bra.s	loc_72C2
00007954                            ; ===========================================================================
00007954                            
00007954                            Resize_FZend:
00007954 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0000795A 6500                       		bcs.s	loc_7320
0000795C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007960                            
00007960                            loc_7320:
00007960 60A0                       		bra.s	loc_72C2
00007962                            ; ===========================================================================
00007962                            
00007962                            locret_7322:
00007962 4E75                       		rts	
00007964                            ; ===========================================================================
00007964                            
00007964                            Resize_FZend2:
00007964 609C                       		bra.s	loc_72C2
00007966                            ; ===========================================================================
00007966                            ; ---------------------------------------------------------------------------
00007966                            ; Ending sequence dynamic screen resizing (empty)
00007966                            ; ---------------------------------------------------------------------------
00007966                            
00007966                            Resize_Ending:				; XREF: Resize_Index
00007966 4E75                       		rts	
00007968                            ; ===========================================================================
00007968                            ; ---------------------------------------------------------------------------
00007968                            ; Object 11 - GHZ bridge
00007968                            ; ---------------------------------------------------------------------------
00007968                            
00007968                            Obj11:					; XREF: Obj_Index
00007968 7000                       		moveq	#0,d0
0000796A 1028 0024                  		move.b	$24(a0),d0
0000796E 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007972 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007976                            ; ===========================================================================
00007976 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
0000797A 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
0000797E 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007982                            ; ===========================================================================
00007982                            
00007982                            Obj11_Main:				; XREF: Obj11_Index
00007982 5428 0024                  		addq.b	#2,$24(a0)
00007986 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
0000798E 317C 438E 0002             		move.w	#$438E,2(a0)
00007994 117C 0004 0001             		move.b	#4,1(a0)
0000799A 117C 0003 0018             		move.b	#3,$18(a0)
000079A0 117C 0080 0019             		move.b	#$80,$19(a0)
000079A6 3428 000C                  		move.w	$C(a0),d2
000079AA 3628 0008                  		move.w	8(a0),d3
000079AE 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
000079B0 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
000079B4 7200                       		moveq	#0,d1
000079B6 1212                       		move.b	(a2),d1		; copy a2 to d1
000079B8 14FC 0000                  		move.b	#0,(a2)+
000079BC 3001                       		move.w	d1,d0
000079BE E248                       		lsr.w	#1,d0
000079C0 E948                       		lsl.w	#4,d0
000079C2 9640                       		sub.w	d0,d3
000079C4 5501                       		subq.b	#2,d1
000079C6 6500                       		bcs.s	Obj11_Action
000079C8                            
000079C8                            Obj11_MakeBdg:
000079C8 6100 0000                  		bsr.w	SingleObjLoad
000079CC 6600                       		bne.s	Obj11_Action
000079CE 5228 0028                  		addq.b	#1,$28(a0)
000079D2 B668 0008                  		cmp.w	8(a0),d3
000079D6 6600                       		bne.s	loc_73B8
000079D8 0643 0010                  		addi.w	#$10,d3
000079DC 3142 000C                  		move.w	d2,$C(a0)
000079E0 3142 003C                  		move.w	d2,$3C(a0)
000079E4 3A08                       		move.w	a0,d5
000079E6 0445 D000                  		subi.w	#-$3000,d5
000079EA EC4D                       		lsr.w	#6,d5
000079EC 0245 007F                  		andi.w	#$7F,d5
000079F0 14C5                       		move.b	d5,(a2)+
000079F2 5228 0028                  		addq.b	#1,$28(a0)
000079F6                            
000079F6                            loc_73B8:				; XREF: ROM:00007398j
000079F6 3A09                       		move.w	a1,d5
000079F8 0445 D000                  		subi.w	#-$3000,d5
000079FC EC4D                       		lsr.w	#6,d5
000079FE 0245 007F                  		andi.w	#$7F,d5
00007A02 14C5                       		move.b	d5,(a2)+
00007A04 137C 000A 0024             		move.b	#$A,$24(a1)
00007A0A 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007A0C 3342 000C                  		move.w	d2,$C(a1)
00007A10 3342 003C                  		move.w	d2,$3C(a1)
00007A14 3343 0008                  		move.w	d3,8(a1)
00007A18 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007A20 337C 438E 0002             		move.w	#$438E,2(a1)
00007A26 137C 0004 0001             		move.b	#4,1(a1)
00007A2C 137C 0003 0018             		move.b	#3,$18(a1)
00007A32 137C 0008 0019             		move.b	#8,$19(a1)
00007A38 0643 0010                  		addi.w	#$10,d3
00007A3C 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007A40                            
00007A40                            Obj11_Action:				; XREF: Obj11_Index
00007A40 6100                       		bsr.s	Obj11_Solid
00007A42 4A28 003E                  		tst.b	$3E(a0)
00007A46 6700                       		beq.s	Obj11_Display
00007A48 5928 003E                  		subq.b	#4,$3E(a0)
00007A4C 6100 0000                  		bsr.w	Obj11_Bend
00007A50                            
00007A50                            Obj11_Display:
00007A50 6100 0000                  		bsr.w	DisplaySprite
00007A54 6000 0000                  		bra.w	Obj11_ChkDel
00007A58                            
00007A58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A58                            
00007A58                            
00007A58                            Obj11_Solid:				; XREF: Obj11_Action
00007A58 7200                       		moveq	#0,d1
00007A5A 1228 0028                  		move.b	$28(a0),d1
00007A5E E749                       		lsl.w	#3,d1
00007A60 3401                       		move.w	d1,d2
00007A62 5041                       		addq.w	#8,d1
00007A64 D442                       		add.w	d2,d2
00007A66 43F8 D000                  		lea	($FFFFD000).w,a1
00007A6A 4A69 0012                  		tst.w	$12(a1)
00007A6E 6B00 0000                  		bmi.w	locret_751E
00007A72 3029 0008                  		move.w	8(a1),d0
00007A76 9068 0008                  		sub.w	8(a0),d0
00007A7A D041                       		add.w	d1,d0
00007A7C 6B00 0000                  		bmi.w	locret_751E
00007A80 B042                       		cmp.w	d2,d0
00007A82 6400 0000                  		bcc.w	locret_751E
00007A86 6000                       		bra.s	Platform2
00007A88                            ; End of function Obj11_Solid
00007A88                            
00007A88                            ; ---------------------------------------------------------------------------
00007A88                            ; Platform subroutine
00007A88                            ; ---------------------------------------------------------------------------
00007A88                            
00007A88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A88                            
00007A88                            
00007A88                            PlatformObject:
00007A88 43F8 D000                  		lea	($FFFFD000).w,a1
00007A8C 4A69 0012                  		tst.w	$12(a1)
00007A90 6B00 0000                  		bmi.w	locret_751E
00007A94 3029 0008                  		move.w	8(a1),d0
00007A98 9068 0008                  		sub.w	8(a0),d0
00007A9C D041                       		add.w	d1,d0
00007A9E 6B00 0000                  		bmi.w	locret_751E
00007AA2 D241                       		add.w	d1,d1
00007AA4 B041                       		cmp.w	d1,d0
00007AA6 6400 0000                  		bcc.w	locret_751E
00007AAA                            
00007AAA                            Platform2:
00007AAA 3028 000C                  		move.w	$C(a0),d0
00007AAE 5140                       		subq.w	#8,d0
00007AB0                            
00007AB0                            Platform3:
00007AB0 3429 000C                  		move.w	$C(a1),d2
00007AB4 1229 0016                  		move.b	$16(a1),d1
00007AB8 4881                       		ext.w	d1
00007ABA D242                       		add.w	d2,d1
00007ABC 5841                       		addq.w	#4,d1
00007ABE 9041                       		sub.w	d1,d0
00007AC0 6200 0000                  		bhi.w	locret_751E
00007AC4 0C40 FFF0                  		cmpi.w	#-$10,d0
00007AC8 6500 0000                  		bcs.w	locret_751E
00007ACC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007AD0 6B00 0000                  		bmi.w	locret_751E
00007AD4 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007ADA 6400 0000                  		bcc.w	locret_751E
00007ADE D440                       		add.w	d0,d2
00007AE0 5642                       		addq.w	#3,d2
00007AE2 3342 000C                  		move.w	d2,$C(a1)
00007AE6 5428 0024                  		addq.b	#2,$24(a0)
00007AEA                            
00007AEA                            loc_74AE:
00007AEA 0829 0003 0022             		btst	#3,$22(a1)
00007AF0 6700                       		beq.s	loc_74DC
00007AF2 7000                       		moveq	#0,d0
00007AF4 1029 003D                  		move.b	$3D(a1),d0
00007AF8 ED48                       		lsl.w	#6,d0
00007AFA 0680 00FF D000             		addi.l	#$FFD000,d0
00007B00 2440                       		movea.l	d0,a2
00007B02 08AA 0003 0022             		bclr	#3,$22(a2)
00007B08 422A 0025                  		clr.b	$25(a2)
00007B0C 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007B12 6600                       		bne.s	loc_74DC
00007B14 552A 0024                  		subq.b	#2,$24(a2)
00007B18                            
00007B18                            loc_74DC:
00007B18 3008                       		move.w	a0,d0
00007B1A 0440 D000                  		subi.w	#-$3000,d0
00007B1E EC48                       		lsr.w	#6,d0
00007B20 0240 007F                  		andi.w	#$7F,d0
00007B24 1340 003D                  		move.b	d0,$3D(a1)
00007B28 137C 0000 0026             		move.b	#0,$26(a1)
00007B2E 337C 0000 0012             		move.w	#0,$12(a1)
00007B34 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007B3A 0829 0001 0022             		btst	#1,$22(a1)
00007B40 6700                       		beq.s	loc_7512
00007B42 2F08                       		move.l	a0,-(sp)
00007B44 2049                       		movea.l	a1,a0
00007B46 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007B4C 205F                       		movea.l	(sp)+,a0
00007B4E                            
00007B4E                            loc_7512:
00007B4E 08E9 0003 0022             		bset	#3,$22(a1)
00007B54 08E8 0003 0022             		bset	#3,$22(a0)
00007B5A                            
00007B5A                            locret_751E:
00007B5A 4E75                       		rts	
00007B5C                            ; End of function PlatformObject
00007B5C                            
00007B5C                            ; ---------------------------------------------------------------------------
00007B5C                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007B5C                            ; ---------------------------------------------------------------------------
00007B5C                            
00007B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B5C                            
00007B5C                            
00007B5C                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007B5C 43F8 D000                  		lea	($FFFFD000).w,a1
00007B60 4A69 0012                  		tst.w	$12(a1)
00007B64 6B00 FFF4                  		bmi.w	locret_751E
00007B68 3029 0008                  		move.w	8(a1),d0
00007B6C 9068 0008                  		sub.w	8(a0),d0
00007B70 D041                       		add.w	d1,d0
00007B72 6BE6                       		bmi.s	locret_751E
00007B74 D241                       		add.w	d1,d1
00007B76 B041                       		cmp.w	d1,d0
00007B78 64E0                       		bcc.s	locret_751E
00007B7A 0828 0000 0001             		btst	#0,1(a0)
00007B80 6700                       		beq.s	loc_754A
00007B82 4640                       		not.w	d0
00007B84 D041                       		add.w	d1,d0
00007B86                            
00007B86                            loc_754A:
00007B86 E248                       		lsr.w	#1,d0
00007B88 7600                       		moveq	#0,d3
00007B8A 1632 0000                  		move.b	(a2,d0.w),d3
00007B8E 3028 000C                  		move.w	$C(a0),d0
00007B92 9043                       		sub.w	d3,d0
00007B94 6000 FF1A                  		bra.w	Platform3
00007B98                            ; End of function SlopeObject
00007B98                            
00007B98                            
00007B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B98                            
00007B98                            
00007B98                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007B98 43F8 D000                  		lea	($FFFFD000).w,a1
00007B9C 4A69 0012                  		tst.w	$12(a1)
00007BA0 6B00 FFB8                  		bmi.w	locret_751E
00007BA4 3029 0008                  		move.w	8(a1),d0
00007BA8 9068 0008                  		sub.w	8(a0),d0
00007BAC D041                       		add.w	d1,d0
00007BAE 6B00 FFAA                  		bmi.w	locret_751E
00007BB2 D241                       		add.w	d1,d1
00007BB4 B041                       		cmp.w	d1,d0
00007BB6 6400 FFA2                  		bcc.w	locret_751E
00007BBA 3028 000C                  		move.w	$C(a0),d0
00007BBE 9043                       		sub.w	d3,d0
00007BC0 6000 FEEE                  		bra.w	Platform3
00007BC4                            ; End of function Obj15_Solid
00007BC4                            
00007BC4                            ; ===========================================================================
00007BC4                            
00007BC4                            Obj11_Action2:				; XREF: Obj11_Index
00007BC4 6100                       		bsr.s	Obj11_WalkOff
00007BC6 6100 0000                  		bsr.w	DisplaySprite
00007BCA 6000 0000                  		bra.w	Obj11_ChkDel
00007BCE                            
00007BCE                            ; ---------------------------------------------------------------------------
00007BCE                            ; Subroutine allowing Sonic to walk off a bridge
00007BCE                            ; ---------------------------------------------------------------------------
00007BCE                            
00007BCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BCE                            
00007BCE                            
00007BCE                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007BCE 7200                       		moveq	#0,d1
00007BD0 1228 0028                  		move.b	$28(a0),d1
00007BD4 E749                       		lsl.w	#3,d1
00007BD6 3401                       		move.w	d1,d2
00007BD8 5041                       		addq.w	#8,d1
00007BDA 6100                       		bsr.s	ExitPlatform2
00007BDC 6400                       		bcc.s	locret_75BE
00007BDE E848                       		lsr.w	#4,d0
00007BE0 1140 003F                  		move.b	d0,$3F(a0)
00007BE4 1028 003E                  		move.b	$3E(a0),d0
00007BE8 0C00 0040                  		cmpi.b	#$40,d0
00007BEC 6700                       		beq.s	loc_75B6
00007BEE 5828 003E                  		addq.b	#4,$3E(a0)
00007BF2                            
00007BF2                            loc_75B6:
00007BF2 6100 0000                  		bsr.w	Obj11_Bend
00007BF6 6100 0000                  		bsr.w	Obj11_MoveSonic
00007BFA                            
00007BFA                            locret_75BE:
00007BFA 4E75                       		rts	
00007BFC                            ; End of function Obj11_WalkOff
00007BFC                            
00007BFC                            ; ---------------------------------------------------------------------------
00007BFC                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007BFC                            ; ---------------------------------------------------------------------------
00007BFC                            
00007BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BFC                            
00007BFC                            
00007BFC                            ExitPlatform:
00007BFC 3401                       		move.w	d1,d2
00007BFE                            
00007BFE                            ExitPlatform2:
00007BFE D442                       		add.w	d2,d2
00007C00 43F8 D000                  		lea	($FFFFD000).w,a1
00007C04 0829 0001 0022             		btst	#1,$22(a1)
00007C0A 6600                       		bne.s	loc_75E0
00007C0C 3029 0008                  		move.w	8(a1),d0
00007C10 9068 0008                  		sub.w	8(a0),d0
00007C14 D041                       		add.w	d1,d0
00007C16 6B00                       		bmi.s	loc_75E0
00007C18 B042                       		cmp.w	d2,d0
00007C1A 6500                       		bcs.s	locret_75F2
00007C1C                            
00007C1C                            loc_75E0:
00007C1C 08A9 0003 0022             		bclr	#3,$22(a1)
00007C22 117C 0002 0024             		move.b	#2,$24(a0)
00007C28 08A8 0003 0022             		bclr	#3,$22(a0)
00007C2E                            
00007C2E                            locret_75F2:
00007C2E 4E75                       		rts	
00007C30                            ; End of function ExitPlatform
00007C30                            
00007C30                            
00007C30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C30                            
00007C30                            
00007C30                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007C30 7000                       		moveq	#0,d0
00007C32 1028 003F                  		move.b	$3F(a0),d0
00007C36 1030 0029                  		move.b	$29(a0,d0.w),d0
00007C3A ED48                       		lsl.w	#6,d0
00007C3C 0680 00FF D000             		addi.l	#$FFD000,d0
00007C42 2440                       		movea.l	d0,a2
00007C44 43F8 D000                  		lea	($FFFFD000).w,a1
00007C48 302A 000C                  		move.w	$C(a2),d0
00007C4C 5140                       		subq.w	#8,d0
00007C4E 7200                       		moveq	#0,d1
00007C50 1229 0016                  		move.b	$16(a1),d1
00007C54 9041                       		sub.w	d1,d0
00007C56 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007C5A 4E75                       		rts	
00007C5C                            ; End of function Obj11_MoveSonic
00007C5C                            
00007C5C                            
00007C5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C5C                            
00007C5C                            
00007C5C                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007C5C 1028 003E                  		move.b	$3E(a0),d0
00007C60 6100 B08A                  		bsr.w	CalcSine
00007C64 3800                       		move.w	d0,d4
00007C66 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007C6C 7000                       		moveq	#0,d0
00007C6E 1028 0028                  		move.b	$28(a0),d0
00007C72 E948                       		lsl.w	#4,d0
00007C74 7600                       		moveq	#0,d3
00007C76 1628 003F                  		move.b	$3F(a0),d3
00007C7A 3403                       		move.w	d3,d2
00007C7C D640                       		add.w	d0,d3
00007C7E 7A00                       		moveq	#0,d5
00007C80 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007C86 1A35 3000                  		move.b	(a5,d3.w),d5
00007C8A 0243 000F                  		andi.w	#$F,d3
00007C8E E94B                       		lsl.w	#4,d3
00007C90 47F4 3000                  		lea	(a4,d3.w),a3
00007C94 45E8 0029                  		lea	$29(a0),a2
00007C98                            
00007C98                            loc_765C:
00007C98 7000                       		moveq	#0,d0
00007C9A 101A                       		move.b	(a2)+,d0
00007C9C ED48                       		lsl.w	#6,d0
00007C9E 0680 00FF D000             		addi.l	#$FFD000,d0
00007CA4 2240                       		movea.l	d0,a1
00007CA6 7000                       		moveq	#0,d0
00007CA8 101B                       		move.b	(a3)+,d0
00007CAA 5240                       		addq.w	#1,d0
00007CAC C0C5                       		mulu.w	d5,d0
00007CAE C0C4                       		mulu.w	d4,d0
00007CB0 4840                       		swap	d0
00007CB2 D069 003C                  		add.w	$3C(a1),d0
00007CB6 3340 000C                  		move.w	d0,$C(a1)
00007CBA 51CA FFDC                  		dbf	d2,loc_765C
00007CBE 7000                       		moveq	#0,d0
00007CC0 1028 0028                  		move.b	$28(a0),d0
00007CC4 7600                       		moveq	#0,d3
00007CC6 1628 003F                  		move.b	$3F(a0),d3
00007CCA 5203                       		addq.b	#1,d3
00007CCC 9600                       		sub.b	d0,d3
00007CCE 4403                       		neg.b	d3
00007CD0 6B00                       		bmi.s	locret_76CA
00007CD2 3403                       		move.w	d3,d2
00007CD4 E94B                       		lsl.w	#4,d3
00007CD6 47F4 3000                  		lea	(a4,d3.w),a3
00007CDA D6C2                       		adda.w	d2,a3
00007CDC 5342                       		subq.w	#1,d2
00007CDE 6500                       		bcs.s	locret_76CA
00007CE0                            
00007CE0                            loc_76A4:
00007CE0 7000                       		moveq	#0,d0
00007CE2 101A                       		move.b	(a2)+,d0
00007CE4 ED48                       		lsl.w	#6,d0
00007CE6 0680 00FF D000             		addi.l	#$FFD000,d0
00007CEC 2240                       		movea.l	d0,a1
00007CEE 7000                       		moveq	#0,d0
00007CF0 1023                       		move.b	-(a3),d0
00007CF2 5240                       		addq.w	#1,d0
00007CF4 C0C5                       		mulu.w	d5,d0
00007CF6 C0C4                       		mulu.w	d4,d0
00007CF8 4840                       		swap	d0
00007CFA D069 003C                  		add.w	$3C(a1),d0
00007CFE 3340 000C                  		move.w	d0,$C(a1)
00007D02 51CA FFDC                  		dbf	d2,loc_76A4
00007D06                            
00007D06                            locret_76CA:
00007D06 4E75                       		rts	
00007D08                            ; End of function Obj11_Bend
00007D08                            
00007D08                            ; ===========================================================================
00007D08                            ; ---------------------------------------------------------------------------
00007D08                            ; GHZ bridge-bending data
00007D08                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007D08                            ; ---------------------------------------------------------------------------
00007D08                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007E18                            		even
00007E18                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007F18                            		even
00007F18                            
00007F18                            ; ===========================================================================
00007F18                            
00007F18                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007F18 3028 0008                  		move.w	8(a0),d0
00007F1C 0240 FF80                  		andi.w	#$FF80,d0
00007F20 3238 F700                  		move.w	($FFFFF700).w,d1
00007F24 0441 0080                  		subi.w	#$80,d1
00007F28 0241 FF80                  		andi.w	#$FF80,d1
00007F2C 9041                       		sub.w	d1,d0
00007F2E 0C40 0280                  		cmpi.w	#$280,d0
00007F32 6200 0000                  		bhi.w	Obj11_DelAll
00007F36 4E75                       		rts	
00007F38                            ; ===========================================================================
00007F38                            
00007F38                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007F38 7400                       		moveq	#0,d2
00007F3A 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007F3E 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007F40 5302                       		subq.b	#1,d2		; subtract 1
00007F42 6500                       		bcs.s	Obj11_Delete
00007F44                            
00007F44                            Obj11_DelLoop:
00007F44 7000                       		moveq	#0,d0
00007F46 101A                       		move.b	(a2)+,d0
00007F48 ED48                       		lsl.w	#6,d0
00007F4A 0680 00FF D000             		addi.l	#$FFD000,d0
00007F50 2240                       		movea.l	d0,a1
00007F52 B048                       		cmp.w	a0,d0
00007F54 6700                       		beq.s	loc_791E
00007F56 6100 0000                  		bsr.w	DeleteObject2
00007F5A                            
00007F5A                            loc_791E:
00007F5A 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007F5E                            
00007F5E                            Obj11_Delete:
00007F5E 6100 0000                  		bsr.w	DeleteObject
00007F62 4E75                       		rts	
00007F64                            ; ===========================================================================
00007F64                            
00007F64                            Obj11_Delete2:				; XREF: Obj11_Index
00007F64 6100 0000                  		bsr.w	DeleteObject
00007F68 4E75                       		rts	
00007F6A                            ; ===========================================================================
00007F6A                            
00007F6A                            Obj11_Display2:				; XREF: Obj11_Index
00007F6A 6100 0000                  		bsr.w	DisplaySprite
00007F6E 4E75                       		rts	
00007F70                            ; ===========================================================================
00007F70                            ; ---------------------------------------------------------------------------
00007F70                            ; Sprite mappings - GHZ	bridge
00007F70                            ; ---------------------------------------------------------------------------
00007F70                            Map_obj11:
00007F70                            	include "_maps\obj11.asm"
00007F70                            ; ---------------------------------------------------------------------------
00007F70                            ; Sprite mappings - GHZ	bridge
00007F70                            ; ---------------------------------------------------------------------------
00007F70 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007F74 0000                       		dc.w byte_794B-Map_obj11
00007F76 01                         byte_793A:	dc.b 1
00007F77 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007F7C 02                         byte_7940:	dc.b 2
00007F7D F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007F82 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007F87 01                         byte_794B:	dc.b 1
00007F88 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007F8E 00                         		even
00007F8E 00                         		even
00007F8E                            
00007F8E                            ; ===========================================================================
00007F8E                            ; ---------------------------------------------------------------------------
00007F8E                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007F8E                            ;	    - spiked ball on a chain (SBZ)
00007F8E                            ; ---------------------------------------------------------------------------
00007F8E                            
00007F8E                            Obj15:					; XREF: Obj_Index
00007F8E 7000                       		moveq	#0,d0
00007F90 1028 0024                  		move.b	$24(a0),d0
00007F94 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007F98 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007F9C                            ; ===========================================================================
00007F9C 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007FA0 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007FA4 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007FA8 0000                       		dc.w Obj15_Action-Obj15_Index
00007FAA                            ; ===========================================================================
00007FAA                            
00007FAA                            Obj15_Main:				; XREF: Obj15_Index
00007FAA 5428 0024                  		addq.b	#2,$24(a0)
00007FAE 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007FB6 317C 4380 0002             		move.w	#$4380,2(a0)
00007FBC 117C 0004 0001             		move.b	#4,1(a0)
00007FC2 117C 0003 0018             		move.b	#3,$18(a0)
00007FC8 117C 0018 0019             		move.b	#$18,$19(a0)
00007FCE 117C 0008 0016             		move.b	#8,$16(a0)
00007FD4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007FDA 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007FE0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007FE6 6600                       		bne.s	Obj15_NotSLZ
00007FE8 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007FF0 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007FF6 117C 0020 0019             		move.b	#$20,$19(a0)
00007FFC 117C 0010 0016             		move.b	#$10,$16(a0)
00008002 117C 0099 0020             		move.b	#$99,$20(a0)
00008008                            
00008008                            Obj15_NotSLZ:
00008008 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000800E 6600                       		bne.s	Obj15_SetLength
00008010 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008018 317C 0391 0002             		move.w	#$391,2(a0)
0000801E 117C 0018 0019             		move.b	#$18,$19(a0)
00008024 117C 0018 0016             		move.b	#$18,$16(a0)
0000802A 117C 0086 0020             		move.b	#$86,$20(a0)
00008030 117C 000C 0024             		move.b	#$C,$24(a0)
00008036                            
00008036                            Obj15_SetLength:
00008036 1810                       		move.b	0(a0),d4
00008038 7200                       		moveq	#0,d1
0000803A 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
0000803E 1212                       		move.b	(a2),d1		; move a2 to d1
00008040 3F01                       		move.w	d1,-(sp)
00008042 0241 000F                  		andi.w	#$F,d1
00008046 14FC 0000                  		move.b	#0,(a2)+
0000804A 3601                       		move.w	d1,d3
0000804C E94B                       		lsl.w	#4,d3
0000804E 5003                       		addq.b	#8,d3
00008050 1143 003C                  		move.b	d3,$3C(a0)
00008054 5103                       		subq.b	#8,d3
00008056 4A28 001A                  		tst.b	$1A(a0)
0000805A 6700                       		beq.s	Obj15_MakeChain
0000805C 5003                       		addq.b	#8,d3
0000805E 5341                       		subq.w	#1,d1
00008060                            
00008060                            Obj15_MakeChain:
00008060 6100 0000                  		bsr.w	SingleObjLoad
00008064 6600                       		bne.s	loc_7A92
00008066 5228 0028                  		addq.b	#1,$28(a0)
0000806A 3A09                       		move.w	a1,d5
0000806C 0445 D000                  		subi.w	#-$3000,d5
00008070 EC4D                       		lsr.w	#6,d5
00008072 0245 007F                  		andi.w	#$7F,d5
00008076 14C5                       		move.b	d5,(a2)+
00008078 137C 000A 0024             		move.b	#$A,$24(a1)
0000807E 1284                       		move.b	d4,0(a1)	; load swinging	object
00008080 2368 0004 0004             		move.l	4(a0),4(a1)
00008086 3368 0002 0002             		move.w	2(a0),2(a1)
0000808C 08A9 0006 0002             		bclr	#6,2(a1)
00008092 137C 0004 0001             		move.b	#4,1(a1)
00008098 137C 0004 0018             		move.b	#4,$18(a1)
0000809E 137C 0008 0019             		move.b	#8,$19(a1)
000080A4 137C 0001 001A             		move.b	#1,$1A(a1)
000080AA 1343 003C                  		move.b	d3,$3C(a1)
000080AE 0403 0010                  		subi.b	#$10,d3
000080B2 6400                       		bcc.s	loc_7A8E
000080B4 137C 0002 001A             		move.b	#2,$1A(a1)
000080BA 137C 0003 0018             		move.b	#3,$18(a1)
000080C0 08E9 0006 0002             		bset	#6,2(a1)
000080C6                            
000080C6                            loc_7A8E:
000080C6 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
000080CA                            
000080CA                            loc_7A92:
000080CA 3A08                       		move.w	a0,d5
000080CC 0445 D000                  		subi.w	#-$3000,d5
000080D0 EC4D                       		lsr.w	#6,d5
000080D2 0245 007F                  		andi.w	#$7F,d5
000080D6 14C5                       		move.b	d5,(a2)+
000080D8 317C 4080 0026             		move.w	#$4080,$26(a0)
000080DE 317C FE00 003E             		move.w	#-$200,$3E(a0)
000080E4 321F                       		move.w	(sp)+,d1
000080E6 0801 0004                  		btst	#4,d1		; is object type $8X ?
000080EA 6700                       		beq.s	loc_7AD4	; if not, branch
000080EC 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000080F4 317C 43AA 0002             		move.w	#$43AA,2(a0)
000080FA 117C 0001 001A             		move.b	#1,$1A(a0)
00008100 117C 0002 0018             		move.b	#2,$18(a0)
00008106 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
0000810C                            
0000810C                            loc_7AD4:
0000810C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008112 6700                       		beq.s	Obj15_Action	; if yes, branch
00008114                            
00008114                            Obj15_SetSolid:				; XREF: Obj15_Index
00008114 7200                       		moveq	#0,d1
00008116 1228 0019                  		move.b	$19(a0),d1
0000811A 7600                       		moveq	#0,d3
0000811C 1628 0016                  		move.b	$16(a0),d3
00008120 6100 FA76                  		bsr.w	Obj15_Solid
00008124                            
00008124                            Obj15_Action:				; XREF: Obj15_Index
00008124 6100 0000                  		bsr.w	Obj15_Move
00008128 6100 0000                  		bsr.w	DisplaySprite
0000812C 6000 0000                  		bra.w	Obj15_ChkDel
00008130                            ; ===========================================================================
00008130                            
00008130                            Obj15_Action2:				; XREF: Obj15_Index
00008130 7200                       		moveq	#0,d1
00008132 1228 0019                  		move.b	$19(a0),d1
00008136 6100 FAC4                  		bsr.w	ExitPlatform
0000813A 3F28 0008                  		move.w	8(a0),-(sp)
0000813E 6100 0000                  		bsr.w	Obj15_Move
00008142 341F                       		move.w	(sp)+,d2
00008144 7600                       		moveq	#0,d3
00008146 1628 0016                  		move.b	$16(a0),d3
0000814A 5203                       		addq.b	#1,d3
0000814C 6100 0000                  		bsr.w	MvSonicOnPtfm
00008150 6100 0000                  		bsr.w	DisplaySprite
00008154 6000 0000                  		bra.w	Obj15_ChkDel
00008158                            
00008158 4E75                       		rts
0000815A                            
0000815A                            ; ---------------------------------------------------------------------------
0000815A                            ; Subroutine to	change Sonic's position with a platform
0000815A                            ; ---------------------------------------------------------------------------
0000815A                            
0000815A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000815A                            
0000815A                            
0000815A                            MvSonicOnPtfm:
0000815A 43F8 D000                  		lea	($FFFFD000).w,a1
0000815E 3028 000C                  		move.w	$C(a0),d0
00008162 9043                       		sub.w	d3,d0
00008164 6000                       		bra.s	MvSonic2
00008166                            ; End of function MvSonicOnPtfm
00008166                            
00008166                            ; ---------------------------------------------------------------------------
00008166                            ; Subroutine to	change Sonic's position with a platform
00008166                            ; ---------------------------------------------------------------------------
00008166                            
00008166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008166                            
00008166                            
00008166                            MvSonicOnPtfm2:
00008166 43F8 D000                  		lea	($FFFFD000).w,a1
0000816A 3028 000C                  		move.w	$C(a0),d0
0000816E 0440 0009                  		subi.w	#9,d0
00008172                            
00008172                            MvSonic2:
00008172 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008176 6B00                       		bmi.s	locret_7B62
00008178 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000817E 6400                       		bcc.s	locret_7B62
00008180 4A78 FE08                  		tst.w	($FFFFFE08).w
00008184 6600                       		bne.s	locret_7B62
00008186 7200                       		moveq	#0,d1
00008188 1229 0016                  		move.b	$16(a1),d1
0000818C 9041                       		sub.w	d1,d0
0000818E 3340 000C                  		move.w	d0,$C(a1)
00008192 9468 0008                  		sub.w	8(a0),d2
00008196 9569 0008                  		sub.w	d2,8(a1)
0000819A                            
0000819A                            locret_7B62:
0000819A 4E75                       		rts	
0000819C                            ; End of function MvSonicOnPtfm2
0000819C                            
0000819C                            
0000819C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000819C                            
0000819C                            
0000819C                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
0000819C 1038 FE78                  		move.b	($FFFFFE78).w,d0
000081A0 323C 0080                  		move.w	#$80,d1
000081A4 0828 0000 0022             		btst	#0,$22(a0)
000081AA 6700                       		beq.s	loc_7B78
000081AC 4440                       		neg.w	d0
000081AE D041                       		add.w	d1,d0
000081B0                            
000081B0                            loc_7B78:
000081B0 6000                       		bra.s	Obj15_Move2
000081B2                            ; End of function Obj15_Move
000081B2                            
000081B2                            
000081B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081B2                            
000081B2                            
000081B2                            Obj48_Move:				; XREF: Obj48_Display2
000081B2 4A28 003D                  		tst.b	$3D(a0)
000081B6 6600                       		bne.s	loc_7B9C
000081B8 3028 003E                  		move.w	$3E(a0),d0
000081BC 5040                       		addq.w	#8,d0
000081BE 3140 003E                  		move.w	d0,$3E(a0)
000081C2 D168 0026                  		add.w	d0,$26(a0)
000081C6 0C40 0200                  		cmpi.w	#$200,d0
000081CA 6600                       		bne.s	loc_7BB6
000081CC 117C 0001 003D             		move.b	#1,$3D(a0)
000081D2 6000                       		bra.s	loc_7BB6
000081D4                            ; ===========================================================================
000081D4                            
000081D4                            loc_7B9C:
000081D4 3028 003E                  		move.w	$3E(a0),d0
000081D8 5140                       		subq.w	#8,d0
000081DA 3140 003E                  		move.w	d0,$3E(a0)
000081DE D168 0026                  		add.w	d0,$26(a0)
000081E2 0C40 FE00                  		cmpi.w	#-$200,d0
000081E6 6600                       		bne.s	loc_7BB6
000081E8 117C 0000 003D             		move.b	#0,$3D(a0)
000081EE                            
000081EE                            loc_7BB6:
000081EE 1028 0026                  		move.b	$26(a0),d0
000081F2                            ; End of function Obj48_Move
000081F2                            
000081F2                            
000081F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081F2                            
000081F2                            
000081F2                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
000081F2 6100 AAF8                  		bsr.w	CalcSine
000081F6 3428 0038                  		move.w	$38(a0),d2
000081FA 3628 003A                  		move.w	$3A(a0),d3
000081FE 45E8 0028                  		lea	$28(a0),a2
00008202 7C00                       		moveq	#0,d6
00008204 1C1A                       		move.b	(a2)+,d6
00008206                            
00008206                            loc_7BCE:
00008206 7800                       		moveq	#0,d4
00008208 181A                       		move.b	(a2)+,d4
0000820A ED4C                       		lsl.w	#6,d4
0000820C 0684 00FF D000             		addi.l	#$FFD000,d4
00008212 2244                       		movea.l	d4,a1
00008214 7800                       		moveq	#0,d4
00008216 1829 003C                  		move.b	$3C(a1),d4
0000821A 2A04                       		move.l	d4,d5
0000821C C9C0                       		muls.w	d0,d4
0000821E E084                       		asr.l	#8,d4
00008220 CBC1                       		muls.w	d1,d5
00008222 E085                       		asr.l	#8,d5
00008224 D842                       		add.w	d2,d4
00008226 DA43                       		add.w	d3,d5
00008228 3344 000C                  		move.w	d4,$C(a1)
0000822C 3345 0008                  		move.w	d5,8(a1)
00008230 51CE FFD4                  		dbf	d6,loc_7BCE
00008234 4E75                       		rts	
00008236                            ; End of function Obj15_Move2
00008236                            
00008236                            ; ===========================================================================
00008236                            
00008236                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008236 3028 003A                  		move.w	$3A(a0),d0
0000823A 0240 FF80                  		andi.w	#$FF80,d0
0000823E 3238 F700                  		move.w	($FFFFF700).w,d1
00008242 0441 0080                  		subi.w	#$80,d1
00008246 0241 FF80                  		andi.w	#$FF80,d1
0000824A 9041                       		sub.w	d1,d0
0000824C 0C40 0280                  		cmpi.w	#$280,d0
00008250 6200 0000                  		bhi.w	Obj15_DelAll
00008254 4E75                       		rts	
00008256                            ; ===========================================================================
00008256                            
00008256                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008256 7400                       		moveq	#0,d2
00008258 45E8 0028                  		lea	$28(a0),a2
0000825C 141A                       		move.b	(a2)+,d2
0000825E                            
0000825E                            Obj15_DelLoop:
0000825E 7000                       		moveq	#0,d0
00008260 101A                       		move.b	(a2)+,d0
00008262 ED48                       		lsl.w	#6,d0
00008264 0680 00FF D000             		addi.l	#$FFD000,d0
0000826A 2240                       		movea.l	d0,a1
0000826C 6100 0000                  		bsr.w	DeleteObject2
00008270 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008274 4E75                       		rts	
00008276                            ; ===========================================================================
00008276                            
00008276                            Obj15_Delete:				; XREF: Obj15_Index
00008276 6100 0000                  		bsr.w	DeleteObject
0000827A 4E75                       		rts	
0000827C                            ; ===========================================================================
0000827C                            
0000827C                            Obj15_Display:				; XREF: Obj15_Index
0000827C 6000 0000                  		bra.w	DisplaySprite
00008280                            ; ===========================================================================
00008280                            ; ---------------------------------------------------------------------------
00008280                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008280                            ; ---------------------------------------------------------------------------
00008280                            Map_obj15:
00008280                            	include "_maps\obj15ghz.asm"
00008280                            ; ---------------------------------------------------------------------------
00008280                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008280                            ; ---------------------------------------------------------------------------
00008280 0000                       		dc.w byte_7C4E-Map_obj15
00008282 0000                       		dc.w byte_7C59-Map_obj15
00008284 0000                       		dc.w byte_7C5F-Map_obj15
00008286 02                         byte_7C4E:	dc.b 2
00008287 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000828C F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008291 01                         byte_7C59:	dc.b 1
00008292 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008297 01                         byte_7C5F:	dc.b 1
00008298 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000829E 00                         		even
0000829E 00                         		even
0000829E                            
0000829E                            ; ---------------------------------------------------------------------------
0000829E                            ; Sprite mappings - SLZ	swinging platforms
0000829E                            ; ---------------------------------------------------------------------------
0000829E                            Map_obj15a:
0000829E                            	include "_maps\obj15slz.asm"
0000829E                            ; ---------------------------------------------------------------------------
0000829E                            ; Sprite mappings - SLZ	swinging platforms
0000829E                            ; ---------------------------------------------------------------------------
0000829E 0000                       		dc.w byte_7C6C-Map_obj15a
000082A0 0000                       		dc.w byte_7C95-Map_obj15a
000082A2 0000                       		dc.w byte_7C9B-Map_obj15a
000082A4 08                         byte_7C6C:	dc.b 8
000082A5 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000082AA F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000082AF F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000082B4 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000082B9 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000082BE 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000082C3 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000082C8 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000082CD 01                         byte_7C95:	dc.b 1
000082CE F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000082D3 01                         byte_7C9B:	dc.b 1
000082D4 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000082DA 00                         		even
000082DA 00                         		even
000082DA                            
000082DA                            ; ===========================================================================
000082DA                            ; ---------------------------------------------------------------------------
000082DA                            ; Object 17 - helix of spikes on a pole	(GHZ)
000082DA                            ; ---------------------------------------------------------------------------
000082DA                            
000082DA                            Obj17:					; XREF: Obj_Index
000082DA 7000                       		moveq	#0,d0
000082DC 1028 0024                  		move.b	$24(a0),d0
000082E0 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000082E4 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000082E8                            ; ===========================================================================
000082E8 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
000082EA 0000                       		dc.w Obj17_Action-Obj17_Index
000082EC 0000                       		dc.w Obj17_Action-Obj17_Index
000082EE 0000                       		dc.w Obj17_Delete-Obj17_Index
000082F0 0000                       		dc.w Obj17_Display-Obj17_Index
000082F2                            ; ===========================================================================
000082F2                            
000082F2                            Obj17_Main:				; XREF: Obj17_Index
000082F2 5428 0024                  		addq.b	#2,$24(a0)
000082F6 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
000082FE 317C 4398 0002             		move.w	#$4398,2(a0)
00008304 117C 0007 0022             		move.b	#7,$22(a0)
0000830A 117C 0004 0001             		move.b	#4,1(a0)
00008310 117C 0003 0018             		move.b	#3,$18(a0)
00008316 117C 0008 0019             		move.b	#8,$19(a0)
0000831C 3428 000C                  		move.w	$C(a0),d2
00008320 3628 0008                  		move.w	8(a0),d3
00008324 1810                       		move.b	0(a0),d4
00008326 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000832A 7200                       		moveq	#0,d1
0000832C 1212                       		move.b	(a2),d1		; move a2 to d1
0000832E 14FC 0000                  		move.b	#0,(a2)+
00008332 3001                       		move.w	d1,d0
00008334 E248                       		lsr.w	#1,d0
00008336 E948                       		lsl.w	#4,d0
00008338 9640                       		sub.w	d0,d3
0000833A 5501                       		subq.b	#2,d1
0000833C 6500                       		bcs.s	Obj17_Action
0000833E 7C00                       		moveq	#0,d6
00008340                            
00008340                            Obj17_MakeHelix:
00008340 6100 0000                  		bsr.w	SingleObjLoad
00008344 6600                       		bne.s	Obj17_Action
00008346 5228 0028                  		addq.b	#1,$28(a0)
0000834A 3A09                       		move.w	a1,d5
0000834C 0445 D000                  		subi.w	#$D000,d5
00008350 EC4D                       		lsr.w	#6,d5
00008352 0245 007F                  		andi.w	#$7F,d5
00008356 14C5                       		move.b	d5,(a2)+
00008358 137C 0008 0024             		move.b	#8,$24(a1)
0000835E 1284                       		move.b	d4,0(a1)
00008360 3342 000C                  		move.w	d2,$C(a1)
00008364 3343 0008                  		move.w	d3,8(a1)
00008368 2368 0004 0004             		move.l	4(a0),4(a1)
0000836E 337C 4398 0002             		move.w	#$4398,2(a1)
00008374 137C 0004 0001             		move.b	#4,1(a1)
0000837A 137C 0003 0018             		move.b	#3,$18(a1)
00008380 137C 0008 0019             		move.b	#8,$19(a1)
00008386 1346 003E                  		move.b	d6,$3E(a1)
0000838A 5206                       		addq.b	#1,d6
0000838C 0206 0007                  		andi.b	#7,d6
00008390 0643 0010                  		addi.w	#$10,d3
00008394 B668 0008                  		cmp.w	8(a0),d3
00008398 6600                       		bne.s	loc_7D78
0000839A 1146 003E                  		move.b	d6,$3E(a0)
0000839E 5206                       		addq.b	#1,d6
000083A0 0206 0007                  		andi.b	#7,d6
000083A4 0643 0010                  		addi.w	#$10,d3
000083A8 5228 0028                  		addq.b	#1,$28(a0)
000083AC                            
000083AC                            loc_7D78:
000083AC 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000083B0                            
000083B0                            Obj17_Action:				; XREF: Obj17_Index
000083B0 6100 0000                  		bsr.w	Obj17_RotateSpikes
000083B4 6100 0000                  		bsr.w	DisplaySprite
000083B8 6000 0000                  		bra.w	Obj17_ChkDel
000083BC                            
000083BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083BC                            
000083BC                            
000083BC                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000083BC 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000083C0 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000083C6 D028 003E                  		add.b	$3E(a0),d0
000083CA 0200 0007                  		andi.b	#7,d0
000083CE 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000083D2 6600                       		bne.s	locret_7DA6
000083D4 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000083DA                            
000083DA                            locret_7DA6:
000083DA 4E75                       		rts	
000083DC                            ; End of function Obj17_RotateSpikes
000083DC                            
000083DC                            ; ===========================================================================
000083DC                            
000083DC                            Obj17_ChkDel:				; XREF: Obj17_Action
000083DC 3028 0008                  		move.w	8(a0),d0
000083E0 0240 FF80                  		andi.w	#$FF80,d0
000083E4 3238 F700                  		move.w	($FFFFF700).w,d1
000083E8 0441 0080                  		subi.w	#$80,d1
000083EC 0241 FF80                  		andi.w	#$FF80,d1
000083F0 9041                       		sub.w	d1,d0
000083F2 0C40 0280                  		cmpi.w	#$280,d0
000083F6 6200 0000                  		bhi.w	Obj17_DelAll
000083FA 4E75                       		rts	
000083FC                            ; ===========================================================================
000083FC                            
000083FC                            Obj17_DelAll:				; XREF: Obj17_ChkDel
000083FC 7400                       		moveq	#0,d2
000083FE 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008402 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008404 5502                       		subq.b	#2,d2
00008406 6500                       		bcs.s	Obj17_Delete
00008408                            
00008408                            Obj17_DelLoop:
00008408 7000                       		moveq	#0,d0
0000840A 101A                       		move.b	(a2)+,d0
0000840C ED48                       		lsl.w	#6,d0
0000840E 0680 00FF D000             		addi.l	#$FFD000,d0
00008414 2240                       		movea.l	d0,a1
00008416 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000841A 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
0000841E                            
0000841E                            Obj17_Delete:				; XREF: Obj17_Index
0000841E 6100 0000                  		bsr.w	DeleteObject
00008422 4E75                       		rts	
00008424                            ; ===========================================================================
00008424                            
00008424                            Obj17_Display:				; XREF: Obj17_Index
00008424 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008428 6000 0000                  		bra.w	DisplaySprite
0000842C                            ; ===========================================================================
0000842C                            ; ---------------------------------------------------------------------------
0000842C                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000842C                            ; ---------------------------------------------------------------------------
0000842C                            Map_obj17:
0000842C                            	include "_maps\obj17.asm"
0000842C                            ; ---------------------------------------------------------------------------
0000842C                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000842C                            ; ---------------------------------------------------------------------------
0000842C 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008430 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008434 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008438 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
0000843C 01                         byte_7E08:	dc.b 1
0000843D F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008442 01                         byte_7E0E:	dc.b 1
00008443 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008448 01                         byte_7E14:	dc.b 1
00008449 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
0000844E 01                         byte_7E1A:	dc.b 1
0000844F FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008454 01                         byte_7E20:	dc.b 1
00008455 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
0000845A 01                         byte_7E26:	dc.b 1
0000845B 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008460 01                         byte_7E2C:	dc.b 1
00008461 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008466                            		even
00008466                            		even
00008466                            
00008466                            ; ===========================================================================
00008466                            ; ---------------------------------------------------------------------------
00008466                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008466                            ; ---------------------------------------------------------------------------
00008466                            
00008466                            Obj18:					; XREF: Obj_Index
00008466 7000                       		moveq	#0,d0
00008468 1028 0024                  		move.b	$24(a0),d0
0000846C 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008470 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008474                            ; ===========================================================================
00008474 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008476 0000                       		dc.w Obj18_Solid-Obj18_Index
00008478 0000                       		dc.w Obj18_Action2-Obj18_Index
0000847A 0000                       		dc.w Obj18_Delete-Obj18_Index
0000847C 0000                       		dc.w Obj18_Action-Obj18_Index
0000847E                            ; ===========================================================================
0000847E                            
0000847E                            Obj18_Main:				; XREF: Obj18_Index
0000847E 5428 0024                  		addq.b	#2,$24(a0)
00008482 317C 4000 0002             		move.w	#$4000,2(a0)
00008488 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008490 117C 0020 0019             		move.b	#$20,$19(a0)
00008496 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000849C 6600                       		bne.s	Obj18_NotSYZ
0000849E 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000084A6 117C 0020 0019             		move.b	#$20,$19(a0)
000084AC                            
000084AC                            Obj18_NotSYZ:
000084AC 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000084B2 6600                       		bne.s	Obj18_NotSLZ
000084B4 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000084BC 117C 0020 0019             		move.b	#$20,$19(a0)
000084C2 317C 4000 0002             		move.w	#$4000,2(a0)
000084C8 117C 0003 0028             		move.b	#3,$28(a0)
000084CE                            
000084CE                            Obj18_NotSLZ:
000084CE 117C 0004 0001             		move.b	#4,1(a0)
000084D4 117C 0004 0018             		move.b	#4,$18(a0)
000084DA 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000084E0 3168 000C 0034             		move.w	$C(a0),$34(a0)
000084E6 3168 0008 0032             		move.w	8(a0),$32(a0)
000084EC 317C 0080 0026             		move.w	#$80,$26(a0)
000084F2 7200                       		moveq	#0,d1
000084F4 1028 0028                  		move.b	$28(a0),d0
000084F8 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000084FC 6600                       		bne.s	Obj18_SetFrame	; if not, branch
000084FE 5201                       		addq.b	#1,d1		; use frame #1
00008500 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008506                            
00008506                            Obj18_SetFrame:
00008506 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000850A                            
0000850A                            Obj18_Solid:				; XREF: Obj18_Index
0000850A 4A28 0038                  		tst.b	$38(a0)
0000850E 6700                       		beq.s	loc_7EE0
00008510 5928 0038                  		subq.b	#4,$38(a0)
00008514                            
00008514                            loc_7EE0:
00008514 7200                       		moveq	#0,d1
00008516 1228 0019                  		move.b	$19(a0),d1
0000851A 6100 F56C                  		bsr.w	PlatformObject
0000851E                            
0000851E                            Obj18_Action:				; XREF: Obj18_Index
0000851E 6100 0000                  		bsr.w	Obj18_Move
00008522 6100 0000                  		bsr.w	Obj18_Nudge
00008526 6100 0000                  		bsr.w	DisplaySprite
0000852A 6000 0000                  		bra.w	Obj18_ChkDel
0000852E                            ; ===========================================================================
0000852E                            
0000852E                            Obj18_Action2:				; XREF: Obj18_Index
0000852E 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008534 6700                       		beq.s	loc_7F06
00008536 5828 0038                  		addq.b	#4,$38(a0)
0000853A                            
0000853A                            loc_7F06:
0000853A 7200                       		moveq	#0,d1
0000853C 1228 0019                  		move.b	$19(a0),d1
00008540 6100 F6BA                  		bsr.w	ExitPlatform
00008544 3F28 0008                  		move.w	8(a0),-(sp)
00008548 6100 0000                  		bsr.w	Obj18_Move
0000854C 6100 0000                  		bsr.w	Obj18_Nudge
00008550 341F                       		move.w	(sp)+,d2
00008552 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008556 6100 0000                  		bsr.w	DisplaySprite
0000855A 6000 0000                  		bra.w	Obj18_ChkDel
0000855E                            
0000855E 4E75                       		rts
00008560                            
00008560                            ; ---------------------------------------------------------------------------
00008560                            ; Subroutine to	move platform slightly when you	stand on it
00008560                            ; ---------------------------------------------------------------------------
00008560                            
00008560                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008560                            
00008560                            
00008560                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008560 1028 0038                  		move.b	$38(a0),d0
00008564 6100 A786                  		bsr.w	CalcSine
00008568 323C 0400                  		move.w	#$400,d1
0000856C C1C1                       		muls.w	d1,d0
0000856E 4840                       		swap	d0
00008570 D068 002C                  		add.w	$2C(a0),d0
00008574 3140 000C                  		move.w	d0,$C(a0)
00008578 4E75                       		rts	
0000857A                            ; End of function Obj18_Nudge
0000857A                            
0000857A                            ; ---------------------------------------------------------------------------
0000857A                            ; Subroutine to	move platforms
0000857A                            ; ---------------------------------------------------------------------------
0000857A                            
0000857A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000857A                            
0000857A                            
0000857A                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000857A 7000                       		moveq	#0,d0
0000857C 1028 0028                  		move.b	$28(a0),d0
00008580 0240 000F                  		andi.w	#$F,d0
00008584 D040                       		add.w	d0,d0
00008586 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000858A 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
0000858E                            ; End of function Obj18_Move
0000858E                            
0000858E                            ; ===========================================================================
0000858E 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008592 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008596 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000859A 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
0000859E 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000085A2 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000085A6 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000085A8                            ; ===========================================================================
000085A8                            
000085A8                            Obj18_Type00:
000085A8 4E75                       		rts			; platform 00 doesn't move
000085AA                            ; ===========================================================================
000085AA                            
000085AA                            Obj18_Type05:
000085AA 3028 0032                  		move.w	$32(a0),d0
000085AE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085B2 4401                       		neg.b	d1		; reverse platform-motion
000085B4 0601 0040                  		addi.b	#$40,d1
000085B8 6000                       		bra.s	Obj18_01_Move
000085BA                            ; ===========================================================================
000085BA                            
000085BA                            Obj18_Type01:
000085BA 3028 0032                  		move.w	$32(a0),d0
000085BE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085C2 0401 0040                  		subi.b	#$40,d1
000085C6                            
000085C6                            Obj18_01_Move:
000085C6 4881                       		ext.w	d1
000085C8 D041                       		add.w	d1,d0
000085CA 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000085CE 6000 0000                  		bra.w	Obj18_ChgMotion
000085D2                            ; ===========================================================================
000085D2                            
000085D2                            Obj18_Type0C:
000085D2 3028 0034                  		move.w	$34(a0),d0
000085D6 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000085DA 4401                       		neg.b	d1		; reverse platform-motion
000085DC 0601 0030                  		addi.b	#$30,d1
000085E0 6000                       		bra.s	Obj18_02_Move
000085E2                            ; ===========================================================================
000085E2                            
000085E2                            Obj18_Type0B:
000085E2 3028 0034                  		move.w	$34(a0),d0
000085E6 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000085EA 0401 0030                  		subi.b	#$30,d1
000085EE 6000                       		bra.s	Obj18_02_Move
000085F0                            ; ===========================================================================
000085F0                            
000085F0                            Obj18_Type06:
000085F0 3028 0034                  		move.w	$34(a0),d0
000085F4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085F8 4401                       		neg.b	d1		; reverse platform-motion
000085FA 0601 0040                  		addi.b	#$40,d1
000085FE 6000                       		bra.s	Obj18_02_Move
00008600                            ; ===========================================================================
00008600                            
00008600                            Obj18_Type02:
00008600 3028 0034                  		move.w	$34(a0),d0
00008604 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008608 0401 0040                  		subi.b	#$40,d1
0000860C                            
0000860C                            Obj18_02_Move:
0000860C 4881                       		ext.w	d1
0000860E D041                       		add.w	d1,d0
00008610 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008614 6000 0000                  		bra.w	Obj18_ChgMotion
00008618                            ; ===========================================================================
00008618                            
00008618                            Obj18_Type03:
00008618 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000861C 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
0000861E 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008624 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008626 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000862C                            
0000862C                            Obj18_03_NoMove:
0000862C 4E75                       		rts	
0000862E                            ; ===========================================================================
0000862E                            
0000862E                            Obj18_03_Wait:
0000862E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008632 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008634 317C 0020 003A             		move.w	#32,$3A(a0)
0000863A 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
0000863E 4E75                       		rts	
00008640                            ; ===========================================================================
00008640                            
00008640                            Obj18_Type04:
00008640 4A68 003A                  		tst.w	$3A(a0)
00008644 6700                       		beq.s	loc_8048
00008646 5368 003A                  		subq.w	#1,$3A(a0)
0000864A 6600                       		bne.s	loc_8048
0000864C 0828 0003 0022             		btst	#3,$22(a0)
00008652 6700                       		beq.s	loc_8042
00008654 08E9 0001 0022             		bset	#1,$22(a1)
0000865A 08A9 0003 0022             		bclr	#3,$22(a1)
00008660 137C 0002 0024             		move.b	#2,$24(a1)
00008666 08A8 0003 0022             		bclr	#3,$22(a0)
0000866C 4228 0025                  		clr.b	$25(a0)
00008670 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008676                            
00008676                            loc_8042:
00008676 117C 0008 0024             		move.b	#8,$24(a0)
0000867C                            
0000867C                            loc_8048:
0000867C 2628 002C                  		move.l	$2C(a0),d3
00008680 3028 0012                  		move.w	$12(a0),d0
00008684 48C0                       		ext.l	d0
00008686 E180                       		asl.l	#8,d0
00008688 D680                       		add.l	d0,d3
0000868A 2143 002C                  		move.l	d3,$2C(a0)
0000868E 0668 0038 0012             		addi.w	#$38,$12(a0)
00008694 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008698 0640 00E0                  		addi.w	#$E0,d0
0000869C B068 002C                  		cmp.w	$2C(a0),d0
000086A0 6400                       		bcc.s	locret_8074
000086A2 117C 0006 0024             		move.b	#6,$24(a0)
000086A8                            
000086A8                            locret_8074:
000086A8 4E75                       		rts	
000086AA                            ; ===========================================================================
000086AA                            
000086AA                            Obj18_Type07:
000086AA 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000086AE 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000086B0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000086B4 7000                       		moveq	#0,d0
000086B6 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000086BA E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000086BC 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000086C0 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000086C2 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000086C8                            
000086C8                            Obj18_07_NoMove:
000086C8 4E75                       		rts	
000086CA                            ; ===========================================================================
000086CA                            
000086CA                            Obj18_07_Wait:
000086CA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000086CE 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000086D0 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000086D4 4E75                       		rts	
000086D6                            ; ===========================================================================
000086D6                            
000086D6                            Obj18_Type08:
000086D6 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000086DA 3028 0034                  		move.w	$34(a0),d0
000086DE 0440 0200                  		subi.w	#$200,d0
000086E2 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000086E6 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000086E8 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000086EC                            
000086EC                            Obj18_08_NoStop:
000086EC 4E75                       		rts	
000086EE                            ; ===========================================================================
000086EE                            
000086EE                            Obj18_Type0A:
000086EE 3028 0034                  		move.w	$34(a0),d0
000086F2 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000086F6 0401 0040                  		subi.b	#$40,d1
000086FA 4881                       		ext.w	d1
000086FC E241                       		asr.w	#1,d1
000086FE D041                       		add.w	d1,d0
00008700 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008704                            
00008704                            Obj18_ChgMotion:
00008704 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000870A 4E75                       		rts	
0000870C                            ; ===========================================================================
0000870C                            
0000870C                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
0000870C 3028 0032                  		move.w	$32(a0),d0
00008710 0240 FF80                  		andi.w	#$FF80,d0
00008714 3238 F700                  		move.w	($FFFFF700).w,d1
00008718 0441 0080                  		subi.w	#$80,d1
0000871C 0241 FF80                  		andi.w	#$FF80,d1
00008720 9041                       		sub.w	d1,d0
00008722 0C40 0280                  		cmpi.w	#$280,d0
00008726 6200                       		bhi.s	Obj18_Delete
00008728 4E75                       		rts	
0000872A                            ; ===========================================================================
0000872A                            
0000872A                            Obj18_Delete:				; XREF: Obj18_Index
0000872A 6000 0000                  		bra.w	DeleteObject
0000872E                            ; ===========================================================================
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            ; Sprite mappings - unused
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            Map_obj18x:
0000872E                            	include "_maps\obj18x.asm"
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            ; Sprite mappings - unused
0000872E                            ; ---------------------------------------------------------------------------
0000872E 0000                       		dc.w byte_80FE-Map_obj18x
00008730 0000                       		dc.w byte_8109-Map_obj18x
00008732 02                         byte_80FE:	dc.b 2
00008733 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008738 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000873D 0A                         byte_8109:	dc.b $A
0000873E F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008743 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008748 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000874D 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008752 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008757 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000875C 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008761 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008766 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000876B 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008770                            		even
00008770                            		even
00008770                            
00008770                            ; ---------------------------------------------------------------------------
00008770                            ; Sprite mappings - GHZ	platforms
00008770                            ; ---------------------------------------------------------------------------
00008770                            Map_obj18:
00008770                            	include "_maps\obj18ghz.asm"
00008770                            ; ---------------------------------------------------------------------------
00008770                            ; Sprite mappings - GHZ	platforms
00008770                            ; ---------------------------------------------------------------------------
00008770 0000                       		dc.w byte_8140-Map_obj18
00008772 0000                       		dc.w byte_8155-Map_obj18
00008774 04                         byte_8140:	dc.b 4
00008775 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000877A F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000877F F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008784 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008789 0A                         byte_8155:	dc.b $A
0000878A F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000878F 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008794 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008799 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000879E 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000087A3 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000087A8 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000087AD 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000087B2 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000087B7 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000087BC                            		even
000087BC                            		even
000087BC                            
000087BC                            ; ---------------------------------------------------------------------------
000087BC                            ; Sprite mappings - SYZ	platforms
000087BC                            ; ---------------------------------------------------------------------------
000087BC                            Map_obj18a:
000087BC                            	include "_maps\obj18syz.asm"
000087BC                            ; ---------------------------------------------------------------------------
000087BC                            ; Sprite mappings - SYZ	platforms
000087BC                            ; ---------------------------------------------------------------------------
000087BC 0000                       		dc.w byte_818A-Map_obj18a
000087BE 03                         byte_818A:	dc.b 3
000087BF F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000087C4 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000087C9 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000087CE                            		even
000087CE                            		even
000087CE                            
000087CE                            ; ---------------------------------------------------------------------------
000087CE                            ; Sprite mappings - SLZ	platforms
000087CE                            ; ---------------------------------------------------------------------------
000087CE                            Map_obj18b:
000087CE                            	include "_maps\obj18slz.asm"
000087CE                            ; ---------------------------------------------------------------------------
000087CE                            ; Sprite mappings - SLZ	platforms
000087CE                            ; ---------------------------------------------------------------------------
000087CE 0000                       		dc.w byte_819C-Map_obj18b
000087D0 02                         byte_819C:	dc.b 2
000087D1 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000087D6 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000087DC 00                         		even
000087DC 00                         		even
000087DC                            
000087DC                            ; ===========================================================================
000087DC                            ; ---------------------------------------------------------------------------
000087DC                            ; Object 19 - Pearto bombs
000087DC                            ; ---------------------------------------------------------------------------
000087DC                            Obj19:					; XREF: Obj_Index
000087DC 7000                       		moveq	#0,d0
000087DE 1028 0024                  		move.b	$24(a0),d0
000087E2 323B 0000                  		move.w	off_7070(pc,d0.w),d1
000087E6 4EFB 1000                  		jmp	off_7070(pc,d1.w)
000087EA                            ; ---------------------------------------------------------------------------
000087EA                            
000087EA 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
000087F0                            ; ---------------------------------------------------------------------------
000087F0                            
000087F0                            loc_7076:
000087F0 5428 0024                  		addq.b	#2,$24(a0)
000087F4 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
000087FC 317C 0480 0002             		move.w	#($9000/$20),2(a0)
00008802 117C 0004 0001             		move.b	#4,1(a0)
00008808 117C 0003 0019             		move.b	#3,$19(a0)
0000880E 117C 0087 0020             		move.b	#$87,$20(a0)
00008814 117C 0008 0018             		move.b	#8,$18(a0)
0000881A 317C 0018 0030             		move.w	#$18,$30(a0)
00008820                            
00008820                            loc_70A6:
00008820 0828 0007 0022             		btst	#7,$22(a0)
00008826 6600                       		bne.s	loc_70C2
00008828 4A68 0030                  		tst.w	$30(a0)
0000882C 6600                       		bne.s	loc_70D2
0000882E 4EB9 0000 0000             		jsr	ObjHitFloor
00008834 4A41                       		tst.w	d1
00008836 6A00                       		bpl.s	loc_70D6
00008838 D368 000C                  		add.w	d1,$C(a0)
0000883C                            
0000883C                            loc_70C2:
0000883C 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
00008840 117C 0000 0024             		move.b	#0,$24(a0)
00008846                            ; ---------------------------------------------------------------------------
00008846                            
00008846                            loc_70D2:
00008846 5368 0030                  		subq.w	#1,$30(a0)
0000884A                            
0000884A                            loc_70D6:
0000884A 6100 0000                  		bsr.w	ObjectFall
0000884E 6100 0000                  		bsr.w	DisplaySprite
00008852 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008856 0640 00E0                  		addi.w	#$E0,d0
0000885A B068 000C                  		cmp.w	$C(a0),d0
0000885E 6500                       		bcs.s	loc_70EE
00008860 4E75                       		rts
00008862                            ; ---------------------------------------------------------------------------
00008862                            
00008862                            loc_70EE:
00008862 6100 0000                  		bsr.w	DeleteObject
00008866 4E75                       		rts
00008868                            		
00008868                            Map_obj19:
00008868                            	include "_maps\obj19.asm"
00008868                            Map_02b4:
00008868 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
0000886A 01                         Map_02b4_2: 	dc.b $1
0000886B F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
00008870                            	even
00008870                            	even
00008870                            ; ===========================================================================
00008870                            ; ---------------------------------------------------------------------------
00008870                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008870                            ; ---------------------------------------------------------------------------
00008870                            Map_obj48:
00008870                            	include "_maps\obj48.asm"
00008870                            ; ---------------------------------------------------------------------------
00008870                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008870                            ; ---------------------------------------------------------------------------
00008870 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008874 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008878 06                         byte_81B2:	dc.b 6
00008879 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
0000887E F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008883 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008888 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0000888D 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008892 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008897 04                         byte_81D1:	dc.b 4
00008898 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000889D E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000088A2 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000088A7 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000088AC 04                         byte_81E6:	dc.b 4
000088AD E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000088B2 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000088B7 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000088BC 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000088C1 04                         byte_81FB:	dc.b 4
000088C2 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000088C7 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000088CC 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000088D1 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000088D6                            		even
000088D6                            		even
000088D6                            
000088D6                            ; ===========================================================================
000088D6                            ; ---------------------------------------------------------------------------
000088D6                            ; Object 1A - GHZ collapsing ledge
000088D6                            ; ---------------------------------------------------------------------------
000088D6                            
000088D6                            Obj1A:					; XREF: Obj_Index
000088D6 7000                       		moveq	#0,d0
000088D8 1028 0024                  		move.b	$24(a0),d0
000088DC 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000088E0 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000088E4                            ; ===========================================================================
000088E4 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000088E8 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000088EC 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000088F0                            ; ===========================================================================
000088F0                            
000088F0                            Obj1A_Main:				; XREF: Obj1A_Index
000088F0 5428 0024                  		addq.b	#2,$24(a0)
000088F4 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
000088FC 317C 4000 0002             		move.w	#$4000,2(a0)
00008902 0028 0004 0001             		ori.b	#4,1(a0)
00008908 117C 0004 0018             		move.b	#4,$18(a0)
0000890E 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008914 117C 0064 0019             		move.b	#$64,$19(a0)
0000891A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008920 117C 0038 0016             		move.b	#$38,$16(a0)
00008926 08E8 0004 0001             		bset	#4,1(a0)
0000892C                            
0000892C                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000892C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008930 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008932 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008936 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000893A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000893E                            
0000893E                            Obj1A_Slope:
0000893E 323C 0030                  		move.w	#$30,d1
00008942 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008948 6100 F212                  		bsr.w	SlopeObject
0000894C 6000 0000                  		bra.w	MarkObjGone
00008950                            ; ===========================================================================
00008950                            
00008950                            Obj1A_Touch:				; XREF: Obj1A_Index
00008950 4A28 0038                  		tst.b	$38(a0)
00008954 6700 0000                  		beq.w	loc_847A
00008958 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000895E 5328 0038                  		subq.b	#1,$38(a0)
00008962                            
00008962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008962                            
00008962                            
00008962                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008962 323C 0030                  		move.w	#$30,d1
00008966 6100 F294                  		bsr.w	ExitPlatform
0000896A 323C 0030                  		move.w	#$30,d1
0000896E 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008974 3428 0008                  		move.w	8(a0),d2
00008978 6100 0000                  		bsr.w	SlopeObject2
0000897C 6000 0000                  		bra.w	MarkObjGone
00008980                            ; End of function Obj1A_WalkOff
00008980                            
00008980                            ; ===========================================================================
00008980                            
00008980                            Obj1A_Display:				; XREF: Obj1A_Index
00008980 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008984 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008986 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000898A 6600 0000                  		bne.w	loc_82D0	; if yes, branch
0000898E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008992 6000 0000                  		bra.w	DisplaySprite
00008996                            ; ===========================================================================
00008996                            
00008996                            loc_82D0:				; XREF: Obj1A_Display
00008996 5328 0038                  		subq.b	#1,$38(a0)
0000899A 6100 FFC6                  		bsr.w	Obj1A_WalkOff
0000899E 43F8 D000                  		lea	($FFFFD000).w,a1
000089A2 0829 0003 0022             		btst	#3,$22(a1)
000089A8 6700                       		beq.s	loc_82FC
000089AA 4A28 0038                  		tst.b	$38(a0)
000089AE 6600                       		bne.s	locret_8308
000089B0 08A9 0003 0022             		bclr	#3,$22(a1)
000089B6 08A9 0005 0022             		bclr	#5,$22(a1)
000089BC 137C 0001 001D             		move.b	#1,$1D(a1)
000089C2                            
000089C2                            loc_82FC:
000089C2 117C 0000 003A             		move.b	#0,$3A(a0)
000089C8 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000089CE                            
000089CE                            locret_8308:
000089CE 4E75                       		rts	
000089D0                            ; ===========================================================================
000089D0                            
000089D0                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000089D0 6100 0000                  		bsr.w	ObjectFall
000089D4 6100 0000                  		bsr.w	DisplaySprite
000089D8 4A28 0001                  		tst.b	1(a0)
000089DC 6A00                       		bpl.s	Obj1A_Delete
000089DE 4E75                       		rts	
000089E0                            ; ===========================================================================
000089E0                            
000089E0                            Obj1A_Delete:				; XREF: Obj1A_Index
000089E0 6100 0000                  		bsr.w	DeleteObject
000089E4 4E75                       		rts	
000089E6                            ; ===========================================================================
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            
000089E6                            Obj53:					; XREF: Obj_Index
000089E6 7000                       		moveq	#0,d0
000089E8 1028 0024                  		move.b	$24(a0),d0
000089EC 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000089F0 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000089F4                            ; ===========================================================================
000089F4 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000089F8 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
000089FC 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008A00                            ; ===========================================================================
00008A00                            
00008A00                            Obj53_Main:				; XREF: Obj53_Index
00008A00 5428 0024                  		addq.b	#2,$24(a0)
00008A04 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008A0C 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008A12 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008A18 6600                       		bne.s	Obj53_NotSLZ
00008A1A 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008A20 5428 001A                  		addq.b	#2,$1A(a0)
00008A24                            
00008A24                            Obj53_NotSLZ:
00008A24 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008A2A 6600                       		bne.s	Obj53_NotSBZ
00008A2C 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008A32                            
00008A32                            Obj53_NotSBZ:
00008A32 0028 0004 0001             		ori.b	#4,1(a0)
00008A38 117C 0004 0018             		move.b	#4,$18(a0)
00008A3E 117C 0007 0038             		move.b	#7,$38(a0)
00008A44 117C 0044 0019             		move.b	#$44,$19(a0)
00008A4A                            
00008A4A                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008A4A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008A4E 6700                       		beq.s	Obj53_Solid	; if not, branch
00008A50 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008A54 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008A58 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008A5C                            
00008A5C                            Obj53_Solid:
00008A5C 323C 0020                  		move.w	#$20,d1
00008A60 6100 F026                  		bsr.w	PlatformObject
00008A64 4A28 0028                  		tst.b	$28(a0)
00008A68 6A00                       		bpl.s	Obj53_MarkAsGone
00008A6A 0829 0003 0022             		btst	#3,$22(a1)
00008A70 6700                       		beq.s	Obj53_MarkAsGone
00008A72 08A8 0000 0001             		bclr	#0,1(a0)
00008A78 3029 0008                  		move.w	8(a1),d0
00008A7C 9068 0008                  		sub.w	8(a0),d0
00008A80 6400                       		bcc.s	Obj53_MarkAsGone
00008A82 08E8 0000 0001             		bset	#0,1(a0)
00008A88                            
00008A88                            Obj53_MarkAsGone:
00008A88 6000 0000                  		bra.w	MarkObjGone
00008A8C                            ; ===========================================================================
00008A8C                            
00008A8C                            Obj53_Touch:				; XREF: Obj53_Index
00008A8C 4A28 0038                  		tst.b	$38(a0)
00008A90 6700 0000                  		beq.w	loc_8458
00008A94 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008A9A 5328 0038                  		subq.b	#1,$38(a0)
00008A9E                            
00008A9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A9E                            
00008A9E                            
00008A9E                            Obj53_WalkOff:				; XREF: Obj53_Index
00008A9E 323C 0020                  		move.w	#$20,d1
00008AA2 6100 F158                  		bsr.w	ExitPlatform
00008AA6 3428 0008                  		move.w	8(a0),d2
00008AAA 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008AAE 6000 0000                  		bra.w	MarkObjGone
00008AB2                            ; End of function Obj53_WalkOff
00008AB2                            
00008AB2                            ; ===========================================================================
00008AB2                            
00008AB2                            Obj53_Display:				; XREF: Obj53_Index
00008AB2 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008AB6 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008AB8 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008ABC 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008AC0 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008AC4 6000 0000                  		bra.w	DisplaySprite
00008AC8                            ; ===========================================================================
00008AC8                            
00008AC8                            loc_8402:
00008AC8 5328 0038                  		subq.b	#1,$38(a0)
00008ACC 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008AD0 43F8 D000                  		lea	($FFFFD000).w,a1
00008AD4 0829 0003 0022             		btst	#3,$22(a1)
00008ADA 6700                       		beq.s	loc_842E
00008ADC 4A28 0038                  		tst.b	$38(a0)
00008AE0 6600                       		bne.s	locret_843A
00008AE2 08A9 0003 0022             		bclr	#3,$22(a1)
00008AE8 08A9 0005 0022             		bclr	#5,$22(a1)
00008AEE 137C 0001 001D             		move.b	#1,$1D(a1)
00008AF4                            
00008AF4                            loc_842E:
00008AF4 117C 0000 003A             		move.b	#0,$3A(a0)
00008AFA 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008B00                            
00008B00                            locret_843A:
00008B00 4E75                       		rts	
00008B02                            ; ===========================================================================
00008B02                            
00008B02                            Obj53_TimeZero:				; XREF: Obj53_Display
00008B02 6100 0000                  		bsr.w	ObjectFall
00008B06 6100 0000                  		bsr.w	DisplaySprite
00008B0A 4A28 0001                  		tst.b	1(a0)
00008B0E 6A00                       		bpl.s	Obj53_Delete
00008B10 4E75                       		rts	
00008B12                            ; ===========================================================================
00008B12                            
00008B12                            Obj53_Delete:				; XREF: Obj53_Index
00008B12 6100 0000                  		bsr.w	DeleteObject
00008B16 4E75                       		rts	
00008B18                            ; ===========================================================================
00008B18                            
00008B18                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008B18 117C 0000 003A             		move.b	#0,$3A(a0)
00008B1E                            
00008B1E                            loc_8458:				; XREF: Obj53_Touch
00008B1E 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008B24 0828 0000 0028             		btst	#0,$28(a0)
00008B2A 6700                       		beq.s	loc_846C
00008B2C 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008B32                            
00008B32                            loc_846C:
00008B32 7207                       		moveq	#7,d1
00008B34 5228 001A                  		addq.b	#1,$1A(a0)
00008B38 6000                       		bra.s	loc_8486
00008B3A                            ; ===========================================================================
00008B3A                            
00008B3A                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008B3A 117C 0000 003A             		move.b	#0,$3A(a0)
00008B40                            
00008B40                            loc_847A:				; XREF: Obj1A_Touch
00008B40 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008B46 7218                       		moveq	#$18,d1
00008B48 5428 001A                  		addq.b	#2,$1A(a0)
00008B4C                            
00008B4C                            loc_8486:				; XREF: Obj53_Collapse
00008B4C 7000                       		moveq	#0,d0
00008B4E 1028 001A                  		move.b	$1A(a0),d0
00008B52 D040                       		add.w	d0,d0
00008B54 2668 0004                  		movea.l	4(a0),a3
00008B58 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008B5C 524B                       		addq.w	#1,a3
00008B5E 08E8 0005 0001             		bset	#5,1(a0)
00008B64 1810                       		move.b	0(a0),d4
00008B66 1A28 0001                  		move.b	1(a0),d5
00008B6A 2248                       		movea.l	a0,a1
00008B6C 6000                       		bra.s	loc_84B2
00008B6E                            ; ===========================================================================
00008B6E                            
00008B6E                            loc_84AA:
00008B6E 6100 0000                  		bsr.w	SingleObjLoad
00008B72 6600                       		bne.s	loc_84F2
00008B74 5A4B                       		addq.w	#5,a3
00008B76                            
00008B76                            loc_84B2:
00008B76 137C 0006 0024             		move.b	#6,$24(a1)
00008B7C 1284                       		move.b	d4,0(a1)
00008B7E 234B 0004                  		move.l	a3,4(a1)
00008B82 1345 0001                  		move.b	d5,1(a1)
00008B86 3368 0008 0008             		move.w	8(a0),8(a1)
00008B8C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008B92 3368 0002 0002             		move.w	2(a0),2(a1)
00008B98 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008B9E 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008BA4 135C 0038                  		move.b	(a4)+,$38(a1)
00008BA8 B3C8                       		cmpa.l	a0,a1
00008BAA 6400                       		bcc.s	loc_84EE
00008BAC 6100 0000                  		bsr.w	DisplaySprite2
00008BB0                            
00008BB0                            loc_84EE:
00008BB0 51C9 FFBC                  		dbf	d1,loc_84AA
00008BB4                            
00008BB4                            loc_84F2:
00008BB4 6100 0000                  		bsr.w	DisplaySprite
00008BB8 303C 00B9                  		move.w	#$B9,d0
00008BBC 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008BC2                            ; ===========================================================================
00008BC2                            ; ---------------------------------------------------------------------------
00008BC2                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008BC2                            ; ---------------------------------------------------------------------------
00008BC2 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008BD2 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008BDC 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008BE4 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008BEC                            
00008BEC                            ; ---------------------------------------------------------------------------
00008BEC                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008BEC                            ; ---------------------------------------------------------------------------
00008BEC                            
00008BEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BEC                            
00008BEC                            
00008BEC                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008BEC 43F8 D000                  		lea	($FFFFD000).w,a1
00008BF0 0829 0003 0022             		btst	#3,$22(a1)
00008BF6 6700                       		beq.s	locret_856E
00008BF8 3029 0008                  		move.w	8(a1),d0
00008BFC 9068 0008                  		sub.w	8(a0),d0
00008C00 D041                       		add.w	d1,d0
00008C02 E248                       		lsr.w	#1,d0
00008C04 0828 0000 0001             		btst	#0,1(a0)
00008C0A 6700                       		beq.s	loc_854E
00008C0C 4640                       		not.w	d0
00008C0E D041                       		add.w	d1,d0
00008C10                            
00008C10                            loc_854E:
00008C10 7200                       		moveq	#0,d1
00008C12 1232 0000                  		move.b	(a2,d0.w),d1
00008C16 3028 000C                  		move.w	$C(a0),d0
00008C1A 9041                       		sub.w	d1,d0
00008C1C 7200                       		moveq	#0,d1
00008C1E 1229 0016                  		move.b	$16(a1),d1
00008C22 9041                       		sub.w	d1,d0
00008C24 3340 000C                  		move.w	d0,$C(a1)
00008C28 9468 0008                  		sub.w	8(a0),d2
00008C2C 9569 0008                  		sub.w	d2,8(a1)
00008C30                            
00008C30                            locret_856E:
00008C30 4E75                       		rts	
00008C32                            ; End of function SlopeObject2
00008C32                            
00008C32                            ; ===========================================================================
00008C32                            ; ---------------------------------------------------------------------------
00008C32                            ; Collision data for GHZ collapsing ledge
00008C32                            ; ---------------------------------------------------------------------------
00008C32                            Obj1A_SlopeData:
00008C32                            		incbin	misc\ghzledge.bin
00008C62                            		even
00008C62                            
00008C62                            ; ---------------------------------------------------------------------------
00008C62                            ; Sprite mappings - GHZ	collapsing ledge
00008C62                            ; ---------------------------------------------------------------------------
00008C62                            Map_obj1A:
00008C62                            	include "_maps\obj1A.asm"
00008C62                            ; ---------------------------------------------------------------------------
00008C62                            ; Sprite mappings - GHZ	collapsing ledge
00008C62                            ; ---------------------------------------------------------------------------
00008C62 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008C66 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008C6A 10                         byte_85A8:	dc.b $10
00008C6B C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008C70 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008C75 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008C7A E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008C7F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C84 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008C89 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008C8E F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008C93 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008C98 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008C9D 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008CA2 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008CA7 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008CAC 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008CB1 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008CB6 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008CBB 10                         byte_85F9:	dc.b $10
00008CBC C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008CC1 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008CC6 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008CCB E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008CD0 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008CD5 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008CDA F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008CDF F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008CE4 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008CE9 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008CEE 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008CF3 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008CF8 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008CFD 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008D02 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008D07 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D0C 19                         byte_864A:	dc.b $19
00008D0D C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008D12 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008D17 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008D1C D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008D21 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008D26 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008D2B E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008D30 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008D35 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008D3A D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008D3F F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008D44 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008D49 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008D4E F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008D53 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D58 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008D5D 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008D62 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008D67 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D6C 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008D71 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008D76 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008D7B 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008D80 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008D85 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D8A 19                         byte_86C8:	dc.b $19
00008D8B C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008D90 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008D95 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008D9A D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008D9F E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008DA4 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008DA9 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008DAE E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008DB3 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008DB8 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008DBD F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008DC2 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008DC7 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008DCC F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008DD1 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008DD6 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008DDB 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008DE0 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008DE5 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008DEA 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008DEF 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008DF4 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008DF9 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008DFE 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008E03 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E08                            		even
00008E08                            		even
00008E08                            
00008E08                            ; ---------------------------------------------------------------------------
00008E08                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008E08                            ; ---------------------------------------------------------------------------
00008E08                            Map_obj53:
00008E08                            	include "_maps\obj53.asm"
00008E08                            ; ---------------------------------------------------------------------------
00008E08                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008E08                            ; ---------------------------------------------------------------------------
00008E08 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008E0C 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008E10 04                         byte_874E:	dc.b 4
00008E11 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008E16 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008E1B F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008E20 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008E25 08                         byte_8763:	dc.b 8
00008E26 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008E2B F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008E30 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008E35 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008E3A 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008E3F 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008E44 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008E49 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008E4E 04                         byte_878C:	dc.b 4
00008E4F F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008E54 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008E59 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008E5E 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008E63 08                         byte_87A1:	dc.b 8
00008E64 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008E69 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008E6E F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008E73 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008E78 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008E7D 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008E82 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008E87 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008E8C                            		even
00008E8C                            		even
00008E8C                            
00008E8C                            ; ===========================================================================
00008E8C                            ; ---------------------------------------------------------------------------
00008E8C                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008E8C                            ; ---------------------------------------------------------------------------
00008E8C                            
00008E8C                            Obj1C:					; XREF: Obj_Index
00008E8C 7000                       		moveq	#0,d0
00008E8E 1028 0024                  		move.b	$24(a0),d0
00008E92 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008E96 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008E9A                            ; ===========================================================================
00008E9A 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008E9C 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008E9E                            ; ===========================================================================
00008E9E                            
00008E9E                            Obj1C_Main:				; XREF: Obj1C_Index
00008E9E 5428 0024                  		addq.b	#2,$24(a0)
00008EA2 7000                       		moveq	#0,d0
00008EA4 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008EA8 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008EAC 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008EB0 2159 0004                  		move.l	(a1)+,4(a0)
00008EB4 3159 0002                  		move.w	(a1)+,2(a0)
00008EB8 0028 0004 0001             		ori.b	#4,1(a0)
00008EBE 1159 001A                  		move.b	(a1)+,$1A(a0)
00008EC2 1159 0019                  		move.b	(a1)+,$19(a0)
00008EC6 1159 0018                  		move.b	(a1)+,$18(a0)
00008ECA 1159 0020                  		move.b	(a1)+,$20(a0)
00008ECE                            
00008ECE                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008ECE 3028 0008                  		move.w	8(a0),d0
00008ED2 0240 FF80                  		andi.w	#$FF80,d0
00008ED6 3238 F700                  		move.w	($FFFFF700).w,d1
00008EDA 0441 0080                  		subi.w	#$80,d1
00008EDE 0241 FF80                  		andi.w	#$FF80,d1
00008EE2 9041                       		sub.w	d1,d0
00008EE4 0C40 0280                  		cmpi.w	#$280,d0
00008EE8 6200 0000                  		bhi.w	DeleteObject
00008EEC 6000 0000                  		bra.w	DisplaySprite
00008EF0                            ; ===========================================================================
00008EF0                            ; ---------------------------------------------------------------------------
00008EF0                            ; Variables for	object $1C are stored in an array
00008EF0                            ; ---------------------------------------------------------------------------
00008EF0 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008EF4 44D8                       		dc.w $44D8		; VRAM setting
00008EF6 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008EFA 0000 0000                  		dc.l Map_obj1C
00008EFE 44D8                       		dc.w $44D8
00008F00 0008 0200                  		dc.b 0,	8, 2, 0
00008F04 0000 0000                  		dc.l Map_obj1C
00008F08 44D8                       		dc.w $44D8
00008F0A 0008 0200                  		dc.b 0,	8, 2, 0
00008F0E 0000 7F70                  		dc.l Map_obj11
00008F12 438E                       		dc.w $438E
00008F14 0110 0100                  		dc.b 1,	$10, 1,	0
00008F18                            ; ---------------------------------------------------------------------------
00008F18                            ; Sprite mappings - SLZ	lava thrower
00008F18                            ; ---------------------------------------------------------------------------
00008F18                            Map_obj1C:
00008F18                            	include "_maps\obj1C.asm"
00008F18                            ; ---------------------------------------------------------------------------
00008F18                            ; Sprite mappings - SLZ	lava thrower
00008F18                            ; ---------------------------------------------------------------------------
00008F18 0000                       		dc.w byte_8858-Map_obj1C
00008F1A 01                         byte_8858:	dc.b 1
00008F1B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008F20                            		even
00008F20                            		even
00008F20                            
00008F20                            ; ===========================================================================
00008F20                            ; ---------------------------------------------------------------------------
00008F20                            ; Object 1D - switch that activates when Sonic touches it
00008F20                            ; (this	is not used anywhere in	the game)
00008F20                            ; ---------------------------------------------------------------------------
00008F20                            
00008F20                            Obj1D:					; XREF: Obj_Index
00008F20 7000                       		moveq	#0,d0
00008F22 1028 0024                  		move.b	$24(a0),d0
00008F26 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008F2A 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008F2E                            ; ===========================================================================
00008F2E 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008F30 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008F32 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008F34                            ; ===========================================================================
00008F34                            
00008F34                            Obj1D_Main:				; XREF: Obj1D_Index
00008F34 5428 0024                  		addq.b	#2,$24(a0)
00008F38 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008F40 317C 4000 0002             		move.w	#$4000,2(a0)
00008F46 117C 0004 0001             		move.b	#4,1(a0)
00008F4C 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008F52 117C 0010 0019             		move.b	#$10,$19(a0)
00008F58 117C 0005 0018             		move.b	#5,$18(a0)
00008F5E                            
00008F5E                            Obj1D_Action:				; XREF: Obj1D_Index
00008F5E 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008F64 323C 0010                  		move.w	#$10,d1
00008F68 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008F6C 6700                       		beq.s	Obj1D_ChkDel
00008F6E 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008F72 7001                       		moveq	#1,d0
00008F74 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008F78                            
00008F78                            Obj1D_ChkDel:
00008F78 6100 0000                  		bsr.w	DisplaySprite
00008F7C 3028 0008                  		move.w	8(a0),d0
00008F80 0240 FF80                  		andi.w	#$FF80,d0
00008F84 3238 F700                  		move.w	($FFFFF700).w,d1
00008F88 0441 0080                  		subi.w	#$80,d1
00008F8C 0241 FF80                  		andi.w	#$FF80,d1
00008F90 9041                       		sub.w	d1,d0
00008F92 0C40 0280                  		cmpi.w	#$280,d0
00008F96 6200 0000                  		bhi.w	Obj1D_Delete
00008F9A 4E75                       		rts	
00008F9C                            ; ===========================================================================
00008F9C                            
00008F9C                            Obj1D_Delete:				; XREF: Obj1D_Index
00008F9C 6100 0000                  		bsr.w	DeleteObject
00008FA0 4E75                       		rts	
00008FA2                            ; ---------------------------------------------------------------------------
00008FA2                            ; Subroutine to	check if Sonic touches the object
00008FA2                            ; ---------------------------------------------------------------------------
00008FA2                            
00008FA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FA2                            
00008FA2                            
00008FA2                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008FA2 43F8 D000                  		lea	($FFFFD000).w,a1
00008FA6 3029 0008                  		move.w	8(a1),d0
00008FAA 9068 0008                  		sub.w	8(a0),d0
00008FAE D041                       		add.w	d1,d0
00008FB0 6B00                       		bmi.s	loc_8918
00008FB2 D241                       		add.w	d1,d1
00008FB4 B041                       		cmp.w	d1,d0
00008FB6 6400                       		bcc.s	loc_8918
00008FB8 3429 000C                  		move.w	$C(a1),d2
00008FBC 1229 0016                  		move.b	$16(a1),d1
00008FC0 4881                       		ext.w	d1
00008FC2 D242                       		add.w	d2,d1
00008FC4 3028 000C                  		move.w	$C(a0),d0
00008FC8 0440 0010                  		subi.w	#$10,d0
00008FCC 9041                       		sub.w	d1,d0
00008FCE 6200                       		bhi.s	loc_8918
00008FD0 0C40 FFF0                  		cmpi.w	#-$10,d0
00008FD4 6500                       		bcs.s	loc_8918
00008FD6 70FF                       		moveq	#-1,d0
00008FD8 4E75                       		rts	
00008FDA                            ; ===========================================================================
00008FDA                            
00008FDA                            loc_8918:
00008FDA 7000                       		moveq	#0,d0
00008FDC 4E75                       		rts	
00008FDE                            ; End of function Obj1D_ChkTouch
00008FDE                            
00008FDE                            ; ===========================================================================
00008FDE                            ; ---------------------------------------------------------------------------
00008FDE                            ; Sprite mappings - object 1D
00008FDE                            ; ---------------------------------------------------------------------------
00008FDE                            Map_obj1D:
00008FDE                            	include "_maps\obj1D.asm"
00008FDE                            ; ---------------------------------------------------------------------------
00008FDE                            ; Sprite mappings - object 1D
00008FDE                            ; ---------------------------------------------------------------------------
00008FDE 0000                       		dc.w byte_891E-Map_obj1D
00008FE0 04                         byte_891E:	dc.b 4
00008FE1 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008FE6 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008FEB E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008FF0 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008FF6 00                         		even
00008FF6 00                         		even
00008FF6                            
00008FF6                            ; ===========================================================================
00008FF6                            ; ---------------------------------------------------------------------------
00008FF6                            ; Object 2A - doors (SBZ)
00008FF6                            ; ---------------------------------------------------------------------------
00008FF6                            
00008FF6                            Obj2A:					; XREF: Obj_Index
00008FF6 7000                       		moveq	#0,d0
00008FF8 1028 0024                  		move.b	$24(a0),d0
00008FFC 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00009000 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00009004                            ; ===========================================================================
00009004 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009006 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00009008                            ; ===========================================================================
00009008                            
00009008                            Obj2A_Main:				; XREF: Obj2A_Index
00009008 5428 0024                  		addq.b	#2,$24(a0)
0000900C 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00009014 317C 42E8 0002             		move.w	#$42E8,2(a0)
0000901A 0028 0004 0001             		ori.b	#4,1(a0)
00009020 117C 0008 0019             		move.b	#8,$19(a0)
00009026 117C 0004 0018             		move.b	#4,$18(a0)
0000902C                            
0000902C                            Obj2A_OpenShut:				; XREF: Obj2A_Index
0000902C 323C 0040                  		move.w	#$40,d1
00009030 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009034 3038 D008                  		move.w	($FFFFD008).w,d0
00009038 D041                       		add.w	d1,d0
0000903A B068 0008                  		cmp.w	8(a0),d0
0000903E 6500                       		bcs.s	Obj2A_Animate
00009040 9041                       		sub.w	d1,d0
00009042 9041                       		sub.w	d1,d0
00009044 B068 0008                  		cmp.w	8(a0),d0
00009048 6400                       		bcc.s	Obj2A_Animate
0000904A D041                       		add.w	d1,d0
0000904C B068 0008                  		cmp.w	8(a0),d0
00009050 6400                       		bcc.s	loc_899A
00009052 0828 0000 0022             		btst	#0,$22(a0)
00009058 6600                       		bne.s	Obj2A_Animate
0000905A 6000                       		bra.s	Obj2A_Open
0000905C                            ; ===========================================================================
0000905C                            
0000905C                            loc_899A:				; XREF: Obj2A_OpenShut
0000905C 0828 0000 0022             		btst	#0,$22(a0)
00009062 6700                       		beq.s	Obj2A_Animate
00009064                            
00009064                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009064 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000906A                            
0000906A                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000906A 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009070 6100 0000                  		bsr.w	AnimateSprite
00009074 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009078 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000907A 323C 0011                  		move.w	#$11,d1
0000907E 343C 0020                  		move.w	#$20,d2
00009082 3602                       		move.w	d2,d3
00009084 5243                       		addq.w	#1,d3
00009086 3828 0008                  		move.w	8(a0),d4
0000908A 6100 0000                  		bsr.w	SolidObject
0000908E                            
0000908E                            Obj2A_MarkAsUsed:
0000908E 6000 0000                  		bra.w	MarkObjGone
00009092                            ; ===========================================================================
00009092                            Ani_obj2A:
00009092                            	include "_anim\obj2A.asm"
00009092                            ; ---------------------------------------------------------------------------
00009092                            ; Animation script - doors (SBZ)
00009092                            ; ---------------------------------------------------------------------------
00009092 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009094 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009096 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
000090A2 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
000090AE                            		even
000090AE                            		even
000090AE                            
000090AE                            ; ---------------------------------------------------------------------------
000090AE                            ; Sprite mappings - doors (SBZ)
000090AE                            ; ---------------------------------------------------------------------------
000090AE                            Map_obj2A:
000090AE                            	include "_maps\obj2A.asm"
000090AE                            ; ---------------------------------------------------------------------------
000090AE                            ; Sprite mappings - doors (SBZ)
000090AE                            ; ---------------------------------------------------------------------------
000090AE 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
000090B2 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
000090B6 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
000090BA 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
000090BE 0000                       		dc.w byte_8A56-Map_obj2A
000090C0 02                         byte_89FE:	dc.b 2
000090C1 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
000090C6 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
000090CB 02                         byte_8A09:	dc.b 2
000090CC DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
000090D1 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000090D6 02                         byte_8A14:	dc.b 2
000090D7 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000090DC 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000090E1 02                         byte_8A1F:	dc.b 2
000090E2 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000090E7 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000090EC 02                         byte_8A2A:	dc.b 2
000090ED D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000090F2 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000090F7 02                         byte_8A35:	dc.b 2
000090F8 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000090FD 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009102 02                         byte_8A40:	dc.b 2
00009103 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009108 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
0000910D 02                         byte_8A4B:	dc.b 2
0000910E C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009113 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009118 02                         byte_8A56:	dc.b 2
00009119 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
0000911E 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009124 00                         		even
00009124 00                         		even
00009124                            
00009124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009124                            
00009124                            
00009124                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009124 6100 0000                  		bsr.w	Obj44_SolidWall2
00009128 6700                       		beq.s	loc_8AA8
0000912A 6B00 0000                  		bmi.w	loc_8AC4
0000912E 4A40                       		tst.w	d0
00009130 6700 0000                  		beq.w	loc_8A92
00009134 6B00                       		bmi.s	loc_8A7C
00009136 4A69 0010                  		tst.w	$10(a1)
0000913A 6B00                       		bmi.s	loc_8A92
0000913C 6000                       		bra.s	loc_8A82
0000913E                            ; ===========================================================================
0000913E                            
0000913E                            loc_8A7C:
0000913E 4A69 0010                  		tst.w	$10(a1)
00009142 6A00                       		bpl.s	loc_8A92
00009144                            
00009144                            loc_8A82:
00009144 9169 0008                  		sub.w	d0,8(a1)
00009148 337C 0000 0014             		move.w	#0,$14(a1)
0000914E 337C 0000 0010             		move.w	#0,$10(a1)
00009154                            
00009154                            loc_8A92:
00009154 0829 0001 0022             		btst	#1,$22(a1)
0000915A 6600                       		bne.s	loc_8AB6
0000915C 08E9 0005 0022             		bset	#5,$22(a1)
00009162 08E8 0005 0022             		bset	#5,$22(a0)
00009168 4E75                       		rts	
0000916A                            ; ===========================================================================
0000916A                            
0000916A                            loc_8AA8:
0000916A 0828 0005 0022             		btst	#5,$22(a0)
00009170 6700                       		beq.s	locret_8AC2
00009172 337C 0001 001C             		move.w	#1,$1C(a1)
00009178                            
00009178                            loc_8AB6:
00009178 08A8 0005 0022             		bclr	#5,$22(a0)
0000917E 08A9 0005 0022             		bclr	#5,$22(a1)
00009184                            
00009184                            locret_8AC2:
00009184 4E75                       		rts	
00009186                            ; ===========================================================================
00009186                            
00009186                            loc_8AC4:
00009186 4A69 0012                  		tst.w	$12(a1)
0000918A 6A00                       		bpl.s	locret_8AD8
0000918C 4A43                       		tst.w	d3
0000918E 6A00                       		bpl.s	locret_8AD8
00009190 9769 000C                  		sub.w	d3,$C(a1)
00009194 337C 0000 0012             		move.w	#0,$12(a1)
0000919A                            
0000919A                            locret_8AD8:
0000919A 4E75                       		rts	
0000919C                            ; End of function Obj44_SolidWall
0000919C                            
0000919C                            
0000919C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000919C                            
0000919C                            
0000919C                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000919C 43F8 D000                  		lea	($FFFFD000).w,a1
000091A0 3029 0008                  		move.w	8(a1),d0
000091A4 9068 0008                  		sub.w	8(a0),d0
000091A8 D041                       		add.w	d1,d0
000091AA 6B00                       		bmi.s	loc_8B48
000091AC 3601                       		move.w	d1,d3
000091AE D643                       		add.w	d3,d3
000091B0 B043                       		cmp.w	d3,d0
000091B2 6200                       		bhi.s	loc_8B48
000091B4 1629 0016                  		move.b	$16(a1),d3
000091B8 4883                       		ext.w	d3
000091BA D443                       		add.w	d3,d2
000091BC 3629 000C                  		move.w	$C(a1),d3
000091C0 9668 000C                  		sub.w	$C(a0),d3
000091C4 D642                       		add.w	d2,d3
000091C6 6B00                       		bmi.s	loc_8B48
000091C8 3802                       		move.w	d2,d4
000091CA D844                       		add.w	d4,d4
000091CC B644                       		cmp.w	d4,d3
000091CE 6400                       		bcc.s	loc_8B48
000091D0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000091D4 6B00                       		bmi.s	loc_8B48
000091D6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000091DC 6400                       		bcc.s	loc_8B48
000091DE 4A78 FE08                  		tst.w	($FFFFFE08).w
000091E2 6600                       		bne.s	loc_8B48
000091E4 3A00                       		move.w	d0,d5
000091E6 B240                       		cmp.w	d0,d1
000091E8 6400                       		bcc.s	loc_8B30
000091EA D241                       		add.w	d1,d1
000091EC 9041                       		sub.w	d1,d0
000091EE 3A00                       		move.w	d0,d5
000091F0 4445                       		neg.w	d5
000091F2                            
000091F2                            loc_8B30:
000091F2 3203                       		move.w	d3,d1
000091F4 B443                       		cmp.w	d3,d2
000091F6 6400                       		bcc.s	loc_8B3C
000091F8 9644                       		sub.w	d4,d3
000091FA 3203                       		move.w	d3,d1
000091FC 4441                       		neg.w	d1
000091FE                            
000091FE                            loc_8B3C:
000091FE BA41                       		cmp.w	d1,d5
00009200 6200                       		bhi.s	loc_8B44
00009202 7801                       		moveq	#1,d4
00009204 4E75                       		rts	
00009206                            ; ===========================================================================
00009206                            
00009206                            loc_8B44:
00009206 78FF                       		moveq	#-1,d4
00009208 4E75                       		rts	
0000920A                            ; ===========================================================================
0000920A                            
0000920A                            loc_8B48:
0000920A 7800                       		moveq	#0,d4
0000920C 4E75                       		rts	
0000920E                            ; End of function Obj44_SolidWall2
0000920E                            
0000920E                            ; ===========================================================================
0000920E                            ; ---------------------------------------------------------------------------
0000920E                            ; Object 1E - Ball Hog enemy (SBZ)
0000920E                            ; ---------------------------------------------------------------------------
0000920E                            
0000920E                            Obj1E:					; XREF: Obj_Index
0000920E 7000                       		moveq	#0,d0
00009210 1028 0024                  		move.b	$24(a0),d0
00009214 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009218 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0000921C                            ; ===========================================================================
0000921C 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
0000921E 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009220                            ; ===========================================================================
00009220                            
00009220                            Obj1E_Main:				; XREF: Obj1E_Index
00009220 117C 0013 0016             		move.b	#$13,$16(a0)
00009226 117C 0008 0017             		move.b	#8,$17(a0)
0000922C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009234 317C 2302 0002             		move.w	#$2302,2(a0)
0000923A 117C 0004 0001             		move.b	#4,1(a0)
00009240 117C 0004 0018             		move.b	#4,$18(a0)
00009246 117C 0005 0020             		move.b	#5,$20(a0)
0000924C 117C 000C 0019             		move.b	#$C,$19(a0)
00009252 6100 0000                  		bsr.w	ObjectFall
00009256 4EB9 0000 0000             		jsr	ObjHitFloor
0000925C 4A41                       		tst.w	d1
0000925E 6A00                       		bpl.s	locret_8BAC
00009260 D368 000C                  		add.w	d1,$C(a0)
00009264 317C 0000 0012             		move.w	#0,$12(a0)
0000926A 5428 0024                  		addq.b	#2,$24(a0)
0000926E                            
0000926E                            locret_8BAC:
0000926E 4E75                       		rts	
00009270                            ; ===========================================================================
00009270                            
00009270                            Obj1E_Action:				; XREF: Obj1E_Index
00009270 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009276 6100 0000                  		bsr.w	AnimateSprite
0000927A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009280 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009282 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009286 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009288 6000                       		bra.s	Obj1E_MarkAsGone
0000928A                            ; ===========================================================================
0000928A                            
0000928A                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000928A 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000928E                            
0000928E                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000928E 6000 0000                  		bra.w	MarkObjGone
00009292                            ; ===========================================================================
00009292                            
00009292                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009292 117C 0001 0032             		move.b	#1,$32(a0)
00009298 6100 0000                  		bsr.w	SingleObjLoad
0000929C 6600                       		bne.s	loc_8C1A
0000929E 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
000092A2 3368 0008 0008             		move.w	8(a0),8(a1)
000092A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000092AE 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
000092B4 337C 0000 0012             		move.w	#0,$12(a1)
000092BA 70FC                       		moveq	#-4,d0
000092BC 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
000092C2 6700                       		beq.s	loc_8C0A	; if not, branch
000092C4 4440                       		neg.w	d0
000092C6 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
000092CA                            
000092CA                            loc_8C0A:
000092CA D169 0008                  		add.w	d0,8(a1)
000092CE 0669 000C 000C             		addi.w	#$C,$C(a1)
000092D4 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
000092DA                            
000092DA                            loc_8C1A:
000092DA 60B2                       		bra.s	Obj1E_MarkAsGone
000092DC                            ; ===========================================================================
000092DC                            ; ---------------------------------------------------------------------------
000092DC                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000092DC                            ; ---------------------------------------------------------------------------
000092DC                            
000092DC                            Obj20:					; XREF: Obj_Index
000092DC 7000                       		moveq	#0,d0
000092DE 1028 0024                  		move.b	$24(a0),d0
000092E2 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000092E6 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000092EA                            ; ===========================================================================
000092EA 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000092EC 0000                       		dc.w Obj20_Bounce-Obj20_Index
000092EE                            ; ===========================================================================
000092EE                            
000092EE                            Obj20_Main:				; XREF: Obj20_Index
000092EE 5428 0024                  		addq.b	#2,$24(a0)
000092F2 117C 0007 0016             		move.b	#7,$16(a0)
000092F8 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009300 317C 2302 0002             		move.w	#$2302,2(a0)
00009306 117C 0004 0001             		move.b	#4,1(a0)
0000930C 117C 0003 0018             		move.b	#3,$18(a0)
00009312 117C 0087 0020             		move.b	#$87,$20(a0)
00009318 117C 0008 0019             		move.b	#8,$19(a0)
0000931E 7000                       		moveq	#0,d0
00009320 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009324 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009328 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000932C 117C 0004 001A             		move.b	#4,$1A(a0)
00009332                            
00009332                            Obj20_Bounce:				; XREF: Obj20_Index
00009332 4EB9 0000 0000             		jsr	ObjectFall
00009338 4A68 0012                  		tst.w	$12(a0)
0000933C 6B00                       		bmi.s	Obj20_ChkExplode
0000933E 4EB9 0000 0000             		jsr	ObjHitFloor
00009344 4A41                       		tst.w	d1
00009346 6A00                       		bpl.s	Obj20_ChkExplode
00009348 D368 000C                  		add.w	d1,$C(a0)
0000934C 317C FD00 0012             		move.w	#-$300,$12(a0)
00009352 4A03                       		tst.b	d3
00009354 6700                       		beq.s	Obj20_ChkExplode
00009356 6B00                       		bmi.s	loc_8CA4
00009358 4A68 0010                  		tst.w	$10(a0)
0000935C 6A00                       		bpl.s	Obj20_ChkExplode
0000935E 4468 0010                  		neg.w	$10(a0)
00009362 6000                       		bra.s	Obj20_ChkExplode
00009364                            ; ===========================================================================
00009364                            
00009364                            loc_8CA4:				; XREF: Obj20_Bounce
00009364 4A68 0010                  		tst.w	$10(a0)
00009368 6B00                       		bmi.s	Obj20_ChkExplode
0000936A 4468 0010                  		neg.w	$10(a0)
0000936E                            
0000936E                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000936E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009372 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009374 10BC 0024                  		move.b	#$24,0(a0)
00009378 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000937C 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009382 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009386                            ; ===========================================================================
00009386                            
00009386                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009386 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000938A 6A00                       		bpl.s	Obj20_Display
0000938C 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009392 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009398                            
00009398                            Obj20_Display:
00009398 6100 0000                  		bsr.w	DisplaySprite
0000939C 3038 F72E                  		move.w	($FFFFF72E).w,d0
000093A0 0640 00E0                  		addi.w	#$E0,d0
000093A4 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
000093A8 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
000093AC 4E75                       		rts	
000093AE                            ; ===========================================================================
000093AE                            ; ---------------------------------------------------------------------------
000093AE                            ; Object 24 - explosion	from a destroyed monitor
000093AE                            ; ---------------------------------------------------------------------------
000093AE                            
000093AE                            Obj24:					; XREF: Obj_Index
000093AE 7000                       		moveq	#0,d0
000093B0 1028 0024                  		move.b	$24(a0),d0
000093B4 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
000093B8 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
000093BC                            ; ===========================================================================
000093BC 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
000093BE 0000                       		dc.w Obj24_Animate-Obj24_Index
000093C0                            ; ===========================================================================
000093C0                            
000093C0                            Obj24_Main:				; XREF: Obj24_Index
000093C0 5428 0024                  		addq.b	#2,$24(a0)
000093C4 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
000093CC 317C 041C 0002             		move.w	#$41C,2(a0)
000093D2 117C 0004 0001             		move.b	#4,1(a0)
000093D8 117C 0001 0018             		move.b	#1,$18(a0)
000093DE 117C 0000 0020             		move.b	#0,$20(a0)
000093E4 117C 000C 0019             		move.b	#$C,$19(a0)
000093EA 117C 0009 001E             		move.b	#9,$1E(a0)
000093F0 117C 0000 001A             		move.b	#0,$1A(a0)
000093F6 303C 00A5                  		move.w	#$A5,d0
000093FA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play explosion sound
00009400                            
00009400                            Obj24_Animate:				; XREF: Obj24_Index
00009400 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009404 6A00                       		bpl.s	Obj24_Display
00009406 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000940C 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009410 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009416 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000941A                            
0000941A                            Obj24_Display:
0000941A 6000 0000                  		bra.w	DisplaySprite
0000941E                            ; ===========================================================================
0000941E                            ; ---------------------------------------------------------------------------
0000941E                            ; Object 27 - explosion	from a destroyed enemy
0000941E                            ; ---------------------------------------------------------------------------
0000941E                            
0000941E                            Obj27:					; XREF: Obj_Index
0000941E 7000                       		moveq	#0,d0
00009420 1028 0024                  		move.b	$24(a0),d0
00009424 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009428 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000942C                            ; ===========================================================================
0000942C 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000942E 0000                       		dc.w Obj27_Main-Obj27_Index
00009430 0000                       		dc.w Obj27_Animate-Obj27_Index
00009432                            ; ===========================================================================
00009432                            
00009432                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009432 5428 0024                  		addq.b	#2,$24(a0)
00009436 6100 0000                  		bsr.w	SingleObjLoad
0000943A 6600                       		bne.s	Obj27_Main
0000943C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009440 3368 0008 0008             		move.w	8(a0),8(a1)
00009446 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000944C 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009452                            
00009452                            Obj27_Main:				; XREF: Obj27_Index
00009452 5428 0024                  		addq.b	#2,$24(a0)
00009456 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000945E 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009464 117C 0004 0001             		move.b	#4,1(a0)
0000946A 117C 0001 0018             		move.b	#1,$18(a0)
00009470 117C 0000 0020             		move.b	#0,$20(a0)
00009476 117C 000C 0019             		move.b	#$C,$19(a0)
0000947C                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000947C 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009482 117C 0000 001A             		move.b	#0,$1A(a0)
00009488 303C 00C1                  		move.w	#$C1,d0
0000948C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009492                            
00009492 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
00009498 1028 0028                  		move.b	$28(a0),d0
0000949C 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
000094A2 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
000094A8                            
000094A8                            Obj27_Animate:				; XREF: Obj27_Index
000094A8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000094AC 6A00                       		bpl.s	Obj27_Display
000094AE                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000094AE 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000094B4 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000094B8 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
000094BE 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000094C2                            
000094C2                            Obj27_Display:
000094C2 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
000094C8 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
000094CE 6000 0000                  		bra.w	DisplaySprite
000094D2                            ; ===========================================================================
000094D2                            ; ---------------------------------------------------------------------------
000094D2                            Obj27_ExplosionXYSpd:
000094D2                            		; dc.w	-$350, -$300	; Left
000094D2                            		; dc.w	-$200, -$450	; Near middle (left)
000094D2                            		; dc.w	0, -$500	; Middle
000094D2                            		; dc.w	$200, -$450	; Near middle (right)
000094D2                            		; dc.w	$350, -$300	; Right
000094D2                            
000094D2 FEB0 FC00                  		dc.w	-$150, -$400	; Left
000094D6 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
000094DA 0000 FA00                  		dc.w	0, -$600	; Middle
000094DE 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
000094E2 0150 FC00                  		dc.w	$150, -$400	; Right
000094E6                            
000094E6 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009500                            ; ---------------------------------------------------------------------------
00009500                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009500                            ; ---------------------------------------------------------------------------
00009500                            
00009500                            Obj3F:					; XREF: Obj_Index
00009500 7000                       		moveq	#0,d0
00009502 1028 0024                  		move.b	$24(a0),d0
00009506 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000950A 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000950E                            ; ===========================================================================
0000950E 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009510 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009512                            ; ===========================================================================
00009512                            
00009512                            Obj3F_Main:				; XREF: Obj3F_Index
00009512 5428 0024                  		addq.b	#2,$24(a0)
00009516 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000951E 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009524 117C 0004 0001             		move.b	#4,1(a0)
0000952A 117C 0001 0018             		move.b	#1,$18(a0)
00009530 117C 0000 0020             		move.b	#0,$20(a0)
00009536 117C 000C 0019             		move.b	#$C,$19(a0)
0000953C 117C 0007 001E             		move.b	#7,$1E(a0)
00009542 117C 0000 001A             		move.b	#0,$1A(a0)
00009548 303C 00C4                  		move.w	#$C4,d0
0000954C 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009552                            ; ===========================================================================
00009552                            Ani_obj1E:
00009552                            	include "_anim\obj1E.asm"
00009552                            ; ---------------------------------------------------------------------------
00009552                            ; Animation script - doors (SBZ)
00009552                            ; ---------------------------------------------------------------------------
00009552 0000                       		dc.w byte_8E4A-Ani_obj1E
00009554 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000956C 00                         		even
0000956C 00                         		even
0000956C                            
0000956C                            ; ---------------------------------------------------------------------------
0000956C                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000956C                            ; ---------------------------------------------------------------------------
0000956C                            Map_obj1E:
0000956C                            	include "_maps\obj1E.asm"
0000956C                            Map_a7ad:
0000956C 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
0000956E 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
00009570 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
00009572 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
00009574 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
00009576 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
00009578 02                         Map_a7ad_C: 	dc.b $2
00009579 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
0000957E FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009583 02                         Map_a7ad_17: 	dc.b $2
00009584 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009589 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
0000958E 02                         Map_a7ad_22: 	dc.b $2
0000958F F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
00009594 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
00009599 02                         Map_a7ad_2D: 	dc.b $2
0000959A E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
0000959F F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
000095A4 02                         Map_a7ad_38: 	dc.b $2
000095A5 F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
000095AA E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
000095AF 02                         Map_a7ad_43: 	dc.b $2
000095B0 F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
000095B5 E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
000095BA                            	even
000095BA                            	even
000095BA                            
000095BA                            ; ---------------------------------------------------------------------------
000095BA                            ; Sprite mappings - explosion
000095BA                            ; ---------------------------------------------------------------------------
000095BA                            Map_obj24:
000095BA                            	include "_maps\obj24.asm"
000095BA                            ; ---------------------------------------------------------------------------
000095BA                            ; Sprite mappings - explosion
000095BA                            ; ---------------------------------------------------------------------------
000095BA 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
000095BE 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
000095C2 01                         byte_8EAE:	dc.b 1
000095C3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000095C8 01                         byte_8EB4:	dc.b 1
000095C9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000095CE 01                         byte_8EBA:	dc.b 1
000095CF F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000095D4 01                         byte_8EC0:	dc.b 1
000095D5 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
000095DA                            		even
000095DA                            		even
000095DA                            
000095DA                            ; ---------------------------------------------------------------------------
000095DA                            ; Sprite mappings - explosion
000095DA                            ; ---------------------------------------------------------------------------
000095DA 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
000095DE 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
000095E2 0000                       		dc.w byte_8EF7-Map_obj27
000095E4 01                         byte_8ED0:	dc.b 1
000095E5 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000095EA 01                         byte_8ED6:	dc.b 1
000095EB F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
000095F0 01                         byte_8EDC:	dc.b 1
000095F1 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
000095F6 04                         byte_8EE2:	dc.b 4
000095F7 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
000095FC EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009601 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009606 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000960B 04                         byte_8EF7:	dc.b 4
0000960C EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009611 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009616 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000961B FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009620                            		even
00009620                            ; ---------------------------------------------------------------------------
00009620                            ; Sprite mappings - explosion from when	a boss is destroyed
00009620                            ; ---------------------------------------------------------------------------
00009620 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009622 0000                       		dc.w byte_8F16-Map_obj3F
00009624 0000                       		dc.w byte_8F1C-Map_obj3F
00009626 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009628 FFEB                       		dc.w byte_8EF7-Map_obj3F
0000962A 01                         byte_8F16:	dc.b 1
0000962B F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009630 01                         byte_8F1C:	dc.b 1
00009631 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009636                            		even
00009636                            ; ===========================================================================
00009636                            ; ---------------------------------------------------------------------------
00009636                            ; Object 28 - animals
00009636                            ; ---------------------------------------------------------------------------
00009636                            
00009636                            Obj28:					; XREF: Obj_Index
00009636 7000                       		moveq	#0,d0
00009638 1028 0024                  		move.b	$24(a0),d0
0000963C 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009640 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009644                            ; ===========================================================================
00009644 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009648 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000964C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009650 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009654 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009658 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000965C 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009660 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009664 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009668 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000966C 0000                       		dc.w loc_92D6-Obj28_Index
0000966E                            
0000966E 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000967A                            
0000967A FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000967E 0000 0000                  		dc.l Map_obj28
00009682 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009686 0000 0000                  		dc.l Map_obj28a		; mappings address
0000968A FE80 FD00                  		dc.w $FE80, $FD00
0000968E 0000 0000                  		dc.l Map_obj28
00009692 FEC0 FE80                  		dc.w $FEC0, $FE80
00009696 0000 0000                  		dc.l Map_obj28a
0000969A FE40 FD00                  		dc.w $FE40, $FD00
0000969E 0000 0000                  		dc.l Map_obj28b
000096A2 FD00 FC00                  		dc.w $FD00, $FC00
000096A6 0000 0000                  		dc.l Map_obj28a
000096AA FD80 FC80                  		dc.w $FD80, $FC80
000096AE 0000 0000                  		dc.l Map_obj28b
000096B2                            
000096B2 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
000096C2 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000096D2 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000096DE                            
000096DE 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000096F2 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009706 0000 0000                  		dc.l Map_obj28b
0000970A                            
0000970A 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000971C 0565 05B3                  		dc.w $565, $5B3
00009720                            ; ===========================================================================
00009720                            
00009720                            Obj28_Ending:				; XREF: Obj28_Index
00009720 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009724 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009728 7000                       		moveq	#0,d0
0000972A 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000972E D040                       		add.w	d0,d0		; multiply d0 by 2
00009730 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009734 0440 0014                  		subi.w	#$14,d0
00009738 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000973E D040                       		add.w	d0,d0
00009740 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009746 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000974A 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009750 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009756 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000975C 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009762 117C 000C 0016             		move.b	#$C,$16(a0)
00009768 117C 0004 0001             		move.b	#4,1(a0)
0000976E 08E8 0000 0001             		bset	#0,1(a0)
00009774 117C 0006 0018             		move.b	#6,$18(a0)
0000977A 117C 0008 0019             		move.b	#8,$19(a0)
00009780 117C 0007 001E             		move.b	#7,$1E(a0)
00009786 6000 0000                  		bra.w	DisplaySprite
0000978A                            ; ===========================================================================
0000978A                            
0000978A                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000978A 5428 0024                  		addq.b	#2,$24(a0)
0000978E 6100 9536                  		bsr.w	RandomNumber
00009792 0240 0001                  		andi.w	#1,d0
00009796 7200                       		moveq	#0,d1
00009798 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000979C D241                       		add.w	d1,d1
0000979E D240                       		add.w	d0,d1
000097A0 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
000097A4 1031 1000                  		move.b	(a1,d1.w),d0
000097A8 1140 0030                  		move.b	d0,$30(a0)
000097AC E748                       		lsl.w	#3,d0
000097AE 43FA FECA                  		lea	Obj28_Variables(pc),a1
000097B2 D2C0                       		adda.w	d0,a1
000097B4 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
000097B8 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
000097BC 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
000097C0 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
000097C6 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000097CC 6700                       		beq.s	loc_90C0	; if yes, branch
000097CE 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000097D4                            
000097D4                            loc_90C0:
000097D4 117C 000C 0016             		move.b	#$C,$16(a0)
000097DA 117C 0004 0001             		move.b	#4,1(a0)
000097E0 08E8 0000 0001             		bset	#0,1(a0)
000097E6 117C 0006 0018             		move.b	#6,$18(a0)
000097EC 117C 0008 0019             		move.b	#8,$19(a0)
000097F2 117C 0007 001E             		move.b	#7,$1E(a0)
000097F8 117C 0002 001A             		move.b	#2,$1A(a0)
000097FE 317C FC00 0012             		move.w	#-$400,$12(a0)
00009804 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009808 6600                       		bne.s	loc_911C
0000980A 6100 0000                  		bsr.w	SingleObjLoad
0000980E 6600                       		bne.s	Obj28_Display
00009810 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009814 3368 0008 0008             		move.w	8(a0),8(a1)
0000981A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009820 3028 003E                  		move.w	$3E(a0),d0
00009824 E248                       		lsr.w	#1,d0
00009826 1340 001A                  		move.b	d0,$1A(a1)
0000982A                            
0000982A                            Obj28_Display:
0000982A 6000 0000                  		bra.w	DisplaySprite
0000982E                            ; ===========================================================================
0000982E                            
0000982E                            loc_911C:
0000982E 117C 0012 0024             		move.b	#$12,$24(a0)
00009834 4268 0010                  		clr.w	$10(a0)
00009838 6000 0000                  		bra.w	DisplaySprite
0000983C                            ; ===========================================================================
0000983C                            
0000983C                            loc_912A:				; XREF: Obj28_Index
0000983C 4A28 0001                  		tst.b	1(a0)
00009840 6A00 0000                  		bpl.w	DeleteObject
00009844 6100 0000                  		bsr.w	ObjectFall
00009848 4A68 0012                  		tst.w	$12(a0)
0000984C 6B00                       		bmi.s	loc_9180
0000984E 4EB9 0000 0000             		jsr	ObjHitFloor
00009854 4A41                       		tst.w	d1
00009856 6A00                       		bpl.s	loc_9180
00009858 D368 000C                  		add.w	d1,$C(a0)
0000985C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009862 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009868 117C 0001 001A             		move.b	#1,$1A(a0)
0000986E 1028 0030                  		move.b	$30(a0),d0
00009872 D000                       		add.b	d0,d0
00009874 5800                       		addq.b	#4,d0
00009876 1140 0024                  		move.b	d0,$24(a0)
0000987A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000987E 6700                       		beq.s	loc_9180
00009880 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009886 6700                       		beq.s	loc_9180
00009888 4468 0010                  		neg.w	$10(a0)
0000988C 0868 0000 0001             		bchg	#0,1(a0)
00009892                            
00009892                            loc_9180:
00009892 6000 0000                  		bra.w	DisplaySprite
00009896                            ; ===========================================================================
00009896                            
00009896                            loc_9184:				; XREF: Obj28_Index
00009896 6100 0000                  		bsr.w	ObjectFall
0000989A 117C 0001 001A             		move.b	#1,$1A(a0)
000098A0 4A68 0012                  		tst.w	$12(a0)
000098A4 6B00                       		bmi.s	loc_91AE
000098A6 117C 0000 001A             		move.b	#0,$1A(a0)
000098AC 4EB9 0000 0000             		jsr	ObjHitFloor
000098B2 4A41                       		tst.w	d1
000098B4 6A00                       		bpl.s	loc_91AE
000098B6 D368 000C                  		add.w	d1,$C(a0)
000098BA 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098C0                            
000098C0                            loc_91AE:
000098C0 4A28 0028                  		tst.b	$28(a0)
000098C4 6600                       		bne.s	loc_9224
000098C6 4A28 0001                  		tst.b	1(a0)
000098CA 6A00 0000                  		bpl.w	DeleteObject
000098CE 6000 0000                  		bra.w	DisplaySprite
000098D2                            ; ===========================================================================
000098D2                            
000098D2                            loc_91C0:				; XREF: Obj28_Index
000098D2 6100 0000                  		bsr.w	SpeedToPos
000098D6 0668 0018 0012             		addi.w	#$18,$12(a0)
000098DC 4A68 0012                  		tst.w	$12(a0)
000098E0 6B00                       		bmi.s	loc_91FC
000098E2 4EB9 0000 0000             		jsr	ObjHitFloor
000098E8 4A41                       		tst.w	d1
000098EA 6A00                       		bpl.s	loc_91FC
000098EC D368 000C                  		add.w	d1,$C(a0)
000098F0 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098F6 4A28 0028                  		tst.b	$28(a0)
000098FA 6700                       		beq.s	loc_91FC
000098FC 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009902 6700                       		beq.s	loc_91FC
00009904 4468 0010                  		neg.w	$10(a0)
00009908 0868 0000 0001             		bchg	#0,1(a0)
0000990E                            
0000990E                            loc_91FC:
0000990E 5328 001E                  		subq.b	#1,$1E(a0)
00009912 6A00                       		bpl.s	loc_9212
00009914 117C 0001 001E             		move.b	#1,$1E(a0)
0000991A 5228 001A                  		addq.b	#1,$1A(a0)
0000991E 0228 0001 001A             		andi.b	#1,$1A(a0)
00009924                            
00009924                            loc_9212:
00009924 4A28 0028                  		tst.b	$28(a0)
00009928 6600                       		bne.s	loc_9224
0000992A 4A28 0001                  		tst.b	1(a0)
0000992E 6A00 0000                  		bpl.w	DeleteObject
00009932 6000 0000                  		bra.w	DisplaySprite
00009936                            ; ===========================================================================
00009936                            
00009936                            loc_9224:				; XREF: Obj28_Index
00009936 3028 0008                  		move.w	8(a0),d0
0000993A 9078 D008                  		sub.w	($FFFFD008).w,d0
0000993E 6500                       		bcs.s	loc_923C
00009940 0440 0180                  		subi.w	#$180,d0
00009944 6A00                       		bpl.s	loc_923C
00009946 4A28 0001                  		tst.b	1(a0)
0000994A 6A00 0000                  		bpl.w	DeleteObject
0000994E                            
0000994E                            loc_923C:
0000994E 6000 0000                  		bra.w	DisplaySprite
00009952                            ; ===========================================================================
00009952                            
00009952                            loc_9240:				; XREF: Obj28_Index
00009952 4A28 0001                  		tst.b	1(a0)
00009956 6A00 0000                  		bpl.w	DeleteObject
0000995A 5368 0036                  		subq.w	#1,$36(a0)
0000995E 6600 0000                  		bne.w	loc_925C
00009962 117C 0002 0024             		move.b	#2,$24(a0)
00009968 117C 0003 0018             		move.b	#3,$18(a0)
0000996E                            
0000996E                            loc_925C:
0000996E 6000 0000                  		bra.w	DisplaySprite
00009972                            ; ===========================================================================
00009972                            
00009972                            loc_9260:				; XREF: Obj28_Index
00009972 6100 0000                  		bsr.w	sub_9404
00009976 6400                       		bcc.s	loc_927C
00009978 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000997E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009984 117C 000E 0024             		move.b	#$E,$24(a0)
0000998A 6000 FF46                  		bra.w	loc_91C0
0000998E                            ; ===========================================================================
0000998E                            
0000998E                            loc_927C:
0000998E 6000 FFA6                  		bra.w	loc_9224
00009992                            ; ===========================================================================
00009992                            
00009992                            loc_9280:				; XREF: Obj28_Index
00009992 6100 0000                  		bsr.w	sub_9404
00009996 6A00                       		bpl.s	loc_92B6
00009998 4268 0010                  		clr.w	$10(a0)
0000999C 4268 0032                  		clr.w	$32(a0)
000099A0 6100 0000                  		bsr.w	SpeedToPos
000099A4 0668 0018 0012             		addi.w	#$18,$12(a0)
000099AA 6100 0000                  		bsr.w	loc_93C4
000099AE 6100 0000                  		bsr.w	loc_93EC
000099B2 5328 001E                  		subq.b	#1,$1E(a0)
000099B6 6A00                       		bpl.s	loc_92B6
000099B8 117C 0001 001E             		move.b	#1,$1E(a0)
000099BE 5228 001A                  		addq.b	#1,$1A(a0)
000099C2 0228 0001 001A             		andi.b	#1,$1A(a0)
000099C8                            
000099C8                            loc_92B6:
000099C8 6000 FF6C                  		bra.w	loc_9224
000099CC                            ; ===========================================================================
000099CC                            
000099CC                            loc_92BA:				; XREF: Obj28_Index
000099CC 6100 0000                  		bsr.w	sub_9404
000099D0 6A00                       		bpl.s	loc_9310
000099D2 3168 0032 0010             		move.w	$32(a0),$10(a0)
000099D8 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099DE 117C 0004 0024             		move.b	#4,$24(a0)
000099E4 6000 FEB0                  		bra.w	loc_9184
000099E8                            ; ===========================================================================
000099E8                            
000099E8                            loc_92D6:				; XREF: Obj28_Index
000099E8 6100 0000                  		bsr.w	ObjectFall
000099EC 117C 0001 001A             		move.b	#1,$1A(a0)
000099F2 4A68 0012                  		tst.w	$12(a0)
000099F6 6B00                       		bmi.s	loc_9310
000099F8 117C 0000 001A             		move.b	#0,$1A(a0)
000099FE 4EB9 0000 0000             		jsr	ObjHitFloor
00009A04 4A41                       		tst.w	d1
00009A06 6A00                       		bpl.s	loc_9310
00009A08 4628 0029                  		not.b	$29(a0)
00009A0C 6600                       		bne.s	loc_9306
00009A0E 4468 0010                  		neg.w	$10(a0)
00009A12 0868 0000 0001             		bchg	#0,1(a0)
00009A18                            
00009A18                            loc_9306:
00009A18 D368 000C                  		add.w	d1,$C(a0)
00009A1C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A22                            
00009A22                            loc_9310:
00009A22 6000 FF12                  		bra.w	loc_9224
00009A26                            ; ===========================================================================
00009A26                            
00009A26                            loc_9314:				; XREF: Obj28_Index
00009A26 6100 0000                  		bsr.w	sub_9404
00009A2A 6A00                       		bpl.s	loc_932E
00009A2C 4268 0010                  		clr.w	$10(a0)
00009A30 4268 0032                  		clr.w	$32(a0)
00009A34 6100 0000                  		bsr.w	ObjectFall
00009A38 6100 0000                  		bsr.w	loc_93C4
00009A3C 6100 0000                  		bsr.w	loc_93EC
00009A40                            
00009A40                            loc_932E:
00009A40 6000 FEF4                  		bra.w	loc_9224
00009A44                            ; ===========================================================================
00009A44                            
00009A44                            loc_9332:				; XREF: Obj28_Index
00009A44 6100 0000                  		bsr.w	sub_9404
00009A48 6A00                       		bpl.s	loc_936C
00009A4A 6100 0000                  		bsr.w	ObjectFall
00009A4E 117C 0001 001A             		move.b	#1,$1A(a0)
00009A54 4A68 0012                  		tst.w	$12(a0)
00009A58 6B00                       		bmi.s	loc_936C
00009A5A 117C 0000 001A             		move.b	#0,$1A(a0)
00009A60 4EB9 0000 0000             		jsr	ObjHitFloor
00009A66 4A41                       		tst.w	d1
00009A68 6A00                       		bpl.s	loc_936C
00009A6A 4468 0010                  		neg.w	$10(a0)
00009A6E 0868 0000 0001             		bchg	#0,1(a0)
00009A74 D368 000C                  		add.w	d1,$C(a0)
00009A78 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A7E                            
00009A7E                            loc_936C:
00009A7E 6000 FEB6                  		bra.w	loc_9224
00009A82                            ; ===========================================================================
00009A82                            
00009A82                            loc_9370:				; XREF: Obj28_Index
00009A82 6100 0000                  		bsr.w	sub_9404
00009A86 6A00                       		bpl.s	loc_93C0
00009A88 6100 0000                  		bsr.w	SpeedToPos
00009A8C 0668 0018 0012             		addi.w	#$18,$12(a0)
00009A92 4A68 0012                  		tst.w	$12(a0)
00009A96 6B00                       		bmi.s	loc_93AA
00009A98 4EB9 0000 0000             		jsr	ObjHitFloor
00009A9E 4A41                       		tst.w	d1
00009AA0 6A00                       		bpl.s	loc_93AA
00009AA2 4628 0029                  		not.b	$29(a0)
00009AA6 6600                       		bne.s	loc_93A0
00009AA8 4468 0010                  		neg.w	$10(a0)
00009AAC 0868 0000 0001             		bchg	#0,1(a0)
00009AB2                            
00009AB2                            loc_93A0:
00009AB2 D368 000C                  		add.w	d1,$C(a0)
00009AB6 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009ABC                            
00009ABC                            loc_93AA:
00009ABC 5328 001E                  		subq.b	#1,$1E(a0)
00009AC0 6A00                       		bpl.s	loc_93C0
00009AC2 117C 0001 001E             		move.b	#1,$1E(a0)
00009AC8 5228 001A                  		addq.b	#1,$1A(a0)
00009ACC 0228 0001 001A             		andi.b	#1,$1A(a0)
00009AD2                            
00009AD2                            loc_93C0:
00009AD2 6000 FE62                  		bra.w	loc_9224
00009AD6                            ; ===========================================================================
00009AD6                            
00009AD6                            loc_93C4:
00009AD6 117C 0001 001A             		move.b	#1,$1A(a0)
00009ADC 4A68 0012                  		tst.w	$12(a0)
00009AE0 6B00                       		bmi.s	locret_93EA
00009AE2 117C 0000 001A             		move.b	#0,$1A(a0)
00009AE8 4EB9 0000 0000             		jsr	ObjHitFloor
00009AEE 4A41                       		tst.w	d1
00009AF0 6A00                       		bpl.s	locret_93EA
00009AF2 D368 000C                  		add.w	d1,$C(a0)
00009AF6 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009AFC                            
00009AFC                            locret_93EA:
00009AFC 4E75                       		rts	
00009AFE                            ; ===========================================================================
00009AFE                            
00009AFE                            loc_93EC:
00009AFE 08E8 0000 0001             		bset	#0,1(a0)
00009B04 3028 0008                  		move.w	8(a0),d0
00009B08 9078 D008                  		sub.w	($FFFFD008).w,d0
00009B0C 6400                       		bcc.s	locret_9402
00009B0E 08A8 0000 0001             		bclr	#0,1(a0)
00009B14                            
00009B14                            locret_9402:
00009B14 4E75                       		rts	
00009B16                            
00009B16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B16                            
00009B16                            
00009B16                            sub_9404:
00009B16 3038 D008                  		move.w	($FFFFD008).w,d0
00009B1A 9068 0008                  		sub.w	8(a0),d0
00009B1E 0440 00B8                  		subi.w	#$B8,d0
00009B22 4E75                       		rts	
00009B24                            ; End of function sub_9404
00009B24                            
00009B24                            ; ===========================================================================
00009B24                            ; ---------------------------------------------------------------------------
00009B24                            ; Object 29 - points that appear when you destroy something
00009B24                            ; ---------------------------------------------------------------------------
00009B24                            
00009B24                            Obj29:					; XREF: Obj_Index
00009B24 7000                       		moveq	#0,d0
00009B26 1028 0024                  		move.b	$24(a0),d0
00009B2A 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009B2E 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009B32 6000 0000                  		bra.w	DisplaySprite
00009B36                            ; ===========================================================================
00009B36 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009B38 0000                       		dc.w Obj29_Slower-Obj29_Index
00009B3A                            ; ===========================================================================
00009B3A                            
00009B3A                            Obj29_Main:				; XREF: Obj29_Index
00009B3A 5428 0024                  		addq.b	#2,$24(a0)
00009B3E 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009B46 317C 2797 0002             		move.w	#$2797,2(a0)
00009B4C 117C 0004 0001             		move.b	#4,1(a0)
00009B52 117C 0001 0018             		move.b	#1,$18(a0)
00009B58 117C 0008 0019             		move.b	#8,$19(a0)
00009B5E 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009B64                            
00009B64                            Obj29_Slower:				; XREF: Obj29_Index
00009B64 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009B68 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009B6C 6100 0000                  		bsr.w	SpeedToPos
00009B70 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009B76 4E75                       		rts	
00009B78                            ; ===========================================================================
00009B78                            ; ---------------------------------------------------------------------------
00009B78                            ; Sprite mappings - animals
00009B78                            ; ---------------------------------------------------------------------------
00009B78                            Map_obj28:
00009B78                            	include "_maps\obj28.asm"
00009B78                            ; ---------------------------------------------------------------------------
00009B78                            ; Sprite mappings - animals
00009B78                            ; ---------------------------------------------------------------------------
00009B78 0000                       		dc.w byte_9472-Map_obj28
00009B7A 0000                       		dc.w byte_9478-Map_obj28
00009B7C 0000                       		dc.w byte_946C-Map_obj28
00009B7E 01                         byte_946C:	dc.b 1
00009B7F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B84 01                         byte_9472:	dc.b 1
00009B85 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009B8A 01                         byte_9478:	dc.b 1
00009B8B F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009B90                            		even
00009B90                            		even
00009B90                            
00009B90                            Map_obj28a:
00009B90                            	include "_maps\obj28a.asm"
00009B90                            ; ---------------------------------------------------------------------------
00009B90                            ; Sprite mappings - animals
00009B90                            ; ---------------------------------------------------------------------------
00009B90 0000                       		dc.w byte_948A-Map_obj28a
00009B92 0000                       		dc.w byte_9490-Map_obj28a
00009B94 0000                       		dc.w byte_9484-Map_obj28a
00009B96 01                         byte_9484:	dc.b 1
00009B97 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B9C 01                         byte_948A:	dc.b 1
00009B9D FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009BA2 01                         byte_9490:	dc.b 1
00009BA3 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009BA8                            		even
00009BA8                            		even
00009BA8                            
00009BA8                            Map_obj28b:
00009BA8                            	include "_maps\obj28b.asm"
00009BA8                            ; ---------------------------------------------------------------------------
00009BA8                            ; Sprite mappings - animals
00009BA8                            ; ---------------------------------------------------------------------------
00009BA8 0000                       		dc.w byte_94A2-Map_obj28b
00009BAA 0000                       		dc.w byte_94A8-Map_obj28b
00009BAC 0000                       		dc.w byte_949C-Map_obj28b
00009BAE 01                         byte_949C:	dc.b 1
00009BAF F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009BB4 01                         byte_94A2:	dc.b 1
00009BB5 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009BBA 01                         byte_94A8:	dc.b 1
00009BBB FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009BC0                            		even
00009BC0                            		even
00009BC0                            
00009BC0                            ; ---------------------------------------------------------------------------
00009BC0                            ; Sprite mappings - points that	appear when you	destroy	something
00009BC0                            ; ---------------------------------------------------------------------------
00009BC0                            Map_obj29:
00009BC0                            	include "_maps\obj29.asm"
00009BC0                            ; ---------------------------------------------------------------------------
00009BC0                            ; Sprite mappings - points that	appear when you	destroy	something
00009BC0                            ; ---------------------------------------------------------------------------
00009BC0 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009BC4 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009BC8 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009BCC 0000                       		dc.w byte_94E5-Map_obj29
00009BCE 01                         byte_94BC:	dc.b 1
00009BCF FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009BD4 01                         byte_94C2:	dc.b 1
00009BD5 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009BDA 01                         byte_94C8:	dc.b 1
00009BDB FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009BE0 01                         byte_94CE:	dc.b 1
00009BE1 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009BE6 01                         byte_94D4:	dc.b 1
00009BE7 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009BEC 02                         byte_94DA:	dc.b 2
00009BED FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009BF2 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009BF7 02                         byte_94E5:	dc.b 2
00009BF8 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009BFD FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009C02                            		even
00009C02                            		even
00009C02                            
00009C02                            ; ===========================================================================
00009C02                            ; ---------------------------------------------------------------------------
00009C02                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009C02                            ; ---------------------------------------------------------------------------
00009C02                            
00009C02                            Obj1F:					; XREF: Obj_Index
00009C02 7000                       		moveq	#0,d0
00009C04 1028 0024                  		move.b	$24(a0),d0
00009C08 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009C0C 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009C10                            ; ===========================================================================
00009C10 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009C12 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009C14 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009C16 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009C18 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009C1A                            ; ===========================================================================
00009C1A                            
00009C1A                            Obj1F_Main:				; XREF: Obj1F_Index
00009C1A 117C 0010 0016             		move.b	#$10,$16(a0)
00009C20 117C 0008 0017             		move.b	#8,$17(a0)
00009C26 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009C2E 317C 0400 0002             		move.w	#$400,2(a0)
00009C34 117C 0004 0001             		move.b	#4,1(a0)
00009C3A 117C 0003 0018             		move.b	#3,$18(a0)
00009C40 117C 0006 0020             		move.b	#6,$20(a0)
00009C46 117C 0015 0019             		move.b	#$15,$19(a0)
00009C4C 6100 0000                  		bsr.w	ObjectFall
00009C50 4EB9 0000 0000             		jsr	ObjHitFloor
00009C56 4A41                       		tst.w	d1
00009C58 6A00                       		bpl.s	locret_955A
00009C5A D368 000C                  		add.w	d1,$C(a0)
00009C5E 1143 0026                  		move.b	d3,$26(a0)
00009C62 317C 0000 0012             		move.w	#0,$12(a0)
00009C68 5428 0024                  		addq.b	#2,$24(a0)
00009C6C                            
00009C6C                            locret_955A:
00009C6C 4E75                       		rts	
00009C6E                            ; ===========================================================================
00009C6E                            
00009C6E                            Obj1F_Action:				; XREF: Obj1F_Index
00009C6E 7000                       		moveq	#0,d0
00009C70 1028 0025                  		move.b	$25(a0),d0
00009C74 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009C78 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009C7C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009C82 6100 0000                  		bsr.w	AnimateSprite
00009C86 6000 0000                  		bra.w	MarkObjGone
00009C8A                            ; ===========================================================================
00009C8A 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009C8C 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009C8E                            ; ===========================================================================
00009C8E                            
00009C8E                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009C8E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009C92 6A00                       		bpl.s	locret_95B6
00009C94 4A28 0001                  		tst.b	1(a0)
00009C98 6A00                       		bpl.s	Obj1F_Move
00009C9A 0868 0001 0032             		bchg	#1,$32(a0)
00009CA0 6600                       		bne.s	Obj1F_MakeFire
00009CA2                            
00009CA2                            Obj1F_Move:
00009CA2 5428 0025                  		addq.b	#2,$25(a0)
00009CA6 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009CAC 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009CB2 6100 0000                  		bsr.w	Obj1F_SetAni
00009CB6 5600                       		addq.b	#3,d0
00009CB8 1140 001C                  		move.b	d0,$1C(a0)
00009CBC 0868 0000 0022             		bchg	#0,$22(a0)
00009CC2 6600                       		bne.s	locret_95B6
00009CC4 4468 0010                  		neg.w	$10(a0)		; change direction
00009CC8                            
00009CC8                            locret_95B6:
00009CC8 4E75                       		rts	
00009CCA                            ; ===========================================================================
00009CCA                            
00009CCA                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009CCA 317C 003B 0030             		move.w	#$3B,$30(a0)
00009CD0 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009CD6 6100 0000                  		bsr.w	SingleObjLoad
00009CDA 6600                       		bne.s	Obj1F_MakeFire2
00009CDC 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009CE0 137C 0006 0024             		move.b	#6,$24(a1)
00009CE6 3368 0008 0008             		move.w	8(a0),8(a1)
00009CEC 0469 0010 0008             		subi.w	#$10,8(a1)
00009CF2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009CF8 337C FF00 0010             		move.w	#-$100,$10(a1)
00009CFE                            
00009CFE                            Obj1F_MakeFire2:
00009CFE 6100 0000                  		bsr.w	SingleObjLoad
00009D02 6600                       		bne.s	locret_9618
00009D04 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009D08 137C 0006 0024             		move.b	#6,$24(a1)
00009D0E 3368 0008 0008             		move.w	8(a0),8(a1)
00009D14 0669 0010 0008             		addi.w	#$10,8(a1)
00009D1A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D20 337C 0100 0010             		move.w	#$100,$10(a1)
00009D26                            
00009D26                            locret_9618:
00009D26 4E75                       		rts	
00009D28                            ; ===========================================================================
00009D28                            
00009D28                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009D28 5368 0030                  		subq.w	#1,$30(a0)
00009D2C 6B00                       		bmi.s	loc_966E
00009D2E 6100 0000                  		bsr.w	SpeedToPos
00009D32 0868 0000 0032             		bchg	#0,$32(a0)
00009D38 6600                       		bne.s	loc_9654
00009D3A 3628 0008                  		move.w	8(a0),d3
00009D3E 0643 0010                  		addi.w	#$10,d3
00009D42 0828 0000 0022             		btst	#0,$22(a0)
00009D48 6700                       		beq.s	loc_9640
00009D4A 0443 0020                  		subi.w	#$20,d3
00009D4E                            
00009D4E                            loc_9640:
00009D4E 4EB9 0000 0000             		jsr	ObjHitFloor2
00009D54 0C41 FFF8                  		cmpi.w	#-8,d1
00009D58 6D00                       		blt.s	loc_966E
00009D5A 0C41 000C                  		cmpi.w	#$C,d1
00009D5E 6C00                       		bge.s	loc_966E
00009D60 4E75                       		rts	
00009D62                            ; ===========================================================================
00009D62                            
00009D62                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009D62 4EB9 0000 0000             		jsr	ObjHitFloor
00009D68 D368 000C                  		add.w	d1,$C(a0)
00009D6C 1143 0026                  		move.b	d3,$26(a0)
00009D70 6100 0000                  		bsr.w	Obj1F_SetAni
00009D74 5600                       		addq.b	#3,d0
00009D76 1140 001C                  		move.b	d0,$1C(a0)
00009D7A 4E75                       		rts	
00009D7C                            ; ===========================================================================
00009D7C                            
00009D7C                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009D7C 5528 0025                  		subq.b	#2,$25(a0)
00009D80 317C 003B 0030             		move.w	#59,$30(a0)
00009D86 317C 0000 0010             		move.w	#0,$10(a0)
00009D8C 6100 0000                  		bsr.w	Obj1F_SetAni
00009D90 1140 001C                  		move.b	d0,$1C(a0)
00009D94 4E75                       		rts	
00009D96                            ; ---------------------------------------------------------------------------
00009D96                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009D96                            ; ---------------------------------------------------------------------------
00009D96                            
00009D96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D96                            
00009D96                            
00009D96                            Obj1F_SetAni:				; XREF: loc_966E
00009D96 7000                       		moveq	#0,d0
00009D98 1628 0026                  		move.b	$26(a0),d3
00009D9C 6B00                       		bmi.s	loc_96A4
00009D9E 0C03 0006                  		cmpi.b	#6,d3
00009DA2 6500                       		bcs.s	locret_96A2
00009DA4 7001                       		moveq	#1,d0
00009DA6 0828 0000 0022             		btst	#0,$22(a0)
00009DAC 6600                       		bne.s	locret_96A2
00009DAE 7002                       		moveq	#2,d0
00009DB0                            
00009DB0                            locret_96A2:
00009DB0 4E75                       		rts	
00009DB2                            ; ===========================================================================
00009DB2                            
00009DB2                            loc_96A4:				; XREF: Obj1F_SetAni
00009DB2 0C03 00FA                  		cmpi.b	#-6,d3
00009DB6 6200                       		bhi.s	locret_96B6
00009DB8 7002                       		moveq	#2,d0
00009DBA 0828 0000 0022             		btst	#0,$22(a0)
00009DC0 6600                       		bne.s	locret_96B6
00009DC2 7001                       		moveq	#1,d0
00009DC4                            
00009DC4                            locret_96B6:
00009DC4 4E75                       		rts	
00009DC6                            ; End of function Obj1F_SetAni
00009DC6                            
00009DC6                            ; ===========================================================================
00009DC6                            
00009DC6                            Obj1F_Delete:				; XREF: Obj1F_Index
00009DC6 6100 0000                  		bsr.w	DeleteObject
00009DCA 4E75                       		rts	
00009DCC                            ; ===========================================================================
00009DCC                            ; ---------------------------------------------------------------------------
00009DCC                            ; Sub-object - missile that the	Crabmeat throws
00009DCC                            ; ---------------------------------------------------------------------------
00009DCC                            
00009DCC                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009DCC 5428 0024                  		addq.b	#2,$24(a0)
00009DD0 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009DD8 317C 0400 0002             		move.w	#$400,2(a0)
00009DDE 117C 0004 0001             		move.b	#4,1(a0)
00009DE4 117C 0003 0018             		move.b	#3,$18(a0)
00009DEA 117C 0087 0020             		move.b	#$87,$20(a0)
00009DF0 117C 0008 0019             		move.b	#8,$19(a0)
00009DF6 317C FC00 0012             		move.w	#-$400,$12(a0)
00009DFC 117C 0007 001C             		move.b	#7,$1C(a0)
00009E02                            
00009E02                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009E02 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009E08 6100 0000                  		bsr.w	AnimateSprite
00009E0C 6100 0000                  		bsr.w	ObjectFall
00009E10 6100 0000                  		bsr.w	DisplaySprite
00009E14 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E18 0640 00E0                  		addi.w	#$E0,d0
00009E1C B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009E20 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009E22 4E75                       		rts	
00009E24                            ; ===========================================================================
00009E24                            
00009E24                            Obj1F_Delete2:
00009E24 6000 0000                  		bra.w	DeleteObject
00009E28                            ; ===========================================================================
00009E28                            Ani_obj1F:
00009E28                            	include "_anim\obj1F.asm"
00009E28                            ; ---------------------------------------------------------------------------
00009E28                            ; Animation script - Crabmeat enemy
00009E28                            ; ---------------------------------------------------------------------------
00009E28 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009E2E 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009E34 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009E38 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009E3C 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009E40 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009E44 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009E4A 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009E50 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009E56 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009E5A 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009E5E                            		even
00009E5E                            		even
00009E5E                            
00009E5E                            ; ---------------------------------------------------------------------------
00009E5E                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009E5E                            ; ---------------------------------------------------------------------------
00009E5E                            Map_obj1F:
00009E5E                            	include "_maps\obj1F.asm"
00009E5E                            Map_1514:
00009E5E 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009E60 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009E62 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009E64 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009E66 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009E68 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009E6A 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009E6C 03                         Map_1514_E: 	dc.b $3
00009E6D F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E72 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E77 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E7C 03                         Map_1514_1E: 	dc.b $3
00009E7D F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E82 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E87 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E8C 03                         Map_1514_2E: 	dc.b $3
00009E8D F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E92 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E97 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E9C 03                         Map_1514_3E: 	dc.b $3
00009E9D F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009EA2 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009EA7 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009EAC 03                         Map_1514_4E: 	dc.b $3
00009EAD F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009EB2 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009EB7 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009EBC 01                         Map_1514_5E: 	dc.b $1
00009EBD F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009EC2 01                         Map_1514_64: 	dc.b $1
00009EC3 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009EC8                            	even
00009EC8                            	even
00009EC8                            
00009EC8                            ; ===========================================================================
00009EC8                            ; ---------------------------------------------------------------------------
00009EC8                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009EC8                            ; ---------------------------------------------------------------------------
00009EC8                            
00009EC8                            Obj22:					; XREF: Obj_Index
00009EC8 7000                       		moveq	#0,d0
00009ECA 1028 0024                  		move.b	$24(a0),d0
00009ECE 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009ED2 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009ED6                            ; ===========================================================================
00009ED6 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009ED8 0000                       		dc.w Obj22_Action-Obj22_Index
00009EDA 0000                       		dc.w Obj22_Delete-Obj22_Index
00009EDC                            ; ===========================================================================
00009EDC                            
00009EDC                            Obj22_Main:				; XREF: Obj22_Index
00009EDC 5428 0024                  		addq.b	#2,$24(a0)
00009EE0 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009EE8 317C 0444 0002             		move.w	#$444,2(a0)
00009EEE 117C 0004 0001             		move.b	#4,1(a0)
00009EF4 117C 0003 0018             		move.b	#3,$18(a0)
00009EFA 117C 0008 0020             		move.b	#8,$20(a0)
00009F00 117C 0018 0019             		move.b	#$18,$19(a0)
00009F06                            
00009F06                            Obj22_Action:				; XREF: Obj22_Index
00009F06 7000                       		moveq	#0,d0
00009F08 1028 0025                  		move.b	$25(a0),d0
00009F0C 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009F10 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009F14 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009F1A 6100 0000                  		bsr.w	AnimateSprite
00009F1E 6000 0000                  		bra.w	MarkObjGone
00009F22                            ; ===========================================================================
00009F22 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009F24 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009F26                            ; ===========================================================================
00009F26                            
00009F26                            Obj22_Move:				; XREF: Obj22_Index2
00009F26 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009F2A 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009F2C 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009F32 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009F34 5428 0025                  		addq.b	#2,$25(a0)
00009F38 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009F3E 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009F44 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009F4A 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009F50 6600                       		bne.s	locret_986C	; if not, branch
00009F52 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009F56                            
00009F56                            locret_986C:
00009F56 4E75                       		rts	
00009F58                            ; ===========================================================================
00009F58                            
00009F58                            Obj22_Fire:				; XREF: Obj22_Move
00009F58 6100 0000                  		bsr.w	SingleObjLoad
00009F5C 6600                       		bne.s	locret_98D0
00009F5E 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009F62 3368 0008 0008             		move.w	8(a0),8(a1)
00009F68 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F6E 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009F74 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009F7A 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009F80 303C 0018                  		move.w	#$18,d0
00009F84 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009F8A 6600                       		bne.s	loc_98AA	; if not, branch
00009F8C 4440                       		neg.w	d0
00009F8E 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009F92                            
00009F92                            loc_98AA:
00009F92 D169 0008                  		add.w	d0,8(a1)
00009F96 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009F9C 337C 000E 0032             		move.w	#$E,$32(a1)
00009FA2 2348 003C                  		move.l	a0,$3C(a1)
00009FA6 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009FAC 317C 003B 0032             		move.w	#$3B,$32(a0)
00009FB2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009FB8                            
00009FB8                            locret_98D0:
00009FB8 4E75                       		rts	
00009FBA                            ; ===========================================================================
00009FBA                            
00009FBA                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009FBA 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009FBE 6B00                       		bmi.s	Obj22_ChgDir
00009FC0 6100 0000                  		bsr.w	SpeedToPos
00009FC4 4A28 0034                  		tst.b	$34(a0)
00009FC8 6600                       		bne.s	locret_992A
00009FCA 3038 D008                  		move.w	($FFFFD008).w,d0
00009FCE 9068 0008                  		sub.w	8(a0),d0
00009FD2 6A00                       		bpl.s	Obj22_SetNrSonic
00009FD4 4440                       		neg.w	d0
00009FD6                            
00009FD6                            Obj22_SetNrSonic:
00009FD6 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009FDA 6400                       		bcc.s	locret_992A	; if not, branch
00009FDC 4A28 0001                  		tst.b	1(a0)
00009FE0 6A00                       		bpl.s	locret_992A
00009FE2 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009FE8 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009FEE 6000                       		bra.s	Obj22_Stop
00009FF0                            ; ===========================================================================
00009FF0                            
00009FF0                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009FF0 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009FF6 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009FFC 317C 003B 0032             		move.w	#59,$32(a0)
0000A002                            
0000A002                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A002 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A006 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A00C 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A012                            
0000A012                            locret_992A:
0000A012 4E75                       		rts	
0000A014                            ; ===========================================================================
0000A014                            
0000A014                            Obj22_Delete:				; XREF: Obj22_Index
0000A014 6100 0000                  		bsr.w	DeleteObject
0000A018 4E75                       		rts	
0000A01A                            ; ===========================================================================
0000A01A                            ; ---------------------------------------------------------------------------
0000A01A                            ; Object 23 - missile that Buzz	Bomber throws
0000A01A                            ; ---------------------------------------------------------------------------
0000A01A                            
0000A01A                            Obj23:					; XREF: Obj_Index
0000A01A 7000                       		moveq	#0,d0
0000A01C 1028 0024                  		move.b	$24(a0),d0
0000A020 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A024 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A028                            ; ===========================================================================
0000A028 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A02A 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A02C 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A02E 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A030 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A032                            ; ===========================================================================
0000A032                            
0000A032                            Obj23_Main:				; XREF: Obj23_Index
0000A032 5368 0032                  		subq.w	#1,$32(a0)
0000A036 6A00                       		bpl.s	Obj23_ChkCancel
0000A038 5428 0024                  		addq.b	#2,$24(a0)
0000A03C 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A044 317C 2444 0002             		move.w	#$2444,2(a0)
0000A04A 117C 0004 0001             		move.b	#4,1(a0)
0000A050 117C 0003 0018             		move.b	#3,$18(a0)
0000A056 117C 0008 0019             		move.b	#8,$19(a0)
0000A05C 0228 0003 0022             		andi.b	#3,$22(a0)
0000A062 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A066 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A068 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A06E 117C 0087 0020             		move.b	#$87,$20(a0)
0000A074 117C 0001 001C             		move.b	#1,$1C(a0)
0000A07A 6000                       		bra.s	Obj23_Animate2
0000A07C                            ; ===========================================================================
0000A07C                            
0000A07C                            Obj23_Animate:				; XREF: Obj23_Index
0000A07C 6100                       		bsr.s	Obj23_ChkCancel
0000A07E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A084 6100 0000                  		bsr.w	AnimateSprite
0000A088 6000 0000                  		bra.w	DisplaySprite
0000A08C                            ; ---------------------------------------------------------------------------
0000A08C                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A08C                            ; destroyed, and if it has, then cancel	the missile
0000A08C                            ; ---------------------------------------------------------------------------
0000A08C                            
0000A08C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A08C                            
0000A08C                            
0000A08C                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A08C 2268 003C                  		movea.l	$3C(a0),a1
0000A090 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A094 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A096 4E75                       		rts	
0000A098                            ; End of function Obj23_ChkCancel
0000A098                            
0000A098                            ; ===========================================================================
0000A098                            
0000A098                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A098 0828 0007 0022             		btst	#7,$22(a0)
0000A09E 6600                       		bne.s	Obj23_Explode
0000A0A0 117C 0087 0020             		move.b	#$87,$20(a0)
0000A0A6 117C 0001 001C             		move.b	#1,$1C(a0)
0000A0AC 6100 0000                  		bsr.w	SpeedToPos
0000A0B0 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A0B6 6100 0000                  		bsr.w	AnimateSprite
0000A0BA 6100 0000                  		bsr.w	DisplaySprite
0000A0BE 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A0C2 0640 00E0                  		addi.w	#$E0,d0
0000A0C6 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A0CA 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A0CC 4E75                       		rts	
0000A0CE                            ; ===========================================================================
0000A0CE                            
0000A0CE                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A0CE 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A0D2 117C 0000 0024             		move.b	#0,$24(a0)
0000A0D8 6000 F2D4                  		bra.w	Obj24
0000A0DC                            ; ===========================================================================
0000A0DC                            
0000A0DC                            Obj23_Delete:				; XREF: Obj23_Index
0000A0DC 6100 0000                  		bsr.w	DeleteObject
0000A0E0 4E75                       		rts	
0000A0E2                            ; ===========================================================================
0000A0E2                            
0000A0E2                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A0E2 4A28 0001                  		tst.b	1(a0)
0000A0E6 6AF4                       		bpl.s	Obj23_Delete
0000A0E8 6100 0000                  		bsr.w	SpeedToPos
0000A0EC                            
0000A0EC                            Obj23_Animate2:				; XREF: Obj23_Main
0000A0EC 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A0F2 6100 0000                  		bsr.w	AnimateSprite
0000A0F6 6100 0000                  		bsr.w	DisplaySprite
0000A0FA 4E75                       		rts	
0000A0FC                            ; ===========================================================================
0000A0FC                            Ani_obj22:
0000A0FC                            	include "_anim\obj22.asm"
0000A0FC                            ; ---------------------------------------------------------------------------
0000A0FC                            ; Animation script - Buzz Bomber enemy
0000A0FC                            ; ---------------------------------------------------------------------------
0000A0FC 0000                       		dc.w byte_9A1E-Ani_obj22
0000A0FE 0000                       		dc.w byte_9A22-Ani_obj22
0000A100 0000                       		dc.w byte_9A26-Ani_obj22
0000A102 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A106 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A10A 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A10E                            		even
0000A10E                            		even
0000A10E                            
0000A10E                            Ani_obj23:
0000A10E                            	include "_anim\obj23.asm"
0000A10E                            ; ---------------------------------------------------------------------------
0000A10E                            ; Animation script - missile that Buzz Bomber throws
0000A10E                            ; ---------------------------------------------------------------------------
0000A10E 0000                       		dc.w byte_9A2E-Ani_obj23
0000A110 0000                       		dc.w byte_9A32-Ani_obj23
0000A112 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A116 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A11A                            		even
0000A11A                            		even
0000A11A                            
0000A11A                            ; ---------------------------------------------------------------------------
0000A11A                            ; Sprite mappings - Buzz Bomber	enemy
0000A11A                            ; ---------------------------------------------------------------------------
0000A11A                            Map_obj22:
0000A11A                            	include "_maps\obj22.asm"
0000A11A                            Map_e97a:
0000A11A 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A11C 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A11E 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A120 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A122 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A124 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A126 06                         Map_e97a_C: 	dc.b $6
0000A127 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A12C F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A131 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A136 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A13B F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A140 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A145 06                         Map_e97a_2B: 	dc.b $6
0000A146 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A14B F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A150 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A155 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A15A F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A15F F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A164 07                         Map_e97a_4A: 	dc.b $7
0000A165 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A16A F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A16F F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A174 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A179 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A17E F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A183 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A188 07                         Map_e97a_6E: 	dc.b $7
0000A189 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A18E F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A193 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A198 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A19D 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A1A2 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A1A7 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A1AC 06                         Map_e97a_92: 	dc.b $6
0000A1AD F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A1B2 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A1B7 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A1BC 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A1C1 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A1C6 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A1CB 04                         Map_e97a_B1: 	dc.b $4
0000A1CC F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A1D1 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A1D6 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A1DB 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A1E0                            	even
0000A1E0                            	even
0000A1E0                            
0000A1E0                            ; ---------------------------------------------------------------------------
0000A1E0                            ; Sprite mappings - missile that Buzz Bomber throws
0000A1E0                            ; ---------------------------------------------------------------------------
0000A1E0                            Map_obj23:
0000A1E0                            	include "_maps\obj23.asm"
0000A1E0                            ; ---------------------------------------------------------------------------
0000A1E0                            ; Sprite mappings - missile that Buzz Bomber throws
0000A1E0                            ; ---------------------------------------------------------------------------
0000A1E0 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A1E4 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A1E8 01                         byte_9B0E:	dc.b 1
0000A1E9 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A1EE 01                         byte_9B14:	dc.b 1
0000A1EF F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A1F4 01                         byte_9B1A:	dc.b 1
0000A1F5 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A1FA 01                         byte_9B20:	dc.b 1
0000A1FB F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A200                            		even
0000A200                            		even
0000A200                            
0000A200                            ; ===========================================================================
0000A200                            ; ---------------------------------------------------------------------------
0000A200                            ; Object 25 - rings
0000A200                            ; ---------------------------------------------------------------------------
0000A200                            
0000A200                            Obj25:					; XREF: Obj_Index
0000A200 7000                       		moveq	#0,d0
0000A202 1028 0024                  		move.b	$24(a0),d0
0000A206 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A20A 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A20E                            ; ===========================================================================
0000A20E 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A210 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A212 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A214 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A216 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A218                            ; ---------------------------------------------------------------------------
0000A218                            ; Distances between rings (format: horizontal, vertical)
0000A218                            ; ---------------------------------------------------------------------------
0000A218 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A21A 1800                       		dc.b $18, 0		; horizontal normal
0000A21C 2000                       		dc.b $20, 0		; horizontal wide
0000A21E 0010                       		dc.b 0,	$10		; vertical tight
0000A220 0018                       		dc.b 0,	$18		; vertical normal
0000A222 0020                       		dc.b 0,	$20		; vertical wide
0000A224 1010                       		dc.b $10, $10		; diagonal
0000A226 1818                       		dc.b $18, $18
0000A228 2020                       		dc.b $20, $20
0000A22A F010                       		dc.b $F0, $10
0000A22C E818                       		dc.b $E8, $18
0000A22E E020                       		dc.b $E0, $20
0000A230 1008                       		dc.b $10, 8
0000A232 1810                       		dc.b $18, $10
0000A234 F008                       		dc.b $F0, 8
0000A236 E810                       		dc.b $E8, $10
0000A238                            ; ===========================================================================
0000A238                            
0000A238                            Obj25_Main:				; XREF: Obj25_Index
0000A238 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A23C 7000                       		moveq	#0,d0
0000A23E 1028 0023                  		move.b	$23(a0),d0
0000A242 45F2 0002                  		lea	2(a2,d0.w),a2
0000A246 1812                       		move.b	(a2),d4
0000A248 1228 0028                  		move.b	$28(a0),d1
0000A24C 1001                       		move.b	d1,d0
0000A24E 0241 0007                  		andi.w	#7,d1
0000A252 0C41 0007                  		cmpi.w	#7,d1
0000A256 6600                       		bne.s	loc_9B80
0000A258 7206                       		moveq	#6,d1
0000A25A                            
0000A25A                            loc_9B80:
0000A25A 4841                       		swap	d1
0000A25C 323C 0000                  		move.w	#0,d1
0000A260 E808                       		lsr.b	#4,d0
0000A262 D040                       		add.w	d0,d0
0000A264 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A268 4885                       		ext.w	d5
0000A26A 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A26E 4886                       		ext.w	d6
0000A270 2248                       		movea.l	a0,a1
0000A272 3428 0008                  		move.w	8(a0),d2
0000A276 3628 000C                  		move.w	$C(a0),d3
0000A27A E20C                       		lsr.b	#1,d4
0000A27C 6500                       		bcs.s	loc_9C02
0000A27E 0892 0007                  		bclr	#7,(a2)
0000A282 6000                       		bra.s	loc_9BBA
0000A284                            ; ===========================================================================
0000A284                            
0000A284                            Obj25_MakeRings:
0000A284 4841                       		swap	d1
0000A286 E20C                       		lsr.b	#1,d4
0000A288 6500                       		bcs.s	loc_9C02
0000A28A 0892 0007                  		bclr	#7,(a2)
0000A28E 6100 0000                  		bsr.w	SingleObjLoad
0000A292 6600                       		bne.s	loc_9C0E
0000A294                            
0000A294                            loc_9BBA:				; XREF: Obj25_Main
0000A294 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A298 5429 0024                  		addq.b	#2,$24(a1)
0000A29C 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A2A0 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A2A6 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A2AA 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A2B2 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A2B8 137C 0004 0001             		move.b	#4,1(a1)
0000A2BE 137C 0002 0018             		move.b	#2,$18(a1)
0000A2C4 137C 0047 0020             		move.b	#$47,$20(a1)
0000A2CA 137C 0008 0019             		move.b	#8,$19(a1)
0000A2D0 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A2D6 1341 0034                  		move.b	d1,$34(a1)
0000A2DA                            
0000A2DA                            loc_9C02:
0000A2DA 5241                       		addq.w	#1,d1
0000A2DC D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A2DE D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A2E0 4841                       		swap	d1
0000A2E2 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A2E6                            
0000A2E6                            loc_9C0E:
0000A2E6 0812 0000                  		btst	#0,(a2)
0000A2EA 6600 0000                  		bne.w	DeleteObject
0000A2EE                            
0000A2EE                            Obj25_Animate:				; XREF: Obj25_Index
0000A2EE 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A2F4 6100 0000                  		bsr.w	DisplaySprite
0000A2F8 3028 0032                  		move.w	$32(a0),d0
0000A2FC 0240 FF80                  		andi.w	#$FF80,d0
0000A300 3238 F700                  		move.w	($FFFFF700).w,d1
0000A304 0441 0080                  		subi.w	#$80,d1
0000A308 0241 FF80                  		andi.w	#$FF80,d1
0000A30C 9041                       		sub.w	d1,d0
0000A30E 0C40 0280                  		cmpi.w	#$280,d0
0000A312 6200                       		bhi.s	Obj25_Delete
0000A314 4E75                       		rts	
0000A316                            ; ===========================================================================
0000A316                            
0000A316                            Obj25_Collect:				; XREF: Obj25_Index
0000A316 5428 0024                  		addq.b	#2,$24(a0)
0000A31A 117C 0000 0020             		move.b	#0,$20(a0)
0000A320 117C 0001 0018             		move.b	#1,$18(a0)
0000A326 6100 0000                  		bsr.w	CollectRing
0000A32A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A32E 7000                       		moveq	#0,d0
0000A330 1028 0023                  		move.b	$23(a0),d0
0000A334 1228 0034                  		move.b	$34(a0),d1
0000A338 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A33C                            
0000A33C                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A33C 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A342 6100 0000                  		bsr.w	AnimateSprite
0000A346 6000 0000                  		bra.w	DisplaySprite
0000A34A                            ; ===========================================================================
0000A34A                            
0000A34A                            Obj25_Delete:				; XREF: Obj25_Index
0000A34A 6000 0000                  		bra.w	DeleteObject
0000A34E                            
0000A34E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A34E                            
0000A34E                            
0000A34E                            CollectRing:				; XREF: Obj25_Collect
0000A34E 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A352 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A358 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A35C 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A362 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A364 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A36A 6700                       		beq.s	loc_9CA4
0000A36C 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A372 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A374 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A37A 6600                       		bne.s	Obj25_PlaySnd
0000A37C                            
0000A37C                            loc_9CA4:
0000A37C 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A380 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A384 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A388                            
0000A388                            Obj25_PlaySnd:
0000A388 4EF9 0000 15C0             		jmp	(PlaySound_Special).l
0000A38E                            ; End of function CollectRing
0000A38E                            
0000A38E                            ; ===========================================================================
0000A38E                            ; ---------------------------------------------------------------------------
0000A38E                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A38E                            ; ---------------------------------------------------------------------------
0000A38E                            
0000A38E                            Obj37:					; XREF: Obj_Index
0000A38E 7000                       		moveq	#0,d0
0000A390 1028 0024                  		move.b	$24(a0),d0
0000A394 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A398 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A39C                            ; ===========================================================================
0000A39C 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A39E 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A3A0 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A3A2 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A3A4 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A3A6                            ; ===========================================================================
0000A3A6                            
0000A3A6                            Obj37_CountRings:			; XREF: Obj37_Index
0000A3A6 2248                       		movea.l	a0,a1
0000A3A8 7A00                       		moveq	#0,d5
0000A3AA 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A3AE 7020                       		moveq	#32,d0
0000A3B0 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A3B2 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A3B4 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A3B6                            
0000A3B6                            loc_9CDE:
0000A3B6 5345                       		subq.w	#1,d5
0000A3B8 383C 0288                  		move.w	#$288,d4
0000A3BC 6000                       		bra.s	Obj37_MakeRings
0000A3BE                            ; ===========================================================================
0000A3BE                            
0000A3BE                            Obj37_Loop:
0000A3BE 6100 0000                  		bsr.w	SingleObjLoad
0000A3C2 6600 0000                  		bne.w	Obj37_ResetCounter
0000A3C6                            
0000A3C6                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A3C6 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A3CA 5429 0024                  		addq.b	#2,$24(a1)
0000A3CE 137C 0008 0016             		move.b	#8,$16(a1)
0000A3D4 137C 0008 0017             		move.b	#8,$17(a1)
0000A3DA 3368 0008 0008             		move.w	8(a0),8(a1)
0000A3E0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A3E6 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A3EE 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A3F4 137C 0004 0001             		move.b	#4,1(a1)
0000A3FA 137C 0003 0018             		move.b	#3,$18(a1)
0000A400 137C 0047 0020             		move.b	#$47,$20(a1)
0000A406 137C 0008 0019             		move.b	#8,$19(a1)
0000A40C 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A412 4A44                       		tst.w	d4
0000A414 6B00                       		bmi.s	loc_9D62
0000A416 3004                       		move.w	d4,d0
0000A418 6100 88D2                  		bsr.w	CalcSine
0000A41C 3404                       		move.w	d4,d2
0000A41E E04A                       		lsr.w	#8,d2
0000A420 E560                       		asl.w	d2,d0
0000A422 E561                       		asl.w	d2,d1
0000A424 3400                       		move.w	d0,d2
0000A426 3601                       		move.w	d1,d3
0000A428 0604 0010                  		addi.b	#$10,d4
0000A42C 6400                       		bcc.s	loc_9D62
0000A42E 0444 0080                  		subi.w	#$80,d4
0000A432 6400                       		bcc.s	loc_9D62
0000A434 383C 0288                  		move.w	#$288,d4
0000A438                            
0000A438                            loc_9D62:
0000A438 3342 0010                  		move.w	d2,$10(a1)
0000A43C 3343 0012                  		move.w	d3,$12(a1)
0000A440 4442                       		neg.w	d2
0000A442 4444                       		neg.w	d4
0000A444 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A448                            
0000A448                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A448 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A44E 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A454 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A45A 303C 00C6                  		move.w	#$C6,d0
0000A45E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A464                            
0000A464                            Obj37_Bounce:				; XREF: Obj37_Index
0000A464 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A46A 6100 0000                  		bsr.w	SpeedToPos
0000A46E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A474 6B00                       		bmi.s	Obj37_ChkDel
0000A476 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A47A D007                       		add.b	d7,d0
0000A47C 0200 0003                  		andi.b	#3,d0
0000A480 6600                       		bne.s	Obj37_ChkDel
0000A482 4EB9 0000 0000             		jsr	ObjHitFloor
0000A488 4A41                       		tst.w	d1
0000A48A 6A00                       		bpl.s	Obj37_ChkDel
0000A48C D368 000C                  		add.w	d1,$C(a0)
0000A490 3028 0012                  		move.w	$12(a0),d0
0000A494 E440                       		asr.w	#2,d0
0000A496 9168 0012                  		sub.w	d0,$12(a0)
0000A49A 4468 0012                  		neg.w	$12(a0)
0000A49E                            
0000A49E                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A49E 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A4A2 6700                       		beq.s	Obj37_Delete
0000A4A4 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A4A8 0640 00E0                  		addi.w	#$E0,d0
0000A4AC B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A4B0 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A4B2 6000 0000                  		bra.w	DisplaySprite
0000A4B6                            ; ===========================================================================
0000A4B6                            
0000A4B6                            Obj37_Collect:				; XREF: Obj37_Index
0000A4B6 5428 0024                  		addq.b	#2,$24(a0)
0000A4BA 117C 0000 0020             		move.b	#0,$20(a0)
0000A4C0 117C 0001 0018             		move.b	#1,$18(a0)
0000A4C6 6100 FE86                  		bsr.w	CollectRing
0000A4CA                            
0000A4CA                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A4CA 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A4D0 6100 0000                  		bsr.w	AnimateSprite
0000A4D4 6000 0000                  		bra.w	DisplaySprite
0000A4D8                            ; ===========================================================================
0000A4D8                            
0000A4D8                            Obj37_Delete:				; XREF: Obj37_Index
0000A4D8 6000 0000                  		bra.w	DeleteObject
0000A4DC                            ; ===========================================================================
0000A4DC                            ; ---------------------------------------------------------------------------
0000A4DC                            ; Object 4B - giant ring for entry to special stage
0000A4DC                            ; ---------------------------------------------------------------------------
0000A4DC                            
0000A4DC                            Obj4B:					; XREF: Obj_Index
0000A4DC 7000                       		moveq	#0,d0
0000A4DE 1028 0024                  		move.b	$24(a0),d0
0000A4E2 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A4E6 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A4EA                            ; ===========================================================================
0000A4EA 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A4EC 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A4EE 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A4F0 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A4F2                            ; ===========================================================================
0000A4F2                            
0000A4F2                            Obj4B_Main:				; XREF: Obj4B_Index
0000A4F2 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A4FA 317C 2400 0002             		move.w	#$2400,2(a0)
0000A500 0028 0004 0001             		ori.b	#4,1(a0)
0000A506 117C 0040 0019             		move.b	#$40,$19(a0)
0000A50C 4A28 0001                  		tst.b	1(a0)
0000A510 6A00                       		bpl.s	Obj4B_Animate
0000A512 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A518 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A51C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A522 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A524 4E75                       		rts	
0000A526                            ; ===========================================================================
0000A526                            
0000A526                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A526 5428 0024                  		addq.b	#2,$24(a0)
0000A52A 117C 0002 0018             		move.b	#2,$18(a0)
0000A530 117C 0052 0020             		move.b	#$52,$20(a0)
0000A536 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A53C                            
0000A53C                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A53C 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A542 3028 0008                  		move.w	8(a0),d0
0000A546 0240 FF80                  		andi.w	#$FF80,d0
0000A54A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A54E 0441 0080                  		subi.w	#$80,d1
0000A552 0241 FF80                  		andi.w	#$FF80,d1
0000A556 9041                       		sub.w	d1,d0
0000A558 0C40 0280                  		cmpi.w	#$280,d0
0000A55C 6200 0000                  		bhi.w	DeleteObject
0000A560 6000 0000                  		bra.w	DisplaySprite
0000A564                            ; ===========================================================================
0000A564                            
0000A564                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A564 5528 0024                  		subq.b	#2,$24(a0)
0000A568 117C 0000 0020             		move.b	#0,$20(a0)
0000A56E 6100 0000                  		bsr.w	SingleObjLoad
0000A572 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A576 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A57A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A580 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A586 2348 003C                  		move.l	a0,$3C(a1)
0000A58A 3038 D008                  		move.w	($FFFFD008).w,d0
0000A58E B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A592 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A594 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A59A                            
0000A59A                            Obj4B_PlaySnd:
0000A59A 303C 00C3                  		move.w	#$C3,d0
0000A59E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A5A4 6096                       		bra.s	Obj4B_Animate
0000A5A6                            ; ===========================================================================
0000A5A6                            
0000A5A6                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A5A6 6000 0000                  		bra.w	DeleteObject
0000A5AA                            ; ===========================================================================
0000A5AA                            ; ---------------------------------------------------------------------------
0000A5AA                            ; Object 7C - flash effect when	you collect the	giant ring
0000A5AA                            ; ---------------------------------------------------------------------------
0000A5AA                            
0000A5AA                            Obj7C:					; XREF: Obj_Index
0000A5AA 7000                       		moveq	#0,d0
0000A5AC 1028 0024                  		move.b	$24(a0),d0
0000A5B0 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A5B4 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A5B8                            ; ===========================================================================
0000A5B8 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A5BA 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A5BC 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A5BE                            ; ===========================================================================
0000A5BE                            
0000A5BE                            Obj7C_Main:				; XREF: Obj7C_Index
0000A5BE 5428 0024                  		addq.b	#2,$24(a0)
0000A5C2 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A5CA 317C 2462 0002             		move.w	#$2462,2(a0)
0000A5D0 0028 0004 0001             		ori.b	#4,1(a0)
0000A5D6 117C 0000 0018             		move.b	#0,$18(a0)
0000A5DC 117C 0020 0019             		move.b	#$20,$19(a0)
0000A5E2 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A5E8                            
0000A5E8                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A5E8 6100                       		bsr.s	Obj7C_Collect
0000A5EA 3028 0008                  		move.w	8(a0),d0
0000A5EE 0240 FF80                  		andi.w	#$FF80,d0
0000A5F2 3238 F700                  		move.w	($FFFFF700).w,d1
0000A5F6 0441 0080                  		subi.w	#$80,d1
0000A5FA 0241 FF80                  		andi.w	#$FF80,d1
0000A5FE 9041                       		sub.w	d1,d0
0000A600 0C40 0280                  		cmpi.w	#$280,d0
0000A604 6200 0000                  		bhi.w	DeleteObject
0000A608 6000 0000                  		bra.w	DisplaySprite
0000A60C                            
0000A60C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A60C                            
0000A60C                            
0000A60C                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A60C 5328 001E                  		subq.b	#1,$1E(a0)
0000A610 6A00                       		bpl.s	locret_9F76
0000A612 117C 0001 001E             		move.b	#1,$1E(a0)
0000A618 5228 001A                  		addq.b	#1,$1A(a0)
0000A61C 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A622 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A624 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A62A 6600                       		bne.s	locret_9F76	; if not, branch
0000A62C 2268 003C                  		movea.l	$3C(a0),a1
0000A630 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A636 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A63C 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A642 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A646 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A64A                            
0000A64A                            locret_9F76:
0000A64A 4E75                       		rts	
0000A64C                            ; ===========================================================================
0000A64C                            
0000A64C                            Obj7C_End:				; XREF: Obj7C_Collect
0000A64C 5428 0024                  		addq.b	#2,$24(a0)
0000A650 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A656 588F                       		addq.l	#4,sp
0000A658 4E75                       		rts	
0000A65A                            ; End of function Obj7C_Collect
0000A65A                            
0000A65A                            ; ===========================================================================
0000A65A                            
0000A65A                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A65A 6000 0000                  		bra.w	DeleteObject
0000A65E                            ; ===========================================================================
0000A65E                            Ani_obj25:
0000A65E                            	include "_anim\obj25.asm"
0000A65E                            ; ---------------------------------------------------------------------------
0000A65E                            ; Animation script - ring
0000A65E                            ; ---------------------------------------------------------------------------
0000A65E 0000                       		dc.w byte_9F8C-Ani_obj25
0000A660 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A666                            		even
0000A666                            		even
0000A666                            
0000A666                            ; ---------------------------------------------------------------------------
0000A666                            ; Sprite mappings - rings
0000A666                            ; ---------------------------------------------------------------------------
0000A666                            Map_obj25:
0000A666                            	include "_maps\obj25.asm"
0000A666                            ; ---------------------------------------------------------------------------
0000A666                            ; Sprite mappings - rings
0000A666                            ; ---------------------------------------------------------------------------
0000A666 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A66A 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A66E 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A672 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A676 01                         byte_9FA2:	dc.b 1
0000A677 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A67C 01                         byte_9FA8:	dc.b 1
0000A67D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A682 01                         byte_9FAE:	dc.b 1
0000A683 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A688 01                         byte_9FB4:	dc.b 1
0000A689 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A68E 01                         byte_9FBA:	dc.b 1
0000A68F F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A694 01                         byte_9FC0:	dc.b 1
0000A695 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A69A 01                         byte_9FC6:	dc.b 1
0000A69B F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A6A0 01                         byte_9FCC:	dc.b 1
0000A6A1 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A6A6                            		even
0000A6A6                            		even
0000A6A6                            
0000A6A6                            ; ---------------------------------------------------------------------------
0000A6A6                            ; Sprite mappings - giant ring
0000A6A6                            ; ---------------------------------------------------------------------------
0000A6A6                            Map_obj4B:
0000A6A6                            	include "_maps\obj4B.asm"
0000A6A6                            ; ---------------------------------------------------------------------------
0000A6A6                            ; Sprite mappings - giant ring
0000A6A6                            ; ---------------------------------------------------------------------------
0000A6A6 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A6AA 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A6AE 0A                         byte_9FDA:	dc.b $A
0000A6AF E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A6B4 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A6B9 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A6BE E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A6C3 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A6C8 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A6CD 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A6D2 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A6D7 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A6DC 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A6E1 08                         byte_A00D:	dc.b 8
0000A6E2 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A6E7 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A6EC E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A6F1 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A6F6 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A6FB 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A700 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A705 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A70A 04                         byte_A036:	dc.b 4
0000A70B E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A710 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A715 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A71A 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A71F 08                         byte_A04B:	dc.b 8
0000A720 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A725 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A72A E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A72F F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A734 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A739 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A73E 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A743 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A748                            		even
0000A748                            		even
0000A748                            
0000A748                            ; ---------------------------------------------------------------------------
0000A748                            ; Sprite mappings - flash effect when you collect the giant ring
0000A748                            ; ---------------------------------------------------------------------------
0000A748                            Map_obj7C:
0000A748                            	include "_maps\obj7C.asm"
0000A748                            ; ---------------------------------------------------------------------------
0000A748                            ; Sprite mappings - flash effect when you collect the giant ring
0000A748                            ; ---------------------------------------------------------------------------
0000A748 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A74C 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A750 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A754 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A758 02                         byte_A084:	dc.b 2
0000A759 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A75E 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A763 04                         byte_A08F:	dc.b 4
0000A764 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A769 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A76E 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A773 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A778 04                         byte_A0A4:	dc.b 4
0000A779 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A77E E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A783 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A788 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A78D 04                         byte_A0B9:	dc.b 4
0000A78E E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A793 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A798 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A79D 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A7A2 04                         byte_A0CE:	dc.b 4
0000A7A3 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A7A8 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A7AD 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A7B2 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A7B7 04                         byte_A0E3:	dc.b 4
0000A7B8 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A7BD E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A7C2 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A7C7 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A7CC 02                         byte_A0F8:	dc.b 2
0000A7CD E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A7D2 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A7D7 04                         byte_A103:	dc.b 4
0000A7D8 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A7DD E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A7E2 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A7E7 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A7EC                            		even
0000A7EC                            		even
0000A7EC                            
0000A7EC                            ; ===========================================================================
0000A7EC                            ; ---------------------------------------------------------------------------
0000A7EC                            ; Object 26 - monitors
0000A7EC                            ; ---------------------------------------------------------------------------
0000A7EC                            
0000A7EC                            Obj26:					; XREF: Obj_Index
0000A7EC 7000                       		moveq	#0,d0
0000A7EE 1028 0024                  		move.b	$24(a0),d0
0000A7F2 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A7F6 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A7FA                            ; ===========================================================================
0000A7FA 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A7FC 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A7FE 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A800 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A802 0000                       		dc.w Obj26_Display-Obj26_Index
0000A804                            ; ===========================================================================
0000A804                            
0000A804                            Obj26_Main:				; XREF: Obj26_Index
0000A804 5428 0024                  		addq.b	#2,$24(a0)
0000A808 117C 000E 0016             		move.b	#$E,$16(a0)
0000A80E 117C 000E 0017             		move.b	#$E,$17(a0)
0000A814 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A81C 317C 0680 0002             		move.w	#$680,2(a0)
0000A822 117C 0004 0001             		move.b	#4,1(a0)
0000A828 117C 0003 0018             		move.b	#3,$18(a0)
0000A82E 117C 000F 0019             		move.b	#$F,$19(a0)
0000A834 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A838 7000                       		moveq	#0,d0
0000A83A 1028 0023                  		move.b	$23(a0),d0
0000A83E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A844 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A84A 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A84C 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A852 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A858 4E75                       		rts	
0000A85A                            ; ===========================================================================
0000A85A                            
0000A85A                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A85A 117C 0046 0020             		move.b	#$46,$20(a0)
0000A860 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A866                            
0000A866                            Obj26_Solid:				; XREF: Obj26_Index
0000A866 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A86A 6700                       		beq.s	loc_A1EC	; if not, branch
0000A86C 5500                       		subq.b	#2,d0
0000A86E 6600                       		bne.s	Obj26_Fall
0000A870 7200                       		moveq	#0,d1
0000A872 1228 0019                  		move.b	$19(a0),d1
0000A876 0641 000B                  		addi.w	#$B,d1
0000A87A 6100 D380                  		bsr.w	ExitPlatform
0000A87E 0829 0003 0022             		btst	#3,$22(a1)
0000A884 6600 0000                  		bne.w	loc_A1BC
0000A888 4228 0025                  		clr.b	$25(a0)
0000A88C 6000 0000                  		bra.w	Obj26_Animate
0000A890                            ; ===========================================================================
0000A890                            
0000A890                            loc_A1BC:				; XREF: Obj26_Solid
0000A890 363C 0010                  		move.w	#$10,d3
0000A894 3428 0008                  		move.w	8(a0),d2
0000A898 6100 D8C0                  		bsr.w	MvSonicOnPtfm
0000A89C 6000 0000                  		bra.w	Obj26_Animate
0000A8A0                            ; ===========================================================================
0000A8A0                            
0000A8A0                            Obj26_Fall:				; XREF: Obj26_Solid
0000A8A0 6100 0000                  		bsr.w	ObjectFall
0000A8A4 4EB9 0000 0000             		jsr	ObjHitFloor
0000A8AA 4A41                       		tst.w	d1
0000A8AC 6A00 0000                  		bpl.w	Obj26_Animate
0000A8B0 D368 000C                  		add.w	d1,$C(a0)
0000A8B4 4268 0012                  		clr.w	$12(a0)
0000A8B8 4228 0025                  		clr.b	$25(a0)
0000A8BC 6000 0000                  		bra.w	Obj26_Animate
0000A8C0                            ; ===========================================================================
0000A8C0                            
0000A8C0                            loc_A1EC:				; XREF: Obj26_Solid
0000A8C0 323C 001A                  		move.w	#$1A,d1
0000A8C4 343C 000F                  		move.w	#$F,d2
0000A8C8 6100 0000                  		bsr.w	Obj26_SolidSides
0000A8CC 6700 0000                  		beq.w	loc_A25C
0000A8D0 4A69 0012                  		tst.w	$12(a1)
0000A8D4 6B00                       		bmi.s	loc_A20A
0000A8D6 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A8DC 6700                       		beq.s	loc_A25C	; if yes, branch
0000A8DE                            
0000A8DE                            loc_A20A:
0000A8DE 4A41                       		tst.w	d1
0000A8E0 6A00                       		bpl.s	loc_A220
0000A8E2 9769 000C                  		sub.w	d3,$C(a1)
0000A8E6 6100 D202                  		bsr.w	loc_74AE
0000A8EA 117C 0002 0025             		move.b	#2,$25(a0)
0000A8F0 6000 0000                  		bra.w	Obj26_Animate
0000A8F4                            ; ===========================================================================
0000A8F4                            
0000A8F4                            loc_A220:
0000A8F4 4A40                       		tst.w	d0
0000A8F6 6700 0000                  		beq.w	loc_A246
0000A8FA 6B00                       		bmi.s	loc_A230
0000A8FC 4A69 0010                  		tst.w	$10(a1)
0000A900 6B00                       		bmi.s	loc_A246
0000A902 6000                       		bra.s	loc_A236
0000A904                            ; ===========================================================================
0000A904                            
0000A904                            loc_A230:
0000A904 4A69 0010                  		tst.w	$10(a1)
0000A908 6A00                       		bpl.s	loc_A246
0000A90A                            
0000A90A                            loc_A236:
0000A90A 9169 0008                  		sub.w	d0,8(a1)
0000A90E 337C 0000 0014             		move.w	#0,$14(a1)
0000A914 337C 0000 0010             		move.w	#0,$10(a1)
0000A91A                            
0000A91A                            loc_A246:
0000A91A 0829 0001 0022             		btst	#1,$22(a1)
0000A920 6600                       		bne.s	loc_A26A
0000A922 08E9 0005 0022             		bset	#5,$22(a1)
0000A928 08E8 0005 0022             		bset	#5,$22(a0)
0000A92E 6000                       		bra.s	Obj26_Animate
0000A930                            ; ===========================================================================
0000A930                            
0000A930                            loc_A25C:
0000A930 0828 0005 0022             		btst	#5,$22(a0)
0000A936 6700                       		beq.s	Obj26_Animate
0000A938 337C 0001 001C             		move.w	#1,$1C(a1)
0000A93E                            
0000A93E                            loc_A26A:
0000A93E 08A8 0005 0022             		bclr	#5,$22(a0)
0000A944 08A9 0005 0022             		bclr	#5,$22(a1)
0000A94A                            
0000A94A                            Obj26_Animate:				; XREF: Obj26_Index
0000A94A 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A950 6100 0000                  		bsr.w	AnimateSprite
0000A954                            
0000A954                            Obj26_Display:				; XREF: Obj26_Index
0000A954 6100 0000                  		bsr.w	DisplaySprite
0000A958 3028 0008                  		move.w	8(a0),d0
0000A95C 0240 FF80                  		andi.w	#$FF80,d0
0000A960 3238 F700                  		move.w	($FFFFF700).w,d1
0000A964 0441 0080                  		subi.w	#$80,d1
0000A968 0241 FF80                  		andi.w	#$FF80,d1
0000A96C 9041                       		sub.w	d1,d0
0000A96E 0C40 0280                  		cmpi.w	#$280,d0
0000A972 6200 0000                  		bhi.w	DeleteObject
0000A976 4E75                       		rts	
0000A978                            ; ===========================================================================
0000A978                            
0000A978                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A978 5428 0024                  		addq.b	#2,$24(a0)
0000A97C 117C 0000 0020             		move.b	#0,$20(a0)
0000A982 6100 0000                  		bsr.w	SingleObjLoad
0000A986 6600                       		bne.s	Obj26_Explode
0000A988 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A98C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A992 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A998 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A99E 7400                       		moveq	#0,d2	; GMZ
0000A9A0 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A9A2                            
0000A9A2                            Obj26_Explode:
0000A9A2 6100 0000                  		bsr.w	SingleObjLoad
0000A9A6 6600                       		bne.s	Obj26_SetBroken
0000A9A8 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A9AC 5429 0024                  		addq.b	#2,$24(a1)
0000A9B0 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A9B4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A9BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A9C0                            
0000A9C0                            Obj26_NextExplosion:
0000A9C0 5802                       		addq.b	#4,d2
0000A9C2 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A9C6                            
0000A9C6                            Obj26_SetBroken:
0000A9C6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A9CA 7000                       		moveq	#0,d0
0000A9CC 1028 0023                  		move.b	$23(a0),d0
0000A9D0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A9D6 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A9DC 6000 0000                  		bra.w	DisplaySprite
0000A9E0                            ; ===========================================================================
0000A9E0                            ; ---------------------------------------------------------------------------
0000A9E0                            ; Object 2E - contents of monitors
0000A9E0                            ; ---------------------------------------------------------------------------
0000A9E0                            
0000A9E0                            Obj2E:					; XREF: Obj_Index
0000A9E0 7000                       		moveq	#0,d0
0000A9E2 1028 0024                  		move.b	$24(a0),d0
0000A9E6 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A9EA 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A9EE 6000 0000                  		bra.w	DisplaySprite
0000A9F2                            ; ===========================================================================
0000A9F2 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A9F4 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A9F6 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A9F8                            ; ===========================================================================
0000A9F8                            
0000A9F8                            Obj2E_Main:				; XREF: Obj2E_Index
0000A9F8 5428 0024                  		addq.b	#2,$24(a0)
0000A9FC 317C 0680 0002             		move.w	#$680,2(a0)
0000AA02 117C 0024 0001             		move.b	#$24,1(a0)
0000AA08 117C 0003 0018             		move.b	#3,$18(a0)
0000AA0E 117C 0008 0019             		move.b	#8,$19(a0)
0000AA14 317C FD00 0012             		move.w	#-$300,$12(a0)
0000AA1A 7000                       		moveq	#0,d0
0000AA1C 1028 001C                  		move.b	$1C(a0),d0
0000AA20 5400                       		addq.b	#2,d0
0000AA22 1140 001A                  		move.b	d0,$1A(a0)
0000AA26 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AA2C D000                       		add.b	d0,d0
0000AA2E D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AA32 5249                       		addq.w	#1,a1
0000AA34 2149 0004                  		move.l	a1,4(a0)
0000AA38                            
0000AA38                            Obj2E_Move:				; XREF: Obj2E_Index
0000AA38 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AA3C 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AA40 6100 0000                  		bsr.w	SpeedToPos
0000AA44 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AA4A 4E75                       		rts	
0000AA4C                            ; ===========================================================================
0000AA4C                            
0000AA4C                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AA4C 5428 0024                  		addq.b	#2,$24(a0)
0000AA50 317C 001D 001E             		move.w	#29,$1E(a0)
0000AA56 1028 001C                  		move.b	$1C(a0),d0
0000AA5A 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AA5E 6600                       		bne.s	Obj2E_ChkSonic
0000AA60 4E75                       		rts			; Eggman monitor does nothing
0000AA62                            ; ===========================================================================
0000AA62                            
0000AA62                            Obj2E_ChkSonic:
0000AA62 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AA66 6600                       		bne.s	Obj2E_ChkShoes
0000AA68                            
0000AA68                            ExtraLife:
0000AA68 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AA6C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AA70 303C 0088                  		move.w	#$88,d0
0000AA74 4EF9 0000 15BA             		jmp	(PlaySound).l	; play extra life music
0000AA7A                            ; ===========================================================================
0000AA7A                            
0000AA7A                            Obj2E_ChkShoes:
0000AA7A 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AA7E 6600                       		bne.s	Obj2E_ChkShield
0000AA80 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AA86 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AA8C 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AA92 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AA98 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AA9E 303C 00E2                  		move.w	#$E2,d0
0000AAA2 4EF9 0000 15BA             		jmp	(PlaySound).l	; Speed	up the music
0000AAA8                            ; ===========================================================================
0000AAA8                            
0000AAA8                            Obj2E_ChkShield:
0000AAA8 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AAAC 6600                       		bne.s	Obj2E_ChkInvinc
0000AAAE 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AAB4 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AABA 303C 00AF                  		move.w	#$AF,d0
0000AABE 4EF9 0000 15BA             		jmp	(PlaySound).l	; play shield sound
0000AAC4                            ; ===========================================================================
0000AAC4                            
0000AAC4                            Obj2E_ChkInvinc:
0000AAC4 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AAC8 6600                       		bne.s	Obj2E_ChkRings
0000AACA 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AAD0 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AAD6 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AADC 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AAE2 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AAE8 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AAEE 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AAF4 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AAFA 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AB00 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AB06 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AB0A 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AB0C 303C 0087                  		move.w	#$87,d0
0000AB10 4EF9 0000 15BA             		jmp	(PlaySound).l	; play invincibility music
0000AB16                            ; ===========================================================================
0000AB16                            
0000AB16                            Obj2E_NoMusic:
0000AB16 4E75                       		rts	
0000AB18                            ; ===========================================================================
0000AB18                            
0000AB18                            Obj2E_ChkRings:
0000AB18 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AB1C 6600                       		bne.s	Obj2E_ChkS
0000AB1E 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AB24 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AB2A 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AB30 6500                       		bcs.s	Obj2E_RingSound
0000AB32 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AB38 6700 FF2E                  		beq.w	ExtraLife
0000AB3C 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AB42 6500                       		bcs.s	Obj2E_RingSound
0000AB44 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AB4A 6700 FF1C                  		beq.w	ExtraLife
0000AB4E                            
0000AB4E                            Obj2E_RingSound:
0000AB4E 303C 00B5                  		move.w	#$B5,d0
0000AB52 4EF9 0000 15BA             		jmp	(PlaySound).l	; play ring sound
0000AB58                            ; ===========================================================================
0000AB58                            
0000AB58                            Obj2E_ChkS:
0000AB58 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AB5C 6600                       		bne.s	Obj2E_ChkEnd
0000AB5E                            		; nop	
0000AB5E 7201                       		moveq	#1,d1
0000AB60 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AB64                            
0000AB64                            Obj2E_ChkEnd:
0000AB64 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AB66                            ; ===========================================================================
0000AB66                            
0000AB66                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AB66 5368 001E                  		subq.w	#1,$1E(a0)
0000AB6A 6B00 0000                  		bmi.w	DeleteObject
0000AB6E 4E75                       		rts	
0000AB70                            ; ---------------------------------------------------------------------------
0000AB70                            ; Subroutine to	make the sides of a monitor solid
0000AB70                            ; ---------------------------------------------------------------------------
0000AB70                            
0000AB70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB70                            
0000AB70                            
0000AB70                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AB70 43F8 D000                  		lea	($FFFFD000).w,a1
0000AB74 3029 0008                  		move.w	8(a1),d0
0000AB78 9068 0008                  		sub.w	8(a0),d0
0000AB7C D041                       		add.w	d1,d0
0000AB7E 6B00                       		bmi.s	loc_A4E6
0000AB80 3601                       		move.w	d1,d3
0000AB82 D643                       		add.w	d3,d3
0000AB84 B043                       		cmp.w	d3,d0
0000AB86 6200                       		bhi.s	loc_A4E6
0000AB88 1629 0016                  		move.b	$16(a1),d3
0000AB8C 4883                       		ext.w	d3
0000AB8E D443                       		add.w	d3,d2
0000AB90 3629 000C                  		move.w	$C(a1),d3
0000AB94 9668 000C                  		sub.w	$C(a0),d3
0000AB98 D642                       		add.w	d2,d3
0000AB9A 6B00                       		bmi.s	loc_A4E6
0000AB9C D442                       		add.w	d2,d2
0000AB9E B642                       		cmp.w	d2,d3
0000ABA0 6400                       		bcc.s	loc_A4E6
0000ABA2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000ABA6 6B00                       		bmi.s	loc_A4E6
0000ABA8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000ABAE 6400                       		bcc.s	loc_A4E6
0000ABB0 4A78 FE08                  		tst.w	($FFFFFE08).w
0000ABB4 6600                       		bne.s	loc_A4E6
0000ABB6 B240                       		cmp.w	d0,d1
0000ABB8 6400                       		bcc.s	loc_A4DC
0000ABBA D241                       		add.w	d1,d1
0000ABBC 9041                       		sub.w	d1,d0
0000ABBE                            
0000ABBE                            loc_A4DC:
0000ABBE 0C43 0010                  		cmpi.w	#$10,d3
0000ABC2 6500                       		bcs.s	loc_A4EA
0000ABC4                            
0000ABC4                            loc_A4E2:
0000ABC4 7201                       		moveq	#1,d1
0000ABC6 4E75                       		rts	
0000ABC8                            ; ===========================================================================
0000ABC8                            
0000ABC8                            loc_A4E6:
0000ABC8 7200                       		moveq	#0,d1
0000ABCA 4E75                       		rts	
0000ABCC                            ; ===========================================================================
0000ABCC                            
0000ABCC                            loc_A4EA:
0000ABCC 7200                       		moveq	#0,d1
0000ABCE 1228 0019                  		move.b	$19(a0),d1
0000ABD2 5841                       		addq.w	#4,d1
0000ABD4 3401                       		move.w	d1,d2
0000ABD6 D442                       		add.w	d2,d2
0000ABD8 D269 0008                  		add.w	8(a1),d1
0000ABDC 9268 0008                  		sub.w	8(a0),d1
0000ABE0 6BE2                       		bmi.s	loc_A4E2
0000ABE2 B242                       		cmp.w	d2,d1
0000ABE4 64DE                       		bcc.s	loc_A4E2
0000ABE6 72FF                       		moveq	#-1,d1
0000ABE8 4E75                       		rts	
0000ABEA                            ; End of function Obj26_SolidSides
0000ABEA                            
0000ABEA                            ; ===========================================================================
0000ABEA                            Ani_obj26:
0000ABEA                            	include "_anim\obj26.asm"
0000ABEA                            ; ---------------------------------------------------------------------------
0000ABEA                            ; Animation script - monitors
0000ABEA                            ; ---------------------------------------------------------------------------
0000ABEA 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000ABF0 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000ABF6 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000ABFC 0000                       		dc.w byte_A582-Ani_obj26
0000ABFE 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AC04 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AC10 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000AC1C 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000AC28 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AC34 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AC40 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AC4C 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AC58 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AC64 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AC6C                            		even
0000AC6C                            		even
0000AC6C                            
0000AC6C                            ; ---------------------------------------------------------------------------
0000AC6C                            ; Sprite mappings - monitors
0000AC6C                            ; ---------------------------------------------------------------------------
0000AC6C                            Map_obj26:
0000AC6C                            	include "_maps\obj26.asm"
0000AC6C                            ; ================================================================================
0000AC6C                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AC6C                            ; ================================================================================
0000AC6C                            
0000AC6C                            DATAY1U343IF3L:
0000AC6C 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AC70 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AC74 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AC78 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AC7C 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AC80 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AC84 05                         DATAY1U343IF3L_0: dc.b $5
0000AC85 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC8A 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC8F E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC94 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC99 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC9E 06                         DATAY1U343IF3L_1: dc.b $6
0000AC9F F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000ACA4 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACA9 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACAE E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACB3 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACB8 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACBD 05                         DATAY1U343IF3L_2: dc.b $5
0000ACBE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACC3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACC8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACCD 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACD2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACD7 05                         DATAY1U343IF3L_3: dc.b $5
0000ACD8 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACDD 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACE2 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACE7 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACEC 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACF1 06                         DATAY1U343IF3L_4: dc.b $6
0000ACF2 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000ACF7 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACFC 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD01 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD06 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD0B 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD10 06                         DATAY1U343IF3L_5: dc.b $6
0000AD11 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AD16 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD1B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD20 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD25 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD2A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD2F 06                         DATAY1U343IF3L_6: dc.b $6
0000AD30 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AD35 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD3A 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD3F E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD44 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD49 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD4E 06                         DATAY1U343IF3L_7: dc.b $6
0000AD4F F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AD54 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD59 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD5E E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD63 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD68 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD6D 06                         DATAY1U343IF3L_8: dc.b $6
0000AD6E F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AD73 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD78 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD7D E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD82 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD87 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD8C 06                         DATAY1U343IF3L_9: dc.b $6
0000AD8D F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AD92 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD97 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD9C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ADA1 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ADA6 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ADAB 05                         DATAY1U343IF3L_A: dc.b $5
0000ADAC E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ADB1 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ADB6 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ADBB 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ADC0 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ADC5 01                         DATAY1U343IF3L_B: dc.b $1
0000ADC6 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000ADCC 00                         	even
0000ADCC 00                         	even
0000ADCC                            
0000ADCC                            ; ===========================================================================
0000ADCC                            ; ---------------------------------------------------------------------------
0000ADCC                            ; Object 0E - Sonic on the title screen
0000ADCC                            ; ---------------------------------------------------------------------------
0000ADCC                            
0000ADCC                            Obj0E:					; XREF: Obj_Index
0000ADCC 7000                       		moveq	#0,d0
0000ADCE 1028 0024                  		move.b	$24(a0),d0
0000ADD2 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000ADD6 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000ADDA                            ; ===========================================================================
0000ADDA 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000ADDC 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000ADDE 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000ADE0 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000ADE2                            ; ===========================================================================
0000ADE2                            
0000ADE2                            Obj0E_Main:				; XREF: Obj0E_Index
0000ADE2 5428 0024                  		addq.b	#2,$24(a0)
0000ADE6 317C 00F0 0008             		move.w	#$F0,8(a0)
0000ADEC 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000ADF2 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000ADFA 317C 2300 0002             		move.w	#$2300,2(a0)
0000AE00 117C 0001 0018             		move.b	#1,$18(a0)
0000AE06 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AE0C 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AE12 6100 0000                  		bsr.w	AnimateSprite
0000AE16                            
0000AE16                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AE16 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AE1A 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AE1C 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AE20 6000 0000                  		bra.w	DisplaySprite
0000AE24                            ; ===========================================================================
0000AE24                            
0000AE24                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AE24 4E75                       		rts	
0000AE26                            ; ===========================================================================
0000AE26                            
0000AE26                            Obj0E_Move:				; XREF: Obj0E_Index
0000AE26 5168 000A                  		subq.w	#8,$A(a0)
0000AE2A 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AE30 6600                       		bne.s	Obj0E_Display
0000AE32 5428 0024                  		addq.b	#2,$24(a0)
0000AE36                            
0000AE36                            Obj0E_Display:
0000AE36 6000 0000                  		bra.w	DisplaySprite
0000AE3A                            ; ===========================================================================
0000AE3A 4E75                       		rts	
0000AE3C                            ; ===========================================================================
0000AE3C                            
0000AE3C                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AE3C 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AE42 6100 0000                  		bsr.w	AnimateSprite
0000AE46 6000 0000                  		bra.w	DisplaySprite
0000AE4A                            ; ===========================================================================
0000AE4A 4E75                       		rts	
0000AE4C                            ; ===========================================================================
0000AE4C                            ; ---------------------------------------------------------------------------
0000AE4C                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AE4C                            ; ---------------------------------------------------------------------------
0000AE4C                            
0000AE4C                            Obj0F:					; XREF: Obj_Index
0000AE4C 7000                       		moveq	#0,d0
0000AE4E 1028 0024                  		move.b	$24(a0),d0
0000AE52 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AE56 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AE5A 6000 0000                  		bra.w	DisplaySprite
0000AE5E                            ; ===========================================================================
0000AE5E 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AE60 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AE62 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AE64                            ; ===========================================================================
0000AE64                            
0000AE64                            Obj0F_Main:				; XREF: Obj0F_Index
0000AE64 5428 0024                  		addq.b	#2,$24(a0)
0000AE68 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AE6E 317C 0130 000A             		move.w	#$130,$A(a0)
0000AE74 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AE7C 317C 0200 0002             		move.w	#$200,2(a0)
0000AE82 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AE88 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AE8A 5428 0024                  		addq.b	#2,$24(a0)
0000AE8E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AE94 6600                       		bne.s	locret_A6F8	; if not, branch
0000AE96 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AE9C 317C 0170 0008             		move.w	#$170,8(a0)
0000AEA2 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AEA8                            
0000AEA8                            locret_A6F8:				; XREF: Obj0F_Index
0000AEA8 4E75                       		rts	
0000AEAA                            ; ===========================================================================
0000AEAA                            
0000AEAA                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AEAA 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AEB0 6000 0000                  		bra.w	AnimateSprite
0000AEB4                            ; ===========================================================================
0000AEB4                            Ani_obj0E:
0000AEB4                            	include "_anim\obj0E.asm"
0000AEB4                            ; ---------------------------------------------------------------------------
0000AEB4                            ; Animation script - Sonic on the title screen
0000AEB4                            ; ---------------------------------------------------------------------------
0000AEB4 0000                       		dc.w byte_A706-Ani_obj0E
0000AEB6 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AEC2                            		even
0000AEC2                            		even
0000AEC2                            
0000AEC2                            Ani_obj0F:
0000AEC2                            	include "_anim\obj0F.asm"
0000AEC2                            ; ---------------------------------------------------------------------------
0000AEC2                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AEC2                            ; ---------------------------------------------------------------------------
0000AEC2 0000                       		dc.w byte_A714-Ani_obj0F
0000AEC4 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AEC8                            		even
0000AEC8                            		even
0000AEC8                            
0000AEC8                            ; ---------------------------------------------------------------------------
0000AEC8                            ; Subroutine to	animate	a sprite using an animation script
0000AEC8                            ; ---------------------------------------------------------------------------
0000AEC8                            
0000AEC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEC8                            
0000AEC8                            
0000AEC8                            AnimateSprite:
0000AEC8 7000                       		moveq	#0,d0
0000AECA 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AECE B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AED2 6700                       		beq.s	Anim_Run	; if not, branch
0000AED4 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AED8 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AEDE 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AEE4                            
0000AEE4                            Anim_Run:
0000AEE4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AEE8 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AEEA D040                       		add.w	d0,d0
0000AEEC D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AEF0 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AEF4 7200                       		moveq	#0,d1
0000AEF6 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AEFA 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AEFE 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AF00                            
0000AF00                            Anim_Next:
0000AF00 1200                       		move.b	d0,d1
0000AF02 0200 001F                  		andi.b	#$1F,d0
0000AF06 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AF0A 1028 0022                  		move.b	$22(a0),d0
0000AF0E E719                       		rol.b	#3,d1
0000AF10 B101                       		eor.b	d0,d1
0000AF12 0201 0003                  		andi.b	#3,d1
0000AF16 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AF1C 8328 0001                  		or.b	d1,1(a0)
0000AF20 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AF24                            
0000AF24                            Anim_Wait:
0000AF24 4E75                       		rts	
0000AF26                            ; ===========================================================================
0000AF26                            
0000AF26                            Anim_End_FF:
0000AF26 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AF28 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AF2A 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AF30 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AF34 60CA                       		bra.s	Anim_Next
0000AF36                            ; ===========================================================================
0000AF36                            
0000AF36                            Anim_End_FE:
0000AF36 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AF38 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AF3A 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AF3E 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AF42 9200                       		sub.b	d0,d1
0000AF44 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AF48 60B6                       		bra.s	Anim_Next
0000AF4A                            ; ===========================================================================
0000AF4A                            
0000AF4A                            Anim_End_FD:
0000AF4A 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AF4C 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AF4E 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AF54                            
0000AF54                            Anim_End_FC:
0000AF54 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AF56 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AF58 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AF5C                            
0000AF5C                            Anim_End_FB:
0000AF5C 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AF5E 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AF60 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AF66 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AF6A                            
0000AF6A                            Anim_End_FA:
0000AF6A 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AF6C 6600                       		bne.s	Anim_End	; if not, branch
0000AF6E 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AF72                            
0000AF72                            Anim_End:
0000AF72 4E75                       		rts	
0000AF74                            ; End of function AnimateSprite
0000AF74                            
0000AF74                            ; ===========================================================================
0000AF74                            ; ---------------------------------------------------------------------------
0000AF74                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF74                            ; ---------------------------------------------------------------------------
0000AF74                            Map_obj0F:
0000AF74                            	include "_maps\obj0F.asm"
0000AF74                            ; ---------------------------------------------------------------------------
0000AF74                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF74                            ; ---------------------------------------------------------------------------
0000AF74 0000                       		dc.w byte_A7CD-Map_obj0F
0000AF76 0000                       		dc.w byte_A7CC-Map_obj0F
0000AF78 0000                       		dc.w byte_A7EB-Map_obj0F
0000AF7A 0000                       		dc.w byte_A882-Map_obj0F
0000AF7C 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AF7D 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AF82 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AF87 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AF8C 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AF91 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AF96 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AF9B 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AF9C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFA1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFA6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFAB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFB0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFB5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFBA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFBF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFC4 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFC9 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFCE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFD3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFD8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFDD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFE2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFE7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFEC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFF1 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFF6 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFFB D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B000 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B005 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B00A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B00F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B014 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B019 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B01E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B023 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B028 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B02D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B032 01                         byte_A882:	dc.b 1			; "TM"
0000B033 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B038                            		even
0000B038                            		even
0000B038                            
0000B038                            ; ---------------------------------------------------------------------------
0000B038                            ; Sprite mappings - Sonic on the title screen
0000B038                            ; ---------------------------------------------------------------------------
0000B038                            Map_obj0E:
0000B038                            	include "_maps\obj0E.asm"
0000B038                            ; ================================================================================
0000B038                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B038                            ; ================================================================================
0000B038                            
0000B038                            DATAGKI0HYDQBXP:
0000B038 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B03C 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B040 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B044 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B048 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B049 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B04E 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B053 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B058 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B05D 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B062 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B067 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B06C 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B071 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B072 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B077 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B07C 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B081 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B086 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B08B 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B090 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B095 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B09A 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B09F 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B0A4 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B0A9 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B0AA F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B0AF F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B0B4 F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B0B9 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B0BE 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B0C3 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B0C8 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B0CD 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B0D2 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B0D7 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B0DC 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B0E1 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B0E2 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B0E7 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B0EC FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B0F1 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B0F6 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B0FB 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B100 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B105 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B10A 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B10F 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B114 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B115 F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B11A F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B11F 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B124 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B129 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B12E 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B133 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B138 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B13D 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B142 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B147 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B14C 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B151 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B156 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B15B 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B160 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B165 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B166 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B16B EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B170 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B175 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B17A EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B17F 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B184 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B189 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B18E 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B193 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B198 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B19D 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B19E EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B1A3 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B1A8 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B1AD EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B1B2 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B1B7 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B1BC EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B1C1 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B1C6 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B1CB EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B1D0 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B1D5 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B1DA EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B1DF 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B1E4 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B1E9 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B1EA EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B1EF 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B1F4 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B1F9 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B1FE 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B203 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B208 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B20D 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B212 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B217 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B21C 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B221 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B226 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B22B 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B230 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B236 00                         	even
0000B236 00                         	even
0000B236                            
0000B236                            ; ===========================================================================
0000B236                            ; ---------------------------------------------------------------------------
0000B236                            ; Object 2B - Chopper enemy (GHZ)
0000B236                            ; ---------------------------------------------------------------------------
0000B236                            
0000B236                            Obj2B:					; XREF: Obj_Index
0000B236 7000                       		moveq	#0,d0
0000B238 1028 0024                  		move.b	$24(a0),d0
0000B23C 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B240 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B244 6000 0000                  		bra.w	MarkObjGone
0000B248                            ; ===========================================================================
0000B248 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B24A 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B24C                            ; ===========================================================================
0000B24C                            
0000B24C                            Obj2B_Main:				; XREF: Obj2B_Index
0000B24C 5428 0024                  		addq.b	#2,$24(a0)
0000B250 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B258 317C 047B 0002             		move.w	#$47B,2(a0)
0000B25E 117C 0004 0001             		move.b	#4,1(a0)
0000B264 117C 0004 0018             		move.b	#4,$18(a0)
0000B26A 117C 0009 0020             		move.b	#9,$20(a0)
0000B270 117C 0010 0019             		move.b	#$10,$19(a0)
0000B276 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B27C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B282                            
0000B282                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B282 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B288 6100 FC3E                  		bsr.w	AnimateSprite
0000B28C 6100 0000                  		bsr.w	SpeedToPos
0000B290 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B296 3028 0030                  		move.w	$30(a0),d0
0000B29A B068 000C                  		cmp.w	$C(a0),d0
0000B29E 6400                       		bcc.s	Obj2B_ChgAni
0000B2A0 3140 000C                  		move.w	d0,$C(a0)
0000B2A4 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B2AA                            
0000B2AA                            Obj2B_ChgAni:
0000B2AA 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B2B0 0440 00C0                  		subi.w	#$C0,d0
0000B2B4 B068 000C                  		cmp.w	$C(a0),d0
0000B2B8 6400                       		bcc.s	locret_ABB6
0000B2BA 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B2C0 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B2C4 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B2C6 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B2CC                            
0000B2CC                            locret_ABB6:
0000B2CC 4E75                       		rts	
0000B2CE                            ; ===========================================================================
0000B2CE                            Ani_obj2B:
0000B2CE                            	include "_anim\obj2B.asm"
0000B2CE                            ; ---------------------------------------------------------------------------
0000B2CE                            ; Animation script - Chopper enemy
0000B2CE                            ; ---------------------------------------------------------------------------
0000B2CE 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B2D0 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B2D2 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B2D4 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B2D8 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B2DC 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B2E0 00                         		even
0000B2E0 00                         		even
0000B2E0                            
0000B2E0                            ; ---------------------------------------------------------------------------
0000B2E0                            ; Sprite mappings - Chopper enemy (GHZ)
0000B2E0                            ; ---------------------------------------------------------------------------
0000B2E0                            Map_obj2B:
0000B2E0                            	include "_maps\obj2B.asm"
0000B2E0                            Map_1ff1:
0000B2E0 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B2E2 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B2E4 02                         Map_1ff1_4: 	dc.b $2
0000B2E5 E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B2EA 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B2EF 02                         Map_1ff1_F: 	dc.b $2
0000B2F0 E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B2F5 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B2FA                            	even
0000B2FA                            	even
0000B2FA                            
0000B2FA                            ; ===========================================================================
0000B2FA                            ; ---------------------------------------------------------------------------
0000B2FA                            ; Object 2C - Jaws enemy (LZ)
0000B2FA                            ; ---------------------------------------------------------------------------
0000B2FA                            
0000B2FA                            Obj2C:					; XREF: Obj_Index
0000B2FA 7000                       		moveq	#0,d0
0000B2FC 1028 0024                  		move.b	$24(a0),d0
0000B300 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B304 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B308                            ; ===========================================================================
0000B308 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B30A 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B30C                            ; ===========================================================================
0000B30C                            
0000B30C                            Obj2C_Main:				; XREF: Obj2C_Index
0000B30C 5428 0024                  		addq.b	#2,$24(a0)
0000B310 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B318 317C 2486 0002             		move.w	#$2486,2(a0)
0000B31E 0028 0004 0001             		ori.b	#4,1(a0)
0000B324 117C 000A 0020             		move.b	#$A,$20(a0)
0000B32A 117C 0004 0018             		move.b	#4,$18(a0)
0000B330 117C 0010 0019             		move.b	#$10,$19(a0)
0000B336 7000                       		moveq	#0,d0
0000B338 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B33C ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B33E 5340                       		subq.w	#1,d0
0000B340 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B344 3140 0032                  		move.w	d0,$32(a0)
0000B348 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B34E 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B354 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B356 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B35A                            
0000B35A                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B35A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B35E 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B360 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B366 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B36A 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B370 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B376                            
0000B376                            Obj2C_Animate:
0000B376 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B37C 6100 FB4A                  		bsr.w	AnimateSprite
0000B380 6100 0000                  		bsr.w	SpeedToPos
0000B384 6000 0000                  		bra.w	MarkObjGone
0000B388                            ; ===========================================================================
0000B388                            Ani_obj2C:
0000B388                            	include "_anim\obj2C.asm"
0000B388                            ; ---------------------------------------------------------------------------
0000B388                            ; Animation script - Jaws enemy
0000B388                            ; ---------------------------------------------------------------------------
0000B388 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B38A 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B390                            		even
0000B390                            		even
0000B390                            
0000B390                            ; ---------------------------------------------------------------------------
0000B390                            ; Sprite mappings - Jaws enemy (LZ)
0000B390                            ; ---------------------------------------------------------------------------
0000B390                            Map_obj2C:
0000B390                            	include "_maps\obj2C.asm"
0000B390                            ; ---------------------------------------------------------------------------
0000B390                            ; Sprite mappings - Jaws enemy (LZ)
0000B390                            ; ---------------------------------------------------------------------------
0000B390 0000                       		dc.w byte_AC78-Map_obj2C
0000B392 0000                       		dc.w byte_AC83-Map_obj2C
0000B394 0000                       		dc.w byte_AC8E-Map_obj2C
0000B396 0000                       		dc.w byte_AC99-Map_obj2C
0000B398 02                         byte_AC78:	dc.b 2
0000B399 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B39E F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B3A3 02                         byte_AC83:	dc.b 2
0000B3A4 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B3A9 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B3AE 02                         byte_AC8E:	dc.b 2
0000B3AF F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B3B4 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B3B9 02                         byte_AC99:	dc.b 2
0000B3BA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B3BF F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B3C4                            		even
0000B3C4                            		even
0000B3C4                            
0000B3C4                            ; ===========================================================================
0000B3C4                            ; ---------------------------------------------------------------------------
0000B3C4                            ; Object 2D - Burrobot enemy (LZ)
0000B3C4                            ; ---------------------------------------------------------------------------
0000B3C4                            
0000B3C4                            Obj2D:					; XREF: Obj_Index
0000B3C4 7000                       		moveq	#0,d0
0000B3C6 1028 0024                  		move.b	$24(a0),d0
0000B3CA 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B3CE 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B3D2                            ; ===========================================================================
0000B3D2 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B3D4 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B3D6                            ; ===========================================================================
0000B3D6                            
0000B3D6                            Obj2D_Main:				; XREF: Obj2D_Index
0000B3D6 5428 0024                  		addq.b	#2,$24(a0)
0000B3DA 117C 0013 0016             		move.b	#$13,$16(a0)
0000B3E0 117C 0008 0017             		move.b	#8,$17(a0)
0000B3E6 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B3EE 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B3F4 0028 0004 0001             		ori.b	#4,1(a0)
0000B3FA 117C 0004 0018             		move.b	#4,$18(a0)
0000B400 117C 0005 0020             		move.b	#5,$20(a0)
0000B406 117C 000C 0019             		move.b	#$C,$19(a0)
0000B40C 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B410 117C 0002 001C             		move.b	#2,$1C(a0)
0000B416                            
0000B416                            Obj2D_Action:				; XREF: Obj2D_Index
0000B416 7000                       		moveq	#0,d0
0000B418 1028 0025                  		move.b	$25(a0),d0
0000B41C 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B420 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B424 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B42A 6100 FA9C                  		bsr.w	AnimateSprite
0000B42E 6000 0000                  		bra.w	MarkObjGone
0000B432                            ; ===========================================================================
0000B432 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B434 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B436 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B438 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B43A                            ; ===========================================================================
0000B43A                            
0000B43A                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B43A 5368 0030                  		subq.w	#1,$30(a0)
0000B43E 6A00                       		bpl.s	locret_AD42
0000B440 5428 0025                  		addq.b	#2,$25(a0)
0000B444 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B44A 317C 0080 0010             		move.w	#$80,$10(a0)
0000B450 117C 0001 001C             		move.b	#1,$1C(a0)
0000B456 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B45C 6700                       		beq.s	locret_AD42
0000B45E 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B462                            
0000B462                            locret_AD42:
0000B462 4E75                       		rts	
0000B464                            ; ===========================================================================
0000B464                            
0000B464                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B464 5368 0030                  		subq.w	#1,$30(a0)
0000B468 6B00                       		bmi.s	loc_AD84
0000B46A 6100 0000                  		bsr.w	SpeedToPos
0000B46E 0868 0000 0032             		bchg	#0,$32(a0)
0000B474 6600                       		bne.s	loc_AD78
0000B476 3628 0008                  		move.w	8(a0),d3
0000B47A 0643 000C                  		addi.w	#$C,d3
0000B47E 0828 0000 0022             		btst	#0,$22(a0)
0000B484 6600                       		bne.s	loc_AD6A
0000B486 0443 0018                  		subi.w	#$18,d3
0000B48A                            
0000B48A                            loc_AD6A:
0000B48A 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B490 0C41 000C                  		cmpi.w	#$C,d1
0000B494 6C00                       		bge.s	loc_AD84
0000B496 4E75                       		rts	
0000B498                            ; ===========================================================================
0000B498                            
0000B498                            loc_AD78:				; XREF: Obj2D_Move
0000B498 4EB9 0000 0000             		jsr	ObjHitFloor
0000B49E D368 000C                  		add.w	d1,$C(a0)
0000B4A2 4E75                       		rts	
0000B4A4                            ; ===========================================================================
0000B4A4                            
0000B4A4                            loc_AD84:				; XREF: Obj2D_Move
0000B4A4 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B4AA 6700                       		beq.s	loc_ADA4
0000B4AC 5528 0025                  		subq.b	#2,$25(a0)
0000B4B0 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B4B6 317C 0000 0010             		move.w	#0,$10(a0)
0000B4BC 117C 0000 001C             		move.b	#0,$1C(a0)
0000B4C2 4E75                       		rts	
0000B4C4                            ; ===========================================================================
0000B4C4                            
0000B4C4                            loc_ADA4:
0000B4C4 5428 0025                  		addq.b	#2,$25(a0)
0000B4C8 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B4CE 117C 0002 001C             		move.b	#2,$1C(a0)
0000B4D4 4E75                       		rts	
0000B4D6                            ; ===========================================================================
0000B4D6                            
0000B4D6                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B4D6 6100 0000                  		bsr.w	SpeedToPos
0000B4DA 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B4E0 6B00                       		bmi.s	locret_ADF0
0000B4E2 117C 0003 001C             		move.b	#3,$1C(a0)
0000B4E8 4EB9 0000 0000             		jsr	ObjHitFloor
0000B4EE 4A41                       		tst.w	d1
0000B4F0 6A00                       		bpl.s	locret_ADF0
0000B4F2 D368 000C                  		add.w	d1,$C(a0)
0000B4F6 317C 0000 0012             		move.w	#0,$12(a0)
0000B4FC 117C 0001 001C             		move.b	#1,$1C(a0)
0000B502 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B508 5528 0025                  		subq.b	#2,$25(a0)
0000B50C 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B510                            
0000B510                            locret_ADF0:
0000B510 4E75                       		rts	
0000B512                            ; ===========================================================================
0000B512                            
0000B512                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B512 343C 0060                  		move.w	#$60,d2
0000B516 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B51A 6400                       		bcc.s	locret_AE20
0000B51C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B520 9068 000C                  		sub.w	$C(a0),d0
0000B524 6400                       		bcc.s	locret_AE20
0000B526 0C40 FF80                  		cmpi.w	#-$80,d0
0000B52A 6500                       		bcs.s	locret_AE20
0000B52C 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B530 6600                       		bne.s	locret_AE20
0000B532 5528 0025                  		subq.b	#2,$25(a0)
0000B536 3141 0010                  		move.w	d1,$10(a0)
0000B53A 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B540                            
0000B540                            locret_AE20:
0000B540 4E75                       		rts	
0000B542                            
0000B542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B542                            
0000B542                            
0000B542                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B542 323C 0080                  		move.w	#$80,d1
0000B546 08E8 0000 0022             		bset	#0,$22(a0)
0000B54C 3038 D008                  		move.w	($FFFFD008).w,d0
0000B550 9068 0008                  		sub.w	8(a0),d0
0000B554 6400                       		bcc.s	loc_AE40
0000B556 4440                       		neg.w	d0
0000B558 4441                       		neg.w	d1
0000B55A 08A8 0000 0022             		bclr	#0,$22(a0)
0000B560                            
0000B560                            loc_AE40:
0000B560 B042                       		cmp.w	d2,d0
0000B562 4E75                       		rts	
0000B564                            ; End of function Obj2D_ChkSonic2
0000B564                            
0000B564                            ; ===========================================================================
0000B564                            Ani_obj2D:
0000B564                            	include "_anim\obj2D.asm"
0000B564                            ; ---------------------------------------------------------------------------
0000B564                            ; Animation script - Burrobot enemy but craig
0000B564                            ; ---------------------------------------------------------------------------
0000B564 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B566 0000                       		dc.w byte_AE50-Ani_obj2D
0000B568 0000                       		dc.w byte_AE54-Ani_obj2D
0000B56A 0000                       		dc.w byte_AE58-Ani_obj2D
0000B56C 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B56F 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B573 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B581 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B584                            		even
0000B584                            		even
0000B584                            
0000B584                            ; ---------------------------------------------------------------------------
0000B584                            ; Sprite mappings - Burrobot enemy (LZ)
0000B584                            ; ---------------------------------------------------------------------------
0000B584                            Map_obj2D:
0000B584                            	include "_maps\obj2D.asm"
0000B584                            Map_e3a3:
0000B584 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B586 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B588 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B58A 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B58C 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B58E 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B590 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B592 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B594 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B596 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B598 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B59A 02                         Map_e3a3_16: 	dc.b $2
0000B59B EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B5A0 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B5A5 02                         Map_e3a3_21: 	dc.b $2
0000B5A6 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B5AB 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B5B0 02                         Map_e3a3_2C: 	dc.b $2
0000B5B1 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B5B6 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B5BB 02                         Map_e3a3_37: 	dc.b $2
0000B5BC EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B5C1 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B5C6 02                         Map_e3a3_42: 	dc.b $2
0000B5C7 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B5CC FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B5D1 02                         Map_e3a3_4D: 	dc.b $2
0000B5D2 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B5D7 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B5DC 02                         Map_e3a3_58: 	dc.b $2
0000B5DD EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B5E2 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B5E7 02                         Map_e3a3_63: 	dc.b $2
0000B5E8 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B5ED FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B5F2 02                         Map_e3a3_6E: 	dc.b $2
0000B5F3 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B5F8 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B5FD 02                         Map_e3a3_79: 	dc.b $2
0000B5FE EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B603 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B608 02                         Map_e3a3_84: 	dc.b $2
0000B609 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B60E 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B614 00                         	even
0000B614 00                         	even
0000B614                            
0000B614                            ; ===========================================================================
0000B614                            ; ---------------------------------------------------------------------------
0000B614                            ; Object 2F - large moving platforms (MZ)
0000B614                            ; ---------------------------------------------------------------------------
0000B614                            
0000B614                            Obj2F:					; XREF: Obj_Index
0000B614 7000                       		moveq	#0,d0
0000B616 1028 0024                  		move.b	$24(a0),d0
0000B61A 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B61E 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B622                            ; ===========================================================================
0000B622 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B624 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B626                            
0000B626 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B628 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B62A 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B62C 0140                       		dc.b 1,	$40
0000B62E 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B630 0220                       		dc.b 2,	$20
0000B632                            ; ===========================================================================
0000B632                            
0000B632                            Obj2F_Main:				; XREF: Obj2F_Index
0000B632 5428 0024                  		addq.b	#2,$24(a0)
0000B636 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B63E 317C C000 0002             		move.w	#$C000,2(a0)
0000B644 117C 0004 0001             		move.b	#4,1(a0)
0000B64A 117C 0005 0018             		move.b	#5,$18(a0)
0000B650 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B656 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B65C 7000                       		moveq	#0,d0
0000B65E 1028 0028                  		move.b	$28(a0),d0
0000B662 E448                       		lsr.w	#2,d0
0000B664 0240 001C                  		andi.w	#$1C,d0
0000B668 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B66C 3019                       		move.w	(a1)+,d0
0000B66E 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B672 214A 0030                  		move.l	a2,$30(a0)
0000B676 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B67A 1151 0019                  		move.b	(a1),$19(a0)
0000B67E 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B684 117C 0040 0016             		move.b	#$40,$16(a0)
0000B68A 08E8 0004 0001             		bset	#4,1(a0)
0000B690                            
0000B690                            Obj2F_Action:				; XREF: Obj2F_Index
0000B690 6100 0000                  		bsr.w	Obj2F_Types
0000B694 4A28 0025                  		tst.b	$25(a0)
0000B698 6700                       		beq.s	Obj2F_Solid
0000B69A 7200                       		moveq	#0,d1
0000B69C 1228 0019                  		move.b	$19(a0),d1
0000B6A0 0641 000B                  		addi.w	#$B,d1
0000B6A4 6100 C556                  		bsr.w	ExitPlatform
0000B6A8 0829 0003 0022             		btst	#3,$22(a1)
0000B6AE 6600 0000                  		bne.w	Obj2F_Slope
0000B6B2 4228 0025                  		clr.b	$25(a0)
0000B6B6 6000                       		bra.s	Obj2F_Display
0000B6B8                            ; ===========================================================================
0000B6B8                            
0000B6B8                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B6B8 7200                       		moveq	#0,d1
0000B6BA 1228 0019                  		move.b	$19(a0),d1
0000B6BE 0641 000B                  		addi.w	#$B,d1
0000B6C2 2468 0030                  		movea.l	$30(a0),a2
0000B6C6 3428 0008                  		move.w	8(a0),d2
0000B6CA 6100 D520                  		bsr.w	SlopeObject2
0000B6CE 6000                       		bra.s	Obj2F_Display
0000B6D0                            ; ===========================================================================
0000B6D0                            
0000B6D0                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B6D0 7200                       		moveq	#0,d1
0000B6D2 1228 0019                  		move.b	$19(a0),d1
0000B6D6 0641 000B                  		addi.w	#$B,d1
0000B6DA 343C 0020                  		move.w	#$20,d2
0000B6DE 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B6E4 6600                       		bne.s	loc_AF8E
0000B6E6 343C 0030                  		move.w	#$30,d2
0000B6EA                            
0000B6EA                            loc_AF8E:
0000B6EA 2468 0030                  		movea.l	$30(a0),a2
0000B6EE 6100 0000                  		bsr.w	SolidObject2F
0000B6F2                            
0000B6F2                            Obj2F_Display:				; XREF: Obj2F_Action
0000B6F2 6100 0000                  		bsr.w	DisplaySprite
0000B6F6 6000 0000                  		bra.w	Obj2F_ChkDel
0000B6FA                            
0000B6FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B6FA                            
0000B6FA                            
0000B6FA                            Obj2F_Types:				; XREF: Obj2F_Action
0000B6FA 7000                       		moveq	#0,d0
0000B6FC 1028 0028                  		move.b	$28(a0),d0
0000B700 0240 0007                  		andi.w	#7,d0
0000B704 D040                       		add.w	d0,d0
0000B706 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B70A 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B70E                            ; End of function Obj2F_Types
0000B70E                            
0000B70E                            ; ===========================================================================
0000B70E 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B710 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B712 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B714 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B716 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B718 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B71A                            ; ===========================================================================
0000B71A                            
0000B71A                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B71A 4E75                       		rts			; type 00 platform doesn't move
0000B71C                            ; ===========================================================================
0000B71C                            
0000B71C                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B71C 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B720 323C 0020                  		move.w	#$20,d1
0000B724 6000                       		bra.s	Obj2F_Move
0000B726                            ; ===========================================================================
0000B726                            
0000B726                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B726 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B72A 323C 0030                  		move.w	#$30,d1
0000B72E 6000                       		bra.s	Obj2F_Move
0000B730                            ; ===========================================================================
0000B730                            
0000B730                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B730 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B734 323C 0040                  		move.w	#$40,d1
0000B738 6000                       		bra.s	Obj2F_Move
0000B73A                            ; ===========================================================================
0000B73A                            
0000B73A                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B73A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B73E 323C 0060                  		move.w	#$60,d1
0000B742                            
0000B742                            Obj2F_Move:
0000B742 0828 0003 0028             		btst	#3,$28(a0)
0000B748 6700                       		beq.s	loc_AFF2
0000B74A 4440                       		neg.w	d0
0000B74C D041                       		add.w	d1,d0
0000B74E                            
0000B74E                            loc_AFF2:
0000B74E 3228 002C                  		move.w	$2C(a0),d1
0000B752 9240                       		sub.w	d0,d1
0000B754 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B758 4E75                       		rts	
0000B75A                            ; ===========================================================================
0000B75A                            
0000B75A                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B75A 1028 0034                  		move.b	$34(a0),d0
0000B75E 4A28 0025                  		tst.b	$25(a0)
0000B762 6600                       		bne.s	loc_B010
0000B764 5500                       		subq.b	#2,d0
0000B766 6400                       		bcc.s	loc_B01C
0000B768 7000                       		moveq	#0,d0
0000B76A 6000                       		bra.s	loc_B01C
0000B76C                            ; ===========================================================================
0000B76C                            
0000B76C                            loc_B010:
0000B76C 5800                       		addq.b	#4,d0
0000B76E 0C00 0040                  		cmpi.b	#$40,d0
0000B772 6500                       		bcs.s	loc_B01C
0000B774 103C 0040                  		move.b	#$40,d0
0000B778                            
0000B778                            loc_B01C:
0000B778 1140 0034                  		move.b	d0,$34(a0)
0000B77C 4EB9 0000 2CEC             		jsr	(CalcSine).l
0000B782 E848                       		lsr.w	#4,d0
0000B784 3200                       		move.w	d0,d1
0000B786 D068 002C                  		add.w	$2C(a0),d0
0000B78A 3140 000C                  		move.w	d0,$C(a0)
0000B78E 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B794 6600                       		bne.s	loc_B07A
0000B796 4A28 0035                  		tst.b	$35(a0)
0000B79A 6600                       		bne.s	loc_B07A
0000B79C 117C 0001 0035             		move.b	#1,$35(a0)
0000B7A2 6100 0000                  		bsr.w	SingleObjLoad2
0000B7A6 6600                       		bne.s	loc_B07A
0000B7A8 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B7AC 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7B2 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B7B8 5069 002C                  		addq.w	#8,$2C(a1)
0000B7BC 5769 002C                  		subq.w	#3,$2C(a1)
0000B7C0 0469 0040 0008             		subi.w	#$40,8(a1)
0000B7C6 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B7CC 2348 0038                  		move.l	a0,$38(a1)
0000B7D0 2448                       		movea.l	a0,a2
0000B7D2 6100                       		bsr.s	sub_B09C
0000B7D4                            
0000B7D4                            loc_B07A:
0000B7D4 7400                       		moveq	#0,d2
0000B7D6 45E8 0036                  		lea	$36(a0),a2
0000B7DA 141A                       		move.b	(a2)+,d2
0000B7DC 5302                       		subq.b	#1,d2
0000B7DE 6500                       		bcs.s	locret_B09A
0000B7E0                            
0000B7E0                            loc_B086:
0000B7E0 7000                       		moveq	#0,d0
0000B7E2 101A                       		move.b	(a2)+,d0
0000B7E4 ED48                       		lsl.w	#6,d0
0000B7E6 0640 D000                  		addi.w	#-$3000,d0
0000B7EA 3240                       		movea.w	d0,a1
0000B7EC 3341 003C                  		move.w	d1,$3C(a1)
0000B7F0 51CA FFEE                  		dbf	d2,loc_B086
0000B7F4                            
0000B7F4                            locret_B09A:
0000B7F4 4E75                       		rts	
0000B7F6                            
0000B7F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B7F6                            
0000B7F6                            
0000B7F6                            sub_B09C:
0000B7F6 45EA 0036                  		lea	$36(a2),a2
0000B7FA 7000                       		moveq	#0,d0
0000B7FC 1012                       		move.b	(a2),d0
0000B7FE 5212                       		addq.b	#1,(a2)
0000B800 45F2 0001                  		lea	1(a2,d0.w),a2
0000B804 3009                       		move.w	a1,d0
0000B806 0440 D000                  		subi.w	#-$3000,d0
0000B80A EC48                       		lsr.w	#6,d0
0000B80C 0240 007F                  		andi.w	#$7F,d0
0000B810 1480                       		move.b	d0,(a2)
0000B812 4E75                       		rts	
0000B814                            ; End of function sub_B09C
0000B814                            
0000B814                            ; ===========================================================================
0000B814                            
0000B814                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B814 4A28 0035                  		tst.b	$35(a0)
0000B818 6700                       		beq.s	loc_B0C6
0000B81A 4A28 0001                  		tst.b	1(a0)
0000B81E 6A00                       		bpl.s	Obj2F_DelFlames
0000B820                            
0000B820                            loc_B0C6:
0000B820 3028 002A                  		move.w	$2A(a0),d0
0000B824 0240 FF80                  		andi.w	#$FF80,d0
0000B828 3238 F700                  		move.w	($FFFFF700).w,d1
0000B82C 0441 0080                  		subi.w	#$80,d1
0000B830 0241 FF80                  		andi.w	#$FF80,d1
0000B834 9041                       		sub.w	d1,d0
0000B836 0C40 0280                  		cmpi.w	#$280,d0
0000B83A 6200 0000                  		bhi.w	DeleteObject
0000B83E 4E75                       		rts	
0000B840                            ; ===========================================================================
0000B840                            
0000B840                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B840 7400                       		moveq	#0,d2
0000B842                            
0000B842                            loc_B0E8:
0000B842 45E8 0036                  		lea	$36(a0),a2
0000B846 1412                       		move.b	(a2),d2
0000B848 421A                       		clr.b	(a2)+
0000B84A 5302                       		subq.b	#1,d2
0000B84C 6500                       		bcs.s	locret_B116
0000B84E                            
0000B84E                            loc_B0F4:
0000B84E 7000                       		moveq	#0,d0
0000B850 1012                       		move.b	(a2),d0
0000B852 421A                       		clr.b	(a2)+
0000B854 ED48                       		lsl.w	#6,d0
0000B856 0640 D000                  		addi.w	#-$3000,d0
0000B85A 3240                       		movea.w	d0,a1
0000B85C 6100 0000                  		bsr.w	DeleteObject2
0000B860 51CA FFEC                  		dbf	d2,loc_B0F4
0000B864 117C 0000 0035             		move.b	#0,$35(a0)
0000B86A 117C 0000 0034             		move.b	#0,$34(a0)
0000B870                            
0000B870                            locret_B116:
0000B870 4E75                       		rts	
0000B872                            ; ===========================================================================
0000B872                            ; ---------------------------------------------------------------------------
0000B872                            ; Collision data for large moving platforms (MZ)
0000B872                            ; ---------------------------------------------------------------------------
0000B872                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B8BE                            		even
0000B8BE                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B8EA                            		even
0000B8EA                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B936                            		even
0000B936                            ; ===========================================================================
0000B936                            ; ---------------------------------------------------------------------------
0000B936                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B936                            ; (appears when	you walk on sinking platforms)
0000B936                            ; ---------------------------------------------------------------------------
0000B936                            
0000B936                            Obj35:					; XREF: Obj_Index
0000B936 7000                       		moveq	#0,d0
0000B938 1028 0024                  		move.b	$24(a0),d0
0000B93C 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B940 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B944                            ; ===========================================================================
0000B944 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B946 0000                       		dc.w loc_B238-Obj35_Index
0000B948 0000                       		dc.w Obj35_Move-Obj35_Index
0000B94A                            ; ===========================================================================
0000B94A                            
0000B94A                            Obj35_Main:				; XREF: Obj35_Index
0000B94A 5428 0024                  		addq.b	#2,$24(a0)
0000B94E 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B956 317C 0345 0002             		move.w	#$345,2(a0)
0000B95C 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B962 117C 0004 0001             		move.b	#4,1(a0)
0000B968 117C 0001 0018             		move.b	#1,$18(a0)
0000B96E 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B974 117C 0008 0019             		move.b	#8,$19(a0)
0000B97A 303C 00C8                  		move.w	#$C8,d0
0000B97E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000B984 4A28 0028                  		tst.b	$28(a0)
0000B988 6700                       		beq.s	loc_B238
0000B98A 5428 0024                  		addq.b	#2,$24(a0)
0000B98E 6000 0000                  		bra.w	Obj35_Move
0000B992                            ; ===========================================================================
0000B992                            
0000B992                            loc_B238:				; XREF: Obj35_Index
0000B992 2268 0030                  		movea.l	$30(a0),a1
0000B996 3228 0008                  		move.w	8(a0),d1
0000B99A 9268 002A                  		sub.w	$2A(a0),d1
0000B99E 0641 000C                  		addi.w	#$C,d1
0000B9A2 3001                       		move.w	d1,d0
0000B9A4 E248                       		lsr.w	#1,d0
0000B9A6 1031 0000                  		move.b	(a1,d0.w),d0
0000B9AA 4440                       		neg.w	d0
0000B9AC D068 002C                  		add.w	$2C(a0),d0
0000B9B0 3400                       		move.w	d0,d2
0000B9B2 D068 003C                  		add.w	$3C(a0),d0
0000B9B6 3140 000C                  		move.w	d0,$C(a0)
0000B9BA 0C41 0084                  		cmpi.w	#$84,d1
0000B9BE 6400                       		bcc.s	loc_B2B0
0000B9C0 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B9C8 0C41 0080                  		cmpi.w	#$80,d1
0000B9CC 6400                       		bcc.s	loc_B2B0
0000B9CE 2028 0008                  		move.l	8(a0),d0
0000B9D2 0680 0008 0000             		addi.l	#$80000,d0
0000B9D8 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B9DE 6600                       		bne.s	loc_B2B0
0000B9E0 6100 0000                  		bsr.w	SingleObjLoad2
0000B9E4 6600                       		bne.s	loc_B2B0
0000B9E6 12BC 0035                  		move.b	#$35,0(a1)
0000B9EA 3368 0008 0008             		move.w	8(a0),8(a1)
0000B9F0 3342 002C                  		move.w	d2,$2C(a1)
0000B9F4 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B9FA 137C 0001 0028             		move.b	#1,$28(a1)
0000BA00 2468 0038                  		movea.l	$38(a0),a2
0000BA04 6100 FDF0                  		bsr.w	sub_B09C
0000BA08                            
0000BA08                            loc_B2B0:
0000BA08 6000                       		bra.s	Obj35_Animate
0000BA0A                            ; ===========================================================================
0000BA0A                            
0000BA0A                            Obj35_Move:				; XREF: Obj35_Index
0000BA0A 3028 002C                  		move.w	$2C(a0),d0
0000BA0E D068 003C                  		add.w	$3C(a0),d0
0000BA12 3140 000C                  		move.w	d0,$C(a0)
0000BA16                            
0000BA16                            Obj35_Animate:				; XREF: loc_B238
0000BA16 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BA1C 6100 F4AA                  		bsr.w	AnimateSprite
0000BA20 6000 0000                  		bra.w	DisplaySprite
0000BA24                            ; ===========================================================================
0000BA24                            Ani_obj35:
0000BA24                            	include "_anim\obj35.asm"
0000BA24                            ; ---------------------------------------------------------------------------
0000BA24                            ; Animation script - fireball that sits on the	floor (MZ)
0000BA24                            ; ---------------------------------------------------------------------------
0000BA24 0000                       		dc.w byte_B2CE-Ani_obj35
0000BA26 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BA2C                            		even
0000BA2C                            		even
0000BA2C                            
0000BA2C                            ; ---------------------------------------------------------------------------
0000BA2C                            ; Sprite mappings - large moving platforms (MZ)
0000BA2C                            ; ---------------------------------------------------------------------------
0000BA2C                            Map_obj2F:
0000BA2C                            	include "_maps\obj2F.asm"
0000BA2C                            ; ---------------------------------------------------------------------------
0000BA2C                            ; Sprite mappings - large moving platforms (MZ)
0000BA2C                            ; ---------------------------------------------------------------------------
0000BA2C 0000                       		dc.w byte_B2DA-Map_obj2F
0000BA2E 0000                       		dc.w byte_B31C-Map_obj2F
0000BA30 0000                       		dc.w byte_B34F-Map_obj2F
0000BA32 0D                         byte_B2DA:	dc.b $D
0000BA33 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BA38 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BA3D 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA42 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BA47 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BA4C F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA51 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BA56 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BA5B F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BA60 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BA65 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BA6A D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BA6F F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BA74 0A                         byte_B31C:	dc.b $A
0000BA75 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BA7A F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BA7F 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA84 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BA89 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BA8E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA93 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BA98 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BA9D C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BAA2 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BAA7 06                         byte_B34F:	dc.b 6
0000BAA8 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BAAD F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BAB2 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BAB7 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BABC F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BAC1 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BAC6                            		even
0000BAC6                            		even
0000BAC6                            
0000BAC6                            ; ---------------------------------------------------------------------------
0000BAC6                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BAC6                            ; ---------------------------------------------------------------------------
0000BAC6                            Map_obj14:
0000BAC6                            	include "_maps\obj14.asm"
0000BAC6                            ; --------------------------------------------------------------------------------
0000BAC6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BAC6                            ; --------------------------------------------------------------------------------
0000BAC6                            
0000BAC6                            SME_C6wT7:	
0000BAC6 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BACA 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BACE 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BAD2 01                         SME_C6wT7_C:	dc.b 1	
0000BAD3 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BAD8 01                         SME_C6wT7_12:	dc.b 1	
0000BAD9 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BADE 02                         SME_C6wT7_18:	dc.b 2	
0000BADF EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BAE4 E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BAE9 01                         SME_C6wT7_23:	dc.b 1	
0000BAEA F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BAEF 01                         SME_C6wT7_29:	dc.b 1	
0000BAF0 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BAF5 01                         SME_C6wT7_2F:	dc.b 1	
0000BAF6 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BAFC 00                         		even
0000BAFC 00                         		even
0000BAFC                            
0000BAFC                            ; ===========================================================================
0000BAFC                            ; ---------------------------------------------------------------------------
0000BAFC                            ; Object 30 - large green glassy blocks	(MZ)
0000BAFC                            ; ---------------------------------------------------------------------------
0000BAFC                            
0000BAFC                            Obj30:					; XREF: Obj_Index
0000BAFC 7000                       		moveq	#0,d0
0000BAFE 1028 0024                  		move.b	$24(a0),d0
0000BB02 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BB06 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BB0A 3028 0008                  		move.w	8(a0),d0
0000BB0E 0240 FF80                  		andi.w	#$FF80,d0
0000BB12 3238 F700                  		move.w	($FFFFF700).w,d1
0000BB16 0441 0080                  		subi.w	#$80,d1
0000BB1A 0241 FF80                  		andi.w	#$FF80,d1
0000BB1E 9041                       		sub.w	d1,d0
0000BB20 0C40 0280                  		cmpi.w	#$280,d0
0000BB24 6200 0000                  		bhi.w	Obj30_Delete
0000BB28 6000 0000                  		bra.w	DisplaySprite
0000BB2C                            ; ===========================================================================
0000BB2C                            
0000BB2C                            Obj30_Delete:
0000BB2C 6000 0000                  		bra.w	DeleteObject
0000BB30                            ; ===========================================================================
0000BB30 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BB32 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BB34 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BB36 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BB38 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BB3A                            
0000BB3A 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BB3D 0400 01                    		dc.b 4,	0, 1
0000BB40 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BB43 0800 01                    		dc.b 8,	0, 1
0000BB46                            ; ===========================================================================
0000BB46                            
0000BB46                            Obj30_Main:				; XREF: Obj30_Index
0000BB46 45F9 0000 BB3A             		lea	(Obj30_Vars1).l,a2
0000BB4C 7201                       		moveq	#1,d1
0000BB4E 117C 0048 0016             		move.b	#$48,$16(a0)
0000BB54 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BB5A 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BB5C 45F9 0000 BB40             		lea	(Obj30_Vars2).l,a2
0000BB62 7201                       		moveq	#1,d1
0000BB64 117C 0038 0016             		move.b	#$38,$16(a0)
0000BB6A                            
0000BB6A                            loc_B40C:
0000BB6A 2248                       		movea.l	a0,a1
0000BB6C 6000                       		bra.s	Obj30_Load	; load main object
0000BB6E                            ; ===========================================================================
0000BB6E                            
0000BB6E                            Obj30_Loop:
0000BB6E 6100 0000                  		bsr.w	SingleObjLoad2
0000BB72 6600                       		bne.s	loc_B480
0000BB74                            
0000BB74                            Obj30_Load:				; XREF: Obj30_Main
0000BB74 135A 0024                  		move.b	(a2)+,$24(a1)
0000BB78 12BC 0030                  		move.b	#$30,0(a1)
0000BB7C 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB82 101A                       		move.b	(a2)+,d0
0000BB84 4880                       		ext.w	d0
0000BB86 D068 000C                  		add.w	$C(a0),d0
0000BB8A 3340 000C                  		move.w	d0,$C(a1)
0000BB8E 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BB96 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BB9C 137C 0004 0001             		move.b	#4,1(a1)
0000BBA2 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BBA8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BBAE 137C 0020 0019             		move.b	#$20,$19(a1)
0000BBB4 137C 0004 0018             		move.b	#4,$18(a1)
0000BBBA 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BBBE 2348 003C                  		move.l	a0,$3C(a1)
0000BBC2 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BBC6                            
0000BBC6 137C 0010 0019             		move.b	#$10,$19(a1)
0000BBCC 137C 0003 0018             		move.b	#3,$18(a1)
0000BBD2 5029 0028                  		addq.b	#8,$28(a1)
0000BBD6 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BBDC                            
0000BBDC                            loc_B480:
0000BBDC 317C 0090 0032             		move.w	#$90,$32(a0)
0000BBE2 08E8 0004 0001             		bset	#4,1(a0)
0000BBE8                            
0000BBE8                            Obj30_Block012:				; XREF: Obj30_Index
0000BBE8 6100 0000                  		bsr.w	Obj30_Types
0000BBEC 323C 002B                  		move.w	#$2B,d1
0000BBF0 343C 0048                  		move.w	#$48,d2
0000BBF4 363C 0049                  		move.w	#$49,d3
0000BBF8 3828 0008                  		move.w	8(a0),d4
0000BBFC 6000 0000                  		bra.w	SolidObject
0000BC00                            ; ===========================================================================
0000BC00                            
0000BC00                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BC00 2268 003C                  		movea.l	$3C(a0),a1
0000BC04 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BC0A 6000 0000                  		bra.w	Obj30_Types
0000BC0E                            ; ===========================================================================
0000BC0E                            
0000BC0E                            Obj30_Block34:				; XREF: Obj30_Index
0000BC0E 6100 0000                  		bsr.w	Obj30_Types
0000BC12 323C 002B                  		move.w	#$2B,d1
0000BC16 343C 0038                  		move.w	#$38,d2
0000BC1A 363C 0039                  		move.w	#$39,d3
0000BC1E 3828 0008                  		move.w	8(a0),d4
0000BC22 6000 0000                  		bra.w	SolidObject
0000BC26                            ; ===========================================================================
0000BC26                            
0000BC26                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BC26 2268 003C                  		movea.l	$3C(a0),a1
0000BC2A 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BC30 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BC36 6000 0002                  		bra.w	*+4
0000BC3A                            
0000BC3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BC3A                            
0000BC3A                            
0000BC3A                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BC3A 7000                       		moveq	#0,d0
0000BC3C 1028 0028                  		move.b	$28(a0),d0
0000BC40 0240 0007                  		andi.w	#7,d0
0000BC44 D040                       		add.w	d0,d0
0000BC46 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BC4A 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BC4E                            ; End of function Obj30_Types
0000BC4E                            
0000BC4E                            ; ===========================================================================
0000BC4E 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BC50 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BC52 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BC54 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BC56 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BC58                            ; ===========================================================================
0000BC58                            
0000BC58                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BC58 4E75                       		rts	
0000BC5A                            ; ===========================================================================
0000BC5A                            
0000BC5A                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BC5A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC5E 323C 0040                  		move.w	#$40,d1
0000BC62 6000                       		bra.s	loc_B514
0000BC64                            ; ===========================================================================
0000BC64                            
0000BC64                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BC64 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC68 323C 0040                  		move.w	#$40,d1
0000BC6C 4440                       		neg.w	d0
0000BC6E D041                       		add.w	d1,d0
0000BC70                            
0000BC70                            loc_B514:				; XREF: Obj30_Type01
0000BC70 0828 0003 0028             		btst	#3,$28(a0)
0000BC76 6700                       		beq.s	loc_B526
0000BC78 4440                       		neg.w	d0
0000BC7A D041                       		add.w	d1,d0
0000BC7C E208                       		lsr.b	#1,d0
0000BC7E 0640 0020                  		addi.w	#$20,d0
0000BC82                            
0000BC82                            loc_B526:
0000BC82 6000 0000                  		bra.w	loc_B5EE
0000BC86                            ; ===========================================================================
0000BC86                            
0000BC86                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BC86 0828 0003 0028             		btst	#3,$28(a0)
0000BC8C 6700                       		beq.s	loc_B53E
0000BC8E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC92 0440 0010                  		subi.w	#$10,d0
0000BC96 6000 0000                  		bra.w	loc_B5EE
0000BC9A                            ; ===========================================================================
0000BC9A                            
0000BC9A                            loc_B53E:
0000BC9A 0828 0003 0022             		btst	#3,$22(a0)
0000BCA0 6600                       		bne.s	loc_B54E
0000BCA2 08A8 0000 0034             		bclr	#0,$34(a0)
0000BCA8 6000                       		bra.s	loc_B582
0000BCAA                            ; ===========================================================================
0000BCAA                            
0000BCAA                            loc_B54E:
0000BCAA 4A28 0034                  		tst.b	$34(a0)
0000BCAE 6600                       		bne.s	loc_B582
0000BCB0 117C 0001 0034             		move.b	#1,$34(a0)
0000BCB6 08E8 0000 0035             		bset	#0,$35(a0)
0000BCBC 6700                       		beq.s	loc_B582
0000BCBE 08E8 0007 0034             		bset	#7,$34(a0)
0000BCC4 317C 0010 0036             		move.w	#$10,$36(a0)
0000BCCA 117C 000A 0038             		move.b	#$A,$38(a0)
0000BCD0 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BCD6 6600                       		bne.s	loc_B582
0000BCD8 317C 0040 0036             		move.w	#$40,$36(a0)
0000BCDE                            
0000BCDE                            loc_B582:
0000BCDE 4A28 0034                  		tst.b	$34(a0)
0000BCE2 6A00                       		bpl.s	loc_B5AA
0000BCE4 4A28 0038                  		tst.b	$38(a0)
0000BCE8 6700                       		beq.s	loc_B594
0000BCEA 5328 0038                  		subq.b	#1,$38(a0)
0000BCEE 6600                       		bne.s	loc_B5AA
0000BCF0                            
0000BCF0                            loc_B594:
0000BCF0 4A68 0032                  		tst.w	$32(a0)
0000BCF4 6700                       		beq.s	loc_B5A4
0000BCF6 5368 0032                  		subq.w	#1,$32(a0)
0000BCFA 5368 0036                  		subq.w	#1,$36(a0)
0000BCFE 6600                       		bne.s	loc_B5AA
0000BD00                            
0000BD00                            loc_B5A4:
0000BD00 08A8 0007 0034             		bclr	#7,$34(a0)
0000BD06                            
0000BD06                            loc_B5AA:
0000BD06 3028 0032                  		move.w	$32(a0),d0
0000BD0A 6000                       		bra.s	loc_B5EE
0000BD0C                            ; ===========================================================================
0000BD0C                            
0000BD0C                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BD0C 0828 0003 0028             		btst	#3,$28(a0)
0000BD12 6700                       		beq.s	Obj30_ChkSwitch
0000BD14 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BD18 0440 0010                  		subi.w	#$10,d0
0000BD1C 6000                       		bra.s	loc_B5EE
0000BD1E                            ; ===========================================================================
0000BD1E                            
0000BD1E                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BD1E 4A28 0034                  		tst.b	$34(a0)
0000BD22 6600                       		bne.s	loc_B5E0
0000BD24 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BD28 7000                       		moveq	#0,d0
0000BD2A 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BD2E E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BD30 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BD34 6700                       		beq.s	loc_B5EA	; if not, branch
0000BD36 117C 0001 0034             		move.b	#1,$34(a0)
0000BD3C                            
0000BD3C                            loc_B5E0:
0000BD3C 4A68 0032                  		tst.w	$32(a0)
0000BD40 6700                       		beq.s	loc_B5EA
0000BD42 5568 0032                  		subq.w	#2,$32(a0)
0000BD46                            
0000BD46                            loc_B5EA:
0000BD46 3028 0032                  		move.w	$32(a0),d0
0000BD4A                            
0000BD4A                            loc_B5EE:
0000BD4A 3228 0030                  		move.w	$30(a0),d1
0000BD4E 9240                       		sub.w	d0,d1
0000BD50 3141 000C                  		move.w	d1,$C(a0)
0000BD54 4E75                       		rts	
0000BD56                            ; ===========================================================================
0000BD56                            ; ---------------------------------------------------------------------------
0000BD56                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD56                            ; ---------------------------------------------------------------------------
0000BD56                            Map_obj30:
0000BD56                            	include "_maps\obj30.asm"
0000BD56                            ; ---------------------------------------------------------------------------
0000BD56                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD56                            ; ---------------------------------------------------------------------------
0000BD56 0000                       		dc.w byte_B600-Map_obj30
0000BD58 0000                       		dc.w byte_B63D-Map_obj30
0000BD5A 0000                       		dc.w byte_B648-Map_obj30
0000BD5C 0C                         byte_B600:	dc.b $C
0000BD5D B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BD62 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BD67 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BD6C C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BD71 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BD76 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BD7B 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BD80 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BD85 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BD8A 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BD8F 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BD94 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BD99 02                         byte_B63D:	dc.b 2
0000BD9A 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BD9F 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BDA4 0A                         byte_B648:	dc.b $A
0000BDA5 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BDAA C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BDAF D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BDB4 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BDB9 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BDBE F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BDC3 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BDC8 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BDCD 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BDD2 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BDD8 00                         		even
0000BDD8 00                         		even
0000BDD8                            
0000BDD8                            ; ===========================================================================
0000BDD8                            ; ---------------------------------------------------------------------------
0000BDD8                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BDD8                            ; ---------------------------------------------------------------------------
0000BDD8                            
0000BDD8                            Obj31:					; XREF: Obj_Index
0000BDD8 7000                       		moveq	#0,d0
0000BDDA 1028 0024                  		move.b	$24(a0),d0
0000BDDE 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BDE2 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BDE6                            ; ===========================================================================
0000BDE6 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BDE8 0000                       		dc.w loc_B798-Obj31_Index
0000BDEA 0000                       		dc.w loc_B7FE-Obj31_Index
0000BDEC 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BDEE 0000                       		dc.w loc_B7E2-Obj31_Index
0000BDF0                            
0000BDF0 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BDF2 0100                       		dc.b 1,	0
0000BDF4                            
0000BDF4 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BDF7 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BDFA 08CC 03                    		dc.b 8,	$CC, 3
0000BDFD 06F0 02                    		dc.b 6,	$F0, 2
0000BE00                            
0000BE00 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BE04 5000 7800                  		dc.w $5000, $7800
0000BE08 3800 5800                  		dc.w $3800, $5800
0000BE0C B800                       		dc.w $B800
0000BE0E                            ; ===========================================================================
0000BE0E                            
0000BE0E                            Obj31_Main:				; XREF: Obj31_Index
0000BE0E 7000                       		moveq	#0,d0
0000BE10 1028 0028                  		move.b	$28(a0),d0
0000BE14 6A00                       		bpl.s	loc_B6CE
0000BE16 0240 007F                  		andi.w	#$7F,d0
0000BE1A D040                       		add.w	d0,d0
0000BE1C 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BE20 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BE24 101A                       		move.b	(a2)+,d0
0000BE26 1140 0028                  		move.b	d0,$28(a0)
0000BE2A                            
0000BE2A                            loc_B6CE:
0000BE2A 0200 000F                  		andi.b	#$F,d0
0000BE2E D040                       		add.w	d0,d0
0000BE30 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BE34 4A40                       		tst.w	d0
0000BE36 6600                       		bne.s	loc_B6E0
0000BE38 3142 0032                  		move.w	d2,$32(a0)
0000BE3C                            
0000BE3C                            loc_B6E0:
0000BE3C 45F9 0000 BDF4             		lea	(Obj31_Var).l,a2
0000BE42 2248                       		movea.l	a0,a1
0000BE44 7203                       		moveq	#3,d1
0000BE46 6000                       		bra.s	Obj31_MakeStomper
0000BE48                            ; ===========================================================================
0000BE48                            
0000BE48                            Obj31_Loop:
0000BE48 6100 0000                  		bsr.w	SingleObjLoad2
0000BE4C 6600 0000                  		bne.w	Obj31_SetSize
0000BE50                            
0000BE50                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BE50 135A 0024                  		move.b	(a2)+,$24(a1)
0000BE54 12BC 0031                  		move.b	#$31,0(a1)
0000BE58 3368 0008 0008             		move.w	8(a0),8(a1)
0000BE5E 101A                       		move.b	(a2)+,d0
0000BE60 4880                       		ext.w	d0
0000BE62 D068 000C                  		add.w	$C(a0),d0
0000BE66 3340 000C                  		move.w	d0,$C(a1)
0000BE6A 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BE72 337C 0300 0002             		move.w	#$300,2(a1)
0000BE78 137C 0004 0001             		move.b	#4,1(a1)
0000BE7E 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BE84 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BE8A 137C 0010 0019             		move.b	#$10,$19(a1)
0000BE90 3342 0034                  		move.w	d2,$34(a1)
0000BE94 137C 0004 0018             		move.b	#4,$18(a1)
0000BE9A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BE9E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BEA4 6600                       		bne.s	loc_B76A
0000BEA6 5341                       		subq.w	#1,d1
0000BEA8 1028 0028                  		move.b	$28(a0),d0
0000BEAC 0240 00F0                  		andi.w	#$F0,d0
0000BEB0 0C40 0020                  		cmpi.w	#$20,d0
0000BEB4 679A                       		beq.s	Obj31_MakeStomper
0000BEB6 137C 0038 0019             		move.b	#$38,$19(a1)
0000BEBC 137C 0090 0020             		move.b	#$90,$20(a1)
0000BEC2 5241                       		addq.w	#1,d1
0000BEC4                            
0000BEC4                            loc_B76A:
0000BEC4 2348 003C                  		move.l	a0,$3C(a1)
0000BEC8 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BECC                            
0000BECC 137C 0003 0018             		move.b	#3,$18(a1)
0000BED2                            
0000BED2                            Obj31_SetSize:
0000BED2 7000                       		moveq	#0,d0
0000BED4 1028 0028                  		move.b	$28(a0),d0
0000BED8 E648                       		lsr.w	#3,d0
0000BEDA 0200 000E                  		andi.b	#$E,d0
0000BEDE 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BEE2 115A 0019                  		move.b	(a2)+,$19(a0)
0000BEE6 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BEEA 6000                       		bra.s	loc_B798
0000BEEC                            ; ===========================================================================
0000BEEC 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BEEE 3009                       		dc.b $30, 9
0000BEF0 100A                       		dc.b $10, $A
0000BEF2                            ; ===========================================================================
0000BEF2                            
0000BEF2                            loc_B798:				; XREF: Obj31_Index
0000BEF2 6100 0000                  		bsr.w	Obj31_Types
0000BEF6 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BEFC 7200                       		moveq	#0,d1
0000BEFE 1228 0019                  		move.b	$19(a0),d1
0000BF02 0641 000B                  		addi.w	#$B,d1
0000BF06 343C 000C                  		move.w	#$C,d2
0000BF0A 363C 000D                  		move.w	#$D,d3
0000BF0E 3828 0008                  		move.w	8(a0),d4
0000BF12 6100 0000                  		bsr.w	SolidObject
0000BF16 0828 0003 0022             		btst	#3,$22(a0)
0000BF1C 6700                       		beq.s	Obj31_Display
0000BF1E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BF24 6400                       		bcc.s	Obj31_Display
0000BF26 2448                       		movea.l	a0,a2
0000BF28 41F8 D000                  		lea	($FFFFD000).w,a0
0000BF2C 4EB9 0000 0000             		jsr	KillSonic
0000BF32 204A                       		movea.l	a2,a0
0000BF34                            
0000BF34                            Obj31_Display:
0000BF34 6100 0000                  		bsr.w	DisplaySprite
0000BF38 6000 0000                  		bra.w	Obj31_ChkDel
0000BF3C                            ; ===========================================================================
0000BF3C                            
0000BF3C                            loc_B7E2:				; XREF: Obj31_Index
0000BF3C 117C 0080 0016             		move.b	#$80,$16(a0)
0000BF42 08E8 0004 0001             		bset	#4,1(a0)
0000BF48 2268 003C                  		movea.l	$3C(a0),a1
0000BF4C 1029 0032                  		move.b	$32(a1),d0
0000BF50 EA08                       		lsr.b	#5,d0
0000BF52 5600                       		addq.b	#3,d0
0000BF54 1140 001A                  		move.b	d0,$1A(a0)
0000BF58                            
0000BF58                            loc_B7FE:				; XREF: Obj31_Index
0000BF58 2268 003C                  		movea.l	$3C(a0),a1
0000BF5C 7000                       		moveq	#0,d0
0000BF5E 1029 0032                  		move.b	$32(a1),d0
0000BF62 D068 0030                  		add.w	$30(a0),d0
0000BF66 3140 000C                  		move.w	d0,$C(a0)
0000BF6A                            
0000BF6A                            Obj31_Display2:				; XREF: Obj31_Index
0000BF6A 6100 0000                  		bsr.w	DisplaySprite
0000BF6E                            
0000BF6E                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BF6E 3028 0008                  		move.w	8(a0),d0
0000BF72 0240 FF80                  		andi.w	#$FF80,d0
0000BF76 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF7A 0441 0080                  		subi.w	#$80,d1
0000BF7E 0241 FF80                  		andi.w	#$FF80,d1
0000BF82 9041                       		sub.w	d1,d0
0000BF84 0C40 0280                  		cmpi.w	#$280,d0
0000BF88 6200 0000                  		bhi.w	DeleteObject
0000BF8C 4E75                       		rts	
0000BF8E                            ; ===========================================================================
0000BF8E                            
0000BF8E                            Obj31_Types:				; XREF: loc_B798
0000BF8E 1028 0028                  		move.b	$28(a0),d0
0000BF92 0240 000F                  		andi.w	#$F,d0
0000BF96 D040                       		add.w	d0,d0
0000BF98 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BF9C 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BFA0                            ; ===========================================================================
0000BFA0 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BFA2 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFA4 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFA6 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BFA8 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFAA 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BFAC 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFAE                            ; ===========================================================================
0000BFAE                            
0000BFAE                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BFAE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BFB2 7000                       		moveq	#0,d0
0000BFB4 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BFB8 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BFBC 6700                       		beq.s	loc_B8A8	; if not, branch
0000BFBE 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BFC2 6A00                       		bpl.s	loc_B872
0000BFC4 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BFCA 6700                       		beq.s	loc_B8A0
0000BFCC                            
0000BFCC                            loc_B872:
0000BFCC 4A68 0032                  		tst.w	$32(a0)
0000BFD0 6700                       		beq.s	loc_B8A0
0000BFD2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BFD6 0200 000F                  		andi.b	#$F,d0
0000BFDA 6600                       		bne.s	loc_B892
0000BFDC 4A28 0001                  		tst.b	1(a0)
0000BFE0 6A00                       		bpl.s	loc_B892
0000BFE2 303C 00C7                  		move.w	#$C7,d0
0000BFE6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BFEC                            
0000BFEC                            loc_B892:
0000BFEC 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFF2 6400                       		bcc.s	Obj31_Restart
0000BFF4 317C 0000 0032             		move.w	#0,$32(a0)
0000BFFA                            
0000BFFA                            loc_B8A0:
0000BFFA 317C 0000 0012             		move.w	#0,$12(a0)
0000C000 6000                       		bra.s	Obj31_Restart
0000C002                            ; ===========================================================================
0000C002                            
0000C002                            loc_B8A8:				; XREF: Obj31_Type00
0000C002 3228 0034                  		move.w	$34(a0),d1
0000C006 B268 0032                  		cmp.w	$32(a0),d1
0000C00A 6700                       		beq.s	Obj31_Restart
0000C00C 3028 0012                  		move.w	$12(a0),d0
0000C010 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C016 D168 0032                  		add.w	d0,$32(a0)
0000C01A B268 0032                  		cmp.w	$32(a0),d1
0000C01E 6200                       		bhi.s	Obj31_Restart
0000C020 3141 0032                  		move.w	d1,$32(a0)
0000C024 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C02A 4A28 0001                  		tst.b	1(a0)
0000C02E 6A00                       		bpl.s	Obj31_Restart
0000C030 303C 00BD                  		move.w	#$BD,d0
0000C034 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C03A                            
0000C03A                            Obj31_Restart:
0000C03A 7000                       		moveq	#0,d0
0000C03C 1028 0032                  		move.b	$32(a0),d0
0000C040 D068 0030                  		add.w	$30(a0),d0
0000C044 3140 000C                  		move.w	d0,$C(a0)
0000C048 4E75                       		rts	
0000C04A                            ; ===========================================================================
0000C04A                            
0000C04A                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C04A 4A68 0036                  		tst.w	$36(a0)
0000C04E 6700                       		beq.s	loc_B938
0000C050 4A68 0038                  		tst.w	$38(a0)
0000C054 6700                       		beq.s	loc_B902
0000C056 5368 0038                  		subq.w	#1,$38(a0)
0000C05A 6000                       		bra.s	loc_B97C
0000C05C                            ; ===========================================================================
0000C05C                            
0000C05C                            loc_B902:
0000C05C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C060 0200 000F                  		andi.b	#$F,d0
0000C064 6600                       		bne.s	loc_B91C
0000C066 4A28 0001                  		tst.b	1(a0)
0000C06A 6A00                       		bpl.s	loc_B91C
0000C06C 303C 00C7                  		move.w	#$C7,d0
0000C070 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C076                            
0000C076                            loc_B91C:
0000C076 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C07C 6400                       		bcc.s	loc_B97C
0000C07E 317C 0000 0032             		move.w	#0,$32(a0)
0000C084 317C 0000 0012             		move.w	#0,$12(a0)
0000C08A 317C 0000 0036             		move.w	#0,$36(a0)
0000C090 6000                       		bra.s	loc_B97C
0000C092                            ; ===========================================================================
0000C092                            
0000C092                            loc_B938:				; XREF: Obj31_Type01
0000C092 3228 0034                  		move.w	$34(a0),d1
0000C096 B268 0032                  		cmp.w	$32(a0),d1
0000C09A 6700                       		beq.s	loc_B97C
0000C09C 3028 0012                  		move.w	$12(a0),d0
0000C0A0 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C0A6 D168 0032                  		add.w	d0,$32(a0)
0000C0AA B268 0032                  		cmp.w	$32(a0),d1
0000C0AE 6200                       		bhi.s	loc_B97C
0000C0B0 3141 0032                  		move.w	d1,$32(a0)
0000C0B4 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C0BA 317C 0001 0036             		move.w	#1,$36(a0)
0000C0C0 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C0C6 4A28 0001                  		tst.b	1(a0)
0000C0CA 6A00                       		bpl.s	loc_B97C
0000C0CC 303C 00BD                  		move.w	#$BD,d0
0000C0D0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C0D6                            
0000C0D6                            loc_B97C:
0000C0D6 6000 FF62                  		bra.w	Obj31_Restart
0000C0DA                            ; ===========================================================================
0000C0DA                            
0000C0DA                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C0DA 3038 D008                  		move.w	($FFFFD008).w,d0
0000C0DE 9068 0008                  		sub.w	8(a0),d0
0000C0E2 6400                       		bcc.s	loc_B98C
0000C0E4 4440                       		neg.w	d0
0000C0E6                            
0000C0E6                            loc_B98C:
0000C0E6 0C40 0090                  		cmpi.w	#$90,d0
0000C0EA 6400                       		bcc.s	loc_B996
0000C0EC 5228 0028                  		addq.b	#1,$28(a0)
0000C0F0                            
0000C0F0                            loc_B996:
0000C0F0 6000 FF48                  		bra.w	Obj31_Restart
0000C0F4                            ; ===========================================================================
0000C0F4                            ; ---------------------------------------------------------------------------
0000C0F4                            ; Object 45 - spiked metal block from beta version (MZ)
0000C0F4                            ; ---------------------------------------------------------------------------
0000C0F4                            
0000C0F4                            Obj45:					; XREF: Obj_Index
0000C0F4 7000                       		moveq	#0,d0
0000C0F6 1028 0024                  		move.b	$24(a0),d0
0000C0FA 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C0FE 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C102                            ; ===========================================================================
0000C102 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C104 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C106 0000                       		dc.w loc_BA8E-Obj45_Index
0000C108 0000                       		dc.w Obj45_Display-Obj45_Index
0000C10A 0000                       		dc.w loc_BA7A-Obj45_Index
0000C10C                            
0000C10C 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C10F 04E4 01                    		dc.b	4, $E4,	  1
0000C112 0834 03                    		dc.b	8, $34,	  3
0000C115 0628 02                    		dc.b	6, $28,	  2
0000C118                            
0000C118 3800                       word_B9BE:	dc.w $3800
0000C11A A000                       		dc.w -$6000
0000C11C 5000                       		dc.w $5000
0000C11E                            ; ===========================================================================
0000C11E                            
0000C11E                            Obj45_Main:				; XREF: Obj45_Index
0000C11E 7000                       		moveq	#0,d0
0000C120 1028 0028                  		move.b	$28(a0),d0
0000C124 D040                       		add.w	d0,d0
0000C126 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C12A 45F9 0000 C10C             		lea	(Obj45_Var).l,a2
0000C130 2248                       		movea.l	a0,a1
0000C132 7203                       		moveq	#3,d1
0000C134 6000                       		bra.s	Obj45_Load
0000C136                            ; ===========================================================================
0000C136                            
0000C136                            Obj45_Loop:
0000C136 6100 0000                  		bsr.w	SingleObjLoad2
0000C13A 6600                       		bne.s	loc_BA52
0000C13C                            
0000C13C                            Obj45_Load:				; XREF: Obj45_Main
0000C13C 135A 0024                  		move.b	(a2)+,$24(a1)
0000C140 12BC 0045                  		move.b	#$45,0(a1)
0000C144 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C14A 101A                       		move.b	(a2)+,d0
0000C14C 4880                       		ext.w	d0
0000C14E D068 0008                  		add.w	8(a0),d0
0000C152 3340 0008                  		move.w	d0,8(a1)
0000C156 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C15E 337C 0300 0002             		move.w	#$300,2(a1)
0000C164 137C 0004 0001             		move.b	#4,1(a1)
0000C16A 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C170 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C176 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C17C 137C 0020 0019             		move.b	#$20,$19(a1)
0000C182 3342 0034                  		move.w	d2,$34(a1)
0000C186 137C 0004 0018             		move.b	#4,$18(a1)
0000C18C 0C12 0001                  		cmpi.b	#1,(a2)
0000C190 6600                       		bne.s	loc_BA40
0000C192 137C 0091 0020             		move.b	#$91,$20(a1)
0000C198                            
0000C198                            loc_BA40:
0000C198 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C19C 2348 003C                  		move.l	a0,$3C(a1)
0000C1A0 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C1A4                            
0000C1A4 137C 0003 0018             		move.b	#3,$18(a1)
0000C1AA                            
0000C1AA                            loc_BA52:
0000C1AA 117C 0010 0019             		move.b	#$10,$19(a0)
0000C1B0                            
0000C1B0                            Obj45_Solid:				; XREF: Obj45_Index
0000C1B0 3F28 0008                  		move.w	8(a0),-(sp)
0000C1B4 6100 0000                  		bsr.w	Obj45_Move
0000C1B8 323C 0017                  		move.w	#$17,d1
0000C1BC 343C 0020                  		move.w	#$20,d2
0000C1C0 363C 0020                  		move.w	#$20,d3
0000C1C4 381F                       		move.w	(sp)+,d4
0000C1C6 6100 0000                  		bsr.w	SolidObject
0000C1CA 6100 0000                  		bsr.w	DisplaySprite
0000C1CE 6000 0000                  		bra.w	Obj45_ChkDel
0000C1D2                            ; ===========================================================================
0000C1D2                            
0000C1D2                            loc_BA7A:				; XREF: Obj45_Index
0000C1D2 2268 003C                  		movea.l	$3C(a0),a1
0000C1D6 1029 0032                  		move.b	$32(a1),d0
0000C1DA 0600 0010                  		addi.b	#$10,d0
0000C1DE EA08                       		lsr.b	#5,d0
0000C1E0 5600                       		addq.b	#3,d0
0000C1E2 1140 001A                  		move.b	d0,$1A(a0)
0000C1E6                            
0000C1E6                            loc_BA8E:				; XREF: Obj45_Index
0000C1E6 2268 003C                  		movea.l	$3C(a0),a1
0000C1EA 7000                       		moveq	#0,d0
0000C1EC 1029 0032                  		move.b	$32(a1),d0
0000C1F0 4440                       		neg.w	d0
0000C1F2 D068 0030                  		add.w	$30(a0),d0
0000C1F6 3140 0008                  		move.w	d0,8(a0)
0000C1FA                            
0000C1FA                            Obj45_Display:				; XREF: Obj45_Index
0000C1FA 6100 0000                  		bsr.w	DisplaySprite
0000C1FE                            
0000C1FE                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C1FE 3028 003A                  		move.w	$3A(a0),d0
0000C202 0240 FF80                  		andi.w	#$FF80,d0
0000C206 3238 F700                  		move.w	($FFFFF700).w,d1
0000C20A 0441 0080                  		subi.w	#$80,d1
0000C20E 0241 FF80                  		andi.w	#$FF80,d1
0000C212 9041                       		sub.w	d1,d0
0000C214 0C40 0280                  		cmpi.w	#$280,d0
0000C218 6200 0000                  		bhi.w	DeleteObject
0000C21C 4E75                       		rts	
0000C21E                            
0000C21E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C21E                            
0000C21E                            
0000C21E                            Obj45_Move:				; XREF: Obj45_Solid
0000C21E 7000                       		moveq	#0,d0
0000C220 1028 0028                  		move.b	$28(a0),d0
0000C224 D040                       		add.w	d0,d0
0000C226 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C22A 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C22E                            ; End of function Obj45_Move
0000C22E                            
0000C22E                            ; ===========================================================================
0000C22E 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C230 0000                       		dc.w loc_BADA-off_BAD6
0000C232                            ; ===========================================================================
0000C232                            
0000C232                            loc_BADA:				; XREF: off_BAD6
0000C232 4A68 0036                  		tst.w	$36(a0)
0000C236 6700                       		beq.s	loc_BB08
0000C238 4A68 0038                  		tst.w	$38(a0)
0000C23C 6700                       		beq.s	loc_BAEC
0000C23E 5368 0038                  		subq.w	#1,$38(a0)
0000C242 6000                       		bra.s	loc_BB3C
0000C244                            ; ===========================================================================
0000C244                            
0000C244                            loc_BAEC:
0000C244 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C24A 6400                       		bcc.s	loc_BB3C
0000C24C 317C 0000 0032             		move.w	#0,$32(a0)
0000C252 317C 0000 0010             		move.w	#0,$10(a0)
0000C258 317C 0000 0036             		move.w	#0,$36(a0)
0000C25E 6000                       		bra.s	loc_BB3C
0000C260                            ; ===========================================================================
0000C260                            
0000C260                            loc_BB08:				; XREF: loc_BADA
0000C260 3228 0034                  		move.w	$34(a0),d1
0000C264 B268 0032                  		cmp.w	$32(a0),d1
0000C268 6700                       		beq.s	loc_BB3C
0000C26A 3028 0010                  		move.w	$10(a0),d0
0000C26E 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C274 D168 0032                  		add.w	d0,$32(a0)
0000C278 B268 0032                  		cmp.w	$32(a0),d1
0000C27C 6200                       		bhi.s	loc_BB3C
0000C27E 3141 0032                  		move.w	d1,$32(a0)
0000C282 317C 0000 0010             		move.w	#0,$10(a0)
0000C288 317C 0001 0036             		move.w	#1,$36(a0)
0000C28E 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C294                            
0000C294                            loc_BB3C:
0000C294 7000                       		moveq	#0,d0
0000C296 1028 0032                  		move.b	$32(a0),d0
0000C29A 4440                       		neg.w	d0
0000C29C D068 0030                  		add.w	$30(a0),d0
0000C2A0 3140 0008                  		move.w	d0,8(a0)
0000C2A4 4E75                       		rts	
0000C2A6                            ; ===========================================================================
0000C2A6                            ; ---------------------------------------------------------------------------
0000C2A6                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C2A6                            ; ---------------------------------------------------------------------------
0000C2A6                            Map_obj31:
0000C2A6                            	include "_maps\obj31.asm"
0000C2A6                            ; ---------------------------------------------------------------------------
0000C2A6                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C2A6                            ; ---------------------------------------------------------------------------
0000C2A6 0000                       		dc.w byte_BB64-Map_obj31
0000C2A8 0000                       		dc.w byte_BB7E-Map_obj31
0000C2AA 0000                       		dc.w byte_BB98-Map_obj31
0000C2AC 0000                       		dc.w byte_BB9E-Map_obj31
0000C2AE 0000                       		dc.w byte_BBA9-Map_obj31
0000C2B0 0000                       		dc.w byte_BBBE-Map_obj31
0000C2B2 0000                       		dc.w byte_BBDD-Map_obj31
0000C2B4 0000                       		dc.w byte_BC06-Map_obj31
0000C2B6 0000                       		dc.w byte_BC06-Map_obj31
0000C2B8 0000                       		dc.w byte_BC39-Map_obj31
0000C2BA 0000                       		dc.w byte_BC53-Map_obj31
0000C2BC 05                         byte_BB64:	dc.b 5
0000C2BD F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C2C2 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C2C7 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C2CC F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C2D1 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C2D6 05                         byte_BB7E:	dc.b 5
0000C2D7 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C2DC F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C2E1 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C2E6 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C2EB F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C2F0 01                         byte_BB98:	dc.b 1
0000C2F1 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C2F6 02                         byte_BB9E:	dc.b 2
0000C2F7 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C2FC 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C301 04                         byte_BBA9:	dc.b 4
0000C302 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C307 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C30C 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C311 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C316 06                         byte_BBBE:	dc.b 6
0000C317 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C31C D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C321 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C326 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C32B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C330 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C335 08                         byte_BBDD:	dc.b 8
0000C336 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C33B B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C340 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C345 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C34A E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C34F F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C354 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C359 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C35E 0A                         byte_BC06:	dc.b $A
0000C35F 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C364 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C369 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C36E B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C373 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C378 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C37D E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C382 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C387 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C38C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C391 05                         byte_BC39:	dc.b 5
0000C392 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C397 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C39C F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C3A1 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C3A6 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C3AB 01                         byte_BC53:	dc.b 1
0000C3AC EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C3B2 00                         		even
0000C3B2 00                         		even
0000C3B2                            
0000C3B2                            ; ---------------------------------------------------------------------------
0000C3B2                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C3B2                            ; ---------------------------------------------------------------------------
0000C3B2                            Map_obj45:
0000C3B2                            	include "_maps\obj45.asm"
0000C3B2                            ; ---------------------------------------------------------------------------
0000C3B2                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C3B2                            ; ---------------------------------------------------------------------------
0000C3B2 0000                       		dc.w byte_BC6C-Map_obj45
0000C3B4 0000                       		dc.w byte_BC7C-Map_obj45
0000C3B6 0000                       		dc.w byte_BC8C-Map_obj45
0000C3B8 0000                       		dc.w byte_BC92-Map_obj45
0000C3BA 0000                       		dc.w byte_BC9D-Map_obj45
0000C3BC 0000                       		dc.w byte_BCB2-Map_obj45
0000C3BE 0000                       		dc.w byte_BCD1-Map_obj45
0000C3C0 0000                       		dc.w byte_BCFA-Map_obj45
0000C3C2 0000                       		dc.w byte_BCFA-Map_obj45
0000C3C4 03                         byte_BC6C:	dc.b 3
0000C3C5 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C3CA 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C3CF F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C3D4 03                         byte_BC7C:	dc.b 3
0000C3D5 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C3DA FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C3DF 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C3E4 01                         byte_BC8C:	dc.b 1
0000C3E5 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C3EA 02                         byte_BC92:	dc.b 2
0000C3EB F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3F0 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3F5 04                         byte_BC9D:	dc.b 4
0000C3F6 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3FB F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C400 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C405 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C40A 06                         byte_BCB2:	dc.b 6
0000C40B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C410 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C415 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C41A F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C41F F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C424 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C429 08                         byte_BCD1:	dc.b 8
0000C42A F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C42F F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C434 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C439 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C43E F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C443 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C448 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C44D F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C452 08                         byte_BCFA:	dc.b 8
0000C453 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C458 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C45D F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C462 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C467 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C46C F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C471 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C476 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C47B F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C480 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C486 00                         		even
0000C486 00                         		even
0000C486                            
0000C486                            ; ===========================================================================
0000C486                            ; ---------------------------------------------------------------------------
0000C486                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C486                            ; ---------------------------------------------------------------------------
0000C486                            
0000C486                            Obj32:					; XREF: Obj_Index
0000C486 7000                       		moveq	#0,d0
0000C488 1028 0024                  		move.b	$24(a0),d0
0000C48C 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C490 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C494                            ; ===========================================================================
0000C494 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C496 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C498                            ; ===========================================================================
0000C498                            
0000C498                            Obj32_Main:				; XREF: Obj32_Index
0000C498 5428 0024                  		addq.b	#2,$24(a0)
0000C49C 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C4A4 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C4AA 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C4B0 6700                       		beq.s	loc_BD60
0000C4B2 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C4B8                            
0000C4B8                            loc_BD60:
0000C4B8 117C 0004 0001             		move.b	#4,1(a0)
0000C4BE 117C 0010 0019             		move.b	#$10,$19(a0)
0000C4C4 117C 0004 0018             		move.b	#4,$18(a0)
0000C4CA 5668 000C                  		addq.w	#3,$C(a0)
0000C4CE                            
0000C4CE                            Obj32_Pressed:				; XREF: Obj32_Index
0000C4CE 4A28 0001                  		tst.b	1(a0)
0000C4D2 6A00                       		bpl.s	Obj32_Display
0000C4D4 323C 001B                  		move.w	#$1B,d1
0000C4D8 343C 0005                  		move.w	#5,d2
0000C4DC 363C 0005                  		move.w	#5,d3
0000C4E0 3828 0008                  		move.w	8(a0),d4
0000C4E4 6100 0000                  		bsr.w	SolidObject
0000C4E8 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C4EE 1028 0028                  		move.b	$28(a0),d0
0000C4F2 0240 000F                  		andi.w	#$F,d0
0000C4F6 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C4FA 47F3 0000                  		lea	(a3,d0.w),a3
0000C4FE 7600                       		moveq	#0,d3
0000C500 0828 0006 0028             		btst	#6,$28(a0)
0000C506 6700                       		beq.s	loc_BDB2
0000C508 7607                       		moveq	#7,d3
0000C50A                            
0000C50A                            loc_BDB2:
0000C50A 4A28 0028                  		tst.b	$28(a0)
0000C50E 6A00                       		bpl.s	loc_BDBE
0000C510 6100 0000                  		bsr.w	Obj32_MZBlock
0000C514 6600                       		bne.s	loc_BDC8
0000C516                            
0000C516                            loc_BDBE:
0000C516 4A28 0025                  		tst.b	$25(a0)
0000C51A 6600                       		bne.s	loc_BDC8
0000C51C 0793                       		bclr	d3,(a3)
0000C51E 6000                       		bra.s	loc_BDDE
0000C520                            ; ===========================================================================
0000C520                            
0000C520                            loc_BDC8:
0000C520 4A13                       		tst.b	(a3)
0000C522 6600                       		bne.s	loc_BDD6
0000C524 303C 00CD                  		move.w	#$CD,d0
0000C528 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play switch sound
0000C52E                            
0000C52E                            loc_BDD6:
0000C52E 07D3                       		bset	d3,(a3)
0000C530 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C536                            
0000C536                            loc_BDDE:
0000C536 0828 0005 0028             		btst	#5,$28(a0)
0000C53C 6700                       		beq.s	Obj32_Display
0000C53E 5328 001E                  		subq.b	#1,$1E(a0)
0000C542 6A00                       		bpl.s	Obj32_Display
0000C544 117C 0007 001E             		move.b	#7,$1E(a0)
0000C54A 0868 0001 001A             		bchg	#1,$1A(a0)
0000C550                            
0000C550                            Obj32_Display:
0000C550 6100 0000                  		bsr.w	DisplaySprite
0000C554 3028 0008                  		move.w	8(a0),d0
0000C558 0240 FF80                  		andi.w	#$FF80,d0
0000C55C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C560 0441 0080                  		subi.w	#$80,d1
0000C564 0241 FF80                  		andi.w	#$FF80,d1
0000C568 9041                       		sub.w	d1,d0
0000C56A 0C40 0280                  		cmpi.w	#$280,d0
0000C56E 6200 0000                  		bhi.w	Obj32_Delete
0000C572 4E75                       		rts	
0000C574                            ; ===========================================================================
0000C574                            
0000C574                            Obj32_Delete:
0000C574 6100 0000                  		bsr.w	DeleteObject
0000C578 4E75                       		rts	
0000C57A                            
0000C57A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C57A                            
0000C57A                            
0000C57A                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C57A 3F03                       		move.w	d3,-(sp)
0000C57C 3428 0008                  		move.w	8(a0),d2
0000C580 3628 000C                  		move.w	$C(a0),d3
0000C584 0442 0010                  		subi.w	#$10,d2
0000C588 5143                       		subq.w	#8,d3
0000C58A 383C 0020                  		move.w	#$20,d4
0000C58E 3A3C 0010                  		move.w	#$10,d5
0000C592 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C596 3C3C 005F                  		move.w	#$5F,d6
0000C59A                            
0000C59A                            Obj32_MZLoop:
0000C59A 4A29 0001                  		tst.b	1(a1)
0000C59E 6A00                       		bpl.s	loc_BE4E
0000C5A0 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C5A4 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C5A6                            
0000C5A6                            loc_BE4E:
0000C5A6 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C5AA 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C5AE                            
0000C5AE 361F                       		move.w	(sp)+,d3
0000C5B0 7000                       		moveq	#0,d0
0000C5B2                            
0000C5B2                            locret_BE5A:
0000C5B2 4E75                       		rts	
0000C5B4                            ; ===========================================================================
0000C5B4 1010                       Obj32_MZData:	dc.b $10, $10
0000C5B6                            ; ===========================================================================
0000C5B6                            
0000C5B6                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C5B6 7001                       		moveq	#1,d0
0000C5B8 0240 003F                  		andi.w	#$3F,d0
0000C5BC D040                       		add.w	d0,d0
0000C5BE 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C5C2 121A                       		move.b	(a2)+,d1
0000C5C4 4881                       		ext.w	d1
0000C5C6 3029 0008                  		move.w	8(a1),d0
0000C5CA 9041                       		sub.w	d1,d0
0000C5CC 9042                       		sub.w	d2,d0
0000C5CE 6400                       		bcc.s	loc_BE80
0000C5D0 D241                       		add.w	d1,d1
0000C5D2 D041                       		add.w	d1,d0
0000C5D4 6500                       		bcs.s	loc_BE84
0000C5D6 60CE                       		bra.s	loc_BE4E
0000C5D8                            ; ===========================================================================
0000C5D8                            
0000C5D8                            loc_BE80:
0000C5D8 B044                       		cmp.w	d4,d0
0000C5DA 62CA                       		bhi.s	loc_BE4E
0000C5DC                            
0000C5DC                            loc_BE84:
0000C5DC 121A                       		move.b	(a2)+,d1
0000C5DE 4881                       		ext.w	d1
0000C5E0 3029 000C                  		move.w	$C(a1),d0
0000C5E4 9041                       		sub.w	d1,d0
0000C5E6 9043                       		sub.w	d3,d0
0000C5E8 6400                       		bcc.s	loc_BE9A
0000C5EA D241                       		add.w	d1,d1
0000C5EC D041                       		add.w	d1,d0
0000C5EE 6500                       		bcs.s	loc_BE9E
0000C5F0 60B4                       		bra.s	loc_BE4E
0000C5F2                            ; ===========================================================================
0000C5F2                            
0000C5F2                            loc_BE9A:
0000C5F2 B045                       		cmp.w	d5,d0
0000C5F4 62B0                       		bhi.s	loc_BE4E
0000C5F6                            
0000C5F6                            loc_BE9E:
0000C5F6 361F                       		move.w	(sp)+,d3
0000C5F8 7001                       		moveq	#1,d0
0000C5FA 4E75                       		rts	
0000C5FC                            ; End of function Obj32_MZBlock
0000C5FC                            
0000C5FC                            ; ===========================================================================
0000C5FC                            ; ---------------------------------------------------------------------------
0000C5FC                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C5FC                            ; ---------------------------------------------------------------------------
0000C5FC                            Map_obj32:
0000C5FC                            	include "_maps\obj32.asm"
0000C5FC                            ; ---------------------------------------------------------------------------
0000C5FC                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C5FC                            ; ---------------------------------------------------------------------------
0000C5FC 0000                       		dc.w byte_BEAC-Map_obj32
0000C5FE 0000                       		dc.w byte_BEB7-Map_obj32
0000C600 0000                       		dc.w byte_BEC2-Map_obj32
0000C602 0000                       		dc.w byte_BEB7-Map_obj32
0000C604 02                         byte_BEAC:	dc.b 2
0000C605 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C60A F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C60F 02                         byte_BEB7:	dc.b 2
0000C610 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C615 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C61A 02                         byte_BEC2:	dc.b 2
0000C61B F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C620 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C625 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C62A                            		even
0000C62A                            		even
0000C62A                            
0000C62A                            ; ===========================================================================
0000C62A                            ; ---------------------------------------------------------------------------
0000C62A                            ; Object 33 - pushable blocks (MZ, LZ)
0000C62A                            ; ---------------------------------------------------------------------------
0000C62A                            
0000C62A                            Obj33:					; XREF: Obj_Index
0000C62A 7000                       		moveq	#0,d0
0000C62C 1028 0024                  		move.b	$24(a0),d0
0000C630 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C634 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C638                            ; ===========================================================================
0000C638 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C63A 0000                       		dc.w loc_BF6E-Obj33_Index
0000C63C 0000                       		dc.w loc_C02C-Obj33_Index
0000C63E                            
0000C63E 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C640 4001                       		dc.b $40, 1
0000C642                            ; ===========================================================================
0000C642                            
0000C642                            Obj33_Main:				; XREF: Obj33_Index
0000C642 5428 0024                  		addq.b	#2,$24(a0)
0000C646 117C 000F 0016             		move.b	#$F,$16(a0)
0000C64C 117C 000F 0017             		move.b	#$F,$17(a0)
0000C652 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C65A 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C660 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C666 6600                       		bne.s	loc_BF16
0000C668 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C66E                            
0000C66E                            loc_BF16:
0000C66E 117C 0004 0001             		move.b	#4,1(a0)
0000C674 117C 0003 0018             		move.b	#3,$18(a0)
0000C67A 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C680 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C686 7000                       		moveq	#0,d0
0000C688 1028 0028                  		move.b	$28(a0),d0
0000C68C D040                       		add.w	d0,d0
0000C68E 0240 000E                  		andi.w	#$E,d0
0000C692 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C696 115A 0019                  		move.b	(a2)+,$19(a0)
0000C69A 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C69E 4A28 0028                  		tst.b	$28(a0)
0000C6A2 6700                       		beq.s	Obj33_ChkGone
0000C6A4 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C6AA                            
0000C6AA                            Obj33_ChkGone:
0000C6AA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C6AE 7000                       		moveq	#0,d0
0000C6B0 1028 0023                  		move.b	$23(a0),d0
0000C6B4 6700                       		beq.s	loc_BF6E
0000C6B6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C6BC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C6C2 6600 0000                  		bne.w	DeleteObject
0000C6C6                            
0000C6C6                            loc_BF6E:				; XREF: Obj33_Index
0000C6C6 4A28 0032                  		tst.b	$32(a0)
0000C6CA 6600 0000                  		bne.w	loc_C046
0000C6CE 7200                       		moveq	#0,d1
0000C6D0 1228 0019                  		move.b	$19(a0),d1
0000C6D4 0641 000B                  		addi.w	#$B,d1
0000C6D8 343C 0010                  		move.w	#$10,d2
0000C6DC 363C 0011                  		move.w	#$11,d3
0000C6E0 3828 0008                  		move.w	8(a0),d4
0000C6E4 6100 0000                  		bsr.w	loc_C186
0000C6E8 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C6EE 6600                       		bne.s	loc_BFC6	; if not, branch
0000C6F0 08A8 0007 0028             		bclr	#7,$28(a0)
0000C6F6 3028 0008                  		move.w	8(a0),d0
0000C6FA 0C40 0A20                  		cmpi.w	#$A20,d0
0000C6FE 6500                       		bcs.s	loc_BFC6
0000C700 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C704 6400                       		bcc.s	loc_BFC6
0000C706 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C70A 0440 001C                  		subi.w	#$1C,d0
0000C70E 3140 000C                  		move.w	d0,$C(a0)
0000C712 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C718 08E8 0007 0028             		bset	#7,$28(a0)
0000C71E                            
0000C71E                            loc_BFC6:
0000C71E 3028 0008                  		move.w	8(a0),d0
0000C722 0240 FF80                  		andi.w	#$FF80,d0
0000C726 3238 F700                  		move.w	($FFFFF700).w,d1
0000C72A 0441 0080                  		subi.w	#$80,d1
0000C72E 0241 FF80                  		andi.w	#$FF80,d1
0000C732 9041                       		sub.w	d1,d0
0000C734 0C40 0280                  		cmpi.w	#$280,d0
0000C738 6200                       		bhi.s	loc_BFE6
0000C73A 6000 0000                  		bra.w	DisplaySprite
0000C73E                            ; ===========================================================================
0000C73E                            
0000C73E                            loc_BFE6:
0000C73E 3028 0034                  		move.w	$34(a0),d0
0000C742 0240 FF80                  		andi.w	#$FF80,d0
0000C746 3238 F700                  		move.w	($FFFFF700).w,d1
0000C74A 0441 0080                  		subi.w	#$80,d1
0000C74E 0241 FF80                  		andi.w	#$FF80,d1
0000C752 9041                       		sub.w	d1,d0
0000C754 0C40 0280                  		cmpi.w	#$280,d0
0000C758 6200                       		bhi.s	loc_C016
0000C75A 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C760 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C766 117C 0004 0024             		move.b	#4,$24(a0)
0000C76C 6000                       		bra.s	loc_C02C
0000C76E                            ; ===========================================================================
0000C76E                            
0000C76E                            loc_C016:
0000C76E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C772 7000                       		moveq	#0,d0
0000C774 1028 0023                  		move.b	$23(a0),d0
0000C778 6700                       		beq.s	loc_C028
0000C77A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C780                            
0000C780                            loc_C028:
0000C780 6000 0000                  		bra.w	DeleteObject
0000C784                            ; ===========================================================================
0000C784                            
0000C784                            loc_C02C:				; XREF: Obj33_Index
0000C784 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C788 6700                       		beq.s	locret_C044
0000C78A 117C 0002 0024             		move.b	#2,$24(a0)
0000C790 4228 0032                  		clr.b	$32(a0)
0000C794 4268 0010                  		clr.w	$10(a0)
0000C798 4268 0012                  		clr.w	$12(a0)
0000C79C                            
0000C79C                            locret_C044:
0000C79C 4E75                       		rts	
0000C79E                            ; ===========================================================================
0000C79E                            
0000C79E                            loc_C046:				; XREF: loc_BF6E
0000C79E 3F28 0008                  		move.w	8(a0),-(sp)
0000C7A2 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C7A8 6400                       		bcc.s	loc_C056
0000C7AA 6100 0000                  		bsr.w	SpeedToPos
0000C7AE                            
0000C7AE                            loc_C056:
0000C7AE 0828 0001 0022             		btst	#1,$22(a0)
0000C7B4 6700                       		beq.s	loc_C0A0
0000C7B6 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C7BC 4EB9 0000 0000             		jsr	ObjHitFloor
0000C7C2 4A41                       		tst.w	d1
0000C7C4 6A00 0000                  		bpl.w	loc_C09E
0000C7C8 D368 000C                  		add.w	d1,$C(a0)
0000C7CC 4268 0012                  		clr.w	$12(a0)
0000C7D0 08A8 0001 0022             		bclr	#1,$22(a0)
0000C7D6 3011                       		move.w	(a1),d0
0000C7D8 0240 03FF                  		andi.w	#$3FF,d0
0000C7DC 0C40 016A                  		cmpi.w	#$16A,d0
0000C7E0 6500                       		bcs.s	loc_C09E
0000C7E2 3028 0030                  		move.w	$30(a0),d0
0000C7E6 E640                       		asr.w	#3,d0
0000C7E8 3140 0010                  		move.w	d0,$10(a0)
0000C7EC 117C 0001 0032             		move.b	#1,$32(a0)
0000C7F2 4268 000E                  		clr.w	$E(a0)
0000C7F6                            
0000C7F6                            loc_C09E:
0000C7F6 6000                       		bra.s	loc_C0E6
0000C7F8                            ; ===========================================================================
0000C7F8                            
0000C7F8                            loc_C0A0:
0000C7F8 4A68 0010                  		tst.w	$10(a0)
0000C7FC 6700 0000                  		beq.w	loc_C0D6
0000C800 6B00                       		bmi.s	loc_C0BC
0000C802 7600                       		moveq	#0,d3
0000C804 1628 0019                  		move.b	$19(a0),d3
0000C808 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C80E 4A41                       		tst.w	d1		; has block touched a wall?
0000C810 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C812 6000                       		bra.s	loc_C0E6
0000C814                            ; ===========================================================================
0000C814                            
0000C814                            loc_C0BC:
0000C814 7600                       		moveq	#0,d3
0000C816 1628 0019                  		move.b	$19(a0),d3
0000C81A 4643                       		not.w	d3
0000C81C 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C822 4A41                       		tst.w	d1		; has block touched a wall?
0000C824 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C826 6000                       		bra.s	loc_C0E6
0000C828                            ; ===========================================================================
0000C828                            
0000C828                            Obj33_StopPush:
0000C828 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C82C 6000                       		bra.s	loc_C0E6
0000C82E                            ; ===========================================================================
0000C82E                            
0000C82E                            loc_C0D6:
0000C82E 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C836 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C83C 6400                       		bcc.s	loc_C104
0000C83E                            
0000C83E                            loc_C0E6:
0000C83E 7200                       		moveq	#0,d1
0000C840 1228 0019                  		move.b	$19(a0),d1
0000C844 0641 000B                  		addi.w	#$B,d1
0000C848 343C 0010                  		move.w	#$10,d2
0000C84C 363C 0011                  		move.w	#$11,d3
0000C850 381F                       		move.w	(sp)+,d4
0000C852 6100 0000                  		bsr.w	loc_C186
0000C856 6100                       		bsr.s	Obj33_ChkLava
0000C858 6000 FEC4                  		bra.w	loc_BFC6
0000C85C                            ; ===========================================================================
0000C85C                            
0000C85C                            loc_C104:
0000C85C 381F                       		move.w	(sp)+,d4
0000C85E 43F8 D000                  		lea	($FFFFD000).w,a1
0000C862 08A9 0003 0022             		bclr	#3,$22(a1)
0000C868 08A8 0003 0022             		bclr	#3,$22(a0)
0000C86E 6000 FECE                  		bra.w	loc_BFE6
0000C872                            ; ===========================================================================
0000C872                            
0000C872                            Obj33_ChkLava:
0000C872 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C878 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C87A 343C FFE0                  		move.w	#-$20,d2
0000C87E 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C884 6700                       		beq.s	Obj33_LoadLava
0000C886 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C88C 6700                       		beq.s	Obj33_LoadLava
0000C88E 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C894 6700                       		beq.s	Obj33_LoadLava
0000C896 4E75                       		rts	
0000C898                            ; ===========================================================================
0000C898                            
0000C898                            Obj33_ChkLava2:
0000C898 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C89E 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C8A0 343C 0020                  		move.w	#$20,d2
0000C8A4 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C8AA 6700                       		beq.s	Obj33_LoadLava
0000C8AC 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C8B2 6700                       		beq.s	Obj33_LoadLava
0000C8B4                            
0000C8B4                            Obj33_NoLava:
0000C8B4 4E75                       		rts	
0000C8B6                            ; ===========================================================================
0000C8B6                            
0000C8B6                            Obj33_LoadLava:
0000C8B6 6100 0000                  		bsr.w	SingleObjLoad
0000C8BA 6600                       		bne.s	locret_C184
0000C8BC 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C8C0 3368 0008 0008             		move.w	8(a0),8(a1)
0000C8C6 D569 0008                  		add.w	d2,8(a1)
0000C8CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C8D0 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C8D6 2348 003C                  		move.l	a0,$3C(a1)
0000C8DA                            
0000C8DA                            locret_C184:
0000C8DA 4E75                       		rts	
0000C8DC                            ; ===========================================================================
0000C8DC                            
0000C8DC                            loc_C186:				; XREF: loc_BF6E
0000C8DC 1028 0025                  		move.b	$25(a0),d0
0000C8E0 6700 0000                  		beq.w	loc_C218
0000C8E4 5500                       		subq.b	#2,d0
0000C8E6 6600                       		bne.s	loc_C1AA
0000C8E8 6100 B312                  		bsr.w	ExitPlatform
0000C8EC 0829 0003 0022             		btst	#3,$22(a1)
0000C8F2 6600                       		bne.s	loc_C1A4
0000C8F4 4228 0025                  		clr.b	$25(a0)
0000C8F8 4E75                       		rts	
0000C8FA                            ; ===========================================================================
0000C8FA                            
0000C8FA                            loc_C1A4:
0000C8FA 3404                       		move.w	d4,d2
0000C8FC 6000 B85C                  		bra.w	MvSonicOnPtfm
0000C900                            ; ===========================================================================
0000C900                            
0000C900                            loc_C1AA:
0000C900 5500                       		subq.b	#2,d0
0000C902 6600                       		bne.s	loc_C1F2
0000C904 6100 0000                  		bsr.w	SpeedToPos
0000C908 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C90E 4EB9 0000 0000             		jsr	ObjHitFloor
0000C914 4A41                       		tst.w	d1
0000C916 6A00 0000                  		bpl.w	locret_C1F0
0000C91A D368 000C                  		add.w	d1,$C(a0)
0000C91E 4268 0012                  		clr.w	$12(a0)
0000C922 4228 0025                  		clr.b	$25(a0)
0000C926 3011                       		move.w	(a1),d0
0000C928 0240 03FF                  		andi.w	#$3FF,d0
0000C92C 0C40 016A                  		cmpi.w	#$16A,d0
0000C930 6500                       		bcs.s	locret_C1F0
0000C932 3028 0030                  		move.w	$30(a0),d0
0000C936 E640                       		asr.w	#3,d0
0000C938 3140 0010                  		move.w	d0,$10(a0)
0000C93C 117C 0001 0032             		move.b	#1,$32(a0)
0000C942 4268 000E                  		clr.w	$E(a0)
0000C946                            
0000C946                            locret_C1F0:
0000C946 4E75                       		rts	
0000C948                            ; ===========================================================================
0000C948                            
0000C948                            loc_C1F2:
0000C948 6100 0000                  		bsr.w	SpeedToPos
0000C94C 3028 0008                  		move.w	8(a0),d0
0000C950 0240 000C                  		andi.w	#$C,d0
0000C954 6600 0000                  		bne.w	locret_C2E4
0000C958 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C95E 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C964 4268 0010                  		clr.w	$10(a0)
0000C968 5528 0025                  		subq.b	#2,$25(a0)
0000C96C 4E75                       		rts	
0000C96E                            ; ===========================================================================
0000C96E                            
0000C96E                            loc_C218:
0000C96E 6100 0000                  		bsr.w	loc_FAC8
0000C972 4A44                       		tst.w	d4
0000C974 6700 0000                  		beq.w	locret_C2E4
0000C978 6B00 0000                  		bmi.w	locret_C2E4
0000C97C 4A28 0032                  		tst.b	$32(a0)
0000C980 6700                       		beq.s	loc_C230
0000C982 6000 0000                  		bra.w	locret_C2E4
0000C986                            ; ===========================================================================
0000C986                            
0000C986                            loc_C230:
0000C986 4A40                       		tst.w	d0
0000C988 6700 0000                  		beq.w	locret_C2E4
0000C98C 6B00                       		bmi.s	loc_C268
0000C98E 0829 0000 0022             		btst	#0,$22(a1)
0000C994 6600 0000                  		bne.w	locret_C2E4
0000C998 3F00                       		move.w	d0,-(sp)
0000C99A 7600                       		moveq	#0,d3
0000C99C 1628 0019                  		move.b	$19(a0),d3
0000C9A0 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C9A6 301F                       		move.w	(sp)+,d0
0000C9A8 4A41                       		tst.w	d1
0000C9AA 6B00 0000                  		bmi.w	locret_C2E4
0000C9AE 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C9B6 7001                       		moveq	#1,d0
0000C9B8 323C 0040                  		move.w	#$40,d1
0000C9BC 6000                       		bra.s	loc_C294
0000C9BE                            ; ===========================================================================
0000C9BE                            
0000C9BE                            loc_C268:
0000C9BE 0829 0000 0022             		btst	#0,$22(a1)
0000C9C4 6700                       		beq.s	locret_C2E4
0000C9C6 3F00                       		move.w	d0,-(sp)
0000C9C8 7600                       		moveq	#0,d3
0000C9CA 1628 0019                  		move.b	$19(a0),d3
0000C9CE 4643                       		not.w	d3
0000C9D0 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C9D6 301F                       		move.w	(sp)+,d0
0000C9D8 4A41                       		tst.w	d1
0000C9DA 6B00                       		bmi.s	locret_C2E4
0000C9DC 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C9E4 70FF                       		moveq	#-1,d0
0000C9E6 323C FFC0                  		move.w	#-$40,d1
0000C9EA                            
0000C9EA                            loc_C294:
0000C9EA 43F8 D000                  		lea	($FFFFD000).w,a1
0000C9EE D169 0008                  		add.w	d0,8(a1)
0000C9F2 3341 0014                  		move.w	d1,$14(a1)
0000C9F6 337C 0000 0010             		move.w	#0,$10(a1)
0000C9FC 3F00                       		move.w	d0,-(sp)
0000C9FE 303C 00A7                  		move.w	#$A7,d0
0000CA02 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CA08 301F                       		move.w	(sp)+,d0
0000CA0A 4A28 0028                  		tst.b	$28(a0)
0000CA0E 6B00                       		bmi.s	locret_C2E4
0000CA10 3F00                       		move.w	d0,-(sp)
0000CA12 4EB9 0000 0000             		jsr	ObjHitFloor
0000CA18 301F                       		move.w	(sp)+,d0
0000CA1A 0C41 0004                  		cmpi.w	#4,d1
0000CA1E 6F00                       		ble.s	loc_C2E0
0000CA20 317C 0400 0010             		move.w	#$400,$10(a0)
0000CA26 4A40                       		tst.w	d0
0000CA28 6A00                       		bpl.s	loc_C2D8
0000CA2A 4468 0010                  		neg.w	$10(a0)
0000CA2E                            
0000CA2E                            loc_C2D8:
0000CA2E 117C 0006 0025             		move.b	#6,$25(a0)
0000CA34 6000                       		bra.s	locret_C2E4
0000CA36                            ; ===========================================================================
0000CA36                            
0000CA36                            loc_C2E0:
0000CA36 D368 000C                  		add.w	d1,$C(a0)
0000CA3A                            
0000CA3A                            locret_C2E4:
0000CA3A 4E75                       		rts	
0000CA3C                            ; ===========================================================================
0000CA3C                            ; ---------------------------------------------------------------------------
0000CA3C                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CA3C                            ; ---------------------------------------------------------------------------
0000CA3C                            Map_obj33:
0000CA3C                            	include "_maps\obj33.asm"
0000CA3C                            ; ---------------------------------------------------------------------------
0000CA3C                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CA3C                            ; ---------------------------------------------------------------------------
0000CA3C 0000                       		dc.w byte_C2EA-Map_obj33
0000CA3E 0000                       		dc.w byte_C2F0-Map_obj33
0000CA40 01                         byte_C2EA:	dc.b 1
0000CA41 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CA46 04                         byte_C2F0:	dc.b 4
0000CA47 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CA4C F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CA51 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CA56 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CA5C 00                         		even
0000CA5C 00                         		even
0000CA5C                            
0000CA5C                            ; ===========================================================================
0000CA5C                            ; ---------------------------------------------------------------------------
0000CA5C                            ; Object 34 - zone title cards
0000CA5C                            ; ---------------------------------------------------------------------------
0000CA5C                            
0000CA5C                            Obj34:					; XREF: Obj_Index
0000CA5C 7000                       		moveq	#0,d0
0000CA5E 1028 0024                  		move.b	$24(a0),d0
0000CA62 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CA66 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CA6A                            ; ===========================================================================
0000CA6A 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CA6C 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CA6E 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA70 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA72                            ; ===========================================================================
0000CA72                            
0000CA72                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CA72 2248                       		movea.l	a0,a1
0000CA74 7000                       		moveq	#0,d0
0000CA76 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CA7A 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CA80 6600                       		bne.s	Obj34_CheckFZ
0000CA82 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CA84                            
0000CA84                            Obj34_CheckFZ:
0000CA84 3400                       		move.w	d0,d2
0000CA86 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CA8C 6600                       		bne.s	Obj34_LoadConfig
0000CA8E 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CA90 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CA92                            
0000CA92                            Obj34_LoadConfig:
0000CA92 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CA98 E948                       		lsl.w	#4,d0
0000CA9A D6C0                       		adda.w	d0,a3
0000CA9C 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CAA2 7203                       		moveq	#3,d1
0000CAA4                            
0000CAA4                            Obj34_Loop:
0000CAA4 12BC 0034                  		move.b	#$34,0(a1)
0000CAA8 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CAAC 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CAB0 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CAB4 335A 000A                  		move.w	(a2)+,$A(a1)
0000CAB8 135A 0024                  		move.b	(a2)+,$24(a1)
0000CABC 101A                       		move.b	(a2)+,d0
0000CABE 6600                       		bne.s	Obj34_ActNumber
0000CAC0 1002                       		move.b	d2,d0
0000CAC2                            
0000CAC2                            Obj34_ActNumber:
0000CAC2 0C00 0007                  		cmpi.b	#7,d0
0000CAC6 6600                       		bne.s	Obj34_MakeSprite
0000CAC8 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CACC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CAD2 6600                       		bne.s	Obj34_MakeSprite
0000CAD4 5300                       		subq.b	#1,d0
0000CAD6                            
0000CAD6                            Obj34_MakeSprite:
0000CAD6 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CADA 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CAE2 337C 8580 0002             		move.w	#$8580,2(a1)
0000CAE8 137C 0078 0019             		move.b	#$78,$19(a1)
0000CAEE 137C 0000 0001             		move.b	#0,1(a1)
0000CAF4 137C 0000 0018             		move.b	#0,$18(a1)
0000CAFA 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CB00 43E9 0040                  		lea	$40(a1),a1	; next object
0000CB04 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CB08                            
0000CB08                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CB08 7210                       		moveq	#$10,d1		; set horizontal speed
0000CB0A 3028 0030                  		move.w	$30(a0),d0
0000CB0E B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CB12 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CB14 6C00                       		bge.s	Obj34_Move
0000CB16 4441                       		neg.w	d1
0000CB18                            
0000CB18                            Obj34_Move:
0000CB18 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB1C                            
0000CB1C                            loc_C3C8:
0000CB1C 3028 0008                  		move.w	8(a0),d0
0000CB20 6B00                       		bmi.s	locret_C3D8
0000CB22 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB26 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CB28 6000 0000                  		bra.w	DisplaySprite
0000CB2C                            ; ===========================================================================
0000CB2C                            
0000CB2C                            locret_C3D8:
0000CB2C 4E75                       		rts	
0000CB2E                            ; ===========================================================================
0000CB2E                            
0000CB2E                            Obj34_Wait:				; XREF: Obj34_Index
0000CB2E 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CB32 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CB34 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CB38 6000 0000                  		bra.w	DisplaySprite
0000CB3C                            ; ===========================================================================
0000CB3C                            
0000CB3C                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CB3C 4A28 0001                  		tst.b	1(a0)
0000CB40 6A00                       		bpl.s	Obj34_ChangeArt
0000CB42 7220                       		moveq	#$20,d1
0000CB44 3028 0032                  		move.w	$32(a0),d0
0000CB48 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CB4C 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CB4E 6C00                       		bge.s	Obj34_Move2
0000CB50 4441                       		neg.w	d1
0000CB52                            
0000CB52                            Obj34_Move2:
0000CB52 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB56 3028 0008                  		move.w	8(a0),d0
0000CB5A 6B00                       		bmi.s	locret_C412
0000CB5C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB60 6400                       		bcc.s	locret_C412	; if yes, branch
0000CB62 6000 0000                  		bra.w	DisplaySprite
0000CB66                            ; ===========================================================================
0000CB66                            
0000CB66                            locret_C412:
0000CB66 4E75                       		rts	
0000CB68                            ; ===========================================================================
0000CB68                            
0000CB68                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CB68 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CB6E 6600                       		bne.s	Obj34_Delete
0000CB70 7002                       		moveq	#2,d0
0000CB72 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
0000CB78 7000                       		moveq	#0,d0
0000CB7A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CB7E 0640 0015                  		addi.w	#$15,d0
0000CB82 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns
0000CB88                            
0000CB88                            Obj34_Delete:
0000CB88 6000 0000                  		bra.w	DeleteObject
0000CB8C                            ; ===========================================================================
0000CB8C 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CB8E 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CB90 00E4                       		dc.w $E4
0000CB92 0206                       		dc.b 2,	6
0000CB94 00EA                       		dc.w $EA
0000CB96 0207                       		dc.b 2,	7
0000CB98 00E0                       		dc.w $E0
0000CB9A 020A                       		dc.b 2,	$A
0000CB9C                            ; ---------------------------------------------------------------------------
0000CB9C                            ; Title	card configuration data
0000CB9C                            ; Format:
0000CB9C                            ; 4 bytes per item (YYYY XXXX)
0000CB9C                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CB9C                            ; ---------------------------------------------------------------------------
0000CB9C 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CBAC 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CBBC 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CBCC 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CBDC 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CBEC 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CBFC 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CC0C                            ; ===========================================================================
0000CC0C                            ; ---------------------------------------------------------------------------
0000CC0C                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CC0C                            ; ---------------------------------------------------------------------------
0000CC0C                            
0000CC0C                            Obj39:					; XREF: Obj_Index
0000CC0C 7000                       		moveq	#0,d0
0000CC0E 1028 0024                  		move.b	$24(a0),d0
0000CC12 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CC16 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CC1A                            ; ===========================================================================
0000CC1A 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CC1C 0000                       		dc.w loc_C50C-Obj39_Index
0000CC1E 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CC20                            ; ===========================================================================
0000CC20                            
0000CC20                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CC20 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CC24 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CC26 4E75                       		rts	
0000CC28                            ; ===========================================================================
0000CC28                            
0000CC28                            Obj39_Main:
0000CC28 5428 0024                  		addq.b	#2,$24(a0)
0000CC2C 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CC32 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CC38 6700                       		beq.s	loc_C4EC	; if not, branch
0000CC3A 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CC40                            
0000CC40                            loc_C4EC:
0000CC40 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CC46 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CC4E 317C 855E 0002             		move.w	#$855E,2(a0)
0000CC54 117C 0000 0001             		move.b	#0,1(a0)
0000CC5A 117C 0000 0018             		move.b	#0,$18(a0)
0000CC60                            
0000CC60                            loc_C50C:				; XREF: Obj39_Index
0000CC60 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC62 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CC68 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CC6A 6500                       		bcs.s	Obj39_Move
0000CC6C 4441                       		neg.w	d1
0000CC6E                            
0000CC6E                            Obj39_Move:
0000CC6E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC72 6000 0000                  		bra.w	DisplaySprite
0000CC76                            ; ===========================================================================
0000CC76                            
0000CC76                            Obj39_SetWait:				; XREF: Obj39_Main
0000CC76 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CC7C 5428 0024                  		addq.b	#2,$24(a0)
0000CC80 4E75                       		rts	
0000CC82                            ; ===========================================================================
0000CC82                            
0000CC82                            Obj39_Wait:				; XREF: Obj39_Index
0000CC82 1038 F605                  		move.b	($FFFFF605).w,d0
0000CC86 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CC8A 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CC8C 0828 0000 001A             		btst	#0,$1A(a0)
0000CC92 6600                       		bne.s	Obj39_Display
0000CC94 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CC98 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CC9A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CC9E 6000 0000                  		bra.w	DisplaySprite
0000CCA2                            ; ===========================================================================
0000CCA2                            
0000CCA2                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CCA2 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CCA6 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CCA8 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CCAE 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CCB2 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CCB4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CCBA 6000                       		bra.s	Obj39_Display
0000CCBC                            ; ===========================================================================
0000CCBC                            
0000CCBC                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CCBC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CCC2                            
0000CCC2                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CCC2 6000 0000                  		bra.w	DisplaySprite
0000CCC6                            ; ===========================================================================
0000CCC6                            ; ---------------------------------------------------------------------------
0000CCC6                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CCC6                            ; ---------------------------------------------------------------------------
0000CCC6                            
0000CCC6                            Obj3A:					; XREF: Obj_Index
0000CCC6 7000                       		moveq	#0,d0
0000CCC8 1028 0024                  		move.b	$24(a0),d0
0000CCCC 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CCD0 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CCD4                            ; ===========================================================================
0000CCD4 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CCD6 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CCD8 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CCDA 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CCDC 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CCDE 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CCE0 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CCE2 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CCE4 0000                       		dc.w loc_C766-Obj3A_Index
0000CCE6                            ; ===========================================================================
0000CCE6                            
0000CCE6                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CCE6 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CCEA 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CCEC 4E75                       		rts	
0000CCEE                            ; ===========================================================================
0000CCEE                            
0000CCEE                            Obj3A_Main:
0000CCEE 2248                       		movea.l	a0,a1
0000CCF0 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CCF6 7206                       		moveq	#6,d1
0000CCF8                            
0000CCF8                            Obj3A_Loop:
0000CCF8 12BC 003A                  		move.b	#$3A,0(a1)
0000CCFC 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CD00 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CD04 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CD08 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CD0C 135A 0024                  		move.b	(a2)+,$24(a1)
0000CD10 101A                       		move.b	(a2)+,d0
0000CD12 0C00 0006                  		cmpi.b	#6,d0
0000CD16 6600                       		bne.s	loc_C5CA
0000CD18 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CD1C                            
0000CD1C                            loc_C5CA:
0000CD1C 1340 001A                  		move.b	d0,$1A(a1)
0000CD20 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CD28 337C 8580 0002             		move.w	#$8580,2(a1)
0000CD2E 137C 0000 0001             		move.b	#0,1(a1)
0000CD34 43E9 0040                  		lea	$40(a1),a1
0000CD38 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CD3C                            
0000CD3C                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CD3C 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD3E 3028 0030                  		move.w	$30(a0),d0
0000CD42 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD46 6700                       		beq.s	loc_C61A	; if yes, branch
0000CD48 6C00                       		bge.s	Obj3A_Move
0000CD4A 4441                       		neg.w	d1
0000CD4C                            
0000CD4C                            Obj3A_Move:
0000CD4C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD50                            
0000CD50                            loc_C5FE:				; XREF: loc_C61A
0000CD50 3028 0008                  		move.w	8(a0),d0
0000CD54 6B00                       		bmi.s	locret_C60E
0000CD56 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD5A 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CD5C 6000 0000                  		bra.w	DisplaySprite
0000CD60                            ; ===========================================================================
0000CD60                            
0000CD60                            locret_C60E:
0000CD60 4E75                       		rts	
0000CD62                            ; ===========================================================================
0000CD62                            
0000CD62                            loc_C610:				; XREF: loc_C61A
0000CD62 117C 000E 0024             		move.b	#$E,$24(a0)
0000CD68 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CD6C                            ; ===========================================================================
0000CD6C                            
0000CD6C                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CD6C 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CD72 67EE                       		beq.s	loc_C610
0000CD74 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CD7A 66D4                       		bne.s	loc_C5FE
0000CD7C 5428 0024                  		addq.b	#2,$24(a0)
0000CD80 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD86                            
0000CD86                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CD86 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CD8A 6600                       		bne.s	Obj3A_Display
0000CD8C 5428 0024                  		addq.b	#2,$24(a0)
0000CD90                            
0000CD90                            Obj3A_Display:
0000CD90 6000 0000                  		bra.w	DisplaySprite
0000CD94                            ; ===========================================================================
0000CD94                            
0000CD94                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CD94 6100 0000                  		bsr.w	DisplaySprite
0000CD98 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CD9E 7000                       		moveq	#0,d0
0000CDA0 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CDA4 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CDA6 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CDAA 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CDB0                            
0000CDB0                            Obj3A_RingBonus:
0000CDB0 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CDB4 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CDB6 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CDBA 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CDC0                            
0000CDC0                            Obj3A_ChkBonus:
0000CDC0 4A40                       		tst.w	d0		; is there any bonus?
0000CDC2 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CDC4 303C 00C5                  		move.w	#$C5,d0
0000CDC8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CDCE 5428 0024                  		addq.b	#2,$24(a0)
0000CDD2 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CDD8 6600                       		bne.s	Obj3A_SetDelay
0000CDDA 5828 0024                  		addq.b	#4,$24(a0)
0000CDDE                            
0000CDDE                            Obj3A_SetDelay:
0000CDDE 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CDE4                            
0000CDE4                            locret_C692:
0000CDE4 4E75                       		rts	
0000CDE6                            ; ===========================================================================
0000CDE6                            
0000CDE6                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CDE6 4EB9 0000 0000             		jsr	AddPoints
0000CDEC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CDF0 0200 0003                  		andi.b	#3,d0
0000CDF4 66EE                       		bne.s	locret_C692
0000CDF6 303C 00CD                  		move.w	#$CD,d0
0000CDFA 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CE00                            ; ===========================================================================
0000CE00                            
0000CE00                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CE00 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CE04 0240 0007                  		andi.w	#7,d0
0000CE08 E748                       		lsl.w	#3,d0
0000CE0A 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CE0E 0241 0003                  		andi.w	#3,d1
0000CE12 D241                       		add.w	d1,d1
0000CE14 D041                       		add.w	d1,d0
0000CE16 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CE1A 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CE1E 4A40                       		tst.w	d0
0000CE20 6600                       		bne.s	Obj3A_ChkSS
0000CE22 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CE28 6000                       		bra.s	Obj3A_Display2
0000CE2A                            ; ===========================================================================
0000CE2A                            
0000CE2A                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CE2A 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CE2E 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CE32 6700                       		beq.s	loc_C6EA	; if not, branch
0000CE34 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CE3A 6000                       		bra.s	Obj3A_Display2
0000CE3C                            ; ===========================================================================
0000CE3C                            
0000CE3C                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CE3C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE42                            
0000CE42                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CE42 6000 0000                  		bra.w	DisplaySprite
0000CE46                            ; ===========================================================================
0000CE46                            ; ---------------------------------------------------------------------------
0000CE46                            ; Level	order array
0000CE46                            ; ---------------------------------------------------------------------------
0000CE46                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CE76                            		even
0000CE76                            ; ===========================================================================
0000CE76                            
0000CE76                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CE76 7220                       		moveq	#$20,d1		; set horizontal speed
0000CE78 3028 0032                  		move.w	$32(a0),d0
0000CE7C B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CE80 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CE82 6C00                       		bge.s	Obj3A_Move2
0000CE84 4441                       		neg.w	d1
0000CE86                            
0000CE86                            Obj3A_Move2:
0000CE86 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE8A 3028 0008                  		move.w	8(a0),d0
0000CE8E 6B00                       		bmi.s	locret_C748
0000CE90 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CE94 6400                       		bcc.s	locret_C748	; if yes, branch
0000CE96 6000 0000                  		bra.w	DisplaySprite
0000CE9A                            ; ===========================================================================
0000CE9A                            
0000CE9A                            locret_C748:
0000CE9A 4E75                       		rts	
0000CE9C                            ; ===========================================================================
0000CE9C                            
0000CE9C                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CE9C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CEA2 6600 0000                  		bne.w	DeleteObject
0000CEA6 5428 0024                  		addq.b	#2,$24(a0)
0000CEAA 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CEAE 303C 008D                  		move.w	#$8D,d0
0000CEB2 4EF9 0000 15BA             		jmp	(PlaySound).l	; play FZ music
0000CEB8                            ; ===========================================================================
0000CEB8                            
0000CEB8                            loc_C766:				; XREF: Obj3A_Index
0000CEB8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CEBC 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CEC2 6700 0000                  		beq.w	DeleteObject
0000CEC6 4E75                       		rts	
0000CEC8                            ; ===========================================================================
0000CEC8 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CECE 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CED0 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CED6 0201                       		dc.b 2,	1
0000CED8 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CEDE 0206                       		dc.b 2,	6
0000CEE0 0520 0120 00EC             		dc.w $520, $120, $EC
0000CEE6 0202                       		dc.b 2,	2
0000CEE8 0540 0120 00FC             		dc.w $540, $120, $FC
0000CEEE 0203                       		dc.b 2,	3
0000CEF0 0560 0120 010C             		dc.w $560, $120, $10C
0000CEF6 0204                       		dc.b 2,	4
0000CEF8 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CEFE 0205                       		dc.b 2,	5
0000CF00                            ; ===========================================================================
0000CF00                            ; ---------------------------------------------------------------------------
0000CF00                            ; Object 7E - special stage results screen
0000CF00                            ; ---------------------------------------------------------------------------
0000CF00                            
0000CF00                            Obj7E:					; XREF: Obj_Index
0000CF00 7000                       		moveq	#0,d0
0000CF02 1028 0024                  		move.b	$24(a0),d0
0000CF06 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CF0A 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CF0E                            ; ===========================================================================
0000CF0E 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CF10 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CF12 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF14 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CF16 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF18 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CF1A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF1C 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CF1E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF20 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CF22 0000                       		dc.w loc_C91A-Obj7E_Index
0000CF24                            ; ===========================================================================
0000CF24                            
0000CF24                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CF24 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CF28 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CF2A 4E75                       		rts	
0000CF2C                            ; ===========================================================================
0000CF2C                            
0000CF2C                            Obj7E_Main:
0000CF2C 2248                       		movea.l	a0,a1
0000CF2E 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CF34 7203                       		moveq	#3,d1
0000CF36 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CF3C 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CF3E 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CF40                            
0000CF40                            Obj7E_Loop:
0000CF40 12BC 007E                  		move.b	#$7E,0(a1)
0000CF44 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CF48 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CF4C 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CF50 135A 0024                  		move.b	(a2)+,$24(a1)
0000CF54 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CF58 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CF60 337C 8580 0002             		move.w	#$8580,2(a1)
0000CF66 137C 0000 0001             		move.b	#0,1(a1)
0000CF6C 43E9 0040                  		lea	$40(a1),a1
0000CF70 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CF74                            
0000CF74 7007                       		moveq	#7,d0
0000CF76 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CF7A 6700                       		beq.s	loc_C842
0000CF7C 7000                       		moveq	#0,d0
0000CF7E 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CF82 6600                       		bne.s	loc_C842	; if not, branch
0000CF84 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CF86 317C 0018 0008             		move.w	#$18,8(a0)
0000CF8C 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CF92                            
0000CF92                            loc_C842:
0000CF92 1140 001A                  		move.b	d0,$1A(a0)
0000CF96                            
0000CF96                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CF96 7210                       		moveq	#$10,d1		; set horizontal speed
0000CF98 3028 0030                  		move.w	$30(a0),d0
0000CF9C B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CFA0 6700                       		beq.s	loc_C86C	; if yes, branch
0000CFA2 6C00                       		bge.s	Obj7E_Move
0000CFA4 4441                       		neg.w	d1
0000CFA6                            
0000CFA6                            Obj7E_Move:
0000CFA6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CFAA                            
0000CFAA                            loc_C85A:				; XREF: loc_C86C
0000CFAA 3028 0008                  		move.w	8(a0),d0
0000CFAE 6B00                       		bmi.s	locret_C86A
0000CFB0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CFB4 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CFB6 6000 0000                  		bra.w	DisplaySprite
0000CFBA                            ; ===========================================================================
0000CFBA                            
0000CFBA                            locret_C86A:
0000CFBA 4E75                       		rts	
0000CFBC                            ; ===========================================================================
0000CFBC                            
0000CFBC                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CFBC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CFC2 66E6                       		bne.s	loc_C85A
0000CFC4 5428 0024                  		addq.b	#2,$24(a0)
0000CFC8 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CFCE 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CFD4                            
0000CFD4                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CFD4 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CFD8 6600                       		bne.s	Obj7E_Display
0000CFDA 5428 0024                  		addq.b	#2,$24(a0)
0000CFDE                            
0000CFDE                            Obj7E_Display:
0000CFDE 6000 0000                  		bra.w	DisplaySprite
0000CFE2                            ; ===========================================================================
0000CFE2                            
0000CFE2                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CFE2 6100 0000                  		bsr.w	DisplaySprite
0000CFE6 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CFEC 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CFF0 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CFF2 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CFF8 700A                       		moveq	#10,d0		; add 10 to score
0000CFFA 4EB9 0000 0000             		jsr	AddPoints
0000D000 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D004 0200 0003                  		andi.b	#3,d0
0000D008 6600                       		bne.s	locret_C8EA
0000D00A 303C 00CD                  		move.w	#$CD,d0
0000D00E 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D014                            ; ===========================================================================
0000D014                            
0000D014                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D014 303C 00C5                  		move.w	#$C5,d0
0000D018 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D01E 5428 0024                  		addq.b	#2,$24(a0)
0000D022 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D028 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D02E 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D030 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D036 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D03A                            
0000D03A                            locret_C8EA:
0000D03A 4E75                       		rts	
0000D03C                            ; ===========================================================================
0000D03C                            
0000D03C                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D03C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D042 6000 0000                  		bra.w	DisplaySprite
0000D046                            ; ===========================================================================
0000D046                            
0000D046                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D046 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D04C 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D052 303C 00BF                  		move.w	#$BF,d0
0000D056 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play continues music
0000D05C 5428 0024                  		addq.b	#2,$24(a0)
0000D060 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D066 6000 0000                  		bra.w	DisplaySprite
0000D06A                            ; ===========================================================================
0000D06A                            
0000D06A                            loc_C91A:				; XREF: Obj7E_Index
0000D06A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D06E 0200 000F                  		andi.b	#$F,d0
0000D072 6600                       		bne.s	Obj7E_Display2
0000D074 0868 0000 001A             		bchg	#0,$1A(a0)
0000D07A                            
0000D07A                            Obj7E_Display2:
0000D07A 6000 0000                  		bra.w	DisplaySprite
0000D07E                            ; ===========================================================================
0000D07E 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D084 0200                       		dc.b 2,	0		; rountine number, frame number
0000D086 0320 0120 0118             		dc.w $320, $120, $118
0000D08C 0201                       		dc.b 2,	1
0000D08E 0360 0120 0128             		dc.w $360, $120, $128
0000D094 0202                       		dc.b 2,	2
0000D096 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D09C 0203                       		dc.b 2,	3
0000D09E 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D0A4 0206                       		dc.b 2,	6
0000D0A6                            ; ===========================================================================
0000D0A6                            ; ---------------------------------------------------------------------------
0000D0A6                            ; Object 7F - chaos emeralds from the special stage results screen
0000D0A6                            ; ---------------------------------------------------------------------------
0000D0A6                            
0000D0A6                            Obj7F:					; XREF: Obj_Index
0000D0A6 7000                       		moveq	#0,d0
0000D0A8 1028 0024                  		move.b	$24(a0),d0
0000D0AC 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D0B0 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D0B4                            ; ===========================================================================
0000D0B4 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D0B6 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D0B8                            
0000D0B8                            ; ---------------------------------------------------------------------------
0000D0B8                            ; X-axis positions for chaos emeralds
0000D0B8                            ; ---------------------------------------------------------------------------
0000D0B8 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D0C4                            ; ===========================================================================
0000D0C4                            
0000D0C4                            Obj7F_Main:				; XREF: Obj7F_Index
0000D0C4 2248                       		movea.l	a0,a1
0000D0C6 45F9 0000 D0B8             		lea	(Obj7F_PosData).l,a2
0000D0CC 7400                       		moveq	#0,d2
0000D0CE 7200                       		moveq	#0,d1
0000D0D0 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D0D4 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D0D6 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D0DA                            
0000D0DA                            Obj7F_Loop:
0000D0DA 12BC 007F                  		move.b	#$7F,0(a1)
0000D0DE 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D0E2 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D0E8 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D0EC 1633 2000                  		move.b	(a3,d2.w),d3
0000D0F0 1343 001A                  		move.b	d3,$1A(a1)
0000D0F4 1343 001C                  		move.b	d3,$1C(a1)
0000D0F8 5202                       		addq.b	#1,d2
0000D0FA 5429 0024                  		addq.b	#2,$24(a1)
0000D0FE 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D106 337C 8541 0002             		move.w	#$8541,2(a1)
0000D10C 137C 0000 0001             		move.b	#0,1(a1)
0000D112 43E9 0040                  		lea	$40(a1),a1	; next object
0000D116 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D11A                            
0000D11A                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D11A 1028 001A                  		move.b	$1A(a0),d0
0000D11E 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D124 0C00 0006                  		cmpi.b	#6,d0
0000D128 6600                       		bne.s	Obj7F_Display
0000D12A 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D130                            
0000D130                            Obj7F_Display:
0000D130 6000 0000                  		bra.w	DisplaySprite
0000D134                            ; ===========================================================================
0000D134                            ; ---------------------------------------------------------------------------
0000D134                            ; Sprite mappings - zone title cards
0000D134                            ; ---------------------------------------------------------------------------
0000D134 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000D136 0000                       		dc.w byte_CA2C-Map_obj34
0000D138 0000                       		dc.w byte_CA5A-Map_obj34
0000D13A 0000                       		dc.w byte_CA7A-Map_obj34
0000D13C 0000                       		dc.w byte_CAA8-Map_obj34
0000D13E 0000                       		dc.w byte_CADC-Map_obj34
0000D140 0000                       		dc.w byte_CB10-Map_obj34
0000D142 0000                       		dc.w byte_CB26-Map_obj34
0000D144 0000                       		dc.w byte_CB31-Map_obj34
0000D146 0000                       		dc.w byte_CB3C-Map_obj34
0000D148 0000                       		dc.w byte_CB47-Map_obj34
0000D14A 0000                       		dc.w byte_CB8A-Map_obj34
0000D14C 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000D14D F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000D152 F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000D157 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000D15C F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000D161 F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000D166 F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000D16B F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000D170 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000D175 F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000D17A F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000D17F F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000D184 F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000D189 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000D18A F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000D18F F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000D194 F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000D199 F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000D19E F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000D1A3 F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000D1A8 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D1AD F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000D1B2 F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000D1B7 F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000D1BC F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000D1C1 F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000D1C6 F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000D1CB F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000D1D0 F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000D1D5 F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000D1DA F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000D1DF F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000D1E4 F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000D1E9 F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000D1EE F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000D1F3 F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000D1F8 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000D1F9 F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000D1FE F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000D203 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000D208 F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000D20D F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000D212 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000D213 F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000D218 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000D21D F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000D222 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000D227 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000D22C F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000D231 F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000D236 F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000D23B F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000D240 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000D245 F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000D24A F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000D24F F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000D254 F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000D259 F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000D25E F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D263 F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D268 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D269 F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D26E F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D273 F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D278 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D27D F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D282 F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D287 F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D28C F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D291 F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D296 F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D29B F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D2A0 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D2A5 F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D2AA F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D2AF F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D2B4 F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D2B9 F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D2BE F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D2C3 F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D2C8 F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D2CD F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D2D2 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D2D3 F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D2D8 F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D2DD F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D2E2 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D2E7 F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D2EC F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D2F1 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D2F6 04                         byte_CB10:	dc.b 4			; ZONE
0000D2F7 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D2FC F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D301 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D306 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D30B 00                         		dc.b 0
0000D30C 02                         byte_CB26:	dc.b 2			; ACT 1
0000D30D 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D312 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D317 02                         byte_CB31:	dc.b 2			; ACT 2
0000D318 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D31D F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D322 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D323 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D328 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D32D 0D                         byte_CB47:	dc.b $D			; Oval
0000D32E E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D333 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D338 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D33D F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D342 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D347 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D34C 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D351 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D356 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D35B F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D360 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D365 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D36A 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D36F 00                         		dc.b 0
0000D370 05                         byte_CB8A:	dc.b 5			; FINAL
0000D371 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D376 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D37B F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D380 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D385 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D38A                            		even
0000D38A                            ; ---------------------------------------------------------------------------
0000D38A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D38A                            ; ---------------------------------------------------------------------------
0000D38A                            Map_obj39:
0000D38A                            	include "_maps\obj39.asm"
0000D38A                            ; ---------------------------------------------------------------------------
0000D38A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D38A                            ; ---------------------------------------------------------------------------
0000D38A 0000                       		dc.w byte_CBAC-Map_obj39
0000D38C 0000                       		dc.w byte_CBB7-Map_obj39
0000D38E 0000                       		dc.w byte_CBC2-Map_obj39
0000D390 0000                       		dc.w byte_CBCD-Map_obj39
0000D392 02                         byte_CBAC:	dc.b 2
0000D393 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D398 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D39D 02                         byte_CBB7:	dc.b 2
0000D39E F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D3A3 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D3A8 02                         byte_CBC2:	dc.b 2
0000D3A9 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D3AE F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D3B3 02                         byte_CBCD:	dc.b 2
0000D3B4 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D3B9 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D3BE                            		even
0000D3BE                            		even
0000D3BE                            
0000D3BE                            ; ---------------------------------------------------------------------------
0000D3BE                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D3BE                            ; ---------------------------------------------------------------------------
0000D3BE 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D3C0 0000                       		dc.w byte_CC13-Map_obj3A
0000D3C2 0000                       		dc.w byte_CC32-Map_obj3A
0000D3C4 0000                       		dc.w byte_CC51-Map_obj3A
0000D3C6 0000                       		dc.w byte_CC75-Map_obj3A
0000D3C8 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D3CA FF4E                       		dc.w byte_CB26-Map_obj3A
0000D3CC FF59                       		dc.w byte_CB31-Map_obj3A
0000D3CE FF64                       		dc.w byte_CB3C-Map_obj3A
0000D3D0 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D3D1 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D3D6 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D3DB F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D3E0 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D3E5 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D3EA F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D3EF F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D3F4 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D3F9 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D3FE F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D403 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D408 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D40D F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D412 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D417 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D41C 06                         byte_CC13:	dc.b 6			; PASSED
0000D41D F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D422 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D427 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D42C F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D431 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D436 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D43B 06                         byte_CC32:	dc.b 6			; SCORE
0000D43C F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D441 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D446 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D44B F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D450 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D455 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D45A 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D45B F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D460 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D465 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D46A F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D46F FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D474 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D479 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D47E 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D47F F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D484 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D489 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D48E F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D493 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D498 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D49D F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D4A2                            		even
0000D4A2                            ; ---------------------------------------------------------------------------
0000D4A2                            ; Sprite mappings - special stage results screen
0000D4A2                            ; ---------------------------------------------------------------------------
0000D4A2 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D4A4 0000                       		dc.w byte_CCEE-Map_obj7E
0000D4A6 0000                       		dc.w byte_CD0D-Map_obj7E
0000D4A8 FE8B                       		dc.w byte_CB47-Map_obj7E
0000D4AA 0000                       		dc.w byte_CD31-Map_obj7E
0000D4AC 0000                       		dc.w byte_CD46-Map_obj7E
0000D4AE 0000                       		dc.w byte_CD5B-Map_obj7E
0000D4B0 0000                       		dc.w byte_CD6B-Map_obj7E
0000D4B2 0000                       		dc.w byte_CDA8-Map_obj7E
0000D4B4 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D4B5 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D4BA F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D4BF F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D4C4 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D4C9 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D4CE F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D4D3 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D4D8 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D4DD F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D4E2 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D4E7 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D4EC F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D4F1 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D4F6 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D4F7 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D4FC F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D501 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D506 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D50B F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D510 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D515 07                         byte_CD0D:	dc.b 7
0000D516 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D51B F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D520 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D525 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D52A FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D52F F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D534 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D539 04                         byte_CD31:	dc.b 4
0000D53A F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D53F F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D544 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D549 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D54E 04                         byte_CD46:	dc.b 4
0000D54F F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D554 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D559 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D55E F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D563 03                         byte_CD5B:	dc.b 3
0000D564 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D569 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D56E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D573 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D574 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D579 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D57E F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D583 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D588 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D58D F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D592 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D597 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D59C F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D5A1 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D5A6 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D5AB F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D5B0 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D5B1 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D5B6 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D5BB F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D5C0 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D5C5 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D5CA F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D5CF F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D5D4 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D5D9 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D5DE F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D5E3 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D5E8 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D5ED F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D5F2 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D5F7 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D5FC                            		even
0000D5FC                            ; ---------------------------------------------------------------------------
0000D5FC                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D5FC                            ; ---------------------------------------------------------------------------
0000D5FC                            Map_obj7F:
0000D5FC                            	include "_maps\obj7F.asm"
0000D5FC                            ; ---------------------------------------------------------------------------
0000D5FC                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D5FC                            ; ---------------------------------------------------------------------------
0000D5FC 0000                       		dc.w byte_CE02-Map_obj7F
0000D5FE 0000                       		dc.w byte_CE08-Map_obj7F
0000D600 0000                       		dc.w byte_CE0E-Map_obj7F
0000D602 0000                       		dc.w byte_CE14-Map_obj7F
0000D604 0000                       		dc.w byte_CE1A-Map_obj7F
0000D606 0000                       		dc.w byte_CE20-Map_obj7F
0000D608 0000                       		dc.w byte_CE26-Map_obj7F
0000D60A 01                         byte_CE02:	dc.b 1
0000D60B F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D610 01                         byte_CE08:	dc.b 1
0000D611 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D616 01                         byte_CE0E:	dc.b 1
0000D617 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D61C 01                         byte_CE14:	dc.b 1
0000D61D F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D622 01                         byte_CE1A:	dc.b 1
0000D623 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D628 01                         byte_CE20:	dc.b 1
0000D629 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D62E 00                         byte_CE26:	dc.b 0			; Blank frame
0000D630 00                         		even
0000D630 00                         		even
0000D630                            
0000D630                            ; ===========================================================================
0000D630                            ; ---------------------------------------------------------------------------
0000D630                            ; Object 36 - spikes
0000D630                            ; ---------------------------------------------------------------------------
0000D630                            
0000D630                            Obj36:					; XREF: Obj_Index
0000D630 7000                       		moveq	#0,d0
0000D632 1028 0024                  		move.b	$24(a0),d0
0000D636 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D63A 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D63E                            ; ===========================================================================
0000D63E 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D640 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D642                            
0000D642 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D644 0110                       		dc.b 1,	$10
0000D646 0204                       		dc.b 2,	4
0000D648 031C                       		dc.b 3,	$1C
0000D64A 0440                       		dc.b 4,	$40
0000D64C 0510                       		dc.b 5,	$10
0000D64E                            ; ===========================================================================
0000D64E                            
0000D64E                            Obj36_Main:				; XREF: Obj36_Index
0000D64E 5428 0024                  		addq.b	#2,$24(a0)
0000D652 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D65A 317C 051B 0002             		move.w	#$51B,2(a0)
0000D660 0028 0004 0001             		ori.b	#4,1(a0)
0000D666 117C 0004 0018             		move.b	#4,$18(a0)
0000D66C 1028 0028                  		move.b	$28(a0),d0
0000D670 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D676 0240 00F0                  		andi.w	#$F0,d0
0000D67A 43F9 0000 D642             		lea	(Obj36_Var).l,a1
0000D680 E648                       		lsr.w	#3,d0
0000D682 D2C0                       		adda.w	d0,a1
0000D684 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D688 1159 0019                  		move.b	(a1)+,$19(a0)
0000D68C 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D692 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D698                            
0000D698                            Obj36_Solid:				; XREF: Obj36_Index
0000D698 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D69C 343C 0004                  		move.w	#4,d2
0000D6A0 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D6A6 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D6A8 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D6AE 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D6B0 343C 0014                  		move.w	#$14,d2
0000D6B4                            
0000D6B4                            ; Spikes types $1x and $5x face	sideways
0000D6B4                            
0000D6B4                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D6B4 323C 001B                  		move.w	#$1B,d1
0000D6B8 3602                       		move.w	d2,d3
0000D6BA 5243                       		addq.w	#1,d3
0000D6BC 3828 0008                  		move.w	8(a0),d4
0000D6C0 6100 0000                  		bsr.w	SolidObject
0000D6C4 0828 0003 0022             		btst	#3,$22(a0)
0000D6CA 6600                       		bne.s	Obj36_Display
0000D6CC 0C44 0001                  		cmpi.w	#1,d4
0000D6D0 6700                       		beq.s	Obj36_Hurt
0000D6D2 6000                       		bra.s	Obj36_Display
0000D6D4                            ; ===========================================================================
0000D6D4                            
0000D6D4                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D6D4                            
0000D6D4                            Obj36_Upright:				; XREF: Obj36_Solid
0000D6D4 7200                       		moveq	#0,d1
0000D6D6 1228 0019                  		move.b	$19(a0),d1
0000D6DA 0641 000B                  		addi.w	#$B,d1
0000D6DE 343C 0010                  		move.w	#$10,d2
0000D6E2 363C 0011                  		move.w	#$11,d3
0000D6E6 3828 0008                  		move.w	8(a0),d4
0000D6EA 6100 0000                  		bsr.w	SolidObject
0000D6EE 0828 0003 0022             		btst	#3,$22(a0)
0000D6F4 6600                       		bne.s	Obj36_Hurt
0000D6F6 4A44                       		tst.w	d4
0000D6F8 6A00                       		bpl.s	Obj36_Display
0000D6FA                            
0000D6FA                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D6FA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D6FE 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D700 2F08                       		move.l	a0,-(sp)
0000D702 2448                       		movea.l	a0,a2
0000D704 41F8 D000                  		lea	($FFFFD000).w,a0
0000D708 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D70E 6400                       		bcc.s	loc_CF20
0000D710 2628 000C                  		move.l	$C(a0),d3
0000D714 3028 0012                  		move.w	$12(a0),d0
0000D718 48C0                       		ext.l	d0
0000D71A E180                       		asl.l	#8,d0
0000D71C 9680                       		sub.l	d0,d3
0000D71E 2143 000C                  		move.l	d3,$C(a0)
0000D722 4EB9 0000 0000             		jsr	HurtSonic
0000D728                            
0000D728                            loc_CF20:
0000D728 205F                       		movea.l	(sp)+,a0
0000D72A                            
0000D72A                            Obj36_Display:
0000D72A 6100 0000                  		bsr.w	DisplaySprite
0000D72E 3028 0030                  		move.w	$30(a0),d0
0000D732 0240 FF80                  		andi.w	#$FF80,d0
0000D736 3238 F700                  		move.w	($FFFFF700).w,d1
0000D73A 0441 0080                  		subi.w	#$80,d1
0000D73E 0241 FF80                  		andi.w	#$FF80,d1
0000D742 9041                       		sub.w	d1,d0
0000D744 0C40 0280                  		cmpi.w	#$280,d0
0000D748 6200 0000                  		bhi.w	DeleteObject
0000D74C 4E75                       		rts	
0000D74E                            ; ===========================================================================
0000D74E                            
0000D74E                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D74E 7000                       		moveq	#0,d0
0000D750 1028 0028                  		move.b	$28(a0),d0
0000D754 D040                       		add.w	d0,d0
0000D756 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D75A 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D75E                            ; ===========================================================================
0000D75E 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D760 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D762 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D764                            ; ===========================================================================
0000D764                            
0000D764                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D764 4E75                       		rts			; don't move the object
0000D766                            ; ===========================================================================
0000D766                            
0000D766                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D766 6100 0000                  		bsr.w	Obj36_Wait
0000D76A 7000                       		moveq	#0,d0
0000D76C 1028 0034                  		move.b	$34(a0),d0
0000D770 D068 0032                  		add.w	$32(a0),d0
0000D774 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D778 4E75                       		rts	
0000D77A                            ; ===========================================================================
0000D77A                            
0000D77A                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D77A 6100 0000                  		bsr.w	Obj36_Wait
0000D77E 7000                       		moveq	#0,d0
0000D780 1028 0034                  		move.b	$34(a0),d0
0000D784 D068 0030                  		add.w	$30(a0),d0
0000D788 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D78C 4E75                       		rts	
0000D78E                            ; ===========================================================================
0000D78E                            
0000D78E                            Obj36_Wait:
0000D78E 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D792 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D794 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D798 6600                       		bne.s	locret_CFE6
0000D79A 4A28 0001                  		tst.b	1(a0)
0000D79E 6A00                       		bpl.s	locret_CFE6
0000D7A0 303C 00B6                  		move.w	#$B6,d0
0000D7A4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D7AA 6000                       		bra.s	locret_CFE6
0000D7AC                            ; ===========================================================================
0000D7AC                            
0000D7AC                            loc_CFA4:
0000D7AC 4A68 0036                  		tst.w	$36(a0)
0000D7B0 6700                       		beq.s	loc_CFC6
0000D7B2 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D7B8 6400                       		bcc.s	locret_CFE6
0000D7BA 317C 0000 0034             		move.w	#0,$34(a0)
0000D7C0 317C 0000 0036             		move.w	#0,$36(a0)
0000D7C6 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D7CC 6000                       		bra.s	locret_CFE6
0000D7CE                            ; ===========================================================================
0000D7CE                            
0000D7CE                            loc_CFC6:
0000D7CE 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D7D4 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D7DA 6500                       		bcs.s	locret_CFE6
0000D7DC 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D7E2 317C 0001 0036             		move.w	#1,$36(a0)
0000D7E8 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D7EE                            
0000D7EE                            locret_CFE6:
0000D7EE 4E75                       		rts	
0000D7F0                            ; ===========================================================================
0000D7F0                            ; ---------------------------------------------------------------------------
0000D7F0                            ; Sprite mappings - spikes
0000D7F0                            ; ---------------------------------------------------------------------------
0000D7F0                            Map_obj36:
0000D7F0                            	include "_maps\obj36.asm"
0000D7F0                            Map_obj36_inner:
0000D7F0 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000D7F2 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000D7F4 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000D7F6 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000D7F8 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000D7FA 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000D7FC 03                         Map_obj36_inner_C: 	dc.b $3
0000D7FD F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000D802 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D807 F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000D80C 03                         Map_obj36_inner_1C: 	dc.b $3
0000D80D EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000D812 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D817 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000D81C 01                         Map_obj36_inner_2C: 	dc.b $1
0000D81D F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D822 03                         Map_obj36_inner_32: 	dc.b $3
0000D823 F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000D828 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D82D F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000D832 06                         Map_obj36_inner_42: 	dc.b $6
0000D833 F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000D838 F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000D83D F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000D842 F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000D847 F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000D84C F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000D851 01                         Map_obj36_inner_61: 	dc.b $1
0000D852 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D858 00                         	even
0000D858 00                         	even
0000D858                            
0000D858                            ; ===========================================================================
0000D858                            ; ---------------------------------------------------------------------------
0000D858                            ; Object 3B - purple rock (GHZ)
0000D858                            ; ---------------------------------------------------------------------------
0000D858                            
0000D858                            Obj3B:					; XREF: Obj_Index
0000D858 7000                       		moveq	#0,d0
0000D85A 1028 0024                  		move.b	$24(a0),d0
0000D85E 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D862 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D866                            ; ===========================================================================
0000D866 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D868 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D86A                            ; ===========================================================================
0000D86A                            
0000D86A                            Obj3B_Main:				; XREF: Obj3B_Index
0000D86A 5428 0024                  		addq.b	#2,$24(a0)
0000D86E 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D876 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D87C 117C 0004 0001             		move.b	#4,1(a0)
0000D882 117C 0013 0019             		move.b	#$13,$19(a0)
0000D888 117C 0004 0018             		move.b	#4,$18(a0)
0000D88E                            
0000D88E                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D88E 323C 001B                  		move.w	#$1B,d1
0000D892 343C 0010                  		move.w	#$10,d2
0000D896 363C 0010                  		move.w	#$10,d3
0000D89A 3828 0008                  		move.w	8(a0),d4
0000D89E 6100 0000                  		bsr.w	SolidObject
0000D8A2 6100 0000                  		bsr.w	DisplaySprite
0000D8A6 3028 0008                  		move.w	8(a0),d0
0000D8AA 0240 FF80                  		andi.w	#$FF80,d0
0000D8AE 3238 F700                  		move.w	($FFFFF700).w,d1
0000D8B2 0441 0080                  		subi.w	#$80,d1
0000D8B6 0241 FF80                  		andi.w	#$FF80,d1
0000D8BA 9041                       		sub.w	d1,d0
0000D8BC 0C40 0280                  		cmpi.w	#$280,d0
0000D8C0 6200 0000                  		bhi.w	DeleteObject
0000D8C4 4E75                       		rts	
0000D8C6                            ; ===========================================================================
0000D8C6                            ; ---------------------------------------------------------------------------
0000D8C6                            ; Object 49 - waterfall	sound effect (GHZ)
0000D8C6                            ; ---------------------------------------------------------------------------
0000D8C6                            
0000D8C6                            Obj49:					; XREF: Obj_Index
0000D8C6 7000                       		moveq	#0,d0
0000D8C8 1028 0024                  		move.b	$24(a0),d0
0000D8CC 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D8D0 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D8D4                            ; ===========================================================================
0000D8D4 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D8D6 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D8D8                            ; ===========================================================================
0000D8D8                            
0000D8D8                            Obj49_Main:				; XREF: Obj49_Index
0000D8D8 5428 0024                  		addq.b	#2,$24(a0)
0000D8DC 117C 0004 0001             		move.b	#4,1(a0)
0000D8E2                            
0000D8E2                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D8E2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D8E6 0200 003F                  		andi.b	#$3F,d0
0000D8EA 6600                       		bne.s	Obj49_ChkDel
0000D8EC 303C 00D0                  		move.w	#$D0,d0
0000D8F0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D8F6                            
0000D8F6                            Obj49_ChkDel:
0000D8F6 3028 0008                  		move.w	8(a0),d0
0000D8FA 0240 FF80                  		andi.w	#$FF80,d0
0000D8FE 3238 F700                  		move.w	($FFFFF700).w,d1
0000D902 0441 0080                  		subi.w	#$80,d1
0000D906 0241 FF80                  		andi.w	#$FF80,d1
0000D90A 9041                       		sub.w	d1,d0
0000D90C 0C40 0280                  		cmpi.w	#$280,d0
0000D910 6200 0000                  		bhi.w	DeleteObject
0000D914 4E75                       		rts	
0000D916                            ; ===========================================================================
0000D916                            ; ---------------------------------------------------------------------------
0000D916                            ; Sprite mappings - purple rock	(GHZ)
0000D916                            ; ---------------------------------------------------------------------------
0000D916                            Map_obj3B:
0000D916                            	include "_maps\obj3B.asm"
0000D916                            ; ---------------------------------------------------------------------------
0000D916                            ; Sprite mappings - purple rock	(GHZ)
0000D916                            ; ---------------------------------------------------------------------------
0000D916 0000                       		dc.w byte_D110-Map_obj3B
0000D918 02                         byte_D110:	dc.b 2
0000D919 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D91E F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D924 00                         		even
0000D924 00                         		even
0000D924                            
0000D924                            ; ===========================================================================
0000D924                            ; ---------------------------------------------------------------------------
0000D924                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D924                            ; ---------------------------------------------------------------------------
0000D924                            
0000D924                            Obj3C:					; XREF: Obj_Index
0000D924 7000                       		moveq	#0,d0
0000D926 1028 0024                  		move.b	$24(a0),d0
0000D92A 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D92E 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D932 6000 0000                  		bra.w	MarkObjGone
0000D936                            ; ===========================================================================
0000D936 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D938 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D93A 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D93C                            ; ===========================================================================
0000D93C                            
0000D93C                            Obj3C_Main:				; XREF: Obj3C_Index
0000D93C 5428 0024                  		addq.b	#2,$24(a0)
0000D940 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D948 317C 450F 0002             		move.w	#$450F,2(a0)
0000D94E 117C 0004 0001             		move.b	#4,1(a0)
0000D954 117C 0010 0019             		move.b	#$10,$19(a0)
0000D95A 117C 0004 0018             		move.b	#4,$18(a0)
0000D960 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D966                            
0000D966                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D966 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D96C 323C 001B                  		move.w	#$1B,d1
0000D970 343C 0020                  		move.w	#$20,d2
0000D974 363C 0020                  		move.w	#$20,d3
0000D978 3828 0008                  		move.w	8(a0),d4
0000D97C 6100 0000                  		bsr.w	SolidObject
0000D980 0828 0005 0022             		btst	#5,$22(a0)
0000D986 6600                       		bne.s	Obj3C_ChkRoll
0000D988                            
0000D988                            locret_D180:
0000D988 4E75                       		rts	
0000D98A                            ; ===========================================================================
0000D98A                            
0000D98A                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D98A 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D990 66F6                       		bne.s	locret_D180	; if not, branch
0000D992 3028 0030                  		move.w	$30(a0),d0
0000D996 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D998 4440                       		neg.w	d0
0000D99A                            
0000D99A                            Obj3C_ChkSpeed:
0000D99A 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D99E 65E8                       		bcs.s	locret_D180	; if not, branch
0000D9A0 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D9A6 5869 0008                  		addq.w	#4,8(a1)
0000D9AA 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D9B0 3028 0008                  		move.w	8(a0),d0
0000D9B4 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D9B8 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D9BA 5169 0008                  		subq.w	#8,8(a1)
0000D9BE 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D9C4                            
0000D9C4                            Obj3C_Smash:
0000D9C4 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D9CA 08A8 0005 0022             		bclr	#5,$22(a0)
0000D9D0 08A9 0005 0022             		bclr	#5,$22(a1)
0000D9D6 7207                       		moveq	#7,d1		; load 8 fragments
0000D9D8 343C 0070                  		move.w	#$70,d2
0000D9DC 6100                       		bsr.s	SmashObject
0000D9DE                            
0000D9DE                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D9DE 6100 0000                  		bsr.w	SpeedToPos
0000D9E2 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D9E8 6100 0000                  		bsr.w	DisplaySprite
0000D9EC 4A28 0001                  		tst.b	1(a0)
0000D9F0 6A00 0000                  		bpl.w	DeleteObject
0000D9F4 4E75                       		rts	
0000D9F6                            
0000D9F6                            ; ---------------------------------------------------------------------------
0000D9F6                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D9F6                            ; ---------------------------------------------------------------------------
0000D9F6                            
0000D9F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9F6                            
0000D9F6                            
0000D9F6                            SmashObject:				; XREF: Obj3C_Smash
0000D9F6 7000                       		moveq	#0,d0
0000D9F8 1028 001A                  		move.b	$1A(a0),d0
0000D9FC D040                       		add.w	d0,d0
0000D9FE 2668 0004                  		movea.l	4(a0),a3
0000DA02 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DA06 524B                       		addq.w	#1,a3
0000DA08 08E8 0005 0001             		bset	#5,1(a0)
0000DA0E 1810                       		move.b	0(a0),d4
0000DA10 1A28 0001                  		move.b	1(a0),d5
0000DA14 2248                       		movea.l	a0,a1
0000DA16 6000                       		bra.s	Smash_LoadFrag
0000DA18                            ; ===========================================================================
0000DA18                            
0000DA18                            Smash_Loop:
0000DA18 6100 0000                  		bsr.w	SingleObjLoad
0000DA1C 6600                       		bne.s	Smash_PlaySnd
0000DA1E 5A4B                       		addq.w	#5,a3
0000DA20                            
0000DA20                            Smash_LoadFrag:				; XREF: SmashObject
0000DA20 137C 0004 0024             		move.b	#4,$24(a1)
0000DA26 1284                       		move.b	d4,0(a1)
0000DA28 234B 0004                  		move.l	a3,4(a1)
0000DA2C 1345 0001                  		move.b	d5,1(a1)
0000DA30 3368 0008 0008             		move.w	8(a0),8(a1)
0000DA36 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DA3C 3368 0002 0002             		move.w	2(a0),2(a1)
0000DA42 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DA48 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DA4E 335C 0010                  		move.w	(a4)+,$10(a1)
0000DA52 335C 0012                  		move.w	(a4)+,$12(a1)
0000DA56 B3C8                       		cmpa.l	a0,a1
0000DA58 6400                       		bcc.s	loc_D268
0000DA5A 2F08                       		move.l	a0,-(sp)
0000DA5C 2049                       		movea.l	a1,a0
0000DA5E 6100 0000                  		bsr.w	SpeedToPos
0000DA62 D568 0012                  		add.w	d2,$12(a0)
0000DA66 205F                       		movea.l	(sp)+,a0
0000DA68 6100 0000                  		bsr.w	DisplaySprite2
0000DA6C                            
0000DA6C                            loc_D268:
0000DA6C 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DA70                            
0000DA70                            Smash_PlaySnd:
0000DA70 303C 00CB                  		move.w	#$CB,d0
0000DA74 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DA7A                            ; End of function SmashObject
0000DA7A                            
0000DA7A                            ; ===========================================================================
0000DA7A                            ; Smashed block	fragment speeds
0000DA7A                            ;
0000DA7A 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DA7E 0600 FF00                  		dc.w $600, $FF00
0000DA82 0600 0100                  		dc.w $600, $100
0000DA86 0400 0500                  		dc.w $400, $500
0000DA8A 0600 FA00                  		dc.w $600, $FA00
0000DA8E 0800 FE00                  		dc.w $800, $FE00
0000DA92 0800 0200                  		dc.w $800, $200
0000DA96 0600 0600                  		dc.w $600, $600
0000DA9A                            
0000DA9A FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DA9E F800 FE00                  		dc.w $F800, $FE00
0000DAA2 F800 0200                  		dc.w $F800, $200
0000DAA6 FA00 0600                  		dc.w $FA00, $600
0000DAAA FC00 FB00                  		dc.w $FC00, $FB00
0000DAAE FA00 FF00                  		dc.w $FA00, $FF00
0000DAB2 FA00 0100                  		dc.w $FA00, $100
0000DAB6 FC00 0500                  		dc.w $FC00, $500
0000DABA                            ; ---------------------------------------------------------------------------
0000DABA                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DABA                            ; ---------------------------------------------------------------------------
0000DABA                            Map_obj3C:
0000DABA                            	include "_maps\obj3C.asm"
0000DABA                            ; ---------------------------------------------------------------------------
0000DABA                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DABA                            ; ---------------------------------------------------------------------------
0000DABA 0000                       		dc.w byte_D2BC-Map_obj3C
0000DABC 0000                       		dc.w byte_D2E5-Map_obj3C
0000DABE 0000                       		dc.w byte_D30E-Map_obj3C
0000DAC0 08                         byte_D2BC:	dc.b 8
0000DAC1 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DAC6 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DACB 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DAD0 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DAD5 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DADA F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DADF 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DAE4 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DAE9 08                         byte_D2E5:	dc.b 8
0000DAEA E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DAEF F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DAF4 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DAF9 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DAFE E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DB03 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DB08 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DB0D 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DB12 08                         byte_D30E:	dc.b 8
0000DB13 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DB18 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DB1D 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DB22 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DB27 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DB2C F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DB31 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DB36 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DB3C 00                         		even
0000DB3C 00                         		even
0000DB3C                            
0000DB3C                            ; ---------------------------------------------------------------------------
0000DB3C                            ; Object code loading subroutine
0000DB3C                            ; ---------------------------------------------------------------------------
0000DB3C                            
0000DB3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB3C                            
0000DB3C                            
0000DB3C                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DB3C 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DB40 7E7F                       		moveq	#$7F,d7
0000DB42 7000                       		moveq	#0,d0
0000DB44 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DB4A 6400                       		bcc.s	loc_D362
0000DB4C                            
0000DB4C                            loc_D348:
0000DB4C 1010                       		move.b	(a0),d0		; load object number from RAM
0000DB4E 6700                       		beq.s	loc_D358
0000DB50 D040                       		add.w	d0,d0
0000DB52 D040                       		add.w	d0,d0
0000DB54 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DB58 4E91                       		jsr	(a1)		; run the object's code
0000DB5A 7000                       		moveq	#0,d0
0000DB5C                            
0000DB5C                            loc_D358:
0000DB5C 41E8 0040                  		lea	$40(a0),a0	; next object
0000DB60 51CF FFEA                  		dbf	d7,loc_D348
0000DB64 4E75                       		rts	
0000DB66                            ; ===========================================================================
0000DB66                            
0000DB66                            loc_D362:
0000DB66 7E1F                       		moveq	#$1F,d7
0000DB68 61E2                       		bsr.s	loc_D348
0000DB6A 7E5F                       		moveq	#$5F,d7
0000DB6C                            
0000DB6C                            loc_D368:
0000DB6C 7000                       		moveq	#0,d0
0000DB6E 1010                       		move.b	(a0),d0
0000DB70 6700                       		beq.s	loc_D378
0000DB72 4A28 0001                  		tst.b	1(a0)
0000DB76 6A00                       		bpl.s	loc_D378
0000DB78 6100 0000                  		bsr.w	DisplaySprite
0000DB7C                            
0000DB7C                            loc_D378:
0000DB7C 41E8 0040                  		lea	$40(a0),a0
0000DB80                            
0000DB80                            loc_D37C:
0000DB80 51CF FFEA                  		dbf	d7,loc_D368
0000DB84 4E75                       		rts	
0000DB86                            ; End of function ObjectsLoad
0000DB86                            
0000DB86                            ; ===========================================================================
0000DB86                            ; ---------------------------------------------------------------------------
0000DB86                            ; Object pointers
0000DB86                            ; ---------------------------------------------------------------------------
0000DB86                            Obj_Index:
0000DB86                            	include "_inc\Object pointers.asm"
0000DB86                            ; ---------------------------------------------------------------------------
0000DB86                            ; Object pointers
0000DB86                            ; ---------------------------------------------------------------------------
0000DB86 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DB96 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DBA6 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DBB6 0000 0000 0000 ADCC 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DBC6 0000 7968 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DBD6 0000 7F8E 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DBE6 0000 87DC 0000 88D6 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DBF6 0000 8F20 0000 920E 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DC06 0000 0000 0000 9EC8 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DC16 0000 A200 0000 A7EC 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DC26 0000 9B24 0000 8FF6 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DC36 0000 B3C4 0000 A9E0 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DC46 0000 BDD8 0000 C486 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DC56 0000 B936 0000 D630 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DC66 0000 CC0C 0000 CCC6 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DC76 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DC86 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DC96 0000 C0F4 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DCA6 0000 D8C6 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DCB6 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DCC6 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DCD6 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DCE6 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DCF6 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DD06 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DD16 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DD26 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DD36 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DD46 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DD56 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DD66 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DD76 0000 0000 0000 CF00 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DD86 0000 5474 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DD96 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DDA6 0000 5B2E 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DDA6 0000 5B2E 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DDB6                            
0000DDB6                            ; ---------------------------------------------------------------------------
0000DDB6                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DDB6                            ; ---------------------------------------------------------------------------
0000DDB6                            
0000DDB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDB6                            
0000DDB6                            
0000DDB6                            ObjectFall:
0000DDB6 2428 0008                  		move.l	8(a0),d2
0000DDBA 2628 000C                  		move.l	$C(a0),d3
0000DDBE 3028 0010                  		move.w	$10(a0),d0
0000DDC2 48C0                       		ext.l	d0
0000DDC4 E180                       		asl.l	#8,d0
0000DDC6 D480                       		add.l	d0,d2
0000DDC8 3028 0012                  		move.w	$12(a0),d0
0000DDCC 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DDD2 48C0                       		ext.l	d0
0000DDD4 E180                       		asl.l	#8,d0
0000DDD6 D680                       		add.l	d0,d3
0000DDD8 2142 0008                  		move.l	d2,8(a0)
0000DDDC 2143 000C                  		move.l	d3,$C(a0)
0000DDE0 4E75                       		rts	
0000DDE2                            ; End of function ObjectFall
0000DDE2                            
0000DDE2                            ; ---------------------------------------------------------------------------
0000DDE2                            ; Subroutine translating object	speed to update	object position
0000DDE2                            ; ---------------------------------------------------------------------------
0000DDE2                            
0000DDE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDE2                            
0000DDE2                            
0000DDE2                            SpeedToPos:
0000DDE2 2428 0008                  		move.l	8(a0),d2
0000DDE6 2628 000C                  		move.l	$C(a0),d3
0000DDEA 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DDEE 48C0                       		ext.l	d0
0000DDF0 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DDF2 D480                       		add.l	d0,d2		; add to x-axis	position
0000DDF4 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DDF8 48C0                       		ext.l	d0
0000DDFA E180                       		asl.l	#8,d0		; multiply by $100
0000DDFC D680                       		add.l	d0,d3		; add to y-axis	position
0000DDFE 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DE02 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DE06 4E75                       		rts	
0000DE08                            ; End of function SpeedToPos
0000DE08                            
0000DE08                            ; ---------------------------------------------------------------------------
0000DE08                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DE08                            ; ---------------------------------------------------------------------------
0000DE08                            
0000DE08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE08                            
0000DE08                            
0000DE08                            DisplaySprite:
0000DE08 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DE0C 3028 0018                  		move.w	$18(a0),d0
0000DE10 E248                       		lsr.w	#1,d0
0000DE12 0240 0380                  		andi.w	#$380,d0
0000DE16 D2C0                       		adda.w	d0,a1
0000DE18 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DE1C 6400                       		bcc.s	locret_D620
0000DE1E 5451                       		addq.w	#2,(a1)
0000DE20 D2D1                       		adda.w	(a1),a1
0000DE22 3288                       		move.w	a0,(a1)
0000DE24                            
0000DE24                            locret_D620:
0000DE24 4E75                       		rts	
0000DE26                            ; End of function DisplaySprite
0000DE26                            
0000DE26                            ; ---------------------------------------------------------------------------
0000DE26                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DE26                            ; ---------------------------------------------------------------------------
0000DE26                            
0000DE26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE26                            
0000DE26                            
0000DE26                            DisplaySprite2:
0000DE26 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DE2A 3029 0018                  		move.w	$18(a1),d0
0000DE2E E248                       		lsr.w	#1,d0
0000DE30 0240 0380                  		andi.w	#$380,d0
0000DE34 D4C0                       		adda.w	d0,a2
0000DE36 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DE3A 6400                       		bcc.s	locret_D63E
0000DE3C 5452                       		addq.w	#2,(a2)
0000DE3E D4D2                       		adda.w	(a2),a2
0000DE40 3489                       		move.w	a1,(a2)
0000DE42                            
0000DE42                            locret_D63E:
0000DE42 4E75                       		rts	
0000DE44                            ; End of function DisplaySprite2
0000DE44                            
0000DE44                            ; ---------------------------------------------------------------------------
0000DE44                            ; Subroutine to	delete an object
0000DE44                            ; ---------------------------------------------------------------------------
0000DE44                            
0000DE44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE44                            
0000DE44                            
0000DE44                            DeleteObject:
0000DE44 2248                       		movea.l	a0,a1
0000DE46                            
0000DE46                            DeleteObject2:
0000DE46 7200                       		moveq	#0,d1
0000DE48 700F                       		moveq	#$F,d0
0000DE4A                            
0000DE4A                            loc_D646:
0000DE4A 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DE4C 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DE50 4E75                       		rts	
0000DE52                            ; End of function DeleteObject
0000DE52                            
0000DE52                            ; ===========================================================================
0000DE52 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DE56 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DE5A 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DE5E 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DE62                            ; ---------------------------------------------------------------------------
0000DE62                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DE62                            ; ---------------------------------------------------------------------------
0000DE62                            
0000DE62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE62                            
0000DE62                            
0000DE62                            BuildSprites:				; XREF: TitleScreen; et al
0000DE62 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DE66 7A00                       		moveq	#0,d5
0000DE68 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DE6C 7E07                       		moveq	#7,d7
0000DE6E                            
0000DE6E                            loc_D66A:
0000DE6E 4A54                       		tst.w	(a4)
0000DE70 6700 0000                  		beq.w	loc_D72E
0000DE74 7C02                       		moveq	#2,d6
0000DE76                            
0000DE76                            loc_D672:
0000DE76 3074 6000                  		movea.w	(a4,d6.w),a0
0000DE7A 4A10                       		tst.b	(a0)
0000DE7C 6700 0000                  		beq.w	loc_D726
0000DE80 08A8 0007 0001             		bclr	#7,1(a0)
0000DE86 1028 0001                  		move.b	1(a0),d0
0000DE8A 1800                       		move.b	d0,d4
0000DE8C 0240 000C                  		andi.w	#$C,d0
0000DE90 6700                       		beq.s	loc_D6DE
0000DE92 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DE96 7000                       		moveq	#0,d0
0000DE98 1028 0019                  		move.b	$19(a0),d0
0000DE9C 3628 0008                  		move.w	8(a0),d3
0000DEA0 9651                       		sub.w	(a1),d3
0000DEA2 3203                       		move.w	d3,d1
0000DEA4 D240                       		add.w	d0,d1
0000DEA6 6B00 0000                  		bmi.w	loc_D726
0000DEAA 3203                       		move.w	d3,d1
0000DEAC 9240                       		sub.w	d0,d1
0000DEAE 0C41 0140                  		cmpi.w	#$140,d1
0000DEB2 6C00                       		bge.s	loc_D726
0000DEB4 0643 0080                  		addi.w	#$80,d3
0000DEB8 0804 0004                  		btst	#4,d4
0000DEBC 6700                       		beq.s	loc_D6E8
0000DEBE 7000                       		moveq	#0,d0
0000DEC0 1028 0016                  		move.b	$16(a0),d0
0000DEC4 3428 000C                  		move.w	$C(a0),d2
0000DEC8 9469 0004                  		sub.w	4(a1),d2
0000DECC 3202                       		move.w	d2,d1
0000DECE D240                       		add.w	d0,d1
0000DED0 6B00                       		bmi.s	loc_D726
0000DED2 3202                       		move.w	d2,d1
0000DED4 9240                       		sub.w	d0,d1
0000DED6 0C41 00E0                  		cmpi.w	#$E0,d1
0000DEDA 6C00                       		bge.s	loc_D726
0000DEDC 0642 0080                  		addi.w	#$80,d2
0000DEE0 6000                       		bra.s	loc_D700
0000DEE2                            ; ===========================================================================
0000DEE2                            
0000DEE2                            loc_D6DE:
0000DEE2 3428 000A                  		move.w	$A(a0),d2
0000DEE6 3628 0008                  		move.w	8(a0),d3
0000DEEA 6000                       		bra.s	loc_D700
0000DEEC                            ; ===========================================================================
0000DEEC                            
0000DEEC                            loc_D6E8:
0000DEEC 3428 000C                  		move.w	$C(a0),d2
0000DEF0 9469 0004                  		sub.w	4(a1),d2
0000DEF4 0642 0080                  		addi.w	#$80,d2
0000DEF8 0C42 0060                  		cmpi.w	#$60,d2
0000DEFC 6500                       		bcs.s	loc_D726
0000DEFE 0C42 0180                  		cmpi.w	#$180,d2
0000DF02 6400                       		bcc.s	loc_D726
0000DF04                            
0000DF04                            loc_D700:
0000DF04 2268 0004                  		movea.l	4(a0),a1
0000DF08 7200                       		moveq	#0,d1
0000DF0A 0804 0005                  		btst	#5,d4
0000DF0E 6600                       		bne.s	loc_D71C
0000DF10 1228 001A                  		move.b	$1A(a0),d1
0000DF14 D201                       		add.b	d1,d1
0000DF16 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DF1A 1219                       		move.b	(a1)+,d1
0000DF1C 5301                       		subq.b	#1,d1
0000DF1E 6B00                       		bmi.s	loc_D720
0000DF20                            
0000DF20                            loc_D71C:
0000DF20 6100 0000                  		bsr.w	sub_D750
0000DF24                            
0000DF24                            loc_D720:
0000DF24 08E8 0007 0001             		bset	#7,1(a0)
0000DF2A                            
0000DF2A                            loc_D726:
0000DF2A 5446                       		addq.w	#2,d6
0000DF2C 5554                       		subq.w	#2,(a4)
0000DF2E 6600 FF46                  		bne.w	loc_D672
0000DF32                            
0000DF32                            loc_D72E:
0000DF32 49EC 0080                  		lea	$80(a4),a4
0000DF36 51CF FF36                  		dbf	d7,loc_D66A
0000DF3A 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DF3E 0C05 0050                  		cmpi.b	#$50,d5
0000DF42 6700                       		beq.s	loc_D748
0000DF44 24BC 0000 0000             		move.l	#0,(a2)
0000DF4A 4E75                       		rts	
0000DF4C                            ; ===========================================================================
0000DF4C                            
0000DF4C                            loc_D748:
0000DF4C 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DF52 4E75                       		rts	
0000DF54                            ; End of function BuildSprites
0000DF54                            
0000DF54                            
0000DF54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF54                            
0000DF54                            
0000DF54                            sub_D750:				; XREF: BuildSprites
0000DF54 3668 0002                  		movea.w	2(a0),a3
0000DF58 0804 0000                  		btst	#0,d4
0000DF5C 6600                       		bne.s	loc_D796
0000DF5E 0804 0001                  		btst	#1,d4
0000DF62 6600 0000                  		bne.w	loc_D7E4
0000DF66                            ; End of function sub_D750
0000DF66                            
0000DF66                            
0000DF66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF66                            
0000DF66                            
0000DF66                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DF66 0C05 0050                  		cmpi.b	#$50,d5
0000DF6A 6700                       		beq.s	locret_D794
0000DF6C 1019                       		move.b	(a1)+,d0
0000DF6E 4880                       		ext.w	d0
0000DF70 D042                       		add.w	d2,d0
0000DF72 34C0                       		move.w	d0,(a2)+
0000DF74 14D9                       		move.b	(a1)+,(a2)+
0000DF76 5205                       		addq.b	#1,d5
0000DF78 14C5                       		move.b	d5,(a2)+
0000DF7A 1019                       		move.b	(a1)+,d0
0000DF7C E148                       		lsl.w	#8,d0
0000DF7E 1019                       		move.b	(a1)+,d0
0000DF80 D04B                       		add.w	a3,d0
0000DF82 34C0                       		move.w	d0,(a2)+
0000DF84 1019                       		move.b	(a1)+,d0
0000DF86 4880                       		ext.w	d0
0000DF88 D043                       		add.w	d3,d0
0000DF8A 0240 01FF                  		andi.w	#$1FF,d0
0000DF8E 6600                       		bne.s	loc_D78E
0000DF90 5240                       		addq.w	#1,d0
0000DF92                            
0000DF92                            loc_D78E:
0000DF92 34C0                       		move.w	d0,(a2)+
0000DF94 51C9 FFD0                  		dbf	d1,sub_D762
0000DF98                            
0000DF98                            locret_D794:
0000DF98 4E75                       		rts	
0000DF9A                            ; End of function sub_D762
0000DF9A                            
0000DF9A                            ; ===========================================================================
0000DF9A                            
0000DF9A                            loc_D796:
0000DF9A 0804 0001                  		btst	#1,d4
0000DF9E 6600 0000                  		bne.w	loc_D82A
0000DFA2                            
0000DFA2                            loc_D79E:
0000DFA2 0C05 0050                  		cmpi.b	#$50,d5
0000DFA6 6700                       		beq.s	locret_D7E2
0000DFA8 1019                       		move.b	(a1)+,d0
0000DFAA 4880                       		ext.w	d0
0000DFAC D042                       		add.w	d2,d0
0000DFAE 34C0                       		move.w	d0,(a2)+
0000DFB0 1819                       		move.b	(a1)+,d4
0000DFB2 14C4                       		move.b	d4,(a2)+
0000DFB4 5205                       		addq.b	#1,d5
0000DFB6 14C5                       		move.b	d5,(a2)+
0000DFB8 1019                       		move.b	(a1)+,d0
0000DFBA E148                       		lsl.w	#8,d0
0000DFBC 1019                       		move.b	(a1)+,d0
0000DFBE D04B                       		add.w	a3,d0
0000DFC0 0A40 0800                  		eori.w	#$800,d0
0000DFC4 34C0                       		move.w	d0,(a2)+
0000DFC6 1019                       		move.b	(a1)+,d0
0000DFC8 4880                       		ext.w	d0
0000DFCA 4440                       		neg.w	d0
0000DFCC D804                       		add.b	d4,d4
0000DFCE 0244 0018                  		andi.w	#$18,d4
0000DFD2 5044                       		addq.w	#8,d4
0000DFD4 9044                       		sub.w	d4,d0
0000DFD6 D043                       		add.w	d3,d0
0000DFD8 0240 01FF                  		andi.w	#$1FF,d0
0000DFDC 6600                       		bne.s	loc_D7DC
0000DFDE 5240                       		addq.w	#1,d0
0000DFE0                            
0000DFE0                            loc_D7DC:
0000DFE0 34C0                       		move.w	d0,(a2)+
0000DFE2 51C9 FFBE                  		dbf	d1,loc_D79E
0000DFE6                            
0000DFE6                            locret_D7E2:
0000DFE6 4E75                       		rts	
0000DFE8                            ; ===========================================================================
0000DFE8                            
0000DFE8                            loc_D7E4:				; XREF: sub_D750
0000DFE8 0C05 0050                  		cmpi.b	#$50,d5
0000DFEC 6700                       		beq.s	locret_D828
0000DFEE 1019                       		move.b	(a1)+,d0
0000DFF0 1811                       		move.b	(a1),d4
0000DFF2 4880                       		ext.w	d0
0000DFF4 4440                       		neg.w	d0
0000DFF6 E70C                       		lsl.b	#3,d4
0000DFF8 0244 0018                  		andi.w	#$18,d4
0000DFFC 5044                       		addq.w	#8,d4
0000DFFE 9044                       		sub.w	d4,d0
0000E000 D042                       		add.w	d2,d0
0000E002 34C0                       		move.w	d0,(a2)+
0000E004 14D9                       		move.b	(a1)+,(a2)+
0000E006 5205                       		addq.b	#1,d5
0000E008 14C5                       		move.b	d5,(a2)+
0000E00A 1019                       		move.b	(a1)+,d0
0000E00C E148                       		lsl.w	#8,d0
0000E00E 1019                       		move.b	(a1)+,d0
0000E010 D04B                       		add.w	a3,d0
0000E012 0A40 1000                  		eori.w	#$1000,d0
0000E016 34C0                       		move.w	d0,(a2)+
0000E018 1019                       		move.b	(a1)+,d0
0000E01A 4880                       		ext.w	d0
0000E01C D043                       		add.w	d3,d0
0000E01E 0240 01FF                  		andi.w	#$1FF,d0
0000E022 6600                       		bne.s	loc_D822
0000E024 5240                       		addq.w	#1,d0
0000E026                            
0000E026                            loc_D822:
0000E026 34C0                       		move.w	d0,(a2)+
0000E028 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E02C                            
0000E02C                            locret_D828:
0000E02C 4E75                       		rts	
0000E02E                            ; ===========================================================================
0000E02E                            
0000E02E                            loc_D82A:
0000E02E 0C05 0050                  		cmpi.b	#$50,d5
0000E032 6700                       		beq.s	locret_D87C
0000E034 1019                       		move.b	(a1)+,d0
0000E036 1811                       		move.b	(a1),d4
0000E038 4880                       		ext.w	d0
0000E03A 4440                       		neg.w	d0
0000E03C E70C                       		lsl.b	#3,d4
0000E03E 0244 0018                  		andi.w	#$18,d4
0000E042 5044                       		addq.w	#8,d4
0000E044 9044                       		sub.w	d4,d0
0000E046 D042                       		add.w	d2,d0
0000E048 34C0                       		move.w	d0,(a2)+
0000E04A 1819                       		move.b	(a1)+,d4
0000E04C 14C4                       		move.b	d4,(a2)+
0000E04E 5205                       		addq.b	#1,d5
0000E050 14C5                       		move.b	d5,(a2)+
0000E052 1019                       		move.b	(a1)+,d0
0000E054 E148                       		lsl.w	#8,d0
0000E056 1019                       		move.b	(a1)+,d0
0000E058 D04B                       		add.w	a3,d0
0000E05A 0A40 1800                  		eori.w	#$1800,d0
0000E05E 34C0                       		move.w	d0,(a2)+
0000E060 1019                       		move.b	(a1)+,d0
0000E062 4880                       		ext.w	d0
0000E064 4440                       		neg.w	d0
0000E066 D804                       		add.b	d4,d4
0000E068 0244 0018                  		andi.w	#$18,d4
0000E06C 5044                       		addq.w	#8,d4
0000E06E 9044                       		sub.w	d4,d0
0000E070 D043                       		add.w	d3,d0
0000E072 0240 01FF                  		andi.w	#$1FF,d0
0000E076 6600                       		bne.s	loc_D876
0000E078 5240                       		addq.w	#1,d0
0000E07A                            
0000E07A                            loc_D876:
0000E07A 34C0                       		move.w	d0,(a2)+
0000E07C 51C9 FFB0                  		dbf	d1,loc_D82A
0000E080                            
0000E080                            locret_D87C:
0000E080 4E75                       		rts	
0000E082                            ; ---------------------------------------------------------------------------
0000E082                            ; Subroutine to	check if an object is on the screen
0000E082                            ; ---------------------------------------------------------------------------
0000E082                            
0000E082                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E082                            
0000E082                            
0000E082                            ChkObjOnScreen:
0000E082 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E086 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E08A 6B00                       		bmi.s	NotOnScreen
0000E08C 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E090 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E092                            
0000E092 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E096 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E09A 6B00                       		bmi.s	NotOnScreen
0000E09C 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E0A0 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E0A2                            
0000E0A2 7000                       		moveq	#0,d0		; set flag to 0
0000E0A4 4E75                       		rts	
0000E0A6                            ; ===========================================================================
0000E0A6                            
0000E0A6                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E0A6 7001                       		moveq	#1,d0		; set flag to 1
0000E0A8 4E75                       		rts	
0000E0AA                            ; End of function ChkObjOnScreen
0000E0AA                            
0000E0AA                            
0000E0AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0AA                            
0000E0AA                            
0000E0AA                            ChkObjOnScreen2:
0000E0AA 7200                       		moveq	#0,d1
0000E0AC 1228 0019                  		move.b	$19(a0),d1
0000E0B0 3028 0008                  		move.w	8(a0),d0
0000E0B4 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E0B8 D041                       		add.w	d1,d0
0000E0BA 6B00                       		bmi.s	NotOnScreen2
0000E0BC D241                       		add.w	d1,d1
0000E0BE 9041                       		sub.w	d1,d0
0000E0C0 0C40 0140                  		cmpi.w	#320,d0
0000E0C4 6C00                       		bge.s	NotOnScreen2
0000E0C6                            
0000E0C6 3228 000C                  		move.w	$C(a0),d1
0000E0CA 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E0CE 6B00                       		bmi.s	NotOnScreen2
0000E0D0 0C41 00E0                  		cmpi.w	#224,d1
0000E0D4 6C00                       		bge.s	NotOnScreen2
0000E0D6                            
0000E0D6 7000                       		moveq	#0,d0
0000E0D8 4E75                       		rts	
0000E0DA                            ; ===========================================================================
0000E0DA                            
0000E0DA                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E0DA 7001                       		moveq	#1,d0
0000E0DC 4E75                       		rts	
0000E0DE                            ; End of function ChkObjOnScreen2
0000E0DE                            
0000E0DE                            ; ---------------------------------------------------------------------------
0000E0DE                            ; Subroutine to	load a level's objects
0000E0DE                            ; ---------------------------------------------------------------------------
0000E0DE                            
0000E0DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0DE                            
0000E0DE                            
0000E0DE                            ObjPosLoad:				; XREF: Level; et al
0000E0DE 7000                       		moveq	#0,d0
0000E0E0 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E0E4 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E0E8 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E0EC                            ; End of function ObjPosLoad
0000E0EC                            
0000E0EC                            ; ===========================================================================
0000E0EC 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E0EE 0000                       		dc.w OPL_Next-OPL_Index
0000E0F0                            ; ===========================================================================
0000E0F0                            
0000E0F0                            OPL_Main:				; XREF: OPL_Index
0000E0F0 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E0F4 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E0F8 ED08                       		lsl.b	#6,d0
0000E0FA E848                       		lsr.w	#4,d0
0000E0FC 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E102 2248                       		movea.l	a0,a1
0000E104 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E108 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E10C 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E110 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E114 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E118 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E11C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E120 34FC 0101                  		move.w	#$101,(a2)+
0000E124 303C 005E                  		move.w	#$5E,d0
0000E128                            
0000E128                            OPL_ClrList:
0000E128 429A                       		clr.l	(a2)+
0000E12A 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E12E                            
0000E12E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E132 7400                       		moveq	#0,d2
0000E134 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E138 0446 0080                  		subi.w	#$80,d6
0000E13C 6400                       		bcc.s	loc_D93C
0000E13E 7C00                       		moveq	#0,d6
0000E140                            
0000E140                            loc_D93C:
0000E140 0246 FF80                  		andi.w	#$FF80,d6
0000E144 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E148                            
0000E148                            loc_D944:
0000E148 BC50                       		cmp.w	(a0),d6
0000E14A 6300                       		bls.s	loc_D956
0000E14C 4A28 0004                  		tst.b	4(a0)
0000E150 6A00                       		bpl.s	loc_D952
0000E152 1412                       		move.b	(a2),d2
0000E154 5212                       		addq.b	#1,(a2)
0000E156                            
0000E156                            loc_D952:
0000E156 5C48                       		addq.w	#6,a0
0000E158 60EE                       		bra.s	loc_D944
0000E15A                            ; ===========================================================================
0000E15A                            
0000E15A                            loc_D956:
0000E15A 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E15E 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E162 0446 0080                  		subi.w	#$80,d6
0000E166 6500                       		bcs.s	loc_D976
0000E168                            
0000E168                            loc_D964:
0000E168 BC50                       		cmp.w	(a0),d6
0000E16A 6300                       		bls.s	loc_D976
0000E16C 4A28 0004                  		tst.b	4(a0)
0000E170 6A00                       		bpl.s	loc_D972
0000E172 522A 0001                  		addq.b	#1,1(a2)
0000E176                            
0000E176                            loc_D972:
0000E176 5C48                       		addq.w	#6,a0
0000E178 60EE                       		bra.s	loc_D964
0000E17A                            ; ===========================================================================
0000E17A                            
0000E17A                            loc_D976:
0000E17A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E17E 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E184                            
0000E184                            OPL_Next:				; XREF: OPL_Index
0000E184 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E188 7400                       		moveq	#0,d2
0000E18A 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E18E 0246 FF80                  		andi.w	#$FF80,d6
0000E192 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E196 6700 0000                  		beq.w	locret_DA3A
0000E19A 6C00                       		bge.s	loc_D9F6
0000E19C 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E1A0 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E1A4 0446 0080                  		subi.w	#$80,d6
0000E1A8 6500                       		bcs.s	loc_D9D2
0000E1AA                            
0000E1AA                            loc_D9A6:
0000E1AA BC68 FFFA                  		cmp.w	-6(a0),d6
0000E1AE 6C00                       		bge.s	loc_D9D2
0000E1B0 5D48                       		subq.w	#6,a0
0000E1B2 4A28 0004                  		tst.b	4(a0)
0000E1B6 6A00                       		bpl.s	loc_D9BC
0000E1B8 532A 0001                  		subq.b	#1,1(a2)
0000E1BC 142A 0001                  		move.b	1(a2),d2
0000E1C0                            
0000E1C0                            loc_D9BC:
0000E1C0 6100 0000                  		bsr.w	loc_DA3C
0000E1C4 6600                       		bne.s	loc_D9C6
0000E1C6 5D48                       		subq.w	#6,a0
0000E1C8 60E0                       		bra.s	loc_D9A6
0000E1CA                            ; ===========================================================================
0000E1CA                            
0000E1CA                            loc_D9C6:
0000E1CA 4A28 0004                  		tst.b	4(a0)
0000E1CE 6A00                       		bpl.s	loc_D9D0
0000E1D0 522A 0001                  		addq.b	#1,1(a2)
0000E1D4                            
0000E1D4                            loc_D9D0:
0000E1D4 5C48                       		addq.w	#6,a0
0000E1D6                            
0000E1D6                            loc_D9D2:
0000E1D6 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E1DA 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E1DE 0646 0300                  		addi.w	#$300,d6
0000E1E2                            
0000E1E2                            loc_D9DE:
0000E1E2 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E1E6 6E00                       		bgt.s	loc_D9F0
0000E1E8 4A28 FFFE                  		tst.b	-2(a0)
0000E1EC 6A00                       		bpl.s	loc_D9EC
0000E1EE 5312                       		subq.b	#1,(a2)
0000E1F0                            
0000E1F0                            loc_D9EC:
0000E1F0 5D48                       		subq.w	#6,a0
0000E1F2 60EE                       		bra.s	loc_D9DE
0000E1F4                            ; ===========================================================================
0000E1F4                            
0000E1F4                            loc_D9F0:
0000E1F4 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E1F8 4E75                       		rts	
0000E1FA                            ; ===========================================================================
0000E1FA                            
0000E1FA                            loc_D9F6:
0000E1FA 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E1FE 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E202 0646 0280                  		addi.w	#$280,d6
0000E206                            
0000E206                            loc_DA02:
0000E206 BC50                       		cmp.w	(a0),d6
0000E208 6300                       		bls.s	loc_DA16
0000E20A 4A28 0004                  		tst.b	4(a0)
0000E20E 6A00                       		bpl.s	loc_DA10
0000E210 1412                       		move.b	(a2),d2
0000E212 5212                       		addq.b	#1,(a2)
0000E214                            
0000E214                            loc_DA10:
0000E214 6100 0000                  		bsr.w	loc_DA3C
0000E218 67EC                       		beq.s	loc_DA02
0000E21A                            
0000E21A                            loc_DA16:
0000E21A 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E21E 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E222 0446 0300                  		subi.w	#$300,d6
0000E226 6500                       		bcs.s	loc_DA36
0000E228                            
0000E228                            loc_DA24:
0000E228 BC50                       		cmp.w	(a0),d6
0000E22A 6300                       		bls.s	loc_DA36
0000E22C 4A28 0004                  		tst.b	4(a0)
0000E230 6A00                       		bpl.s	loc_DA32
0000E232 522A 0001                  		addq.b	#1,1(a2)
0000E236                            
0000E236                            loc_DA32:
0000E236 5C48                       		addq.w	#6,a0
0000E238 60EE                       		bra.s	loc_DA24
0000E23A                            ; ===========================================================================
0000E23A                            
0000E23A                            loc_DA36:
0000E23A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E23E                            
0000E23E                            locret_DA3A:
0000E23E 4E75                       		rts	
0000E240                            ; ===========================================================================
0000E240                            
0000E240                            loc_DA3C:
0000E240 4A28 0004                  		tst.b	4(a0)
0000E244 6A00                       		bpl.s	OPL_MakeItem
0000E246 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E24C 6700                       		beq.s	OPL_MakeItem
0000E24E 5C48                       		addq.w	#6,a0
0000E250 7000                       		moveq	#0,d0
0000E252 4E75                       		rts	
0000E254                            ; ===========================================================================
0000E254                            
0000E254                            OPL_MakeItem:
0000E254 6100 0000                  		bsr.w	SingleObjLoad
0000E258 6600                       		bne.s	locret_DA8A
0000E25A 3358 0008                  		move.w	(a0)+,8(a1)
0000E25E 3018                       		move.w	(a0)+,d0
0000E260 3200                       		move.w	d0,d1
0000E262 0240 0FFF                  		andi.w	#$FFF,d0
0000E266 3340 000C                  		move.w	d0,$C(a1)
0000E26A E559                       		rol.w	#2,d1
0000E26C 0201 0003                  		andi.b	#3,d1
0000E270 1341 0001                  		move.b	d1,1(a1)
0000E274 1341 0022                  		move.b	d1,$22(a1)
0000E278 1018                       		move.b	(a0)+,d0
0000E27A 6A00                       		bpl.s	loc_DA80
0000E27C 0200 007F                  		andi.b	#$7F,d0
0000E280 1342 0023                  		move.b	d2,$23(a1)
0000E284                            
0000E284                            loc_DA80:
0000E284 1280                       		move.b	d0,0(a1)
0000E286 1358 0028                  		move.b	(a0)+,$28(a1)
0000E28A 7000                       		moveq	#0,d0
0000E28C                            
0000E28C                            locret_DA8A:
0000E28C 4E75                       		rts	
0000E28E                            ; ---------------------------------------------------------------------------
0000E28E                            ; Single object	loading	subroutine
0000E28E                            ; ---------------------------------------------------------------------------
0000E28E                            
0000E28E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E28E                            
0000E28E                            
0000E28E                            SingleObjLoad:
0000E28E 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E292 303C 005F                  		move.w	#$5F,d0
0000E296                            
0000E296                            loc_DA94:
0000E296 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E298 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E29A 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E29E 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E2A2                            
0000E2A2                            locret_DAA0:
0000E2A2 4E75                       		rts	
0000E2A4                            ; End of function SingleObjLoad
0000E2A4                            
0000E2A4                            
0000E2A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2A4                            
0000E2A4                            
0000E2A4                            SingleObjLoad2:
0000E2A4 2248                       		movea.l	a0,a1
0000E2A6 303C F000                  		move.w	#-$1000,d0
0000E2AA 9048                       		sub.w	a0,d0
0000E2AC EC48                       		lsr.w	#6,d0
0000E2AE 5340                       		subq.w	#1,d0
0000E2B0 6500                       		bcs.s	locret_DABC
0000E2B2                            
0000E2B2                            loc_DAB0:
0000E2B2 4A11                       		tst.b	(a1)
0000E2B4 6700                       		beq.s	locret_DABC
0000E2B6 43E9 0040                  		lea	$40(a1),a1
0000E2BA 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E2BE                            
0000E2BE                            locret_DABC:
0000E2BE 4E75                       		rts	
0000E2C0                            ; End of function SingleObjLoad2
0000E2C0                            
0000E2C0                            ; ===========================================================================
0000E2C0                            ; ---------------------------------------------------------------------------
0000E2C0                            ; Object 41 - springs
0000E2C0                            ; ---------------------------------------------------------------------------
0000E2C0                            
0000E2C0                            Obj41:					; XREF: Obj_Index
0000E2C0 7000                       		moveq	#0,d0
0000E2C2 1028 0024                  		move.b	$24(a0),d0
0000E2C6 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E2CA 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E2CE 6100 FB38                  		bsr.w	DisplaySprite
0000E2D2 3028 0008                  		move.w	8(a0),d0
0000E2D6 0240 FF80                  		andi.w	#$FF80,d0
0000E2DA 3238 F700                  		move.w	($FFFFF700).w,d1
0000E2DE 0441 0080                  		subi.w	#$80,d1
0000E2E2 0241 FF80                  		andi.w	#$FF80,d1
0000E2E6 9041                       		sub.w	d1,d0
0000E2E8 0C40 0280                  		cmpi.w	#$280,d0
0000E2EC 6200 FB56                  		bhi.w	DeleteObject
0000E2F0 4E75                       		rts	
0000E2F2                            ; ===========================================================================
0000E2F2 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E2F4 0000                       		dc.w Obj41_Up-Obj41_Index
0000E2F6 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E2F8 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E2FA 0000                       		dc.w Obj41_LR-Obj41_Index
0000E2FC 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E2FE 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E300 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E302 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E304 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E306                            
0000E306 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E308 F600                       		dc.w -$A00		; power	of yellow spring
0000E30A                            ; ===========================================================================
0000E30A                            
0000E30A                            Obj41_Main:				; XREF: Obj41_Index
0000E30A 5428 0024                  		addq.b	#2,$24(a0)
0000E30E 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E316 317C 0523 0002             		move.w	#$523,2(a0)
0000E31C 0028 0004 0001             		ori.b	#4,1(a0)
0000E322 117C 0010 0019             		move.b	#$10,$19(a0)
0000E328 117C 0004 0018             		move.b	#4,$18(a0)
0000E32E 1028 0028                  		move.b	$28(a0),d0
0000E332 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E336 6700                       		beq.s	loc_DB54	; if not, branch
0000E338 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E33E 117C 0001 001C             		move.b	#1,$1C(a0)
0000E344 117C 0003 001A             		move.b	#3,$1A(a0)
0000E34A 317C 0533 0002             		move.w	#$533,2(a0)
0000E350 117C 0008 0019             		move.b	#8,$19(a0)
0000E356                            
0000E356                            loc_DB54:
0000E356 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E35A 6700                       		beq.s	loc_DB66	; if not, branch
0000E35C 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E362 08E8 0001 0022             		bset	#1,$22(a0)
0000E368                            
0000E368                            loc_DB66:
0000E368 0800 0001                  		btst	#1,d0
0000E36C 6700                       		beq.s	loc_DB72
0000E36E 08E8 0005 0002             		bset	#5,2(a0)
0000E374                            
0000E374                            loc_DB72:
0000E374 0240 000F                  		andi.w	#$F,d0
0000E378 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E37E 4E75                       		rts	
0000E380                            ; ===========================================================================
0000E380                            
0000E380                            Obj41_Up:				; XREF: Obj41_Index
0000E380 323C 001B                  		move.w	#$1B,d1
0000E384 343C 0008                  		move.w	#8,d2
0000E388 363C 0010                  		move.w	#$10,d3
0000E38C 3828 0008                  		move.w	8(a0),d4
0000E390 6100 0000                  		bsr.w	SolidObject
0000E394 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E398 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E39A 4E75                       		rts	
0000E39C                            ; ===========================================================================
0000E39C                            
0000E39C                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E39C 5428 0024                  		addq.b	#2,$24(a0)
0000E3A0 5069 000C                  		addq.w	#8,$C(a1)
0000E3A4 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E3AA 08E9 0001 0022             		bset	#1,$22(a1)
0000E3B0 08A9 0003 0022             		bclr	#3,$22(a1)
0000E3B6 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E3BC 137C 0002 0024             		move.b	#2,$24(a1)
0000E3C2 08A8 0003 0022             		bclr	#3,$22(a0)
0000E3C8 4228 0025                  		clr.b	$25(a0)
0000E3CC 303C 00CC                  		move.w	#$CC,d0
0000E3D0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E3D6                            
0000E3D6                            Obj41_AniUp:				; XREF: Obj41_Index
0000E3D6 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E3DC 6000 CAEA                  		bra.w	AnimateSprite
0000E3E0                            ; ===========================================================================
0000E3E0                            
0000E3E0                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E3E0 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E3E6 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E3EA 4E75                       		rts	
0000E3EC                            ; ===========================================================================
0000E3EC                            
0000E3EC                            Obj41_LR:				; XREF: Obj41_Index
0000E3EC 323C 0013                  		move.w	#$13,d1
0000E3F0 343C 000E                  		move.w	#$E,d2
0000E3F4 363C 000F                  		move.w	#$F,d3
0000E3F8 3828 0008                  		move.w	8(a0),d4
0000E3FC 6100 0000                  		bsr.w	SolidObject
0000E400 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E406 6600                       		bne.s	loc_DC0C
0000E408 117C 0008 0024             		move.b	#8,$24(a0)
0000E40E                            
0000E40E                            loc_DC0C:
0000E40E 0828 0005 0022             		btst	#5,$22(a0)
0000E414 6600                       		bne.s	Obj41_BounceLR
0000E416 4E75                       		rts	
0000E418                            ; ===========================================================================
0000E418                            
0000E418                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E418 5428 0024                  		addq.b	#2,$24(a0)
0000E41C 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E422 5069 0008                  		addq.w	#8,8(a1)
0000E426 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E42C 6600                       		bne.s	loc_DC36	; if yes, branch
0000E42E 0469 0010 0008             		subi.w	#$10,8(a1)
0000E434 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E438                            
0000E438                            loc_DC36:
0000E438 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E43E 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E444 0869 0000 0022             		bchg	#0,$22(a1)
0000E44A 0829 0002 0022             		btst	#2,$22(a1)
0000E450 6600                       		bne.s	loc_DC56
0000E452 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E458                            
0000E458                            loc_DC56:
0000E458 08A8 0005 0022             		bclr	#5,$22(a0)
0000E45E 08A9 0005 0022             		bclr	#5,$22(a1)
0000E464 303C 00CC                  		move.w	#$CC,d0
0000E468 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E46E                            
0000E46E                            Obj41_AniLR:				; XREF: Obj41_Index
0000E46E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E474 6000 CA52                  		bra.w	AnimateSprite
0000E478                            ; ===========================================================================
0000E478                            
0000E478                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E478 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E47E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E482 4E75                       		rts	
0000E484                            ; ===========================================================================
0000E484                            
0000E484                            Obj41_Dwn:				; XREF: Obj41_Index
0000E484 323C 001B                  		move.w	#$1B,d1
0000E488 343C 0008                  		move.w	#8,d2
0000E48C 363C 0010                  		move.w	#$10,d3
0000E490 3828 0008                  		move.w	8(a0),d4
0000E494 6100 0000                  		bsr.w	SolidObject
0000E498 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E49E 6600                       		bne.s	loc_DCA4
0000E4A0 117C 000E 0024             		move.b	#$E,$24(a0)
0000E4A6                            
0000E4A6                            loc_DCA4:
0000E4A6 4A28 0025                  		tst.b	$25(a0)
0000E4AA 6600                       		bne.s	locret_DCAE
0000E4AC 4A44                       		tst.w	d4
0000E4AE 6B00                       		bmi.s	Obj41_BounceDwn
0000E4B0                            
0000E4B0                            locret_DCAE:
0000E4B0 4E75                       		rts	
0000E4B2                            ; ===========================================================================
0000E4B2                            
0000E4B2                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E4B2 5428 0024                  		addq.b	#2,$24(a0)
0000E4B6 5169 000C                  		subq.w	#8,$C(a1)
0000E4BA 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E4C0 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E4C4 08E9 0001 0022             		bset	#1,$22(a1)
0000E4CA 08A9 0003 0022             		bclr	#3,$22(a1)
0000E4D0 137C 0002 0024             		move.b	#2,$24(a1)
0000E4D6 08A8 0003 0022             		bclr	#3,$22(a0)
0000E4DC 4228 0025                  		clr.b	$25(a0)
0000E4E0 303C 00CC                  		move.w	#$CC,d0
0000E4E4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E4EA                            
0000E4EA                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E4EA 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E4F0 6000 C9D6                  		bra.w	AnimateSprite
0000E4F4                            ; ===========================================================================
0000E4F4                            
0000E4F4                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E4F4 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E4FA 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E4FE 4E75                       		rts	
0000E500                            ; ===========================================================================
0000E500                            Ani_obj41:
0000E500                            	include "_anim\obj41.asm"
0000E500                            ; ---------------------------------------------------------------------------
0000E500                            ; Animation script - springs
0000E500                            ; ---------------------------------------------------------------------------
0000E500 0000                       		dc.w byte_DD02-Ani_obj41
0000E502 0000                       		dc.w byte_DD0E-Ani_obj41
0000E504 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E510 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E51C                            		even
0000E51C                            		even
0000E51C                            
0000E51C                            ; ---------------------------------------------------------------------------
0000E51C                            ; Sprite mappings - springs
0000E51C                            ; ---------------------------------------------------------------------------
0000E51C                            Map_obj41:
0000E51C                            	include "_maps\obj41.asm"
0000E51C                            ; ---------------------------------------------------------------------------
0000E51C                            ; Sprite mappings - springs
0000E51C                            ; ---------------------------------------------------------------------------
0000E51C 0000                       		dc.w byte_DD26-Map_obj41
0000E51E 0000                       		dc.w byte_DD31-Map_obj41
0000E520 0000                       		dc.w byte_DD37-Map_obj41
0000E522 0000                       		dc.w byte_DD47-Map_obj41
0000E524 0000                       		dc.w byte_DD4D-Map_obj41
0000E526 0000                       		dc.w byte_DD53-Map_obj41
0000E528 02                         byte_DD26:	dc.b 2
0000E529 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E52E 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E533 01                         byte_DD31:	dc.b 1
0000E534 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E539 03                         byte_DD37:	dc.b 3
0000E53A E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E53F F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E544 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E549 01                         byte_DD47:	dc.b 1
0000E54A F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E54F 01                         byte_DD4D:	dc.b 1
0000E550 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E555 04                         byte_DD53:	dc.b 4
0000E556 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E55B F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E560 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E565 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E56A                            		even
0000E56A                            		even
0000E56A                            
0000E56A                            ; ===========================================================================
0000E56A                            ; ---------------------------------------------------------------------------
0000E56A                            ; Object 42 - Newtron enemy (GHZ)
0000E56A                            ; ---------------------------------------------------------------------------
0000E56A                            
0000E56A                            Obj42:					; XREF: Obj_Index
0000E56A 7000                       		moveq	#0,d0
0000E56C 1028 0024                  		move.b	$24(a0),d0
0000E570 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E574 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E578                            ; ===========================================================================
0000E578 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E57A 0000                       		dc.w Obj42_Action-Obj42_Index
0000E57C 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E57E                            ; ===========================================================================
0000E57E                            
0000E57E                            Obj42_Main:				; XREF: Obj42_Index
0000E57E 5428 0024                  		addq.b	#2,$24(a0)
0000E582 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E58A 317C 049B 0002             		move.w	#$49B,2(a0)
0000E590 117C 0004 0001             		move.b	#4,1(a0)
0000E596 117C 0004 0018             		move.b	#4,$18(a0)
0000E59C 117C 0014 0019             		move.b	#$14,$19(a0)
0000E5A2 117C 0010 0016             		move.b	#$10,$16(a0)
0000E5A8 117C 0008 0017             		move.b	#8,$17(a0)
0000E5AE                            
0000E5AE                            Obj42_Action:				; XREF: Obj42_Index
0000E5AE 7000                       		moveq	#0,d0
0000E5B0 1028 0025                  		move.b	$25(a0),d0
0000E5B4 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E5B8 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E5BC 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E5C2 6100 C904                  		bsr.w	AnimateSprite
0000E5C6 6000 0000                  		bra.w	MarkObjGone
0000E5CA                            ; ===========================================================================
0000E5CA 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E5CC 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E5CE 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E5D0 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E5D2 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E5D4                            ; ===========================================================================
0000E5D4                            
0000E5D4                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E5D4 08E8 0000 0022             		bset	#0,$22(a0)
0000E5DA 3038 D008                  		move.w	($FFFFD008).w,d0
0000E5DE 9068 0008                  		sub.w	8(a0),d0
0000E5E2 6400                       		bcc.s	loc_DDEA
0000E5E4 4440                       		neg.w	d0
0000E5E6 08A8 0000 0022             		bclr	#0,$22(a0)
0000E5EC                            
0000E5EC                            loc_DDEA:
0000E5EC 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E5F0 6400                       		bcc.s	locret_DE12	; if not, branch
0000E5F2 5428 0025                  		addq.b	#2,$25(a0)
0000E5F6 117C 0001 001C             		move.b	#1,$1C(a0)
0000E5FC 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E600 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E602 317C 249B 0002             		move.w	#$249B,2(a0)
0000E608 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E60E 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E614                            
0000E614                            locret_DE12:
0000E614 4E75                       		rts	
0000E616                            ; ===========================================================================
0000E616                            
0000E616                            Obj42_Type00:				; XREF: Obj42_Index2
0000E616 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E61C 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E61E 08E8 0000 0022             		bset	#0,$22(a0)
0000E624 3038 D008                  		move.w	($FFFFD008).w,d0
0000E628 9068 0008                  		sub.w	8(a0),d0
0000E62C 6400                       		bcc.s	locret_DE32
0000E62E 08A8 0000 0022             		bclr	#0,$22(a0)
0000E634                            
0000E634                            locret_DE32:
0000E634 4E75                       		rts	
0000E636                            ; ===========================================================================
0000E636                            
0000E636                            Obj42_Fall:				; XREF: Obj42_Type00
0000E636 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E63C 6600                       		bne.s	loc_DE42
0000E63E 117C 000C 0020             		move.b	#$C,$20(a0)
0000E644                            
0000E644                            loc_DE42:
0000E644 6100 F770                  		bsr.w	ObjectFall
0000E648 6100 0000                  		bsr.w	ObjHitFloor
0000E64C 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E64E 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E650 D368 000C                  		add.w	d1,$C(a0)
0000E654 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E65A 5428 0025                  		addq.b	#2,$25(a0)
0000E65E 117C 0002 001C             		move.b	#2,$1C(a0)
0000E664 0828 0005 0002             		btst	#5,2(a0)
0000E66A 6700                       		beq.s	Obj42_Move
0000E66C 5228 001C                  		addq.b	#1,$1C(a0)
0000E670                            
0000E670                            Obj42_Move:
0000E670 117C 000D 0020             		move.b	#$D,$20(a0)
0000E676 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E67C 0828 0000 0022             		btst	#0,$22(a0)
0000E682 6600                       		bne.s	locret_DE86
0000E684 4468 0010                  		neg.w	$10(a0)
0000E688                            
0000E688                            locret_DE86:
0000E688 4E75                       		rts	
0000E68A                            ; ===========================================================================
0000E68A                            
0000E68A                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E68A 6100 F756                  		bsr.w	SpeedToPos
0000E68E 6100 0000                  		bsr.w	ObjHitFloor
0000E692 0C41 FFF8                  		cmpi.w	#-8,d1
0000E696 6D00                       		blt.s	loc_DEA2
0000E698 0C41 000C                  		cmpi.w	#$C,d1
0000E69C 6C00                       		bge.s	loc_DEA2
0000E69E D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E6A2 4E75                       		rts	
0000E6A4                            ; ===========================================================================
0000E6A4                            
0000E6A4                            loc_DEA2:
0000E6A4 5428 0025                  		addq.b	#2,$25(a0)
0000E6A8 4E75                       		rts	
0000E6AA                            ; ===========================================================================
0000E6AA                            
0000E6AA                            Obj42_Speed:				; XREF: Obj42_Index2
0000E6AA 6100 F736                  		bsr.w	SpeedToPos
0000E6AE 4E75                       		rts	
0000E6B0                            ; ===========================================================================
0000E6B0                            
0000E6B0                            Obj42_Type01:				; XREF: Obj42_Index2
0000E6B0 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E6B6 6600                       		bne.s	Obj42_FireMissile
0000E6B8 117C 000C 0020             		move.b	#$C,$20(a0)
0000E6BE                            
0000E6BE                            Obj42_FireMissile:
0000E6BE 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E6C4 6600                       		bne.s	locret_DF14
0000E6C6 4A28 0032                  		tst.b	$32(a0)
0000E6CA 6600                       		bne.s	locret_DF14
0000E6CC 117C 0001 0032             		move.b	#1,$32(a0)
0000E6D2 6100 FBBA                  		bsr.w	SingleObjLoad
0000E6D6 6600                       		bne.s	locret_DF14
0000E6D8 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E6DC 3368 0008 0008             		move.w	8(a0),8(a1)
0000E6E2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E6E8 5169 000C                  		subq.w	#8,$C(a1)
0000E6EC 337C 0200 0010             		move.w	#$200,$10(a1)
0000E6F2 303C 0014                  		move.w	#$14,d0
0000E6F6 0828 0000 0022             		btst	#0,$22(a0)
0000E6FC 6600                       		bne.s	loc_DF04
0000E6FE 4440                       		neg.w	d0
0000E700 4469 0010                  		neg.w	$10(a1)
0000E704                            
0000E704                            loc_DF04:
0000E704 D169 0008                  		add.w	d0,8(a1)
0000E708 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E70E 137C 0001 0028             		move.b	#1,$28(a1)
0000E714                            
0000E714                            locret_DF14:
0000E714 4E75                       		rts	
0000E716                            ; ===========================================================================
0000E716                            
0000E716                            Obj42_Delete:				; XREF: Obj42_Index
0000E716 6000 F72C                  		bra.w	DeleteObject
0000E71A                            ; ===========================================================================
0000E71A                            Ani_obj42:
0000E71A                            	include "_anim\obj42.asm"
0000E71A                            ; ---------------------------------------------------------------------------
0000E71A                            ; Animation script - Newtron enemy
0000E71A                            ; ---------------------------------------------------------------------------
0000E71A 0000                       		dc.w byte_DF24-Ani_obj42
0000E71C 0000                       		dc.w byte_DF28-Ani_obj42
0000E71E 0000                       		dc.w byte_DF30-Ani_obj42
0000E720 0000                       		dc.w byte_DF34-Ani_obj42
0000E722 0000                       		dc.w byte_DF38-Ani_obj42
0000E724 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E728 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E730 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E734 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E738 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E742                            		even
0000E742                            		even
0000E742                            
0000E742                            ; ---------------------------------------------------------------------------
0000E742                            ; Sprite mappings - Newtron enemy (GHZ)
0000E742                            ; ---------------------------------------------------------------------------
0000E742                            Map_obj42:
0000E742                            	include "_maps\obj42.asm"
0000E742                            ; ---------------------------------------------------------------------------
0000E742                            ; Sprite mappings - Newtron enemy (GHZ)
0000E742                            ; ---------------------------------------------------------------------------
0000E742 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E746 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E74A 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E74E 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E752 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E756 0000                       		dc.w byte_DFF8-Map_obj42
0000E758 03                         byte_DF58:	dc.b 3
0000E759 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E75E F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E763 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E768 03                         byte_DF68:	dc.b 3
0000E769 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E76E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E773 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E778 03                         byte_DF78:	dc.b 3
0000E779 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E77E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E783 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E788 04                         byte_DF88:	dc.b 4
0000E789 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E78E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E793 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E798 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E79D 03                         byte_DF9D:	dc.b 3
0000E79E F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E7A3 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E7A8 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E7AD 02                         byte_DFAD:	dc.b 2
0000E7AE F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E7B3 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E7B8 03                         byte_DFB8:	dc.b 3
0000E7B9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E7BE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E7C3 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E7C8 03                         byte_DFC8:	dc.b 3
0000E7C9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E7CE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E7D3 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E7D8 03                         byte_DFD8:	dc.b 3
0000E7D9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E7DE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E7E3 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E7E8 03                         byte_DFE8:	dc.b 3
0000E7E9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E7EE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E7F3 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E7F8 00                         byte_DFF8:	dc.b 0
0000E7FA 00                         		even
0000E7FA 00                         		even
0000E7FA                            
0000E7FA                            ; ===========================================================================
0000E7FA                            ; ---------------------------------------------------------------------------
0000E7FA                            ; Object 43 - Roller enemy (SYZ)
0000E7FA                            ; ---------------------------------------------------------------------------
0000E7FA                            
0000E7FA                            Obj43:					; XREF: Obj_Index
0000E7FA 7000                       		moveq	#0,d0
0000E7FC 1028 0024                  		move.b	$24(a0),d0
0000E800 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E804 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E808                            ; ===========================================================================
0000E808 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E80A 0000                       		dc.w Obj43_Action-Obj43_Index
0000E80C                            ; ===========================================================================
0000E80C                            
0000E80C                            Obj43_Main:				; XREF: Obj43_Index
0000E80C 117C 000E 0016             		move.b	#$E,$16(a0)
0000E812 117C 0008 0017             		move.b	#8,$17(a0)
0000E818 6100 F59C                  		bsr.w	ObjectFall
0000E81C 6100 0000                  		bsr.w	ObjHitFloor
0000E820 4A41                       		tst.w	d1
0000E822 6A00                       		bpl.s	locret_E052
0000E824 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E828 317C 0000 0012             		move.w	#0,$12(a0)
0000E82E 5428 0024                  		addq.b	#2,$24(a0)
0000E832 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E83A 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E840 117C 0004 0001             		move.b	#4,1(a0)
0000E846 117C 0004 0018             		move.b	#4,$18(a0)
0000E84C 117C 0010 0019             		move.b	#$10,$19(a0)
0000E852                            
0000E852                            locret_E052:
0000E852 4E75                       		rts	
0000E854                            ; ===========================================================================
0000E854                            
0000E854                            Obj43_Action:				; XREF: Obj43_Index
0000E854 7000                       		moveq	#0,d0
0000E856 1028 0025                  		move.b	$25(a0),d0
0000E85A 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E85E 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E862 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E868 6100 C65E                  		bsr.w	AnimateSprite
0000E86C 3028 0008                  		move.w	8(a0),d0
0000E870 0240 FF80                  		andi.w	#$FF80,d0
0000E874 3238 F700                  		move.w	($FFFFF700).w,d1
0000E878 0441 0080                  		subi.w	#$80,d1
0000E87C 0241 FF80                  		andi.w	#$FF80,d1
0000E880 9041                       		sub.w	d1,d0
0000E882 0C40 0280                  		cmpi.w	#$280,d0
0000E886 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E88A 6000 F57C                  		bra.w	DisplaySprite
0000E88E                            ; ===========================================================================
0000E88E                            
0000E88E                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E88E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E892 7000                       		moveq	#0,d0
0000E894 1028 0023                  		move.b	$23(a0),d0
0000E898 6700                       		beq.s	Obj43_Delete
0000E89A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E8A0                            
0000E8A0                            Obj43_Delete:
0000E8A0 6000 F5A2                  		bra.w	DeleteObject
0000E8A4                            ; ===========================================================================
0000E8A4 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E8A6 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E8A8 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E8AA 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E8AC                            ; ===========================================================================
0000E8AC                            
0000E8AC                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E8AC 3038 D008                  		move.w	($FFFFD008).w,d0
0000E8B0 0440 0100                  		subi.w	#$100,d0
0000E8B4 6500                       		bcs.s	loc_E0D2
0000E8B6 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E8BA 6500                       		bcs.s	loc_E0D2
0000E8BC 5828 0025                  		addq.b	#4,$25(a0)
0000E8C0 117C 0002 001C             		move.b	#2,$1C(a0)
0000E8C6 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E8CC 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E8D2                            
0000E8D2                            loc_E0D2:
0000E8D2 588F                       		addq.l	#4,sp
0000E8D4 4E75                       		rts	
0000E8D6                            ; ===========================================================================
0000E8D6                            
0000E8D6                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E8D6 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E8DC 6700                       		beq.s	loc_E0F8
0000E8DE 5368 0030                  		subq.w	#1,$30(a0)
0000E8E2 6A00                       		bpl.s	locret_E0F6
0000E8E4 117C 0001 001C             		move.b	#1,$1C(a0)
0000E8EA 317C 0700 0010             		move.w	#$700,$10(a0)
0000E8F0 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E8F6                            
0000E8F6                            locret_E0F6:
0000E8F6 4E75                       		rts	
0000E8F8                            ; ===========================================================================
0000E8F8                            
0000E8F8                            loc_E0F8:
0000E8F8 5428 0025                  		addq.b	#2,$25(a0)
0000E8FC 4E75                       		rts	
0000E8FE                            ; ===========================================================================
0000E8FE                            
0000E8FE                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E8FE 6100 0000                  		bsr.w	Obj43_Stop
0000E902 6100 F4DE                  		bsr.w	SpeedToPos
0000E906 6100 0000                  		bsr.w	ObjHitFloor
0000E90A 0C41 FFF8                  		cmpi.w	#-8,d1
0000E90E 6D00                       		blt.s	Obj43_Jump
0000E910 0C41 000C                  		cmpi.w	#$C,d1
0000E914 6C00                       		bge.s	Obj43_Jump
0000E916 D368 000C                  		add.w	d1,$C(a0)
0000E91A 4E75                       		rts	
0000E91C                            ; ===========================================================================
0000E91C                            
0000E91C                            Obj43_Jump:
0000E91C 5428 0025                  		addq.b	#2,$25(a0)
0000E920 08E8 0000 0032             		bset	#0,$32(a0)
0000E926 6700                       		beq.s	locret_E12E
0000E928 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E92E                            
0000E92E                            locret_E12E:
0000E92E 4E75                       		rts	
0000E930                            ; ===========================================================================
0000E930                            
0000E930                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E930 6100 F484                  		bsr.w	ObjectFall
0000E934 4A68 0012                  		tst.w	$12(a0)
0000E938 6B00                       		bmi.s	locret_E150
0000E93A 6100 0000                  		bsr.w	ObjHitFloor
0000E93E 4A41                       		tst.w	d1
0000E940 6A00                       		bpl.s	locret_E150
0000E942 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E946 5528 0025                  		subq.b	#2,$25(a0)
0000E94A 317C 0000 0012             		move.w	#0,$12(a0)
0000E950                            
0000E950                            locret_E150:
0000E950 4E75                       		rts	
0000E952                            
0000E952                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E952                            
0000E952                            
0000E952                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E952 4A28 0032                  		tst.b	$32(a0)
0000E956 6B00                       		bmi.s	locret_E188
0000E958 3038 D008                  		move.w	($FFFFD008).w,d0
0000E95C 0440 0030                  		subi.w	#$30,d0
0000E960 9068 0008                  		sub.w	8(a0),d0
0000E964 6400                       		bcc.s	locret_E188
0000E966 117C 0000 001C             		move.b	#0,$1C(a0)
0000E96C 117C 000E 0020             		move.b	#$E,$20(a0)
0000E972 4268 0010                  		clr.w	$10(a0)
0000E976 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E97C 117C 0002 0025             		move.b	#2,$25(a0)
0000E982 08E8 0007 0032             		bset	#7,$32(a0)
0000E988                            
0000E988                            locret_E188:
0000E988 4E75                       		rts	
0000E98A                            ; End of function Obj43_Stop
0000E98A                            
0000E98A                            ; ===========================================================================
0000E98A                            Ani_obj43:
0000E98A                            	include "_anim\obj43.asm"
0000E98A                            ; ---------------------------------------------------------------------------
0000E98A                            ; Animation script - Roller enemy
0000E98A                            ; ---------------------------------------------------------------------------
0000E98A 0000                       		dc.w byte_E190-Ani_obj43
0000E98C 0000                       		dc.w byte_E196-Ani_obj43
0000E98E 0000                       		dc.w byte_E19C-Ani_obj43
0000E990 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E996 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E99C 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E9A2 00                         		even
0000E9A2 00                         		even
0000E9A2                            
0000E9A2                            ; ---------------------------------------------------------------------------
0000E9A2                            ; Sprite mappings - Roller enemy (SYZ)
0000E9A2                            ; ---------------------------------------------------------------------------
0000E9A2                            Map_obj43:
0000E9A2                            	include "_maps\obj43.asm"
0000E9A2                            Map_61da:
0000E9A2 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000E9A4 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000E9A6 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000E9A8 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000E9AA 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000E9AC 02                         Map_61da_A: 	dc.b $2
0000E9AD DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000E9B2 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000E9B7 02                         Map_61da_15: 	dc.b $2
0000E9B8 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000E9BD FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000E9C2 01                         Map_61da_20: 	dc.b $1
0000E9C3 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000E9C8 01                         Map_61da_26: 	dc.b $1
0000E9C9 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000E9CE 01                         Map_61da_2C: 	dc.b $1
0000E9CF F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000E9D4                            	even
0000E9D4                            	even
0000E9D4                            
0000E9D4                            ; ===========================================================================
0000E9D4                            ; ---------------------------------------------------------------------------
0000E9D4                            ; Object 44 - walls (GHZ)
0000E9D4                            ; ---------------------------------------------------------------------------
0000E9D4                            
0000E9D4                            Obj44:					; XREF: Obj_Index
0000E9D4 7000                       		moveq	#0,d0
0000E9D6 1028 0024                  		move.b	$24(a0),d0
0000E9DA 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E9DE 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E9E2                            ; ===========================================================================
0000E9E2 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E9E4 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E9E6 0000                       		dc.w Obj44_Display-Obj44_Index
0000E9E8                            ; ===========================================================================
0000E9E8                            
0000E9E8                            Obj44_Main:				; XREF: Obj44_Index
0000E9E8 5428 0024                  		addq.b	#2,$24(a0)
0000E9EC 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E9F4 317C 434C 0002             		move.w	#$434C,2(a0)
0000E9FA 0028 0004 0001             		ori.b	#4,1(a0)
0000EA00 117C 0008 0019             		move.b	#8,$19(a0)
0000EA06 117C 0006 0018             		move.b	#6,$18(a0)
0000EA0C 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EA12 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EA18 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EA1A 5428 0024                  		addq.b	#2,$24(a0)
0000EA1E 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EA20                            ; ===========================================================================
0000EA20                            
0000EA20                            Obj44_Solid:				; XREF: Obj44_Index
0000EA20 323C 0013                  		move.w	#$13,d1
0000EA24 343C 0028                  		move.w	#$28,d2
0000EA28 6100 A6FA                  		bsr.w	Obj44_SolidWall
0000EA2C                            
0000EA2C                            Obj44_Display:				; XREF: Obj44_Index
0000EA2C 6100 F3DA                  		bsr.w	DisplaySprite
0000EA30 3028 0008                  		move.w	8(a0),d0
0000EA34 0240 FF80                  		andi.w	#$FF80,d0
0000EA38 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA3C 0441 0080                  		subi.w	#$80,d1
0000EA40 0241 FF80                  		andi.w	#$FF80,d1
0000EA44 9041                       		sub.w	d1,d0
0000EA46 0C40 0280                  		cmpi.w	#$280,d0
0000EA4A 6200 F3F8                  		bhi.w	DeleteObject
0000EA4E 4E75                       		rts	
0000EA50                            ; ===========================================================================
0000EA50                            ; ---------------------------------------------------------------------------
0000EA50                            ; Sprite mappings - walls (GHZ)
0000EA50                            ; ---------------------------------------------------------------------------
0000EA50                            Map_obj44:
0000EA50                            	include "_maps\obj44.asm"
0000EA50                            ; ---------------------------------------------------------------------------
0000EA50                            ; Sprite mappings - walls (GHZ)
0000EA50                            ; ---------------------------------------------------------------------------
0000EA50 0000                       		dc.w byte_E256-Map_obj44
0000EA52 0000                       		dc.w byte_E26B-Map_obj44
0000EA54 0000                       		dc.w byte_E280-Map_obj44
0000EA56 04                         byte_E256:	dc.b 4
0000EA57 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EA5C F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EA61 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EA66 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EA6B 04                         byte_E26B:	dc.b 4
0000EA6C E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000EA71 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EA76 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EA7B 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EA80 04                         byte_E280:	dc.b 4
0000EA81 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EA86 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EA8B 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EA90 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EA96 00                         		even
0000EA96 00                         		even
0000EA96                            
0000EA96                            ; ===========================================================================
0000EA96                            ; ---------------------------------------------------------------------------
0000EA96                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EA96                            ; ---------------------------------------------------------------------------
0000EA96                            
0000EA96                            Obj13:					; XREF: Obj_Index
0000EA96 7000                       		moveq	#0,d0
0000EA98 1028 0024                  		move.b	$24(a0),d0
0000EA9C 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EAA0 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EAA4 6000 0000                  		bra.w	Obj14_ChkDel
0000EAA8                            ; ===========================================================================
0000EAA8 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EAAA 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EAAC                            ; ---------------------------------------------------------------------------
0000EAAC                            ;
0000EAAC                            ; Lava ball production rates
0000EAAC                            ;
0000EAAC 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EAB2                            ; ===========================================================================
0000EAB2                            
0000EAB2                            Obj13_Main:				; XREF: Obj13_Index
0000EAB2 5428 0024                  		addq.b	#2,$24(a0)
0000EAB6 1028 0028                  		move.b	$28(a0),d0
0000EABA E848                       		lsr.w	#4,d0
0000EABC 0240 000F                  		andi.w	#$F,d0
0000EAC0 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EAC6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EACC 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EAD2                            
0000EAD2                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EAD2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EAD6 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EAD8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EADE 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000EAE2 6600                       		bne.s	locret_E302
0000EAE4 6100 F7A8                  		bsr.w	SingleObjLoad
0000EAE8 6600                       		bne.s	locret_E302
0000EAEA 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EAEE 3368 0008 0008             		move.w	8(a0),8(a1)
0000EAF4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EAFA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EB00                            
0000EB00                            locret_E302:
0000EB00 4E75                       		rts	
0000EB02                            ; ===========================================================================
0000EB02                            ; ---------------------------------------------------------------------------
0000EB02                            ; Object 14 - lava balls (MZ, SLZ)
0000EB02                            ; ---------------------------------------------------------------------------
0000EB02                            
0000EB02                            Obj14:					; XREF: Obj_Index
0000EB02 7000                       		moveq	#0,d0
0000EB04 1028 0024                  		move.b	$24(a0),d0
0000EB08 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EB0C 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EB10 6000 F2F6                  		bra.w	DisplaySprite
0000EB14                            ; ===========================================================================
0000EB14 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EB16 0000                       		dc.w Obj14_Action-Obj14_Index
0000EB18 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EB1A                            
0000EB1A FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EB24 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EB2C                            ; ===========================================================================
0000EB2C                            
0000EB2C                            Obj14_Main:				; XREF: Obj14_Index
0000EB2C 5428 0024                  		addq.b	#2,$24(a0)
0000EB30 117C 0008 0016             		move.b	#8,$16(a0)
0000EB36 117C 0008 0017             		move.b	#8,$17(a0)
0000EB3C 217C 0000 BAC6 0004        		move.l	#Map_obj14,4(a0)
0000EB44 317C 0345 0002             		move.w	#$345,2(a0)
0000EB4A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EB50 6600                       		bne.s	loc_E35A
0000EB52 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EB58                            
0000EB58                            loc_E35A:
0000EB58 117C 0004 0001             		move.b	#4,1(a0)
0000EB5E 117C 0003 0018             		move.b	#3,$18(a0)
0000EB64 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EB6A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EB70 4A28 0029                  		tst.b	$29(a0)
0000EB74 6700                       		beq.s	Obj14_SetSpeed
0000EB76 5428 0018                  		addq.b	#2,$18(a0)
0000EB7A                            
0000EB7A                            Obj14_SetSpeed:
0000EB7A 7000                       		moveq	#0,d0
0000EB7C 1028 0028                  		move.b	$28(a0),d0
0000EB80 D040                       		add.w	d0,d0
0000EB82 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EB88 117C 0008 0019             		move.b	#8,$19(a0)
0000EB8E 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EB94 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EB96 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB9C 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EBA2 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EBA8 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EBAE                            
0000EBAE                            Obj14_PlaySnd:
0000EBAE 303C 00AE                  		move.w	#$AE,d0
0000EBB2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EBB8                            
0000EBB8                            Obj14_Action:				; XREF: Obj14_Index
0000EBB8 7000                       		moveq	#0,d0
0000EBBA 1028 0028                  		move.b	$28(a0),d0
0000EBBE D040                       		add.w	d0,d0
0000EBC0 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EBC4 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EBC8 6100 F218                  		bsr.w	SpeedToPos
0000EBCC 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EBD2 6100 C2F4                  		bsr.w	AnimateSprite
0000EBD6                            
0000EBD6                            Obj14_ChkDel:				; XREF: Obj13
0000EBD6 3028 0008                  		move.w	8(a0),d0
0000EBDA 0240 FF80                  		andi.w	#$FF80,d0
0000EBDE 3238 F700                  		move.w	($FFFFF700).w,d1
0000EBE2 0441 0080                  		subi.w	#$80,d1
0000EBE6 0241 FF80                  		andi.w	#$FF80,d1
0000EBEA 9041                       		sub.w	d1,d0
0000EBEC 0C40 0280                  		cmpi.w	#$280,d0
0000EBF0 6200 F252                  		bhi.w	DeleteObject
0000EBF4 4E75                       		rts	
0000EBF6                            ; ===========================================================================
0000EBF6 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EBFA 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EBFE 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EC02 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EC06 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EC08                            ; ===========================================================================
0000EC08                            ; lavaball types 00-03 fly up and fall back down
0000EC08                            
0000EC08                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EC08 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EC0E 3028 0030                  		move.w	$30(a0),d0
0000EC12 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EC16 6400                       		bcc.s	loc_E41E	; if not, branch
0000EC18 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EC1C                            
0000EC1C                            loc_E41E:
0000EC1C 08A8 0001 0022             		bclr	#1,$22(a0)
0000EC22 4A68 0012                  		tst.w	$12(a0)
0000EC26 6A00                       		bpl.s	locret_E430
0000EC28 08E8 0001 0022             		bset	#1,$22(a0)
0000EC2E                            
0000EC2E                            locret_E430:
0000EC2E 4E75                       		rts	
0000EC30                            ; ===========================================================================
0000EC30                            ; lavaball type	04 flies up until it hits the ceiling
0000EC30                            
0000EC30                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EC30 08E8 0001 0022             		bset	#1,$22(a0)
0000EC36 6100 0000                  		bsr.w	ObjHitCeiling
0000EC3A 4A41                       		tst.w	d1
0000EC3C 6A00                       		bpl.s	locret_E452
0000EC3E 117C 0008 0028             		move.b	#8,$28(a0)
0000EC44 117C 0001 001C             		move.b	#1,$1C(a0)
0000EC4A 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EC50                            
0000EC50                            locret_E452:
0000EC50 4E75                       		rts	
0000EC52                            ; ===========================================================================
0000EC52                            ; lavaball type	05 falls down until it hits the	floor
0000EC52                            
0000EC52                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EC52 08A8 0001 0022             		bclr	#1,$22(a0)
0000EC58 6100 0000                  		bsr.w	ObjHitFloor
0000EC5C 4A41                       		tst.w	d1
0000EC5E 6A00                       		bpl.s	locret_E474
0000EC60 117C 0008 0028             		move.b	#8,$28(a0)
0000EC66 117C 0001 001C             		move.b	#1,$1C(a0)
0000EC6C 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EC72                            
0000EC72                            locret_E474:
0000EC72 4E75                       		rts	
0000EC74                            ; ===========================================================================
0000EC74                            ; lavaball types 06-07 move sideways
0000EC74                            
0000EC74                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EC74 08E8 0000 0022             		bset	#0,$22(a0)
0000EC7A 76F8                       		moveq	#-8,d3
0000EC7C 6100 0000                  		bsr.w	ObjHitWallLeft
0000EC80 4A41                       		tst.w	d1
0000EC82 6A00                       		bpl.s	locret_E498
0000EC84 117C 0008 0028             		move.b	#8,$28(a0)
0000EC8A 117C 0003 001C             		move.b	#3,$1C(a0)
0000EC90 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EC96                            
0000EC96                            locret_E498:
0000EC96 4E75                       		rts	
0000EC98                            ; ===========================================================================
0000EC98                            
0000EC98                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EC98 08A8 0000 0022             		bclr	#0,$22(a0)
0000EC9E 7608                       		moveq	#8,d3
0000ECA0 6100 0000                  		bsr.w	ObjHitWallRight
0000ECA4 4A41                       		tst.w	d1
0000ECA6 6A00                       		bpl.s	locret_E4BC
0000ECA8 117C 0008 0028             		move.b	#8,$28(a0)
0000ECAE 117C 0003 001C             		move.b	#3,$1C(a0)
0000ECB4 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000ECBA                            
0000ECBA                            locret_E4BC:
0000ECBA 4E75                       		rts	
0000ECBC                            ; ===========================================================================
0000ECBC                            
0000ECBC                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000ECBC 4E75                       		rts	
0000ECBE                            ; ===========================================================================
0000ECBE                            
0000ECBE                            Obj14_Delete:				; XREF: Obj14_Index
0000ECBE 6000 F184                  		bra.w	DeleteObject
0000ECC2                            ; ===========================================================================
0000ECC2                            Ani_obj14:
0000ECC2                            	include "_anim\obj14.asm"
0000ECC2                            ; ---------------------------------------------------------------------------
0000ECC2                            ; Animation script - lava balls
0000ECC2                            ; ---------------------------------------------------------------------------
0000ECC2 0000                       		dc.w byte_E4CC-Ani_obj14
0000ECC4 0000                       		dc.w byte_E4D2-Ani_obj14
0000ECC6 0000                       		dc.w byte_E4D6-Ani_obj14
0000ECC8 0000                       		dc.w byte_E4DC-Ani_obj14
0000ECCA 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000ECD0 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000ECD4 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000ECDA 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000ECDE                            		even
0000ECDE                            		even
0000ECDE                            
0000ECDE                            ; ===========================================================================
0000ECDE                            ; ---------------------------------------------------------------------------
0000ECDE                            ; Object 6D - flame thrower (SBZ)
0000ECDE                            ; ---------------------------------------------------------------------------
0000ECDE                            
0000ECDE                            Obj6D:					; XREF: Obj_Index
0000ECDE 7000                       		moveq	#0,d0
0000ECE0 1028 0024                  		move.b	$24(a0),d0
0000ECE4 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000ECE8 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000ECEC                            ; ===========================================================================
0000ECEC 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000ECEE 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000ECF0                            ; ===========================================================================
0000ECF0                            
0000ECF0                            Obj6D_Main:				; XREF: Obj6D_Index
0000ECF0 5428 0024                  		addq.b	#2,$24(a0)
0000ECF4 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000ECFC 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000ED02 0028 0004 0001             		ori.b	#4,1(a0)
0000ED08 117C 0001 0018             		move.b	#1,$18(a0)
0000ED0E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ED14 117C 000C 0019             		move.b	#$C,$19(a0)
0000ED1A 1028 0028                  		move.b	$28(a0),d0
0000ED1E 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000ED22 D040                       		add.w	d0,d0		; multiply by 2
0000ED24 3140 0030                  		move.w	d0,$30(a0)
0000ED28 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000ED2C 1028 0028                  		move.b	$28(a0),d0
0000ED30 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000ED34 EB48                       		lsl.w	#5,d0		; multiply by $20
0000ED36 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000ED3A 117C 000A 0036             		move.b	#$A,$36(a0)
0000ED40 0828 0001 0022             		btst	#1,$22(a0)
0000ED46 6700                       		beq.s	Obj6D_Action
0000ED48 117C 0002 001C             		move.b	#2,$1C(a0)
0000ED4E 117C 0015 0036             		move.b	#$15,$36(a0)
0000ED54                            
0000ED54                            Obj6D_Action:				; XREF: Obj6D_Index
0000ED54 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000ED58 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000ED5A 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000ED60 0868 0000 001C             		bchg	#0,$1C(a0)
0000ED66 6700                       		beq.s	loc_E57A
0000ED68 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000ED6E 303C 00B3                  		move.w	#$B3,d0
0000ED72 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000ED78                            
0000ED78                            loc_E57A:
0000ED78 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000ED7E 6100 C148                  		bsr.w	AnimateSprite
0000ED82 117C 0000 0020             		move.b	#0,$20(a0)
0000ED88 1028 0036                  		move.b	$36(a0),d0
0000ED8C B028 001A                  		cmp.b	$1A(a0),d0
0000ED90 6600                       		bne.s	Obj6D_ChkDel
0000ED92 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000ED98                            
0000ED98                            Obj6D_ChkDel:
0000ED98 3028 0008                  		move.w	8(a0),d0
0000ED9C 0240 FF80                  		andi.w	#$FF80,d0
0000EDA0 3238 F700                  		move.w	($FFFFF700).w,d1
0000EDA4 0441 0080                  		subi.w	#$80,d1
0000EDA8 0241 FF80                  		andi.w	#$FF80,d1
0000EDAC 9041                       		sub.w	d1,d0
0000EDAE 0C40 0280                  		cmpi.w	#$280,d0
0000EDB2 6200 F090                  		bhi.w	DeleteObject
0000EDB6 6000 F050                  		bra.w	DisplaySprite
0000EDBA                            ; ===========================================================================
0000EDBA                            Ani_obj6D:
0000EDBA                            	include "_anim\obj6D.asm"
0000EDBA                            ; ---------------------------------------------------------------------------
0000EDBA                            ; Animation script - flamethrower (SBZ)
0000EDBA                            ; ---------------------------------------------------------------------------
0000EDBA 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EDBC 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EDBE 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EDC0 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EDC2 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EDD0 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EDDA 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EDE8 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EDF2                            		even
0000EDF2                            		even
0000EDF2                            
0000EDF2                            ; ---------------------------------------------------------------------------
0000EDF2                            ; Sprite mappings - flame thrower (SBZ)
0000EDF2                            ; ---------------------------------------------------------------------------
0000EDF2                            Map_obj6D:
0000EDF2                            	include "_maps\obj6D.asm"
0000EDF2                            ; ---------------------------------------------------------------------------
0000EDF2                            ; Sprite mappings - flame thrower (SBZ)
0000EDF2                            ; ---------------------------------------------------------------------------
0000EDF2 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EDF6 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EDFA 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EDFE 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EE02 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EE06 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EE0A 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EE0E 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EE12 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EE16 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EE1A 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EE1E 01                         byte_E620:	dc.b 1
0000EE1F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE24 02                         byte_E626:	dc.b 2
0000EE25 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE2A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE2F 02                         byte_E631:	dc.b 2
0000EE30 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE35 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE3A 03                         byte_E63C:	dc.b 3
0000EE3B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE40 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE45 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE4A 03                         byte_E64C:	dc.b 3
0000EE4B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE50 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE55 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE5A 04                         byte_E65C:	dc.b 4
0000EE5B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE60 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE65 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE6A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE6F 04                         byte_E671:	dc.b 4
0000EE70 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EE75 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE7A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE7F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE84 05                         byte_E686:	dc.b 5
0000EE85 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EE8A 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE8F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE94 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE99 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE9E 05                         byte_E6A0:	dc.b 5
0000EE9F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EEA4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EEA9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEAE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEB3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEB8 06                         byte_E6BA:	dc.b 6
0000EEB9 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EEBE F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EEC3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEC8 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EECD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EED2 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EED7 06                         byte_E6D9:	dc.b 6
0000EED8 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EEDD F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EEE2 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EEE7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEEC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEF1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEF6 01                         byte_E6F8:	dc.b 1
0000EEF7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEFC 02                         byte_E6FE:	dc.b 2
0000EEFD 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF02 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF07 02                         byte_E709:	dc.b 2
0000EF08 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF0D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF12 03                         byte_E714:	dc.b 3
0000EF13 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF18 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF1D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF22 03                         byte_E724:	dc.b 3
0000EF23 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF28 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF2D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF32 04                         byte_E734:	dc.b 4
0000EF33 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF38 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF3D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF42 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF47 04                         byte_E749:	dc.b 4
0000EF48 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EF4D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF52 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF57 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF5C 05                         byte_E75E:	dc.b 5
0000EF5D F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EF62 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF67 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF6C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF71 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF76 05                         byte_E778:	dc.b 5
0000EF77 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF7C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EF81 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF86 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF8B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF90 06                         byte_E792:	dc.b 6
0000EF91 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EF96 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EF9B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EFA0 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EFA5 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFAA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EFAF 06                         byte_E7B1:	dc.b 6
0000EFB0 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EFB5 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EFBA 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EFBF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EFC4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFC9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EFCE                            		even
0000EFCE                            		even
0000EFCE                            
0000EFCE                            ; ===========================================================================
0000EFCE                            ; ---------------------------------------------------------------------------
0000EFCE                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000EFCE                            ; ---------------------------------------------------------------------------
0000EFCE                            
0000EFCE                            Obj46:					; XREF: Obj_Index
0000EFCE 7000                       		moveq	#0,d0
0000EFD0 1028 0024                  		move.b	$24(a0),d0
0000EFD4 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000EFD8 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000EFDC                            ; ===========================================================================
0000EFDC 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000EFDE 0000                       		dc.w Obj46_Action-Obj46_Index
0000EFE0                            ; ===========================================================================
0000EFE0                            
0000EFE0                            Obj46_Main:				; XREF: Obj46_Index
0000EFE0 5428 0024                  		addq.b	#2,$24(a0)
0000EFE4 117C 000F 0016             		move.b	#$F,$16(a0)
0000EFEA 117C 000F 0017             		move.b	#$F,$17(a0)
0000EFF0 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EFF8 317C 4000 0002             		move.w	#$4000,2(a0)
0000EFFE 117C 0004 0001             		move.b	#4,1(a0)
0000F004 117C 0003 0018             		move.b	#3,$18(a0)
0000F00A 117C 0010 0019             		move.b	#$10,$19(a0)
0000F010 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F016 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F01C                            
0000F01C                            Obj46_Action:				; XREF: Obj46_Index
0000F01C 4A28 0001                  		tst.b	1(a0)
0000F020 6A00                       		bpl.s	Obj46_ChkDel
0000F022 7000                       		moveq	#0,d0
0000F024 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F028 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F02C D040                       		add.w	d0,d0
0000F02E 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F032 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F036 323C 001B                  		move.w	#$1B,d1
0000F03A 343C 0010                  		move.w	#$10,d2
0000F03E 363C 0011                  		move.w	#$11,d3
0000F042 3828 0008                  		move.w	8(a0),d4
0000F046 6100 0000                  		bsr.w	SolidObject
0000F04A                            
0000F04A                            Obj46_ChkDel:
0000F04A 6100 EDBC                  		bsr.w	DisplaySprite
0000F04E 3028 0008                  		move.w	8(a0),d0
0000F052 0240 FF80                  		andi.w	#$FF80,d0
0000F056 3238 F700                  		move.w	($FFFFF700).w,d1
0000F05A 0441 0080                  		subi.w	#$80,d1
0000F05E 0241 FF80                  		andi.w	#$FF80,d1
0000F062 9041                       		sub.w	d1,d0
0000F064 0C40 0280                  		cmpi.w	#$280,d0
0000F068 6200 EDDA                  		bhi.w	DeleteObject
0000F06C 4E75                       		rts	
0000F06E                            ; ===========================================================================
0000F06E 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F070 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F072 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F074 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F076 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F078                            ; ===========================================================================
0000F078                            
0000F078                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F078 4E75                       		rts	
0000F07A                            ; ===========================================================================
0000F07A                            
0000F07A                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F07A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F07E 9068 0008                  		sub.w	8(a0),d0
0000F082 6400                       		bcc.s	loc_E888
0000F084 4440                       		neg.w	d0
0000F086                            
0000F086                            loc_E888:
0000F086 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F08A 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F08C 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F092                            
0000F092                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F092 7000                       		moveq	#0,d0
0000F094 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F098 0828 0003 0028             		btst	#3,$28(a0)
0000F09E 6700                       		beq.s	loc_E8A8
0000F0A0 4440                       		neg.w	d0
0000F0A2 0640 0010                  		addi.w	#$10,d0
0000F0A6                            
0000F0A6                            loc_E8A8:
0000F0A6 3228 0030                  		move.w	$30(a0),d1
0000F0AA 9240                       		sub.w	d0,d1
0000F0AC 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F0B0 4E75                       		rts	
0000F0B2                            ; ===========================================================================
0000F0B2                            
0000F0B2                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F0B2 6100 ED2E                  		bsr.w	SpeedToPos
0000F0B6 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F0BC 6100 0000                  		bsr.w	ObjHitFloor
0000F0C0 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F0C2 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F0C6 D368 000C                  		add.w	d1,$C(a0)
0000F0CA 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F0CE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F0D4 117C 0004 0028             		move.b	#4,$28(a0)
0000F0DA 3011                       		move.w	(a1),d0
0000F0DC 0240 03FF                  		andi.w	#$3FF,d0
0000F0E0 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F0E4 6400                       		bcc.s	locret_E8EE
0000F0E6 117C 0000 0028             		move.b	#0,$28(a0)
0000F0EC                            
0000F0EC                            locret_E8EE:
0000F0EC 4E75                       		rts	
0000F0EE                            ; ===========================================================================
0000F0EE                            
0000F0EE                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F0EE 7000                       		moveq	#0,d0
0000F0F0 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F0F4 E648                       		lsr.w	#3,d0
0000F0F6 3228 0030                  		move.w	$30(a0),d1
0000F0FA 9240                       		sub.w	d0,d1
0000F0FC 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F100 4E75                       		rts	
0000F102                            ; ===========================================================================
0000F102                            ; ---------------------------------------------------------------------------
0000F102                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F102                            ; ---------------------------------------------------------------------------
0000F102                            Map_obj46:
0000F102                            	include "_maps\obj46.asm"
0000F102                            ; ---------------------------------------------------------------------------
0000F102                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F102                            ; ---------------------------------------------------------------------------
0000F102 0000                       		dc.w byte_E906-Map_obj46
0000F104 01                         byte_E906:	dc.b 1
0000F105 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F10A                            		even
0000F10A                            		even
0000F10A                            
0000F10A                            ; ===========================================================================
0000F10A                            ; ---------------------------------------------------------------------------
0000F10A                            ; Object 12 - lamp (SYZ)
0000F10A                            ; ---------------------------------------------------------------------------
0000F10A                            
0000F10A                            Obj12:					; XREF: Obj_Index
0000F10A 7000                       		moveq	#0,d0
0000F10C 1028 0024                  		move.b	$24(a0),d0
0000F110 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F114 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F118                            ; ===========================================================================
0000F118 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F11A 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F11C                            ; ===========================================================================
0000F11C                            
0000F11C                            Obj12_Main:				; XREF: Obj12_Index
0000F11C 5428 0024                  		addq.b	#2,$24(a0)
0000F120 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F128 317C 0000 0002             		move.w	#0,2(a0)
0000F12E 117C 0004 0001             		move.b	#4,1(a0)
0000F134 117C 0010 0019             		move.b	#$10,$19(a0)
0000F13A 117C 0006 0018             		move.b	#6,$18(a0)
0000F140                            
0000F140                            Obj12_Animate:				; XREF: Obj12_Index
0000F140 5328 001E                  		subq.b	#1,$1E(a0)
0000F144 6A00                       		bpl.s	Obj12_ChkDel
0000F146 117C 0007 001E             		move.b	#7,$1E(a0)
0000F14C 5228 001A                  		addq.b	#1,$1A(a0)
0000F150 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F156 6500                       		bcs.s	Obj12_ChkDel
0000F158 117C 0000 001A             		move.b	#0,$1A(a0)
0000F15E                            
0000F15E                            Obj12_ChkDel:
0000F15E 3028 0008                  		move.w	8(a0),d0
0000F162 0240 FF80                  		andi.w	#$FF80,d0
0000F166 3238 F700                  		move.w	($FFFFF700).w,d1
0000F16A 0441 0080                  		subi.w	#$80,d1
0000F16E 0241 FF80                  		andi.w	#$FF80,d1
0000F172 9041                       		sub.w	d1,d0
0000F174 0C40 0280                  		cmpi.w	#$280,d0
0000F178 6200 ECCA                  		bhi.w	DeleteObject
0000F17C 6000 EC8A                  		bra.w	DisplaySprite
0000F180                            ; ===========================================================================
0000F180                            ; ---------------------------------------------------------------------------
0000F180                            ; Sprite mappings - lamp (SYZ)
0000F180                            ; ---------------------------------------------------------------------------
0000F180                            Map_obj12:
0000F180                            	include "_maps\obj12.asm"
0000F180                            ; ---------------------------------------------------------------------------
0000F180                            ; Sprite mappings - lamp (SYZ)
0000F180                            ; ---------------------------------------------------------------------------
0000F180 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F184 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F188 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F18C 02                         byte_E98E:	dc.b 2
0000F18D F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F192 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F197 02                         byte_E999:	dc.b 2
0000F198 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F19D 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F1A2 02                         byte_E9A4:	dc.b 2
0000F1A3 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F1A8 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F1AD 02                         byte_E9AF:	dc.b 2
0000F1AE F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F1B3 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F1B8 02                         byte_E9BA:	dc.b 2
0000F1B9 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F1BE 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F1C3 02                         byte_E9C5:	dc.b 2
0000F1C4 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F1C9 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F1CE                            		even
0000F1CE                            		even
0000F1CE                            
0000F1CE                            ; ===========================================================================
0000F1CE                            ; ---------------------------------------------------------------------------
0000F1CE                            ; Object 47 - pinball bumper (SYZ)
0000F1CE                            ; ---------------------------------------------------------------------------
0000F1CE                            
0000F1CE                            Obj47:					; XREF: Obj_Index
0000F1CE 7000                       		moveq	#0,d0
0000F1D0 1028 0024                  		move.b	$24(a0),d0
0000F1D4 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F1D8 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F1DC                            ; ===========================================================================
0000F1DC 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F1DE 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F1E0                            ; ===========================================================================
0000F1E0                            
0000F1E0                            Obj47_Main:				; XREF: Obj47_Index
0000F1E0 5428 0024                  		addq.b	#2,$24(a0)
0000F1E4 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F1EC 317C 0380 0002             		move.w	#$380,2(a0)
0000F1F2 117C 0004 0001             		move.b	#4,1(a0)
0000F1F8 117C 0010 0019             		move.b	#$10,$19(a0)
0000F1FE 117C 0001 0018             		move.b	#1,$18(a0)
0000F204 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F20A                            
0000F20A                            Obj47_Hit:				; XREF: Obj47_Index
0000F20A 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F20E 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F212 4228 0021                  		clr.b	$21(a0)
0000F216 43F8 D000                  		lea	($FFFFD000).w,a1
0000F21A 3228 0008                  		move.w	8(a0),d1
0000F21E 3428 000C                  		move.w	$C(a0),d2
0000F222 9269 0008                  		sub.w	8(a1),d1
0000F226 9469 000C                  		sub.w	$C(a1),d2
0000F22A 4EB9 0000 2FBA             		jsr	(CalcAngle).l
0000F230 4EB9 0000 2CEC             		jsr	(CalcSine).l
0000F236 C3FC F900                  		muls.w	#-$700,d1
0000F23A E081                       		asr.l	#8,d1
0000F23C 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F240 C1FC F900                  		muls.w	#-$700,d0
0000F244 E080                       		asr.l	#8,d0
0000F246 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F24A 08E9 0001 0022             		bset	#1,$22(a1)
0000F250 08A9 0004 0022             		bclr	#4,$22(a1)
0000F256 08A9 0005 0022             		bclr	#5,$22(a1)
0000F25C 4229 003C                  		clr.b	$3C(a1)
0000F260 117C 0001 001C             		move.b	#1,$1C(a0)
0000F266 303C 00B4                  		move.w	#$B4,d0
0000F26A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F270 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F274 7000                       		moveq	#0,d0
0000F276 1028 0023                  		move.b	$23(a0),d0
0000F27A 6700                       		beq.s	Obj47_Score
0000F27C 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F282 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F284 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F288                            
0000F288                            Obj47_Score:
0000F288 7001                       		moveq	#1,d0
0000F28A 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F290 6100 EFFC                  		bsr.w	SingleObjLoad
0000F294 6600                       		bne.s	Obj47_Display
0000F296 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F29A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F2A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F2A6 137C 0004 001A             		move.b	#4,$1A(a1)
0000F2AC                            
0000F2AC                            Obj47_Display:
0000F2AC 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F2B2 6100 BC14                  		bsr.w	AnimateSprite
0000F2B6 3028 0008                  		move.w	8(a0),d0
0000F2BA 0240 FF80                  		andi.w	#$FF80,d0
0000F2BE 3238 F700                  		move.w	($FFFFF700).w,d1
0000F2C2 0441 0080                  		subi.w	#$80,d1
0000F2C6 0241 FF80                  		andi.w	#$FF80,d1
0000F2CA 9041                       		sub.w	d1,d0
0000F2CC 0C40 0280                  		cmpi.w	#$280,d0
0000F2D0 6200                       		bhi.s	Obj47_ChkHit
0000F2D2 6000 EB34                  		bra.w	DisplaySprite
0000F2D6                            ; ===========================================================================
0000F2D6                            
0000F2D6                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F2D6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F2DA 7000                       		moveq	#0,d0
0000F2DC 1028 0023                  		move.b	$23(a0),d0
0000F2E0 6700                       		beq.s	Obj47_Delete
0000F2E2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F2E8                            
0000F2E8                            Obj47_Delete:
0000F2E8 6000 EB5A                  		bra.w	DeleteObject
0000F2EC                            ; ===========================================================================
0000F2EC                            Ani_obj47:
0000F2EC                            	include "_anim\obj47.asm"
0000F2EC                            ; ---------------------------------------------------------------------------
0000F2EC                            ; Animation script - flamethrower (SBZ)
0000F2EC                            ; ---------------------------------------------------------------------------
0000F2EC 0000                       		dc.w byte_EAF4-Ani_obj47
0000F2EE 0000                       		dc.w byte_EAF8-Ani_obj47
0000F2F0 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F2F4 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F2FC                            		even
0000F2FC                            		even
0000F2FC                            
0000F2FC                            ; ---------------------------------------------------------------------------
0000F2FC                            ; Sprite mappings - pinball bumper (SYZ)
0000F2FC                            ; ---------------------------------------------------------------------------
0000F2FC                            Map_obj47:
0000F2FC                            	include "_maps\obj47.asm"
0000F2FC                            ; ---------------------------------------------------------------------------
0000F2FC                            ; Sprite mappings - pinball bumper (SYZ)
0000F2FC                            ; ---------------------------------------------------------------------------
0000F2FC 0000                       		dc.w byte_EB06-Map_obj47
0000F2FE 0000                       		dc.w byte_EB11-Map_obj47
0000F300 0000                       		dc.w byte_EB1C-Map_obj47
0000F302 02                         byte_EB06:	dc.b 2
0000F303 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F308 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F30D 02                         byte_EB11:	dc.b 2
0000F30E F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F313 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F318 02                         byte_EB1C:	dc.b 2
0000F319 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F31E F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F324 00                         		even
0000F324 00                         		even
0000F324                            
0000F324                            ; ===========================================================================
0000F324                            ; ---------------------------------------------------------------------------
0000F324                            ; Object 0D - signpost at the end of a level
0000F324                            ; ---------------------------------------------------------------------------
0000F324                            
0000F324                            Obj0D:					; XREF: Obj_Index
0000F324 7000                       		moveq	#0,d0
0000F326 1028 0024                  		move.b	$24(a0),d0
0000F32A 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F32E 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F332 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F338 6100 BB8E                  		bsr.w	AnimateSprite
0000F33C 6100 EACA                  		bsr.w	DisplaySprite
0000F340 3028 0008                  		move.w	8(a0),d0
0000F344 0240 FF80                  		andi.w	#$FF80,d0
0000F348 3238 F700                  		move.w	($FFFFF700).w,d1
0000F34C 0441 0080                  		subi.w	#$80,d1
0000F350 0241 FF80                  		andi.w	#$FF80,d1
0000F354 9041                       		sub.w	d1,d0
0000F356 0C40 0280                  		cmpi.w	#$280,d0
0000F35A 6200 EAE8                  		bhi.w	DeleteObject
0000F35E 4E75                       		rts	
0000F360                            ; ===========================================================================
0000F360 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F362 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F364 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F366 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F368 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F36A                            ; ===========================================================================
0000F36A                            
0000F36A                            Obj0D_Main:				; XREF: Obj0D_Index
0000F36A 5428 0024                  		addq.b	#2,$24(a0)
0000F36E 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F376 317C 0680 0002             		move.w	#$680,2(a0)
0000F37C 117C 0004 0001             		move.b	#4,1(a0)
0000F382 117C 0018 0019             		move.b	#$18,$19(a0)
0000F388 117C 0004 0018             		move.b	#4,$18(a0)
0000F38E                            
0000F38E                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F38E 3038 D008                  		move.w	($FFFFD008).w,d0
0000F392 9068 0008                  		sub.w	8(a0),d0
0000F396 6500                       		bcs.s	locret_EBBA
0000F398 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F39C 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F39E 303C 00CF                  		move.w	#$CF,d0
0000F3A2 4EB9 0000 15BA             		jsr	(PlaySound).l	; play signpost	sound
0000F3A8 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F3AC 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F3B2 5428 0024                  		addq.b	#2,$24(a0)
0000F3B6                            
0000F3B6                            locret_EBBA:
0000F3B6 4E75                       		rts	
0000F3B8                            ; ===========================================================================
0000F3B8                            
0000F3B8                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F3B8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F3BC 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F3BE 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F3C4 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F3C8 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F3CE 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F3D0 5428 0024                  		addq.b	#2,$24(a0)
0000F3D4                            
0000F3D4                            Obj0D_Sparkle:
0000F3D4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F3D8 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F3DA 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F3E0 7000                       		moveq	#0,d0
0000F3E2 1028 0034                  		move.b	$34(a0),d0
0000F3E6 5428 0034                  		addq.b	#2,$34(a0)
0000F3EA 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F3F0 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F3F4 6100 EE98                  		bsr.w	SingleObjLoad
0000F3F8 6600                       		bne.s	locret_EC42
0000F3FA 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F3FE 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F404 101A                       		move.b	(a2)+,d0
0000F406 4880                       		ext.w	d0
0000F408 D068 0008                  		add.w	8(a0),d0
0000F40C 3340 0008                  		move.w	d0,8(a1)
0000F410 101A                       		move.b	(a2)+,d0
0000F412 4880                       		ext.w	d0
0000F414 D068 000C                  		add.w	$C(a0),d0
0000F418 3340 000C                  		move.w	d0,$C(a1)
0000F41C 237C 0000 A666 0004        		move.l	#Map_obj25,4(a1)
0000F424 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F42A 137C 0004 0001             		move.b	#4,1(a1)
0000F430 137C 0002 0018             		move.b	#2,$18(a1)
0000F436 137C 0008 0019             		move.b	#8,$19(a1)
0000F43C                            
0000F43C                            locret_EC42:
0000F43C 4E75                       		rts	
0000F43E                            ; ===========================================================================
0000F43E E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F440 0808                       		dc.b	8,   8
0000F442 F000                       		dc.b -$10,   0
0000F444 18F8                       		dc.b  $18,  -8
0000F446 00F8                       		dc.b	0,  -8
0000F448 1000                       		dc.b  $10,   0
0000F44A E808                       		dc.b -$18,   8
0000F44C 1810                       		dc.b  $18, $10
0000F44E                            ; ===========================================================================
0000F44E                            
0000F44E                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F44E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F452 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F456 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F45C 6600                       		bne.s	loc_EC70
0000F45E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F464 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F46A 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F46C 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F472 6000                       		bra.s	loc_EC70
0000F474                            
0000F474                            Obj0D_MoveLeft:
0000F474 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F47A                            
0000F47A                            loc_EC70:
0000F47A 4A38 D000                  		tst.b	($FFFFD000).w
0000F47E 6700                       		beq.s	loc_EC86
0000F480 3038 D008                  		move.w	($FFFFD008).w,d0
0000F484 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F488 0641 0128                  		addi.w	#$128,d1
0000F48C B041                       		cmp.w	d1,d0
0000F48E 6500                       		bcs.s	locret_ECEE
0000F490                            
0000F490                            loc_EC86:
0000F490 5428 0024                  		addq.b	#2,$24(a0)
0000F494                            
0000F494                            ; ---------------------------------------------------------------------------
0000F494                            ; Subroutine to	set up bonuses at the end of an	act
0000F494                            ; ---------------------------------------------------------------------------
0000F494                            
0000F494                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F494                            
0000F494                            
0000F494                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F494 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F498 6600                       		bne.s	locret_ECEE
0000F49A 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F4A0 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F4A4 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F4A8 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F4AE 7010                       		moveq	#$10,d0
0000F4B0 4EB9 0000 17D6             		jsr	(LoadPLC2).l	; load title card patterns
0000F4B6 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F4BC 7000                       		moveq	#0,d0
0000F4BE 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F4C2 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F4C6 7200                       		moveq	#0,d1
0000F4C8 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F4CC D041                       		add.w	d1,d0		; add up your time
0000F4CE 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F4D2 7214                       		moveq	#$14,d1
0000F4D4 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F4D6 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F4D8 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F4DA                            
0000F4DA                            loc_ECD0:
0000F4DA D040                       		add.w	d0,d0
0000F4DC 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F4E2 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F4E6 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F4EA 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F4EE 303C 008E                  		move.w	#$8E,d0
0000F4F2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F4F8                            
0000F4F8                            locret_ECEE:
0000F4F8 4E75                       		rts	
0000F4FA                            ; End of function GotThroughAct
0000F4FA                            
0000F4FA                            ; ===========================================================================
0000F4FA 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F50E 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F524                            ; ===========================================================================
0000F524                            
0000F524                            locret_ED1A:				; XREF: Obj0D_Index
0000F524 4E75                       		rts	
0000F526                            ; ===========================================================================
0000F526                            Ani_obj0D:
0000F526                            	include "_anim\obj0D.asm"
0000F526                            ; ---------------------------------------------------------------------------
0000F526                            ; Animation script - signpost
0000F526                            ; ---------------------------------------------------------------------------
0000F526 0000                       		dc.w byte_ED24-Ani_obj0D
0000F528 0000                       		dc.w byte_ED28-Ani_obj0D
0000F52A 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F52C 0000                       		dc.w byte_ED34-Ani_obj0D
0000F52E 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F532 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F538 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F53E 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F542 00                         		even
0000F542 00                         		even
0000F542                            
0000F542                            ; ---------------------------------------------------------------------------
0000F542                            ; Sprite mappings - signpost
0000F542                            ; ---------------------------------------------------------------------------
0000F542                            Map_obj0D:
0000F542                            	include "_maps\obj0D.asm"
0000F542                            ; ---------------------------------------------------------------------------
0000F542                            ; Sprite mappings - signpost
0000F542                            ; ---------------------------------------------------------------------------
0000F542 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F546 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F54A 0000                       		dc.w byte_ED73-Map_obj0D
0000F54C 03                         byte_ED42:	dc.b 3
0000F54D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F552 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F557 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F55C 02                         byte_ED52:	dc.b 2
0000F55D F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F562 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F567 02                         byte_ED5D:	dc.b 2
0000F568 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F56D 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F572 02                         byte_ED68:	dc.b 2
0000F573 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F578 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F57D 03                         byte_ED73:	dc.b 3
0000F57E F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F583 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F588 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F58E 00                         		even
0000F58E 00                         		even
0000F58E                            
0000F58E                            ; ===========================================================================
0000F58E                            ; ---------------------------------------------------------------------------
0000F58E                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F58E                            ; ---------------------------------------------------------------------------
0000F58E                            
0000F58E                            Obj4C:					; XREF: Obj_Index
0000F58E 7000                       		moveq	#0,d0
0000F590 1028 0024                  		move.b	$24(a0),d0
0000F594 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F598 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F59C 6000 0000                  		bra.w	Obj4D_ChkDel
0000F5A0                            ; ===========================================================================
0000F5A0 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F5A2 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F5A4 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F5A6 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F5A8 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F5AA 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F5AC                            ; ===========================================================================
0000F5AC                            
0000F5AC                            Obj4C_Main:				; XREF: Obj4C_Index
0000F5AC 5428 0024                  		addq.b	#2,$24(a0)
0000F5B0 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F5B8 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F5BE 117C 0004 0001             		move.b	#4,1(a0)
0000F5C4 117C 0001 0018             		move.b	#1,$18(a0)
0000F5CA 117C 0038 0019             		move.b	#$38,$19(a0)
0000F5D0 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F5D6                            
0000F5D6                            loc_EDCC:				; XREF: Obj4C_Index
0000F5D6 5368 0032                  		subq.w	#1,$32(a0)
0000F5DA 6A00                       		bpl.s	locret_EDF0
0000F5DC 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F5E2 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F5E6 3228 000C                  		move.w	$C(a0),d1
0000F5EA B041                       		cmp.w	d1,d0
0000F5EC 6400                       		bcc.s	locret_EDF0
0000F5EE 0441 0170                  		subi.w	#$170,d1
0000F5F2 B041                       		cmp.w	d1,d0
0000F5F4 6500                       		bcs.s	locret_EDF0
0000F5F6 5428 0024                  		addq.b	#2,$24(a0)
0000F5FA                            
0000F5FA                            locret_EDF0:
0000F5FA 4E75                       		rts	
0000F5FC                            ; ===========================================================================
0000F5FC                            
0000F5FC                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F5FC 5428 0024                  		addq.b	#2,$24(a0)
0000F600 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F604 6600                       		bne.s	loc_EE18
0000F606 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F60A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F610 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F616 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F61C 2348 003C                  		move.l	a0,$3C(a1)
0000F620                            
0000F620                            loc_EE18:
0000F620 117C 0001 001C             		move.b	#1,$1C(a0)
0000F626 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F62A 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F62C 117C 0004 001C             		move.b	#4,$1C(a0)
0000F632 6000                       		bra.s	Obj4C_Display
0000F634                            ; ===========================================================================
0000F634                            
0000F634                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F634 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F638 08E9 0001 0022             		bset	#1,$22(a1)
0000F63E 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F644 6000                       		bra.s	Obj4C_Display
0000F646                            ; ===========================================================================
0000F646                            
0000F646                            loc_EE3E:				; XREF: Obj4C_Index
0000F646 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F64A 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F64C 5428 0024                  		addq.b	#2,$24(a0)
0000F650 4E75                       		rts	
0000F652                            ; ===========================================================================
0000F652                            
0000F652                            Obj4C_Display:				; XREF: Obj4C_Index
0000F652 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F658 6100 B86E                  		bsr.w	AnimateSprite
0000F65C 6100 E7AA                  		bsr.w	DisplaySprite
0000F660 4E75                       		rts	
0000F662                            ; ===========================================================================
0000F662                            
0000F662                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F662 117C 0000 001C             		move.b	#0,$1C(a0)
0000F668 117C 0002 0024             		move.b	#2,$24(a0)
0000F66E 4A28 0028                  		tst.b	$28(a0)
0000F672 6700 E7D0                  		beq.w	DeleteObject
0000F676 4E75                       		rts	
0000F678                            ; ===========================================================================
0000F678                            ; ---------------------------------------------------------------------------
0000F678                            ; Object 4D - lava geyser / lavafall (MZ)
0000F678                            ; ---------------------------------------------------------------------------
0000F678                            
0000F678                            Obj4D:					; XREF: Obj_Index
0000F678 7000                       		moveq	#0,d0
0000F67A 1028 0024                  		move.b	$24(a0),d0
0000F67E 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F682 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F686 6000 E780                  		bra.w	DisplaySprite
0000F68A                            ; ===========================================================================
0000F68A 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F68C 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F68E 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F690 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F692                            
0000F692 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F696                            ; ===========================================================================
0000F696                            
0000F696                            Obj4D_Main:				; XREF: Obj4D_Index
0000F696 5428 0024                  		addq.b	#2,$24(a0)
0000F69A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F6A0 4A28 0028                  		tst.b	$28(a0)
0000F6A4 6700                       		beq.s	loc_EEA4
0000F6A6 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F6AC                            
0000F6AC                            loc_EEA4:
0000F6AC 7000                       		moveq	#0,d0
0000F6AE 1028 0028                  		move.b	$28(a0),d0
0000F6B2 D040                       		add.w	d0,d0
0000F6B4 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F6BA 2248                       		movea.l	a0,a1
0000F6BC 7201                       		moveq	#1,d1
0000F6BE 6100                       		bsr.s	Obj4D_MakeLava
0000F6C0 6000                       		bra.s	loc_EF10
0000F6C2                            ; ===========================================================================
0000F6C2                            
0000F6C2                            Obj4D_Loop:
0000F6C2 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F6C6 6600                       		bne.s	loc_EF0A
0000F6C8                            
0000F6C8                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F6C8 12BC 004D                  		move.b	#$4D,0(a1)
0000F6CC 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F6D4 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F6DA 137C 0004 0001             		move.b	#4,1(a1)
0000F6E0 137C 0020 0019             		move.b	#$20,$19(a1)
0000F6E6 3368 0008 0008             		move.w	8(a0),8(a1)
0000F6EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F6F2 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F6F8 137C 0001 0018             		move.b	#1,$18(a1)
0000F6FE 137C 0005 001C             		move.b	#5,$1C(a1)
0000F704 4A28 0028                  		tst.b	$28(a0)
0000F708 6700                       		beq.s	loc_EF0A
0000F70A 137C 0002 001C             		move.b	#2,$1C(a1)
0000F710                            
0000F710                            loc_EF0A:
0000F710 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F714 4E75                       		rts	
0000F716                            ; ===========================================================================
0000F716                            
0000F716                            loc_EF10:				; XREF: Obj4D_Main
0000F716 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F71C 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F722 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F728 137C 0093 0020             		move.b	#$93,$20(a1)
0000F72E 137C 0080 0016             		move.b	#$80,$16(a1)
0000F734 08E9 0004 0001             		bset	#4,1(a1)
0000F73A 5829 0024                  		addq.b	#4,$24(a1)
0000F73E 2348 003C                  		move.l	a0,$3C(a1)
0000F742 4A28 0028                  		tst.b	$28(a0)
0000F746 6700                       		beq.s	Obj4D_PlaySnd
0000F748 7200                       		moveq	#0,d1
0000F74A 6100 FF76                  		bsr.w	Obj4D_Loop
0000F74E 5429 0024                  		addq.b	#2,$24(a1)
0000F752 08E9 0004 0002             		bset	#4,2(a1)
0000F758 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F75E 137C 0000 0018             		move.b	#0,$18(a1)
0000F764 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F76A 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F770 117C 0000 0028             		move.b	#0,$28(a0)
0000F776                            
0000F776                            Obj4D_PlaySnd:
0000F776 303C 00C8                  		move.w	#$C8,d0
0000F77A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000F780                            
0000F780                            Obj4D_Action:				; XREF: Obj4D_Index
0000F780 7000                       		moveq	#0,d0
0000F782 1028 0028                  		move.b	$28(a0),d0
0000F786 D040                       		add.w	d0,d0
0000F788 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F78C 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F790 6100 E650                  		bsr.w	SpeedToPos
0000F794 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F79A 6100 B72C                  		bsr.w	AnimateSprite
0000F79E                            
0000F79E                            Obj4D_ChkDel:				; XREF: Obj4C
0000F79E 3028 0008                  		move.w	8(a0),d0
0000F7A2 0240 FF80                  		andi.w	#$FF80,d0
0000F7A6 3238 F700                  		move.w	($FFFFF700).w,d1
0000F7AA 0441 0080                  		subi.w	#$80,d1
0000F7AE 0241 FF80                  		andi.w	#$FF80,d1
0000F7B2 9041                       		sub.w	d1,d0
0000F7B4 0C40 0280                  		cmpi.w	#$280,d0
0000F7B8 6200 E68A                  		bhi.w	DeleteObject
0000F7BC 4E75                       		rts	
0000F7BE                            ; ===========================================================================
0000F7BE 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F7C0 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F7C2                            ; ===========================================================================
0000F7C2                            
0000F7C2                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F7C2 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F7C8 3028 0030                  		move.w	$30(a0),d0
0000F7CC B068 000C                  		cmp.w	$C(a0),d0
0000F7D0 6400                       		bcc.s	locret_EFDA
0000F7D2 5828 0024                  		addq.b	#4,$24(a0)
0000F7D6 2268 003C                  		movea.l	$3C(a0),a1
0000F7DA 137C 0003 001C             		move.b	#3,$1C(a1)
0000F7E0                            
0000F7E0                            locret_EFDA:
0000F7E0 4E75                       		rts	
0000F7E2                            ; ===========================================================================
0000F7E2                            
0000F7E2                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F7E2 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F7E8 3028 0030                  		move.w	$30(a0),d0
0000F7EC B068 000C                  		cmp.w	$C(a0),d0
0000F7F0 6400                       		bcc.s	locret_EFFA
0000F7F2 5828 0024                  		addq.b	#4,$24(a0)
0000F7F6 2268 003C                  		movea.l	$3C(a0),a1
0000F7FA 137C 0001 001C             		move.b	#1,$1C(a1)
0000F800                            
0000F800                            locret_EFFA:
0000F800 4E75                       		rts	
0000F802                            ; ===========================================================================
0000F802                            
0000F802                            loc_EFFC:				; XREF: Obj4D_Index
0000F802 2268 003C                  		movea.l	$3C(a0),a1
0000F806 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F80C 6700 0000                  		beq.w	Obj4D_Delete
0000F810 3029 000C                  		move.w	$C(a1),d0
0000F814 0640 0060                  		addi.w	#$60,d0
0000F818 3140 000C                  		move.w	d0,$C(a0)
0000F81C 9068 0030                  		sub.w	$30(a0),d0
0000F820 4440                       		neg.w	d0
0000F822 7208                       		moveq	#8,d1
0000F824 0C40 0040                  		cmpi.w	#$40,d0
0000F828 6C00                       		bge.s	loc_F026
0000F82A 720B                       		moveq	#$B,d1
0000F82C                            
0000F82C                            loc_F026:
0000F82C 0C40 0080                  		cmpi.w	#$80,d0
0000F830 6F00                       		ble.s	loc_F02E
0000F832 720E                       		moveq	#$E,d1
0000F834                            
0000F834                            loc_F02E:
0000F834 5328 001E                  		subq.b	#1,$1E(a0)
0000F838 6A00                       		bpl.s	loc_F04C
0000F83A 117C 0007 001E             		move.b	#7,$1E(a0)
0000F840 5228 001B                  		addq.b	#1,$1B(a0)
0000F844 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F84A 6500                       		bcs.s	loc_F04C
0000F84C 117C 0000 001B             		move.b	#0,$1B(a0)
0000F852                            
0000F852                            loc_F04C:
0000F852 1028 001B                  		move.b	$1B(a0),d0
0000F856 D001                       		add.b	d1,d0
0000F858 1140 001A                  		move.b	d0,$1A(a0)
0000F85C 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F860                            ; ===========================================================================
0000F860                            
0000F860                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F860 6000 E5E2                  		bra.w	DeleteObject
0000F864                            ; ===========================================================================
0000F864                            ; ---------------------------------------------------------------------------
0000F864                            ; Object 4E - advancing	wall of	lava (MZ)
0000F864                            ; ---------------------------------------------------------------------------
0000F864                            
0000F864                            Obj4E:					; XREF: Obj_Index
0000F864 7000                       		moveq	#0,d0
0000F866 1028 0024                  		move.b	$24(a0),d0
0000F86A 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F86E 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F872                            ; ===========================================================================
0000F872 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F874 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F876 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F878 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F87A 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F87C                            ; ===========================================================================
0000F87C                            
0000F87C                            Obj4E_Main:				; XREF: Obj4E_Index
0000F87C 5828 0024                  		addq.b	#4,$24(a0)
0000F880 2248                       		movea.l	a0,a1
0000F882 7201                       		moveq	#1,d1
0000F884 6000                       		bra.s	Obj4E_Main2
0000F886                            ; ===========================================================================
0000F886                            
0000F886                            Obj4E_Loop:
0000F886 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F88A 6600                       		bne.s	loc_F0C8
0000F88C                            
0000F88C                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F88C 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F890 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F898 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F89E 137C 0004 0001             		move.b	#4,1(a1)
0000F8A4 137C 0050 0019             		move.b	#$50,$19(a1)
0000F8AA 3368 0008 0008             		move.w	8(a0),8(a1)
0000F8B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F8B6 137C 0001 0018             		move.b	#1,$18(a1)
0000F8BC 137C 0000 001C             		move.b	#0,$1C(a1)
0000F8C2 137C 0094 0020             		move.b	#$94,$20(a1)
0000F8C8 2348 003C                  		move.l	a0,$3C(a1)
0000F8CC                            
0000F8CC                            loc_F0C8:
0000F8CC 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F8D0                            
0000F8D0 5C29 0024                  		addq.b	#6,$24(a1)
0000F8D4 137C 0004 001A             		move.b	#4,$1A(a1)
0000F8DA                            
0000F8DA                            Obj4E_Action:				; XREF: Obj4E_Index
0000F8DA 3038 D008                  		move.w	($FFFFD008).w,d0
0000F8DE 9068 0008                  		sub.w	8(a0),d0
0000F8E2 6400                       		bcc.s	Obj4E_ChkSonic
0000F8E4 4440                       		neg.w	d0
0000F8E6                            
0000F8E6                            Obj4E_ChkSonic:
0000F8E6 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F8EA 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F8EC 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F8F0 9068 000C                  		sub.w	$C(a0),d0
0000F8F4 6400                       		bcc.s	loc_F0F4
0000F8F6 4440                       		neg.w	d0
0000F8F8                            
0000F8F8                            loc_F0F4:
0000F8F8 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F8FC 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F8FE 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F904 6000                       		bra.s	Obj4E_Solid
0000F906                            ; ===========================================================================
0000F906                            
0000F906                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F906 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F90A 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F90C 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F912 5528 0024                  		subq.b	#2,$24(a0)
0000F916                            
0000F916                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F916 323C 002B                  		move.w	#$2B,d1
0000F91A 343C 0018                  		move.w	#$18,d2
0000F91E 3602                       		move.w	d2,d3
0000F920 5243                       		addq.w	#1,d3
0000F922 3828 0008                  		move.w	8(a0),d4
0000F926 1028 0024                  		move.b	$24(a0),d0
0000F92A 3F00                       		move.w	d0,-(sp)
0000F92C 6100 0000                  		bsr.w	SolidObject
0000F930 301F                       		move.w	(sp)+,d0
0000F932 1140 0024                  		move.b	d0,$24(a0)
0000F936 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F93C 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F93E 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F942 4228 0036                  		clr.b	$36(a0)
0000F946                            
0000F946                            Obj4E_Animate:
0000F946 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F94C 6100 B57A                  		bsr.w	AnimateSprite
0000F950 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F956 6400                       		bcc.s	Obj4E_ChkDel
0000F958 6100 E488                  		bsr.w	SpeedToPos
0000F95C                            
0000F95C                            Obj4E_ChkDel:
0000F95C 6100 E4AA                  		bsr.w	DisplaySprite
0000F960 4A28 0036                  		tst.b	$36(a0)
0000F964 6600                       		bne.s	locret_F17E
0000F966 3028 0008                  		move.w	8(a0),d0
0000F96A 0240 FF80                  		andi.w	#$FF80,d0
0000F96E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F972 0441 0080                  		subi.w	#$80,d1
0000F976 0241 FF80                  		andi.w	#$FF80,d1
0000F97A 9041                       		sub.w	d1,d0
0000F97C 0C40 0280                  		cmpi.w	#$280,d0
0000F980 6200                       		bhi.s	Obj4E_ChkGone
0000F982                            
0000F982                            locret_F17E:
0000F982 4E75                       		rts	
0000F984                            ; ===========================================================================
0000F984                            
0000F984                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F984 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F988 7000                       		moveq	#0,d0
0000F98A 1028 0023                  		move.b	$23(a0),d0
0000F98E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F994 117C 0008 0024             		move.b	#8,$24(a0)
0000F99A 4E75                       		rts	
0000F99C                            ; ===========================================================================
0000F99C                            
0000F99C                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F99C 2268 003C                  		movea.l	$3C(a0),a1
0000F9A0 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F9A6 6700                       		beq.s	Obj4E_Delete
0000F9A8 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F9AE 0468 0080 0008             		subi.w	#$80,8(a0)
0000F9B4 6000 E452                  		bra.w	DisplaySprite
0000F9B8                            ; ===========================================================================
0000F9B8                            
0000F9B8                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F9B8 6000 E48A                  		bra.w	DeleteObject
0000F9BC                            ; ===========================================================================
0000F9BC                            ; ---------------------------------------------------------------------------
0000F9BC                            ; Object 54 - invisible	lava tag (MZ)
0000F9BC                            ; ---------------------------------------------------------------------------
0000F9BC                            
0000F9BC                            Obj54:					; XREF: Obj_Index
0000F9BC 7000                       		moveq	#0,d0
0000F9BE 1028 0024                  		move.b	$24(a0),d0
0000F9C2 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F9C6 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F9CA                            ; ===========================================================================
0000F9CA 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F9CC 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F9CE                            
0000F9CE 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F9D2                            ; ===========================================================================
0000F9D2                            
0000F9D2                            Obj54_Main:				; XREF: Obj54_Index
0000F9D2 5428 0024                  		addq.b	#2,$24(a0)
0000F9D6 7000                       		moveq	#0,d0
0000F9D8 1028 0028                  		move.b	$28(a0),d0
0000F9DC 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F9E2 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F9EA 117C 0084 0001             		move.b	#$84,1(a0)
0000F9F0                            
0000F9F0                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F9F0 3028 0008                  		move.w	8(a0),d0
0000F9F4 0240 FF80                  		andi.w	#$FF80,d0
0000F9F8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F9FC 0441 0080                  		subi.w	#$80,d1
0000FA00 0241 FF80                  		andi.w	#$FF80,d1
0000FA04 9041                       		sub.w	d1,d0
0000FA06 6B00 E43C                  		bmi.w	DeleteObject
0000FA0A 0C40 0280                  		cmpi.w	#$280,d0
0000FA0E 6200 E434                  		bhi.w	DeleteObject
0000FA12 4E75                       		rts	
0000FA14                            ; ===========================================================================
0000FA14                            ; ---------------------------------------------------------------------------
0000FA14                            ; Sprite mappings - invisible lava tag (MZ)
0000FA14                            ; ---------------------------------------------------------------------------
0000FA14                            Map_obj54:
0000FA14                            	include "_maps\obj54.asm"
0000FA14                            ; ---------------------------------------------------------------------------
0000FA14                            ; Sprite mappings - invisible lava tag (MZ)
0000FA14                            ; ---------------------------------------------------------------------------
0000FA14 0000                       		dc.w byte_F212-Map_obj54
0000FA16 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FA18 00                         		even
0000FA18 00                         		even
0000FA18                            
0000FA18                            Ani_obj4C:
0000FA18                            	include "_anim\obj4C.asm"
0000FA18                            ; ---------------------------------------------------------------------------
0000FA18                            ; Animation script - geyser of lava (MZ)
0000FA18                            ; ---------------------------------------------------------------------------
0000FA18 0000                       		dc.w byte_F220-Ani_obj4C
0000FA1A 0000                       		dc.w byte_F22A-Ani_obj4C
0000FA1C 0000                       		dc.w byte_F22E-Ani_obj4C
0000FA1E 0000                       		dc.w byte_F232-Ani_obj4C
0000FA20 0000                       		dc.w byte_F23A-Ani_obj4C
0000FA22 0000                       		dc.w byte_F23E-Ani_obj4C
0000FA24 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FA2E 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FA32 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FA36 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FA3E 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FA42 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FA46                            		even
0000FA46                            		even
0000FA46                            
0000FA46                            Ani_obj4E:
0000FA46                            	include "_anim\obj4E.asm"
0000FA46                            ; ---------------------------------------------------------------------------
0000FA46                            ; Animation script - advancing wall of lava (MZ)
0000FA46                            ; ---------------------------------------------------------------------------
0000FA46 0000                       		dc.w byte_F244-Ani_obj4E
0000FA48 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FA4E                            		even
0000FA4E                            		even
0000FA4E                            
0000FA4E                            ; ---------------------------------------------------------------------------
0000FA4E                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FA4E                            ; ---------------------------------------------------------------------------
0000FA4E                            Map_obj4C:
0000FA4E                            	include "_maps\obj4C.asm"
0000FA4E                            ; ---------------------------------------------------------------------------
0000FA4E                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FA4E                            ; ---------------------------------------------------------------------------
0000FA4E 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FA52 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FA56 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FA5A 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FA5E 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FA62 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FA66 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FA6A 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FA6E 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FA72 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FA76 02                         byte_F272:	dc.b 2
0000FA77 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FA7C EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FA81 02                         byte_F27D:	dc.b 2
0000FA82 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FA87 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FA8C 04                         byte_F288:	dc.b 4
0000FA8D EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FA92 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FA97 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FA9C EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FAA1 04                         byte_F29D:	dc.b 4
0000FAA2 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FAA7 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FAAC F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FAB1 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FAB6 06                         byte_F2B2:	dc.b 6
0000FAB7 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FABC F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FAC1 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FAC6 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FACB E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FAD0 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FAD5 06                         byte_F2D1:	dc.b 6
0000FAD6 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FADB F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FAE0 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FAE5 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FAEA E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FAEF E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FAF4 02                         byte_F2F0:	dc.b 2
0000FAF5 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FAFA E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FAFF 02                         byte_F2FB:	dc.b 2
0000FB00 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FB05 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FB0A 0A                         byte_F306:	dc.b $A
0000FB0B 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB10 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB15 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB1A B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB1F D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FB24 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FB29 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FB2E F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FB33 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FB38 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FB3D 0A                         byte_F339:	dc.b $A
0000FB3E 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FB43 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FB48 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FB4D B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FB52 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FB57 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FB5C F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FB61 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FB66 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FB6B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FB70 0A                         byte_F36C:	dc.b $A
0000FB71 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FB76 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FB7B B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FB80 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FB85 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FB8A D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FB8F F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FB94 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FB99 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FB9E 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FBA3 06                         byte_F39F:	dc.b 6
0000FBA4 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FBA9 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FBAE B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FBB3 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FBB8 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FBBD D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FBC2 06                         byte_F3BE:	dc.b 6
0000FBC3 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FBC8 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FBCD B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FBD2 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FBD7 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FBDC D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FBE1 06                         byte_F3DD:	dc.b 6
0000FBE2 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FBE7 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FBEC B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FBF1 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FBF6 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FBFB D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FC00 10                         byte_F3FC:	dc.b $10
0000FC01 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FC06 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FC0B B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FC10 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FC15 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FC1A D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FC1F F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FC24 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FC29 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FC2E 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FC33 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FC38 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FC3D 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FC42 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FC47 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FC4C 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FC51 10                         byte_F44D:	dc.b $10
0000FC52 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FC57 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FC5C B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FC61 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FC66 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FC6B D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FC70 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FC75 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FC7A 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FC7F 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FC84 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FC89 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FC8E 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FC93 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FC98 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FC9D 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FCA2 10                         byte_F49E:	dc.b $10
0000FCA3 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FCA8 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FCAD B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FCB2 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FCB7 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FCBC D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FCC1 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FCC6 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FCCB 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FCD0 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FCD5 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FCDA 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FCDF 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FCE4 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FCE9 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FCEE 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FCF3 06                         byte_F4EF:	dc.b 6
0000FCF4 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FCF9 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FCFE E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FD03 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FD08 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FD0D D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FD12 06                         byte_F50E:	dc.b 6
0000FD13 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FD18 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FD1D E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FD22 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FD27 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FD2C D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FD31 00                         byte_F52D:	dc.b 0
0000FD32                            		even
0000FD32                            		even
0000FD32                            
0000FD32                            ; ---------------------------------------------------------------------------
0000FD32                            ; Sprite mappings - advancing wall of lava (MZ)
0000FD32                            ; ---------------------------------------------------------------------------
0000FD32                            Map_obj4E:
0000FD32                            	include "_maps\obj4E.asm"
0000FD32                            ; ---------------------------------------------------------------------------
0000FD32                            ; Sprite mappings - advancing wall of lava (MZ)
0000FD32                            ; ---------------------------------------------------------------------------
0000FD32 0000                       		dc.w byte_F538-Map_obj4E
0000FD34 0000                       		dc.w byte_F566-Map_obj4E
0000FD36 0000                       		dc.w byte_F594-Map_obj4E
0000FD38 0000                       		dc.w byte_F5C2-Map_obj4E
0000FD3A 0000                       		dc.w byte_F5F0-Map_obj4E
0000FD3C 09                         byte_F538:	dc.b 9
0000FD3D E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FD42 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FD47 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD4C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD51 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD56 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD5B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD60 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD65 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD6A 09                         byte_F566:	dc.b 9
0000FD6B E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FD70 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FD75 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD7A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD7F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD84 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD89 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD8E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD93 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD98 09                         byte_F594:	dc.b 9
0000FD99 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FD9E 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FDA3 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDA8 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDAD 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FDB2 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FDB7 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FDBC E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FDC1 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FDC6 09                         byte_F5C2:	dc.b 9
0000FDC7 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FDCC 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FDD1 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDD6 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDDB 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FDE0 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FDE5 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FDEA E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FDEF 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FDF4 08                         byte_F5F0:	dc.b 8
0000FDF5 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FDFA 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDFF E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FE04 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FE09 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE0E 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE13 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE18 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE1E 00                         		even
0000FE1E 00                         		even
0000FE1E                            
0000FE1E                            ; ===========================================================================
0000FE1E                            ; ---------------------------------------------------------------------------
0000FE1E                            ; Object 40 - Moto Bug enemy (GHZ)
0000FE1E                            ; ---------------------------------------------------------------------------
0000FE1E                            
0000FE1E                            Obj40:					; XREF: Obj_Index
0000FE1E 7000                       		moveq	#0,d0
0000FE20 1028 0024                  		move.b	$24(a0),d0
0000FE24 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FE28 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FE2C                            ; ===========================================================================
0000FE2C 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FE2E 0000                       		dc.w Obj40_Action-Obj40_Index
0000FE30 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FE32 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FE34                            ; ===========================================================================
0000FE34                            
0000FE34                            Obj40_Main:				; XREF: Obj40_Index
0000FE34 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FE3C 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FE42 117C 0004 0001             		move.b	#4,1(a0)
0000FE48 117C 0004 0018             		move.b	#4,$18(a0)
0000FE4E 117C 0014 0019             		move.b	#$14,$19(a0)
0000FE54 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FE58 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FE5A 117C 000E 0016             		move.b	#$E,$16(a0)
0000FE60 117C 0008 0017             		move.b	#8,$17(a0)
0000FE66 117C 000C 0020             		move.b	#$C,$20(a0)
0000FE6C 6100 DF48                  		bsr.w	ObjectFall
0000FE70 4EB9 0000 0000             		jsr	ObjHitFloor
0000FE76 4A41                       		tst.w	d1
0000FE78 6A00                       		bpl.s	locret_F68A
0000FE7A D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE7E 317C 0000 0012             		move.w	#0,$12(a0)
0000FE84 5428 0024                  		addq.b	#2,$24(a0)
0000FE88 0868 0000 0022             		bchg	#0,$22(a0)
0000FE8E                            
0000FE8E                            locret_F68A:
0000FE8E 4E75                       		rts	
0000FE90                            ; ===========================================================================
0000FE90                            
0000FE90                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FE90 5828 0024                  		addq.b	#4,$24(a0)
0000FE94 6000 0000                  		bra.w	Obj40_Animate
0000FE98                            ; ===========================================================================
0000FE98                            
0000FE98                            Obj40_Action:				; XREF: Obj40_Index
0000FE98 7000                       		moveq	#0,d0
0000FE9A 1028 0025                  		move.b	$25(a0),d0
0000FE9E 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FEA2 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FEA6 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FEAC 6100 B01A                  		bsr.w	AnimateSprite
0000FEB0                            
0000FEB0                            ; ---------------------------------------------------------------------------
0000FEB0                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FEB0                            ; ---------------------------------------------------------------------------
0000FEB0                            
0000FEB0                            MarkObjGone:
0000FEB0 3028 0008                  		move.w	8(a0),d0
0000FEB4 0240 FF80                  		andi.w	#$FF80,d0
0000FEB8 3238 F700                  		move.w	($FFFFF700).w,d1
0000FEBC 0441 0080                  		subi.w	#$80,d1
0000FEC0 0241 FF80                  		andi.w	#$FF80,d1
0000FEC4 9041                       		sub.w	d1,d0
0000FEC6 0C40 0280                  		cmpi.w	#$280,d0
0000FECA 6200 0000                  		bhi.w	Mark_ChkGone
0000FECE 6000 DF38                  		bra.w	DisplaySprite
0000FED2                            ; ===========================================================================
0000FED2                            
0000FED2                            Mark_ChkGone:
0000FED2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FED6 7000                       		moveq	#0,d0
0000FED8 1028 0023                  		move.b	$23(a0),d0
0000FEDC 6700                       		beq.s	Mark_Delete
0000FEDE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FEE4                            
0000FEE4                            Mark_Delete:
0000FEE4 6000 DF5E                  		bra.w	DeleteObject
0000FEE8                            
0000FEE8                            ; ===========================================================================
0000FEE8 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FEEA 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FEEC                            ; ===========================================================================
0000FEEC                            
0000FEEC                            Obj40_Move:				; XREF: Obj40_Index2
0000FEEC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FEF0 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FEF2 5428 0025                  		addq.b	#2,$25(a0)
0000FEF6 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FEFC 117C 0001 001C             		move.b	#1,$1C(a0)
0000FF02 0868 0000 0022             		bchg	#0,$22(a0)
0000FF08 6600                       		bne.s	locret_F70A
0000FF0A 4468 0010                  		neg.w	$10(a0)		; change direction
0000FF0E                            
0000FF0E                            locret_F70A:
0000FF0E 4E75                       		rts	
0000FF10                            ; ===========================================================================
0000FF10                            
0000FF10                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FF10 6100 DED0                  		bsr.w	SpeedToPos
0000FF14 4EB9 0000 0000             		jsr	ObjHitFloor
0000FF1A 0C41 FFF8                  		cmpi.w	#-8,d1
0000FF1E 6D00                       		blt.s	Obj40_Pause
0000FF20 0C41 000C                  		cmpi.w	#$C,d1
0000FF24 6C00                       		bge.s	Obj40_Pause
0000FF26 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FF2A 5328 0033                  		subq.b	#1,$33(a0)
0000FF2E 6A00                       		bpl.s	locret_F756
0000FF30 117C 000F 0033             		move.b	#$F,$33(a0)
0000FF36 6100 E356                  		bsr.w	SingleObjLoad
0000FF3A 6600                       		bne.s	locret_F756
0000FF3C 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FF40 3368 0008 0008             		move.w	8(a0),8(a1)
0000FF46 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FF4C 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FF52 137C 0002 001C             		move.b	#2,$1C(a1)
0000FF58                            
0000FF58                            locret_F756:
0000FF58 4E75                       		rts	
0000FF5A                            ; ===========================================================================
0000FF5A                            
0000FF5A                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FF5A 5528 0025                  		subq.b	#2,$25(a0)
0000FF5E 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FF64 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FF6A 117C 0000 001C             		move.b	#0,$1C(a0)
0000FF70 4E75                       		rts	
0000FF72                            ; ===========================================================================
0000FF72                            
0000FF72                            Obj40_Animate:				; XREF: Obj40_Index
0000FF72 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FF78 6100 AF4E                  		bsr.w	AnimateSprite
0000FF7C 6000 DE8A                  		bra.w	DisplaySprite
0000FF80                            ; ===========================================================================
0000FF80                            
0000FF80                            Obj40_Delete:				; XREF: Obj40_Index
0000FF80 6000 DEC2                  		bra.w	DeleteObject
0000FF84                            ; ===========================================================================
0000FF84                            Ani_obj40:
0000FF84                            	include "_anim\obj40.asm"
0000FF84                            ; ---------------------------------------------------------------------------
0000FF84                            ; Animation script - Motobug enemy
0000FF84                            ; ---------------------------------------------------------------------------
0000FF84 0000                       		dc.w byte_F788-Ani_obj40
0000FF86 0000                       		dc.w byte_F78C-Ani_obj40
0000FF88 0000                       		dc.w byte_F792-Ani_obj40
0000FF8A 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FF8E 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FF94 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FFA2                            		even
0000FFA2                            		even
0000FFA2                            
0000FFA2                            ; ---------------------------------------------------------------------------
0000FFA2                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FFA2                            ; ---------------------------------------------------------------------------
0000FFA2                            Map_obj40:
0000FFA2                            	include "_maps\obj40.asm"
0000FFA2                            Map_cedc:
0000FFA2 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FFA4 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FFA6 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FFA8 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FFAA 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FFAC 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FFAE 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FFB0 04                         Map_cedc_E: 	dc.b $4
0000FFB1 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FFB6 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FFBB F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FFC0 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FFC5 04                         Map_cedc_23: 	dc.b $4
0000FFC6 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FFCB 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FFD0 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FFD5 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FFDA 05                         Map_cedc_38: 	dc.b $5
0000FFDB F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FFE0 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FFE5 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FFEA 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FFEF 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FFF4 01                         Map_cedc_52: 	dc.b $1
0000FFF5 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FFFA 01                         Map_cedc_58: 	dc.b $1
0000FFFB FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
00010000 01                         Map_cedc_5E: 	dc.b $1
00010001 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
00010006 00                         Map_cedc_64: 	dc.b $0
00010008 00                         	even
00010008 00                         	even
00010008                            
00010008                            ; ===========================================================================
00010008                            ; ---------------------------------------------------------------------------
00010008                            ; Object 4F - blank
00010008                            ; ---------------------------------------------------------------------------
00010008                            
00010008                            Obj4F:					; XREF: Obj_Index
00010008 4E75                       		rts	
0001000A                            
0001000A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001000A                            
0001000A                            
0001000A                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0001000A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001000E D047                       		add.w	d7,d0
00010010 0240 0003                  		andi.w	#3,d0
00010014 6600                       		bne.s	loc_F836
00010016 7600                       		moveq	#0,d3
00010018 1628 0019                  		move.b	$19(a0),d3
0001001C 4A68 0010                  		tst.w	$10(a0)
00010020 6B00                       		bmi.s	loc_F82C
00010022 6100 0000                  		bsr.w	ObjHitWallRight
00010026 4A41                       		tst.w	d1
00010028 6A00                       		bpl.s	loc_F836
0001002A                            
0001002A                            loc_F828:
0001002A 7001                       		moveq	#1,d0
0001002C 4E75                       		rts	
0001002E                            ; ===========================================================================
0001002E                            
0001002E                            loc_F82C:
0001002E 4643                       		not.w	d3
00010030 6100 0000                  		bsr.w	ObjHitWallLeft
00010034 4A41                       		tst.w	d1
00010036 6BF2                       		bmi.s	loc_F828
00010038                            
00010038                            loc_F836:
00010038 7000                       		moveq	#0,d0
0001003A 4E75                       		rts	
0001003C                            ; End of function Obj50_ChkWall
0001003C                            
0001003C                            ; ===========================================================================
0001003C                            ; ---------------------------------------------------------------------------
0001003C                            ; Object 50 - Yadrin enemy (SYZ)
0001003C                            ; ---------------------------------------------------------------------------
0001003C                            
0001003C                            Obj50:					; XREF: Obj_Index
0001003C 7000                       		moveq	#0,d0
0001003E 1028 0024                  		move.b	$24(a0),d0
00010042 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00010046 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0001004A                            ; ===========================================================================
0001004A 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0001004C 0000                       		dc.w Obj50_Action-Obj50_Index
0001004E                            ; ===========================================================================
0001004E                            
0001004E                            Obj50_Main:				; XREF: Obj50_Index
0001004E 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00010056 317C 247B 0002             		move.w	#$247B,2(a0)
0001005C 117C 0004 0001             		move.b	#4,1(a0)
00010062 117C 0004 0018             		move.b	#4,$18(a0)
00010068 117C 0014 0019             		move.b	#$14,$19(a0)
0001006E 117C 0011 0016             		move.b	#$11,$16(a0)
00010074 117C 0008 0017             		move.b	#8,$17(a0)
0001007A 117C 00CC 0020             		move.b	#$CC,$20(a0)
00010080 6100 DD34                  		bsr.w	ObjectFall
00010084 6100 0000                  		bsr.w	ObjHitFloor
00010088 4A41                       		tst.w	d1
0001008A 6A00                       		bpl.s	locret_F89E
0001008C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010090 317C 0000 0012             		move.w	#0,$12(a0)
00010096 5428 0024                  		addq.b	#2,$24(a0)
0001009A 0868 0000 0022             		bchg	#0,$22(a0)
000100A0                            
000100A0                            locret_F89E:
000100A0 4E75                       		rts	
000100A2                            ; ===========================================================================
000100A2                            
000100A2                            Obj50_Action:				; XREF: Obj50_Index
000100A2 7000                       		moveq	#0,d0
000100A4 1028 0025                  		move.b	$25(a0),d0
000100A8 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000100AC 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000100B0 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000100B6 6100 AE10                  		bsr.w	AnimateSprite
000100BA 6000 FDF4                  		bra.w	MarkObjGone
000100BE                            ; ===========================================================================
000100BE 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000100C0 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000100C2                            ; ===========================================================================
000100C2                            
000100C2                            Obj50_Move:				; XREF: Obj50_Index2
000100C2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000100C6 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000100C8 5428 0025                  		addq.b	#2,$25(a0)
000100CC 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000100D2 117C 0001 001C             		move.b	#1,$1C(a0)
000100D8 0868 0000 0022             		bchg	#0,$22(a0)
000100DE 6600                       		bne.s	locret_F8E2
000100E0 4468 0010                  		neg.w	$10(a0)		; change direction
000100E4                            
000100E4                            locret_F8E2:
000100E4 4E75                       		rts	
000100E6                            ; ===========================================================================
000100E6                            
000100E6                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000100E6 6100 DCFA                  		bsr.w	SpeedToPos
000100EA 6100 0000                  		bsr.w	ObjHitFloor
000100EE 0C41 FFF8                  		cmpi.w	#-8,d1
000100F2 6D00                       		blt.s	Obj50_Pause
000100F4 0C41 000C                  		cmpi.w	#$C,d1
000100F8 6C00                       		bge.s	Obj50_Pause
000100FA D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000100FE 6100 FF0A                  		bsr.w	Obj50_ChkWall
00010102 6600                       		bne.s	Obj50_Pause
00010104 4E75                       		rts	
00010106                            ; ===========================================================================
00010106                            
00010106                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010106 5528 0025                  		subq.b	#2,$25(a0)
0001010A 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010110 317C 0000 0010             		move.w	#0,$10(a0)
00010116 117C 0000 001C             		move.b	#0,$1C(a0)
0001011C 4E75                       		rts	
0001011E                            ; ===========================================================================
0001011E                            Ani_obj50:
0001011E                            	include "_anim\obj50.asm"
0001011E                            ; ---------------------------------------------------------------------------
0001011E                            ; Animation script - Yadrin enemy
0001011E                            ; ---------------------------------------------------------------------------
0001011E 0000                       		dc.w byte_F920-Ani_obj50
00010120 0000                       		dc.w byte_F924-Ani_obj50
00010122 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010126 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010130                            		even
00010130                            		even
00010130                            
00010130                            ; ---------------------------------------------------------------------------
00010130                            ; Sprite mappings - Yadrin enemy (SYZ)
00010130                            ; ---------------------------------------------------------------------------
00010130                            Map_obj50:
00010130                            	include "_maps\obj50.asm"
00010130                            Map_ff24:
00010130 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
00010132 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
00010134 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
00010136 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
00010138 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
0001013A 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
0001013C 05                         Map_ff24_C: 	dc.b $5
0001013D F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010142 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010147 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001014C F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010151 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010156 05                         Map_ff24_26: 	dc.b $5
00010157 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
0001015C FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010161 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010166 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001016B 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010170 05                         Map_ff24_40: 	dc.b $5
00010171 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010176 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
0001017B EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010180 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010185 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0001018A 05                         Map_ff24_5A: 	dc.b $5
0001018B F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010190 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010195 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001019A F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001019F 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000101A4 05                         Map_ff24_74: 	dc.b $5
000101A5 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000101AA FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000101AF EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101B4 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101B9 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000101BE 05                         Map_ff24_8E: 	dc.b $5
000101BF F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000101C4 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000101C9 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101CE F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101D3 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000101D8                            	even
000101D8                            	even
000101D8                            
000101D8                            ; ---------------------------------------------------------------------------
000101D8                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000101D8                            ;
000101D8                            ; variables:
000101D8                            ; d1 = width
000101D8                            ; d2 = height /	2 (when	jumping)
000101D8                            ; d3 = height /	2 (when	walking)
000101D8                            ; d4 = x-axis position
000101D8                            ; ---------------------------------------------------------------------------
000101D8                            
000101D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000101D8                            
000101D8                            
000101D8                            SolidObject:
000101D8 4A28 0025                  		tst.b	$25(a0)
000101DC 6700 0000                  		beq.w	loc_FAC8
000101E0 3401                       		move.w	d1,d2
000101E2 D442                       		add.w	d2,d2
000101E4 43F8 D000                  		lea	($FFFFD000).w,a1
000101E8 0829 0001 0022             		btst	#1,$22(a1)
000101EE 6600                       		bne.s	loc_F9FE
000101F0 3029 0008                  		move.w	8(a1),d0
000101F4 9068 0008                  		sub.w	8(a0),d0
000101F8 D041                       		add.w	d1,d0
000101FA 6B00                       		bmi.s	loc_F9FE
000101FC B042                       		cmp.w	d2,d0
000101FE 6500                       		bcs.s	loc_FA12
00010200                            
00010200                            loc_F9FE:
00010200 08A9 0003 0022             		bclr	#3,$22(a1)
00010206 08A8 0003 0022             		bclr	#3,$22(a0)
0001020C 4228 0025                  		clr.b	$25(a0)
00010210 7800                       		moveq	#0,d4
00010212 4E75                       		rts	
00010214                            ; ===========================================================================
00010214                            
00010214                            loc_FA12:
00010214 3404                       		move.w	d4,d2
00010216                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
00010216 7800                       		moveq	#0,d4
00010218 4E75                       		rts	
0001021A                            ; ===========================================================================
0001021A                            
0001021A                            SolidObject71:				; XREF: Obj71_Solid
0001021A 4A28 0025                  		tst.b	$25(a0)
0001021E 6700 0000                  		beq.w	loc_FAD0
00010222 3401                       		move.w	d1,d2
00010224 D442                       		add.w	d2,d2
00010226 43F8 D000                  		lea	($FFFFD000).w,a1
0001022A 0829 0001 0022             		btst	#1,$22(a1)
00010230 6600                       		bne.s	loc_FA44
00010232 3029 0008                  		move.w	8(a1),d0
00010236 9068 0008                  		sub.w	8(a0),d0
0001023A D041                       		add.w	d1,d0
0001023C 6B00                       		bmi.s	loc_FA44
0001023E B042                       		cmp.w	d2,d0
00010240 6500                       		bcs.s	loc_FA58
00010242                            
00010242                            loc_FA44:
00010242 08A9 0003 0022             		bclr	#3,$22(a1)
00010248 08A8 0003 0022             		bclr	#3,$22(a0)
0001024E 4228 0025                  		clr.b	$25(a0)
00010252 7800                       		moveq	#0,d4
00010254 4E75                       		rts	
00010256                            ; ===========================================================================
00010256                            
00010256                            loc_FA58:
00010256 3404                       		move.w	d4,d2
00010258                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
00010258 7800                       		moveq	#0,d4
0001025A 4E75                       		rts	
0001025C                            ; ===========================================================================
0001025C                            
0001025C                            SolidObject2F:				; XREF: Obj2F_Solid
0001025C 43F8 D000                  		lea	($FFFFD000).w,a1
00010260 4A28 0001                  		tst.b	1(a0)
00010264 6A00 0000                  		bpl.w	loc_FB92
00010268 3029 0008                  		move.w	8(a1),d0
0001026C 9068 0008                  		sub.w	8(a0),d0
00010270 D041                       		add.w	d1,d0
00010272 6B00 0000                  		bmi.w	loc_FB92
00010276 3601                       		move.w	d1,d3
00010278 D643                       		add.w	d3,d3
0001027A B043                       		cmp.w	d3,d0
0001027C 6200 0000                  		bhi.w	loc_FB92
00010280 3A00                       		move.w	d0,d5
00010282 0828 0000 0001             		btst	#0,1(a0)
00010288 6700                       		beq.s	loc_FA94
0001028A 4645                       		not.w	d5
0001028C DA43                       		add.w	d3,d5
0001028E                            
0001028E                            loc_FA94:
0001028E E24D                       		lsr.w	#1,d5
00010290 7600                       		moveq	#0,d3
00010292 1632 5000                  		move.b	(a2,d5.w),d3
00010296 9612                       		sub.b	(a2),d3
00010298 3A28 000C                  		move.w	$C(a0),d5
0001029C 9A43                       		sub.w	d3,d5
0001029E 1629 0016                  		move.b	$16(a1),d3
000102A2 4883                       		ext.w	d3
000102A4 D443                       		add.w	d3,d2
000102A6 3629 000C                  		move.w	$C(a1),d3
000102AA 9645                       		sub.w	d5,d3
000102AC 5843                       		addq.w	#4,d3
000102AE D642                       		add.w	d2,d3
000102B0 6B00 0000                  		bmi.w	loc_FB92
000102B4 3802                       		move.w	d2,d4
000102B6 D844                       		add.w	d4,d4
000102B8 B644                       		cmp.w	d4,d3
000102BA 6400 0000                  		bcc.w	loc_FB92
000102BE 6000 0000                  		bra.w	loc_FB0E
000102C2                            ; ===========================================================================
000102C2                            
000102C2                            loc_FAC8:
000102C2 4A28 0001                  		tst.b	1(a0)
000102C6 6A00 0000                  		bpl.w	loc_FB92
000102CA                            
000102CA                            loc_FAD0:
000102CA 43F8 D000                  		lea	($FFFFD000).w,a1
000102CE 3029 0008                  		move.w	8(a1),d0
000102D2 9068 0008                  		sub.w	8(a0),d0
000102D6 D041                       		add.w	d1,d0
000102D8 6B00 0000                  		bmi.w	loc_FB92
000102DC 3601                       		move.w	d1,d3
000102DE D643                       		add.w	d3,d3
000102E0 B043                       		cmp.w	d3,d0
000102E2 6200 0000                  		bhi.w	loc_FB92
000102E6 1629 0016                  		move.b	$16(a1),d3
000102EA 4883                       		ext.w	d3
000102EC D443                       		add.w	d3,d2
000102EE 3629 000C                  		move.w	$C(a1),d3
000102F2 9668 000C                  		sub.w	$C(a0),d3
000102F6 5843                       		addq.w	#4,d3
000102F8 D642                       		add.w	d2,d3
000102FA 6B00 0000                  		bmi.w	loc_FB92
000102FE 3802                       		move.w	d2,d4
00010300 D844                       		add.w	d4,d4
00010302 B644                       		cmp.w	d4,d3
00010304 6400 0000                  		bcc.w	loc_FB92
00010308                            
00010308                            loc_FB0E:
00010308 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001030C 6B00 0000                  		bmi.w	loc_FB92
00010310 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010316 6400 0000                  		bcc.w	loc_FB92
0001031A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001031E 6600 0000                  		bne.w	loc_FBAC
00010322 3A00                       		move.w	d0,d5
00010324 B240                       		cmp.w	d0,d1
00010326 6400                       		bcc.s	loc_FB36
00010328 D241                       		add.w	d1,d1
0001032A 9041                       		sub.w	d1,d0
0001032C 3A00                       		move.w	d0,d5
0001032E 4445                       		neg.w	d5
00010330                            
00010330                            loc_FB36:
00010330 3203                       		move.w	d3,d1
00010332 B443                       		cmp.w	d3,d2
00010334 6400                       		bcc.s	loc_FB44
00010336 5943                       		subq.w	#4,d3
00010338 9644                       		sub.w	d4,d3
0001033A 3203                       		move.w	d3,d1
0001033C 4441                       		neg.w	d1
0001033E                            
0001033E                            loc_FB44:
0001033E BA41                       		cmp.w	d1,d5
00010340 6200 0000                  		bhi.w	loc_FBB0
00010344 0C41 0004                  		cmpi.w	#4,d1
00010348 6300                       		bls.s	loc_FB8C
0001034A 4A40                       		tst.w	d0
0001034C 6700                       		beq.s	loc_FB70
0001034E 6B00                       		bmi.s	loc_FB5E
00010350 4A69 0010                  		tst.w	$10(a1)
00010354 6B00                       		bmi.s	loc_FB70
00010356 6000                       		bra.s	loc_FB64
00010358                            ; ===========================================================================
00010358                            
00010358                            loc_FB5E:
00010358 4A69 0010                  		tst.w	$10(a1)
0001035C 6A00                       		bpl.s	loc_FB70
0001035E                            
0001035E                            loc_FB64:
0001035E 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010364 337C 0000 0010             		move.w	#0,$10(a1)
0001036A                            
0001036A                            loc_FB70:
0001036A 9169 0008                  		sub.w	d0,8(a1)
0001036E 0829 0001 0022             		btst	#1,$22(a1)
00010374 6600                       		bne.s	loc_FB8C
00010376 08E9 0005 0022             		bset	#5,$22(a1)
0001037C 08E8 0005 0022             		bset	#5,$22(a0)
00010382 7801                       		moveq	#1,d4
00010384 4E75                       		rts	
00010386                            ; ===========================================================================
00010386                            
00010386                            loc_FB8C:
00010386 6100                       		bsr.s	loc_FBA0
00010388 7801                       		moveq	#1,d4
0001038A 4E75                       		rts	
0001038C                            ; ===========================================================================
0001038C                            
0001038C                            loc_FB92:
0001038C 0828 0005 0022             		btst	#5,$22(a0)
00010392 6700                       		beq.s	loc_FBAC
00010394 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001039A                            
0001039A                            loc_FBA0:
0001039A 08A8 0005 0022             		bclr	#5,$22(a0)
000103A0 08A9 0005 0022             		bclr	#5,$22(a1)
000103A6                            
000103A6                            loc_FBAC:
000103A6 7800                       		moveq	#0,d4
000103A8 4E75                       		rts	
000103AA                            ; ===========================================================================
000103AA                            
000103AA                            loc_FBB0:
000103AA 4A43                       		tst.w	d3
000103AC 6B00                       		bmi.s	loc_FBBC
000103AE 0C43 0010                  		cmpi.w	#$10,d3
000103B2 6500                       		bcs.s	loc_FBEE
000103B4 60D6                       		bra.s	loc_FB92
000103B6                            ; ===========================================================================
000103B6                            
000103B6                            loc_FBBC:
000103B6 4A69 0012                  		tst.w	$12(a1)
000103BA 6700                       		beq.s	loc_FBD6
000103BC 6A00                       		bpl.s	loc_FBD2
000103BE 4A43                       		tst.w	d3
000103C0 6A00                       		bpl.s	loc_FBD2
000103C2 9769 000C                  		sub.w	d3,$C(a1)
000103C6 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000103CC                            
000103CC                            loc_FBD2:
000103CC 78FF                       		moveq	#-1,d4
000103CE 4E75                       		rts	
000103D0                            ; ===========================================================================
000103D0                            
000103D0                            loc_FBD6:
000103D0 0829 0001 0022             		btst	#1,$22(a1)
000103D6 66F4                       		bne.s	loc_FBD2
000103D8 2F08                       		move.l	a0,-(sp)
000103DA 2049                       		movea.l	a1,a0
000103DC 4EB9 0000 0000             		jsr	KillSonic
000103E2 205F                       		movea.l	(sp)+,a0
000103E4 78FF                       		moveq	#-1,d4
000103E6 4E75                       		rts	
000103E8                            ; ===========================================================================
000103E8                            
000103E8                            loc_FBEE:
000103E8 5943                       		subq.w	#4,d3
000103EA 7200                       		moveq	#0,d1
000103EC 1228 0019                  		move.b	$19(a0),d1
000103F0 3401                       		move.w	d1,d2
000103F2 D442                       		add.w	d2,d2
000103F4 D269 0008                  		add.w	8(a1),d1
000103F8 9268 0008                  		sub.w	8(a0),d1
000103FC 6B00                       		bmi.s	loc_FC28
000103FE B242                       		cmp.w	d2,d1
00010400 6400                       		bcc.s	loc_FC28
00010402 4A69 0012                  		tst.w	$12(a1)
00010406 6B00                       		bmi.s	loc_FC28
00010408 9769 000C                  		sub.w	d3,$C(a1)
0001040C 5369 000C                  		subq.w	#1,$C(a1)
00010410 6100                       		bsr.s	sub_FC2C
00010412 117C 0002 0025             		move.b	#2,$25(a0)
00010418 08E8 0003 0022             		bset	#3,$22(a0)
0001041E 78FF                       		moveq	#-1,d4
00010420 4E75                       		rts	
00010422                            ; ===========================================================================
00010422                            
00010422                            loc_FC28:
00010422 7800                       		moveq	#0,d4
00010424 4E75                       		rts	
00010426                            ; End of function SolidObject
00010426                            
00010426                            
00010426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010426                            
00010426                            
00010426                            sub_FC2C:				; XREF: SolidObject
00010426 0829 0003 0022             		btst	#3,$22(a1)
0001042C 6700                       		beq.s	loc_FC4E
0001042E 7000                       		moveq	#0,d0
00010430 1029 003D                  		move.b	$3D(a1),d0
00010434 ED48                       		lsl.w	#6,d0
00010436 0680 00FF D000             		addi.l	#$FFD000,d0
0001043C 2440                       		movea.l	d0,a2
0001043E 08AA 0003 0022             		bclr	#3,$22(a2)
00010444 422A 0025                  		clr.b	$25(a2)
00010448                            
00010448                            loc_FC4E:
00010448 3008                       		move.w	a0,d0
0001044A 0440 D000                  		subi.w	#-$3000,d0
0001044E EC48                       		lsr.w	#6,d0
00010450 0240 007F                  		andi.w	#$7F,d0
00010454 1340 003D                  		move.b	d0,$3D(a1)
00010458 137C 0000 0026             		move.b	#0,$26(a1)
0001045E 337C 0000 0012             		move.w	#0,$12(a1)
00010464 3369 0010 0014             		move.w	$10(a1),$14(a1)
0001046A 0829 0001 0022             		btst	#1,$22(a1)
00010470 6700                       		beq.s	loc_FC84
00010472 2F08                       		move.l	a0,-(sp)
00010474 2049                       		movea.l	a1,a0
00010476 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0001047C 205F                       		movea.l	(sp)+,a0
0001047E                            
0001047E                            loc_FC84:
0001047E 08E9 0003 0022             		bset	#3,$22(a1)
00010484 08E8 0003 0022             		bset	#3,$22(a0)
0001048A 4E75                       		rts	
0001048C                            ; End of function sub_FC2C
0001048C                            
0001048C                            ; ===========================================================================
0001048C                            ; ---------------------------------------------------------------------------
0001048C                            ; Object 51 - smashable	green block (MZ)
0001048C                            ; ---------------------------------------------------------------------------
0001048C                            
0001048C                            Obj51:					; XREF: Obj_Index
0001048C 7000                       		moveq	#0,d0
0001048E 1028 0024                  		move.b	$24(a0),d0
00010492 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010496 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001049A 6000 FA14                  		bra.w	MarkObjGone
0001049E                            ; ===========================================================================
0001049E 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000104A0 0000                       		dc.w Obj51_Solid-Obj51_Index
000104A2 0000                       		dc.w Obj51_Display-Obj51_Index
000104A4                            ; ===========================================================================
000104A4                            
000104A4                            Obj51_Main:				; XREF: Obj51_Index
000104A4 5428 0024                  		addq.b	#2,$24(a0)
000104A8 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000104B0 317C 42B8 0002             		move.w	#$42B8,2(a0)
000104B6 117C 0004 0001             		move.b	#4,1(a0)
000104BC 117C 0010 0019             		move.b	#$10,$19(a0)
000104C2 117C 0004 0018             		move.b	#4,$18(a0)
000104C8 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000104CE                            
000104CE                            Obj51_Solid:				; XREF: Obj51_Index
000104CE 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000104D4 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000104DA 323C 001B                  		move.w	#$1B,d1
000104DE 343C 0010                  		move.w	#$10,d2
000104E2 363C 0011                  		move.w	#$11,d3
000104E6 3828 0008                  		move.w	8(a0),d4
000104EA 6100 FCEC                  		bsr.w	SolidObject
000104EE 0828 0003 0022             		btst	#3,$22(a0)
000104F4 6600                       		bne.s	Obj51_Smash
000104F6                            
000104F6                            locret_FCFC:
000104F6 4E75                       		rts	
000104F8                            ; ===========================================================================
000104F8                            
000104F8                            Obj51_Smash:				; XREF: Obj51_Solid
000104F8 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000104FE 66F6                       		bne.s	locret_FCFC	; if not, branch
00010500 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010506 08E9 0002 0022             		bset	#2,$22(a1)
0001050C 137C 000E 0016             		move.b	#$E,$16(a1)
00010512 137C 0007 0017             		move.b	#7,$17(a1)
00010518 137C 0002 001C             		move.b	#2,$1C(a1)
0001051E 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010524 08E9 0001 0022             		bset	#1,$22(a1)
0001052A 08A9 0003 0022             		bclr	#3,$22(a1)
00010530 137C 0002 0024             		move.b	#2,$24(a1)
00010536 08A8 0003 0022             		bclr	#3,$22(a0)
0001053C 4228 0025                  		clr.b	$25(a0)
00010540 117C 0001 001A             		move.b	#1,$1A(a0)
00010546 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0001054C 7203                       		moveq	#3,d1		; set number of	fragments to 4
0001054E 343C 0038                  		move.w	#$38,d2
00010552 6100 D4A2                  		bsr.w	SmashObject
00010556 6100 DD36                  		bsr.w	SingleObjLoad
0001055A 6600                       		bne.s	Obj51_Display
0001055C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010560 3368 0008 0008             		move.w	8(a0),8(a1)
00010566 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001056C 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010570 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010574 0C42 0006                  		cmpi.w	#6,d2
00010578 6500                       		bcs.s	Obj51_Bonus
0001057A 7406                       		moveq	#6,d2
0001057C                            
0001057C                            Obj51_Bonus:
0001057C 7000                       		moveq	#0,d0
0001057E 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010582 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010588 6500                       		bcs.s	loc_FD98	; if not, branch
0001058A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001058E 740A                       		moveq	#10,d2
00010590                            
00010590                            loc_FD98:
00010590 4EB9 0000 0000             		jsr	AddPoints
00010596 E24A                       		lsr.w	#1,d2
00010598 1342 001A                  		move.b	d2,$1A(a1)
0001059C                            
0001059C                            Obj51_Display:				; XREF: Obj51_Index
0001059C 6100 D844                  		bsr.w	SpeedToPos
000105A0 0668 0038 0012             		addi.w	#$38,$12(a0)
000105A6 6100 D860                  		bsr.w	DisplaySprite
000105AA 4A28 0001                  		tst.b	1(a0)
000105AE 6A00 D894                  		bpl.w	DeleteObject
000105B2 4E75                       		rts	
000105B4                            ; ===========================================================================
000105B4 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000105B8 FF00 FF00                  		dc.w $FF00, $FF00
000105BC 0200 FE00                  		dc.w $200, $FE00
000105C0 0100 FF00                  		dc.w $100, $FF00
000105C4                            
000105C4 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000105CC                            ; ---------------------------------------------------------------------------
000105CC                            ; Sprite mappings - smashable green block (MZ)
000105CC                            ; ---------------------------------------------------------------------------
000105CC                            Map_obj51:
000105CC                            	include "_maps\obj51.asm"
000105CC                            ; ---------------------------------------------------------------------------
000105CC                            ; Sprite mappings - smashable green block (MZ)
000105CC                            ; ---------------------------------------------------------------------------
000105CC 0000                       		dc.w byte_FDD8-Map_obj51
000105CE 0000                       		dc.w byte_FDE3-Map_obj51
000105D0 02                         byte_FDD8:	dc.b 2
000105D1 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000105D6 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000105DB 04                         byte_FDE3:	dc.b 4
000105DC F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000105E1 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000105E6 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000105EB 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000105F0                            		even
000105F0                            		even
000105F0                            
000105F0                            ; ===========================================================================
000105F0                            ; ---------------------------------------------------------------------------
000105F0                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000105F0                            ; ---------------------------------------------------------------------------
000105F0                            
000105F0                            Obj52:					; XREF: Obj_Index
000105F0 7000                       		moveq	#0,d0
000105F2 1028 0024                  		move.b	$24(a0),d0
000105F6 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000105FA 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000105FE                            ; ===========================================================================
000105FE 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010600 0000                       		dc.w Obj52_Platform-Obj52_Index
00010602 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010604                            
00010604 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010606 2001                       		dc.b $20, 1
00010608 2002                       		dc.b $20, 2
0001060A 4003                       		dc.b $40, 3
0001060C 3004                       		dc.b $30, 4
0001060E                            ; ===========================================================================
0001060E                            
0001060E                            Obj52_Main:				; XREF: Obj52_Index
0001060E 5428 0024                  		addq.b	#2,$24(a0)
00010612 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001061A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010620 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010626 6600                       		bne.s	loc_FE44
00010628 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010630 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010636 117C 0007 0016             		move.b	#7,$16(a0)
0001063C                            
0001063C                            loc_FE44:
0001063C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010642 6600                       		bne.s	loc_FE60
00010644 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001064A 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010650 6700                       		beq.s	loc_FE60	; if yes, branch
00010652 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010658                            
00010658                            loc_FE60:
00010658 117C 0004 0001             		move.b	#4,1(a0)
0001065E 7000                       		moveq	#0,d0
00010660 1028 0028                  		move.b	$28(a0),d0
00010664 E648                       		lsr.w	#3,d0
00010666 0240 001E                  		andi.w	#$1E,d0
0001066A 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0001066E 115A 0019                  		move.b	(a2)+,$19(a0)
00010672 115A 001A                  		move.b	(a2)+,$1A(a0)
00010676 117C 0004 0018             		move.b	#4,$18(a0)
0001067C 3168 0008 0030             		move.w	8(a0),$30(a0)
00010682 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010688 0228 000F 0028             		andi.b	#$F,$28(a0)
0001068E                            
0001068E                            Obj52_Platform:				; XREF: Obj52_Index
0001068E 6100 0000                  		bsr.w	Obj52_Move
00010692 7200                       		moveq	#0,d1
00010694 1228 0019                  		move.b	$19(a0),d1
00010698 4EB9 0000 7A88             		jsr	(PlatformObject).l
0001069E 6000                       		bra.s	Obj52_ChkDel
000106A0                            ; ===========================================================================
000106A0                            
000106A0                            Obj52_StandOn:				; XREF: Obj52_Index
000106A0 7200                       		moveq	#0,d1
000106A2 1228 0019                  		move.b	$19(a0),d1
000106A6 4EB9 0000 7BFC             		jsr	(ExitPlatform).l
000106AC 3F28 0008                  		move.w	8(a0),-(sp)
000106B0 6100 0000                  		bsr.w	Obj52_Move
000106B4 341F                       		move.w	(sp)+,d2
000106B6 4EB9 0000 8166             		jsr	(MvSonicOnPtfm2).l
000106BC                            
000106BC                            Obj52_ChkDel:				; XREF: Obj52_Platform
000106BC 3028 0030                  		move.w	$30(a0),d0
000106C0 0240 FF80                  		andi.w	#$FF80,d0
000106C4 3238 F700                  		move.w	($FFFFF700).w,d1
000106C8 0441 0080                  		subi.w	#$80,d1
000106CC 0241 FF80                  		andi.w	#$FF80,d1
000106D0 9041                       		sub.w	d1,d0
000106D2 0C40 0280                  		cmpi.w	#$280,d0
000106D6 6200 D76C                  		bhi.w	DeleteObject
000106DA 6000 D72C                  		bra.w	DisplaySprite
000106DE                            ; ===========================================================================
000106DE                            
000106DE                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000106DE 7000                       		moveq	#0,d0
000106E0 1028 0028                  		move.b	$28(a0),d0
000106E4 0240 000F                  		andi.w	#$F,d0
000106E8 D040                       		add.w	d0,d0
000106EA 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000106EE 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000106F2                            ; ===========================================================================
000106F2 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000106F6 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000106FA 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000106FE 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010702 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010706 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010708                            ; ===========================================================================
00010708                            
00010708                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010708 4E75                       		rts	
0001070A                            ; ===========================================================================
0001070A                            
0001070A                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0001070A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001070E 323C 0060                  		move.w	#$60,d1
00010712 0828 0000 0022             		btst	#0,$22(a0)
00010718 6700                       		beq.s	loc_FF26
0001071A 4440                       		neg.w	d0
0001071C D041                       		add.w	d1,d0
0001071E                            
0001071E                            loc_FF26:
0001071E 3228 0030                  		move.w	$30(a0),d1
00010722 9240                       		sub.w	d0,d1
00010724 3141 0008                  		move.w	d1,8(a0)
00010728 4E75                       		rts	
0001072A                            ; ===========================================================================
0001072A                            
0001072A                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001072A 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010730 6600                       		bne.s	Obj52_02_Wait
00010732 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010736                            
00010736                            Obj52_02_Wait:
00010736 4E75                       		rts	
00010738                            ; ===========================================================================
00010738                            
00010738                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010738 7600                       		moveq	#0,d3
0001073A 1628 0019                  		move.b	$19(a0),d3
0001073E 6100 0000                  		bsr.w	ObjHitWallRight
00010742 4A41                       		tst.w	d1		; has the platform hit a wall?
00010744 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010746 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001074A 3168 0008 0030             		move.w	8(a0),$30(a0)
00010750 4E75                       		rts	
00010752                            ; ===========================================================================
00010752                            
00010752                            Obj52_03_End:
00010752 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010756 4E75                       		rts	
00010758                            ; ===========================================================================
00010758                            
00010758                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010758 7600                       		moveq	#0,d3
0001075A 1628 0019                  		move.b	$19(a0),d3
0001075E 6100 0000                  		bsr.w	ObjHitWallRight
00010762 4A41                       		tst.w	d1		; has the platform hit a wall?
00010764 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010766 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001076A 3168 0008 0030             		move.w	8(a0),$30(a0)
00010770 4E75                       		rts	
00010772                            ; ===========================================================================
00010772                            
00010772                            Obj52_05_End:
00010772 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010776 4E75                       		rts	
00010778                            ; ===========================================================================
00010778                            
00010778                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010778 6100 D668                  		bsr.w	SpeedToPos
0001077C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010782 6100 0000                  		bsr.w	ObjHitFloor
00010786 4A41                       		tst.w	d1		; has platform hit the floor?
00010788 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001078C D368 000C                  		add.w	d1,$C(a0)
00010790 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010794 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010798                            
00010798                            locret_FFA0:
00010798 4E75                       		rts	
0001079A                            ; ===========================================================================
0001079A                            
0001079A                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001079A 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0001079E 6700                       		beq.s	Obj52_07_ChkDel
000107A0 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000107A4                            
000107A4                            Obj52_07_ChkDel:
000107A4 588F                       		addq.l	#4,sp
000107A6 3028 0030                  		move.w	$30(a0),d0
000107AA 0240 FF80                  		andi.w	#$FF80,d0
000107AE 3238 F700                  		move.w	($FFFFF700).w,d1
000107B2 0441 0080                  		subi.w	#$80,d1
000107B6 0241 FF80                  		andi.w	#$FF80,d1
000107BA 9041                       		sub.w	d1,d0
000107BC 0C40 0280                  		cmpi.w	#$280,d0
000107C0 6200 D682                  		bhi.w	DeleteObject
000107C4 4E75                       		rts	
000107C6                            ; ===========================================================================
000107C6                            
000107C6                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000107C6 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000107CA 323C 0080                  		move.w	#$80,d1
000107CE 0828 0000 0022             		btst	#0,$22(a0)
000107D4 6700                       		beq.s	loc_FFE2
000107D6 4440                       		neg.w	d0
000107D8 D041                       		add.w	d1,d0
000107DA                            
000107DA                            loc_FFE2:
000107DA 3228 0032                  		move.w	$32(a0),d1
000107DE 9240                       		sub.w	d0,d1
000107E0 3141 000C                  		move.w	d1,$C(a0)
000107E4 4E75                       		rts	
000107E6                            ; ===========================================================================
000107E6                            
000107E6                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000107E6 7600                       		moveq	#0,d3
000107E8 1628 0019                  		move.b	$19(a0),d3
000107EC D643                       		add.w	d3,d3
000107EE 7208                       		moveq	#8,d1
000107F0 0828 0000 0022             		btst	#0,$22(a0)
000107F6 6700                       		beq.s	loc_10004
000107F8 4441                       		neg.w	d1
000107FA 4443                       		neg.w	d3
000107FC                            
000107FC                            loc_10004:
000107FC 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010800 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010802 3028 0008                  		move.w	8(a0),d0
00010806 9068 0030                  		sub.w	$30(a0),d0
0001080A B043                       		cmp.w	d3,d0
0001080C 6700                       		beq.s	Obj52_0A_Wait
0001080E D368 0008                  		add.w	d1,8(a0)	; move platform
00010812 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010818 4E75                       		rts	
0001081A                            ; ===========================================================================
0001081A                            
0001081A                            Obj52_0A_Wait:
0001081A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0001081E 6600                       		bne.s	locret_1002E	; if time remains, branch
00010820 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010826                            
00010826                            locret_1002E:
00010826 4E75                       		rts	
00010828                            ; ===========================================================================
00010828                            
00010828                            Obj52_0A_Back:
00010828 3028 0008                  		move.w	8(a0),d0
0001082C 9068 0030                  		sub.w	$30(a0),d0
00010830 6700                       		beq.s	Obj52_0A_Reset
00010832 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010836 4E75                       		rts	
00010838                            ; ===========================================================================
00010838                            
00010838                            Obj52_0A_Reset:
00010838 4268 0036                  		clr.w	$36(a0)
0001083C 5328 0028                  		subq.b	#1,$28(a0)
00010840 4E75                       		rts	
00010842                            ; ===========================================================================
00010842                            ; ---------------------------------------------------------------------------
00010842                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010842                            ; ---------------------------------------------------------------------------
00010842                            Map_obj52:
00010842                            	include "_maps\obj52mz.asm"
00010842                            ; ---------------------------------------------------------------------------
00010842                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010842                            ; ---------------------------------------------------------------------------
00010842 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010846 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
0001084A 0000                       		dc.w byte_1008F-Map_obj52
0001084C 01                         byte_10054:	dc.b 1
0001084D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010852 02                         byte_1005A:	dc.b 2
00010853 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010858 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0001085D 04                         byte_10065:	dc.b 4
0001085E F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010863 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010868 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001086D 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010872 04                         byte_1007A:	dc.b 4
00010873 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010878 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001087D F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010882 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010887 03                         byte_1008F:	dc.b 3
00010888 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001088D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010892 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010898 00                         		even
00010898 00                         		even
00010898                            
00010898                            ; ---------------------------------------------------------------------------
00010898                            ; Sprite mappings - moving block (LZ)
00010898                            ; ---------------------------------------------------------------------------
00010898                            Map_obj52a:
00010898                            	include "_maps\obj52lz.asm"
00010898                            ; ---------------------------------------------------------------------------
00010898                            ; Sprite mappings - moving block (LZ)
00010898                            ; ---------------------------------------------------------------------------
00010898 0000                       		dc.w byte_100A2-Map_obj52a
0001089A 01                         byte_100A2:	dc.b 1
0001089B F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000108A0                            		even
000108A0                            		even
000108A0                            
000108A0                            ; ===========================================================================
000108A0                            ; ---------------------------------------------------------------------------
000108A0                            ; Object 55 - Basaran enemy (MZ)
000108A0                            ; ---------------------------------------------------------------------------
000108A0                            
000108A0                            Obj55:					; XREF: Obj_Index
000108A0 7000                       		moveq	#0,d0
000108A2 1028 0024                  		move.b	$24(a0),d0
000108A6 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000108AA 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000108AE                            ; ===========================================================================
000108AE 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
000108B0 0000                       		dc.w Obj55_Action-Obj55_Index
000108B2                            ; ===========================================================================
000108B2                            
000108B2                            Obj55_Main:				; XREF: Obj55_Index
000108B2 5428 0024                  		addq.b	#2,$24(a0)
000108B6 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000108BE 317C 84B8 0002             		move.w	#$84B8,2(a0)
000108C4 117C 0004 0001             		move.b	#4,1(a0)
000108CA 117C 000C 0016             		move.b	#$C,$16(a0)
000108D0 117C 0002 0018             		move.b	#2,$18(a0)
000108D6 117C 000B 0020             		move.b	#$B,$20(a0)
000108DC 117C 0010 0019             		move.b	#$10,$19(a0)
000108E2                            
000108E2                            Obj55_Action:				; XREF: Obj55_Index
000108E2 7000                       		moveq	#0,d0
000108E4 1028 0025                  		move.b	$25(a0),d0
000108E8 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000108EC 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000108F0 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000108F6 6100 A5D0                  		bsr.w	AnimateSprite
000108FA 6000 F5B4                  		bra.w	MarkObjGone
000108FE                            ; ===========================================================================
000108FE 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010900 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010902 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010904 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010906                            ; ===========================================================================
00010906                            
00010906                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010906 343C 0080                  		move.w	#$80,d2
0001090A 6100 0000                  		bsr.w	Obj55_ChkSonic
0001090E 6400                       		bcc.s	Obj55_NoDrop
00010910 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010914 3140 0036                  		move.w	d0,$36(a0)
00010918 9068 000C                  		sub.w	$C(a0),d0
0001091C 6500                       		bcs.s	Obj55_NoDrop
0001091E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010922 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010924 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010928 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
0001092A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001092E D007                       		add.b	d7,d0
00010930 0200 0007                  		andi.b	#7,d0
00010934 6600                       		bne.s	Obj55_NoDrop
00010936 117C 0001 001C             		move.b	#1,$1C(a0)
0001093C 5428 0025                  		addq.b	#2,$25(a0)
00010940                            
00010940                            Obj55_NoDrop:
00010940 4E75                       		rts	
00010942                            ; ===========================================================================
00010942                            
00010942                            Obj55_DropFly:				; XREF: Obj55_Index2
00010942 6100 D49E                  		bsr.w	SpeedToPos
00010946 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
0001094C 343C 0080                  		move.w	#$80,d2
00010950 6100 0000                  		bsr.w	Obj55_ChkSonic
00010954 3028 0036                  		move.w	$36(a0),d0
00010958 9068 000C                  		sub.w	$C(a0),d0
0001095C 6500                       		bcs.s	Obj55_ChkDel
0001095E 0C40 0010                  		cmpi.w	#$10,d0
00010962 6400                       		bcc.s	locret_10180
00010964 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010968 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
0001096E 117C 0002 001C             		move.b	#2,$1C(a0)
00010974 5428 0025                  		addq.b	#2,$25(a0)
00010978                            
00010978                            locret_10180:
00010978 4E75                       		rts	
0001097A                            ; ===========================================================================
0001097A                            
0001097A                            Obj55_ChkDel:				; XREF: Obj55_DropFly
0001097A 4A28 0001                  		tst.b	1(a0)
0001097E 6A00 D4C4                  		bpl.w	DeleteObject
00010982 4E75                       		rts	
00010984                            ; ===========================================================================
00010984                            
00010984                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010984 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010988 0200 000F                  		andi.b	#$F,d0
0001098C 6600                       		bne.s	loc_101A0
0001098E 303C 00C0                  		move.w	#$C0,d0
00010992 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flapping sound
00010998                            
00010998                            loc_101A0:
00010998 6100 D448                  		bsr.w	SpeedToPos
0001099C 3038 D008                  		move.w	($FFFFD008).w,d0
000109A0 9068 0008                  		sub.w	8(a0),d0
000109A4 6400                       		bcc.s	loc_101B0
000109A6 4440                       		neg.w	d0
000109A8                            
000109A8                            loc_101B0:
000109A8 0C40 0080                  		cmpi.w	#$80,d0
000109AC 6500                       		bcs.s	locret_101C6
000109AE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000109B2 D007                       		add.b	d7,d0
000109B4 0200 0007                  		andi.b	#7,d0
000109B8 6600                       		bne.s	locret_101C6
000109BA 5428 0025                  		addq.b	#2,$25(a0)
000109BE                            
000109BE                            locret_101C6:
000109BE 4E75                       		rts	
000109C0                            ; ===========================================================================
000109C0                            
000109C0                            Obj55_FlyUp:				; XREF: Obj55_Index2
000109C0 6100 D420                  		bsr.w	SpeedToPos
000109C4 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
000109CA 6100 0000                  		bsr.w	ObjHitCeiling
000109CE 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000109D0 6A00                       		bpl.s	locret_101F4	; if not, branch
000109D2 9368 000C                  		sub.w	d1,$C(a0)
000109D6 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
000109DC 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
000109E0 4268 0012                  		clr.w	$12(a0)
000109E4 4228 001C                  		clr.b	$1C(a0)
000109E8 4228 0025                  		clr.b	$25(a0)
000109EC                            
000109EC                            locret_101F4:
000109EC 4E75                       		rts	
000109EE                            ; ===========================================================================
000109EE                            
000109EE                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
000109EE 323C 0100                  		move.w	#$100,d1
000109F2 08E8 0000 0022             		bset	#0,$22(a0)
000109F8 3038 D008                  		move.w	($FFFFD008).w,d0
000109FC 9068 0008                  		sub.w	8(a0),d0
00010A00 6400                       		bcc.s	loc_10214
00010A02 4440                       		neg.w	d0
00010A04 4441                       		neg.w	d1
00010A06 08A8 0000 0022             		bclr	#0,$22(a0)
00010A0C                            
00010A0C                            loc_10214:
00010A0C B042                       		cmp.w	d2,d0
00010A0E 4E75                       		rts	
00010A10                            ; ===========================================================================
00010A10 6100 D3D0                  		bsr.w	SpeedToPos
00010A14 6100 D3F2                  		bsr.w	DisplaySprite
00010A18 4A28 0001                  		tst.b	1(a0)
00010A1C 6A00 D426                  		bpl.w	DeleteObject
00010A20 4E75                       		rts	
00010A22                            ; ===========================================================================
00010A22                            Ani_obj55:
00010A22                            	include "_anim\obj55.asm"
00010A22                            ; ---------------------------------------------------------------------------
00010A22                            ; Animation script - Basaran enemy
00010A22                            ; ---------------------------------------------------------------------------
00010A22 0000                       		dc.w byte_10230-Ani_obj55
00010A24 0000                       		dc.w byte_10234-Ani_obj55
00010A26 0000                       		dc.w byte_10238-Ani_obj55
00010A28 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010A2C 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010A30 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010A36                            		even
00010A36                            		even
00010A36                            
00010A36                            ; ---------------------------------------------------------------------------
00010A36                            ; Sprite mappings - Basaran enemy (MZ)
00010A36                            ; ---------------------------------------------------------------------------
00010A36                            Map_obj55:
00010A36                            	include "_maps\obj55.asm"
00010A36                            ; ---------------------------------------------------------------------------
00010A36                            ; Sprite mappings - Basaran enemy (MZ)
00010A36                            ; ---------------------------------------------------------------------------
00010A36 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010A3A 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010A3E 01                         byte_10246:	dc.b 1
00010A3F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010A44 03                         byte_1024C:	dc.b 3
00010A45 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010A4A 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010A4F 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010A54 04                         byte_1025C:	dc.b 4
00010A55 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010A5A 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010A5F 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010A64 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010A69 04                         byte_10271:	dc.b 4
00010A6A F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010A6F 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010A74 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010A79 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010A7E                            		even
00010A7E                            		even
00010A7E                            
00010A7E                            ; ===========================================================================
00010A7E                            ; ---------------------------------------------------------------------------
00010A7E                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010A7E                            ; ---------------------------------------------------------------------------
00010A7E                            
00010A7E                            Obj56:					; XREF: Obj_Index
00010A7E 7000                       		moveq	#0,d0
00010A80 1028 0024                  		move.b	$24(a0),d0
00010A84 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010A88 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010A8C                            ; ===========================================================================
00010A8C 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010A8E 0000                       		dc.w Obj56_Action-Obj56_Index
00010A90                            
00010A90 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010A92 2020                       		dc.b  $20, $20
00010A94 1020                       		dc.b  $10, $20
00010A96 201A                       		dc.b  $20, $1A
00010A98 1027                       		dc.b  $10, $27
00010A9A 1010                       		dc.b  $10, $10
00010A9C 0820                       		dc.b	8, $20
00010A9E 4010                       		dc.b  $40, $10
00010AA0                            ; ===========================================================================
00010AA0                            
00010AA0                            Obj56_Main:				; XREF: Obj56_Index
00010AA0 5428 0024                  		addq.b	#2,$24(a0)
00010AA4 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010AAC 317C 4000 0002             		move.w	#$4000,2(a0)
00010AB2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010AB8 6600                       		bne.s	loc_102C8
00010ABA 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010AC0                            
00010AC0                            loc_102C8:
00010AC0 117C 0004 0001             		move.b	#4,1(a0)
00010AC6 117C 0003 0018             		move.b	#3,$18(a0)
00010ACC 7000                       		moveq	#0,d0
00010ACE 1028 0028                  		move.b	$28(a0),d0
00010AD2 E648                       		lsr.w	#3,d0
00010AD4 0240 000E                  		andi.w	#$E,d0
00010AD8 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010ADC 115A 0019                  		move.b	(a2)+,$19(a0)
00010AE0 1152 0016                  		move.b	(a2),$16(a0)
00010AE4 E248                       		lsr.w	#1,d0
00010AE6 1140 001A                  		move.b	d0,$1A(a0)
00010AEA 3168 0008 0034             		move.w	8(a0),$34(a0)
00010AF0 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010AF6 7000                       		moveq	#0,d0
00010AF8 1012                       		move.b	(a2),d0
00010AFA D040                       		add.w	d0,d0
00010AFC 3140 003A                  		move.w	d0,$3A(a0)
00010B00 7000                       		moveq	#0,d0
00010B02 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010B08 6700                       		beq.s	loc_10332
00010B0A 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010B0E 0240 000F                  		andi.w	#$F,d0
00010B12 5140                       		subq.w	#8,d0
00010B14 6500                       		bcs.s	loc_10332
00010B16 E548                       		lsl.w	#2,d0
00010B18 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010B1C 45F2 0000                  		lea	(a2,d0.w),a2
00010B20 4A52                       		tst.w	(a2)
00010B22 6A00                       		bpl.s	loc_10332
00010B24 0868 0000 0022             		bchg	#0,$22(a0)
00010B2A                            
00010B2A                            loc_10332:
00010B2A 1028 0028                  		move.b	$28(a0),d0
00010B2E 6A00                       		bpl.s	Obj56_Action
00010B30 0200 000F                  		andi.b	#$F,d0
00010B34 1140 003C                  		move.b	d0,$3C(a0)
00010B38 117C 0005 0028             		move.b	#5,$28(a0)
00010B3E 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010B44 6600                       		bne.s	Obj56_ChkGone
00010B46 117C 000C 0028             		move.b	#$C,$28(a0)
00010B4C 317C 0080 003A             		move.w	#$80,$3A(a0)
00010B52                            
00010B52                            Obj56_ChkGone:
00010B52 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B56 7000                       		moveq	#0,d0
00010B58 1028 0023                  		move.b	$23(a0),d0
00010B5C 6700                       		beq.s	Obj56_Action
00010B5E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010B64 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010B6A 6700                       		beq.s	Obj56_Action
00010B6C 5228 0028                  		addq.b	#1,$28(a0)
00010B70 4268 003A                  		clr.w	$3A(a0)
00010B74                            
00010B74                            Obj56_Action:				; XREF: Obj56_Index
00010B74 3F28 0008                  		move.w	8(a0),-(sp)
00010B78 7000                       		moveq	#0,d0
00010B7A 1028 0028                  		move.b	$28(a0),d0	; get object type
00010B7E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010B82 D040                       		add.w	d0,d0
00010B84 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010B88 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010B8C 381F                       		move.w	(sp)+,d4
00010B8E 4A28 0001                  		tst.b	1(a0)
00010B92 6A00                       		bpl.s	Obj56_ChkDel
00010B94 7200                       		moveq	#0,d1
00010B96 1228 0019                  		move.b	$19(a0),d1
00010B9A 0641 000B                  		addi.w	#$B,d1
00010B9E 7400                       		moveq	#0,d2
00010BA0 1428 0016                  		move.b	$16(a0),d2
00010BA4 3602                       		move.w	d2,d3
00010BA6 5243                       		addq.w	#1,d3
00010BA8 6100 F62E                  		bsr.w	SolidObject
00010BAC                            
00010BAC                            Obj56_ChkDel:
00010BAC 3028 0034                  		move.w	$34(a0),d0
00010BB0 0240 FF80                  		andi.w	#$FF80,d0
00010BB4 3238 F700                  		move.w	($FFFFF700).w,d1
00010BB8 0441 0080                  		subi.w	#$80,d1
00010BBC 0241 FF80                  		andi.w	#$FF80,d1
00010BC0 9041                       		sub.w	d1,d0
00010BC2 0C40 0280                  		cmpi.w	#$280,d0
00010BC6 6200 D27C                  		bhi.w	DeleteObject
00010BCA 6000 D23C                  		bra.w	DisplaySprite
00010BCE                            ; ===========================================================================
00010BCE 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010BD2 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010BD6 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010BDA 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010BDE 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010BE2 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010BE6 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010BEA                            ; ===========================================================================
00010BEA                            
00010BEA                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010BEA 4E75                       		rts	
00010BEC                            ; ===========================================================================
00010BEC                            
00010BEC                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010BEC 323C 0040                  		move.w	#$40,d1
00010BF0 7000                       		moveq	#0,d0
00010BF2 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010BF6 6000                       		bra.s	Obj56_Move_LR
00010BF8                            ; ===========================================================================
00010BF8                            
00010BF8                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010BF8 323C 0080                  		move.w	#$80,d1
00010BFC 7000                       		moveq	#0,d0
00010BFE 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010C02                            
00010C02                            Obj56_Move_LR:
00010C02 0828 0000 0022             		btst	#0,$22(a0)
00010C08 6700                       		beq.s	loc_10416
00010C0A 4440                       		neg.w	d0
00010C0C D041                       		add.w	d1,d0
00010C0E                            
00010C0E                            loc_10416:
00010C0E 3228 0034                  		move.w	$34(a0),d1
00010C12 9240                       		sub.w	d0,d1
00010C14 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010C18 4E75                       		rts	
00010C1A                            ; ===========================================================================
00010C1A                            
00010C1A                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010C1A 323C 0040                  		move.w	#$40,d1
00010C1E 7000                       		moveq	#0,d0
00010C20 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010C24 6000                       		bra.s	Obj56_Move_UD
00010C26                            ; ===========================================================================
00010C26                            
00010C26                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010C26 323C 0080                  		move.w	#$80,d1
00010C2A 7000                       		moveq	#0,d0
00010C2C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010C30                            
00010C30                            Obj56_Move_UD:
00010C30 0828 0000 0022             		btst	#0,$22(a0)
00010C36 6700                       		beq.s	loc_10444
00010C38 4440                       		neg.w	d0
00010C3A D041                       		add.w	d1,d0
00010C3C                            
00010C3C                            loc_10444:
00010C3C 3228 0030                  		move.w	$30(a0),d1
00010C40 9240                       		sub.w	d0,d1
00010C42 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010C46 4E75                       		rts	
00010C48                            ; ===========================================================================
00010C48                            
00010C48                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010C48 4A28 0038                  		tst.b	$38(a0)
00010C4C 6600                       		bne.s	loc_104A4
00010C4E 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010C54 6600                       		bne.s	loc_1047A	; if not, branch
00010C56 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010C5C 6600                       		bne.s	loc_1047A
00010C5E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010C62 3038 D008                  		move.w	($FFFFD008).w,d0
00010C66 B068 0008                  		cmp.w	8(a0),d0
00010C6A 6400                       		bcc.s	loc_1047A
00010C6C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010C72                            
00010C72                            loc_1047A:
00010C72 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010C76 7000                       		moveq	#0,d0
00010C78 1028 003C                  		move.b	$3C(a0),d0
00010C7C 0832 0000 0000             		btst	#0,(a2,d0.w)
00010C82 6700                       		beq.s	loc_104AE
00010C84 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010C8A 6600                       		bne.s	loc_1049E	; if not, branch
00010C8C 0C00 0003                  		cmpi.b	#3,d0
00010C90 6600                       		bne.s	loc_1049E
00010C92 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010C96                            
00010C96                            loc_1049E:
00010C96 117C 0001 0038             		move.b	#1,$38(a0)
00010C9C                            
00010C9C                            loc_104A4:
00010C9C 4A68 003A                  		tst.w	$3A(a0)
00010CA0 6700                       		beq.s	loc_104C8
00010CA2 5568 003A                  		subq.w	#2,$3A(a0)
00010CA6                            
00010CA6                            loc_104AE:
00010CA6 3028 003A                  		move.w	$3A(a0),d0
00010CAA 0828 0000 0022             		btst	#0,$22(a0)
00010CB0 6700                       		beq.s	loc_104BC
00010CB2 4440                       		neg.w	d0
00010CB4                            
00010CB4                            loc_104BC:
00010CB4 3228 0030                  		move.w	$30(a0),d1
00010CB8 D240                       		add.w	d0,d1
00010CBA 3141 000C                  		move.w	d1,$C(a0)
00010CBE 4E75                       		rts	
00010CC0                            ; ===========================================================================
00010CC0                            
00010CC0                            loc_104C8:
00010CC0 5228 0028                  		addq.b	#1,$28(a0)
00010CC4 4228 0038                  		clr.b	$38(a0)
00010CC8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010CCC 7000                       		moveq	#0,d0
00010CCE 1028 0023                  		move.b	$23(a0),d0
00010CD2 67D2                       		beq.s	loc_104AE
00010CD4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010CDA 60CA                       		bra.s	loc_104AE
00010CDC                            ; ===========================================================================
00010CDC                            
00010CDC                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010CDC 4A28 0038                  		tst.b	$38(a0)
00010CE0 6600                       		bne.s	loc_10500
00010CE2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010CE6 7000                       		moveq	#0,d0
00010CE8 1028 003C                  		move.b	$3C(a0),d0
00010CEC 4A32 0000                  		tst.b	(a2,d0.w)
00010CF0 6A00                       		bpl.s	loc_10512
00010CF2 117C 0001 0038             		move.b	#1,$38(a0)
00010CF8                            
00010CF8                            loc_10500:
00010CF8 7000                       		moveq	#0,d0
00010CFA 1028 0016                  		move.b	$16(a0),d0
00010CFE D040                       		add.w	d0,d0
00010D00 B068 003A                  		cmp.w	$3A(a0),d0
00010D04 6700                       		beq.s	loc_1052C
00010D06 5468 003A                  		addq.w	#2,$3A(a0)
00010D0A                            
00010D0A                            loc_10512:
00010D0A 3028 003A                  		move.w	$3A(a0),d0
00010D0E 0828 0000 0022             		btst	#0,$22(a0)
00010D14 6700                       		beq.s	loc_10520
00010D16 4440                       		neg.w	d0
00010D18                            
00010D18                            loc_10520:
00010D18 3228 0030                  		move.w	$30(a0),d1
00010D1C D240                       		add.w	d0,d1
00010D1E 3141 000C                  		move.w	d1,$C(a0)
00010D22 4E75                       		rts	
00010D24                            ; ===========================================================================
00010D24                            
00010D24                            loc_1052C:
00010D24 5328 0028                  		subq.b	#1,$28(a0)
00010D28 4228 0038                  		clr.b	$38(a0)
00010D2C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D30 7000                       		moveq	#0,d0
00010D32 1028 0023                  		move.b	$23(a0),d0
00010D36 67D2                       		beq.s	loc_10512
00010D38 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010D3E 60CA                       		bra.s	loc_10512
00010D40                            ; ===========================================================================
00010D40                            
00010D40                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010D40 4A28 0038                  		tst.b	$38(a0)
00010D44 6600                       		bne.s	loc_1055E
00010D46 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010D4A 6700                       		beq.s	locret_10578
00010D4C 117C 0001 0038             		move.b	#1,$38(a0)
00010D52 4268 003A                  		clr.w	$3A(a0)
00010D56                            
00010D56                            loc_1055E:
00010D56 5268 0008                  		addq.w	#1,8(a0)
00010D5A 3168 0008 0034             		move.w	8(a0),$34(a0)
00010D60 5268 003A                  		addq.w	#1,$3A(a0)
00010D64 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010D6A 6600                       		bne.s	locret_10578
00010D6C 4228 0028                  		clr.b	$28(a0)
00010D70                            
00010D70                            locret_10578:
00010D70 4E75                       		rts	
00010D72                            ; ===========================================================================
00010D72                            
00010D72                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010D72 4A28 0038                  		tst.b	$38(a0)
00010D76 6600                       		bne.s	loc_10598
00010D78 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010D7C 7000                       		moveq	#0,d0
00010D7E 1028 003C                  		move.b	$3C(a0),d0
00010D82 0832 0000 0000             		btst	#0,(a2,d0.w)
00010D88 6700                       		beq.s	loc_105A2
00010D8A 117C 0001 0038             		move.b	#1,$38(a0)
00010D90                            
00010D90                            loc_10598:
00010D90 4A68 003A                  		tst.w	$3A(a0)
00010D94 6700                       		beq.s	loc_105C0
00010D96 5568 003A                  		subq.w	#2,$3A(a0)
00010D9A                            
00010D9A                            loc_105A2:
00010D9A 3028 003A                  		move.w	$3A(a0),d0
00010D9E 0828 0000 0022             		btst	#0,$22(a0)
00010DA4 6700                       		beq.s	loc_105B4
00010DA6 4440                       		neg.w	d0
00010DA8 0640 0080                  		addi.w	#$80,d0
00010DAC                            
00010DAC                            loc_105B4:
00010DAC 3228 0034                  		move.w	$34(a0),d1
00010DB0 D240                       		add.w	d0,d1
00010DB2 3141 0008                  		move.w	d1,8(a0)
00010DB6 4E75                       		rts	
00010DB8                            ; ===========================================================================
00010DB8                            
00010DB8                            loc_105C0:
00010DB8 5228 0028                  		addq.b	#1,$28(a0)
00010DBC 4228 0038                  		clr.b	$38(a0)
00010DC0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010DC4 7000                       		moveq	#0,d0
00010DC6 1028 0023                  		move.b	$23(a0),d0
00010DCA 67CE                       		beq.s	loc_105A2
00010DCC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010DD2 60C6                       		bra.s	loc_105A2
00010DD4                            ; ===========================================================================
00010DD4                            
00010DD4                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010DD4 4A28 0038                  		tst.b	$38(a0)
00010DD8 6600                       		bne.s	loc_105F8
00010DDA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010DDE 7000                       		moveq	#0,d0
00010DE0 1028 003C                  		move.b	$3C(a0),d0
00010DE4 4A32 0000                  		tst.b	(a2,d0.w)
00010DE8 6A00                       		bpl.s	loc_10606
00010DEA 117C 0001 0038             		move.b	#1,$38(a0)
00010DF0                            
00010DF0                            loc_105F8:
00010DF0 303C 0080                  		move.w	#$80,d0
00010DF4 B068 003A                  		cmp.w	$3A(a0),d0
00010DF8 6700                       		beq.s	loc_10624
00010DFA 5468 003A                  		addq.w	#2,$3A(a0)
00010DFE                            
00010DFE                            loc_10606:
00010DFE 3028 003A                  		move.w	$3A(a0),d0
00010E02 0828 0000 0022             		btst	#0,$22(a0)
00010E08 6700                       		beq.s	loc_10618
00010E0A 4440                       		neg.w	d0
00010E0C 0640 0080                  		addi.w	#$80,d0
00010E10                            
00010E10                            loc_10618:
00010E10 3228 0034                  		move.w	$34(a0),d1
00010E14 D240                       		add.w	d0,d1
00010E16 3141 0008                  		move.w	d1,8(a0)
00010E1A 4E75                       		rts	
00010E1C                            ; ===========================================================================
00010E1C                            
00010E1C                            loc_10624:
00010E1C 5328 0028                  		subq.b	#1,$28(a0)
00010E20 4228 0038                  		clr.b	$38(a0)
00010E24 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010E28 7000                       		moveq	#0,d0
00010E2A 1028 0023                  		move.b	$23(a0),d0
00010E2E 67CE                       		beq.s	loc_10606
00010E30 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010E36 60C6                       		bra.s	loc_10606
00010E38                            ; ===========================================================================
00010E38                            
00010E38                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010E38 323C 0010                  		move.w	#$10,d1
00010E3C 7000                       		moveq	#0,d0
00010E3E 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010E42 E248                       		lsr.w	#1,d0
00010E44 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010E48 6000                       		bra.s	Obj56_Move_Sqr
00010E4A                            ; ===========================================================================
00010E4A                            
00010E4A                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010E4A 323C 0030                  		move.w	#$30,d1
00010E4E 7000                       		moveq	#0,d0
00010E50 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010E54 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010E58 6000                       		bra.s	Obj56_Move_Sqr
00010E5A                            ; ===========================================================================
00010E5A                            
00010E5A                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010E5A 323C 0050                  		move.w	#$50,d1
00010E5E 7000                       		moveq	#0,d0
00010E60 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010E64 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010E68 6000                       		bra.s	Obj56_Move_Sqr
00010E6A                            ; ===========================================================================
00010E6A                            
00010E6A                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010E6A 323C 0070                  		move.w	#$70,d1
00010E6E 7000                       		moveq	#0,d0
00010E70 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010E74 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010E78                            
00010E78                            Obj56_Move_Sqr:
00010E78 4A43                       		tst.w	d3
00010E7A 6600                       		bne.s	loc_1068E
00010E7C 5228 0022                  		addq.b	#1,$22(a0)
00010E80 0228 0003 0022             		andi.b	#3,$22(a0)
00010E86                            
00010E86                            loc_1068E:
00010E86 1428 0022                  		move.b	$22(a0),d2
00010E8A 0202 0003                  		andi.b	#3,d2
00010E8E 6600                       		bne.s	loc_106AE
00010E90 9041                       		sub.w	d1,d0
00010E92 D068 0034                  		add.w	$34(a0),d0
00010E96 3140 0008                  		move.w	d0,8(a0)
00010E9A 4441                       		neg.w	d1
00010E9C D268 0030                  		add.w	$30(a0),d1
00010EA0 3141 000C                  		move.w	d1,$C(a0)
00010EA4 4E75                       		rts	
00010EA6                            ; ===========================================================================
00010EA6                            
00010EA6                            loc_106AE:
00010EA6 5302                       		subq.b	#1,d2
00010EA8 6600                       		bne.s	loc_106CC
00010EAA 5341                       		subq.w	#1,d1
00010EAC 9041                       		sub.w	d1,d0
00010EAE 4440                       		neg.w	d0
00010EB0 D068 0030                  		add.w	$30(a0),d0
00010EB4 3140 000C                  		move.w	d0,$C(a0)
00010EB8 5241                       		addq.w	#1,d1
00010EBA D268 0034                  		add.w	$34(a0),d1
00010EBE 3141 0008                  		move.w	d1,8(a0)
00010EC2 4E75                       		rts	
00010EC4                            ; ===========================================================================
00010EC4                            
00010EC4                            loc_106CC:
00010EC4 5302                       		subq.b	#1,d2
00010EC6 6600                       		bne.s	loc_106EA
00010EC8 5341                       		subq.w	#1,d1
00010ECA 9041                       		sub.w	d1,d0
00010ECC 4440                       		neg.w	d0
00010ECE D068 0034                  		add.w	$34(a0),d0
00010ED2 3140 0008                  		move.w	d0,8(a0)
00010ED6 5241                       		addq.w	#1,d1
00010ED8 D268 0030                  		add.w	$30(a0),d1
00010EDC 3141 000C                  		move.w	d1,$C(a0)
00010EE0 4E75                       		rts	
00010EE2                            ; ===========================================================================
00010EE2                            
00010EE2                            loc_106EA:
00010EE2 9041                       		sub.w	d1,d0
00010EE4 D068 0030                  		add.w	$30(a0),d0
00010EE8 3140 000C                  		move.w	d0,$C(a0)
00010EEC 4441                       		neg.w	d1
00010EEE D268 0034                  		add.w	$34(a0),d1
00010EF2 3141 0008                  		move.w	d1,8(a0)
00010EF6 4E75                       		rts	
00010EF8                            ; ===========================================================================
00010EF8                            ; ---------------------------------------------------------------------------
00010EF8                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010EF8                            ; ---------------------------------------------------------------------------
00010EF8                            Map_obj56:
00010EF8                            	include "_maps\obj56.asm"
00010EF8                            ; ---------------------------------------------------------------------------
00010EF8                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010EF8                            ; ---------------------------------------------------------------------------
00010EF8 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010EFC 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010F00 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010F04 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010F08 01                         byte_10710:	dc.b 1
00010F09 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010F0E 04                         byte_10716:	dc.b 4
00010F0F E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010F14 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010F19 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010F1E 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010F23 02                         byte_1072B:	dc.b 2
00010F24 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010F29 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010F2E 04                         byte_10736:	dc.b 4
00010F2F E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010F34 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010F39 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010F3E 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010F43 03                         byte_1074B:	dc.b 3
00010F44 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010F49 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010F4E 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010F53 01                         byte_1075B:	dc.b 1
00010F54 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010F59 02                         byte_10761:	dc.b 2
00010F5A E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010F5F 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010F64 04                         byte_1076C:	dc.b 4
00010F65 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010F6A F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010F6F F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010F74 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010F7A 00                         		even
00010F7A 00                         		even
00010F7A                            
00010F7A                            ; ===========================================================================
00010F7A                            ; ---------------------------------------------------------------------------
00010F7A                            ; Object 57 - spiked balls (SYZ, LZ)
00010F7A                            ; ---------------------------------------------------------------------------
00010F7A                            
00010F7A                            Obj57:					; XREF: Obj_Index
00010F7A 7000                       		moveq	#0,d0
00010F7C 1028 0024                  		move.b	$24(a0),d0
00010F80 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010F84 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010F88                            ; ===========================================================================
00010F88 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010F8A 0000                       		dc.w Obj57_Move-Obj57_Index
00010F8C 0000                       		dc.w Obj57_Display-Obj57_Index
00010F8E                            ; ===========================================================================
00010F8E                            
00010F8E                            Obj57_Main:				; XREF: Obj57_Index
00010F8E 5428 0024                  		addq.b	#2,$24(a0)
00010F92 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010F9A 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010FA0 117C 0004 0001             		move.b	#4,1(a0)
00010FA6 117C 0004 0018             		move.b	#4,$18(a0)
00010FAC 117C 0008 0019             		move.b	#8,$19(a0)
00010FB2 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010FB8 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010FBE 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010FC4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010FCA 6600                       		bne.s	loc_107E8
00010FCC 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010FD2 317C 0310 0002             		move.w	#$310,2(a0)
00010FD8 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010FE0                            
00010FE0                            loc_107E8:
00010FE0 1228 0028                  		move.b	$28(a0),d1	; get object type
00010FE4 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010FE8 4881                       		ext.w	d1
00010FEA E741                       		asl.w	#3,d1		; multiply by 8
00010FEC 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010FF0 1028 0022                  		move.b	$22(a0),d0
00010FF4 E418                       		ror.b	#2,d0
00010FF6 0200 00C0                  		andi.b	#-$40,d0
00010FFA 1140 0026                  		move.b	d0,$26(a0)
00010FFE 45E8 0029                  		lea	$29(a0),a2
00011002 1228 0028                  		move.b	$28(a0),d1	; get object type
00011006 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001100A 14FC 0000                  		move.b	#0,(a2)+
0001100E 3601                       		move.w	d1,d3
00011010 E94B                       		lsl.w	#4,d3
00011012 1143 003C                  		move.b	d3,$3C(a0)
00011016 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011018 6500                       		bcs.s	loc_10894
0001101A 0828 0003 0028             		btst	#3,$28(a0)
00011020 6700                       		beq.s	Obj57_MakeChain
00011022 5341                       		subq.w	#1,d1
00011024 6500                       		bcs.s	loc_10894
00011026                            
00011026                            Obj57_MakeChain:
00011026 6100 D266                  		bsr.w	SingleObjLoad
0001102A 6600                       		bne.s	loc_10894
0001102C 5228 0029                  		addq.b	#1,$29(a0)
00011030 3A09                       		move.w	a1,d5
00011032 0445 D000                  		subi.w	#-$3000,d5
00011036 EC4D                       		lsr.w	#6,d5
00011038 0245 007F                  		andi.w	#$7F,d5
0001103C 14C5                       		move.b	d5,(a2)+
0001103E 137C 0004 0024             		move.b	#4,$24(a1)
00011044 1290                       		move.b	0(a0),0(a1)
00011046 2368 0004 0004             		move.l	4(a0),4(a1)
0001104C 3368 0002 0002             		move.w	2(a0),2(a1)
00011052 1368 0001 0001             		move.b	1(a0),1(a1)
00011058 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001105E 1368 0019 0019             		move.b	$19(a0),$19(a1)
00011064 1368 0020 0020             		move.b	$20(a0),$20(a1)
0001106A 0403 0010                  		subi.b	#$10,d3
0001106E 1343 003C                  		move.b	d3,$3C(a1)
00011072 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00011078 6600                       		bne.s	loc_10890
0001107A 4A03                       		tst.b	d3
0001107C 6600                       		bne.s	loc_10890
0001107E 137C 0002 001A             		move.b	#2,$1A(a1)
00011084                            
00011084                            loc_10890:
00011084 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00011088                            
00011088                            loc_10894:
00011088 3A08                       		move.w	a0,d5
0001108A 0445 D000                  		subi.w	#-$3000,d5
0001108E EC4D                       		lsr.w	#6,d5
00011090 0245 007F                  		andi.w	#$7F,d5
00011094 14C5                       		move.b	d5,(a2)+
00011096 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001109C 6600                       		bne.s	Obj57_Move
0001109E 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000110A4 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000110AA                            
000110AA                            Obj57_Move:				; XREF: Obj57_Index
000110AA 6100 0000                  		bsr.w	Obj57_MoveSub
000110AE 6000 0000                  		bra.w	Obj57_ChkDel
000110B2                            ; ===========================================================================
000110B2                            
000110B2                            Obj57_MoveSub:				; XREF: Obj57_Move
000110B2 3028 003E                  		move.w	$3E(a0),d0
000110B6 D168 0026                  		add.w	d0,$26(a0)
000110BA 1028 0026                  		move.b	$26(a0),d0
000110BE 4EB9 0000 2CEC             		jsr	(CalcSine).l
000110C4 3428 0038                  		move.w	$38(a0),d2
000110C8 3628 003A                  		move.w	$3A(a0),d3
000110CC 45E8 0029                  		lea	$29(a0),a2
000110D0 7C00                       		moveq	#0,d6
000110D2 1C1A                       		move.b	(a2)+,d6
000110D4                            
000110D4                            Obj57_MoveLoop:
000110D4 7800                       		moveq	#0,d4
000110D6 181A                       		move.b	(a2)+,d4
000110D8 ED4C                       		lsl.w	#6,d4
000110DA 0684 00FF D000             		addi.l	#$FFD000,d4
000110E0 2244                       		movea.l	d4,a1
000110E2 7800                       		moveq	#0,d4
000110E4 1829 003C                  		move.b	$3C(a1),d4
000110E8 2A04                       		move.l	d4,d5
000110EA C9C0                       		muls.w	d0,d4
000110EC E084                       		asr.l	#8,d4
000110EE CBC1                       		muls.w	d1,d5
000110F0 E085                       		asr.l	#8,d5
000110F2 D842                       		add.w	d2,d4
000110F4 DA43                       		add.w	d3,d5
000110F6 3344 000C                  		move.w	d4,$C(a1)
000110FA 3345 0008                  		move.w	d5,8(a1)
000110FE 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011102 4E75                       		rts	
00011104                            ; ===========================================================================
00011104                            
00011104                            Obj57_ChkDel:				; XREF: Obj57_Move
00011104 3028 003A                  		move.w	$3A(a0),d0
00011108 0240 FF80                  		andi.w	#$FF80,d0
0001110C 3238 F700                  		move.w	($FFFFF700).w,d1
00011110 0441 0080                  		subi.w	#$80,d1
00011114 0241 FF80                  		andi.w	#$FF80,d1
00011118 9041                       		sub.w	d1,d0
0001111A 0C40 0280                  		cmpi.w	#$280,d0
0001111E 6200 0000                  		bhi.w	Obj57_Delete
00011122 6000 CCE4                  		bra.w	DisplaySprite
00011126                            ; ===========================================================================
00011126                            
00011126                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011126 7400                       		moveq	#0,d2
00011128 45E8 0029                  		lea	$29(a0),a2
0001112C 141A                       		move.b	(a2)+,d2
0001112E                            
0001112E                            Obj57_DelLoop:
0001112E 7000                       		moveq	#0,d0
00011130 101A                       		move.b	(a2)+,d0
00011132 ED48                       		lsl.w	#6,d0
00011134 0680 00FF D000             		addi.l	#$FFD000,d0
0001113A 2240                       		movea.l	d0,a1
0001113C 6100 CD08                  		bsr.w	DeleteObject2
00011140 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00011144                            
00011144 4E75                       		rts	
00011146                            ; ===========================================================================
00011146                            
00011146                            Obj57_Display:				; XREF: Obj57_Index
00011146 6000 CCC0                  		bra.w	DisplaySprite
0001114A                            ; ===========================================================================
0001114A                            ; ---------------------------------------------------------------------------
0001114A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001114A                            ; ---------------------------------------------------------------------------
0001114A                            Map_obj57:
0001114A                            	include "_maps\obj57syz.asm"
0001114A                            ; ---------------------------------------------------------------------------
0001114A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001114A                            ; ---------------------------------------------------------------------------
0001114A 0000                       		dc.w byte_10958-Map_obj57
0001114C 01                         byte_10958:	dc.b 1
0001114D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011152                            		even
00011152                            		even
00011152                            
00011152                            ; ---------------------------------------------------------------------------
00011152                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011152                            ; ---------------------------------------------------------------------------
00011152                            Map_obj57a:
00011152                            	include "_maps\obj57lz.asm"
00011152                            ; ---------------------------------------------------------------------------
00011152                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011152                            ; ---------------------------------------------------------------------------
00011152 0000                       		dc.w byte_10964-Map_obj57a
00011154 0000                       		dc.w byte_1096A-Map_obj57a
00011156 0000                       		dc.w byte_10970-Map_obj57a
00011158 01                         byte_10964:	dc.b 1
00011159 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001115E 01                         byte_1096A:	dc.b 1
0001115F F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00011164 01                         byte_10970:	dc.b 1
00011165 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
0001116A                            		even
0001116A                            		even
0001116A                            
0001116A                            ; ===========================================================================
0001116A                            ; ---------------------------------------------------------------------------
0001116A                            ; Object 58 - giant spiked balls (SYZ)
0001116A                            ; ---------------------------------------------------------------------------
0001116A                            
0001116A                            Obj58:					; XREF: Obj_Index
0001116A 7000                       		moveq	#0,d0
0001116C 1028 0024                  		move.b	$24(a0),d0
00011170 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00011174 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00011178                            ; ===========================================================================
00011178 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
0001117A 0000                       		dc.w Obj58_Move-Obj58_Index
0001117C                            ; ===========================================================================
0001117C                            
0001117C                            Obj58_Main:				; XREF: Obj58_Index
0001117C 5428 0024                  		addq.b	#2,$24(a0)
00011180 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00011188 317C 0396 0002             		move.w	#$396,2(a0)
0001118E 117C 0004 0001             		move.b	#4,1(a0)
00011194 117C 0004 0018             		move.b	#4,$18(a0)
0001119A 117C 0018 0019             		move.b	#$18,$19(a0)
000111A0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000111A6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000111AC 117C 0086 0020             		move.b	#$86,$20(a0)
000111B2 1228 0028                  		move.b	$28(a0),d1	; get object type
000111B6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000111BA 4881                       		ext.w	d1
000111BC E741                       		asl.w	#3,d1		; multiply by 8
000111BE 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000111C2 1028 0022                  		move.b	$22(a0),d0
000111C6 E418                       		ror.b	#2,d0
000111C8 0200 00C0                  		andi.b	#$C0,d0
000111CC 1140 0026                  		move.b	d0,$26(a0)
000111D0 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000111D6                            
000111D6                            Obj58_Move:				; XREF: Obj58_Index
000111D6 7000                       		moveq	#0,d0
000111D8 1028 0028                  		move.b	$28(a0),d0	; get object type
000111DC 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000111E0 D040                       		add.w	d0,d0
000111E2 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000111E6 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000111EA 3028 003A                  		move.w	$3A(a0),d0
000111EE 0240 FF80                  		andi.w	#$FF80,d0
000111F2 3238 F700                  		move.w	($FFFFF700).w,d1
000111F6 0441 0080                  		subi.w	#$80,d1
000111FA 0241 FF80                  		andi.w	#$FF80,d1
000111FE 9041                       		sub.w	d1,d0
00011200 0C40 0280                  		cmpi.w	#$280,d0
00011204 6200 CC3E                  		bhi.w	DeleteObject
00011208 6000 CBFE                  		bra.w	DisplaySprite
0001120C                            ; ===========================================================================
0001120C 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
0001120E 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011210 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011212 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011214                            ; ===========================================================================
00011214                            
00011214                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011214 4E75                       		rts	
00011216                            ; ===========================================================================
00011216                            
00011216                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011216 323C 0060                  		move.w	#$60,d1
0001121A 7000                       		moveq	#0,d0
0001121C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011220 0828 0000 0022             		btst	#0,$22(a0)
00011226 6700                       		beq.s	loc_10A38
00011228 4440                       		neg.w	d0
0001122A D041                       		add.w	d1,d0
0001122C                            
0001122C                            loc_10A38:
0001122C 3228 003A                  		move.w	$3A(a0),d1
00011230 9240                       		sub.w	d0,d1
00011232 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011236 4E75                       		rts	
00011238                            ; ===========================================================================
00011238                            
00011238                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011238 323C 0060                  		move.w	#$60,d1
0001123C 7000                       		moveq	#0,d0
0001123E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011242 0828 0000 0022             		btst	#0,$22(a0)
00011248 6700                       		beq.s	loc_10A5C
0001124A 4440                       		neg.w	d0
0001124C 0640 0080                  		addi.w	#$80,d0
00011250                            
00011250                            loc_10A5C:
00011250 3228 0038                  		move.w	$38(a0),d1
00011254 9240                       		sub.w	d0,d1
00011256 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001125A 4E75                       		rts	
0001125C                            ; ===========================================================================
0001125C                            
0001125C                            Obj58_Type03:				; XREF: Obj58_TypeIndex
0001125C 3028 003E                  		move.w	$3E(a0),d0
00011260 D168 0026                  		add.w	d0,$26(a0)
00011264 1028 0026                  		move.b	$26(a0),d0
00011268 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001126E 3428 0038                  		move.w	$38(a0),d2
00011272 3628 003A                  		move.w	$3A(a0),d3
00011276 7800                       		moveq	#0,d4
00011278 1828 003C                  		move.b	$3C(a0),d4
0001127C 2A04                       		move.l	d4,d5
0001127E C9C0                       		muls.w	d0,d4
00011280 E084                       		asr.l	#8,d4
00011282 CBC1                       		muls.w	d1,d5
00011284 E085                       		asr.l	#8,d5
00011286 D842                       		add.w	d2,d4
00011288 DA43                       		add.w	d3,d5
0001128A 3144 000C                  		move.w	d4,$C(a0)
0001128E 3145 0008                  		move.w	d5,8(a0)
00011292 4E75                       		rts	
00011294                            ; ===========================================================================
00011294                            ; ---------------------------------------------------------------------------
00011294                            ; Sprite mappings - SBZ	spiked ball on a chain
00011294                            ; ---------------------------------------------------------------------------
00011294                            Map_obj15b:
00011294                            	include "_maps\obj15sbz.asm"
00011294                            ; ---------------------------------------------------------------------------
00011294                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011294                            ; ---------------------------------------------------------------------------
00011294 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011298 0000                       		dc.w byte_10AC6-Map_obj15b
0001129A 05                         byte_10AA6:	dc.b 5
0001129B E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000112A0 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000112A5 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000112AA F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000112AF 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000112B4 01                         byte_10AC0:	dc.b 1
000112B5 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000112BA 02                         byte_10AC6:	dc.b 2
000112BB F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000112C0 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000112C6 00                         		even
000112C6 00                         		even
000112C6                            
000112C6                            ; ===========================================================================
000112C6                            ; ---------------------------------------------------------------------------
000112C6                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000112C6                            ; ---------------------------------------------------------------------------
000112C6                            
000112C6                            Obj59:					; XREF: Obj_Index
000112C6 7000                       		moveq	#0,d0
000112C8 1028 0024                  		move.b	$24(a0),d0
000112CC 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000112D0 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000112D4 3028 0032                  		move.w	$32(a0),d0
000112D8 0240 FF80                  		andi.w	#$FF80,d0
000112DC 3238 F700                  		move.w	($FFFFF700).w,d1
000112E0 0441 0080                  		subi.w	#$80,d1
000112E4 0241 FF80                  		andi.w	#$FF80,d1
000112E8 9041                       		sub.w	d1,d0
000112EA 0C40 0280                  		cmpi.w	#$280,d0
000112EE 6200 CB54                  		bhi.w	DeleteObject
000112F2 6000 CB14                  		bra.w	DisplaySprite
000112F6                            ; ===========================================================================
000112F6 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000112F8 0000                       		dc.w Obj59_Platform-Obj59_Index
000112FA 0000                       		dc.w Obj59_Action-Obj59_Index
000112FC 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000112FE                            
000112FE 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011300                            
00011300 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011302 2001                       		dc.b $20, 1
00011304 3401                       		dc.b $34, 1
00011306 1003                       		dc.b $10, 3
00011308 2003                       		dc.b $20, 3
0001130A 3403                       		dc.b $34, 3
0001130C 1401                       		dc.b $14, 1
0001130E 2401                       		dc.b $24, 1
00011310 2C01                       		dc.b $2C, 1
00011312 1403                       		dc.b $14, 3
00011314 2403                       		dc.b $24, 3
00011316 2C03                       		dc.b $2C, 3
00011318 2005                       		dc.b $20, 5
0001131A 2007                       		dc.b $20, 7
0001131C 3009                       		dc.b $30, 9
0001131E                            ; ===========================================================================
0001131E                            
0001131E                            Obj59_Main:				; XREF: Obj59_Index
0001131E 5428 0024                  		addq.b	#2,$24(a0)
00011322 7000                       		moveq	#0,d0
00011324 1028 0028                  		move.b	$28(a0),d0
00011328 6A00                       		bpl.s	Obj59_Main2
0001132A 5828 0024                  		addq.b	#4,$24(a0)
0001132E 0240 007F                  		andi.w	#$7F,d0
00011332 C0FC 0006                  		mulu.w	#6,d0
00011336 3140 003C                  		move.w	d0,$3C(a0)
0001133A 3140 003E                  		move.w	d0,$3E(a0)
0001133E 588F                       		addq.l	#4,sp
00011340 4E75                       		rts	
00011342                            ; ===========================================================================
00011342                            
00011342                            Obj59_Main2:
00011342 E648                       		lsr.w	#3,d0
00011344 0240 001E                  		andi.w	#$1E,d0
00011348 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
0001134C 115A 0019                  		move.b	(a2)+,$19(a0)
00011350 115A 001A                  		move.b	(a2)+,$1A(a0)
00011354 7000                       		moveq	#0,d0
00011356 1028 0028                  		move.b	$28(a0),d0
0001135A D040                       		add.w	d0,d0
0001135C 0240 001E                  		andi.w	#$1E,d0
00011360 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011364 101A                       		move.b	(a2)+,d0
00011366 E548                       		lsl.w	#2,d0
00011368 3140 003C                  		move.w	d0,$3C(a0)
0001136C 115A 0028                  		move.b	(a2)+,$28(a0)
00011370 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011378 317C 4000 0002             		move.w	#$4000,2(a0)
0001137E 117C 0004 0001             		move.b	#4,1(a0)
00011384 117C 0004 0018             		move.b	#4,$18(a0)
0001138A 3168 0008 0032             		move.w	8(a0),$32(a0)
00011390 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011396                            
00011396                            Obj59_Platform:				; XREF: Obj59_Index
00011396 7200                       		moveq	#0,d1
00011398 1228 0019                  		move.b	$19(a0),d1
0001139C 4EB9 0000 7A88             		jsr	(PlatformObject).l
000113A2 6000 0000                  		bra.w	Obj59_Types
000113A6                            ; ===========================================================================
000113A6                            
000113A6                            Obj59_Action:				; XREF: Obj59_Index
000113A6 7200                       		moveq	#0,d1
000113A8 1228 0019                  		move.b	$19(a0),d1
000113AC 4EB9 0000 7BFC             		jsr	(ExitPlatform).l
000113B2 3F28 0008                  		move.w	8(a0),-(sp)
000113B6 6100 0000                  		bsr.w	Obj59_Types
000113BA 341F                       		move.w	(sp)+,d2
000113BC 4A10                       		tst.b	0(a0)
000113BE 6700                       		beq.s	locret_10BD4
000113C0 4EF9 0000 8166             		jmp	(MvSonicOnPtfm2).l
000113C6                            ; ===========================================================================
000113C6                            
000113C6                            locret_10BD4:
000113C6 4E75                       		rts	
000113C8                            ; ===========================================================================
000113C8                            
000113C8                            Obj59_Types:
000113C8 7000                       		moveq	#0,d0
000113CA 1028 0028                  		move.b	$28(a0),d0
000113CE 0240 000F                  		andi.w	#$F,d0
000113D2 D040                       		add.w	d0,d0
000113D4 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000113D8 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000113DC                            ; ===========================================================================
000113DC 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000113E0 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000113E4 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000113E8 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000113EC 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000113F0                            ; ===========================================================================
000113F0                            
000113F0                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000113F0 4E75                       		rts	
000113F2                            ; ===========================================================================
000113F2                            
000113F2                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000113F2 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000113F8 6600                       		bne.s	locret_10C0C
000113FA 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000113FE                            
000113FE                            locret_10C0C:
000113FE 4E75                       		rts	
00011400                            ; ===========================================================================
00011400                            
00011400                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011400 6100 0000                  		bsr.w	Obj59_Move
00011404 3028 0034                  		move.w	$34(a0),d0
00011408 4440                       		neg.w	d0
0001140A D068 0030                  		add.w	$30(a0),d0
0001140E 3140 000C                  		move.w	d0,$C(a0)
00011412 4E75                       		rts	
00011414                            ; ===========================================================================
00011414                            
00011414                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011414 6100 0000                  		bsr.w	Obj59_Move
00011418 3028 0034                  		move.w	$34(a0),d0
0001141C D068 0030                  		add.w	$30(a0),d0
00011420 3140 000C                  		move.w	d0,$C(a0)
00011424 4E75                       		rts	
00011426                            ; ===========================================================================
00011426                            
00011426                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011426 6100 0000                  		bsr.w	Obj59_Move
0001142A 3028 0034                  		move.w	$34(a0),d0
0001142E E240                       		asr.w	#1,d0
00011430 4440                       		neg.w	d0
00011432 D068 0030                  		add.w	$30(a0),d0
00011436 3140 000C                  		move.w	d0,$C(a0)
0001143A 3028 0034                  		move.w	$34(a0),d0
0001143E D068 0032                  		add.w	$32(a0),d0
00011442 3140 0008                  		move.w	d0,8(a0)
00011446 4E75                       		rts	
00011448                            ; ===========================================================================
00011448                            
00011448                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011448 6100 0000                  		bsr.w	Obj59_Move
0001144C 3028 0034                  		move.w	$34(a0),d0
00011450 E240                       		asr.w	#1,d0
00011452 D068 0030                  		add.w	$30(a0),d0
00011456 3140 000C                  		move.w	d0,$C(a0)
0001145A 3028 0034                  		move.w	$34(a0),d0
0001145E 4440                       		neg.w	d0
00011460 D068 0032                  		add.w	$32(a0),d0
00011464 3140 0008                  		move.w	d0,8(a0)
00011468 4E75                       		rts	
0001146A                            ; ===========================================================================
0001146A                            
0001146A                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001146A 6100 0000                  		bsr.w	Obj59_Move
0001146E 3028 0034                  		move.w	$34(a0),d0
00011472 4440                       		neg.w	d0
00011474 D068 0030                  		add.w	$30(a0),d0
00011478 3140 000C                  		move.w	d0,$C(a0)
0001147C 4A28 0028                  		tst.b	$28(a0)
00011480 6700 0000                  		beq.w	loc_10C94
00011484 4E75                       		rts	
00011486                            ; ===========================================================================
00011486                            
00011486                            loc_10C94:
00011486 0828 0003 0022             		btst	#3,$22(a0)
0001148C 6700                       		beq.s	Obj59_Delete
0001148E 08E9 0001 0022             		bset	#1,$22(a1)
00011494 08A9 0003 0022             		bclr	#3,$22(a1)
0001149A 137C 0002 0024             		move.b	#2,$24(a1)
000114A0                            
000114A0                            Obj59_Delete:
000114A0 6000 C9A2                  		bra.w	DeleteObject
000114A4                            
000114A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000114A4                            
000114A4                            
000114A4                            Obj59_Move:				; XREF: Obj59_Type02; et al
000114A4 3028 0038                  		move.w	$38(a0),d0
000114A8 4A28 003A                  		tst.b	$3A(a0)
000114AC 6600                       		bne.s	loc_10CC8
000114AE 0C40 0800                  		cmpi.w	#$800,d0
000114B2 6400                       		bcc.s	loc_10CD0
000114B4 0640 0010                  		addi.w	#$10,d0
000114B8 6000                       		bra.s	loc_10CD0
000114BA                            ; ===========================================================================
000114BA                            
000114BA                            loc_10CC8:
000114BA 4A40                       		tst.w	d0
000114BC 6700                       		beq.s	loc_10CD0
000114BE 0440 0010                  		subi.w	#$10,d0
000114C2                            
000114C2                            loc_10CD0:
000114C2 3140 0038                  		move.w	d0,$38(a0)
000114C6 48C0                       		ext.l	d0
000114C8 E180                       		asl.l	#8,d0
000114CA D0A8 0034                  		add.l	$34(a0),d0
000114CE 2140 0034                  		move.l	d0,$34(a0)
000114D2 4840                       		swap	d0
000114D4 3428 003C                  		move.w	$3C(a0),d2
000114D8 B042                       		cmp.w	d2,d0
000114DA 6300                       		bls.s	loc_10CF0
000114DC 117C 0001 003A             		move.b	#1,$3A(a0)
000114E2                            
000114E2                            loc_10CF0:
000114E2 D442                       		add.w	d2,d2
000114E4 B042                       		cmp.w	d2,d0
000114E6 6600                       		bne.s	locret_10CFA
000114E8 4228 0028                  		clr.b	$28(a0)
000114EC                            
000114EC                            locret_10CFA:
000114EC 4E75                       		rts	
000114EE                            ; End of function Obj59_Move
000114EE                            
000114EE                            ; ===========================================================================
000114EE                            
000114EE                            Obj59_MakeMulti:			; XREF: Obj59_Index
000114EE 5368 003C                  		subq.w	#1,$3C(a0)
000114F2 6600                       		bne.s	Obj59_ChkDel
000114F4 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000114FA 6100 CD92                  		bsr.w	SingleObjLoad
000114FE 6600                       		bne.s	Obj59_ChkDel
00011500 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011504 3368 0008 0008             		move.w	8(a0),8(a1)
0001150A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011510 137C 000E 0028             		move.b	#$E,$28(a1)
00011516                            
00011516                            Obj59_ChkDel:
00011516 588F                       		addq.l	#4,sp
00011518 3028 0008                  		move.w	8(a0),d0
0001151C 0240 FF80                  		andi.w	#$FF80,d0
00011520 3238 F700                  		move.w	($FFFFF700).w,d1
00011524 0441 0080                  		subi.w	#$80,d1
00011528 0241 FF80                  		andi.w	#$FF80,d1
0001152C 9041                       		sub.w	d1,d0
0001152E 0C40 0280                  		cmpi.w	#$280,d0
00011532 6200 C910                  		bhi.w	DeleteObject
00011536 4E75                       		rts	
00011538                            ; ===========================================================================
00011538                            ; ---------------------------------------------------------------------------
00011538                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011538                            ; ---------------------------------------------------------------------------
00011538                            Map_obj59:
00011538                            	include "_maps\obj59.asm"
00011538                            ; ---------------------------------------------------------------------------
00011538                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011538                            ; ---------------------------------------------------------------------------
00011538 0000                       		dc.w byte_10D4A-Map_obj59
0001153A 03                         byte_10D4A:	dc.b 3
0001153B F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011540 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011545 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001154A                            		even
0001154A                            		even
0001154A                            
0001154A                            ; ===========================================================================
0001154A                            ; ---------------------------------------------------------------------------
0001154A                            ; Object 5A - platforms	moving in circles (SLZ)
0001154A                            ; ---------------------------------------------------------------------------
0001154A                            
0001154A                            Obj5A:					; XREF: Obj_Index
0001154A 7000                       		moveq	#0,d0
0001154C 1028 0024                  		move.b	$24(a0),d0
00011550 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011554 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011558 3028 0032                  		move.w	$32(a0),d0
0001155C 0240 FF80                  		andi.w	#$FF80,d0
00011560 3238 F700                  		move.w	($FFFFF700).w,d1
00011564 0441 0080                  		subi.w	#$80,d1
00011568 0241 FF80                  		andi.w	#$FF80,d1
0001156C 9041                       		sub.w	d1,d0
0001156E 0C40 0280                  		cmpi.w	#$280,d0
00011572 6200 C8D0                  		bhi.w	DeleteObject
00011576 6000 C890                  		bra.w	DisplaySprite
0001157A                            ; ===========================================================================
0001157A 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
0001157C 0000                       		dc.w Obj5A_Platform-Obj5A_Index
0001157E 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011580                            ; ===========================================================================
00011580                            
00011580                            Obj5A_Main:				; XREF: Obj5A_Index
00011580 5428 0024                  		addq.b	#2,$24(a0)
00011584 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0001158C 317C 4000 0002             		move.w	#$4000,2(a0)
00011592 117C 0004 0001             		move.b	#4,1(a0)
00011598 117C 0004 0018             		move.b	#4,$18(a0)
0001159E 117C 0018 0019             		move.b	#$18,$19(a0)
000115A4 3168 0008 0032             		move.w	8(a0),$32(a0)
000115AA 3168 000C 0030             		move.w	$C(a0),$30(a0)
000115B0                            
000115B0                            Obj5A_Platform:				; XREF: Obj5A_Index
000115B0 7200                       		moveq	#0,d1
000115B2 1228 0019                  		move.b	$19(a0),d1
000115B6 4EB9 0000 7A88             		jsr	(PlatformObject).l
000115BC 6000 0000                  		bra.w	Obj5A_Types
000115C0                            ; ===========================================================================
000115C0                            
000115C0                            Obj5A_Action:				; XREF: Obj5A_Index
000115C0 7200                       		moveq	#0,d1
000115C2 1228 0019                  		move.b	$19(a0),d1
000115C6 4EB9 0000 7BFC             		jsr	(ExitPlatform).l
000115CC 3F28 0008                  		move.w	8(a0),-(sp)
000115D0 6100 0000                  		bsr.w	Obj5A_Types
000115D4 341F                       		move.w	(sp)+,d2
000115D6 4EF9 0000 8166             		jmp	(MvSonicOnPtfm2).l
000115DC                            ; ===========================================================================
000115DC                            
000115DC                            Obj5A_Types:
000115DC 7000                       		moveq	#0,d0
000115DE 1028 0028                  		move.b	$28(a0),d0
000115E2 0240 000C                  		andi.w	#$C,d0
000115E6 E248                       		lsr.w	#1,d0
000115E8 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000115EC 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000115F0                            ; ===========================================================================
000115F0 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000115F2 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000115F4                            ; ===========================================================================
000115F4                            
000115F4                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000115F4 1238 FE80                  		move.b	($FFFFFE80).w,d1
000115F8 0401 0050                  		subi.b	#$50,d1
000115FC 4881                       		ext.w	d1
000115FE 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011602 0402 0050                  		subi.b	#$50,d2
00011606 4882                       		ext.w	d2
00011608 0828 0000 0028             		btst	#0,$28(a0)
0001160E 6700                       		beq.s	loc_10E24
00011610 4441                       		neg.w	d1
00011612 4442                       		neg.w	d2
00011614                            
00011614                            loc_10E24:
00011614 0828 0001 0028             		btst	#1,$28(a0)
0001161A 6700                       		beq.s	loc_10E30
0001161C 4441                       		neg.w	d1
0001161E C342                       		exg	d1,d2
00011620                            
00011620                            loc_10E30:
00011620 D268 0032                  		add.w	$32(a0),d1
00011624 3141 0008                  		move.w	d1,8(a0)
00011628 D468 0030                  		add.w	$30(a0),d2
0001162C 3142 000C                  		move.w	d2,$C(a0)
00011630 4E75                       		rts	
00011632                            ; ===========================================================================
00011632                            
00011632                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011632 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011636 0401 0050                  		subi.b	#$50,d1
0001163A 4881                       		ext.w	d1
0001163C 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011640 0402 0050                  		subi.b	#$50,d2
00011644 4882                       		ext.w	d2
00011646 0828 0000 0028             		btst	#0,$28(a0)
0001164C 6700                       		beq.s	loc_10E62
0001164E 4441                       		neg.w	d1
00011650 4442                       		neg.w	d2
00011652                            
00011652                            loc_10E62:
00011652 0828 0001 0028             		btst	#1,$28(a0)
00011658 6700                       		beq.s	loc_10E6E
0001165A 4441                       		neg.w	d1
0001165C C342                       		exg	d1,d2
0001165E                            
0001165E                            loc_10E6E:
0001165E 4441                       		neg.w	d1
00011660 D268 0032                  		add.w	$32(a0),d1
00011664 3141 0008                  		move.w	d1,8(a0)
00011668 D468 0030                  		add.w	$30(a0),d2
0001166C 3142 000C                  		move.w	d2,$C(a0)
00011670 4E75                       		rts	
00011672                            ; ===========================================================================
00011672                            ; ---------------------------------------------------------------------------
00011672                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011672                            ; ---------------------------------------------------------------------------
00011672                            Map_obj5A:
00011672                            	include "_maps\obj5A.asm"
00011672                            ; ---------------------------------------------------------------------------
00011672                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011672                            ; ---------------------------------------------------------------------------
00011672 0000                       		dc.w byte_10E84-Map_obj5A
00011674 02                         byte_10E84:	dc.b 2
00011675 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001167A F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011680 00                         		even
00011680 00                         		even
00011680                            
00011680                            ; ===========================================================================
00011680                            ; ---------------------------------------------------------------------------
00011680                            ; Object 5B - blocks that form a staircase (SLZ)
00011680                            ; ---------------------------------------------------------------------------
00011680                            
00011680                            Obj5B:					; XREF: Obj_Index
00011680 7000                       		moveq	#0,d0
00011682 1028 0024                  		move.b	$24(a0),d0
00011686 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001168A 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001168E 3028 0030                  		move.w	$30(a0),d0
00011692 0240 FF80                  		andi.w	#$FF80,d0
00011696 3238 F700                  		move.w	($FFFFF700).w,d1
0001169A 0441 0080                  		subi.w	#$80,d1
0001169E 0241 FF80                  		andi.w	#$FF80,d1
000116A2 9041                       		sub.w	d1,d0
000116A4 0C40 0280                  		cmpi.w	#$280,d0
000116A8 6200 C79A                  		bhi.w	DeleteObject
000116AC 6000 C75A                  		bra.w	DisplaySprite
000116B0                            ; ===========================================================================
000116B0 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000116B2 0000                       		dc.w Obj5B_Move-Obj5B_Index
000116B4 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000116B6                            ; ===========================================================================
000116B6                            
000116B6                            Obj5B_Main:				; XREF: Obj5B_Index
000116B6 5428 0024                  		addq.b	#2,$24(a0)
000116BA 7638                       		moveq	#$38,d3
000116BC 7801                       		moveq	#1,d4
000116BE 0828 0000 0022             		btst	#0,$22(a0)
000116C4 6700                       		beq.s	loc_10EDA
000116C6 763B                       		moveq	#$3B,d3
000116C8 78FF                       		moveq	#-1,d4
000116CA                            
000116CA                            loc_10EDA:
000116CA 3428 0008                  		move.w	8(a0),d2
000116CE 2248                       		movea.l	a0,a1
000116D0 7203                       		moveq	#3,d1
000116D2 6000                       		bra.s	Obj5B_MakeBlocks
000116D4                            ; ===========================================================================
000116D4                            
000116D4                            Obj5B_Loop:
000116D4 6100 CBCE                  		bsr.w	SingleObjLoad2
000116D8 6600 0000                  		bne.w	Obj5B_Move
000116DC 137C 0004 0024             		move.b	#4,$24(a1)
000116E2                            
000116E2                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000116E2 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000116E6 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000116EE 337C 4000 0002             		move.w	#$4000,2(a1)
000116F4 137C 0004 0001             		move.b	#4,1(a1)
000116FA 137C 0003 0018             		move.b	#3,$18(a1)
00011700 137C 0010 0019             		move.b	#$10,$19(a1)
00011706 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001170C 3342 0008                  		move.w	d2,8(a1)
00011710 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011716 3368 0008 0030             		move.w	8(a0),$30(a1)
0001171C 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011722 0642 0020                  		addi.w	#$20,d2
00011726 1343 0037                  		move.b	d3,$37(a1)
0001172A 2348 003C                  		move.l	a0,$3C(a1)
0001172E D604                       		add.b	d4,d3
00011730 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011734                            
00011734                            Obj5B_Move:				; XREF: Obj5B_Index
00011734 7000                       		moveq	#0,d0
00011736 1028 0028                  		move.b	$28(a0),d0
0001173A 0240 0007                  		andi.w	#7,d0
0001173E D040                       		add.w	d0,d0
00011740 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011744 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011748                            
00011748                            Obj5B_Solid:				; XREF: Obj5B_Index
00011748 2468 003C                  		movea.l	$3C(a0),a2
0001174C 7000                       		moveq	#0,d0
0001174E 1028 0037                  		move.b	$37(a0),d0
00011752 1032 0000                  		move.b	(a2,d0.w),d0
00011756 D068 0032                  		add.w	$32(a0),d0
0001175A 3140 000C                  		move.w	d0,$C(a0)
0001175E 7200                       		moveq	#0,d1
00011760 1228 0019                  		move.b	$19(a0),d1
00011764 0641 000B                  		addi.w	#$B,d1
00011768 343C 0010                  		move.w	#$10,d2
0001176C 363C 0011                  		move.w	#$11,d3
00011770 3828 0008                  		move.w	8(a0),d4
00011774 6100 EA62                  		bsr.w	SolidObject
00011778 4A04                       		tst.b	d4
0001177A 6A00                       		bpl.s	loc_10F92
0001177C 1544 0036                  		move.b	d4,$36(a2)
00011780                            
00011780                            loc_10F92:
00011780 0828 0003 0022             		btst	#3,$22(a0)
00011786 6700                       		beq.s	locret_10FA0
00011788 157C 0001 0036             		move.b	#1,$36(a2)
0001178E                            
0001178E                            locret_10FA0:
0001178E 4E75                       		rts	
00011790                            ; ===========================================================================
00011790 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011792 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011794 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011796 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011798                            ; ===========================================================================
00011798                            
00011798                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011798 4A68 0034                  		tst.w	$34(a0)
0001179C 6600                       		bne.s	loc_10FC0
0001179E 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000117A4 6600                       		bne.s	locret_10FBE
000117A6 317C 001E 0034             		move.w	#$1E,$34(a0)
000117AC                            
000117AC                            locret_10FBE:
000117AC 4E75                       		rts	
000117AE                            ; ===========================================================================
000117AE                            
000117AE                            loc_10FC0:
000117AE 5368 0034                  		subq.w	#1,$34(a0)
000117B2 66F8                       		bne.s	locret_10FBE
000117B4 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000117B8 4E75                       		rts	
000117BA                            ; ===========================================================================
000117BA                            
000117BA                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000117BA 4A68 0034                  		tst.w	$34(a0)
000117BE 6600                       		bne.s	loc_10FE0
000117C0 4A28 0036                  		tst.b	$36(a0)
000117C4 6A00                       		bpl.s	locret_10FDE
000117C6 317C 003C 0034             		move.w	#$3C,$34(a0)
000117CC                            
000117CC                            locret_10FDE:
000117CC 4E75                       		rts	
000117CE                            ; ===========================================================================
000117CE                            
000117CE                            loc_10FE0:
000117CE 5368 0034                  		subq.w	#1,$34(a0)
000117D2 6600                       		bne.s	loc_10FEC
000117D4 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000117D8 4E75                       		rts	
000117DA                            ; ===========================================================================
000117DA                            
000117DA                            loc_10FEC:
000117DA 43E8 0038                  		lea	$38(a0),a1
000117DE 3028 0034                  		move.w	$34(a0),d0
000117E2 E408                       		lsr.b	#2,d0
000117E4 0200 0001                  		andi.b	#1,d0
000117E8 12C0                       		move.b	d0,(a1)+
000117EA 0A00 0001                  		eori.b	#1,d0
000117EE 12C0                       		move.b	d0,(a1)+
000117F0 0A00 0001                  		eori.b	#1,d0
000117F4 12C0                       		move.b	d0,(a1)+
000117F6 0A00 0001                  		eori.b	#1,d0
000117FA 12C0                       		move.b	d0,(a1)+
000117FC 4E75                       		rts	
000117FE                            ; ===========================================================================
000117FE                            
000117FE                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000117FE 43E8 0038                  		lea	$38(a0),a1
00011802 0C11 0080                  		cmpi.b	#$80,(a1)
00011806 6700                       		beq.s	locret_11038
00011808 5211                       		addq.b	#1,(a1)
0001180A 7200                       		moveq	#0,d1
0001180C 1219                       		move.b	(a1)+,d1
0001180E 4841                       		swap	d1
00011810 E289                       		lsr.l	#1,d1
00011812 2401                       		move.l	d1,d2
00011814 E289                       		lsr.l	#1,d1
00011816 2601                       		move.l	d1,d3
00011818 D682                       		add.l	d2,d3
0001181A 4841                       		swap	d1
0001181C 4842                       		swap	d2
0001181E 4843                       		swap	d3
00011820 12C3                       		move.b	d3,(a1)+
00011822 12C2                       		move.b	d2,(a1)+
00011824 12C1                       		move.b	d1,(a1)+
00011826                            
00011826                            locret_11038:
00011826 4E75                       		rts	
00011828 4E75                       		rts	
0001182A                            ; ===========================================================================
0001182A                            ; ---------------------------------------------------------------------------
0001182A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001182A                            ; ---------------------------------------------------------------------------
0001182A                            Map_obj5B:
0001182A                            	include "_maps\obj5B.asm"
0001182A                            ; ---------------------------------------------------------------------------
0001182A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001182A                            ; ---------------------------------------------------------------------------
0001182A 0000                       		dc.w byte_1103E-Map_obj5B
0001182C 01                         byte_1103E:	dc.b 1
0001182D F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011832                            		even
00011832                            		even
00011832                            
00011832                            ; ===========================================================================
00011832                            ; ---------------------------------------------------------------------------
00011832                            ; Object 5C - metal girders in foreground (SLZ)
00011832                            ; ---------------------------------------------------------------------------
00011832                            
00011832                            Obj5C:					; XREF: Obj_Index
00011832 7000                       		moveq	#0,d0
00011834 1028 0024                  		move.b	$24(a0),d0
00011838 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
0001183C 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011840                            ; ===========================================================================
00011840 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011842 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011844                            ; ===========================================================================
00011844                            
00011844                            Obj5C_Main:				; XREF: Obj5C_Index
00011844 5428 0024                  		addq.b	#2,$24(a0)
00011848 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011850 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011856 117C 0010 0019             		move.b	#$10,$19(a0)
0001185C                            
0001185C                            Obj5C_Display:				; XREF: Obj5C_Index
0001185C 2238 F700                  		move.l	($FFFFF700).w,d1
00011860 D281                       		add.l	d1,d1
00011862 4841                       		swap	d1
00011864 4441                       		neg.w	d1
00011866 3141 0008                  		move.w	d1,8(a0)
0001186A 2238 F704                  		move.l	($FFFFF704).w,d1
0001186E D281                       		add.l	d1,d1
00011870 4841                       		swap	d1
00011872 0241 003F                  		andi.w	#$3F,d1
00011876 4441                       		neg.w	d1
00011878 0641 0100                  		addi.w	#$100,d1
0001187C 3141 000A                  		move.w	d1,$A(a0)
00011880 6000 C586                  		bra.w	DisplaySprite
00011884                            ; ===========================================================================
00011884                            ; ---------------------------------------------------------------------------
00011884                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011884                            ; ---------------------------------------------------------------------------
00011884                            Map_obj5C:
00011884                            	include "_maps\obj5C.asm"
00011884                            ; ---------------------------------------------------------------------------
00011884                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011884                            ; ---------------------------------------------------------------------------
00011884 0000                       		dc.w byte_11098-Map_obj5C
00011886 09                         byte_11098:	dc.b 9
00011887 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001188C A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011891 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011896 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001189B 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000118A0 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000118A5 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000118AA 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000118AF 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000118B4                            		even
000118B4                            		even
000118B4                            
000118B4                            ; ===========================================================================
000118B4                            ; ---------------------------------------------------------------------------
000118B4                            ; Object 1B - water surface (LZ)
000118B4                            ; ---------------------------------------------------------------------------
000118B4                            
000118B4                            Obj1B:					; XREF: Obj_Index
000118B4 7000                       		moveq	#0,d0
000118B6 1028 0024                  		move.b	$24(a0),d0
000118BA 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
000118BE 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
000118C2                            ; ===========================================================================
000118C2 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
000118C4 0000                       		dc.w Obj1B_Action-Obj1B_Index
000118C6                            ; ===========================================================================
000118C6                            
000118C6                            Obj1B_Main:				; XREF: Obj1B_Index
000118C6 5428 0024                  		addq.b	#2,$24(a0)
000118CA 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
000118D2 317C C300 0002             		move.w	#$C300,2(a0)
000118D8 117C 0004 0001             		move.b	#4,1(a0)
000118DE 117C 0080 0019             		move.b	#$80,$19(a0)
000118E4 3168 0008 0030             		move.w	8(a0),$30(a0)
000118EA                            
000118EA                            Obj1B_Action:				; XREF: Obj1B_Index
000118EA 3238 F700                  		move.w	($FFFFF700).w,d1
000118EE 0241 FFE0                  		andi.w	#$FFE0,d1
000118F2 D268 0030                  		add.w	$30(a0),d1
000118F6 0838 0000 FE05             		btst	#0,($FFFFFE05).w
000118FC 6700                       		beq.s	loc_11114
000118FE 0641 0020                  		addi.w	#$20,d1
00011902                            
00011902                            loc_11114:
00011902 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011906 3238 F646                  		move.w	($FFFFF646).w,d1
0001190A 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
0001190E 4A28 0032                  		tst.b	$32(a0)
00011912 6600                       		bne.s	Obj1B_Animate
00011914 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0001191A 6700                       		beq.s	loc_1114A	; if not, branch
0001191C 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011920 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011926 6000                       		bra.s	Obj1B_Display
00011928                            ; ===========================================================================
00011928                            
00011928                            Obj1B_Animate:				; XREF: loc_11114
00011928 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001192C 6600                       		bne.s	Obj1B_Display	; if yes, branch
0001192E 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011934 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011938                            
00011938                            loc_1114A:				; XREF: loc_11114
00011938 5328 001E                  		subq.b	#1,$1E(a0)
0001193C 6A00                       		bpl.s	Obj1B_Display
0001193E 117C 0007 001E             		move.b	#7,$1E(a0)
00011944 5228 001A                  		addq.b	#1,$1A(a0)
00011948 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
0001194E 6500                       		bcs.s	Obj1B_Display
00011950 117C 0000 001A             		move.b	#0,$1A(a0)
00011956                            
00011956                            Obj1B_Display:
00011956 6000 C4B0                  		bra.w	DisplaySprite
0001195A                            ; ===========================================================================
0001195A                            ; ---------------------------------------------------------------------------
0001195A                            ; Sprite mappings - water surface (LZ)
0001195A                            ; ---------------------------------------------------------------------------
0001195A                            Map_obj1B:
0001195A                            	include "_maps\obj1B.asm"
0001195A                            ; ---------------------------------------------------------------------------
0001195A                            ; Sprite mappings - water surface (LZ)
0001195A                            ; ---------------------------------------------------------------------------
0001195A 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
0001195E 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011962 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011966 03                         byte_11178:	dc.b 3
00011967 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001196C FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011971 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011976 03                         byte_11188:	dc.b 3
00011977 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001197C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011981 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011986 03                         byte_11198:	dc.b 3
00011987 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001198C FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011991 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011996 06                         byte_111A8:	dc.b 6
00011997 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001199C FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
000119A1 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000119A6 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
000119AB FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000119B0 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
000119B5 06                         byte_111C7:	dc.b 6
000119B6 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000119BB FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
000119C0 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000119C5 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
000119CA FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000119CF FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
000119D4 06                         byte_111E6:	dc.b 6
000119D5 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000119DA FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
000119DF FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000119E4 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
000119E9 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000119EE FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
000119F4 00                         		even
000119F4 00                         		even
000119F4                            
000119F4                            ; ===========================================================================
000119F4                            ; ---------------------------------------------------------------------------
000119F4                            ; Object 0B - pole that	breaks (LZ)
000119F4                            ; ---------------------------------------------------------------------------
000119F4                            
000119F4                            Obj0B:					; XREF: Obj_Index
000119F4 7000                       		moveq	#0,d0
000119F6 1028 0024                  		move.b	$24(a0),d0
000119FA 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
000119FE 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011A02                            ; ===========================================================================
00011A02 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011A04 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011A06 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011A08                            ; ===========================================================================
00011A08                            
00011A08                            Obj0B_Main:				; XREF: Obj0B_Index
00011A08 5428 0024                  		addq.b	#2,$24(a0)
00011A0C 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011A14 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011A1A 117C 0004 0001             		move.b	#4,1(a0)
00011A20 117C 0008 0019             		move.b	#8,$19(a0)
00011A26 117C 0004 0018             		move.b	#4,$18(a0)
00011A2C 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011A32 7000                       		moveq	#0,d0
00011A34 1028 0028                  		move.b	$28(a0),d0	; get object type
00011A38 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011A3C 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011A40                            
00011A40                            Obj0B_Action:				; XREF: Obj0B_Index
00011A40 4A28 0032                  		tst.b	$32(a0)
00011A44 6700                       		beq.s	Obj0B_Grab
00011A46 4A68 0030                  		tst.w	$30(a0)
00011A4A 6700                       		beq.s	Obj0B_MoveUp
00011A4C 5368 0030                  		subq.w	#1,$30(a0)
00011A50 6600                       		bne.s	Obj0B_MoveUp
00011A52 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011A58 6000                       		bra.s	Obj0B_Release
00011A5A                            ; ===========================================================================
00011A5A                            
00011A5A                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011A5A 43F8 D000                  		lea	($FFFFD000).w,a1
00011A5E 3028 000C                  		move.w	$C(a0),d0
00011A62 0440 0018                  		subi.w	#$18,d0
00011A66 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011A6C 6700                       		beq.s	Obj0B_MoveDown
00011A6E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011A72 B069 000C                  		cmp.w	$C(a1),d0
00011A76 6500                       		bcs.s	Obj0B_MoveDown
00011A78 3340 000C                  		move.w	d0,$C(a1)
00011A7C                            
00011A7C                            Obj0B_MoveDown:
00011A7C 0640 0024                  		addi.w	#$24,d0
00011A80 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011A86 6700                       		beq.s	Obj0B_LetGo
00011A88 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011A8C B069 000C                  		cmp.w	$C(a1),d0
00011A90 6400                       		bcc.s	Obj0B_LetGo
00011A92 3340 000C                  		move.w	d0,$C(a1)
00011A96                            
00011A96                            Obj0B_LetGo:
00011A96 1038 F603                  		move.b	($FFFFF603).w,d0
00011A9A 0240 0070                  		andi.w	#$70,d0
00011A9E 6700                       		beq.s	Obj0B_Display
00011AA0                            
00011AA0                            Obj0B_Release:				; XREF: Obj0B_Action
00011AA0 4228 0020                  		clr.b	$20(a0)
00011AA4 5428 0024                  		addq.b	#2,$24(a0)
00011AA8 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011AAC 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011AB0 4228 0032                  		clr.b	$32(a0)
00011AB4 6000                       		bra.s	Obj0B_Display
00011AB6                            ; ===========================================================================
00011AB6                            
00011AB6                            Obj0B_Grab:				; XREF: Obj0B_Action
00011AB6 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011ABA 6700                       		beq.s	Obj0B_Display	; if not, branch
00011ABC 43F8 D000                  		lea	($FFFFD000).w,a1
00011AC0 3028 0008                  		move.w	8(a0),d0
00011AC4 0640 0014                  		addi.w	#$14,d0
00011AC8 B069 0008                  		cmp.w	8(a1),d0
00011ACC 6400                       		bcc.s	Obj0B_Display
00011ACE 4228 0021                  		clr.b	$21(a0)
00011AD2 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011AD8 6400                       		bcc.s	Obj0B_Display
00011ADA 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011ADE 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011AE2 3028 0008                  		move.w	8(a0),d0
00011AE6 0640 0014                  		addi.w	#$14,d0
00011AEA 3340 0008                  		move.w	d0,8(a1)
00011AEE 08A9 0000 0022             		bclr	#0,$22(a1)
00011AF4 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011AFA 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011B00 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011B06 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011B0C                            
00011B0C                            Obj0B_Display:				; XREF: Obj0B_Index
00011B0C 6000 E3A2                  		bra.w	MarkObjGone
00011B10                            ; ===========================================================================
00011B10                            ; ---------------------------------------------------------------------------
00011B10                            ; Sprite mappings - pole that breaks (LZ)
00011B10                            ; ---------------------------------------------------------------------------
00011B10                            Map_obj0B:
00011B10                            	include "_maps\obj0B.asm"
00011B10                            ; ---------------------------------------------------------------------------
00011B10                            ; Sprite mappings - pole that breaks (LZ)
00011B10                            ; ---------------------------------------------------------------------------
00011B10 0000                       		dc.w byte_11326-Map_obj0B
00011B12 0000                       		dc.w byte_11331-Map_obj0B
00011B14 02                         byte_11326:	dc.b 2			; normal pole
00011B15 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011B1A 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011B1F 04                         byte_11331:	dc.b 4			; broken pole
00011B20 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011B25 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011B2A 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011B2F 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011B34                            		even
00011B34                            		even
00011B34                            
00011B34                            ; ===========================================================================
00011B34                            ; ---------------------------------------------------------------------------
00011B34                            ; Object 0C - flapping door (LZ)
00011B34                            ; ---------------------------------------------------------------------------
00011B34                            
00011B34                            Obj0C:					; XREF: Obj_Index
00011B34 7000                       		moveq	#0,d0
00011B36 1028 0024                  		move.b	$24(a0),d0
00011B3A 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011B3E 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011B42                            ; ===========================================================================
00011B42 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011B44 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011B46                            ; ===========================================================================
00011B46                            
00011B46                            Obj0C_Main:				; XREF: Obj0C_Index
00011B46 5428 0024                  		addq.b	#2,$24(a0)
00011B4A 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011B52 317C 4328 0002             		move.w	#$4328,2(a0)
00011B58 0028 0004 0001             		ori.b	#4,1(a0)
00011B5E 117C 0028 0019             		move.b	#$28,$19(a0)
00011B64 7000                       		moveq	#0,d0
00011B66 1028 0028                  		move.b	$28(a0),d0	; get object type
00011B6A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011B6E 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011B72                            
00011B72                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011B72 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011B76 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011B78 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011B7E 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011B84 4A28 0001                  		tst.b	1(a0)
00011B88 6A00                       		bpl.s	Obj0C_Solid
00011B8A 303C 00BB                  		move.w	#$BB,d0
00011B8E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
00011B94                            
00011B94                            Obj0C_Solid:
00011B94 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011B9A 6100 932C                  		bsr.w	AnimateSprite
00011B9E 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011BA2 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011BA6 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011BA8 3038 D008                  		move.w	($FFFFD008).w,d0
00011BAC B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011BB0 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011BB2 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011BB8 323C 0013                  		move.w	#$13,d1
00011BBC 343C 0020                  		move.w	#$20,d2
00011BC0 3602                       		move.w	d2,d3
00011BC2 5243                       		addq.w	#1,d3
00011BC4 3828 0008                  		move.w	8(a0),d4
00011BC8 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011BCC                            
00011BCC                            Obj0C_Display:
00011BCC 6000 E2E2                  		bra.w	MarkObjGone
00011BD0                            ; ===========================================================================
00011BD0                            Ani_obj0C:
00011BD0                            	include "_anim\obj0C.asm"
00011BD0                            ; ---------------------------------------------------------------------------
00011BD0                            ; Animation script - flapping door (LZ)
00011BD0                            ; ---------------------------------------------------------------------------
00011BD0 0000                       		dc.w byte_113E6-Ani_obj0C
00011BD2 0000                       		dc.w byte_113EC-Ani_obj0C
00011BD4 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011BDA 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011BE0                            		even
00011BE0                            		even
00011BE0                            
00011BE0                            ; ---------------------------------------------------------------------------
00011BE0                            ; Sprite mappings - flapping door (LZ)
00011BE0                            ; ---------------------------------------------------------------------------
00011BE0                            Map_obj0C:
00011BE0                            	include "_maps\obj0C.asm"
00011BE0                            ; ---------------------------------------------------------------------------
00011BE0                            ; Sprite mappings - flapping door (LZ)
00011BE0                            ; ---------------------------------------------------------------------------
00011BE0 0000                       		dc.w byte_113F8-Map_obj0C
00011BE2 0000                       		dc.w byte_11403-Map_obj0C
00011BE4 0000                       		dc.w byte_1140E-Map_obj0C
00011BE6 02                         byte_113F8:	dc.b 2
00011BE7 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011BEC 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011BF1 02                         byte_11403:	dc.b 2
00011BF2 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011BF7 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011BFC 02                         byte_1140E:	dc.b 2
00011BFD D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011C02 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011C08 00                         		even
00011C08 00                         		even
00011C08                            
00011C08                            ; ===========================================================================
00011C08                            ; ---------------------------------------------------------------------------
00011C08                            ; Object 71 - invisible	solid blocks
00011C08                            ; ---------------------------------------------------------------------------
00011C08                            
00011C08                            Obj71:					; XREF: Obj_Index
00011C08 7000                       		moveq	#0,d0
00011C0A 1028 0024                  		move.b	$24(a0),d0
00011C0E 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011C12 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011C16                            ; ===========================================================================
00011C16 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011C18 0000                       		dc.w Obj71_Solid-Obj71_Index
00011C1A                            ; ===========================================================================
00011C1A                            
00011C1A                            Obj71_Main:				; XREF: Obj71_Index
00011C1A 5428 0024                  		addq.b	#2,$24(a0)
00011C1E 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011C26 317C 8680 0002             		move.w	#$8680,2(a0)
00011C2C 0028 0004 0001             		ori.b	#4,1(a0)
00011C32 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C36 1200                       		move.b	d0,d1
00011C38 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011C3C 0640 0010                  		addi.w	#$10,d0
00011C40 E248                       		lsr.w	#1,d0
00011C42 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011C46 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011C4A 5241                       		addq.w	#1,d1
00011C4C E749                       		lsl.w	#3,d1
00011C4E 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011C52                            
00011C52                            Obj71_Solid:				; XREF: Obj71_Index
00011C52 6100 C42E                  		bsr.w	ChkObjOnScreen
00011C56 6600                       		bne.s	Obj71_ChkDel
00011C58 7200                       		moveq	#0,d1
00011C5A 1228 0019                  		move.b	$19(a0),d1
00011C5E 0641 000B                  		addi.w	#$B,d1
00011C62 7400                       		moveq	#0,d2
00011C64 1428 0016                  		move.b	$16(a0),d2
00011C68 3602                       		move.w	d2,d3
00011C6A 5243                       		addq.w	#1,d3
00011C6C 3828 0008                  		move.w	8(a0),d4
00011C70 6100 E5A8                  		bsr.w	SolidObject71
00011C74                            
00011C74                            Obj71_ChkDel:
00011C74 3028 0008                  		move.w	8(a0),d0
00011C78 0240 FF80                  		andi.w	#$FF80,d0
00011C7C 3238 F700                  		move.w	($FFFFF700).w,d1
00011C80 0441 0080                  		subi.w	#$80,d1
00011C84 0241 FF80                  		andi.w	#$FF80,d1
00011C88 9041                       		sub.w	d1,d0
00011C8A 0C40 0280                  		cmpi.w	#$280,d0
00011C8E 6200                       		bhi.s	Obj71_Delete
00011C90 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011C94 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011C96 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011C9A                            ; ===========================================================================
00011C9A                            
00011C9A                            Obj71_NoDisplay:
00011C9A 4E75                       		rts	
00011C9C                            ; ===========================================================================
00011C9C                            
00011C9C                            Obj71_Delete:
00011C9C 4EFA C1A6                  		jmp	DeleteObject
00011CA0                            ; ===========================================================================
00011CA0                            ; ---------------------------------------------------------------------------
00011CA0                            ; Sprite mappings - invisible solid blocks
00011CA0                            ; ---------------------------------------------------------------------------
00011CA0                            Map_obj71:
00011CA0                            	include "_maps\obj71.asm"
00011CA0                            ; ---------------------------------------------------------------------------
00011CA0                            ; Sprite mappings - invisible solid blocks
00011CA0                            ; ---------------------------------------------------------------------------
00011CA0 0000                       		dc.w byte_114BC-Map_obj71
00011CA2 0000                       		dc.w byte_114D1-Map_obj71
00011CA4 0000                       		dc.w byte_114E6-Map_obj71
00011CA6 04                         byte_114BC:	dc.b 4
00011CA7 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011CAC F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011CB1 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011CB6 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011CBB 04                         byte_114D1:	dc.b 4
00011CBC E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011CC1 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011CC6 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011CCB 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011CD0 04                         byte_114E6:	dc.b 4
00011CD1 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011CD6 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011CDB 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011CE0 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011CE6 00                         		even
00011CE6 00                         		even
00011CE6                            
00011CE6                            ; ===========================================================================
00011CE6                            ; ---------------------------------------------------------------------------
00011CE6                            ; Object 5D - fans (SLZ)
00011CE6                            ; ---------------------------------------------------------------------------
00011CE6                            
00011CE6                            Obj5D:					; XREF: Obj_Index
00011CE6 7000                       		moveq	#0,d0
00011CE8 1028 0024                  		move.b	$24(a0),d0
00011CEC 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011CF0 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011CF4                            ; ===========================================================================
00011CF4 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011CF6 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011CF8                            ; ===========================================================================
00011CF8                            
00011CF8                            Obj5D_Main:				; XREF: Obj5D_Index
00011CF8 5428 0024                  		addq.b	#2,$24(a0)
00011CFC 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011D04 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011D0A 0028 0004 0001             		ori.b	#4,1(a0)
00011D10 117C 0010 0019             		move.b	#$10,$19(a0)
00011D16 117C 0004 0018             		move.b	#4,$18(a0)
00011D1C                            
00011D1C                            Obj5D_Delay:				; XREF: Obj5D_Index
00011D1C 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011D22 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011D24 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011D28 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011D2A 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011D30 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011D36 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011D38 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011D3E                            
00011D3E                            Obj5D_Blow:
00011D3E 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011D42 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011D46 43F8 D000                  		lea	($FFFFD000).w,a1
00011D4A 3029 0008                  		move.w	8(a1),d0
00011D4E 9068 0008                  		sub.w	8(a0),d0
00011D52 0828 0000 0022             		btst	#0,$22(a0)
00011D58 6600                       		bne.s	Obj5D_ChkSonic
00011D5A 4440                       		neg.w	d0
00011D5C                            
00011D5C                            Obj5D_ChkSonic:
00011D5C 0640 0050                  		addi.w	#$50,d0
00011D60 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011D64 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011D66 3229 000C                  		move.w	$C(a1),d1
00011D6A 0641 0060                  		addi.w	#$60,d1
00011D6E 9268 000C                  		sub.w	$C(a0),d1
00011D72 6500                       		bcs.s	Obj5D_Animate
00011D74 0C41 0070                  		cmpi.w	#$70,d1
00011D78 6400                       		bcc.s	Obj5D_Animate
00011D7A 0440 0050                  		subi.w	#$50,d0
00011D7E 6400                       		bcc.s	loc_1159A
00011D80 4640                       		not.w	d0
00011D82 D040                       		add.w	d0,d0
00011D84                            
00011D84                            loc_1159A:
00011D84 0640 0060                  		addi.w	#$60,d0
00011D88 0828 0000 0022             		btst	#0,$22(a0)
00011D8E 6600                       		bne.s	loc_115A8
00011D90 4440                       		neg.w	d0
00011D92                            
00011D92                            loc_115A8:
00011D92 4400                       		neg.b	d0
00011D94 E840                       		asr.w	#4,d0
00011D96 0828 0000 0028             		btst	#0,$28(a0)
00011D9C 6700                       		beq.s	Obj5D_MoveSonic
00011D9E 4440                       		neg.w	d0
00011DA0                            
00011DA0                            Obj5D_MoveSonic:
00011DA0 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011DA4                            
00011DA4                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011DA4 5328 001E                  		subq.b	#1,$1E(a0)
00011DA8 6A00                       		bpl.s	Obj5D_ChkDel
00011DAA 117C 0000 001E             		move.b	#0,$1E(a0)
00011DB0 5228 001B                  		addq.b	#1,$1B(a0)
00011DB4 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011DBA 6500                       		bcs.s	loc_115D8
00011DBC 117C 0000 001B             		move.b	#0,$1B(a0)
00011DC2                            
00011DC2                            loc_115D8:
00011DC2 7000                       		moveq	#0,d0
00011DC4 0828 0000 0028             		btst	#0,$28(a0)
00011DCA 6700                       		beq.s	loc_115E4
00011DCC 7002                       		moveq	#2,d0
00011DCE                            
00011DCE                            loc_115E4:
00011DCE D028 001B                  		add.b	$1B(a0),d0
00011DD2 1140 001A                  		move.b	d0,$1A(a0)
00011DD6                            
00011DD6                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011DD6 6100 C030                  		bsr.w	DisplaySprite
00011DDA 3028 0008                  		move.w	8(a0),d0
00011DDE 0240 FF80                  		andi.w	#$FF80,d0
00011DE2 3238 F700                  		move.w	($FFFFF700).w,d1
00011DE6 0441 0080                  		subi.w	#$80,d1
00011DEA 0241 FF80                  		andi.w	#$FF80,d1
00011DEE 9041                       		sub.w	d1,d0
00011DF0 0C40 0280                  		cmpi.w	#$280,d0
00011DF4 6200 C04E                  		bhi.w	DeleteObject
00011DF8 4E75                       		rts	
00011DFA                            ; ===========================================================================
00011DFA                            ; ---------------------------------------------------------------------------
00011DFA                            ; Sprite mappings - fans (SLZ)
00011DFA                            ; ---------------------------------------------------------------------------
00011DFA                            Map_obj5D:
00011DFA                            	include "_maps\obj5D.asm"
00011DFA                            ; ---------------------------------------------------------------------------
00011DFA                            ; Sprite mappings - fans (SLZ)
00011DFA                            ; ---------------------------------------------------------------------------
00011DFA 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011DFE 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011E02 0000                       		dc.w byte_1161A-Map_obj5D
00011E04 02                         byte_1161A:	dc.b 2
00011E05 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011E0A 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011E0F 02                         byte_11625:	dc.b 2
00011E10 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011E15 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011E1A 02                         byte_11630:	dc.b 2
00011E1B F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011E20 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011E26 00                         		even
00011E26 00                         		even
00011E26                            
00011E26                            ; ===========================================================================
00011E26                            ; ---------------------------------------------------------------------------
00011E26                            ; Object 5E - seesaws (SLZ)
00011E26                            ; ---------------------------------------------------------------------------
00011E26                            
00011E26                            Obj5E:					; XREF: Obj_Index
00011E26 7000                       		moveq	#0,d0
00011E28 1028 0024                  		move.b	$24(a0),d0
00011E2C 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011E30 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011E34 3028 0030                  		move.w	$30(a0),d0
00011E38 0240 FF80                  		andi.w	#$FF80,d0
00011E3C 3238 F700                  		move.w	($FFFFF700).w,d1
00011E40 0441 0080                  		subi.w	#$80,d1
00011E44 0241 FF80                  		andi.w	#$FF80,d1
00011E48 9041                       		sub.w	d1,d0
00011E4A 6B00 BFF8                  		bmi.w	DeleteObject
00011E4E 0C40 0280                  		cmpi.w	#$280,d0
00011E52 6200 BFF0                  		bhi.w	DeleteObject
00011E56 6000 BFB0                  		bra.w	DisplaySprite
00011E5A                            ; ===========================================================================
00011E5A 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011E5C 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011E5E 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011E60 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011E62 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011E64 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011E66                            ; ===========================================================================
00011E66                            
00011E66                            Obj5E_Main:				; XREF: Obj5E_Index
00011E66 5428 0024                  		addq.b	#2,$24(a0)
00011E6A 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011E72 317C 0374 0002             		move.w	#$374,2(a0)
00011E78 0028 0004 0001             		ori.b	#4,1(a0)
00011E7E 117C 0004 0018             		move.b	#4,$18(a0)
00011E84 117C 0030 0019             		move.b	#$30,$19(a0)
00011E8A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011E90 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011E94 6600                       		bne.s	loc_116D2	; if not, branch
00011E96 6100 C40C                  		bsr.w	SingleObjLoad2
00011E9A 6600                       		bne.s	loc_116D2
00011E9C 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011EA0 5C29 0024                  		addq.b	#6,$24(a1)
00011EA4 3368 0008 0008             		move.w	8(a0),8(a1)
00011EAA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011EB0 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011EB6 2348 003C                  		move.l	a0,$3C(a1)
00011EBA                            
00011EBA                            loc_116D2:
00011EBA 0828 0000 0022             		btst	#0,$22(a0)
00011EC0 6700                       		beq.s	loc_116E0
00011EC2 117C 0002 001A             		move.b	#2,$1A(a0)
00011EC8                            
00011EC8                            loc_116E0:
00011EC8 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011ECE                            
00011ECE                            Obj5E_Slope:				; XREF: Obj5E_Index
00011ECE 1228 003A                  		move.b	$3A(a0),d1
00011ED2 6100 0000                  		bsr.w	loc_11766
00011ED6 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011EDC 0828 0000 001A             		btst	#0,$1A(a0)
00011EE2 6700                       		beq.s	loc_11702
00011EE4 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011EEA                            
00011EEA                            loc_11702:
00011EEA 43F8 D000                  		lea	($FFFFD000).w,a1
00011EEE 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011EF4 323C 0030                  		move.w	#$30,d1
00011EF8 4EB9 0000 7B5C             		jsr	(SlopeObject).l
00011EFE 4E75                       		rts	
00011F00                            ; ===========================================================================
00011F00                            
00011F00                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011F00 6100 0000                  		bsr.w	loc_1174A
00011F04 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011F0A 0828 0000 001A             		btst	#0,$1A(a0)
00011F10 6700                       		beq.s	loc_11730
00011F12 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011F18                            
00011F18                            loc_11730:
00011F18 323C 0030                  		move.w	#$30,d1
00011F1C 4EB9 0000 7BFC             		jsr	(ExitPlatform).l
00011F22 323C 0030                  		move.w	#$30,d1
00011F26 3428 0008                  		move.w	8(a0),d2
00011F2A 4EB9 0000 8BEC             		jsr	SlopeObject2
00011F30 4E75                       		rts	
00011F32                            ; ===========================================================================
00011F32                            
00011F32                            loc_1174A:				; XREF: Obj5E_Slope2
00011F32 7202                       		moveq	#2,d1
00011F34 43F8 D000                  		lea	($FFFFD000).w,a1
00011F38 3028 0008                  		move.w	8(a0),d0
00011F3C 9069 0008                  		sub.w	8(a1),d0
00011F40 6400                       		bcc.s	loc_1175E
00011F42 4440                       		neg.w	d0
00011F44 7200                       		moveq	#0,d1
00011F46                            
00011F46                            loc_1175E:
00011F46 0C40 0008                  		cmpi.w	#8,d0
00011F4A 6400                       		bcc.s	loc_11766
00011F4C 7201                       		moveq	#1,d1
00011F4E                            
00011F4E                            loc_11766:
00011F4E 1028 001A                  		move.b	$1A(a0),d0
00011F52 B001                       		cmp.b	d1,d0
00011F54 6700                       		beq.s	locret_11790
00011F56 6400                       		bcc.s	loc_11772
00011F58 5400                       		addq.b	#2,d0
00011F5A                            
00011F5A                            loc_11772:
00011F5A 5300                       		subq.b	#1,d0
00011F5C 1140 001A                  		move.b	d0,$1A(a0)
00011F60 1141 003A                  		move.b	d1,$3A(a0)
00011F64 08A8 0000 0001             		bclr	#0,1(a0)
00011F6A 0828 0001 001A             		btst	#1,$1A(a0)
00011F70 6700                       		beq.s	locret_11790
00011F72 08E8 0000 0001             		bset	#0,1(a0)
00011F78                            
00011F78                            locret_11790:
00011F78 4E75                       		rts	
00011F7A                            ; ===========================================================================
00011F7A                            
00011F7A                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011F7A 5428 0024                  		addq.b	#2,$24(a0)
00011F7E 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011F86 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011F8C 0028 0004 0001             		ori.b	#4,1(a0)
00011F92 117C 0004 0018             		move.b	#4,$18(a0)
00011F98 117C 008B 0020             		move.b	#$8B,$20(a0)
00011F9E 117C 000C 0019             		move.b	#$C,$19(a0)
00011FA4 3168 0008 0030             		move.w	8(a0),$30(a0)
00011FAA 0668 0028 0008             		addi.w	#$28,8(a0)
00011FB0 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011FB6 117C 0001 001A             		move.b	#1,$1A(a0)
00011FBC 0828 0000 0022             		btst	#0,$22(a0)
00011FC2 6700                       		beq.s	Obj5E_MoveSpike
00011FC4 0468 0050 0008             		subi.w	#$50,8(a0)
00011FCA 117C 0002 003A             		move.b	#2,$3A(a0)
00011FD0                            
00011FD0                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011FD0 2268 003C                  		movea.l	$3C(a0),a1
00011FD4 7000                       		moveq	#0,d0
00011FD6 1028 003A                  		move.b	$3A(a0),d0
00011FDA 9029 003A                  		sub.b	$3A(a1),d0
00011FDE 6700                       		beq.s	loc_1183E
00011FE0 6400                       		bcc.s	loc_117FC
00011FE2 4400                       		neg.b	d0
00011FE4                            
00011FE4                            loc_117FC:
00011FE4 323C F7E8                  		move.w	#-$818,d1
00011FE8 343C FEEC                  		move.w	#-$114,d2
00011FEC 0C00 0001                  		cmpi.b	#1,d0
00011FF0 6700                       		beq.s	loc_11822
00011FF2 323C F510                  		move.w	#-$AF0,d1
00011FF6 343C FF34                  		move.w	#-$CC,d2
00011FFA 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00012000 6D00                       		blt.s	loc_11822
00012002 323C F200                  		move.w	#-$E00,d1
00012006 343C FF60                  		move.w	#-$A0,d2
0001200A                            
0001200A                            loc_11822:
0001200A 3141 0012                  		move.w	d1,$12(a0)
0001200E 3142 0010                  		move.w	d2,$10(a0)
00012012 3028 0008                  		move.w	8(a0),d0
00012016 9068 0030                  		sub.w	$30(a0),d0
0001201A 6400                       		bcc.s	loc_11838
0001201C 4468 0010                  		neg.w	$10(a0)
00012020                            
00012020                            loc_11838:
00012020 5428 0024                  		addq.b	#2,$24(a0)
00012024 6000                       		bra.s	Obj5E_SpikeFall
00012026                            ; ===========================================================================
00012026                            
00012026                            loc_1183E:				; XREF: Obj5E_MoveSpike
00012026 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001202C 7000                       		moveq	#0,d0
0001202E 1029 001A                  		move.b	$1A(a1),d0
00012032 343C 0028                  		move.w	#$28,d2
00012036 3228 0008                  		move.w	8(a0),d1
0001203A 9268 0030                  		sub.w	$30(a0),d1
0001203E 6400                       		bcc.s	loc_1185C
00012040 4442                       		neg.w	d2
00012042 5440                       		addq.w	#2,d0
00012044                            
00012044                            loc_1185C:
00012044 D040                       		add.w	d0,d0
00012046 3228 0034                  		move.w	$34(a0),d1
0001204A D272 0000                  		add.w	(a2,d0.w),d1
0001204E 3141 000C                  		move.w	d1,$C(a0)
00012052 D468 0030                  		add.w	$30(a0),d2
00012056 3142 0008                  		move.w	d2,8(a0)
0001205A 4268 000E                  		clr.w	$E(a0)
0001205E 4268 000A                  		clr.w	$A(a0)
00012062 4E75                       		rts	
00012064                            ; ===========================================================================
00012064                            
00012064                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00012064 4A68 0012                  		tst.w	$12(a0)
00012068 6A00                       		bpl.s	loc_1189A
0001206A 6100 BD4A                  		bsr.w	ObjectFall
0001206E 3028 0034                  		move.w	$34(a0),d0
00012072 0440 002F                  		subi.w	#$2F,d0
00012076 B068 000C                  		cmp.w	$C(a0),d0
0001207A 6E00                       		bgt.s	locret_11898
0001207C 6100 BD38                  		bsr.w	ObjectFall
00012080                            
00012080                            locret_11898:
00012080 4E75                       		rts	
00012082                            ; ===========================================================================
00012082                            
00012082                            loc_1189A:				; XREF: Obj5E_SpikeFall
00012082 6100 BD32                  		bsr.w	ObjectFall
00012086 2268 003C                  		movea.l	$3C(a0),a1
0001208A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012090 7000                       		moveq	#0,d0
00012092 1029 001A                  		move.b	$1A(a1),d0
00012096 3228 0008                  		move.w	8(a0),d1
0001209A 9268 0030                  		sub.w	$30(a0),d1
0001209E 6400                       		bcc.s	loc_118BA
000120A0 5440                       		addq.w	#2,d0
000120A2                            
000120A2                            loc_118BA:
000120A2 D040                       		add.w	d0,d0
000120A4 3228 0034                  		move.w	$34(a0),d1
000120A8 D272 0000                  		add.w	(a2,d0.w),d1
000120AC B268 000C                  		cmp.w	$C(a0),d1
000120B0 6E00                       		bgt.s	locret_11938
000120B2 2268 003C                  		movea.l	$3C(a0),a1
000120B6 7202                       		moveq	#2,d1
000120B8 4A68 0010                  		tst.w	$10(a0)
000120BC 6B00                       		bmi.s	Obj5E_Spring
000120BE 7200                       		moveq	#0,d1
000120C0                            
000120C0                            Obj5E_Spring:
000120C0 1341 003A                  		move.b	d1,$3A(a1)
000120C4 1141 003A                  		move.b	d1,$3A(a0)
000120C8 B229 001A                  		cmp.b	$1A(a1),d1
000120CC 6700                       		beq.s	loc_1192C
000120CE 08A9 0003 0022             		bclr	#3,$22(a1)
000120D4 6700                       		beq.s	loc_1192C
000120D6 4229 0025                  		clr.b	$25(a1)
000120DA 137C 0002 0024             		move.b	#2,$24(a1)
000120E0 45F8 D000                  		lea	($FFFFD000).w,a2
000120E4 3568 0012 0012             		move.w	$12(a0),$12(a2)
000120EA 446A 0012                  		neg.w	$12(a2)
000120EE 08EA 0001 0022             		bset	#1,$22(a2)
000120F4 08AA 0003 0022             		bclr	#3,$22(a2)
000120FA 422A 003C                  		clr.b	$3C(a2)
000120FE 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00012104 157C 0002 0024             		move.b	#2,$24(a2)
0001210A 303C 00CC                  		move.w	#$CC,d0
0001210E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
00012114                            
00012114                            loc_1192C:
00012114 4268 0010                  		clr.w	$10(a0)
00012118 4268 0012                  		clr.w	$12(a0)
0001211C 5528 0024                  		subq.b	#2,$24(a0)
00012120                            
00012120                            locret_11938:
00012120 4E75                       		rts	
00012122                            ; ===========================================================================
00012122 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001212C                            
0001212C                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
0001215C                            		even
0001215C                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
0001218C                            		even
0001218C                            ; ---------------------------------------------------------------------------
0001218C                            ; Sprite mappings - seesaws (SLZ)
0001218C                            ; ---------------------------------------------------------------------------
0001218C                            Map_obj5E:
0001218C                            	include "_maps\obj5E.asm"
0001218C                            ; ---------------------------------------------------------------------------
0001218C                            ; Sprite mappings - seesaws (SLZ)
0001218C                            ; ---------------------------------------------------------------------------
0001218C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012190 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012194 07                         byte_119AC:	dc.b 7
00012195 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
0001219A DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
0001219F E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000121A4 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000121A9 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000121AE F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000121B3 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000121B8 04                         byte_119D0:	dc.b 4
000121B9 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000121BE E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000121C3 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000121C8 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000121CE 00                         		even
000121CE 00                         		even
000121CE                            
000121CE                            ; ---------------------------------------------------------------------------
000121CE                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000121CE                            ; ---------------------------------------------------------------------------
000121CE                            Map_obj5Ea:
000121CE                            	include "_maps\obj5Eballs.asm"
000121CE                            ; ---------------------------------------------------------------------------
000121CE                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000121CE                            ; ---------------------------------------------------------------------------
000121CE 0000                       		dc.w byte_119EA-Map_obj5Ea
000121D0 0000                       		dc.w byte_119F0-Map_obj5Ea
000121D2 01                         byte_119EA:	dc.b 1
000121D3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000121D8 01                         byte_119F0:	dc.b 1
000121D9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000121DE                            		even
000121DE                            		even
000121DE                            
000121DE                            ; ===========================================================================
000121DE                            ; ---------------------------------------------------------------------------
000121DE                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000121DE                            ; ---------------------------------------------------------------------------
000121DE                            
000121DE                            Obj5F:					; XREF: Obj_Index
000121DE 7000                       		moveq	#0,d0
000121E0 1028 0024                  		move.b	$24(a0),d0
000121E4 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
000121E8 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
000121EC                            ; ===========================================================================
000121EC 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
000121EE 0000                       		dc.w Obj5F_Action-Obj5F_Index
000121F0 0000                       		dc.w Obj5F_Display-Obj5F_Index
000121F2 0000                       		dc.w Obj5F_End-Obj5F_Index
000121F4                            ; ===========================================================================
000121F4                            
000121F4                            Obj5F_Main:				; XREF: Obj5F_Index
000121F4 5428 0024                  		addq.b	#2,$24(a0)
000121F8 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012200 317C 0400 0002             		move.w	#$400,2(a0)
00012206 0028 0004 0001             		ori.b	#4,1(a0)
0001220C 117C 0003 0018             		move.b	#3,$18(a0)
00012212 117C 000C 0019             		move.b	#$C,$19(a0)
00012218 1028 0028                  		move.b	$28(a0),d0
0001221C 6700                       		beq.s	loc_11A3C
0001221E 1140 0024                  		move.b	d0,$24(a0)
00012222 4E75                       		rts	
00012224                            ; ===========================================================================
00012224                            
00012224                            loc_11A3C:
00012224 117C 009A 0020             		move.b	#$9A,$20(a0)
0001222A 0868 0000 0022             		bchg	#0,$22(a0)
00012230                            
00012230                            Obj5F_Action:				; XREF: Obj5F_Index
00012230 7000                       		moveq	#0,d0
00012232 1028 0025                  		move.b	$25(a0),d0
00012236 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0001223A 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001223E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012244 6100 8C82                  		bsr.w	AnimateSprite
00012248 6000 DC66                  		bra.w	MarkObjGone
0001224C                            ; ===========================================================================
0001224C 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
0001224E 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012250 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012252                            ; ===========================================================================
00012252                            
00012252                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012252 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012256 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001225A 6A00                       		bpl.s	locret_11A96	; if time remains, branch
0001225C 5428 0025                  		addq.b	#2,$25(a0)
00012260 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012266 317C 0010 0010             		move.w	#$10,$10(a0)
0001226C 117C 0001 001C             		move.b	#1,$1C(a0)
00012272 0868 0000 0022             		bchg	#0,$22(a0)
00012278 6700                       		beq.s	locret_11A96
0001227A 4468 0010                  		neg.w	$10(a0)		; change direction
0001227E                            
0001227E                            locret_11A96:
0001227E 4E75                       		rts	
00012280                            ; ===========================================================================
00012280                            
00012280                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012280 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012284 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012288 6B00                       		bmi.s	loc_11AA8
0001228A 6100 BB56                  		bsr.w	SpeedToPos
0001228E 4E75                       		rts	
00012290                            ; ===========================================================================
00012290                            
00012290                            loc_11AA8:
00012290 5528 0025                  		subq.b	#2,$25(a0)
00012294 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001229A 4268 0010                  		clr.w	$10(a0)		; stop walking
0001229E 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000122A4 4E75                       		rts	
000122A6                            ; ===========================================================================
000122A6                            
000122A6                            Obj5F_Explode:				; XREF: Obj5F_Index2
000122A6 5368 0030                  		subq.w	#1,$30(a0)
000122AA 6A00                       		bpl.s	locret_11AD0
000122AC 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000122B0 117C 0000 0024             		move.b	#0,$24(a0)
000122B6                            
000122B6                            locret_11AD0:
000122B6 4E75                       		rts	
000122B8                            ; ===========================================================================
000122B8                            
000122B8                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000122B8 3038 D008                  		move.w	($FFFFD008).w,d0
000122BC 9068 0008                  		sub.w	8(a0),d0
000122C0 6400                       		bcc.s	loc_11ADE
000122C2 4440                       		neg.w	d0
000122C4                            
000122C4                            loc_11ADE:
000122C4 0C40 0060                  		cmpi.w	#$60,d0
000122C8 6400                       		bcc.s	locret_11B5E
000122CA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000122CE 9068 000C                  		sub.w	$C(a0),d0
000122D2 6400                       		bcc.s	Obj5F_MakeFuse
000122D4 4440                       		neg.w	d0
000122D6                            
000122D6                            Obj5F_MakeFuse:
000122D6 0C40 0060                  		cmpi.w	#$60,d0
000122DA 6400                       		bcc.s	locret_11B5E
000122DC 4A78 FE08                  		tst.w	($FFFFFE08).w
000122E0 6600                       		bne.s	locret_11B5E
000122E2 117C 0004 0025             		move.b	#4,$25(a0)
000122E8 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000122EE 4268 0010                  		clr.w	$10(a0)
000122F2 117C 0002 001C             		move.b	#2,$1C(a0)
000122F8 6100 BFAA                  		bsr.w	SingleObjLoad2
000122FC 6600                       		bne.s	locret_11B5E
000122FE 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012302 3368 0008 0008             		move.w	8(a0),8(a1)
00012308 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001230E 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012314 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001231A 137C 0004 0028             		move.b	#4,$28(a1)
00012320 137C 0003 001C             		move.b	#3,$1C(a1)
00012326 337C 0010 0012             		move.w	#$10,$12(a1)
0001232C 0828 0001 0022             		btst	#1,$22(a0)
00012332 6700                       		beq.s	loc_11B54
00012334 4469 0012                  		neg.w	$12(a1)
00012338                            
00012338                            loc_11B54:
00012338 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001233E 2348 003C                  		move.l	a0,$3C(a1)
00012342                            
00012342                            locret_11B5E:
00012342 4E75                       		rts	
00012344                            ; ===========================================================================
00012344                            
00012344                            Obj5F_Display:				; XREF: Obj5F_Index
00012344 6100                       		bsr.s	loc_11B70
00012346 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001234C 6100 8B7A                  		bsr.w	AnimateSprite
00012350 6000 DB5E                  		bra.w	MarkObjGone
00012354                            ; ===========================================================================
00012354                            
00012354                            loc_11B70:
00012354 5368 0030                  		subq.w	#1,$30(a0)
00012358 6B00                       		bmi.s	loc_11B7C
0001235A 6100 BA86                  		bsr.w	SpeedToPos
0001235E 4E75                       		rts	
00012360                            ; ===========================================================================
00012360                            
00012360                            loc_11B7C:
00012360 4268 0030                  		clr.w	$30(a0)
00012364 4228 0024                  		clr.b	$24(a0)
00012368 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001236E 7203                       		moveq	#3,d1
00012370 2248                       		movea.l	a0,a1
00012372 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012378 6000                       		bra.s	Obj5F_MakeShrap
0001237A                            ; ===========================================================================
0001237A                            
0001237A                            Obj5F_Loop:
0001237A 6100 BF28                  		bsr.w	SingleObjLoad2
0001237E 6600                       		bne.s	loc_11BCE
00012380                            
00012380                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012380 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012384 3368 0008 0008             		move.w	8(a0),8(a1)
0001238A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012390 137C 0006 0028             		move.b	#6,$28(a1)
00012396 137C 0004 001C             		move.b	#4,$1C(a1)
0001239C 335A 0010                  		move.w	(a2)+,$10(a1)
000123A0 335A 0012                  		move.w	(a2)+,$12(a1)
000123A4 137C 0098 0020             		move.b	#$98,$20(a1)
000123AA 08E9 0007 0001             		bset	#7,1(a1)
000123B0                            
000123B0                            loc_11BCE:
000123B0 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000123B4                            
000123B4 117C 0006 0024             		move.b	#6,$24(a0)
000123BA                            
000123BA                            Obj5F_End:				; XREF: Obj5F_Index
000123BA 6100 BA26                  		bsr.w	SpeedToPos
000123BE 0668 0018 0012             		addi.w	#$18,$12(a0)
000123C4 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000123CA 6100 8AFC                  		bsr.w	AnimateSprite
000123CE 4A28 0001                  		tst.b	1(a0)
000123D2 6A00 BA70                  		bpl.w	DeleteObject
000123D6 6000 BA30                  		bra.w	DisplaySprite
000123DA                            ; ===========================================================================
000123DA FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000123EA                            
000123EA                            Ani_obj5F:
000123EA                            	include "_anim\obj5F.asm"
000123EA                            ; ---------------------------------------------------------------------------
000123EA                            ; Animation script - Bomb enemy
000123EA                            ; ---------------------------------------------------------------------------
000123EA 0000                       		dc.w byte_11C12-Ani_obj5F
000123EC 0000                       		dc.w byte_11C16-Ani_obj5F
000123EE 0000                       		dc.w byte_11C1C-Ani_obj5F
000123F0 0000                       		dc.w byte_11C20-Ani_obj5F
000123F2 0000                       		dc.w byte_11C24-Ani_obj5F
000123F4 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000123F8 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000123FE 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012402 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012406 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001240A                            		even
0001240A                            		even
0001240A                            
0001240A                            ; ---------------------------------------------------------------------------
0001240A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001240A                            ; ---------------------------------------------------------------------------
0001240A                            Map_obj5F:
0001240A                            	include "_maps\obj5F.asm"
0001240A                            ; ---------------------------------------------------------------------------
0001240A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001240A                            ; ---------------------------------------------------------------------------
0001240A 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001240E 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012412 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012416 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001241A 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001241E 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012422 03                         byte_11C40:	dc.b 3
00012423 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012428 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001242D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012432 03                         byte_11C50:	dc.b 3
00012433 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012438 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001243D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012442 03                         byte_11C60:	dc.b 3
00012443 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012448 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001244D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012452 03                         byte_11C70:	dc.b 3
00012453 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012458 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001245D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012462 03                         byte_11C80:	dc.b 3
00012463 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012468 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001246D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012472 03                         byte_11C90:	dc.b 3
00012473 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012478 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001247D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012482 02                         byte_11CA0:	dc.b 2
00012483 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012488 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001248D 02                         byte_11CAB:	dc.b 2
0001248E F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012493 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012498 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012499 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
0001249E 01                         byte_11CBC:	dc.b 1			; fuse
0001249F E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000124A4 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000124A5 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000124AA 01                         byte_11CC8:	dc.b 1			; fireball
000124AB FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000124B0                            		even
000124B0                            		even
000124B0                            
000124B0                            ; ===========================================================================
000124B0                            ; ---------------------------------------------------------------------------
000124B0                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000124B0                            ; ---------------------------------------------------------------------------
000124B0                            
000124B0                            Obj60:					; XREF: Obj_Index
000124B0 7000                       		moveq	#0,d0
000124B2 1028 0024                  		move.b	$24(a0),d0
000124B6 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000124BA 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000124BE                            ; ===========================================================================
000124BE 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000124C0 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000124C2 0000                       		dc.w Obj60_Display-Obj60_Index
000124C4 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000124C6 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000124C8                            ; ===========================================================================
000124C8                            
000124C8                            Obj60_Main:				; XREF: Obj60_Index
000124C8 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000124D0 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000124D6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000124DC 6700                       		beq.s	loc_11D02
000124DE 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000124E4                            
000124E4                            loc_11D02:
000124E4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000124EA 6600                       		bne.s	loc_11D10
000124EC 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000124F2                            
000124F2                            loc_11D10:
000124F2 0028 0004 0001             		ori.b	#4,1(a0)
000124F8 117C 0004 0018             		move.b	#4,$18(a0)
000124FE 117C 000B 0020             		move.b	#$B,$20(a0)
00012504 117C 000C 0019             		move.b	#$C,$19(a0)
0001250A 7400                       		moveq	#0,d2
0001250C 45E8 0037                  		lea	$37(a0),a2
00012510 264A                       		movea.l	a2,a3
00012512 524A                       		addq.w	#1,a2
00012514 7203                       		moveq	#3,d1
00012516                            
00012516                            Obj60_MakeOrbs:
00012516 6100 BD8C                  		bsr.w	SingleObjLoad2
0001251A 6600                       		bne.s	loc_11D90
0001251C 5213                       		addq.b	#1,(a3)
0001251E 3A09                       		move.w	a1,d5
00012520 0445 D000                  		subi.w	#-$3000,d5
00012524 EC4D                       		lsr.w	#6,d5
00012526 0245 007F                  		andi.w	#$7F,d5
0001252A 14C5                       		move.b	d5,(a2)+
0001252C 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001252E 137C 0006 0024             		move.b	#6,$24(a1)
00012534 2368 0004 0004             		move.l	4(a0),4(a1)
0001253A 3368 0002 0002             		move.w	2(a0),2(a1)
00012540 0029 0004 0001             		ori.b	#4,1(a1)
00012546 137C 0004 0018             		move.b	#4,$18(a1)
0001254C 137C 0008 0019             		move.b	#8,$19(a1)
00012552 137C 0003 001A             		move.b	#3,$1A(a1)
00012558 137C 0098 0020             		move.b	#$98,$20(a1)
0001255E 1342 0026                  		move.b	d2,$26(a1)
00012562 0602 0040                  		addi.b	#$40,d2
00012566 2348 003C                  		move.l	a0,$3C(a1)
0001256A 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
0001256E                            
0001256E                            loc_11D90:
0001256E 7001                       		moveq	#1,d0
00012570 0828 0000 0022             		btst	#0,$22(a0)
00012576 6700                       		beq.s	Obj60_Move
00012578 4440                       		neg.w	d0
0001257A                            
0001257A                            Obj60_Move:
0001257A 1140 0036                  		move.b	d0,$36(a0)
0001257E 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012584 5428 0024                  		addq.b	#2,$24(a0)
00012588 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
0001258E 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012594 6700                       		beq.s	locret_11DBC	; if not, branch
00012596 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
0001259A                            
0001259A                            locret_11DBC:
0001259A 4E75                       		rts	
0001259C                            ; ===========================================================================
0001259C                            
0001259C                            Obj60_ChkSonic:				; XREF: Obj60_Index
0001259C 3038 D008                  		move.w	($FFFFD008).w,d0
000125A0 9068 0008                  		sub.w	8(a0),d0
000125A4 6400                       		bcc.s	loc_11DCA
000125A6 4440                       		neg.w	d0
000125A8                            
000125A8                            loc_11DCA:
000125A8 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000125AC 6400                       		bcc.s	Obj60_Animate	; if not, branch
000125AE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000125B2 9068 000C                  		sub.w	$C(a0),d0
000125B6 6400                       		bcc.s	loc_11DDC
000125B8 4440                       		neg.w	d0
000125BA                            
000125BA                            loc_11DDC:
000125BA 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000125BE 6400                       		bcc.s	Obj60_Animate	; if not, branch
000125C0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000125C4 6600                       		bne.s	Obj60_Animate	; if yes, branch
000125C6 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000125CC                            
000125CC                            Obj60_Animate:
000125CC 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000125D2 6100 88F4                  		bsr.w	AnimateSprite
000125D6 6000 0000                  		bra.w	Obj60_ChkDel
000125DA                            ; ===========================================================================
000125DA                            
000125DA                            Obj60_Display:				; XREF: Obj60_Index
000125DA 6100 B806                  		bsr.w	SpeedToPos
000125DE                            
000125DE                            Obj60_ChkDel:				; XREF: Obj60_Animate
000125DE 3028 0008                  		move.w	8(a0),d0
000125E2 0240 FF80                  		andi.w	#$FF80,d0
000125E6 3238 F700                  		move.w	($FFFFF700).w,d1
000125EA 0441 0080                  		subi.w	#$80,d1
000125EE 0241 FF80                  		andi.w	#$FF80,d1
000125F2 9041                       		sub.w	d1,d0
000125F4 0C40 0280                  		cmpi.w	#$280,d0
000125F8 6200 0000                  		bhi.w	Obj60_ChkGone
000125FC 6000 B80A                  		bra.w	DisplaySprite
00012600                            ; ===========================================================================
00012600                            
00012600                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012600 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012604 7000                       		moveq	#0,d0
00012606 1028 0023                  		move.b	$23(a0),d0
0001260A 6700                       		beq.s	loc_11E34
0001260C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012612                            
00012612                            loc_11E34:
00012612 45E8 0037                  		lea	$37(a0),a2
00012616 7400                       		moveq	#0,d2
00012618 141A                       		move.b	(a2)+,d2
0001261A 5342                       		subq.w	#1,d2
0001261C 6500                       		bcs.s	Obj60_Delete
0001261E                            
0001261E                            loc_11E40:
0001261E 7000                       		moveq	#0,d0
00012620 101A                       		move.b	(a2)+,d0
00012622 ED48                       		lsl.w	#6,d0
00012624 0680 00FF D000             		addi.l	#$FFD000,d0
0001262A 2240                       		movea.l	d0,a1
0001262C 6100 B818                  		bsr.w	DeleteObject2
00012630 51CA FFEC                  		dbf	d2,loc_11E40
00012634                            
00012634                            Obj60_Delete:
00012634 6000 B80E                  		bra.w	DeleteObject
00012638                            ; ===========================================================================
00012638                            
00012638                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012638 2268 003C                  		movea.l	$3C(a0),a1
0001263C 0C11 0060                  		cmpi.b	#$60,0(a1)
00012640 6600 B802                  		bne.w	DeleteObject
00012644 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
0001264A 6600                       		bne.s	Obj60_Circle
0001264C 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012652 6600                       		bne.s	Obj60_Circle
00012654 5428 0024                  		addq.b	#2,$24(a0)
00012658 5329 0037                  		subq.b	#1,$37(a1)
0001265C 6600                       		bne.s	Obj60_FireOrb
0001265E 5429 0024                  		addq.b	#2,$24(a1)
00012662                            
00012662                            Obj60_FireOrb:
00012662 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012668 0829 0000 0022             		btst	#0,$22(a1)
0001266E 6700                       		beq.s	Obj60_Display2
00012670 4468 0010                  		neg.w	$10(a0)
00012674                            
00012674                            Obj60_Display2:
00012674 6000 B792                  		bra.w	DisplaySprite
00012678                            ; ===========================================================================
00012678                            
00012678                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012678 1028 0026                  		move.b	$26(a0),d0
0001267C 4EB9 0000 2CEC             		jsr	(CalcSine).l
00012682 E841                       		asr.w	#4,d1
00012684 D269 0008                  		add.w	8(a1),d1
00012688 3141 0008                  		move.w	d1,8(a0)
0001268C E840                       		asr.w	#4,d0
0001268E D069 000C                  		add.w	$C(a1),d0
00012692 3140 000C                  		move.w	d0,$C(a0)
00012696 1029 0036                  		move.b	$36(a1),d0
0001269A D128 0026                  		add.b	d0,$26(a0)
0001269E 6000 B768                  		bra.w	DisplaySprite
000126A2                            ; ===========================================================================
000126A2                            
000126A2                            Obj60_ChkDel2:				; XREF: Obj60_Index
000126A2 6100 B73E                  		bsr.w	SpeedToPos
000126A6 4A28 0001                  		tst.b	1(a0)
000126AA 6A00 B798                  		bpl.w	DeleteObject
000126AE 6000 B758                  		bra.w	DisplaySprite
000126B2                            ; ===========================================================================
000126B2                            Ani_obj60:
000126B2                            	include "_anim\obj60.asm"
000126B2                            ; ---------------------------------------------------------------------------
000126B2                            ; Animation script - Orbinaut enemy
000126B2                            ; ---------------------------------------------------------------------------
000126B2 0000                       		dc.w byte_11EDA-Ani_obj60
000126B4 0000                       		dc.w byte_11EDE-Ani_obj60
000126B6 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000126BA 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000126C0                            		even
000126C0                            		even
000126C0                            
000126C0                            ; ---------------------------------------------------------------------------
000126C0                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000126C0                            ; ---------------------------------------------------------------------------
000126C0                            Map_obj60:
000126C0                            	include "_maps\obj60.asm"
000126C0                            ; ---------------------------------------------------------------------------
000126C0                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000126C0                            ; ---------------------------------------------------------------------------
000126C0 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000126C4 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000126C8 01                         byte_11EEC:	dc.b 1
000126C9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000126CE 01                         byte_11EF2:	dc.b 1
000126CF F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000126D4 01                         byte_11EF8:	dc.b 1
000126D5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000126DA 01                         byte_11EFE:	dc.b 1
000126DB F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000126E0                            		even
000126E0                            		even
000126E0                            
000126E0                            ; ===========================================================================
000126E0                            ; ---------------------------------------------------------------------------
000126E0                            ; Object 16 - harpoon (LZ)
000126E0                            ; ---------------------------------------------------------------------------
000126E0                            
000126E0                            Obj16:					; XREF: Obj_Index
000126E0 7000                       		moveq	#0,d0
000126E2 1028 0024                  		move.b	$24(a0),d0
000126E6 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000126EA 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000126EE                            ; ===========================================================================
000126EE 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000126F0 0000                       		dc.w Obj16_Move-Obj16_Index
000126F2 0000                       		dc.w Obj16_Wait-Obj16_Index
000126F4                            ; ===========================================================================
000126F4                            
000126F4                            Obj16_Main:				; XREF: Obj16_Index
000126F4 5428 0024                  		addq.b	#2,$24(a0)
000126F8 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012700 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012706 0028 0004 0001             		ori.b	#4,1(a0)
0001270C 117C 0004 0018             		move.b	#4,$18(a0)
00012712 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012718 117C 0014 0019             		move.b	#$14,$19(a0)
0001271E 317C 003C 0030             		move.w	#60,$30(a0)
00012724                            
00012724                            Obj16_Move:				; XREF: Obj16_Index
00012724 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001272A 6100 879C                  		bsr.w	AnimateSprite
0001272E 7000                       		moveq	#0,d0
00012730 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012734 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
0001273A 6000 D774                  		bra.w	MarkObjGone
0001273E                            ; ===========================================================================
0001273E 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012744                            ; ===========================================================================
00012744                            
00012744                            Obj16_Wait:				; XREF: Obj16_Index
00012744 5368 0030                  		subq.w	#1,$30(a0)
00012748 6A00                       		bpl.s	Obj16_ChkDel
0001274A 317C 003C 0030             		move.w	#60,$30(a0)
00012750 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012754 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
0001275A                            
0001275A                            Obj16_ChkDel:
0001275A 6000 D754                  		bra.w	MarkObjGone
0001275E                            ; ===========================================================================
0001275E                            Ani_obj16:
0001275E                            	include "_anim\obj16.asm"
0001275E                            ; ---------------------------------------------------------------------------
0001275E                            ; Animation script - harpoon (LZ)
0001275E                            ; ---------------------------------------------------------------------------
0001275E 0000                       		dc.w byte_11F8A-Ani_obj16
00012760 0000                       		dc.w byte_11F8E-Ani_obj16
00012762 0000                       		dc.w byte_11F92-Ani_obj16
00012764 0000                       		dc.w byte_11F96-Ani_obj16
00012766 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
0001276A 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
0001276E 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012772 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012776                            		even
00012776                            		even
00012776                            
00012776                            ; ---------------------------------------------------------------------------
00012776                            ; Sprite mappings - harpoon (LZ)
00012776                            ; ---------------------------------------------------------------------------
00012776                            Map_obj16:
00012776                            	include "_maps\obj16.asm"
00012776                            ; ---------------------------------------------------------------------------
00012776                            ; Sprite mappings - harpoon (LZ)
00012776                            ; ---------------------------------------------------------------------------
00012776 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
0001277A 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
0001277E 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012782 01                         byte_11FA6:	dc.b 1
00012783 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012788 01                         byte_11FAC:	dc.b 1
00012789 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001278E 02                         byte_11FB2:	dc.b 2
0001278F FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012794 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012799 01                         byte_11FBD:	dc.b 1
0001279A F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001279F 01                         byte_11FC3:	dc.b 1
000127A0 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000127A5 02                         byte_11FC9:	dc.b 2
000127A6 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000127AB F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000127B0                            		even
000127B0                            		even
000127B0                            
000127B0                            ; ===========================================================================
000127B0                            ; ---------------------------------------------------------------------------
000127B0                            ; Object 61 - blocks (LZ)
000127B0                            ; ---------------------------------------------------------------------------
000127B0                            
000127B0                            Obj61:					; XREF: Obj_Index
000127B0 7000                       		moveq	#0,d0
000127B2 1028 0024                  		move.b	$24(a0),d0
000127B6 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000127BA 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000127BE                            ; ===========================================================================
000127BE 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000127C0 0000                       		dc.w Obj61_Action-Obj61_Index
000127C2                            
000127C2 1010                       Obj61_Var:	dc.b $10, $10		; width, height
000127C4 200C                       		dc.b $20, $C
000127C6 1010                       		dc.b $10, $10
000127C8 1010                       		dc.b $10, $10
000127CA                            ; ===========================================================================
000127CA                            
000127CA                            Obj61_Main:				; XREF: Obj61_Index
000127CA 5428 0024                  		addq.b	#2,$24(a0)
000127CE 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
000127D6 317C 43E6 0002             		move.w	#$43E6,2(a0)
000127DC 117C 0004 0001             		move.b	#4,1(a0)
000127E2 117C 0003 0018             		move.b	#3,$18(a0)
000127E8 7000                       		moveq	#0,d0
000127EA 1028 0028                  		move.b	$28(a0),d0
000127EE E648                       		lsr.w	#3,d0
000127F0 0240 000E                  		andi.w	#$E,d0
000127F4 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000127F8 115A 0019                  		move.b	(a2)+,$19(a0)
000127FC 1152 0016                  		move.b	(a2),$16(a0)
00012800 E248                       		lsr.w	#1,d0
00012802 1140 001A                  		move.b	d0,$1A(a0)
00012806 3168 0008 0034             		move.w	8(a0),$34(a0)
0001280C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012812 1028 0028                  		move.b	$28(a0),d0
00012816 0200 000F                  		andi.b	#$F,d0
0001281A 6700                       		beq.s	Obj61_Action
0001281C 0C00 0007                  		cmpi.b	#7,d0
00012820 6700                       		beq.s	Obj61_Action
00012822 117C 0001 0038             		move.b	#1,$38(a0)
00012828                            
00012828                            Obj61_Action:				; XREF: Obj61_Index
00012828 3F28 0008                  		move.w	8(a0),-(sp)
0001282C 7000                       		moveq	#0,d0
0001282E 1028 0028                  		move.b	$28(a0),d0
00012832 0240 000F                  		andi.w	#$F,d0
00012836 D040                       		add.w	d0,d0
00012838 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
0001283C 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012840 381F                       		move.w	(sp)+,d4
00012842 4A28 0001                  		tst.b	1(a0)
00012846 6A00                       		bpl.s	Obj61_ChkDel
00012848 7200                       		moveq	#0,d1
0001284A 1228 0019                  		move.b	$19(a0),d1
0001284E 0641 000B                  		addi.w	#$B,d1
00012852 7400                       		moveq	#0,d2
00012854 1428 0016                  		move.b	$16(a0),d2
00012858 3602                       		move.w	d2,d3
0001285A 5243                       		addq.w	#1,d3
0001285C 6100 D97A                  		bsr.w	SolidObject
00012860 1144 003F                  		move.b	d4,$3F(a0)
00012864 6100 0000                  		bsr.w	loc_12180
00012868                            
00012868                            Obj61_ChkDel:
00012868 3028 0034                  		move.w	$34(a0),d0
0001286C 0240 FF80                  		andi.w	#$FF80,d0
00012870 3238 F700                  		move.w	($FFFFF700).w,d1
00012874 0441 0080                  		subi.w	#$80,d1
00012878 0241 FF80                  		andi.w	#$FF80,d1
0001287C 9041                       		sub.w	d1,d0
0001287E 0C40 0280                  		cmpi.w	#$280,d0
00012882 6200 B5C0                  		bhi.w	DeleteObject
00012886 6000 B580                  		bra.w	DisplaySprite
0001288A                            ; ===========================================================================
0001288A 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001288E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012892 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012896 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
0001289A                            ; ===========================================================================
0001289A                            
0001289A                            Obj61_Type00:				; XREF: Obj61_TypeIndex
0001289A 4E75                       		rts	
0001289C                            ; ===========================================================================
0001289C                            
0001289C                            Obj61_Type01:				; XREF: Obj61_TypeIndex
0001289C 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
000128A0 6600                       		bne.s	loc_120D6	; if yes, branch
000128A2 0828 0003 0022             		btst	#3,$22(a0)
000128A8 6700                       		beq.s	locret_120D4
000128AA 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
000128B0                            
000128B0                            locret_120D4:
000128B0 4E75                       		rts	
000128B2                            ; ===========================================================================
000128B2                            
000128B2                            loc_120D6:
000128B2 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
000128B6 66F8                       		bne.s	locret_120D4	; if time remains, branch
000128B8 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000128BC 4228 0038                  		clr.b	$38(a0)
000128C0 4E75                       		rts	
000128C2                            ; ===========================================================================
000128C2                            
000128C2                            Obj61_Type02:				; XREF: Obj61_TypeIndex
000128C2 6100 B51E                  		bsr.w	SpeedToPos
000128C6 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
000128CA 6100 0000                  		bsr.w	ObjHitFloor
000128CE 4A41                       		tst.w	d1
000128D0 6A00 0000                  		bpl.w	locret_12106
000128D4 5241                       		addq.w	#1,d1
000128D6 D368 000C                  		add.w	d1,$C(a0)
000128DA 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
000128DE 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000128E2                            
000128E2                            locret_12106:
000128E2 4E75                       		rts	
000128E4                            ; ===========================================================================
000128E4                            
000128E4                            Obj61_Type04:				; XREF: Obj61_TypeIndex
000128E4 6100 B4FC                  		bsr.w	SpeedToPos
000128E8 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
000128EC 6100 0000                  		bsr.w	ObjHitCeiling
000128F0 4A41                       		tst.w	d1
000128F2 6A00 0000                  		bpl.w	locret_12126
000128F6 9368 000C                  		sub.w	d1,$C(a0)
000128FA 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
000128FE 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012902                            
00012902                            locret_12126:
00012902 4E75                       		rts	
00012904                            ; ===========================================================================
00012904                            
00012904                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012904 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
0001290A 6600                       		bne.s	locret_12138	; if not, branch
0001290C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012910 4228 0038                  		clr.b	$38(a0)
00012914                            
00012914                            locret_12138:
00012914 4E75                       		rts	
00012916                            ; ===========================================================================
00012916                            
00012916                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012916 3038 F646                  		move.w	($FFFFF646).w,d0
0001291A 9068 000C                  		sub.w	$C(a0),d0
0001291E 6700                       		beq.s	locret_1217E
00012920 6400                       		bcc.s	loc_12162
00012922 0C40 FFFE                  		cmpi.w	#-2,d0
00012926 6C00                       		bge.s	loc_1214E
00012928 70FE                       		moveq	#-2,d0
0001292A                            
0001292A                            loc_1214E:
0001292A D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
0001292E 6100 0000                  		bsr.w	ObjHitCeiling
00012932 4A41                       		tst.w	d1
00012934 6A00 0000                  		bpl.w	locret_12160
00012938 9368 000C                  		sub.w	d1,$C(a0)
0001293C                            
0001293C                            locret_12160:
0001293C 4E75                       		rts	
0001293E                            ; ===========================================================================
0001293E                            
0001293E                            loc_12162:				; XREF: Obj61_Type07
0001293E 0C40 0002                  		cmpi.w	#2,d0
00012942 6F00                       		ble.s	loc_1216A
00012944 7002                       		moveq	#2,d0
00012946                            
00012946                            loc_1216A:
00012946 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
0001294A 6100 0000                  		bsr.w	ObjHitFloor
0001294E 4A41                       		tst.w	d1
00012950 6A00 0000                  		bpl.w	locret_1217E
00012954 5241                       		addq.w	#1,d1
00012956 D368 000C                  		add.w	d1,$C(a0)
0001295A                            
0001295A                            locret_1217E:
0001295A 4E75                       		rts	
0001295C                            ; ===========================================================================
0001295C                            
0001295C                            loc_12180:				; XREF: Obj61_Action
0001295C 4A28 0038                  		tst.b	$38(a0)
00012960 6700                       		beq.s	locret_121C0
00012962 0828 0003 0022             		btst	#3,$22(a0)
00012968 6600                       		bne.s	loc_1219A
0001296A 4A28 003E                  		tst.b	$3E(a0)
0001296E 6700                       		beq.s	locret_121C0
00012970 5928 003E                  		subq.b	#4,$3E(a0)
00012974 6000                       		bra.s	loc_121A6
00012976                            ; ===========================================================================
00012976                            
00012976                            loc_1219A:
00012976 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
0001297C 6700                       		beq.s	locret_121C0
0001297E 5828 003E                  		addq.b	#4,$3E(a0)
00012982                            
00012982                            loc_121A6:
00012982 1028 003E                  		move.b	$3E(a0),d0
00012986 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001298C 323C 0400                  		move.w	#$400,d1
00012990 C1C1                       		muls.w	d1,d0
00012992 4840                       		swap	d0
00012994 D068 0030                  		add.w	$30(a0),d0
00012998 3140 000C                  		move.w	d0,$C(a0)
0001299C                            
0001299C                            locret_121C0:
0001299C 4E75                       		rts	
0001299E                            ; ===========================================================================
0001299E                            ; ---------------------------------------------------------------------------
0001299E                            ; Sprite mappings - blocks (LZ)
0001299E                            ; ---------------------------------------------------------------------------
0001299E                            Map_obj61:
0001299E                            	include "_maps\obj61.asm"
0001299E                            ; ---------------------------------------------------------------------------
0001299E                            ; Sprite mappings - blocks (LZ)
0001299E                            ; ---------------------------------------------------------------------------
0001299E 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
000129A2 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
000129A6 01                         byte_121CA:	dc.b 1
000129A7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000129AC 02                         byte_121D0:	dc.b 2
000129AD F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
000129B2 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
000129B7 01                         byte_121DB:	dc.b 1
000129B8 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
000129BD 01                         byte_121E1:	dc.b 1
000129BE F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
000129C4 00                         		even
000129C4 00                         		even
000129C4                            
000129C4                            ; ===========================================================================
000129C4                            ; ---------------------------------------------------------------------------
000129C4                            ; Object 62 - gargoyle head (LZ)
000129C4                            ; ---------------------------------------------------------------------------
000129C4                            
000129C4                            Obj62:					; XREF: Obj_Index
000129C4 7000                       		moveq	#0,d0
000129C6 1028 0024                  		move.b	$24(a0),d0
000129CA 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
000129CE 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
000129D2 6000 D4DC                  		bra.w	MarkObjGone
000129D6                            ; ===========================================================================
000129D6 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
000129D8 0000                       		dc.w Obj62_MakeFire-Obj62_Index
000129DA 0000                       		dc.w Obj62_FireBall-Obj62_Index
000129DC 0000                       		dc.w Obj62_AniFire-Obj62_Index
000129DE                            
000129DE 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000129E6                            ; ===========================================================================
000129E6                            
000129E6                            Obj62_Main:				; XREF: Obj62_Index
000129E6 5428 0024                  		addq.b	#2,$24(a0)
000129EA 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000129F2 317C 42E9 0002             		move.w	#$42E9,2(a0)
000129F8 0028 0004 0001             		ori.b	#4,1(a0)
000129FE 117C 0003 0018             		move.b	#3,$18(a0)
00012A04 117C 0010 0019             		move.b	#$10,$19(a0)
00012A0A 1028 0028                  		move.b	$28(a0),d0	; get object type
00012A0E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012A12 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012A18 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012A1E 0228 000F 0028             		andi.b	#$F,$28(a0)
00012A24                            
00012A24                            Obj62_MakeFire:				; XREF: Obj62_Index
00012A24 5328 001E                  		subq.b	#1,$1E(a0)
00012A28 6600                       		bne.s	Obj62_NoFire
00012A2A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012A30 6100 B650                  		bsr.w	ChkObjOnScreen
00012A34 6600                       		bne.s	Obj62_NoFire
00012A36 6100 B856                  		bsr.w	SingleObjLoad
00012A3A 6600                       		bne.s	Obj62_NoFire
00012A3C 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012A40 5829 0024                  		addq.b	#4,$24(a1)
00012A44 3368 0008 0008             		move.w	8(a0),8(a1)
00012A4A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012A50 1368 0001 0001             		move.b	1(a0),1(a1)
00012A56 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012A5C                            
00012A5C                            Obj62_NoFire:
00012A5C 4E75                       		rts	
00012A5E                            ; ===========================================================================
00012A5E                            
00012A5E                            Obj62_FireBall:				; XREF: Obj62_Index
00012A5E 5428 0024                  		addq.b	#2,$24(a0)
00012A62 117C 0008 0016             		move.b	#8,$16(a0)
00012A68 117C 0008 0017             		move.b	#8,$17(a0)
00012A6E 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012A76 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012A7C 0028 0004 0001             		ori.b	#4,1(a0)
00012A82 117C 0004 0018             		move.b	#4,$18(a0)
00012A88 117C 0098 0020             		move.b	#$98,$20(a0)
00012A8E 117C 0008 0019             		move.b	#8,$19(a0)
00012A94 117C 0002 001A             		move.b	#2,$1A(a0)
00012A9A 5068 000C                  		addq.w	#8,$C(a0)
00012A9E 317C 0200 0010             		move.w	#$200,$10(a0)
00012AA4 0828 0000 0022             		btst	#0,$22(a0)
00012AAA 6600                       		bne.s	Obj62_Sound
00012AAC 4468 0010                  		neg.w	$10(a0)
00012AB0                            
00012AB0                            Obj62_Sound:
00012AB0 303C 00AE                  		move.w	#$AE,d0
00012AB4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012ABA                            
00012ABA                            Obj62_AniFire:				; XREF: Obj62_Index
00012ABA 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012ABE 0200 0007                  		andi.b	#7,d0
00012AC2 6600                       		bne.s	Obj62_StopFire
00012AC4 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012ACA                            
00012ACA                            Obj62_StopFire:
00012ACA 6100 B316                  		bsr.w	SpeedToPos
00012ACE 0828 0000 0022             		btst	#0,$22(a0)
00012AD4 6600                       		bne.s	Obj62_StopFire2
00012AD6 76F8                       		moveq	#-8,d3
00012AD8 6100 0000                  		bsr.w	ObjHitWallLeft
00012ADC 4A41                       		tst.w	d1
00012ADE 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012AE2 4E75                       		rts	
00012AE4                            ; ===========================================================================
00012AE4                            
00012AE4                            Obj62_StopFire2:
00012AE4 7608                       		moveq	#8,d3
00012AE6 6100 0000                  		bsr.w	ObjHitWallRight
00012AEA 4A41                       		tst.w	d1
00012AEC 6B00 B356                  		bmi.w	DeleteObject
00012AF0 4E75                       		rts	
00012AF2                            ; ===========================================================================
00012AF2                            ; ---------------------------------------------------------------------------
00012AF2                            ; Sprite mappings - gargoyle head (LZ)
00012AF2                            ; ---------------------------------------------------------------------------
00012AF2                            Map_obj62:
00012AF2                            	include "_maps\obj62.asm"
00012AF2                            ; ---------------------------------------------------------------------------
00012AF2                            ; Sprite mappings - gargoyle head (LZ)
00012AF2                            ; ---------------------------------------------------------------------------
00012AF2 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012AF6 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012AFA 03                         byte_12320:	dc.b 3
00012AFB F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012B00 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012B05 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012B0A 01                         byte_12330:	dc.b 1
00012B0B FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012B10 01                         byte_12336:	dc.b 1
00012B11 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012B16                            		even
00012B16                            		even
00012B16                            
00012B16                            ; ===========================================================================
00012B16                            ; ---------------------------------------------------------------------------
00012B16                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012B16                            ; ---------------------------------------------------------------------------
00012B16                            
00012B16                            Obj63:					; XREF: Obj_Index
00012B16 7000                       		moveq	#0,d0
00012B18 1028 0024                  		move.b	$24(a0),d0
00012B1C 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012B20 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012B24 3028 0030                  		move.w	$30(a0),d0
00012B28 0240 FF80                  		andi.w	#$FF80,d0
00012B2C 3238 F700                  		move.w	($FFFFF700).w,d1
00012B30 0441 0080                  		subi.w	#$80,d1
00012B34 0241 FF80                  		andi.w	#$FF80,d1
00012B38 9041                       		sub.w	d1,d0
00012B3A 0C40 0280                  		cmpi.w	#$280,d0
00012B3E 6200                       		bhi.s	loc_1236A
00012B40                            
00012B40                            Obj63_Display:				; XREF: loc_1236A
00012B40 6000 B2C6                  		bra.w	DisplaySprite
00012B44                            ; ===========================================================================
00012B44                            
00012B44                            loc_1236A:				; XREF: Obj63
00012B44 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012B4A 6600                       		bne.s	loc_12378
00012B4C 0C40 FF80                  		cmpi.w	#-$80,d0
00012B50 64EE                       		bcc.s	Obj63_Display
00012B52                            
00012B52                            loc_12378:
00012B52 1028 002F                  		move.b	$2F(a0),d0
00012B56 6A00 B2EC                  		bpl.w	DeleteObject
00012B5A 0240 007F                  		andi.w	#$7F,d0
00012B5E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012B62 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012B68 6000 B2DA                  		bra.w	DeleteObject
00012B6C                            ; ===========================================================================
00012B6C 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012B6E 0000                       		dc.w loc_124B2-Obj63_Index
00012B70 0000                       		dc.w loc_124C2-Obj63_Index
00012B72 0000                       		dc.w loc_124DE-Obj63_Index
00012B74                            ; ===========================================================================
00012B74                            
00012B74                            Obj63_Main:				; XREF: Obj63_Index
00012B74 1028 0028                  		move.b	$28(a0),d0
00012B78 6B00 0000                  		bmi.w	loc_12460
00012B7C 5428 0024                  		addq.b	#2,$24(a0)
00012B80 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012B88 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012B8E 0028 0004 0001             		ori.b	#4,1(a0)
00012B94 117C 0010 0019             		move.b	#$10,$19(a0)
00012B9A 117C 0004 0018             		move.b	#4,$18(a0)
00012BA0 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012BA6 6600                       		bne.s	loc_123E2
00012BA8 5828 0024                  		addq.b	#4,$24(a0)
00012BAC 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012BB2 117C 0001 0018             		move.b	#1,$18(a0)
00012BB8 6000 0000                  		bra.w	loc_124DE
00012BBC                            ; ===========================================================================
00012BBC                            
00012BBC                            loc_123E2:
00012BBC 117C 0004 001A             		move.b	#4,$1A(a0)
00012BC2 7000                       		moveq	#0,d0
00012BC4 1028 0028                  		move.b	$28(a0),d0
00012BC8 3200                       		move.w	d0,d1
00012BCA E648                       		lsr.w	#3,d0
00012BCC 0240 001E                  		andi.w	#$1E,d0
00012BD0 45FA 0000                  		lea	Obj63_Data(pc),a2
00012BD4 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012BD8 315A 0038                  		move.w	(a2)+,$38(a0)
00012BDC 315A 0030                  		move.w	(a2)+,$30(a0)
00012BE0 214A 003C                  		move.l	a2,$3C(a0)
00012BE4 0241 000F                  		andi.w	#$F,d1
00012BE8 E549                       		lsl.w	#2,d1
00012BEA 1141 0038                  		move.b	d1,$38(a0)
00012BEE 117C 0004 003A             		move.b	#4,$3A(a0)
00012BF4 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012BF8 6700                       		beq.s	loc_1244C
00012BFA 117C 0001 003B             		move.b	#1,$3B(a0)
00012C00 4428 003A                  		neg.b	$3A(a0)
00012C04 7200                       		moveq	#0,d1
00012C06 1228 0038                  		move.b	$38(a0),d1
00012C0A D228 003A                  		add.b	$3A(a0),d1
00012C0E B228 0039                  		cmp.b	$39(a0),d1
00012C12 6500                       		bcs.s	loc_12448
00012C14 1001                       		move.b	d1,d0
00012C16 7200                       		moveq	#0,d1
00012C18 4A00                       		tst.b	d0
00012C1A 6A00                       		bpl.s	loc_12448
00012C1C 1228 0039                  		move.b	$39(a0),d1
00012C20 5901                       		subq.b	#4,d1
00012C22                            
00012C22                            loc_12448:
00012C22 1141 0038                  		move.b	d1,$38(a0)
00012C26                            
00012C26                            loc_1244C:
00012C26 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012C2C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012C32 6100 0000                  		bsr.w	Obj63_ChangeDir
00012C36 6000 0000                  		bra.w	loc_124B2
00012C3A                            ; ===========================================================================
00012C3A                            
00012C3A                            loc_12460:				; XREF: Obj63_Main
00012C3A 1140 002F                  		move.b	d0,$2F(a0)
00012C3E 0240 007F                  		andi.w	#$7F,d0
00012C42 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012C46 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012C4C 6600 B1F6                  		bne.w	DeleteObject
00012C50 D040                       		add.w	d0,d0
00012C52 0240 001E                  		andi.w	#$1E,d0
00012C56 0640 0070                  		addi.w	#$70,d0
00012C5A 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012C60 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012C64 321A                       		move.w	(a2)+,d1
00012C66 2248                       		movea.l	a0,a1
00012C68 6000                       		bra.s	Obj63_MakePtfms
00012C6A                            ; ===========================================================================
00012C6A                            
00012C6A                            Obj63_Loop:
00012C6A 6100 B622                  		bsr.w	SingleObjLoad
00012C6E 6600                       		bne.s	loc_124AA
00012C70                            
00012C70                            Obj63_MakePtfms:			; XREF: loc_12460
00012C70 12BC 0063                  		move.b	#$63,0(a1)
00012C74 335A 0008                  		move.w	(a2)+,8(a1)
00012C78 335A 000C                  		move.w	(a2)+,$C(a1)
00012C7C 301A                       		move.w	(a2)+,d0
00012C7E 1340 0028                  		move.b	d0,$28(a1)
00012C82                            
00012C82                            loc_124AA:
00012C82 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012C86                            
00012C86 588F                       		addq.l	#4,sp
00012C88 4E75                       		rts	
00012C8A                            ; ===========================================================================
00012C8A                            
00012C8A                            loc_124B2:				; XREF: Obj63_Index
00012C8A 7200                       		moveq	#0,d1
00012C8C 1228 0019                  		move.b	$19(a0),d1
00012C90 4EB9 0000 7A88             		jsr	(PlatformObject).l
00012C96 6000 0000                  		bra.w	sub_12502
00012C9A                            ; ===========================================================================
00012C9A                            
00012C9A                            loc_124C2:				; XREF: Obj63_Index
00012C9A 7200                       		moveq	#0,d1
00012C9C 1228 0019                  		move.b	$19(a0),d1
00012CA0 4EB9 0000 7BFC             		jsr	(ExitPlatform).l
00012CA6 3F28 0008                  		move.w	8(a0),-(sp)
00012CAA 6100 0000                  		bsr.w	sub_12502
00012CAE 341F                       		move.w	(sp)+,d2
00012CB0 4EF9 0000 8166             		jmp	(MvSonicOnPtfm2).l
00012CB6                            ; ===========================================================================
00012CB6                            
00012CB6                            loc_124DE:				; XREF: Obj63_Index
00012CB6 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012CBA 0240 0003                  		andi.w	#3,d0
00012CBE 6600                       		bne.s	loc_124FC
00012CC0 7201                       		moveq	#1,d1
00012CC2 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012CC6 6700                       		beq.s	loc_124F2
00012CC8 4401                       		neg.b	d1
00012CCA                            
00012CCA                            loc_124F2:
00012CCA D328 001A                  		add.b	d1,$1A(a0)
00012CCE 0228 0003 001A             		andi.b	#3,$1A(a0)
00012CD4                            
00012CD4                            loc_124FC:
00012CD4 588F                       		addq.l	#4,sp
00012CD6 6000 D1D8                  		bra.w	MarkObjGone
00012CDA                            
00012CDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012CDA                            
00012CDA                            
00012CDA                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012CDA 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012CDE 6700                       		beq.s	loc_12520
00012CE0 4A28 003B                  		tst.b	$3B(a0)
00012CE4 6600                       		bne.s	loc_12520
00012CE6 117C 0001 003B             		move.b	#1,$3B(a0)
00012CEC 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012CF2 4428 003A                  		neg.b	$3A(a0)
00012CF6 6000                       		bra.s	loc_12534
00012CF8                            ; ===========================================================================
00012CF8                            
00012CF8                            loc_12520:
00012CF8 3028 0008                  		move.w	8(a0),d0
00012CFC B068 0034                  		cmp.w	$34(a0),d0
00012D00 6600                       		bne.s	loc_1256A
00012D02 3028 000C                  		move.w	$C(a0),d0
00012D06 B068 0036                  		cmp.w	$36(a0),d0
00012D0A 6600                       		bne.s	loc_1256A
00012D0C                            
00012D0C                            loc_12534:
00012D0C 7200                       		moveq	#0,d1
00012D0E 1228 0038                  		move.b	$38(a0),d1
00012D12 D228 003A                  		add.b	$3A(a0),d1
00012D16 B228 0039                  		cmp.b	$39(a0),d1
00012D1A 6500                       		bcs.s	loc_12552
00012D1C 1001                       		move.b	d1,d0
00012D1E 7200                       		moveq	#0,d1
00012D20 4A00                       		tst.b	d0
00012D22 6A00                       		bpl.s	loc_12552
00012D24 1228 0039                  		move.b	$39(a0),d1
00012D28 5901                       		subq.b	#4,d1
00012D2A                            
00012D2A                            loc_12552:
00012D2A 1141 0038                  		move.b	d1,$38(a0)
00012D2E 2268 003C                  		movea.l	$3C(a0),a1
00012D32 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012D38 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012D3E 6100 0000                  		bsr.w	Obj63_ChangeDir
00012D42                            
00012D42                            loc_1256A:
00012D42 6100 B09E                  		bsr.w	SpeedToPos
00012D46 4E75                       		rts	
00012D48                            ; End of function sub_12502
00012D48                            
00012D48                            
00012D48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012D48                            
00012D48                            
00012D48                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012D48 7000                       		moveq	#0,d0
00012D4A 343C FF00                  		move.w	#-$100,d2
00012D4E 3028 0008                  		move.w	8(a0),d0
00012D52 9068 0034                  		sub.w	$34(a0),d0
00012D56 6400                       		bcc.s	loc_12584
00012D58 4440                       		neg.w	d0
00012D5A 4442                       		neg.w	d2
00012D5C                            
00012D5C                            loc_12584:
00012D5C 7200                       		moveq	#0,d1
00012D5E 363C FF00                  		move.w	#-$100,d3
00012D62 3228 000C                  		move.w	$C(a0),d1
00012D66 9268 0036                  		sub.w	$36(a0),d1
00012D6A 6400                       		bcc.s	loc_12598
00012D6C 4441                       		neg.w	d1
00012D6E 4443                       		neg.w	d3
00012D70                            
00012D70                            loc_12598:
00012D70 B240                       		cmp.w	d0,d1
00012D72 6500                       		bcs.s	loc_125C2
00012D74 3028 0008                  		move.w	8(a0),d0
00012D78 9068 0034                  		sub.w	$34(a0),d0
00012D7C 6700                       		beq.s	loc_125AE
00012D7E 48C0                       		ext.l	d0
00012D80 E180                       		asl.l	#8,d0
00012D82 81C1                       		divs.w	d1,d0
00012D84 4440                       		neg.w	d0
00012D86                            
00012D86                            loc_125AE:
00012D86 3140 0010                  		move.w	d0,$10(a0)
00012D8A 3143 0012                  		move.w	d3,$12(a0)
00012D8E 4840                       		swap	d0
00012D90 3140 000A                  		move.w	d0,$A(a0)
00012D94 4268 000E                  		clr.w	$E(a0)
00012D98 4E75                       		rts	
00012D9A                            ; ===========================================================================
00012D9A                            
00012D9A                            loc_125C2:				; XREF: Obj63_ChangeDir
00012D9A 3228 000C                  		move.w	$C(a0),d1
00012D9E 9268 0036                  		sub.w	$36(a0),d1
00012DA2 6700                       		beq.s	loc_125D4
00012DA4 48C1                       		ext.l	d1
00012DA6 E181                       		asl.l	#8,d1
00012DA8 83C0                       		divs.w	d0,d1
00012DAA 4441                       		neg.w	d1
00012DAC                            
00012DAC                            loc_125D4:
00012DAC 3141 0012                  		move.w	d1,$12(a0)
00012DB0 3142 0010                  		move.w	d2,$10(a0)
00012DB4 4841                       		swap	d1
00012DB6 3141 000E                  		move.w	d1,$E(a0)
00012DBA 4268 000A                  		clr.w	$A(a0)
00012DBE 4E75                       		rts	
00012DC0                            ; End of function Obj63_ChangeDir
00012DC0                            
00012DC0                            ; ===========================================================================
00012DC0 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012DC2 0000                       		dc.w word_12610-Obj63_Data
00012DC4 0000                       		dc.w word_12628-Obj63_Data
00012DC6 0000                       		dc.w word_1263C-Obj63_Data
00012DC8 0000                       		dc.w word_12650-Obj63_Data
00012DCA 0000                       		dc.w word_12668-Obj63_Data
00012DCC 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012DDC 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012DE8 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012DF8 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012E00 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012E14 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012E28 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012E40 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012E54                            
00012E54                            ; ---------------------------------------------------------------------------
00012E54                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012E54                            ; ---------------------------------------------------------------------------
00012E54                            Map_obj63:
00012E54                            	include "_maps\obj63.asm"
00012E54                            ; ---------------------------------------------------------------------------
00012E54                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012E54                            ; ---------------------------------------------------------------------------
00012E54 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012E58 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012E5C 0000                       		dc.w byte_1269E-Map_obj63
00012E5E 01                         byte_12686:	dc.b 1
00012E5F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012E64 01                         byte_1268C:	dc.b 1
00012E65 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012E6A 01                         byte_12692:	dc.b 1
00012E6B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012E70 01                         byte_12698:	dc.b 1
00012E71 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012E76 01                         byte_1269E:	dc.b 1
00012E77 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012E7C                            		even
00012E7C                            		even
00012E7C                            
00012E7C                            ; ===========================================================================
00012E7C                            ; ---------------------------------------------------------------------------
00012E7C                            ; Object 64 - bubbles (LZ)
00012E7C                            ; ---------------------------------------------------------------------------
00012E7C                            
00012E7C                            Obj64:					; XREF: Obj_Index
00012E7C 7000                       		moveq	#0,d0
00012E7E 1028 0024                  		move.b	$24(a0),d0
00012E82 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012E86 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012E8A                            ; ===========================================================================
00012E8A 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012E8C 0000                       		dc.w Obj64_Animate-Obj64_Index
00012E8E 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012E90 0000                       		dc.w Obj64_Display2-Obj64_Index
00012E92 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012E94 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012E96                            ; ===========================================================================
00012E96                            
00012E96                            Obj64_Main:				; XREF: Obj64_Index
00012E96 5428 0024                  		addq.b	#2,$24(a0)
00012E9A 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012EA2 317C 8348 0002             		move.w	#$8348,2(a0)
00012EA8 117C 0084 0001             		move.b	#$84,1(a0)
00012EAE 117C 0010 0019             		move.b	#$10,$19(a0)
00012EB4 117C 0001 0018             		move.b	#1,$18(a0)
00012EBA 1028 0028                  		move.b	$28(a0),d0	; get object type
00012EBE 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012EC0 5028 0024                  		addq.b	#8,$24(a0)
00012EC4 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012EC8 1140 0032                  		move.b	d0,$32(a0)
00012ECC 1140 0033                  		move.b	d0,$33(a0)
00012ED0 117C 0006 001C             		move.b	#6,$1C(a0)
00012ED6 6000 0000                  		bra.w	Obj64_BblMaker
00012EDA                            ; ===========================================================================
00012EDA                            
00012EDA                            Obj64_Bubble:				; XREF: Obj64_Main
00012EDA 1140 001C                  		move.b	d0,$1C(a0)
00012EDE 3168 0008 0030             		move.w	8(a0),$30(a0)
00012EE4 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012EEA 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00012EF0 1140 0026                  		move.b	d0,$26(a0)
00012EF4                            
00012EF4                            Obj64_Animate:				; XREF: Obj64_Index
00012EF4 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012EFA 4EB9 0000 AEC8             		jsr	AnimateSprite
00012F00 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012F06 6600                       		bne.s	Obj64_ChkWater
00012F08 117C 0001 002E             		move.b	#1,$2E(a0)
00012F0E                            
00012F0E                            Obj64_ChkWater:				; XREF: Obj64_Index
00012F0E 3038 F646                  		move.w	($FFFFF646).w,d0
00012F12 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012F16 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012F18                            
00012F18                            Obj64_Burst:				; XREF: Obj64_Wobble
00012F18 117C 0006 0024             		move.b	#6,$24(a0)
00012F1E 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012F22 6000 0000                  		bra.w	Obj64_Display2
00012F26                            ; ===========================================================================
00012F26                            
00012F26                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012F26 1028 0026                  		move.b	$26(a0),d0
00012F2A 5228 0026                  		addq.b	#1,$26(a0)
00012F2E 0240 007F                  		andi.w	#$7F,d0
00012F32 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012F38 1031 0000                  		move.b	(a1,d0.w),d0
00012F3C 4880                       		ext.w	d0
00012F3E D068 0030                  		add.w	$30(a0),d0
00012F42 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012F46 4A28 002E                  		tst.b	$2E(a0)
00012F4A 6700                       		beq.s	Obj64_Display
00012F4C 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012F50 6700                       		beq.s	Obj64_Display	; if not, branch
00012F52                            
00012F52 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012F56 303C 00AD                  		move.w	#$AD,d0
00012F5A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012F60 43F8 D000                  		lea	($FFFFD000).w,a1
00012F64 4269 0010                  		clr.w	$10(a1)
00012F68 4269 0012                  		clr.w	$12(a1)
00012F6C 4269 0014                  		clr.w	$14(a1)
00012F70 137C 0015 001C             		move.b	#$15,$1C(a1)
00012F76 337C 0023 003E             		move.w	#$23,$3E(a1)
00012F7C 137C 0000 003C             		move.b	#0,$3C(a1)
00012F82 08A9 0005 0022             		bclr	#5,$22(a1)
00012F88 08A9 0004 0022             		bclr	#4,$22(a1)
00012F8E 0829 0002 0022             		btst	#2,$22(a1)
00012F94 6700 FF82                  		beq.w	Obj64_Burst
00012F98 08A9 0002 0022             		bclr	#2,$22(a1)
00012F9E 137C 0013 0016             		move.b	#$13,$16(a1)
00012FA4 137C 0009 0017             		move.b	#9,$17(a1)
00012FAA 5B69 000C                  		subq.w	#5,$C(a1)
00012FAE 6000 FF68                  		bra.w	Obj64_Burst
00012FB2                            ; ===========================================================================
00012FB2                            
00012FB2                            Obj64_Display:				; XREF: Obj64_Wobble
00012FB2 6100 AE2E                  		bsr.w	SpeedToPos
00012FB6 4A28 0001                  		tst.b	1(a0)
00012FBA 6A00                       		bpl.s	Obj64_Delete
00012FBC 4EFA AE4A                  		jmp	DisplaySprite
00012FC0                            ; ===========================================================================
00012FC0                            
00012FC0                            Obj64_Delete:
00012FC0 4EFA AE82                  		jmp	DeleteObject
00012FC4                            ; ===========================================================================
00012FC4                            
00012FC4                            Obj64_Display2:				; XREF: Obj64_Index
00012FC4 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012FCA 4EB9 0000 AEC8             		jsr	AnimateSprite
00012FD0 4A28 0001                  		tst.b	1(a0)
00012FD4 6A00                       		bpl.s	Obj64_Delete2
00012FD6 4EFA AE30                  		jmp	DisplaySprite
00012FDA                            ; ===========================================================================
00012FDA                            
00012FDA                            Obj64_Delete2:
00012FDA 4EFA AE68                  		jmp	DeleteObject
00012FDE                            ; ===========================================================================
00012FDE                            
00012FDE                            Obj64_Delete3:				; XREF: Obj64_Index
00012FDE 6000 AE64                  		bra.w	DeleteObject
00012FE2                            ; ===========================================================================
00012FE2                            
00012FE2                            Obj64_BblMaker:				; XREF: Obj64_Index
00012FE2 4A68 0036                  		tst.w	$36(a0)
00012FE6 6600                       		bne.s	loc_12874
00012FE8 3038 F646                  		move.w	($FFFFF646).w,d0
00012FEC B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012FF0 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012FF4 4A28 0001                  		tst.b	1(a0)
00012FF8 6A00 0000                  		bpl.w	Obj64_ChkDel
00012FFC 5368 0038                  		subq.w	#1,$38(a0)
00013000 6A00 0000                  		bpl.w	loc_12914
00013004 317C 0001 0036             		move.w	#1,$36(a0)
0001300A                            
0001300A                            loc_1283A:
0001300A 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00013010 3200                       		move.w	d0,d1
00013012 0240 0007                  		andi.w	#7,d0
00013016 0C40 0006                  		cmpi.w	#6,d0
0001301A 64EE                       		bcc.s	loc_1283A
0001301C                            
0001301C 1140 0034                  		move.b	d0,$34(a0)
00013020 0241 000C                  		andi.w	#$C,d1
00013024 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
0001302A D2C1                       		adda.w	d1,a1
0001302C 2149 003C                  		move.l	a1,$3C(a0)
00013030 5328 0032                  		subq.b	#1,$32(a0)
00013034 6A00                       		bpl.s	loc_12872
00013036 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001303C 08E8 0007 0036             		bset	#7,$36(a0)
00013042                            
00013042                            loc_12872:
00013042 6000                       		bra.s	loc_1287C
00013044                            ; ===========================================================================
00013044                            
00013044                            loc_12874:				; XREF: Obj64_BblMaker
00013044 5368 0038                  		subq.w	#1,$38(a0)
00013048 6A00 0000                  		bpl.w	loc_12914
0001304C                            
0001304C                            loc_1287C:
0001304C 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00013052 0240 001F                  		andi.w	#$1F,d0
00013056 3140 0038                  		move.w	d0,$38(a0)
0001305A 6100 B232                  		bsr.w	SingleObjLoad
0001305E 6600                       		bne.s	loc_128F8
00013060 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00013064 3368 0008 0008             		move.w	8(a0),8(a1)
0001306A 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00013070 0240 000F                  		andi.w	#$F,d0
00013074 5140                       		subq.w	#8,d0
00013076 D169 0008                  		add.w	d0,8(a1)
0001307A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013080 7000                       		moveq	#0,d0
00013082 1028 0034                  		move.b	$34(a0),d0
00013086 2468 003C                  		movea.l	$3C(a0),a2
0001308A 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00013090 0828 0007 0036             		btst	#7,$36(a0)
00013096 6700                       		beq.s	loc_128F8
00013098 4EB9 0000 2CC6             		jsr	(RandomNumber).l
0001309E 0240 0003                  		andi.w	#3,d0
000130A2 6600                       		bne.s	loc_128E4
000130A4 08E8 0006 0036             		bset	#6,$36(a0)
000130AA 6600                       		bne.s	loc_128F8
000130AC 137C 0002 0028             		move.b	#2,$28(a1)
000130B2                            
000130B2                            loc_128E4:
000130B2 4A28 0034                  		tst.b	$34(a0)
000130B6 6600                       		bne.s	loc_128F8
000130B8 08E8 0006 0036             		bset	#6,$36(a0)
000130BE 6600                       		bne.s	loc_128F8
000130C0 137C 0002 0028             		move.b	#2,$28(a1)
000130C6                            
000130C6                            loc_128F8:
000130C6 5328 0034                  		subq.b	#1,$34(a0)
000130CA 6A00                       		bpl.s	loc_12914
000130CC 4EB9 0000 2CC6             		jsr	(RandomNumber).l
000130D2 0240 007F                  		andi.w	#$7F,d0
000130D6 0640 0080                  		addi.w	#$80,d0
000130DA D168 0038                  		add.w	d0,$38(a0)
000130DE 4268 0036                  		clr.w	$36(a0)
000130E2                            
000130E2                            loc_12914:
000130E2 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000130E8 4EB9 0000 AEC8             		jsr	AnimateSprite
000130EE                            
000130EE                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000130EE 3028 0008                  		move.w	8(a0),d0
000130F2 0240 FF80                  		andi.w	#$FF80,d0
000130F6 3238 F700                  		move.w	($FFFFF700).w,d1
000130FA 0441 0080                  		subi.w	#$80,d1
000130FE 0241 FF80                  		andi.w	#$FF80,d1
00013102 9041                       		sub.w	d1,d0
00013104 0C40 0280                  		cmpi.w	#$280,d0
00013108 6200 AD3A                  		bhi.w	DeleteObject
0001310C 3038 F646                  		move.w	($FFFFF646).w,d0
00013110 B068 000C                  		cmp.w	$C(a0),d0
00013114 6500 ACF2                  		bcs.w	DisplaySprite
00013118 4E75                       		rts	
0001311A                            ; ===========================================================================
0001311A                            ; bubble production sequence
0001311A                            
0001311A                            ; 0 = small bubble, 1 =	large bubble
0001311A                            
0001311A 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
0001312C                            
0001312C                            ; ===========================================================================
0001312C                            
0001312C                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
0001312C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013130 6B00                       		bmi.s	loc_12998
00013132 43F8 D000                  		lea	($FFFFD000).w,a1
00013136 3029 0008                  		move.w	8(a1),d0
0001313A 3228 0008                  		move.w	8(a0),d1
0001313E 0441 0010                  		subi.w	#$10,d1
00013142 B240                       		cmp.w	d0,d1
00013144 6400                       		bcc.s	loc_12998
00013146 0641 0020                  		addi.w	#$20,d1
0001314A B240                       		cmp.w	d0,d1
0001314C 6500                       		bcs.s	loc_12998
0001314E 3029 000C                  		move.w	$C(a1),d0
00013152 3228 000C                  		move.w	$C(a0),d1
00013156 B240                       		cmp.w	d0,d1
00013158 6400                       		bcc.s	loc_12998
0001315A 0641 0010                  		addi.w	#$10,d1
0001315E B240                       		cmp.w	d0,d1
00013160 6500                       		bcs.s	loc_12998
00013162 7001                       		moveq	#1,d0
00013164 4E75                       		rts	
00013166                            ; ===========================================================================
00013166                            
00013166                            loc_12998:
00013166 7000                       		moveq	#0,d0
00013168 4E75                       		rts	
0001316A                            ; ===========================================================================
0001316A                            Ani_obj64:
0001316A                            	include "_anim\obj64.asm"
0001316A                            ; ---------------------------------------------------------------------------
0001316A                            ; Animation script - bubbles (LZ)
0001316A                            ; ---------------------------------------------------------------------------
0001316A 0000                       		dc.w byte_129AA-Ani_obj64
0001316C 0000                       		dc.w byte_129B0-Ani_obj64
0001316E 0000                       		dc.w byte_129B6-Ani_obj64
00013170 0000                       		dc.w byte_129BE-Ani_obj64
00013172 0000                       		dc.w byte_129BE-Ani_obj64
00013174 0000                       		dc.w byte_129C0-Ani_obj64
00013176 0000                       		dc.w byte_129C6-Ani_obj64
00013178 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
0001317E 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00013184 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
0001318C 04FC                       byte_129BE:	dc.b 4,	$FC
0001318E 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00013194 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
0001319A 00                         		even
0001319A 00                         		even
0001319A                            
0001319A                            ; ---------------------------------------------------------------------------
0001319A                            ; Sprite mappings - bubbles (LZ)
0001319A                            ; ---------------------------------------------------------------------------
0001319A                            Map_obj64:
0001319A                            	include "_maps\obj64.asm"
0001319A                            ; ---------------------------------------------------------------------------
0001319A                            ; Sprite mappings - bubbles (LZ)
0001319A                            ; ---------------------------------------------------------------------------
0001319A 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
0001319E 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
000131A2 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000131A6 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
000131AA 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000131AE 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000131B2 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
000131B6 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000131BA 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
000131BE 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
000131C2 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
000131C6 0000                       		dc.w byte_12A9C-Map_obj64
000131C8 01                         byte_129FA:	dc.b 1
000131C9 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
000131CE 01                         byte_12A00:	dc.b 1
000131CF FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000131D4 01                         byte_12A06:	dc.b 1
000131D5 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000131DA 01                         byte_12A0C:	dc.b 1
000131DB F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000131E0 01                         byte_12A12:	dc.b 1
000131E1 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000131E6 01                         byte_12A18:	dc.b 1
000131E7 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
000131EC 01                         byte_12A1E:	dc.b 1
000131ED F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
000131F2 04                         byte_12A24:	dc.b 4
000131F3 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
000131F8 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
000131FD 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013202 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013207 04                         byte_12A39:	dc.b 4
00013208 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
0001320D F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013212 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013217 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
0001321C 01                         byte_12A4E:	dc.b 1
0001321D F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013222 01                         byte_12A54:	dc.b 1
00013223 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013228 01                         byte_12A5A:	dc.b 1
00013229 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
0001322E 01                         byte_12A60:	dc.b 1
0001322F F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013234 01                         byte_12A66:	dc.b 1
00013235 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
0001323A 01                         byte_12A6C:	dc.b 1
0001323B F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013240 01                         byte_12A72:	dc.b 1
00013241 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013246 01                         byte_12A78:	dc.b 1
00013247 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
0001324C 01                         byte_12A7E:	dc.b 1
0001324D F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013252 01                         byte_12A84:	dc.b 1
00013253 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013258 01                         byte_12A8A:	dc.b 1
00013259 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
0001325E 01                         byte_12A90:	dc.b 1
0001325F F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013264 01                         byte_12A96:	dc.b 1
00013265 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
0001326A 00                         byte_12A9C:	dc.b 0
0001326C 00                         		even
0001326C 00                         		even
0001326C                            
0001326C                            ; ===========================================================================
0001326C                            ; ---------------------------------------------------------------------------
0001326C                            ; Object 65 - waterfalls (LZ)
0001326C                            ; ---------------------------------------------------------------------------
0001326C                            
0001326C                            Obj65:					; XREF: Obj_Index
0001326C 7000                       		moveq	#0,d0
0001326E 1028 0024                  		move.b	$24(a0),d0
00013272 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013276 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001327A                            ; ===========================================================================
0001327A 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
0001327C 0000                       		dc.w Obj65_Animate-Obj65_Index
0001327E 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013280 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013282 0000                       		dc.w loc_12B36-Obj65_Index
00013284                            ; ===========================================================================
00013284                            
00013284                            Obj65_Main:				; XREF: Obj65_Index
00013284 5828 0024                  		addq.b	#4,$24(a0)
00013288 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013290 317C 4259 0002             		move.w	#$4259,2(a0)
00013296 0028 0004 0001             		ori.b	#4,1(a0)
0001329C 117C 0018 0019             		move.b	#$18,$19(a0)
000132A2 117C 0001 0018             		move.b	#1,$18(a0)
000132A8 1028 0028                  		move.b	$28(a0),d0	; get object type
000132AC 6A00                       		bpl.s	loc_12AE6
000132AE 08E8 0007 0002             		bset	#7,2(a0)
000132B4                            
000132B4                            loc_12AE6:
000132B4 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000132B8 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000132BC 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000132C0 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000132C2 4228 0018                  		clr.b	$18(a0)
000132C6 5528 0024                  		subq.b	#2,$24(a0)
000132CA 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000132D0 6700                       		beq.s	loc_12B0A	; if not, branch
000132D2 117C 0006 0024             		move.b	#6,$24(a0)
000132D8                            
000132D8                            loc_12B0A:
000132D8 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000132DE 6700                       		beq.s	Obj65_Animate	; if not, branch
000132E0 117C 0008 0024             		move.b	#8,$24(a0)
000132E6                            
000132E6                            Obj65_Animate:				; XREF: Obj65_Index
000132E6 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000132EC 4EB9 0000 AEC8             		jsr	AnimateSprite
000132F2                            
000132F2                            Obj65_ChkDel:				; XREF: Obj65_Index
000132F2 6000 CBBC                  		bra.w	MarkObjGone
000132F6                            ; ===========================================================================
000132F6                            
000132F6                            Obj65_FixHeight:			; XREF: Obj65_Index
000132F6 3038 F646                  		move.w	($FFFFF646).w,d0
000132FA 0440 0010                  		subi.w	#$10,d0
000132FE 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013302 60E2                       		bra.s	Obj65_Animate
00013304                            ; ===========================================================================
00013304                            
00013304                            loc_12B36:				; XREF: Obj65_Index
00013304 08A8 0007 0002             		bclr	#7,2(a0)
0001330A 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013310 6600                       		bne.s	Obj65_Animate2
00013312 08E8 0007 0002             		bset	#7,2(a0)
00013318                            
00013318                            Obj65_Animate2:
00013318 60CC                       		bra.s	Obj65_Animate
0001331A                            ; ===========================================================================
0001331A                            Ani_obj65:
0001331A                            	include "_anim\obj65.asm"
0001331A                            ; ---------------------------------------------------------------------------
0001331A                            ; Animation script - waterfall (LZ)
0001331A                            ; ---------------------------------------------------------------------------
0001331A 0000                       		dc.w byte_12B4E-Ani_obj65
0001331C 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013322 00                         		even
00013322 00                         		even
00013322                            
00013322                            ; ---------------------------------------------------------------------------
00013322                            ; Sprite mappings - waterfalls (LZ)
00013322                            ; ---------------------------------------------------------------------------
00013322                            Map_obj65:
00013322                            	include "_maps\obj65.asm"
00013322                            ; ---------------------------------------------------------------------------
00013322                            ; Sprite mappings - waterfalls (LZ)
00013322                            ; ---------------------------------------------------------------------------
00013322 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013326 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001332A 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
0001332E 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013332 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013336 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001333A 01                         byte_12B6C:	dc.b 1
0001333B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013340 02                         byte_12B72:	dc.b 2
00013341 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013346 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001334B 02                         byte_12B7D:	dc.b 2
0001334C F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013351 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013356 01                         byte_12B88:	dc.b 1
00013357 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
0001335C 02                         byte_12B8E:	dc.b 2
0001335D F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013362 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013367 01                         byte_12B99:	dc.b 1
00013368 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
0001336D 01                         byte_12B9F:	dc.b 1
0001336E F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013373 01                         byte_12BA5:	dc.b 1
00013374 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013379 02                         byte_12BAB:	dc.b 2
0001337A F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
0001337F 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013384 02                         byte_12BB6:	dc.b 2
00013385 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001338A F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001338F 02                         byte_12BC1:	dc.b 2
00013390 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013395 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001339A 02                         byte_12BCC:	dc.b 2
0001339B F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000133A0 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000133A6 00                         		even
000133A6 00                         		even
000133A6                            
000133A6                            ; ===========================================================================
000133A6                            ; ---------------------------------------------------------------------------
000133A6                            ; Object 01 - Sonic
000133A6                            ; ---------------------------------------------------------------------------
000133A6                            
000133A6                            Obj01:					; XREF: Obj_Index
000133A6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000133AA 6700                       		beq.s	Obj01_Normal	; if not, branch
000133AC 4EF9 0000 0000             		jmp	DebugMode
000133B2                            ; ===========================================================================
000133B2                            
000133B2                            Obj01_Normal:
000133B2 7000                       		moveq	#0,d0
000133B4 1028 0024                  		move.b	$24(a0),d0
000133B8 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000133BC 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000133C0                            ; ===========================================================================
000133C0 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000133C2 0000                       		dc.w Obj01_Control-Obj01_Index
000133C4 0000                       		dc.w Obj01_Hurt-Obj01_Index
000133C6 0000                       		dc.w Obj01_Death-Obj01_Index
000133C8 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000133CA                            ; ===========================================================================
000133CA                            
000133CA                            Player_Maps:
000133CA 0000 0000                  	dc.l	Map_Sonic
000133CE 0000 0000                  	dc.l	Map_Sonic ; gronic
000133D2 0000 0000                  	dc.l	Map_Sonic ; anakama
000133D6                            	; insert player mapping here
000133D6                            	
000133D6                            Obj01_Main:				; XREF: Obj01_Index
000133D6 5428 0024                  		addq.b	#2,$24(a0)
000133DA 117C 0013 0016             		move.b	#$13,$16(a0)
000133E0 117C 0009 0017             		move.b	#9,$17(a0)
000133E6                            		
000133E6 7000                       		moveq	#0,d0
000133E8 1038 FFE8                  		move.b	(v_character),d0
000133EC E548                       		lsl.w	#2,d0
000133EE 43FA FFDA                  		lea 	Player_Maps(pc),a1
000133F2 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
000133F8                            		
000133F8 317C 0780 0002             		move.w	#$780,2(a0)
000133FE 117C 0002 0018             		move.b	#2,$18(a0)
00013404 117C 0018 0019             		move.b	#$18,$19(a0)
0001340A 117C 0004 0001             		move.b	#4,1(a0)
00013410 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013416 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
0001341C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013422                            
00013422                            Obj01_Control:				; XREF: Obj01_Index
00013422 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013426 6700                       		beq.s	loc_12C58	; if not, branch
00013428 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
0001342E 6700                       		beq.s	loc_12C58	; if not, branch
00013430 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013436 4238 F7CC                  		clr.b	($FFFFF7CC).w
0001343A 4E75                       		rts	
0001343C                            ; ===========================================================================
0001343C                            
0001343C                            loc_12C58:
0001343C 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013440 6600                       		bne.s	loc_12C64	; if yes, branch
00013442 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013448                            
00013448                            loc_12C64:
00013448 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
0001344E 6600                       		bne.s	loc_12C7E	; if yes, branch
00013450 7000                       		moveq	#0,d0
00013452 1028 0022                  		move.b	$22(a0),d0
00013456 0240 0006                  		andi.w	#6,d0
0001345A 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
0001345E 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013462                            
00013462                            loc_12C7E:
00013462 6100                       		bsr.s	Sonic_Display
00013464 6100 0000                  		bsr.w	Sonic_RecordPos
00013468 6100 0000                  		bsr.w	Sonic_Water
0001346C 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013472 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00013478 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001347C 6700                       		beq.s	loc_12CA6
0001347E 4A28 001C                  		tst.b	$1C(a0)
00013482 6600                       		bne.s	loc_12CA6
00013484 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
0001348A                            
0001348A                            loc_12CA6:
0001348A 6100 0000                  		bsr.w	Sonic_Animate
0001348E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013492 6B00                       		bmi.s	loc_12CB6
00013494 4EB9 0000 0000             		jsr	TouchResponse
0001349A                            
0001349A                            loc_12CB6:
0001349A 6100 0000                  		bsr.w	Sonic_Loops
0001349E 6100 0000                  		bsr.w	LoadSonicDynPLC
000134A2 4E75                       		rts	
000134A4                            ; ===========================================================================
000134A4 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000134A6 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000134A8 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000134AA 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000134AC                            ; ---------------------------------------------------------------------------
000134AC                            ; Music	to play	after invincibility wears off
000134AC                            ; ---------------------------------------------------------------------------
000134AC                            ; ===========================================================================
000134AC                            
000134AC                            Sonic_Display:				; XREF: loc_12C7E
000134AC 3028 0030                  		move.w	$30(a0),d0
000134B0 6700                       		beq.s	Obj01_Display
000134B2 5368 0030                  		subq.w	#1,$30(a0)
000134B6 E648                       		lsr.w	#3,d0
000134B8 6400                       		bcc.s	Obj01_ChkInvin
000134BA                            
000134BA                            Obj01_Display:
000134BA 4EBA A94C                  		jsr	DisplaySprite
000134BE                            
000134BE                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000134BE                             
000134BE                            Obj01_ChkInvin:
000134BE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000134C2 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000134C6 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000134CA 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
000134CE 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000134D2 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
000134D6 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000134DA 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
000134DE 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000134E4 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
000134E8 7000                       		moveq	#0,d0
000134EA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000134EE                             
000134EE 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000134F4 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
000134F6 43F9 0000 3C72             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000134FC 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000134FE                             
000134FE                            Obj01_GetBgm2:
000134FE 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013504 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013506 43F9 0000 3C7A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001350C 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001350E                             
0001350E                            Obj01_GetBgm3:
0001350E 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013514 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013516 43F9 0000 3C80             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0001351C 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001351E                             
0001351E                            Obj01_GetBgm4:
0001351E 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013524 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013526 43F9 0000 3C86             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001352C                             
0001352C                            Obj01_PlayMusic:
0001352C 1031 0000                  		move.b	(a1,d0.w),d0
00013530 4EB9 0000 15BA             		jsr	(PlaySound).l	; play normal music
00013536                             
00013536                            ; NineKode ends here.
00013536                            
00013536                            Obj01_RmvInvin:
00013536 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
0001353C                            
0001353C                            Obj01_ChkShoes:
0001353C 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013540 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013542 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013546 6700                       		beq.s	Obj01_ExitChk
00013548 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
0001354C 6600                       		bne.s	Obj01_ExitChk
0001354E 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013554 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001355A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013560 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013566 303C 00E3                  		move.w	#$E3,d0
0001356A 4EF9 0000 15BA             		jmp	(PlaySound).l	; run music at normal speed
00013570                            ; ===========================================================================
00013570                            
00013570                            Obj01_ExitChk:
00013570 4E75                       		rts	
00013572                            
00013572                            ; ---------------------------------------------------------------------------
00013572                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013572                            ; ---------------------------------------------------------------------------
00013572                            
00013572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013572                            
00013572                            
00013572                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00013572 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00013576 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001357A 43F1 0000                  		lea	(a1,d0.w),a1
0001357E 32E8 0008                  		move.w	8(a0),(a1)+
00013582 32E8 000C                  		move.w	$C(a0),(a1)+
00013586 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
0001358A 4E75                       		rts	
0001358C                            ; End of function Sonic_RecordPos
0001358C                            
0001358C                            ; ---------------------------------------------------------------------------
0001358C                            ; Subroutine for Sonic when he's underwater
0001358C                            ; ---------------------------------------------------------------------------
0001358C                            
0001358C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001358C                            
0001358C                            
0001358C                            Sonic_Water:				; XREF: loc_12C7E
0001358C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013592 6700                       		beq.s	Obj01_InWater	; if yes, branch
00013594                            
00013594                            locret_12D80:
00013594 4E75                       		rts	
00013596                            ; ===========================================================================
00013596                            
00013596                            Obj01_InWater:
00013596 3038 F646                  		move.w	($FFFFF646).w,d0
0001359A B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
0001359E 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000135A0 08E8 0006 0022             		bset	#6,$22(a0)
000135A6 66EC                       		bne.s	locret_12D80
000135A8 6100 0000                  		bsr.w	ResumeMusic
000135AC 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000135B2 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000135B8 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
000135BE 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000135C4 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000135CA E0E8 0010                  		asr	$10(a0)
000135CE E0E8 0012                  		asr	$12(a0)
000135D2 E0E8 0012                  		asr	$12(a0)
000135D6 67BC                       		beq.s	locret_12D80
000135D8 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000135DE 303C 00AA                  		move.w	#$AA,d0
000135E2 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
000135E8                            ; ===========================================================================
000135E8                            
000135E8                            Obj01_OutWater:
000135E8 08A8 0006 0022             		bclr	#6,$22(a0)
000135EE 67A4                       		beq.s	locret_12D80
000135F0 6100 0000                  		bsr.w	ResumeMusic
000135F4 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000135FA 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013600 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013606 E1E8 0012                  		asl	$12(a0)
0001360A 6700 FF88                  		beq.w	locret_12D80
0001360E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013614 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
0001361A 6E00                       		bgt.s	loc_12E0E
0001361C 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013622                            
00013622                            loc_12E0E:
00013622 303C 00AA                  		move.w	#$AA,d0
00013626 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
0001362C                            ; End of function Sonic_Water
0001362C                            
0001362C                            ; ===========================================================================
0001362C                            ; ---------------------------------------------------------------------------
0001362C                            ; Modes	for controlling	Sonic
0001362C                            ; ---------------------------------------------------------------------------
0001362C                            
0001362C                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001362C 6100 0000                  		bsr.w	Sonic_Jump
00013630 6100 0000                  		bsr.w	Sonic_SlopeResist
00013634 6100 0000                  		bsr.w	Sonic_Move
00013638 6100 0000                  		bsr.w	Sonic_Roll
0001363C 6100 0000                  		bsr.w	Sonic_LevelBound
00013640 4EBA A7A0                  		jsr	SpeedToPos
00013644 6100 0000                  		bsr.w	Sonic_AnglePos
00013648 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001364C 4E75                       		rts	
0001364E                            ; ===========================================================================
0001364E                            
0001364E                            Obj01_MdJump:				; XREF: Obj01_Modes
0001364E 6100 0000                  		bsr.w	Sonic_JumpHeight
00013652 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013656 6100 0000                  		bsr.w	Sonic_LevelBound
0001365A 4EBA A75A                  		jsr	ObjectFall
0001365E 0828 0006 0022             		btst	#6,$22(a0)
00013664 6700                       		beq.s	loc_12E5C
00013666 0468 0028 0012             		subi.w	#$28,$12(a0)
0001366C                            
0001366C                            loc_12E5C:
0001366C 6100 0000                  		bsr.w	Sonic_JumpAngle
00013670 6100 0000                  		bsr.w	Sonic_Floor
00013674 4E75                       		rts	
00013676                            ; ===========================================================================
00013676                            
00013676                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013676 6100 0000                  		bsr.w	Sonic_Jump
0001367A 6100 0000                  		bsr.w	Sonic_RollRepel
0001367E 6100 0000                  		bsr.w	Sonic_RollSpeed
00013682 6100 0000                  		bsr.w	Sonic_LevelBound
00013686 4EBA A75A                  		jsr	SpeedToPos
0001368A 6100 0000                  		bsr.w	Sonic_AnglePos
0001368E 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013692 4E75                       		rts	
00013694                            ; ===========================================================================
00013694                            
00013694                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013694 6100 0000                  		bsr.w	Sonic_JumpHeight
00013698 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001369C 6100 0000                  		bsr.w	Sonic_LevelBound
000136A0 6100 0000                  		bsr.w	Sonic_AirUnroll
000136A4 4EBA A710                  		jsr	ObjectFall
000136A8 0828 0006 0022             		btst	#6,$22(a0)
000136AE 6700                       		beq.s	loc_12EA6
000136B0 0468 0028 0012             		subi.w	#$28,$12(a0)
000136B6                            
000136B6                            loc_12EA6:
000136B6 6100 0000                  		bsr.w	Sonic_JumpAngle
000136BA 6100 0000                  		bsr.w	Sonic_Floor
000136BE 4E75                       		rts	
000136C0                            ; ---------------------------------------------------------------------------
000136C0                            ; Subroutine to	make Sonic walk/run
000136C0                            ; ---------------------------------------------------------------------------
000136C0                            
000136C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136C0                            
000136C0                            
000136C0                            Sonic_Move:				; XREF: Obj01_MdNormal
000136C0 3C38 F760                  		move.w	($FFFFF760).w,d6
000136C4 3A38 F762                  		move.w	($FFFFF762).w,d5
000136C8 3838 F764                  		move.w	($FFFFF764).w,d4
000136CC 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000136D0 6600 0000                  		bne.w	loc_12FEE
000136D4 4A68 003E                  		tst.w	$3E(a0)
000136D8 6600 0000                  		bne.w	Obj01_ResetScr
000136DC 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000136E2 6700                       		beq.s	Obj01_NotLeft	; if not, branch
000136E4 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000136EA 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
000136EC 6100 0000                  		bsr.w	Sonic_MoveLeft
000136F0                            
000136F0                            Obj01_NotLeft:
000136F0 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000136F6 6700                       		beq.s	Obj01_NotRight	; if not, branch
000136F8 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000136FE 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013700 6100 0000                  		bsr.w	Sonic_MoveLeft
00013704 6000                       		bra.s	Obj01_NotRight
00013706                            
00013706                            Obj01_MoveRight:
00013706 6100 0000                  		bsr.w	Sonic_MoveRight
0001370A                            
0001370A                            Obj01_NotRight:
0001370A 1028 0026                  		move.b	$26(a0),d0
0001370E 0600 0020                  		addi.b	#$20,d0
00013712 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013716 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001371A 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001371E 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013722 08A8 0005 0022             		bclr	#5,$22(a0)
00013728 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001372E 0828 0003 0022             		btst	#3,$22(a0)
00013734 6700                       		beq.s	Sonic_Balance
00013736 7000                       		moveq	#0,d0
00013738 1028 003D                  		move.b	$3D(a0),d0
0001373C ED48                       		lsl.w	#6,d0
0001373E 43F8 D000                  		lea	($FFFFD000).w,a1
00013742 43F1 0000                  		lea	(a1,d0.w),a1
00013746 4A29 0022                  		tst.b	$22(a1)
0001374A 6B00                       		bmi.s	Sonic_LookUp
0001374C 7200                       		moveq	#0,d1
0001374E 1229 0019                  		move.b	$19(a1),d1
00013752 3401                       		move.w	d1,d2
00013754 D442                       		add.w	d2,d2
00013756 5942                       		subq.w	#4,d2
00013758 D268 0008                  		add.w	8(a0),d1
0001375C 9269 0008                  		sub.w	8(a1),d1
00013760 0C41 0004                  		cmpi.w	#4,d1
00013764 6D00                       		blt.s	loc_12F6A
00013766 B242                       		cmp.w	d2,d1
00013768 6C00                       		bge.s	loc_12F5A
0001376A 6000                       		bra.s	Sonic_LookUp
0001376C                            ; ===========================================================================
0001376C                            
0001376C                            Sonic_Balance:
0001376C 4EB9 0000 0000             		jsr	ObjHitFloor
00013772 0C41 000C                  		cmpi.w	#$C,d1
00013776 6D00                       		blt.s	Sonic_LookUp
00013778 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001377E 6600                       		bne.s	loc_12F62
00013780                            
00013780                            loc_12F5A:
00013780 08A8 0000 0022             		bclr	#0,$22(a0)
00013786 6000                       		bra.s	loc_12F70
00013788                            ; ===========================================================================
00013788                            
00013788                            loc_12F62:
00013788 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001378E 6600                       		bne.s	Sonic_LookUp
00013790                            
00013790                            loc_12F6A:
00013790 08E8 0000 0022             		bset	#0,$22(a0)
00013796                            
00013796                            loc_12F70:
00013796 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
0001379C 6000                       		bra.s	Obj01_ResetScr
0001379E                            ; ===========================================================================
0001379E                            
0001379E                            Sonic_LookUp:
0001379E 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000137A4 6700                       		beq.s	Sonic_Duck	; if not, branch
000137A6 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000137AC 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000137B2 6700                       		beq.s	loc_12FC2
000137B4 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000137B8 6000                       		bra.s	loc_12FC2
000137BA                            ; ===========================================================================
000137BA                            
000137BA                            Sonic_Duck:
000137BA 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000137C0 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000137C2 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000137C8 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000137CE 6700                       		beq.s	loc_12FC2
000137D0 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000137D4 6000                       		bra.s	loc_12FC2
000137D6                            ; ===========================================================================
000137D6                            
000137D6                            Obj01_ResetScr:
000137D6 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000137DC 6700                       		beq.s	loc_12FC2	; if yes, branch
000137DE 6400                       		bcc.s	loc_12FBE
000137E0 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000137E4                            
000137E4                            loc_12FBE:
000137E4 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000137E8                            
000137E8                            loc_12FC2:
000137E8 1038 F602                  		move.b	($FFFFF602).w,d0
000137EC 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000137F0 6600                       		bne.s	loc_12FEE	; if yes, branch
000137F2 3028 0014                  		move.w	$14(a0),d0
000137F6 6700                       		beq.s	loc_12FEE
000137F8 6B00                       		bmi.s	loc_12FE2
000137FA 9045                       		sub.w	d5,d0
000137FC 6400                       		bcc.s	loc_12FDC
000137FE 303C 0000                  		move.w	#0,d0
00013802                            
00013802                            loc_12FDC:
00013802 3140 0014                  		move.w	d0,$14(a0)
00013806 6000                       		bra.s	loc_12FEE
00013808                            ; ===========================================================================
00013808                            
00013808                            loc_12FE2:
00013808 D045                       		add.w	d5,d0
0001380A 6400                       		bcc.s	loc_12FEA
0001380C 303C 0000                  		move.w	#0,d0
00013810                            
00013810                            loc_12FEA:
00013810 3140 0014                  		move.w	d0,$14(a0)
00013814                            
00013814                            loc_12FEE:
00013814 1028 0026                  		move.b	$26(a0),d0
00013818 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001381E C3E8 0014                  		muls.w	$14(a0),d1
00013822 E081                       		asr.l	#8,d1
00013824 3141 0010                  		move.w	d1,$10(a0)
00013828 C1E8 0014                  		muls.w	$14(a0),d0
0001382C E080                       		asr.l	#8,d0
0001382E 3140 0012                  		move.w	d0,$12(a0)
00013832                            
00013832                            loc_1300C:
00013832 1028 0026                  		move.b	$26(a0),d0
00013836 0600 0040                  		addi.b	#$40,d0
0001383A 6B00                       		bmi.s	locret_1307C
0001383C 123C 0040                  		move.b	#$40,d1
00013840 4A68 0014                  		tst.w	$14(a0)
00013844 6700                       		beq.s	locret_1307C
00013846 6B00                       		bmi.s	loc_13024
00013848 4441                       		neg.w	d1
0001384A                            
0001384A                            loc_13024:
0001384A 1028 0026                  		move.b	$26(a0),d0
0001384E D001                       		add.b	d1,d0
00013850 3F00                       		move.w	d0,-(sp)
00013852 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013856 301F                       		move.w	(sp)+,d0
00013858 4A41                       		tst.w	d1
0001385A 6A00                       		bpl.s	locret_1307C
0001385C E141                       		asl.w	#8,d1
0001385E 0600 0020                  		addi.b	#$20,d0
00013862 0200 00C0                  		andi.b	#$C0,d0
00013866 6700                       		beq.s	loc_13078
00013868 0C00 0040                  		cmpi.b	#$40,d0
0001386C 6700                       		beq.s	loc_13066
0001386E 0C00 0080                  		cmpi.b	#$80,d0
00013872 6700                       		beq.s	loc_13060
00013874 D368 0010                  		add.w	d1,$10(a0)
00013878 08E8 0005 0022             		bset	#5,$22(a0)
0001387E 317C 0000 0014             		move.w	#0,$14(a0)
00013884 4E75                       		rts	
00013886                            ; ===========================================================================
00013886                            
00013886                            loc_13060:
00013886 9368 0012                  		sub.w	d1,$12(a0)
0001388A 4E75                       		rts	
0001388C                            ; ===========================================================================
0001388C                            
0001388C                            loc_13066:
0001388C 9368 0010                  		sub.w	d1,$10(a0)
00013890 08E8 0005 0022             		bset	#5,$22(a0)
00013896 317C 0000 0014             		move.w	#0,$14(a0)
0001389C 4E75                       		rts	
0001389E                            ; ===========================================================================
0001389E                            
0001389E                            loc_13078:
0001389E D368 0012                  		add.w	d1,$12(a0)
000138A2                            
000138A2                            locret_1307C:
000138A2 4E75                       		rts	
000138A4                            ; End of function Sonic_Move
000138A4                            
000138A4                            
000138A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138A4                            
000138A4                            
000138A4                            Sonic_MoveLeft:				; XREF: Sonic_Move
000138A4 3028 0014                  		move.w	$14(a0),d0
000138A8 6700                       		beq.s	loc_13086
000138AA 6A00                       		bpl.s	loc_130B2
000138AC                            
000138AC                            loc_13086:
000138AC 08E8 0000 0022             		bset	#0,$22(a0)
000138B2 6600                       		bne.s	loc_1309A
000138B4 08A8 0005 0022             		bclr	#5,$22(a0)
000138BA 117C 0001 001D             		move.b	#1,$1D(a0)
000138C0                            
000138C0                            loc_1309A:
000138C0 9045                       		sub.w	d5,d0
000138C2 3206                       		move.w	d6,d1
000138C4 4441                       		neg.w	d1
000138C6 B041                       		cmp.w	d1,d0
000138C8 6E00                       		bgt.s	loc_130A6
000138CA 3001                       		move.w	d1,d0
000138CC                            
000138CC                            loc_130A6:
000138CC 3140 0014                  		move.w	d0,$14(a0)
000138D0 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000138D6 4E75                       		rts	
000138D8                            ; ===========================================================================
000138D8                            
000138D8                            loc_130B2:				; XREF: Sonic_MoveLeft
000138D8 9044                       		sub.w	d4,d0
000138DA 6400                       		bcc.s	loc_130BA
000138DC 303C FF80                  		move.w	#-$80,d0
000138E0                            
000138E0                            loc_130BA:
000138E0 3140 0014                  		move.w	d0,$14(a0)
000138E4 1028 0026                  		move.b	$26(a0),d0
000138E8 0600 0020                  		addi.b	#$20,d0
000138EC 0200 00C0                  		andi.b	#$C0,d0
000138F0 6600                       		bne.s	locret_130E8
000138F2 0C40 0400                  		cmpi.w	#$400,d0
000138F6 6D00                       		blt.s	locret_130E8
000138F8 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000138FE 08A8 0000 0022             		bclr	#0,$22(a0)
00013904 303C 00A4                  		move.w	#$A4,d0
00013908 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
0001390E                            
0001390E                            locret_130E8:
0001390E 4E75                       		rts	
00013910                            ; End of function Sonic_MoveLeft
00013910                            
00013910                            
00013910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013910                            
00013910                            
00013910                            Sonic_MoveRight:			; XREF: Sonic_Move
00013910 3028 0014                  		move.w	$14(a0),d0
00013914 6B00                       		bmi.s	loc_13118
00013916 08A8 0000 0022             		bclr	#0,$22(a0)
0001391C 6700                       		beq.s	loc_13104
0001391E 08A8 0005 0022             		bclr	#5,$22(a0)
00013924 117C 0001 001D             		move.b	#1,$1D(a0)
0001392A                            
0001392A                            loc_13104:
0001392A D045                       		add.w	d5,d0
0001392C B046                       		cmp.w	d6,d0
0001392E 6D00                       		blt.s	loc_1310C
00013930 3006                       		move.w	d6,d0
00013932                            
00013932                            loc_1310C:
00013932 3140 0014                  		move.w	d0,$14(a0)
00013936 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001393C 4E75                       		rts	
0001393E                            ; ===========================================================================
0001393E                            
0001393E                            loc_13118:				; XREF: Sonic_MoveRight
0001393E D044                       		add.w	d4,d0
00013940 6400                       		bcc.s	loc_13120
00013942 303C 0080                  		move.w	#$80,d0
00013946                            
00013946                            loc_13120:
00013946 3140 0014                  		move.w	d0,$14(a0)
0001394A 1028 0026                  		move.b	$26(a0),d0
0001394E 0600 0020                  		addi.b	#$20,d0
00013952 0200 00C0                  		andi.b	#$C0,d0
00013956 6600                       		bne.s	locret_1314E
00013958 0C40 FC00                  		cmpi.w	#-$400,d0
0001395C 6E00                       		bgt.s	locret_1314E
0001395E 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013964 08E8 0000 0022             		bset	#0,$22(a0)
0001396A 303C 00A4                  		move.w	#$A4,d0
0001396E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
00013974                            
00013974                            locret_1314E:
00013974 4E75                       		rts	
00013976                            ; End of function Sonic_MoveRight
00013976                            
00013976                            ; ---------------------------------------------------------------------------
00013976                            ; Subroutine to	change Sonic's speed as he rolls
00013976                            ; ---------------------------------------------------------------------------
00013976                            
00013976                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013976                            
00013976                            
00013976                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013976 3C38 F760                  		move.w	($FFFFF760).w,d6
0001397A E346                       		asl.w	#1,d6
0001397C 3A38 F762                  		move.w	($FFFFF762).w,d5
00013980 E245                       		asr.w	#1,d5
00013982 3838 F764                  		move.w	($FFFFF764).w,d4
00013986 E444                       		asr.w	#2,d4
00013988 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001398C 6600 0000                  		bne.w	loc_131CC
00013990 4A68 003E                  		tst.w	$3E(a0)
00013994 6600                       		bne.s	loc_13188
00013996 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001399C 6700                       		beq.s	loc_1317C	; if not, branch
0001399E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000139A4 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
000139A6 6100 0000                  		bsr.w	Sonic_RollLeft
000139AA                            
000139AA                            loc_1317C:
000139AA 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000139B0 6700                       		beq.s	loc_13188	; if not, branch
000139B2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000139B8 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
000139BA 6100 0000                  		bsr.w	Sonic_RollLeft
000139BE 6000                       		bra.s	loc_13188
000139C0                            
000139C0                            SonicRS_RollRight:
000139C0 6100 0000                  		bsr.w	Sonic_RollRight
000139C4                            
000139C4                            loc_13188:
000139C4 3028 0014                  		move.w	$14(a0),d0
000139C8 6700                       		beq.s	loc_131AA
000139CA 6B00                       		bmi.s	loc_1319E
000139CC 9045                       		sub.w	d5,d0
000139CE 6400                       		bcc.s	loc_13198
000139D0 303C 0000                  		move.w	#0,d0
000139D4                            
000139D4                            loc_13198:
000139D4 3140 0014                  		move.w	d0,$14(a0)
000139D8 6000                       		bra.s	loc_131AA
000139DA                            ; ===========================================================================
000139DA                            
000139DA                            loc_1319E:				; XREF: Sonic_RollSpeed
000139DA D045                       		add.w	d5,d0
000139DC 6400                       		bcc.s	loc_131A6
000139DE 303C 0000                  		move.w	#0,d0
000139E2                            
000139E2                            loc_131A6:
000139E2 3140 0014                  		move.w	d0,$14(a0)
000139E6                            
000139E6                            loc_131AA:
000139E6 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000139EA 6600                       		bne.s	loc_131CC	; if yes, branch
000139EC 08A8 0002 0022             		bclr	#2,$22(a0)
000139F2 117C 0013 0016             		move.b	#$13,$16(a0)
000139F8 117C 0009 0017             		move.b	#9,$17(a0)
000139FE 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013A04 5B68 000C                  		subq.w	#5,$C(a0)
00013A08                            
00013A08                            loc_131CC:
00013A08 1028 0026                  		move.b	$26(a0),d0
00013A0C 4EB9 0000 2CEC             		jsr	(CalcSine).l
00013A12 C1E8 0014                  		muls.w	$14(a0),d0
00013A16 E080                       		asr.l	#8,d0
00013A18 3140 0012                  		move.w	d0,$12(a0)
00013A1C C3E8 0014                  		muls.w	$14(a0),d1
00013A20 E081                       		asr.l	#8,d1
00013A22 0C41 1000                  		cmpi.w	#$1000,d1
00013A26 6F00                       		ble.s	loc_131F0
00013A28 323C 1000                  		move.w	#$1000,d1
00013A2C                            
00013A2C                            loc_131F0:
00013A2C 0C41 F000                  		cmpi.w	#-$1000,d1
00013A30 6C00                       		bge.s	loc_131FA
00013A32 323C F000                  		move.w	#-$1000,d1
00013A36                            
00013A36                            loc_131FA:
00013A36 3141 0010                  		move.w	d1,$10(a0)
00013A3A 6000 FDF6                  		bra.w	loc_1300C
00013A3E                            ; End of function Sonic_RollSpeed
00013A3E                            
00013A3E                            
00013A3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A3E                            
00013A3E                            
00013A3E                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013A3E 3028 0014                  		move.w	$14(a0),d0
00013A42 6700                       		beq.s	loc_1320A
00013A44 6A00                       		bpl.s	loc_13218
00013A46                            
00013A46                            loc_1320A:
00013A46 08E8 0000 0022             		bset	#0,$22(a0)
00013A4C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013A52 4E75                       		rts	
00013A54                            ; ===========================================================================
00013A54                            
00013A54                            loc_13218:
00013A54 9044                       		sub.w	d4,d0
00013A56 6400                       		bcc.s	loc_13220
00013A58 303C FF80                  		move.w	#-$80,d0
00013A5C                            
00013A5C                            loc_13220:
00013A5C 3140 0014                  		move.w	d0,$14(a0)
00013A60 4E75                       		rts	
00013A62                            ; End of function Sonic_RollLeft
00013A62                            
00013A62                            
00013A62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A62                            
00013A62                            
00013A62                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013A62 3028 0014                  		move.w	$14(a0),d0
00013A66 6B00                       		bmi.s	loc_1323A
00013A68 08A8 0000 0022             		bclr	#0,$22(a0)
00013A6E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013A74 4E75                       		rts	
00013A76                            ; ===========================================================================
00013A76                            
00013A76                            loc_1323A:
00013A76 D044                       		add.w	d4,d0
00013A78 6400                       		bcc.s	loc_13242
00013A7A 303C 0080                  		move.w	#$80,d0
00013A7E                            
00013A7E                            loc_13242:
00013A7E 3140 0014                  		move.w	d0,$14(a0)
00013A82 4E75                       		rts	
00013A84                            ; End of function Sonic_RollRight
00013A84                            
00013A84                            Sonic_AirUnroll:
00013A84                            		
00013A84 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013A88 6600                       		bne.s	@timer
00013A8A 1038 F605                  		move.b	($FFFFF605).w,d0
00013A8E 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013A92 6700                       		beq.s	@end	; if not, branch
00013A94 08A8 0002 0022             		bclr	#2,$22(a0)
00013A9A 117C 0013 0016             		move.b	#$13,$16(a0)
00013AA0 117C 0009 0017             		move.b	#9,$17(a0)
00013AA6 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013AAC 303C 00A5                  		move.w	#$A5,d0
00013AB0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play fart sound
00013AB6 2028 0010                  		move.l	$10(a0),d0
00013ABA D080                       		add.l	d0,d0
00013ABC 2140 0010                  		move.l	d0,$10(a0)
00013AC0 5B68 000C                  		subq.w	#5,$C(a0)
00013AC4                            	@end:
00013AC4 4E75                       		rts
00013AC6                            	@timer:
00013AC6 5328 003A                  		subq.b	#1,$3A(a0)
00013ACA 4E75                       		rts
00013ACC                            
00013ACC                            ; ---------------------------------------------------------------------------
00013ACC                            ; Subroutine to	change Sonic's direction while jumping
00013ACC                            ; ---------------------------------------------------------------------------
00013ACC                            
00013ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013ACC                            
00013ACC                            
00013ACC                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013ACC 3C38 F760                  		move.w	($FFFFF760).w,d6
00013AD0 3A38 F762                  		move.w	($FFFFF762).w,d5
00013AD4 E345                       		asl.w	#1,d5
00013AD6 0828 0004 0022             		btst	#4,$22(a0)
00013ADC 6600                       		bne.s	Obj01_ResetScr2
00013ADE 3028 0010                  		move.w	$10(a0),d0
00013AE2 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013AE8 6700                       		beq.s	loc_13278	; if not, branch
00013AEA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013AF0 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013AF2 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013AF6 6E00                       		bgt.s	loc_13278
00013AF8 3001                       		move.w	d1,d0
00013AFA                            
00013AFA                            loc_13278:
00013AFA 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013B00 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013B02 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B08 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013B0A 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013B0E 6E00                       		bgt.s	Obj01_JumpMove
00013B10 3001                       		move.w	d1,d0
00013B12 6000                       		bra.s	Obj01_JumpMove
00013B14                            
00013B14                            SonicCJD_JumpLeft:
00013B14 08E8 0000 0022             		bset	#0,$22(a0)
00013B1A 9045                       		sub.w	d5,d0
00013B1C 3206                       		move.w	d6,d1
00013B1E 4441                       		neg.w	d1
00013B20 B041                       		cmp.w	d1,d0
00013B22                            		; bgt.s	loc_13278
00013B22                            		; move.w	d1,d0
00013B22 4E75                       		rts
00013B24                            
00013B24                            SonicCJD_JumpRight:
00013B24 08A8 0000 0022             		bclr	#0,$22(a0)
00013B2A D045                       		add.w	d5,d0
00013B2C B046                       		cmp.w	d6,d0
00013B2E 6D00                       		blt.s	Obj01_JumpMove
00013B30 3006                       		move.w	d6,d0
00013B32                            
00013B32                            Obj01_JumpMove:
00013B32 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013B36                            
00013B36                            Obj01_ResetScr2:
00013B36 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013B3C 6700                       		beq.s	loc_132A4	; if yes, branch
00013B3E 6400                       		bcc.s	loc_132A0
00013B40 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013B44                            
00013B44                            loc_132A0:
00013B44 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013B48                            
00013B48                            loc_132A4:
00013B48 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013B4E 6500                       		bcs.s	locret_132D2	; if yes, branch
00013B50 3028 0010                  		move.w	$10(a0),d0
00013B54 3200                       		move.w	d0,d1
00013B56 EA41                       		asr.w	#5,d1
00013B58 6700                       		beq.s	locret_132D2
00013B5A 6B00                       		bmi.s	loc_132C6
00013B5C 9041                       		sub.w	d1,d0
00013B5E 6400                       		bcc.s	loc_132C0
00013B60 303C 0000                  		move.w	#0,d0
00013B64                            
00013B64                            loc_132C0:
00013B64 3140 0010                  		move.w	d0,$10(a0)
00013B68 4E75                       		rts	
00013B6A                            ; ===========================================================================
00013B6A                            
00013B6A                            loc_132C6:
00013B6A 9041                       		sub.w	d1,d0
00013B6C 6500                       		bcs.s	loc_132CE
00013B6E 303C 0000                  		move.w	#0,d0
00013B72                            
00013B72                            loc_132CE:
00013B72 3140 0010                  		move.w	d0,$10(a0)
00013B76                            
00013B76                            locret_132D2:
00013B76 4E75                       		rts	
00013B78                            ; End of function Sonic_ChgJumpDir
00013B78                            
00013B78                            ; ===========================================================================
00013B78                            ; ---------------------------------------------------------------------------
00013B78                            ; Unused subroutine to squash Sonic
00013B78                            ; ---------------------------------------------------------------------------
00013B78 1028 0026                  		move.b	$26(a0),d0
00013B7C 0600 0020                  		addi.b	#$20,d0
00013B80 0200 00C0                  		andi.b	#$C0,d0
00013B84 6600                       		bne.s	locret_13302
00013B86 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013B8A 4A41                       		tst.w	d1
00013B8C 6A00                       		bpl.s	locret_13302
00013B8E 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013B94 317C 0000 0010             		move.w	#0,$10(a0)
00013B9A 317C 0000 0012             		move.w	#0,$12(a0)
00013BA0 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013BA6                            
00013BA6                            locret_13302:
00013BA6 4E75                       		rts	
00013BA8                            ; ---------------------------------------------------------------------------
00013BA8                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013BA8                            ; ---------------------------------------------------------------------------
00013BA8                            
00013BA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BA8                            
00013BA8                            
00013BA8                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013BA8 2228 0008                  		move.l	8(a0),d1
00013BAC 3028 0010                  		move.w	$10(a0),d0
00013BB0 48C0                       		ext.l	d0
00013BB2 E180                       		asl.l	#8,d0
00013BB4 D280                       		add.l	d0,d1
00013BB6 4841                       		swap	d1
00013BB8 3038 F728                  		move.w	($FFFFF728).w,d0
00013BBC 0640 0010                  		addi.w	#$10,d0
00013BC0 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013BC2 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013BC4 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013BC8 0640 0128                  		addi.w	#$128,d0
00013BCC 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013BD0 6600                       		bne.s	loc_13332
00013BD2 0640 0040                  		addi.w	#$40,d0
00013BD6                            
00013BD6                            loc_13332:
00013BD6 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013BD8 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013BDA                            
00013BDA                            loc_13336:
00013BDA 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013BDE 0640 00E0                  		addi.w	#$E0,d0
00013BE2 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013BE6 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013BE8 4E75                       		rts	
00013BEA                            ; ===========================================================================
00013BEA                            
00013BEA                            Boundary_Bottom:
00013BEA 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013BF0 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013BF4 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013BFA 6500 0000                  		bcs.w	KillSonic
00013BFE 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013C02 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013C08 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013C0E 4E75                       		rts	
00013C10                            ; ===========================================================================
00013C10                            
00013C10                            Boundary_Sides:
00013C10 3140 0008                  		move.w	d0,8(a0)
00013C14 317C 0000 000A             		move.w	#0,$A(a0)
00013C1A 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013C20 317C 0000 0014             		move.w	#0,$14(a0)
00013C26 60B2                       		bra.s	loc_13336
00013C28                            ; End of function Sonic_LevelBound
00013C28                            
00013C28                            ; ---------------------------------------------------------------------------
00013C28                            ; Subroutine allowing Sonic to roll when he's moving
00013C28                            ; ---------------------------------------------------------------------------
00013C28                            
00013C28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C28                            
00013C28                            
00013C28                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013C28 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013C2C 6600                       		bne.s	Obj01_NoRoll
00013C2E 3028 0014                  		move.w	$14(a0),d0
00013C32 6A00                       		bpl.s	loc_13392
00013C34 4440                       		neg.w	d0
00013C36                            
00013C36                            loc_13392:
00013C36 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013C3A 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013C3C 1038 F602                  		move.b	($FFFFF602).w,d0
00013C40 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013C44 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013C46 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013C4C 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013C4E                            
00013C4E                            Obj01_NoRoll:
00013C4E 4E75                       		rts	
00013C50                            ; ===========================================================================
00013C50                            
00013C50                            Obj01_ChkRoll:
00013C50 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013C56 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013C58 4E75                       		rts	
00013C5A                            ; ===========================================================================
00013C5A                            
00013C5A                            Obj01_DoRoll:
00013C5A 08E8 0002 0022             		bset	#2,$22(a0)
00013C60 117C 000E 0016             		move.b	#$E,$16(a0)
00013C66 117C 0007 0017             		move.b	#7,$17(a0)
00013C6C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013C72 5A68 000C                  		addq.w	#5,$C(a0)
00013C76 303C 00BE                  		move.w	#$BE,d0
00013C7A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rolling sound
00013C80 4A68 0014                  		tst.w	$14(a0)
00013C84 6600                       		bne.s	locret_133E8
00013C86 317C 0200 0014             		move.w	#$200,$14(a0)
00013C8C                            
00013C8C                            locret_133E8:
00013C8C 4E75                       		rts	
00013C8E                            ; End of function Sonic_Roll
00013C8E                            
00013C8E                            ; ---------------------------------------------------------------------------
00013C8E                            ; Subroutine allowing Sonic to jump
00013C8E                            ; ---------------------------------------------------------------------------
00013C8E                            
00013C8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C8E                            
00013C8E                            
00013C8E                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013C8E 1038 F603                  		move.b	($FFFFF603).w,d0
00013C92 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013C96 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013C9A 7000                       		moveq	#0,d0
00013C9C 1028 0026                  		move.b	$26(a0),d0
00013CA0 0600 0080                  		addi.b	#$80,d0
00013CA4 6100 0000                  		bsr.w	sub_14D48
00013CA8 0C41 0006                  		cmpi.w	#6,d1
00013CAC 6D00 0000                  		blt.w	locret_1348E
00013CB0 343C 0680                  		move.w	#$680,d2
00013CB4 0828 0006 0022             		btst	#6,$22(a0)
00013CBA 6700                       		beq.s	loc_1341C
00013CBC 343C 0380                  		move.w	#$380,d2
00013CC0                            
00013CC0                            loc_1341C:
00013CC0 7000                       		moveq	#0,d0
00013CC2 1028 0026                  		move.b	$26(a0),d0
00013CC6 0400 0040                  		subi.b	#$40,d0
00013CCA 4EB9 0000 2CEC             		jsr	(CalcSine).l
00013CD0 C3C2                       		muls.w	d2,d1
00013CD2 E081                       		asr.l	#8,d1
00013CD4 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013CD8 C1C2                       		muls.w	d2,d0
00013CDA E080                       		asr.l	#8,d0
00013CDC D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013CE0 08E8 0001 0022             		bset	#1,$22(a0)
00013CE6 08A8 0005 0022             		bclr	#5,$22(a0)
00013CEC 588F                       		addq.l	#4,sp
00013CEE 117C 0001 003C             		move.b	#1,$3C(a0)
00013CF4 4228 0038                  		clr.b	$38(a0)
00013CF8 303C 00A0                  		move.w	#$A0,d0
00013CFC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
00013D02 117C 0013 0016             		move.b	#$13,$16(a0)
00013D08 117C 0009 0017             		move.b	#9,$17(a0)
00013D0E 0828 0002 0022             		btst	#2,$22(a0)
00013D14 6600                       		bne.s	loc_13490
00013D16 117C 000E 0016             		move.b	#$E,$16(a0)
00013D1C 117C 0007 0017             		move.b	#7,$17(a0)
00013D22 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013D28 08E8 0002 0022             		bset	#2,$22(a0)
00013D2E 5A68 000C                  		addq.w	#5,$C(a0)
00013D32 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013D38                            
00013D38                            locret_1348E:
00013D38 4E75                       		rts	
00013D3A                            ; ===========================================================================
00013D3A                            
00013D3A                            loc_13490:
00013D3A 08E8 0004 0022             		bset	#4,$22(a0)
00013D40 4E75                       		rts	
00013D42                            ; End of function Sonic_Jump
00013D42                            
00013D42                            
00013D42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D42                            
00013D42                            
00013D42                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013D42 4A28 003C                  		tst.b	$3C(a0)
00013D46 6700                       		beq.s	loc_134C4
00013D48 323C FC00                  		move.w	#-$400,d1
00013D4C 0828 0006 0022             		btst	#6,$22(a0)
00013D52 6700                       		beq.s	loc_134AE
00013D54 323C FE00                  		move.w	#-$200,d1
00013D58                            
00013D58                            loc_134AE:
00013D58 B268 0012                  		cmp.w	$12(a0),d1
00013D5C 6F00                       		ble.s	locret_134C2
00013D5E 1038 F602                  		move.b	($FFFFF602).w,d0
00013D62 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013D66 6600                       		bne.s	locret_134C2	; if yes, branch
00013D68 3141 0012                  		move.w	d1,$12(a0)
00013D6C                            
00013D6C                            locret_134C2:
00013D6C 4E75                       		rts	
00013D6E                            ; ===========================================================================
00013D6E                            
00013D6E                            loc_134C4:
00013D6E 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013D74 6C00                       		bge.s	locret_134D2
00013D76 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013D7C                            
00013D7C                            locret_134D2:
00013D7C 4E75                       		rts	
00013D7E                            ; End of function Sonic_JumpHeight
00013D7E                            
00013D7E                            ; ---------------------------------------------------------------------------
00013D7E                            ; Subroutine to	slow Sonic walking up a	slope
00013D7E                            ; ---------------------------------------------------------------------------
00013D7E                            
00013D7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D7E                            
00013D7E                            
00013D7E                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013D7E 1028 0026                  		move.b	$26(a0),d0
00013D82 0600 0060                  		addi.b	#$60,d0
00013D86 0C00 00C0                  		cmpi.b	#$C0,d0
00013D8A 6400                       		bcc.s	locret_13508
00013D8C 1028 0026                  		move.b	$26(a0),d0
00013D90 4EB9 0000 2CEC             		jsr	(CalcSine).l
00013D96 C1FC 0020                  		muls.w	#$20,d0
00013D9A E080                       		asr.l	#8,d0
00013D9C 4A68 0014                  		tst.w	$14(a0)
00013DA0 6700                       		beq.s	locret_13508
00013DA2 6B00                       		bmi.s	loc_13504
00013DA4 4A40                       		tst.w	d0
00013DA6 6700                       		beq.s	locret_13502
00013DA8 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013DAC                            
00013DAC                            locret_13502:
00013DAC 4E75                       		rts	
00013DAE                            ; ===========================================================================
00013DAE                            
00013DAE                            loc_13504:
00013DAE D168 0014                  		add.w	d0,$14(a0)
00013DB2                            
00013DB2                            locret_13508:
00013DB2 4E75                       		rts	
00013DB4                            ; End of function Sonic_SlopeResist
00013DB4                            
00013DB4                            ; ---------------------------------------------------------------------------
00013DB4                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013DB4                            ; ---------------------------------------------------------------------------
00013DB4                            
00013DB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DB4                            
00013DB4                            
00013DB4                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013DB4 1028 0026                  		move.b	$26(a0),d0
00013DB8 0600 0060                  		addi.b	#$60,d0
00013DBC 0C00 00C0                  		cmpi.b	#-$40,d0
00013DC0 6400                       		bcc.s	locret_13544
00013DC2 1028 0026                  		move.b	$26(a0),d0
00013DC6 4EB9 0000 2CEC             		jsr	(CalcSine).l
00013DCC C1FC 0050                  		muls.w	#$50,d0
00013DD0 E080                       		asr.l	#8,d0
00013DD2 4A68 0014                  		tst.w	$14(a0)
00013DD6 6B00                       		bmi.s	loc_1353A
00013DD8 4A40                       		tst.w	d0
00013DDA 6A00                       		bpl.s	loc_13534
00013DDC E480                       		asr.l	#2,d0
00013DDE                            
00013DDE                            loc_13534:
00013DDE D168 0014                  		add.w	d0,$14(a0)
00013DE2 4E75                       		rts	
00013DE4                            ; ===========================================================================
00013DE4                            
00013DE4                            loc_1353A:
00013DE4 4A40                       		tst.w	d0
00013DE6 6B00                       		bmi.s	loc_13540
00013DE8 E480                       		asr.l	#2,d0
00013DEA                            
00013DEA                            loc_13540:
00013DEA D168 0014                  		add.w	d0,$14(a0)
00013DEE                            
00013DEE                            locret_13544:
00013DEE 4E75                       		rts	
00013DF0                            ; End of function Sonic_RollRepel
00013DF0                            
00013DF0                            ; ---------------------------------------------------------------------------
00013DF0                            ; Subroutine to	push Sonic down	a slope
00013DF0                            ; ---------------------------------------------------------------------------
00013DF0                            
00013DF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DF0                            
00013DF0                            
00013DF0                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013DF0 4E71                       		nop	
00013DF2 4A28 0038                  		tst.b	$38(a0)
00013DF6 6600                       		bne.s	locret_13580
00013DF8 4A68 003E                  		tst.w	$3E(a0)
00013DFC 6600                       		bne.s	loc_13582
00013DFE 1028 0026                  		move.b	$26(a0),d0
00013E02 0600 0020                  		addi.b	#$20,d0
00013E06 0200 00C0                  		andi.b	#$C0,d0
00013E0A 6700                       		beq.s	locret_13580
00013E0C 3028 0014                  		move.w	$14(a0),d0
00013E10 6A00                       		bpl.s	loc_1356A
00013E12 4440                       		neg.w	d0
00013E14                            
00013E14                            loc_1356A:
00013E14 0C40 0280                  		cmpi.w	#$280,d0
00013E18 6400                       		bcc.s	locret_13580
00013E1A 4268 0014                  		clr.w	$14(a0)
00013E1E 08E8 0001 0022             		bset	#1,$22(a0)
00013E24 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013E2A                            
00013E2A                            locret_13580:
00013E2A 4E75                       		rts	
00013E2C                            ; ===========================================================================
00013E2C                            
00013E2C                            loc_13582:
00013E2C 5368 003E                  		subq.w	#1,$3E(a0)
00013E30 4E75                       		rts	
00013E32                            ; End of function Sonic_SlopeRepel
00013E32                            
00013E32                            ; ---------------------------------------------------------------------------
00013E32                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013E32                            ; ---------------------------------------------------------------------------
00013E32                            
00013E32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E32                            
00013E32                            
00013E32                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013E32 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013E36 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013E38 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013E3A                            
00013E3A 5400                       		addq.b	#2,d0		; increase angle
00013E3C 6400                       		bcc.s	loc_13596
00013E3E 7000                       		moveq	#0,d0
00013E40                            
00013E40                            loc_13596:
00013E40 6000                       		bra.s	loc_1359E
00013E42                            ; ===========================================================================
00013E42                            
00013E42                            loc_13598:
00013E42 5500                       		subq.b	#2,d0		; decrease angle
00013E44 6400                       		bcc.s	loc_1359E
00013E46 7000                       		moveq	#0,d0
00013E48                            
00013E48                            loc_1359E:
00013E48 1140 0026                  		move.b	d0,$26(a0)
00013E4C                            
00013E4C                            locret_135A2:
00013E4C 4E75                       		rts	
00013E4E                            ; End of function Sonic_JumpAngle
00013E4E                            
00013E4E                            ; ---------------------------------------------------------------------------
00013E4E                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013E4E                            ; ---------------------------------------------------------------------------
00013E4E                            
00013E4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E4E                            
00013E4E                            
00013E4E                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013E4E 3228 0010                  		move.w	$10(a0),d1
00013E52 3428 0012                  		move.w	$12(a0),d2
00013E56 4EB9 0000 2FBA             		jsr	(CalcAngle).l
00013E5C 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013E60 0400 0020                  		subi.b	#$20,d0
00013E64 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013E68 0200 00C0                  		andi.b	#$C0,d0
00013E6C 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013E70 0C00 0040                  		cmpi.b	#$40,d0
00013E74 6700 0000                  		beq.w	loc_13680
00013E78 0C00 0080                  		cmpi.b	#$80,d0
00013E7C 6700 0000                  		beq.w	loc_136E2
00013E80 0C00 00C0                  		cmpi.b	#-$40,d0
00013E84 6700 0000                  		beq.w	loc_1373E
00013E88 6100 0000                  		bsr.w	Sonic_HitWall
00013E8C 4A41                       		tst.w	d1
00013E8E 6A00                       		bpl.s	loc_135F0
00013E90 9368 0008                  		sub.w	d1,8(a0)
00013E94 317C 0000 0010             		move.w	#0,$10(a0)
00013E9A                            
00013E9A                            loc_135F0:
00013E9A 6100 0000                  		bsr.w	sub_14EB4
00013E9E 4A41                       		tst.w	d1
00013EA0 6A00                       		bpl.s	loc_13602
00013EA2 D368 0008                  		add.w	d1,8(a0)
00013EA6 317C 0000 0010             		move.w	#0,$10(a0)
00013EAC                            
00013EAC                            loc_13602:
00013EAC 6100 0000                  		bsr.w	Sonic_HitFloor
00013EB0 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013EB4 4A41                       		tst.w	d1
00013EB6 6A00                       		bpl.s	locret_1367E
00013EB8 1428 0012                  		move.b	$12(a0),d2
00013EBC 5002                       		addq.b	#8,d2
00013EBE 4402                       		neg.b	d2
00013EC0 B202                       		cmp.b	d2,d1
00013EC2 6C00                       		bge.s	loc_1361E
00013EC4 B002                       		cmp.b	d2,d0
00013EC6 6D00                       		blt.s	locret_1367E
00013EC8                            
00013EC8                            loc_1361E:
00013EC8 D368 000C                  		add.w	d1,$C(a0)
00013ECC 1143 0026                  		move.b	d3,$26(a0)
00013ED0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013ED4 117C 0000 001C             		move.b	#0,$1C(a0)
00013EDA 1003                       		move.b	d3,d0
00013EDC 0600 0020                  		addi.b	#$20,d0
00013EE0 0200 0040                  		andi.b	#$40,d0
00013EE4 6600                       		bne.s	loc_1365C
00013EE6 1003                       		move.b	d3,d0
00013EE8 0600 0010                  		addi.b	#$10,d0
00013EEC 0200 0020                  		andi.b	#$20,d0
00013EF0 6700                       		beq.s	loc_1364E
00013EF2 E0E8 0012                  		asr	$12(a0)
00013EF6 6000                       		bra.s	loc_13670
00013EF8                            ; ===========================================================================
00013EF8                            
00013EF8                            loc_1364E:
00013EF8 317C 0000 0012             		move.w	#0,$12(a0)
00013EFE 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013F04 4E75                       		rts	
00013F06                            ; ===========================================================================
00013F06                            
00013F06                            loc_1365C:
00013F06 317C 0000 0010             		move.w	#0,$10(a0)
00013F0C 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013F12 6F00                       		ble.s	loc_13670
00013F14 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013F1A                            
00013F1A                            loc_13670:
00013F1A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F20 4A03                       		tst.b	d3
00013F22 6A00                       		bpl.s	locret_1367E
00013F24 4468 0014                  		neg.w	$14(a0)
00013F28                            
00013F28                            locret_1367E:
00013F28 4E75                       		rts	
00013F2A                            ; ===========================================================================
00013F2A                            
00013F2A                            loc_13680:
00013F2A 6100 0000                  		bsr.w	Sonic_HitWall
00013F2E 4A41                       		tst.w	d1
00013F30 6A00                       		bpl.s	loc_1369A
00013F32 9368 0008                  		sub.w	d1,8(a0)
00013F36 317C 0000 0010             		move.w	#0,$10(a0)
00013F3C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F42 4E75                       		rts	
00013F44                            ; ===========================================================================
00013F44                            
00013F44                            loc_1369A:
00013F44 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013F48 4A41                       		tst.w	d1
00013F4A 6A00                       		bpl.s	loc_136B4
00013F4C 9368 000C                  		sub.w	d1,$C(a0)
00013F50 4A68 0012                  		tst.w	$12(a0)
00013F54 6A00                       		bpl.s	locret_136B2
00013F56 317C 0000 0012             		move.w	#0,$12(a0)
00013F5C                            
00013F5C                            locret_136B2:
00013F5C 4E75                       		rts	
00013F5E                            ; ===========================================================================
00013F5E                            
00013F5E                            loc_136B4:
00013F5E 4A68 0012                  		tst.w	$12(a0)
00013F62 6B00                       		bmi.s	locret_136E0
00013F64 6100 0000                  		bsr.w	Sonic_HitFloor
00013F68 4A41                       		tst.w	d1
00013F6A 6A00                       		bpl.s	locret_136E0
00013F6C D368 000C                  		add.w	d1,$C(a0)
00013F70 1143 0026                  		move.b	d3,$26(a0)
00013F74 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F78 117C 0000 001C             		move.b	#0,$1C(a0)
00013F7E 317C 0000 0012             		move.w	#0,$12(a0)
00013F84 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013F8A                            
00013F8A                            locret_136E0:
00013F8A 4E75                       		rts	
00013F8C                            ; ===========================================================================
00013F8C                            
00013F8C                            loc_136E2:
00013F8C 6100 0000                  		bsr.w	Sonic_HitWall
00013F90 4A41                       		tst.w	d1
00013F92 6A00                       		bpl.s	loc_136F4
00013F94 9368 0008                  		sub.w	d1,8(a0)
00013F98 317C 0000 0010             		move.w	#0,$10(a0)
00013F9E                            
00013F9E                            loc_136F4:
00013F9E 6100 0000                  		bsr.w	sub_14EB4
00013FA2 4A41                       		tst.w	d1
00013FA4 6A00                       		bpl.s	loc_13706
00013FA6 D368 0008                  		add.w	d1,8(a0)
00013FAA 317C 0000 0010             		move.w	#0,$10(a0)
00013FB0                            
00013FB0                            loc_13706:
00013FB0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013FB4 4A41                       		tst.w	d1
00013FB6 6A00                       		bpl.s	locret_1373C
00013FB8 9368 000C                  		sub.w	d1,$C(a0)
00013FBC 1003                       		move.b	d3,d0
00013FBE 0600 0020                  		addi.b	#$20,d0
00013FC2 0200 0040                  		andi.b	#$40,d0
00013FC6 6600                       		bne.s	loc_13726
00013FC8 317C 0000 0012             		move.w	#0,$12(a0)
00013FCE 4E75                       		rts	
00013FD0                            ; ===========================================================================
00013FD0                            
00013FD0                            loc_13726:
00013FD0 1143 0026                  		move.b	d3,$26(a0)
00013FD4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013FD8 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013FDE 4A03                       		tst.b	d3
00013FE0 6A00                       		bpl.s	locret_1373C
00013FE2 4468 0014                  		neg.w	$14(a0)
00013FE6                            
00013FE6                            locret_1373C:
00013FE6 4E75                       		rts	
00013FE8                            ; ===========================================================================
00013FE8                            
00013FE8                            loc_1373E:
00013FE8 6100 0000                  		bsr.w	sub_14EB4
00013FEC 4A41                       		tst.w	d1
00013FEE 6A00                       		bpl.s	loc_13758
00013FF0 D368 0008                  		add.w	d1,8(a0)
00013FF4 317C 0000 0010             		move.w	#0,$10(a0)
00013FFA 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014000 4E75                       		rts	
00014002                            ; ===========================================================================
00014002                            
00014002                            loc_13758:
00014002 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014006 4A41                       		tst.w	d1
00014008 6A00                       		bpl.s	loc_13772
0001400A 9368 000C                  		sub.w	d1,$C(a0)
0001400E 4A68 0012                  		tst.w	$12(a0)
00014012 6A00                       		bpl.s	locret_13770
00014014 317C 0000 0012             		move.w	#0,$12(a0)
0001401A                            
0001401A                            locret_13770:
0001401A 4E75                       		rts	
0001401C                            ; ===========================================================================
0001401C                            
0001401C                            loc_13772:
0001401C 4A68 0012                  		tst.w	$12(a0)
00014020 6B00                       		bmi.s	locret_1379E
00014022 6100 0000                  		bsr.w	Sonic_HitFloor
00014026 4A41                       		tst.w	d1
00014028 6A00                       		bpl.s	locret_1379E
0001402A D368 000C                  		add.w	d1,$C(a0)
0001402E 1143 0026                  		move.b	d3,$26(a0)
00014032 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014036 117C 0000 001C             		move.b	#0,$1C(a0)
0001403C 317C 0000 0012             		move.w	#0,$12(a0)
00014042 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014048                            
00014048                            locret_1379E:
00014048 4E75                       		rts	
0001404A                            ; End of function Sonic_Floor
0001404A                            
0001404A                            ; ---------------------------------------------------------------------------
0001404A                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001404A                            ; ---------------------------------------------------------------------------
0001404A                            
0001404A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001404A                            
0001404A                            
0001404A                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
0001404A 0828 0004 0022             		btst	#4,$22(a0)
00014050 6700                       		beq.s	loc_137AE
00014052 4E71                       		nop	
00014054 4E71                       		nop	
00014056 4E71                       		nop	
00014058                            
00014058                            loc_137AE:
00014058 08A8 0005 0022             		bclr	#5,$22(a0)
0001405E 08A8 0001 0022             		bclr	#1,$22(a0)
00014064 08A8 0004 0022             		bclr	#4,$22(a0)
0001406A 0828 0002 0022             		btst	#2,$22(a0)
00014070 6700                       		beq.s	loc_137E4
00014072 08A8 0002 0022             		bclr	#2,$22(a0)
00014078 117C 0013 0016             		move.b	#$13,$16(a0)
0001407E 117C 0009 0017             		move.b	#9,$17(a0)
00014084 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
0001408A 5B68 000C                  		subq.w	#5,$C(a0)
0001408E                            
0001408E                            loc_137E4:
0001408E 117C 0000 003C             		move.b	#0,$3C(a0)
00014094 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
0001409A 4E75                       		rts	
0001409C                            ; End of function Sonic_ResetOnFloor
0001409C                            
0001409C                            ; ===========================================================================
0001409C                            ; ---------------------------------------------------------------------------
0001409C                            ; Sonic	when he	gets hurt
0001409C                            ; ---------------------------------------------------------------------------
0001409C                            
0001409C                            Obj01_Hurt:				; XREF: Obj01_Index
0001409C 4EBA 9D44                  		jsr	SpeedToPos
000140A0 0668 0030 0012             		addi.w	#$30,$12(a0)
000140A6 0828 0006 0022             		btst	#6,$22(a0)
000140AC 6700                       		beq.s	loc_1380C
000140AE 0468 0020 0012             		subi.w	#$20,$12(a0)
000140B4                            
000140B4                            loc_1380C:
000140B4 6100 0000                  		bsr.w	Sonic_HurtStop
000140B8 6100 FAEE                  		bsr.w	Sonic_LevelBound
000140BC 6100 F4B4                  		bsr.w	Sonic_RecordPos
000140C0 6100 0000                  		bsr.w	Sonic_Animate
000140C4 6100 0000                  		bsr.w	LoadSonicDynPLC
000140C8 4EFA 9D3E                  		jmp	DisplaySprite
000140CC                            
000140CC                            ; ---------------------------------------------------------------------------
000140CC                            ; Subroutine to	stop Sonic falling after he's been hurt
000140CC                            ; ---------------------------------------------------------------------------
000140CC                            
000140CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140CC                            
000140CC                            
000140CC                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000140CC 3038 F72E                  		move.w	($FFFFF72E).w,d0
000140D0 0640 00E0                  		addi.w	#$E0,d0
000140D4 B068 000C                  		cmp.w	$C(a0),d0
000140D8 6500 0000                  		bcs.w	KillSonic
000140DC 6100 FD70                  		bsr.w	Sonic_Floor
000140E0 0828 0001 0022             		btst	#1,$22(a0)
000140E6 6600                       		bne.s	locret_13860
000140E8 7000                       		moveq	#0,d0
000140EA 3140 0012                  		move.w	d0,$12(a0)
000140EE 3140 0010                  		move.w	d0,$10(a0)
000140F2 3140 0014                  		move.w	d0,$14(a0)
000140F6 117C 0000 001C             		move.b	#0,$1C(a0)
000140FC 5528 0024                  		subq.b	#2,$24(a0)
00014100 317C 0078 0030             		move.w	#$78,$30(a0)
00014106                            
00014106                            locret_13860:
00014106 4E75                       		rts	
00014108                            ; End of function Sonic_HurtStop
00014108                            
00014108                            ; ===========================================================================
00014108                            ; ---------------------------------------------------------------------------
00014108                            ; Sonic	when he	dies
00014108                            ; ---------------------------------------------------------------------------
00014108                            
00014108                            Obj01_Death:				; XREF: Obj01_Index
00014108 6100 0000                  		bsr.w	GameOver
0001410C 4EBA 9CA8                  		jsr	ObjectFall
00014110 6100 F460                  		bsr.w	Sonic_RecordPos
00014114 6100 0000                  		bsr.w	Sonic_Animate
00014118 6100 0000                  		bsr.w	LoadSonicDynPLC
0001411C 4EFA 9CEA                  		jmp	DisplaySprite
00014120                            
00014120                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014120                            
00014120                            
00014120                            GameOver:				; XREF: Obj01_Death
00014120 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014124 0640 0100                  		addi.w	#$100,d0
00014128 B068 000C                  		cmp.w	$C(a0),d0
0001412C 6400 0000                  		bcc.w	locret_13900
00014130 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014136 5428 0024                  		addq.b	#2,$24(a0)
0001413A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001413E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014142 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014146 6600                       		bne.s	loc_138D4
00014148 317C 0000 003A             		move.w	#0,$3A(a0)
0001414E 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014154 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001415A 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014160 4238 FE1A                  		clr.b	($FFFFFE1A).w
00014164                            
00014164                            loc_138C2:
00014164 303C 008F                  		move.w	#$8F,d0
00014168 4EB9 0000 15BA             		jsr	(PlaySound).l	; play game over music
0001416E 7003                       		moveq	#3,d0
00014170 4EF9 0000 17A4             		jmp	(LoadPLC).l	; load game over patterns
00014176                            ; ===========================================================================
00014176                            
00014176                            loc_138D4:
00014176 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001417C 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014180 6700                       		beq.s	locret_13900	; if not, branch
00014182 317C 0000 003A             		move.w	#0,$3A(a0)
00014188 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
0001418E 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014194 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
0001419A 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000141A0 60C2                       		bra.s	loc_138C2
000141A2                            ; ===========================================================================
000141A2                            
000141A2                            locret_13900:
000141A2 4E75                       		rts	
000141A4                            ; End of function GameOver
000141A4                            
000141A4                            ; ===========================================================================
000141A4                            ; ---------------------------------------------------------------------------
000141A4                            ; Sonic	when the level is restarted
000141A4                            ; ---------------------------------------------------------------------------
000141A4                            
000141A4                            Obj01_ResetLevel:			; XREF: Obj01_Index
000141A4 4A68 003A                  		tst.w	$3A(a0)
000141A8 6700                       		beq.s	locret_13914
000141AA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000141AE 6600                       		bne.s	locret_13914
000141B0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000141B6                            
000141B6                            locret_13914:
000141B6 4E75                       		rts	
000141B8                            
000141B8                            ; ---------------------------------------------------------------------------
000141B8                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
000141B8                            ; ---------------------------------------------------------------------------
000141B8                            
000141B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141B8                            
000141B8                            
000141B8                            Sonic_Loops:				; XREF: Obj01_Control
000141B8 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
000141BE 6700                       		beq.s	loc_13926	; if yes, branch
000141C0 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
000141C4 6600 0000                  		bne.w	locret_139C2	; if not, branch
000141C8                            
000141C8                            loc_13926:
000141C8 3028 000C                  		move.w	$C(a0),d0
000141CC E248                       		lsr.w	#1,d0
000141CE 0240 0380                  		andi.w	#$380,d0
000141D2 1228 0008                  		move.b	8(a0),d1
000141D6 0241 007F                  		andi.w	#$7F,d1
000141DA D041                       		add.w	d1,d0
000141DC 43F8 A400                  		lea	($FFFFA400).w,a1
000141E0 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000141E4 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
000141E8 6700 FA66                  		beq.w	Obj01_ChkRoll
000141EC B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
000141F0 6700 FA5E                  		beq.w	Obj01_ChkRoll
000141F4 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
000141F8 6700                       		beq.s	loc_13976
000141FA B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
000141FE 6700                       		beq.s	loc_13966
00014200 08A8 0006 0001             		bclr	#6,1(a0)
00014206 4E75                       		rts	
00014208                            ; ===========================================================================
00014208                            
00014208                            loc_13966:
00014208 0828 0001 0022             		btst	#1,$22(a0)
0001420E 6700                       		beq.s	loc_13976
00014210 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014216 4E75                       		rts	
00014218                            ; ===========================================================================
00014218                            
00014218                            loc_13976:
00014218 3428 0008                  		move.w	8(a0),d2
0001421C 0C02 002C                  		cmpi.b	#$2C,d2
00014220 6400                       		bcc.s	loc_13988
00014222 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014228 4E75                       		rts	
0001422A                            ; ===========================================================================
0001422A                            
0001422A                            loc_13988:
0001422A 0C02 00E0                  		cmpi.b	#-$20,d2
0001422E 6500                       		bcs.s	loc_13996
00014230 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014236 4E75                       		rts	
00014238                            ; ===========================================================================
00014238                            
00014238                            loc_13996:
00014238 0828 0006 0001             		btst	#6,1(a0)
0001423E 6600                       		bne.s	loc_139B2
00014240 1228 0026                  		move.b	$26(a0),d1
00014244 6700                       		beq.s	locret_139C2
00014246 0C01 0080                  		cmpi.b	#-$80,d1
0001424A 6200                       		bhi.s	locret_139C2
0001424C 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014252 4E75                       		rts	
00014254                            ; ===========================================================================
00014254                            
00014254                            loc_139B2:
00014254 1228 0026                  		move.b	$26(a0),d1
00014258 0C01 0080                  		cmpi.b	#-$80,d1
0001425C 6300                       		bls.s	locret_139C2
0001425E 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014264                            
00014264                            locret_139C2:
00014264 4E75                       		rts	
00014266                            ; End of function Sonic_Loops
00014266                            
00014266                            ; ---------------------------------------------------------------------------
00014266                            ; Subroutine to	animate	Sonic's sprites
00014266                            ; ---------------------------------------------------------------------------
00014266                            
00014266                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014266                            
00014266                            Player_Anim:
00014266 0000 0000                  	dc.l	SonicAniData
0001426A 0000 0000                  	dc.l	SonicAniData ; gronic
0001426E 0000 0000                  	dc.l	SonicAniData ; anakama
00014272                            	; Insert more animation data for other characters here
00014272                            	
00014272                            Sonic_Animate:				; XREF: Obj01_Control; et al
00014272 7000                       			moveq	#0,d0
00014274 1038 FFE8                  		move.b	(v_character),d0
00014278 E548                       		lsl.w	#2,d0
0001427A 43FA FFEA                  		lea 	Player_Anim(pc),a1
0001427E                            		
0001427E 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
00014282                            	
00014282 7000                       		moveq	#0,d0
00014284 1028 001C                  		move.b	$1C(a0),d0
00014288 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0001428C 6700                       		beq.s	SAnim_Do	; if not, branch
0001428E 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00014292 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00014298 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0001429E                            
0001429E                            SAnim_Do:
0001429E D040                       		add.w	d0,d0
000142A0 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000142A4 1011                       		move.b	(a1),d0
000142A6 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
000142A8 1228 0022                  		move.b	$22(a0),d1
000142AC 0201 0001                  		andi.b	#1,d1
000142B0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000142B6 8328 0001                  		or.b	d1,1(a0)
000142BA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000142BE 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
000142C0 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000142C4                            
000142C4                            SAnim_Do2:
000142C4 7200                       		moveq	#0,d1
000142C6 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000142CA 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000142CE 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
000142D0                            
000142D0                            SAnim_Next:
000142D0 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
000142D4 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000142D8                            
000142D8                            SAnim_Delay:
000142D8 4E75                       		rts	
000142DA                            ; ===========================================================================
000142DA                            
000142DA                            SAnim_End_FF:
000142DA 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000142DC 6600                       		bne.s	SAnim_End_FE	; if not, branch
000142DE 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000142E4 1029 0001                  		move.b	1(a1),d0	; read sprite number
000142E8 60E6                       		bra.s	SAnim_Next
000142EA                            ; ===========================================================================
000142EA                            
000142EA                            SAnim_End_FE:
000142EA 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000142EC 6600                       		bne.s	SAnim_End_FD	; if not, branch
000142EE 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000142F2 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000142F6 9200                       		sub.b	d0,d1
000142F8 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000142FC 60D2                       		bra.s	SAnim_Next
000142FE                            ; ===========================================================================
000142FE                            
000142FE                            SAnim_End_FD:
000142FE 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014300 6600                       		bne.s	SAnim_End	; if not, branch
00014302 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014308                            
00014308                            SAnim_End:
00014308 4E75                       		rts	
0001430A                            ; ===========================================================================
0001430A                            
0001430A                            SAnim_WalkRun:				; XREF: SAnim_Do
0001430A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001430E 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014310 5200                       		addq.b	#1,d0		; is animation walking/running?
00014312 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014316 7200                       		moveq	#0,d1
00014318 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001431C 1428 0022                  		move.b	$22(a0),d2
00014320 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014324 6600                       		bne.s	loc_13A70	; if yes, branch
00014326 4600                       		not.b	d0		; reverse angle
00014328                            
00014328                            loc_13A70:
00014328 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001432C 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
0001432E 7203                       		moveq	#3,d1
00014330                            
00014330                            loc_13A78:
00014330 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014336 B302                       		eor.b	d1,d2
00014338 8528 0001                  		or.b	d2,1(a0)
0001433C 0828 0005 0022             		btst	#5,$22(a0)
00014342 6600 0000                  		bne.w	SAnim_Push
00014346 E808                       		lsr.b	#4,d0		; divide angle by $10
00014348 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001434C 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014350 6A00                       		bpl.s	loc_13A9C
00014352 4442                       		neg.w	d2
00014354                            
00014354                            loc_13A9C:
00014354 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
0001435A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001435E 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014360 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014366 1200                       		move.b	d0,d1
00014368 E209                       		lsr.b	#1,d1
0001436A D001                       		add.b	d1,d0
0001436C                            
0001436C                            loc_13AB4:
0001436C D000                       		add.b	d0,d0
0001436E 1600                       		move.b	d0,d3
00014370 4442                       		neg.w	d2
00014372 0642 0800                  		addi.w	#$800,d2
00014376 6A00                       		bpl.s	loc_13AC2
00014378 7400                       		moveq	#0,d2
0001437A                            
0001437A                            loc_13AC2:
0001437A E04A                       		lsr.w	#8,d2
0001437C 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014380 6100 FF42                  		bsr.w	SAnim_Do2
00014384 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00014388 4E75                       		rts	
0001438A                            ; ===========================================================================
0001438A                            
0001438A                            SAnim_RollJump:				; XREF: SAnim_WalkRun
0001438A 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
0001438C 6600                       		bne.s	SAnim_Push	; if not, branch
0001438E 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014392 6A00                       		bpl.s	loc_13ADE
00014394 4442                       		neg.w	d2
00014396                            
00014396                            loc_13ADE:
00014396 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
0001439C 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000143A0 6400                       		bcc.s	loc_13AF0	; if yes, branch
000143A2 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000143A8                            
000143A8                            loc_13AF0:
000143A8 4442                       		neg.w	d2
000143AA 0642 0400                  		addi.w	#$400,d2
000143AE 6A00                       		bpl.s	loc_13AFA
000143B0 7400                       		moveq	#0,d2
000143B2                            
000143B2                            loc_13AFA:
000143B2 E04A                       		lsr.w	#8,d2
000143B4 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000143B8 1228 0022                  		move.b	$22(a0),d1
000143BC 0201 0001                  		andi.b	#1,d1
000143C0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000143C6 8328 0001                  		or.b	d1,1(a0)
000143CA 6000 FEF8                  		bra.w	SAnim_Do2
000143CE                            ; ===========================================================================
000143CE                            
000143CE                            SAnim_Push:				; XREF: SAnim_RollJump
000143CE 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000143D2 6B00                       		bmi.s	loc_13B1E
000143D4 4442                       		neg.w	d2
000143D6                            
000143D6                            loc_13B1E:
000143D6 0642 0800                  		addi.w	#$800,d2
000143DA 6A00                       		bpl.s	loc_13B26
000143DC 7400                       		moveq	#0,d2
000143DE                            
000143DE                            loc_13B26:
000143DE EC4A                       		lsr.w	#6,d2
000143E0 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000143E4 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000143EA 1228 0022                  		move.b	$22(a0),d1
000143EE 0201 0001                  		andi.b	#1,d1
000143F2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000143F8 8328 0001                  		or.b	d1,1(a0)
000143FC 6000 FEC6                  		bra.w	SAnim_Do2
00014400                            ; End of function Sonic_Animate
00014400                            
00014400                            ; ===========================================================================
00014400                            SonicAniData:
00014400                            	include "_anim\Sonic.asm"
00014400                            ; ---------------------------------------------------------------------------
00014400                            ; Animation script - Sonic
00014400                            ; ---------------------------------------------------------------------------
00014400 0000                       		dc.w SonAni_Walk-SonicAniData
00014402 0000                       		dc.w SonAni_Run-SonicAniData
00014404 0000                       		dc.w SonAni_Roll-SonicAniData
00014406 0000                       		dc.w SonAni_Roll2-SonicAniData
00014408 0000                       		dc.w SonAni_Push-SonicAniData
0001440A 0000                       		dc.w SonAni_Wait-SonicAniData
0001440C 0000                       		dc.w SonAni_Balance-SonicAniData
0001440E 0000                       		dc.w SonAni_LookUp-SonicAniData
00014410 0000                       		dc.w SonAni_Duck-SonicAniData
00014412 0000                       		dc.w SonAni_Warp1-SonicAniData
00014414 0000                       		dc.w SonAni_Warp2-SonicAniData
00014416 0000                       		dc.w SonAni_Warp3-SonicAniData
00014418 0000                       		dc.w SonAni_Warp4-SonicAniData
0001441A 0000                       		dc.w SonAni_Stop-SonicAniData
0001441C 0000                       		dc.w SonAni_Float1-SonicAniData
0001441E 0000                       		dc.w SonAni_Float2-SonicAniData
00014420 0000                       		dc.w SonAni_Spring-SonicAniData
00014422 0000                       		dc.w SonAni_LZHang-SonicAniData
00014424 0000                       		dc.w SonAni_Leap1-SonicAniData
00014426 0000                       		dc.w SonAni_Leap2-SonicAniData
00014428 0000                       		dc.w SonAni_Surf-SonicAniData
0001442A 0000                       		dc.w SonAni_Bubble-SonicAniData
0001442C 0000                       		dc.w SonAni_Death1-SonicAniData
0001442E 0000                       		dc.w SonAni_Drown-SonicAniData
00014430 0000                       		dc.w SonAni_Death2-SonicAniData
00014432 0000                       		dc.w SonAni_Shrink-SonicAniData
00014434 0000                       		dc.w SonAni_Hurt-SonicAniData
00014436 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014438 0000                       		dc.w SonAni_Blank-SonicAniData
0001443A 0000                       		dc.w SonAni_Float3-SonicAniData
0001443C 0000                       		dc.w SonAni_Float4-SonicAniData
0001443E FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014448 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014450 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014458 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014460 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014468 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
0001447E 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
00014482 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014486 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
0001448A 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
0001448E 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014492 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014496 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
0001449A 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
0001449E 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000144A2 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000144AA 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000144AE 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000144B2 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000144B8 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000144BE 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000144C2 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000144CA 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000144CE 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000144D2 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000144D6 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000144E0 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
000144E4 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000144E8 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000144EC 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000144F4 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000144F8                            		even
000144F8                            		even
000144F8                            
000144F8                            ; ---------------------------------------------------------------------------
000144F8                            ; Sonic	pattern	loading	subroutine
000144F8                            ; ---------------------------------------------------------------------------
000144F8                            
000144F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144F8                            Player_DPLC:
000144F8 0000 0000                  	dc.l	SonicDynPLC
000144FC 0000 0000                  	dc.l	SonicDynPLC ; gronic
00014500 0000 0000                  	dc.l	SonicDynPLC ; anakama
00014504                            	; add pointers for player dplc here
00014504                            Player_Art:
00014504 0000 0000                  	dc.l	Art_Sonic
00014508 0000 0000                  	dc.l	Art_Sonic ; gronic
0001450C 0000 0000                  	dc.l	Art_Sonic ; anakama
00014510                            	; add pointers for player art here
00014510                            
00014510                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014510 7000                       		moveq	#0,d0
00014512 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014516 B038 F766                  		cmp.b	($FFFFF766).w,d0
0001451A 6700                       		beq.s	locret_13C96
0001451C 11C0 F766                  		move.b	d0,($FFFFF766).w
00014520                            		
00014520 323C 0000                  		move.w	#0,d1
00014524 1238 FFE8                  		move.b	(v_character),d1
00014528 E549                       		lsl.w	#2,d1
0001452A 45FA FFCC                  		lea 	Player_DPLC(pc),a2
0001452E                            
0001452E 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
00014532                            		
00014532 D040                       		add.w	d0,d0
00014534 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014538 7200                       		moveq	#0,d1
0001453A 121A                       		move.b	(a2)+,d1	; read "number of entries" value
0001453C 5301                       		subq.b	#1,d1
0001453E 6B00                       		bmi.s	locret_13C96
00014540 47F8 C800                  		lea	($FFFFC800).w,a3
00014544 11FC 0001 F767             		move.b	#1,($FFFFF767).w
0001454A                            
0001454A                            SPLC_ReadEntry:
0001454A 303C 0000                  		move.w	#0,d0
0001454E 1038 FFE8                  		move.b	(v_character),d0
00014552 E548                       		lsl.w	#2,d0
00014554 43FA FFAE                  		lea 	Player_Art(pc),a1
00014558                            
00014558 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
0001455C                            
0001455C 7400                       		moveq	#0,d2
0001455E 141A                       		move.b	(a2)+,d2
00014560 3002                       		move.w	d2,d0
00014562 E808                       		lsr.b	#4,d0
00014564 E14A                       		lsl.w	#8,d2
00014566 141A                       		move.b	(a2)+,d2
00014568 EB4A                       		lsl.w	#5,d2
0001456A D3C2                       		adda.l	d2,a1
0001456C                            
0001456C                            SPLC_LoadTile:
0001456C 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014570 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00014574 47EB 0020                  		lea	$20(a3),a3	; next tile
00014578 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
0001457C                            
0001457C 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014580                            
00014580                            locret_13C96:
00014580 4E75                       		rts	
00014582                            ; End of function LoadSonicDynPLC
00014582                            
00014582                            ; ===========================================================================
00014582                            ; ---------------------------------------------------------------------------
00014582                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014582                            ; ---------------------------------------------------------------------------
00014582                            
00014582                            Obj0A:					; XREF: Obj_Index
00014582 7000                       		moveq	#0,d0
00014584 1028 0024                  		move.b	$24(a0),d0
00014588 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
0001458C 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014590                            ; ===========================================================================
00014590 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014594 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014598 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
0001459C 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
000145A0 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
000145A2                            ; ===========================================================================
000145A2                            
000145A2                            Obj0A_Main:				; XREF: Obj0A_Index
000145A2 5428 0024                  		addq.b	#2,$24(a0)
000145A6 217C 0001 319A 0004        		move.l	#Map_obj64,4(a0)
000145AE 317C 8348 0002             		move.w	#$8348,2(a0)
000145B4 117C 0084 0001             		move.b	#$84,1(a0)
000145BA 117C 0010 0019             		move.b	#$10,$19(a0)
000145C0 117C 0001 0018             		move.b	#1,$18(a0)
000145C6 1028 0028                  		move.b	$28(a0),d0
000145CA 6A00                       		bpl.s	loc_13D00
000145CC 5028 0024                  		addq.b	#8,$24(a0)
000145D0 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000145D8 317C 0440 0002             		move.w	#$440,2(a0)
000145DE 0240 007F                  		andi.w	#$7F,d0
000145E2 1140 0033                  		move.b	d0,$33(a0)
000145E6 6000 0000                  		bra.w	Obj0A_Countdown
000145EA                            ; ===========================================================================
000145EA                            
000145EA                            loc_13D00:
000145EA 1140 001C                  		move.b	d0,$1C(a0)
000145EE 3168 0008 0030             		move.w	8(a0),$30(a0)
000145F4 317C FF78 0012             		move.w	#-$88,$12(a0)
000145FA                            
000145FA                            Obj0A_Animate:				; XREF: Obj0A_Index
000145FA 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014600 4EB9 0000 AEC8             		jsr	AnimateSprite
00014606                            
00014606                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014606 3038 F646                  		move.w	($FFFFF646).w,d0
0001460A B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
0001460E 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014610 117C 0006 0024             		move.b	#6,$24(a0)
00014616 5E28 001C                  		addq.b	#7,$1C(a0)
0001461A 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014620 6700                       		beq.s	Obj0A_Display
00014622 6000                       		bra.s	Obj0A_Display
00014624                            ; ===========================================================================
00014624                            
00014624                            Obj0A_Wobble:
00014624 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014628 6700                       		beq.s	loc_13D44
0001462A 5868 0030                  		addq.w	#4,$30(a0)
0001462E                            
0001462E                            loc_13D44:
0001462E 1028 0026                  		move.b	$26(a0),d0
00014632 5228 0026                  		addq.b	#1,$26(a0)
00014636 0240 007F                  		andi.w	#$7F,d0
0001463A 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014640 1031 0000                  		move.b	(a1,d0.w),d0
00014644 4880                       		ext.w	d0
00014646 D068 0030                  		add.w	$30(a0),d0
0001464A 3140 0008                  		move.w	d0,8(a0)
0001464E 6100                       		bsr.s	Obj0A_ShowNumber
00014650 4EBA 9790                  		jsr	SpeedToPos
00014654 4A28 0001                  		tst.b	1(a0)
00014658 6A00                       		bpl.s	Obj0A_Delete
0001465A 4EFA 97AC                  		jmp	DisplaySprite
0001465E                            ; ===========================================================================
0001465E                            
0001465E                            Obj0A_Delete:
0001465E 4EFA 97E4                  		jmp	DeleteObject
00014662                            ; ===========================================================================
00014662                            
00014662                            Obj0A_Display:				; XREF: Obj0A_Index
00014662 6100                       		bsr.s	Obj0A_ShowNumber
00014664 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001466A 4EB9 0000 AEC8             		jsr	AnimateSprite
00014670 4EFA 9796                  		jmp	DisplaySprite
00014674                            ; ===========================================================================
00014674                            
00014674                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014674 4EFA 97CE                  		jmp	DeleteObject
00014678                            ; ===========================================================================
00014678                            
00014678                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014678 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
0001467E 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014680 5368 0038                  		subq.w	#1,$38(a0)
00014684 6600                       		bne.s	Obj0A_Display2
00014686 117C 000E 0024             		move.b	#$E,$24(a0)
0001468C 5E28 001C                  		addq.b	#7,$1C(a0)
00014690 60D0                       		bra.s	Obj0A_Display
00014692                            ; ===========================================================================
00014692                            
00014692                            Obj0A_Display2:
00014692 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014698 4EB9 0000 AEC8             		jsr	AnimateSprite
0001469E 4A28 0001                  		tst.b	1(a0)
000146A2 6A00                       		bpl.s	Obj0A_Delete3
000146A4 4EFA 9762                  		jmp	DisplaySprite
000146A8                            ; ===========================================================================
000146A8                            
000146A8                            Obj0A_Delete3:
000146A8 4EFA 979A                  		jmp	DeleteObject
000146AC                            ; ===========================================================================
000146AC                            
000146AC                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
000146AC 4A68 0038                  		tst.w	$38(a0)
000146B0 6700                       		beq.s	locret_13E1A
000146B2 5368 0038                  		subq.w	#1,$38(a0)
000146B6 6600                       		bne.s	locret_13E1A
000146B8 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000146BE 6400                       		bcc.s	locret_13E1A
000146C0 317C 000F 0038             		move.w	#$F,$38(a0)
000146C6 4268 0012                  		clr.w	$12(a0)
000146CA 117C 0080 0001             		move.b	#$80,1(a0)
000146D0 3028 0008                  		move.w	8(a0),d0
000146D4 9078 F700                  		sub.w	($FFFFF700).w,d0
000146D8 0640 0080                  		addi.w	#$80,d0
000146DC 3140 0008                  		move.w	d0,8(a0)
000146E0 3028 000C                  		move.w	$C(a0),d0
000146E4 9078 F704                  		sub.w	($FFFFF704).w,d0
000146E8 0640 0080                  		addi.w	#$80,d0
000146EC 3140 000A                  		move.w	d0,$A(a0)
000146F0 117C 000C 0024             		move.b	#$C,$24(a0)
000146F6                            
000146F6                            locret_13E1A:
000146F6 4E75                       		rts	
000146F8                            ; ===========================================================================
000146F8                            Obj0A_WobbleData:
000146F8 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014709 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
0001471A 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
0001472B 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
0001473B FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014748 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014755 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014762 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
0001476F FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014778                            ; ===========================================================================
00014778                            
00014778                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014778 4A68 002C                  		tst.w	$2C(a0)
0001477C 6600 0000                  		bne.w	loc_13F86
00014780 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014786 6400 0000                  		bcc.w	locret_1408C
0001478A 0838 0006 D022             		btst	#6,($FFFFD022).w
00014790 6700 0000                  		beq.w	locret_1408C
00014794 5368 0038                  		subq.w	#1,$38(a0)
00014798 6A00 0000                  		bpl.w	loc_13FAC
0001479C 317C 003B 0038             		move.w	#59,$38(a0)
000147A2 317C 0001 0036             		move.w	#1,$36(a0)
000147A8 4EB9 0000 2CC6             		jsr	(RandomNumber).l
000147AE 0240 0001                  		andi.w	#1,d0
000147B2 1140 0034                  		move.b	d0,$34(a0)
000147B6 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
000147BA 0C40 0019                  		cmpi.w	#$19,d0
000147BE 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000147C0 0C40 0014                  		cmpi.w	#$14,d0
000147C4 6700                       		beq.s	Obj0A_WarnSound
000147C6 0C40 000F                  		cmpi.w	#$F,d0
000147CA 6700                       		beq.s	Obj0A_WarnSound
000147CC 0C40 000C                  		cmpi.w	#$C,d0
000147D0 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000147D2 6600                       		bne.s	loc_13F02
000147D4 303C 0092                  		move.w	#$92,d0
000147D8 4EB9 0000 15BA             		jsr	(PlaySound).l	; play countdown music
000147DE                            
000147DE                            loc_13F02:
000147DE 5328 0032                  		subq.b	#1,$32(a0)
000147E2 6A00                       		bpl.s	Obj0A_ReduceAir
000147E4 1168 0033 0032             		move.b	$33(a0),$32(a0)
000147EA 08E8 0007 0036             		bset	#7,$36(a0)
000147F0 6000                       		bra.s	Obj0A_ReduceAir
000147F2                            ; ===========================================================================
000147F2                            
000147F2                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000147F2 303C 00C2                  		move.w	#$C2,d0
000147F6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000147FC                            
000147FC                            Obj0A_ReduceAir:
000147FC 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014800 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014804 6100 0000                  		bsr.w	ResumeMusic
00014808 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001480E 303C 00B2                  		move.w	#$B2,d0
00014812 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play drowning sound
00014818 117C 000A 0034             		move.b	#$A,$34(a0)
0001481E 317C 0001 0036             		move.w	#1,$36(a0)
00014824 317C 0078 002C             		move.w	#$78,$2C(a0)
0001482A 2F08                       		move.l	a0,-(sp)
0001482C 41F8 D000                  		lea	($FFFFD000).w,a0
00014830 6100 F818                  		bsr.w	Sonic_ResetOnFloor
00014834 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
0001483A 08E8 0001 0022             		bset	#1,$22(a0)
00014840 08E8 0007 0002             		bset	#7,2(a0)
00014846 317C 0000 0012             		move.w	#0,$12(a0)
0001484C 317C 0000 0010             		move.w	#0,$10(a0)
00014852 317C 0000 0014             		move.w	#0,$14(a0)
00014858 11FC 0001 F744             		move.b	#1,($FFFFF744).w
0001485E 205F                       		movea.l	(sp)+,a0
00014860 4E75                       		rts	
00014862                            ; ===========================================================================
00014862                            
00014862                            loc_13F86:
00014862 5368 002C                  		subq.w	#1,$2C(a0)
00014866 6600                       		bne.s	loc_13F94
00014868 11FC 0006 D024             		move.b	#6,($FFFFD024).w
0001486E 4E75                       		rts	
00014870                            ; ===========================================================================
00014870                            
00014870                            loc_13F94:
00014870 2F08                       		move.l	a0,-(sp)
00014872 41F8 D000                  		lea	($FFFFD000).w,a0
00014876 4EBA 956A                  		jsr	SpeedToPos
0001487A 0668 0010 0012             		addi.w	#$10,$12(a0)
00014880 205F                       		movea.l	(sp)+,a0
00014882 6000                       		bra.s	loc_13FAC
00014884                            ; ===========================================================================
00014884                            
00014884                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014884 6000                       		bra.s	Obj0A_MakeItem
00014886                            ; ===========================================================================
00014886                            
00014886                            loc_13FAC:
00014886 4A68 0036                  		tst.w	$36(a0)
0001488A 6700 0000                  		beq.w	locret_1408C
0001488E 5368 003A                  		subq.w	#1,$3A(a0)
00014892 6A00 0000                  		bpl.w	locret_1408C
00014896                            
00014896                            Obj0A_MakeItem:
00014896 4EB9 0000 2CC6             		jsr	(RandomNumber).l
0001489C 0240 000F                  		andi.w	#$F,d0
000148A0 3140 003A                  		move.w	d0,$3A(a0)
000148A4 4EBA 99E8                  		jsr	SingleObjLoad
000148A8 6600 0000                  		bne.w	locret_1408C
000148AC 12BC 000A                  		move.b	#$A,0(a1)	; load object
000148B0 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
000148B6 7006                       		moveq	#6,d0
000148B8 0838 0000 D022             		btst	#0,($FFFFD022).w
000148BE 6700                       		beq.s	loc_13FF2
000148C0 4440                       		neg.w	d0
000148C2 137C 0040 0026             		move.b	#$40,$26(a1)
000148C8                            
000148C8                            loc_13FF2:
000148C8 D169 0008                  		add.w	d0,8(a1)
000148CC 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000148D2 137C 0006 0028             		move.b	#6,$28(a1)
000148D8 4A68 002C                  		tst.w	$2C(a0)
000148DC 6700 0000                  		beq.w	loc_1403E
000148E0 0268 0007 003A             		andi.w	#7,$3A(a0)
000148E6 0668 0000 003A             		addi.w	#0,$3A(a0)
000148EC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000148F0 0440 000C                  		subi.w	#$C,d0
000148F4 3340 000C                  		move.w	d0,$C(a1)
000148F8 4EB9 0000 2CC6             		jsr	(RandomNumber).l
000148FE 1340 0026                  		move.b	d0,$26(a1)
00014902 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014906 0200 0003                  		andi.b	#3,d0
0001490A 6600                       		bne.s	loc_14082
0001490C 137C 000E 0028             		move.b	#$E,$28(a1)
00014912 6000                       		bra.s	loc_14082
00014914                            ; ===========================================================================
00014914                            
00014914                            loc_1403E:
00014914 0828 0007 0036             		btst	#7,$36(a0)
0001491A 6700                       		beq.s	loc_14082
0001491C 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014920 E24A                       		lsr.w	#1,d2
00014922 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00014928 0240 0003                  		andi.w	#3,d0
0001492C 6600                       		bne.s	loc_1406A
0001492E 08E8 0006 0036             		bset	#6,$36(a0)
00014934 6600                       		bne.s	loc_14082
00014936 1342 0028                  		move.b	d2,$28(a1)
0001493A 337C 001C 0038             		move.w	#$1C,$38(a1)
00014940                            
00014940                            loc_1406A:
00014940 4A28 0034                  		tst.b	$34(a0)
00014944 6600                       		bne.s	loc_14082
00014946 08E8 0006 0036             		bset	#6,$36(a0)
0001494C 6600                       		bne.s	loc_14082
0001494E 1342 0028                  		move.b	d2,$28(a1)
00014952 337C 001C 0038             		move.w	#$1C,$38(a1)
00014958                            
00014958                            loc_14082:
00014958 5328 0034                  		subq.b	#1,$34(a0)
0001495C 6A00                       		bpl.s	locret_1408C
0001495E 4268 0036                  		clr.w	$36(a0)
00014962                            
00014962                            locret_1408C:
00014962 4E75                       		rts	
00014964                            
00014964                            ; ---------------------------------------------------------------------------
00014964                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014964                            ; ---------------------------------------------------------------------------
00014964                            
00014964                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014964                            
00014964                            
00014964                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014964 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001496A                             
0001496A                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
0001496A                             
0001496A 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
0001496E                             
0001496E 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014974 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014976 43F9 0000 3C72             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001497C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001497E                             
0001497E                            Air_GetBgm2:
0001497E 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014984 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014986 43F9 0000 3C7A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001498C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001498E                             
0001498E                            Air_GetBgm3:
0001498E 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014994 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014996 43F9 0000 3C80             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
0001499C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001499E                             
0001499E                            Air_GetBgm4:
0001499E 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000149A4 6600                       		bne.s	Air_PlayMusic	; if not, branch
000149A6 43F9 0000 3C86             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000149AC                             
000149AC                            Air_PlayMusic:
000149AC 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
000149B0                             
000149B0                            loc_140A6:
000149B0 4EB9 0000 15BA             		jsr	(PlaySound).l
000149B6                             
000149B6                            ; NineKode ends here
000149B6                            
000149B6                            loc_140AC:
000149B6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000149BC 4238 D372                  		clr.b	($FFFFD372).w
000149C0 4E75                       		rts	
000149C2                            ; End of function ResumeMusic
000149C2                            
000149C2                            ; ===========================================================================
000149C2                            Ani_obj0A:
000149C2                            	include "_anim\obj0A.asm"
000149C2                            ; ---------------------------------------------------------------------------
000149C2                            ; Animation script - countdown numbers and bubbles (LZ)
000149C2                            ; ---------------------------------------------------------------------------
000149C2 0000                       		dc.w byte_140D6-Ani_obj0A
000149C4 0000                       		dc.w byte_140E0-Ani_obj0A
000149C6 0000                       		dc.w byte_140EA-Ani_obj0A
000149C8 0000                       		dc.w byte_140F4-Ani_obj0A
000149CA 0000                       		dc.w byte_140FE-Ani_obj0A
000149CC 0000                       		dc.w byte_14108-Ani_obj0A
000149CE 0000                       		dc.w byte_14112-Ani_obj0A
000149D0 0000                       		dc.w byte_14118-Ani_obj0A
000149D2 0000                       		dc.w byte_14120-Ani_obj0A
000149D4 0000                       		dc.w byte_14128-Ani_obj0A
000149D6 0000                       		dc.w byte_14130-Ani_obj0A
000149D8 0000                       		dc.w byte_14138-Ani_obj0A
000149DA 0000                       		dc.w byte_14140-Ani_obj0A
000149DC 0000                       		dc.w byte_14148-Ani_obj0A
000149DE 0000                       		dc.w byte_1414A-Ani_obj0A
000149E0 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000149EA 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000149F4 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000149FE 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014A08 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014A12 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014A1C 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014A22 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014A2A 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014A32 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014A3A 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014A42 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014A4A 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014A52 0EFC                       byte_14148:	dc.b $E, $FC
00014A54 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014A5A                            		even
00014A5A                            		even
00014A5A                            
00014A5A                            ; ---------------------------------------------------------------------------
00014A5A                            ; Sprite mappings - drowning countdown numbers (LZ)
00014A5A                            ; ---------------------------------------------------------------------------
00014A5A                            Map_obj0A:
00014A5A                            	include "_maps\obj0A.asm"
00014A5A                            ; ---------------------------------------------------------------------------
00014A5A                            ; Sprite mappings - drowning countdown numbers (LZ)
00014A5A                            ; ---------------------------------------------------------------------------
00014A5A 0000                       		dc.w byte_14152-Map_obj0A
00014A5C 01                         byte_14152:	dc.b 1
00014A5D E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014A62                            		even
00014A62                            		even
00014A62                            
00014A62                            ; ===========================================================================
00014A62                            ; ---------------------------------------------------------------------------
00014A62                            ; Object 38 - shield and invincibility stars
00014A62                            ; ---------------------------------------------------------------------------
00014A62                            
00014A62                            Obj38:					; XREF: Obj_Index
00014A62 7000                       		moveq	#0,d0
00014A64 1028 0024                  		move.b	$24(a0),d0
00014A68 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014A6C 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014A70                            ; ===========================================================================
00014A70 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014A72 0000                       		dc.w Obj38_Shield-Obj38_Index
00014A74 0000                       		dc.w Obj38_Stars-Obj38_Index
00014A76                            ; ===========================================================================
00014A76                            
00014A76                            Obj38_Main:				; XREF: Obj38_Index
00014A76 5428 0024                  		addq.b	#2,$24(a0)
00014A7A 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014A82 117C 0004 0001             		move.b	#4,1(a0)
00014A88 117C 0001 0018             		move.b	#1,$18(a0)
00014A8E 117C 0010 0019             		move.b	#$10,$19(a0)
00014A94 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014A98 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014A9A 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014AA0 4E75                       		rts	
00014AA2                            ; ===========================================================================
00014AA2                            
00014AA2                            Obj38_DoStars:
00014AA2 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014AA6 317C 055C 0002             		move.w	#$55C,2(a0)
00014AAC 4E75                       		rts	
00014AAE                            ; ===========================================================================
00014AAE                            
00014AAE                            Obj38_Shield:				; XREF: Obj38_Index
00014AAE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014AB2 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014AB4 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014AB8 6700                       		beq.s	Obj38_Delete	; if not, branch
00014ABA 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014AC0 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014AC6 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014ACC 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014AD2 4EB9 0000 AEC8             		jsr	AnimateSprite
00014AD8 4EFA 932E                  		jmp	DisplaySprite
00014ADC                            ; ===========================================================================
00014ADC                            
00014ADC                            Obj38_RmvShield:
00014ADC 4E75                       		rts	
00014ADE                            ; ===========================================================================
00014ADE                            
00014ADE                            Obj38_Delete:
00014ADE 4EFA 9364                  		jmp	DeleteObject
00014AE2                            ; ===========================================================================
00014AE2                            
00014AE2                            Obj38_Stars:				; XREF: Obj38_Index
00014AE2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014AE6 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014AE8 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014AEC 1228 001C                  		move.b	$1C(a0),d1
00014AF0 5301                       		subq.b	#1,d1
00014AF2 6000                       		bra.s	Obj38_StarTrail
00014AF4                            ; ===========================================================================
00014AF4 E909                       		lsl.b	#4,d1
00014AF6 5801                       		addq.b	#4,d1
00014AF8 9001                       		sub.b	d1,d0
00014AFA 1228 0030                  		move.b	$30(a0),d1
00014AFE 9001                       		sub.b	d1,d0
00014B00 5801                       		addq.b	#4,d1
00014B02 0201 000F                  		andi.b	#$F,d1
00014B06 1141 0030                  		move.b	d1,$30(a0)
00014B0A 6000                       		bra.s	Obj38_StarTrail2a
00014B0C                            ; ===========================================================================
00014B0C                            
00014B0C                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014B0C E709                       		lsl.b	#3,d1
00014B0E 1401                       		move.b	d1,d2
00014B10 D201                       		add.b	d1,d1
00014B12 D202                       		add.b	d2,d1
00014B14 5801                       		addq.b	#4,d1
00014B16 9001                       		sub.b	d1,d0
00014B18 1228 0030                  		move.b	$30(a0),d1
00014B1C 9001                       		sub.b	d1,d0
00014B1E 5801                       		addq.b	#4,d1
00014B20 0C01 0018                  		cmpi.b	#$18,d1
00014B24 6500                       		bcs.s	Obj38_StarTrail2
00014B26 7200                       		moveq	#0,d1
00014B28                            
00014B28                            Obj38_StarTrail2:
00014B28 1141 0030                  		move.b	d1,$30(a0)
00014B2C                            
00014B2C                            Obj38_StarTrail2a:
00014B2C 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014B30 43F1 0000                  		lea	(a1,d0.w),a1
00014B34 3159 0008                  		move.w	(a1)+,8(a0)
00014B38 3159 000C                  		move.w	(a1)+,$C(a0)
00014B3C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014B42 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014B48 4EB9 0000 AEC8             		jsr	AnimateSprite
00014B4E 4EFA 92B8                  		jmp	DisplaySprite
00014B52                            ; ===========================================================================
00014B52                            
00014B52                            Obj38_Delete2:				; XREF: Obj38_Stars
00014B52 4EFA 92F0                  		jmp	DeleteObject
00014B56                            ; ===========================================================================
00014B56                            ; ---------------------------------------------------------------------------
00014B56                            ; Object 4A - special stage entry from beta
00014B56                            ; ---------------------------------------------------------------------------
00014B56                            
00014B56                            Obj4A:					; XREF: Obj_Index
00014B56 7000                       		moveq	#0,d0
00014B58 1028 0024                  		move.b	$24(a0),d0
00014B5C 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014B60 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014B64                            ; ===========================================================================
00014B64 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014B66 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014B68 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014B6A                            ; ===========================================================================
00014B6A                            
00014B6A                            Obj4A_Main:				; XREF: Obj4A_Index
00014B6A 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014B6E 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014B70 4E75                       		rts	
00014B72                            ; ===========================================================================
00014B72                            
00014B72                            Obj4A_Main2:
00014B72 5428 0024                  		addq.b	#2,$24(a0)
00014B76 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014B7E 117C 0004 0001             		move.b	#4,1(a0)
00014B84 117C 0001 0018             		move.b	#1,$18(a0)
00014B8A 117C 0038 0019             		move.b	#$38,$19(a0)
00014B90 317C 0541 0002             		move.w	#$541,2(a0)
00014B96 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014B9C                            
00014B9C                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014B9C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014BA2 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014BA8 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014BAE 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014BB4 4EB9 0000 AEC8             		jsr	AnimateSprite
00014BBA 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014BC0 6600                       		bne.s	Obj4A_Display
00014BC2 4A38 D000                  		tst.b	($FFFFD000).w
00014BC6 6700                       		beq.s	Obj4A_Display
00014BC8 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014BCE 303C 00A8                  		move.w	#$A8,d0
00014BD2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014BD8                            
00014BD8                            Obj4A_Display:
00014BD8 4EFA 922E                  		jmp	DisplaySprite
00014BDC                            ; ===========================================================================
00014BDC                            
00014BDC                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014BDC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014BE0 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014BE2 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014BE8 4EFA 925A                  		jmp	DeleteObject
00014BEC                            ; ===========================================================================
00014BEC                            
00014BEC                            Obj4A_Wait:
00014BEC 4E75                       		rts	
00014BEE                            ; ===========================================================================
00014BEE                            ; ---------------------------------------------------------------------------
00014BEE                            ; Object 08 - water splash (LZ)
00014BEE                            ; ---------------------------------------------------------------------------
00014BEE                            
00014BEE                            Obj08:					; XREF: Obj_Index
00014BEE 7000                       		moveq	#0,d0
00014BF0 1028 0024                  		move.b	$24(a0),d0
00014BF4 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014BF8 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014BFC                            ; ===========================================================================
00014BFC 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014BFE 0000                       		dc.w Obj08_Display-Obj08_Index
00014C00 0000                       		dc.w Obj08_Delete-Obj08_Index
00014C02                            ; ===========================================================================
00014C02                            
00014C02                            Obj08_Main:				; XREF: Obj08_Index
00014C02 5428 0024                  		addq.b	#2,$24(a0)
00014C06 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014C0E 0028 0004 0001             		ori.b	#4,1(a0)
00014C14 117C 0001 0018             		move.b	#1,$18(a0)
00014C1A 117C 0010 0019             		move.b	#$10,$19(a0)
00014C20 317C 4259 0002             		move.w	#$4259,2(a0)
00014C26 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014C2C                            
00014C2C                            Obj08_Display:				; XREF: Obj08_Index
00014C2C 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014C32 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014C38 4EB9 0000 AEC8             		jsr	AnimateSprite
00014C3E 4EFA 91C8                  		jmp	DisplaySprite
00014C42                            ; ===========================================================================
00014C42                            
00014C42                            Obj08_Delete:				; XREF: Obj08_Index
00014C42 4EFA 9200                  		jmp	DeleteObject	; delete when animation	is complete
00014C46                            ; ===========================================================================
00014C46                            Ani_obj38:
00014C46                            	include "_anim\obj38.asm"
00014C46                            ; ---------------------------------------------------------------------------
00014C46                            ; Animation script - shield and invincibility stars
00014C46                            ; ---------------------------------------------------------------------------
00014C46 0000                       		dc.w byte_14356-Ani_obj38
00014C48 0000                       		dc.w byte_1435E-Ani_obj38
00014C4A 0000                       		dc.w byte_14364-Ani_obj38
00014C4C 0000                       		dc.w byte_1437E-Ani_obj38
00014C4E 0000                       		dc.w byte_14398-Ani_obj38
00014C50 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014C58 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014C5E 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014C6F 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014C78 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014C89 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014C92 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014CA3 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014CAC                            		even
00014CAC                            		even
00014CAC                            
00014CAC                            ; ---------------------------------------------------------------------------
00014CAC                            ; Sprite mappings - shield and invincibility stars
00014CAC                            ; ---------------------------------------------------------------------------
00014CAC                            Map_obj38:
00014CAC                            	include "_maps\obj38.asm"
00014CAC                            ; ---------------------------------------------------------------------------
00014CAC                            ; Sprite mappings - shield and invincibility stars
00014CAC                            ; ---------------------------------------------------------------------------
00014CAC 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014CB0 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014CB4 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014CB8 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014CBC 04                         byte_143C2:	dc.b 4
00014CBD E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014CC2 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014CC7 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014CCC 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014CD1 04                         byte_143D7:	dc.b 4
00014CD2 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014CD7 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014CDC 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014CE1 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014CE6 04                         byte_143EC:	dc.b 4
00014CE7 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014CEC E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014CF1 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014CF6 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014CFB 04                         byte_14401:	dc.b 4
00014CFC E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014D01 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014D06 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014D0B 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014D10 04                         byte_14416:	dc.b 4
00014D11 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014D16 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014D1B 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014D20 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014D25 04                         byte_1442B:	dc.b 4
00014D26 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014D2B E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014D30 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014D35 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014D3A 04                         byte_14440:	dc.b 4
00014D3B E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014D40 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014D45 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014D4A 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014D50 00                         		even
00014D50 00                         		even
00014D50                            
00014D50                            Ani_obj4A:
00014D50                            	include "_anim\obj4A.asm"
00014D50                            ; ---------------------------------------------------------------------------
00014D50                            ; Animation script - special stage entry effect from beta
00014D50                            ; ---------------------------------------------------------------------------
00014D50 0000                       		dc.w byte_14458-Ani_obj4A
00014D52 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014D66                            		even
00014D66                            		even
00014D66                            
00014D66                            ; ---------------------------------------------------------------------------
00014D66                            ; Sprite mappings - special stage entry	from beta
00014D66                            ; ---------------------------------------------------------------------------
00014D66                            Map_obj4A:
00014D66                            	include "_maps\obj4A.asm"
00014D66                            ; ---------------------------------------------------------------------------
00014D66                            ; Sprite mappings - special stage entry	from beta
00014D66                            ; ---------------------------------------------------------------------------
00014D66 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014D6A 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014D6E 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014D72 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014D76 03                         byte_1447C:	dc.b 3
00014D77 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014D7C 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014D81 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014D86 03                         byte_1448C:	dc.b 3
00014D87 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014D8C 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014D91 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014D96 05                         byte_1449C:	dc.b 5
00014D97 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014D9C EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014DA1 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014DA6 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014DAB 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014DB0 09                         byte_144B6:	dc.b 9
00014DB1 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014DB6 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014DBB 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014DC0 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014DC5 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014DCA F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014DCF F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014DD4 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014DD9 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014DDE 12                         byte_144E4:	dc.b $12
00014DDF 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014DE4 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014DE9 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014DEE 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014DF3 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014DF8 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014DFD 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014E02 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014E07 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014E0C 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014E11 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014E16 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014E1B F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014E20 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014E25 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014E2A F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014E2F 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014E34 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014E39 11                         byte_1453F:	dc.b $11
00014E3A F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014E3F F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014E44 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014E49 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014E4E 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014E53 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014E58 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014E5D F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014E62 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014E67 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014E6C 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014E71 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014E76 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014E7B 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014E80 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014E85 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014E8A 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014E8F 09                         byte_14595:	dc.b 9
00014E90 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014E95 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014E9A 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014E9F 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014EA4 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014EA9 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014EAE 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014EB3 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014EB8 04                         		dc.b 4
00014EB9 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014EBE                            		even
00014EBE                            		even
00014EBE                            
00014EBE                            Ani_obj08:
00014EBE                            	include "_anim\obj08.asm"
00014EBE                            ; ---------------------------------------------------------------------------
00014EBE                            ; Animation script - water splash (LZ)
00014EBE                            ; ---------------------------------------------------------------------------
00014EBE 0000                       		dc.w byte_145C6-Ani_obj08
00014EC0 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014EC6                            		even
00014EC6                            		even
00014EC6                            
00014EC6                            ; ---------------------------------------------------------------------------
00014EC6                            ; Sprite mappings - water splash (LZ)
00014EC6                            ; ---------------------------------------------------------------------------
00014EC6                            Map_obj08:
00014EC6                            	include "_maps\obj08.asm"
00014EC6                            ; ---------------------------------------------------------------------------
00014EC6                            ; Sprite mappings - water splash (LZ)
00014EC6                            ; ---------------------------------------------------------------------------
00014EC6 0000                       		dc.w byte_145D2-Map_obj08
00014EC8 0000                       		dc.w byte_145DD-Map_obj08
00014ECA 0000                       		dc.w byte_145E8-Map_obj08
00014ECC 02                         byte_145D2:	dc.b 2
00014ECD F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014ED2 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014ED7 02                         byte_145DD:	dc.b 2
00014ED8 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014EDD EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014EE2 01                         byte_145E8:	dc.b 1
00014EE3 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014EE8                            		even
00014EE8                            		even
00014EE8                            
00014EE8                            ; ---------------------------------------------------------------------------
00014EE8                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014EE8                            ; ---------------------------------------------------------------------------
00014EE8                            
00014EE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EE8                            
00014EE8                            
00014EE8                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014EE8 0828 0003 0022             		btst	#3,$22(a0)
00014EEE 6700                       		beq.s	loc_14602
00014EF0 7000                       		moveq	#0,d0
00014EF2 11C0 F768                  		move.b	d0,($FFFFF768).w
00014EF6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014EFA 4E75                       		rts	
00014EFC                            ; ===========================================================================
00014EFC                            
00014EFC                            loc_14602:
00014EFC 7003                       		moveq	#3,d0
00014EFE 11C0 F768                  		move.b	d0,($FFFFF768).w
00014F02 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014F06 1028 0026                  		move.b	$26(a0),d0
00014F0A 0600 0020                  		addi.b	#$20,d0
00014F0E 6A00                       		bpl.s	loc_14624
00014F10 1028 0026                  		move.b	$26(a0),d0
00014F14 6A00                       		bpl.s	loc_1461E
00014F16 5300                       		subq.b	#1,d0
00014F18                            
00014F18                            loc_1461E:
00014F18 0600 0020                  		addi.b	#$20,d0
00014F1C 6000                       		bra.s	loc_14630
00014F1E                            ; ===========================================================================
00014F1E                            
00014F1E                            loc_14624:
00014F1E 1028 0026                  		move.b	$26(a0),d0
00014F22 6A00                       		bpl.s	loc_1462C
00014F24 5200                       		addq.b	#1,d0
00014F26                            
00014F26                            loc_1462C:
00014F26 0600 001F                  		addi.b	#$1F,d0
00014F2A                            
00014F2A                            loc_14630:
00014F2A 0200 00C0                  		andi.b	#$C0,d0
00014F2E 0C00 0040                  		cmpi.b	#$40,d0
00014F32 6700 0000                  		beq.w	Sonic_WalkVertL
00014F36 0C00 0080                  		cmpi.b	#$80,d0
00014F3A 6700 0000                  		beq.w	Sonic_WalkCeiling
00014F3E 0C00 00C0                  		cmpi.b	#$C0,d0
00014F42 6700 0000                  		beq.w	Sonic_WalkVertR
00014F46 3428 000C                  		move.w	$C(a0),d2
00014F4A 3628 0008                  		move.w	8(a0),d3
00014F4E 7000                       		moveq	#0,d0
00014F50 1028 0016                  		move.b	$16(a0),d0
00014F54 4880                       		ext.w	d0
00014F56 D440                       		add.w	d0,d2
00014F58 1028 0017                  		move.b	$17(a0),d0
00014F5C 4880                       		ext.w	d0
00014F5E D640                       		add.w	d0,d3
00014F60 49F8 F768                  		lea	($FFFFF768).w,a4
00014F64 367C 0010                  		movea.w	#$10,a3
00014F68 3C3C 0000                  		move.w	#0,d6
00014F6C 7A0D                       		moveq	#$D,d5
00014F6E 6100 0000                  		bsr.w	FindFloor
00014F72 3F01                       		move.w	d1,-(sp)
00014F74 3428 000C                  		move.w	$C(a0),d2
00014F78 3628 0008                  		move.w	8(a0),d3
00014F7C 7000                       		moveq	#0,d0
00014F7E 1028 0016                  		move.b	$16(a0),d0
00014F82 4880                       		ext.w	d0
00014F84 D440                       		add.w	d0,d2
00014F86 1028 0017                  		move.b	$17(a0),d0
00014F8A 4880                       		ext.w	d0
00014F8C 4440                       		neg.w	d0
00014F8E D640                       		add.w	d0,d3
00014F90 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F94 367C 0010                  		movea.w	#$10,a3
00014F98 3C3C 0000                  		move.w	#0,d6
00014F9C 7A0D                       		moveq	#$D,d5
00014F9E 6100 0000                  		bsr.w	FindFloor
00014FA2 301F                       		move.w	(sp)+,d0
00014FA4 6100 0000                  		bsr.w	Sonic_Angle
00014FA8 4A41                       		tst.w	d1
00014FAA 6700                       		beq.s	locret_146BE
00014FAC 6A00                       		bpl.s	loc_146C0
00014FAE 0C41 FFF2                  		cmpi.w	#-$E,d1
00014FB2 6D00                       		blt.s	locret_146E6
00014FB4 D368 000C                  		add.w	d1,$C(a0)
00014FB8                            
00014FB8                            locret_146BE:
00014FB8 4E75                       		rts	
00014FBA                            ; ===========================================================================
00014FBA                            
00014FBA                            loc_146C0:
00014FBA 0C41 000E                  		cmpi.w	#$E,d1
00014FBE 6E00                       		bgt.s	loc_146CC
00014FC0                            
00014FC0                            loc_146C6:
00014FC0 D368 000C                  		add.w	d1,$C(a0)
00014FC4 4E75                       		rts	
00014FC6                            ; ===========================================================================
00014FC6                            
00014FC6                            loc_146CC:
00014FC6 4A28 0038                  		tst.b	$38(a0)
00014FCA 66F4                       		bne.s	loc_146C6
00014FCC 08E8 0001 0022             		bset	#1,$22(a0)
00014FD2 08A8 0005 0022             		bclr	#5,$22(a0)
00014FD8 117C 0001 001D             		move.b	#1,$1D(a0)
00014FDE 4E75                       		rts	
00014FE0                            ; ===========================================================================
00014FE0                            
00014FE0                            locret_146E6:
00014FE0 4E75                       		rts	
00014FE2                            ; End of function Sonic_AnglePos
00014FE2                            
00014FE2                            ; ===========================================================================
00014FE2 2428 0008                  		move.l	8(a0),d2
00014FE6 3028 0010                  		move.w	$10(a0),d0
00014FEA 48C0                       		ext.l	d0
00014FEC E180                       		asl.l	#8,d0
00014FEE 9480                       		sub.l	d0,d2
00014FF0 2142 0008                  		move.l	d2,8(a0)
00014FF4 303C 0038                  		move.w	#$38,d0
00014FF8 48C0                       		ext.l	d0
00014FFA E180                       		asl.l	#8,d0
00014FFC 9680                       		sub.l	d0,d3
00014FFE 2143 000C                  		move.l	d3,$C(a0)
00015002 4E75                       		rts	
00015004                            ; ===========================================================================
00015004                            
00015004                            locret_1470A:
00015004 4E75                       		rts	
00015006                            ; ===========================================================================
00015006 2628 000C                  		move.l	$C(a0),d3
0001500A 3028 0012                  		move.w	$12(a0),d0
0001500E 0440 0038                  		subi.w	#$38,d0
00015012 3140 0012                  		move.w	d0,$12(a0)
00015016 48C0                       		ext.l	d0
00015018 E180                       		asl.l	#8,d0
0001501A 9680                       		sub.l	d0,d3
0001501C 2143 000C                  		move.l	d3,$C(a0)
00015020 4E75                       		rts	
00015022 4E75                       		rts	
00015024                            ; ===========================================================================
00015024 2428 0008                  		move.l	8(a0),d2
00015028 2628 000C                  		move.l	$C(a0),d3
0001502C 3028 0010                  		move.w	$10(a0),d0
00015030 48C0                       		ext.l	d0
00015032 E180                       		asl.l	#8,d0
00015034 9480                       		sub.l	d0,d2
00015036 3028 0012                  		move.w	$12(a0),d0
0001503A 48C0                       		ext.l	d0
0001503C E180                       		asl.l	#8,d0
0001503E 9680                       		sub.l	d0,d3
00015040 2142 0008                  		move.l	d2,8(a0)
00015044 2143 000C                  		move.l	d3,$C(a0)
00015048 4E75                       		rts	
0001504A                            
0001504A                            ; ---------------------------------------------------------------------------
0001504A                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001504A                            ; ---------------------------------------------------------------------------
0001504A                            
0001504A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001504A                            
0001504A                            
0001504A                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
0001504A 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001504E B240                       		cmp.w	d0,d1
00015050 6F00                       		ble.s	loc_1475E
00015052 1438 F768                  		move.b	($FFFFF768).w,d2
00015056 3200                       		move.w	d0,d1
00015058                            
00015058                            loc_1475E:
00015058 0802 0000                  		btst	#0,d2
0001505C 6600                       		bne.s	loc_1476A
0001505E 1142 0026                  		move.b	d2,$26(a0)
00015062 4E75                       		rts	
00015064                            ; ===========================================================================
00015064                            
00015064                            loc_1476A:
00015064 1428 0026                  		move.b	$26(a0),d2
00015068 0602 0020                  		addi.b	#$20,d2
0001506C 0202 00C0                  		andi.b	#$C0,d2
00015070 1142 0026                  		move.b	d2,$26(a0)
00015074 4E75                       		rts	
00015076                            ; End of function Sonic_Angle
00015076                            
00015076                            ; ---------------------------------------------------------------------------
00015076                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00015076                            ; ---------------------------------------------------------------------------
00015076                            
00015076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015076                            
00015076                            
00015076                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00015076 3428 000C                  		move.w	$C(a0),d2
0001507A 3628 0008                  		move.w	8(a0),d3
0001507E 7000                       		moveq	#0,d0
00015080 1028 0017                  		move.b	$17(a0),d0
00015084 4880                       		ext.w	d0
00015086 4440                       		neg.w	d0
00015088 D440                       		add.w	d0,d2
0001508A 1028 0016                  		move.b	$16(a0),d0
0001508E 4880                       		ext.w	d0
00015090 D640                       		add.w	d0,d3
00015092 49F8 F768                  		lea	($FFFFF768).w,a4
00015096 367C 0010                  		movea.w	#$10,a3
0001509A 3C3C 0000                  		move.w	#0,d6
0001509E 7A0D                       		moveq	#$D,d5
000150A0 6100 0000                  		bsr.w	FindWall
000150A4 3F01                       		move.w	d1,-(sp)
000150A6 3428 000C                  		move.w	$C(a0),d2
000150AA 3628 0008                  		move.w	8(a0),d3
000150AE 7000                       		moveq	#0,d0
000150B0 1028 0017                  		move.b	$17(a0),d0
000150B4 4880                       		ext.w	d0
000150B6 D440                       		add.w	d0,d2
000150B8 1028 0016                  		move.b	$16(a0),d0
000150BC 4880                       		ext.w	d0
000150BE D640                       		add.w	d0,d3
000150C0 49F8 F76A                  		lea	($FFFFF76A).w,a4
000150C4 367C 0010                  		movea.w	#$10,a3
000150C8 3C3C 0000                  		move.w	#0,d6
000150CC 7A0D                       		moveq	#$D,d5
000150CE 6100 0000                  		bsr.w	FindWall
000150D2 301F                       		move.w	(sp)+,d0
000150D4 6100 FF74                  		bsr.w	Sonic_Angle
000150D8 4A41                       		tst.w	d1
000150DA 6700                       		beq.s	locret_147F0
000150DC 6A00                       		bpl.s	loc_147F2
000150DE 0C41 FFF2                  		cmpi.w	#-$E,d1
000150E2 6D00 FF20                  		blt.w	locret_1470A
000150E6 D368 0008                  		add.w	d1,8(a0)
000150EA                            
000150EA                            locret_147F0:
000150EA 4E75                       		rts	
000150EC                            ; ===========================================================================
000150EC                            
000150EC                            loc_147F2:
000150EC 0C41 000E                  		cmpi.w	#$E,d1
000150F0 6E00                       		bgt.s	loc_147FE
000150F2                            
000150F2                            loc_147F8:
000150F2 D368 0008                  		add.w	d1,8(a0)
000150F6 4E75                       		rts	
000150F8                            ; ===========================================================================
000150F8                            
000150F8                            loc_147FE:
000150F8 4A28 0038                  		tst.b	$38(a0)
000150FC 66F4                       		bne.s	loc_147F8
000150FE 08E8 0001 0022             		bset	#1,$22(a0)
00015104 08A8 0005 0022             		bclr	#5,$22(a0)
0001510A 117C 0001 001D             		move.b	#1,$1D(a0)
00015110 4E75                       		rts	
00015112                            ; End of function Sonic_WalkVertR
00015112                            
00015112                            ; ---------------------------------------------------------------------------
00015112                            ; Subroutine allowing Sonic to walk upside-down
00015112                            ; ---------------------------------------------------------------------------
00015112                            
00015112                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015112                            
00015112                            
00015112                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00015112 3428 000C                  		move.w	$C(a0),d2
00015116 3628 0008                  		move.w	8(a0),d3
0001511A 7000                       		moveq	#0,d0
0001511C 1028 0016                  		move.b	$16(a0),d0
00015120 4880                       		ext.w	d0
00015122 9440                       		sub.w	d0,d2
00015124 0A42 000F                  		eori.w	#$F,d2
00015128 1028 0017                  		move.b	$17(a0),d0
0001512C 4880                       		ext.w	d0
0001512E D640                       		add.w	d0,d3
00015130 49F8 F768                  		lea	($FFFFF768).w,a4
00015134 367C FFF0                  		movea.w	#-$10,a3
00015138 3C3C 1000                  		move.w	#$1000,d6
0001513C 7A0D                       		moveq	#$D,d5
0001513E 6100 0000                  		bsr.w	FindFloor
00015142 3F01                       		move.w	d1,-(sp)
00015144 3428 000C                  		move.w	$C(a0),d2
00015148 3628 0008                  		move.w	8(a0),d3
0001514C 7000                       		moveq	#0,d0
0001514E 1028 0016                  		move.b	$16(a0),d0
00015152 4880                       		ext.w	d0
00015154 9440                       		sub.w	d0,d2
00015156 0A42 000F                  		eori.w	#$F,d2
0001515A 1028 0017                  		move.b	$17(a0),d0
0001515E 4880                       		ext.w	d0
00015160 9640                       		sub.w	d0,d3
00015162 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015166 367C FFF0                  		movea.w	#-$10,a3
0001516A 3C3C 1000                  		move.w	#$1000,d6
0001516E 7A0D                       		moveq	#$D,d5
00015170 6100 0000                  		bsr.w	FindFloor
00015174 301F                       		move.w	(sp)+,d0
00015176 6100 FED2                  		bsr.w	Sonic_Angle
0001517A 4A41                       		tst.w	d1
0001517C 6700                       		beq.s	locret_14892
0001517E 6A00                       		bpl.s	loc_14894
00015180 0C41 FFF2                  		cmpi.w	#-$E,d1
00015184 6D00 FE5A                  		blt.w	locret_146E6
00015188 9368 000C                  		sub.w	d1,$C(a0)
0001518C                            
0001518C                            locret_14892:
0001518C 4E75                       		rts	
0001518E                            ; ===========================================================================
0001518E                            
0001518E                            loc_14894:
0001518E 0C41 000E                  		cmpi.w	#$E,d1
00015192 6E00                       		bgt.s	loc_148A0
00015194                            
00015194                            loc_1489A:
00015194 9368 000C                  		sub.w	d1,$C(a0)
00015198 4E75                       		rts	
0001519A                            ; ===========================================================================
0001519A                            
0001519A                            loc_148A0:
0001519A 4A28 0038                  		tst.b	$38(a0)
0001519E 66F4                       		bne.s	loc_1489A
000151A0 08E8 0001 0022             		bset	#1,$22(a0)
000151A6 08A8 0005 0022             		bclr	#5,$22(a0)
000151AC 117C 0001 001D             		move.b	#1,$1D(a0)
000151B2 4E75                       		rts	
000151B4                            ; End of function Sonic_WalkCeiling
000151B4                            
000151B4                            ; ---------------------------------------------------------------------------
000151B4                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000151B4                            ; ---------------------------------------------------------------------------
000151B4                            
000151B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151B4                            
000151B4                            
000151B4                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000151B4 3428 000C                  		move.w	$C(a0),d2
000151B8 3628 0008                  		move.w	8(a0),d3
000151BC 7000                       		moveq	#0,d0
000151BE 1028 0017                  		move.b	$17(a0),d0
000151C2 4880                       		ext.w	d0
000151C4 9440                       		sub.w	d0,d2
000151C6 1028 0016                  		move.b	$16(a0),d0
000151CA 4880                       		ext.w	d0
000151CC 9640                       		sub.w	d0,d3
000151CE 0A43 000F                  		eori.w	#$F,d3
000151D2 49F8 F768                  		lea	($FFFFF768).w,a4
000151D6 367C FFF0                  		movea.w	#-$10,a3
000151DA 3C3C 0800                  		move.w	#$800,d6
000151DE 7A0D                       		moveq	#$D,d5
000151E0 6100 0000                  		bsr.w	FindWall
000151E4 3F01                       		move.w	d1,-(sp)
000151E6 3428 000C                  		move.w	$C(a0),d2
000151EA 3628 0008                  		move.w	8(a0),d3
000151EE 7000                       		moveq	#0,d0
000151F0 1028 0017                  		move.b	$17(a0),d0
000151F4 4880                       		ext.w	d0
000151F6 D440                       		add.w	d0,d2
000151F8 1028 0016                  		move.b	$16(a0),d0
000151FC 4880                       		ext.w	d0
000151FE 9640                       		sub.w	d0,d3
00015200 0A43 000F                  		eori.w	#$F,d3
00015204 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015208 367C FFF0                  		movea.w	#-$10,a3
0001520C 3C3C 0800                  		move.w	#$800,d6
00015210 7A0D                       		moveq	#$D,d5
00015212 6100 0000                  		bsr.w	FindWall
00015216 301F                       		move.w	(sp)+,d0
00015218 6100 FE30                  		bsr.w	Sonic_Angle
0001521C 4A41                       		tst.w	d1
0001521E 6700                       		beq.s	locret_14934
00015220 6A00                       		bpl.s	loc_14936
00015222 0C41 FFF2                  		cmpi.w	#-$E,d1
00015226 6D00 FDDC                  		blt.w	locret_1470A
0001522A 9368 0008                  		sub.w	d1,8(a0)
0001522E                            
0001522E                            locret_14934:
0001522E 4E75                       		rts	
00015230                            ; ===========================================================================
00015230                            
00015230                            loc_14936:
00015230 0C41 000E                  		cmpi.w	#$E,d1
00015234 6E00                       		bgt.s	loc_14942
00015236                            
00015236                            loc_1493C:
00015236 9368 0008                  		sub.w	d1,8(a0)
0001523A 4E75                       		rts	
0001523C                            ; ===========================================================================
0001523C                            
0001523C                            loc_14942:
0001523C 4A28 0038                  		tst.b	$38(a0)
00015240 66F4                       		bne.s	loc_1493C
00015242 08E8 0001 0022             		bset	#1,$22(a0)
00015248 08A8 0005 0022             		bclr	#5,$22(a0)
0001524E 117C 0001 001D             		move.b	#1,$1D(a0)
00015254 4E75                       		rts	
00015256                            ; End of function Sonic_WalkVertL
00015256                            
00015256                            ; ---------------------------------------------------------------------------
00015256                            ; Subroutine to	find which tile	the object is standing on
00015256                            ; ---------------------------------------------------------------------------
00015256                            
00015256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015256                            
00015256                            
00015256                            Floor_ChkTile:				; XREF: FindFloor; et al
00015256 3002                       		move.w	d2,d0
00015258 E248                       		lsr.w	#1,d0
0001525A 0240 0380                  		andi.w	#$380,d0
0001525E 3203                       		move.w	d3,d1
00015260 E049                       		lsr.w	#8,d1
00015262 0241 007F                  		andi.w	#$7F,d1
00015266 D041                       		add.w	d1,d0
00015268 72FF                       		moveq	#-1,d1
0001526A 43F8 A400                  		lea	($FFFFA400).w,a1
0001526E 1231 0000                  		move.b	(a1,d0.w),d1
00015272 6700                       		beq.s	loc_14996
00015274 6B00                       		bmi.s	loc_1499A
00015276 5301                       		subq.b	#1,d1
00015278 4881                       		ext.w	d1
0001527A EE59                       		ror.w	#7,d1
0001527C 3002                       		move.w	d2,d0
0001527E D040                       		add.w	d0,d0
00015280 0240 01E0                  		andi.w	#$1E0,d0
00015284 D240                       		add.w	d0,d1
00015286 3003                       		move.w	d3,d0
00015288 E648                       		lsr.w	#3,d0
0001528A 0240 001E                  		andi.w	#$1E,d0
0001528E D240                       		add.w	d0,d1
00015290                            
00015290                            loc_14996:
00015290 2241                       		movea.l	d1,a1
00015292 4E75                       		rts	
00015294                            ; ===========================================================================
00015294                            
00015294                            loc_1499A:
00015294 0241 007F                  		andi.w	#$7F,d1
00015298 0828 0006 0001             		btst	#6,1(a0)
0001529E 6700                       		beq.s	loc_149B2
000152A0 5241                       		addq.w	#1,d1
000152A2 0C41 0029                  		cmpi.w	#$29,d1
000152A6 6600                       		bne.s	loc_149B2
000152A8 323C 0051                  		move.w	#$51,d1
000152AC                            
000152AC                            loc_149B2:
000152AC 5301                       		subq.b	#1,d1
000152AE EE59                       		ror.w	#7,d1
000152B0 3002                       		move.w	d2,d0
000152B2 D040                       		add.w	d0,d0
000152B4 0240 01E0                  		andi.w	#$1E0,d0
000152B8 D240                       		add.w	d0,d1
000152BA 3003                       		move.w	d3,d0
000152BC E648                       		lsr.w	#3,d0
000152BE 0240 001E                  		andi.w	#$1E,d0
000152C2 D240                       		add.w	d0,d1
000152C4 2241                       		movea.l	d1,a1
000152C6 4E75                       		rts	
000152C8                            ; End of function Floor_ChkTile
000152C8                            
000152C8                            
000152C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152C8                            
000152C8                            
000152C8                            FindFloor:				; XREF: Sonic_AnglePos; et al
000152C8 618C                       		bsr.s	Floor_ChkTile
000152CA 3011                       		move.w	(a1),d0
000152CC 3800                       		move.w	d0,d4
000152CE 0240 07FF                  		andi.w	#$7FF,d0
000152D2 6700                       		beq.s	loc_149DE
000152D4 0B04                       		btst	d5,d4
000152D6 6600                       		bne.s	loc_149EC
000152D8                            
000152D8                            loc_149DE:
000152D8 D44B                       		add.w	a3,d2
000152DA 6100 0000                  		bsr.w	FindFloor2
000152DE 944B                       		sub.w	a3,d2
000152E0 0641 0010                  		addi.w	#$10,d1
000152E4 4E75                       		rts	
000152E6                            ; ===========================================================================
000152E6                            
000152E6                            loc_149EC:
000152E6 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000152EA 1032 0000                  		move.b	(a2,d0.w),d0
000152EE 0240 00FF                  		andi.w	#$FF,d0
000152F2 67E4                       		beq.s	loc_149DE
000152F4 45F9 0000 0000             		lea	(AngleMap).l,a2
000152FA 18B2 0000                  		move.b	(a2,d0.w),(a4)
000152FE E948                       		lsl.w	#4,d0
00015300 3203                       		move.w	d3,d1
00015302 0804 000B                  		btst	#$B,d4
00015306 6700                       		beq.s	loc_14A12
00015308 4641                       		not.w	d1
0001530A 4414                       		neg.b	(a4)
0001530C                            
0001530C                            loc_14A12:
0001530C 0804 000C                  		btst	#$C,d4
00015310 6700                       		beq.s	loc_14A22
00015312 0614 0040                  		addi.b	#$40,(a4)
00015316 4414                       		neg.b	(a4)
00015318 0414 0040                  		subi.b	#$40,(a4)
0001531C                            
0001531C                            loc_14A22:
0001531C 0241 000F                  		andi.w	#$F,d1
00015320 D240                       		add.w	d0,d1
00015322 45F9 0000 0000             		lea	(CollArray1).l,a2
00015328 1032 1000                  		move.b	(a2,d1.w),d0
0001532C 4880                       		ext.w	d0
0001532E BD44                       		eor.w	d6,d4
00015330 0804 000C                  		btst	#$C,d4
00015334 6700                       		beq.s	loc_14A3E
00015336 4440                       		neg.w	d0
00015338                            
00015338                            loc_14A3E:
00015338 4A40                       		tst.w	d0
0001533A 679C                       		beq.s	loc_149DE
0001533C 6B00                       		bmi.s	loc_14A5A
0001533E 0C00 0010                  		cmpi.b	#$10,d0
00015342 6700                       		beq.s	loc_14A66
00015344 3202                       		move.w	d2,d1
00015346 0241 000F                  		andi.w	#$F,d1
0001534A D041                       		add.w	d1,d0
0001534C 323C 000F                  		move.w	#$F,d1
00015350 9240                       		sub.w	d0,d1
00015352 4E75                       		rts	
00015354                            ; ===========================================================================
00015354                            
00015354                            loc_14A5A:
00015354 3202                       		move.w	d2,d1
00015356 0241 000F                  		andi.w	#$F,d1
0001535A D041                       		add.w	d1,d0
0001535C 6A00 FF7A                  		bpl.w	loc_149DE
00015360                            
00015360                            loc_14A66:
00015360 944B                       		sub.w	a3,d2
00015362 6100 0000                  		bsr.w	FindFloor2
00015366 D44B                       		add.w	a3,d2
00015368 0441 0010                  		subi.w	#$10,d1
0001536C 4E75                       		rts	
0001536E                            ; End of function FindFloor
0001536E                            
0001536E                            
0001536E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001536E                            
0001536E                            
0001536E                            FindFloor2:				; XREF: FindFloor
0001536E 6100 FEE6                  		bsr.w	Floor_ChkTile
00015372 3011                       		move.w	(a1),d0
00015374 3800                       		move.w	d0,d4
00015376 0240 07FF                  		andi.w	#$7FF,d0
0001537A 6700                       		beq.s	loc_14A86
0001537C 0B04                       		btst	d5,d4
0001537E 6600                       		bne.s	loc_14A94
00015380                            
00015380                            loc_14A86:
00015380 323C 000F                  		move.w	#$F,d1
00015384 3002                       		move.w	d2,d0
00015386 0240 000F                  		andi.w	#$F,d0
0001538A 9240                       		sub.w	d0,d1
0001538C 4E75                       		rts	
0001538E                            ; ===========================================================================
0001538E                            
0001538E                            loc_14A94:
0001538E 2478 F796                  		movea.l	($FFFFF796).w,a2
00015392 1032 0000                  		move.b	(a2,d0.w),d0
00015396 0240 00FF                  		andi.w	#$FF,d0
0001539A 67E4                       		beq.s	loc_14A86
0001539C 45F9 0000 0000             		lea	(AngleMap).l,a2
000153A2 18B2 0000                  		move.b	(a2,d0.w),(a4)
000153A6 E948                       		lsl.w	#4,d0
000153A8 3203                       		move.w	d3,d1
000153AA 0804 000B                  		btst	#$B,d4
000153AE 6700                       		beq.s	loc_14ABA
000153B0 4641                       		not.w	d1
000153B2 4414                       		neg.b	(a4)
000153B4                            
000153B4                            loc_14ABA:
000153B4 0804 000C                  		btst	#$C,d4
000153B8 6700                       		beq.s	loc_14ACA
000153BA 0614 0040                  		addi.b	#$40,(a4)
000153BE 4414                       		neg.b	(a4)
000153C0 0414 0040                  		subi.b	#$40,(a4)
000153C4                            
000153C4                            loc_14ACA:
000153C4 0241 000F                  		andi.w	#$F,d1
000153C8 D240                       		add.w	d0,d1
000153CA 45F9 0000 0000             		lea	(CollArray1).l,a2
000153D0 1032 1000                  		move.b	(a2,d1.w),d0
000153D4 4880                       		ext.w	d0
000153D6 BD44                       		eor.w	d6,d4
000153D8 0804 000C                  		btst	#$C,d4
000153DC 6700                       		beq.s	loc_14AE6
000153DE 4440                       		neg.w	d0
000153E0                            
000153E0                            loc_14AE6:
000153E0 4A40                       		tst.w	d0
000153E2 679C                       		beq.s	loc_14A86
000153E4 6B00                       		bmi.s	loc_14AFC
000153E6 3202                       		move.w	d2,d1
000153E8 0241 000F                  		andi.w	#$F,d1
000153EC D041                       		add.w	d1,d0
000153EE 323C 000F                  		move.w	#$F,d1
000153F2 9240                       		sub.w	d0,d1
000153F4 4E75                       		rts	
000153F6                            ; ===========================================================================
000153F6                            
000153F6                            loc_14AFC:
000153F6 3202                       		move.w	d2,d1
000153F8 0241 000F                  		andi.w	#$F,d1
000153FC D041                       		add.w	d1,d0
000153FE 6A00 FF80                  		bpl.w	loc_14A86
00015402 4641                       		not.w	d1
00015404 4E75                       		rts	
00015406                            ; End of function FindFloor2
00015406                            
00015406                            
00015406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015406                            
00015406                            
00015406                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015406 6100 FE4E                  		bsr.w	Floor_ChkTile
0001540A 3011                       		move.w	(a1),d0
0001540C 3800                       		move.w	d0,d4
0001540E 0240 07FF                  		andi.w	#$7FF,d0
00015412 6700                       		beq.s	loc_14B1E
00015414 0B04                       		btst	d5,d4
00015416 6600                       		bne.s	loc_14B2C
00015418                            
00015418                            loc_14B1E:
00015418 D64B                       		add.w	a3,d3
0001541A 6100 0000                  		bsr.w	FindWall2
0001541E 964B                       		sub.w	a3,d3
00015420 0641 0010                  		addi.w	#$10,d1
00015424 4E75                       		rts	
00015426                            ; ===========================================================================
00015426                            
00015426                            loc_14B2C:
00015426 2478 F796                  		movea.l	($FFFFF796).w,a2
0001542A 1032 0000                  		move.b	(a2,d0.w),d0
0001542E 0240 00FF                  		andi.w	#$FF,d0
00015432 67E4                       		beq.s	loc_14B1E
00015434 45F9 0000 0000             		lea	(AngleMap).l,a2
0001543A 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001543E E948                       		lsl.w	#4,d0
00015440 3202                       		move.w	d2,d1
00015442 0804 000C                  		btst	#$C,d4
00015446 6700                       		beq.s	loc_14B5A
00015448 4641                       		not.w	d1
0001544A 0614 0040                  		addi.b	#$40,(a4)
0001544E 4414                       		neg.b	(a4)
00015450 0414 0040                  		subi.b	#$40,(a4)
00015454                            
00015454                            loc_14B5A:
00015454 0804 000B                  		btst	#$B,d4
00015458 6700                       		beq.s	loc_14B62
0001545A 4414                       		neg.b	(a4)
0001545C                            
0001545C                            loc_14B62:
0001545C 0241 000F                  		andi.w	#$F,d1
00015460 D240                       		add.w	d0,d1
00015462 45F9 0000 0000             		lea	(CollArray2).l,a2
00015468 1032 1000                  		move.b	(a2,d1.w),d0
0001546C 4880                       		ext.w	d0
0001546E BD44                       		eor.w	d6,d4
00015470 0804 000B                  		btst	#$B,d4
00015474 6700                       		beq.s	loc_14B7E
00015476 4440                       		neg.w	d0
00015478                            
00015478                            loc_14B7E:
00015478 4A40                       		tst.w	d0
0001547A 679C                       		beq.s	loc_14B1E
0001547C 6B00                       		bmi.s	loc_14B9A
0001547E 0C00 0010                  		cmpi.b	#$10,d0
00015482 6700                       		beq.s	loc_14BA6
00015484 3203                       		move.w	d3,d1
00015486 0241 000F                  		andi.w	#$F,d1
0001548A D041                       		add.w	d1,d0
0001548C 323C 000F                  		move.w	#$F,d1
00015490 9240                       		sub.w	d0,d1
00015492 4E75                       		rts	
00015494                            ; ===========================================================================
00015494                            
00015494                            loc_14B9A:
00015494 3203                       		move.w	d3,d1
00015496 0241 000F                  		andi.w	#$F,d1
0001549A D041                       		add.w	d1,d0
0001549C 6A00 FF7A                  		bpl.w	loc_14B1E
000154A0                            
000154A0                            loc_14BA6:
000154A0 964B                       		sub.w	a3,d3
000154A2 6100 0000                  		bsr.w	FindWall2
000154A6 D64B                       		add.w	a3,d3
000154A8 0441 0010                  		subi.w	#$10,d1
000154AC 4E75                       		rts	
000154AE                            ; End of function FindWall
000154AE                            
000154AE                            
000154AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154AE                            
000154AE                            
000154AE                            FindWall2:				; XREF: FindWall
000154AE 6100 FDA6                  		bsr.w	Floor_ChkTile
000154B2 3011                       		move.w	(a1),d0
000154B4 3800                       		move.w	d0,d4
000154B6 0240 07FF                  		andi.w	#$7FF,d0
000154BA 6700                       		beq.s	loc_14BC6
000154BC 0B04                       		btst	d5,d4
000154BE 6600                       		bne.s	loc_14BD4
000154C0                            
000154C0                            loc_14BC6:
000154C0 323C 000F                  		move.w	#$F,d1
000154C4 3003                       		move.w	d3,d0
000154C6 0240 000F                  		andi.w	#$F,d0
000154CA 9240                       		sub.w	d0,d1
000154CC 4E75                       		rts	
000154CE                            ; ===========================================================================
000154CE                            
000154CE                            loc_14BD4:
000154CE 2478 F796                  		movea.l	($FFFFF796).w,a2
000154D2 1032 0000                  		move.b	(a2,d0.w),d0
000154D6 0240 00FF                  		andi.w	#$FF,d0
000154DA 67E4                       		beq.s	loc_14BC6
000154DC 45F9 0000 0000             		lea	(AngleMap).l,a2
000154E2 18B2 0000                  		move.b	(a2,d0.w),(a4)
000154E6 E948                       		lsl.w	#4,d0
000154E8 3202                       		move.w	d2,d1
000154EA 0804 000C                  		btst	#$C,d4
000154EE 6700                       		beq.s	loc_14C02
000154F0 4641                       		not.w	d1
000154F2 0614 0040                  		addi.b	#$40,(a4)
000154F6 4414                       		neg.b	(a4)
000154F8 0414 0040                  		subi.b	#$40,(a4)
000154FC                            
000154FC                            loc_14C02:
000154FC 0804 000B                  		btst	#$B,d4
00015500 6700                       		beq.s	loc_14C0A
00015502 4414                       		neg.b	(a4)
00015504                            
00015504                            loc_14C0A:
00015504 0241 000F                  		andi.w	#$F,d1
00015508 D240                       		add.w	d0,d1
0001550A 45F9 0000 0000             		lea	(CollArray2).l,a2
00015510 1032 1000                  		move.b	(a2,d1.w),d0
00015514 4880                       		ext.w	d0
00015516 BD44                       		eor.w	d6,d4
00015518 0804 000B                  		btst	#$B,d4
0001551C 6700                       		beq.s	loc_14C26
0001551E 4440                       		neg.w	d0
00015520                            
00015520                            loc_14C26:
00015520 4A40                       		tst.w	d0
00015522 679C                       		beq.s	loc_14BC6
00015524 6B00                       		bmi.s	loc_14C3C
00015526 3203                       		move.w	d3,d1
00015528 0241 000F                  		andi.w	#$F,d1
0001552C D041                       		add.w	d1,d0
0001552E 323C 000F                  		move.w	#$F,d1
00015532 9240                       		sub.w	d0,d1
00015534 4E75                       		rts	
00015536                            ; ===========================================================================
00015536                            
00015536                            loc_14C3C:
00015536 3203                       		move.w	d3,d1
00015538 0241 000F                  		andi.w	#$F,d1
0001553C D041                       		add.w	d1,d0
0001553E 6A00 FF80                  		bpl.w	loc_14BC6
00015542 4641                       		not.w	d1
00015544 4E75                       		rts	
00015546                            ; End of function FindWall2
00015546                            
00015546                            ; ---------------------------------------------------------------------------
00015546                            ; Unused floor/wall subroutine - logs something	to do with collision
00015546                            ; ---------------------------------------------------------------------------
00015546                            
00015546                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015546                            
00015546                            
00015546                            FloorLog_Unk:				; XREF: Level
00015546 4E75                       		rts	
00015548                            
00015548 43F9 0000 0000             		lea	(CollArray1).l,a1
0001554E 45F9 0000 0000             		lea	(CollArray1).l,a2
00015554 363C 00FF                  		move.w	#$FF,d3
00015558                            
00015558                            loc_14C5E:
00015558 7A10                       		moveq	#$10,d5
0001555A 343C 000F                  		move.w	#$F,d2
0001555E                            
0001555E                            loc_14C64:
0001555E 7800                       		moveq	#0,d4
00015560 323C 000F                  		move.w	#$F,d1
00015564                            
00015564                            loc_14C6A:
00015564 3019                       		move.w	(a1)+,d0
00015566 EAA8                       		lsr.l	d5,d0
00015568 D944                       		addx.w	d4,d4
0001556A 51C9 FFF8                  		dbf	d1,loc_14C6A
0001556E                            
0001556E 34C4                       		move.w	d4,(a2)+
00015570 92FC 0020                  		suba.w	#$20,a1
00015574 5345                       		subq.w	#1,d5
00015576 51CA FFE6                  		dbf	d2,loc_14C64
0001557A                            
0001557A D2FC 0020                  		adda.w	#$20,a1
0001557E 51CB FFD8                  		dbf	d3,loc_14C5E
00015582                            
00015582 43F9 0000 0000             		lea	(CollArray1).l,a1
00015588 45F9 0000 0000             		lea	(CollArray2).l,a2
0001558E 6100                       		bsr.s	FloorLog_Unk2
00015590 43F9 0000 0000             		lea	(CollArray1).l,a1
00015596 45F9 0000 0000             		lea	(CollArray1).l,a2
0001559C                            
0001559C                            ; End of function FloorLog_Unk
0001559C                            
0001559C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001559C                            
0001559C                            
0001559C                            FloorLog_Unk2:				; XREF: FloorLog_Unk
0001559C 363C 0FFF                  		move.w	#$FFF,d3
000155A0                            
000155A0                            loc_14CA6:
000155A0 7400                       		moveq	#0,d2
000155A2 323C 000F                  		move.w	#$F,d1
000155A6 3019                       		move.w	(a1)+,d0
000155A8 6700                       		beq.s	loc_14CD4
000155AA 6B00                       		bmi.s	loc_14CBE
000155AC                            
000155AC                            loc_14CB2:
000155AC E248                       		lsr.w	#1,d0
000155AE 6400                       		bcc.s	loc_14CB8
000155B0 5202                       		addq.b	#1,d2
000155B2                            
000155B2                            loc_14CB8:
000155B2 51C9 FFF8                  		dbf	d1,loc_14CB2
000155B6                            
000155B6 6000                       		bra.s	loc_14CD6
000155B8                            ; ===========================================================================
000155B8                            
000155B8                            loc_14CBE:
000155B8 0C40 FFFF                  		cmpi.w	#-1,d0
000155BC 6700                       		beq.s	loc_14CD0
000155BE                            
000155BE                            loc_14CC4:
000155BE E348                       		lsl.w	#1,d0
000155C0 6400                       		bcc.s	loc_14CCA
000155C2 5302                       		subq.b	#1,d2
000155C4                            
000155C4                            loc_14CCA:
000155C4 51C9 FFF8                  		dbf	d1,loc_14CC4
000155C8                            
000155C8 6000                       		bra.s	loc_14CD6
000155CA                            ; ===========================================================================
000155CA                            
000155CA                            loc_14CD0:
000155CA 303C 0010                  		move.w	#$10,d0
000155CE                            
000155CE                            loc_14CD4:
000155CE 3400                       		move.w	d0,d2
000155D0                            
000155D0                            loc_14CD6:
000155D0 14C2                       		move.b	d2,(a2)+
000155D2 51CB FFCC                  		dbf	d3,loc_14CA6
000155D6                            
000155D6 4E75                       		rts	
000155D8                            
000155D8                            ; End of function FloorLog_Unk2
000155D8                            
000155D8                            
000155D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155D8                            
000155D8                            
000155D8                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000155D8 2628 0008                  		move.l	8(a0),d3
000155DC 2428 000C                  		move.l	$C(a0),d2
000155E0 3228 0010                  		move.w	$10(a0),d1
000155E4 48C1                       		ext.l	d1
000155E6 E181                       		asl.l	#8,d1
000155E8 D681                       		add.l	d1,d3
000155EA 3228 0012                  		move.w	$12(a0),d1
000155EE 48C1                       		ext.l	d1
000155F0 E181                       		asl.l	#8,d1
000155F2 D481                       		add.l	d1,d2
000155F4 4842                       		swap	d2
000155F6 4843                       		swap	d3
000155F8 11C0 F768                  		move.b	d0,($FFFFF768).w
000155FC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015600 1200                       		move.b	d0,d1
00015602 0600 0020                  		addi.b	#$20,d0
00015606 6A00                       		bpl.s	loc_14D1A
00015608 1001                       		move.b	d1,d0
0001560A 6A00                       		bpl.s	loc_14D14
0001560C 5300                       		subq.b	#1,d0
0001560E                            
0001560E                            loc_14D14:
0001560E 0600 0020                  		addi.b	#$20,d0
00015612 6000                       		bra.s	loc_14D24
00015614                            ; ===========================================================================
00015614                            
00015614                            loc_14D1A:
00015614 1001                       		move.b	d1,d0
00015616 6A00                       		bpl.s	loc_14D20
00015618 5200                       		addq.b	#1,d0
0001561A                            
0001561A                            loc_14D20:
0001561A 0600 001F                  		addi.b	#$1F,d0
0001561E                            
0001561E                            loc_14D24:
0001561E 0200 00C0                  		andi.b	#$C0,d0
00015622 6700 0000                  		beq.w	loc_14DF0
00015626 0C00 0080                  		cmpi.b	#$80,d0
0001562A 6700 0000                  		beq.w	loc_14F7C
0001562E 0201 0038                  		andi.b	#$38,d1
00015632 6600                       		bne.s	loc_14D3C
00015634 5042                       		addq.w	#8,d2
00015636                            
00015636                            loc_14D3C:
00015636 0C00 0040                  		cmpi.b	#$40,d0
0001563A 6700 0000                  		beq.w	loc_1504A
0001563E 6000 0000                  		bra.w	loc_14EBC
00015642                            
00015642                            ; End of function Sonic_WalkSpeed
00015642                            
00015642                            
00015642                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015642                            
00015642                            
00015642                            sub_14D48:				; XREF: Sonic_Jump
00015642 11C0 F768                  		move.b	d0,($FFFFF768).w
00015646 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001564A 0600 0020                  		addi.b	#$20,d0
0001564E 0200 00C0                  		andi.b	#$C0,d0
00015652 0C00 0040                  		cmpi.b	#$40,d0
00015656 6700 0000                  		beq.w	loc_14FD6
0001565A 0C00 0080                  		cmpi.b	#$80,d0
0001565E 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015662 0C00 00C0                  		cmpi.b	#$C0,d0
00015666 6700 0000                  		beq.w	sub_14E50
0001566A                            
0001566A                            ; End of function sub_14D48
0001566A                            
0001566A                            ; ---------------------------------------------------------------------------
0001566A                            ; Subroutine to	make Sonic land	on the floor after jumping
0001566A                            ; ---------------------------------------------------------------------------
0001566A                            
0001566A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001566A                            
0001566A                            
0001566A                            Sonic_HitFloor:				; XREF: Sonic_Floor
0001566A 3428 000C                  		move.w	$C(a0),d2
0001566E 3628 0008                  		move.w	8(a0),d3
00015672 7000                       		moveq	#0,d0
00015674 1028 0016                  		move.b	$16(a0),d0
00015678 4880                       		ext.w	d0
0001567A D440                       		add.w	d0,d2
0001567C 1028 0017                  		move.b	$17(a0),d0
00015680 4880                       		ext.w	d0
00015682 D640                       		add.w	d0,d3
00015684 49F8 F768                  		lea	($FFFFF768).w,a4
00015688 367C 0010                  		movea.w	#$10,a3
0001568C 3C3C 0000                  		move.w	#0,d6
00015690 7A0D                       		moveq	#$D,d5
00015692 6100 FC34                  		bsr.w	FindFloor
00015696 3F01                       		move.w	d1,-(sp)
00015698 3428 000C                  		move.w	$C(a0),d2
0001569C 3628 0008                  		move.w	8(a0),d3
000156A0 7000                       		moveq	#0,d0
000156A2 1028 0016                  		move.b	$16(a0),d0
000156A6 4880                       		ext.w	d0
000156A8 D440                       		add.w	d0,d2
000156AA 1028 0017                  		move.b	$17(a0),d0
000156AE 4880                       		ext.w	d0
000156B0 9640                       		sub.w	d0,d3
000156B2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000156B6 367C 0010                  		movea.w	#$10,a3
000156BA 3C3C 0000                  		move.w	#0,d6
000156BE 7A0D                       		moveq	#$D,d5
000156C0 6100 FC06                  		bsr.w	FindFloor
000156C4 301F                       		move.w	(sp)+,d0
000156C6 143C 0000                  		move.b	#0,d2
000156CA                            
000156CA                            loc_14DD0:
000156CA 1638 F76A                  		move.b	($FFFFF76A).w,d3
000156CE B240                       		cmp.w	d0,d1
000156D0 6F00                       		ble.s	loc_14DDE
000156D2 1638 F768                  		move.b	($FFFFF768).w,d3
000156D6 C141                       		exg	d0,d1
000156D8                            
000156D8                            loc_14DDE:
000156D8 0803 0000                  		btst	#0,d3
000156DC 6700                       		beq.s	locret_14DE6
000156DE 1602                       		move.b	d2,d3
000156E0                            
000156E0                            locret_14DE6:
000156E0 4E75                       		rts	
000156E2                            
000156E2                            ; End of function Sonic_HitFloor
000156E2                            
000156E2                            ; ===========================================================================
000156E2 3428 000C                  		move.w	$C(a0),d2
000156E6 3628 0008                  		move.w	8(a0),d3
000156EA                            
000156EA                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000156EA 0642 000A                  		addi.w	#$A,d2
000156EE 49F8 F768                  		lea	($FFFFF768).w,a4
000156F2 367C 0010                  		movea.w	#$10,a3
000156F6 3C3C 0000                  		move.w	#0,d6
000156FA 7A0E                       		moveq	#$E,d5
000156FC 6100 FBCA                  		bsr.w	FindFloor
00015700 143C 0000                  		move.b	#0,d2
00015704                            
00015704                            loc_14E0A:				; XREF: sub_14EB4
00015704 1638 F768                  		move.b	($FFFFF768).w,d3
00015708 0803 0000                  		btst	#0,d3
0001570C 6700                       		beq.s	locret_14E16
0001570E 1602                       		move.b	d2,d3
00015710                            
00015710                            locret_14E16:
00015710 4E75                       		rts	
00015712                            
00015712                            ; ---------------------------------------------------------------------------
00015712                            ; Subroutine allowing objects to interact with the floor
00015712                            ; ---------------------------------------------------------------------------
00015712                            
00015712                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015712                            
00015712                            
00015712                            ObjHitFloor:
00015712 3628 0008                  		move.w	8(a0),d3
00015716                            
00015716                            ; End of function ObjHitFloor
00015716                            
00015716                            
00015716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015716                            
00015716                            
00015716                            ObjHitFloor2:
00015716 3428 000C                  		move.w	$C(a0),d2
0001571A 7000                       		moveq	#0,d0
0001571C 1028 0016                  		move.b	$16(a0),d0
00015720 4880                       		ext.w	d0
00015722 D440                       		add.w	d0,d2
00015724 49F8 F768                  		lea	($FFFFF768).w,a4
00015728 18BC 0000                  		move.b	#0,(a4)
0001572C 367C 0010                  		movea.w	#$10,a3
00015730 3C3C 0000                  		move.w	#0,d6
00015734 7A0D                       		moveq	#$D,d5
00015736 6100 FB90                  		bsr.w	FindFloor
0001573A 1638 F768                  		move.b	($FFFFF768).w,d3
0001573E 0803 0000                  		btst	#0,d3
00015742 6700                       		beq.s	locret_14E4E
00015744 163C 0000                  		move.b	#0,d3
00015748                            
00015748                            locret_14E4E:
00015748 4E75                       		rts	
0001574A                            ; End of function ObjHitFloor2
0001574A                            
0001574A                            
0001574A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001574A                            
0001574A                            
0001574A                            sub_14E50:				; XREF: sub_14D48
0001574A 3428 000C                  		move.w	$C(a0),d2
0001574E 3628 0008                  		move.w	8(a0),d3
00015752 7000                       		moveq	#0,d0
00015754 1028 0017                  		move.b	$17(a0),d0
00015758 4880                       		ext.w	d0
0001575A 9440                       		sub.w	d0,d2
0001575C 1028 0016                  		move.b	$16(a0),d0
00015760 4880                       		ext.w	d0
00015762 D640                       		add.w	d0,d3
00015764 49F8 F768                  		lea	($FFFFF768).w,a4
00015768 367C 0010                  		movea.w	#$10,a3
0001576C 3C3C 0000                  		move.w	#0,d6
00015770 7A0E                       		moveq	#$E,d5
00015772 6100 FC92                  		bsr.w	FindWall
00015776 3F01                       		move.w	d1,-(sp)
00015778 3428 000C                  		move.w	$C(a0),d2
0001577C 3628 0008                  		move.w	8(a0),d3
00015780 7000                       		moveq	#0,d0
00015782 1028 0017                  		move.b	$17(a0),d0
00015786 4880                       		ext.w	d0
00015788 D440                       		add.w	d0,d2
0001578A 1028 0016                  		move.b	$16(a0),d0
0001578E 4880                       		ext.w	d0
00015790 D640                       		add.w	d0,d3
00015792 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015796 367C 0010                  		movea.w	#$10,a3
0001579A 3C3C 0000                  		move.w	#0,d6
0001579E 7A0E                       		moveq	#$E,d5
000157A0 6100 FC64                  		bsr.w	FindWall
000157A4 301F                       		move.w	(sp)+,d0
000157A6 143C 00C0                  		move.b	#-$40,d2
000157AA 6000 FF1E                  		bra.w	loc_14DD0
000157AE                            
000157AE                            ; End of function sub_14E50
000157AE                            
000157AE                            
000157AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157AE                            
000157AE                            
000157AE                            sub_14EB4:				; XREF: Sonic_Floor
000157AE 3428 000C                  		move.w	$C(a0),d2
000157B2 3628 0008                  		move.w	8(a0),d3
000157B6                            
000157B6                            loc_14EBC:
000157B6 0643 000A                  		addi.w	#$A,d3
000157BA 49F8 F768                  		lea	($FFFFF768).w,a4
000157BE 367C 0010                  		movea.w	#$10,a3
000157C2 3C3C 0000                  		move.w	#0,d6
000157C6 7A0E                       		moveq	#$E,d5
000157C8 6100 FC3C                  		bsr.w	FindWall
000157CC 143C 00C0                  		move.b	#-$40,d2
000157D0 6000 FF32                  		bra.w	loc_14E0A
000157D4                            
000157D4                            ; End of function sub_14EB4
000157D4                            
000157D4                            ; ---------------------------------------------------------------------------
000157D4                            ; Subroutine to	detect when an object hits a wall to its right
000157D4                            ; ---------------------------------------------------------------------------
000157D4                            
000157D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157D4                            
000157D4                            
000157D4                            ObjHitWallRight:
000157D4 D668 0008                  		add.w	8(a0),d3
000157D8 3428 000C                  		move.w	$C(a0),d2
000157DC 49F8 F768                  		lea	($FFFFF768).w,a4
000157E0 18BC 0000                  		move.b	#0,(a4)
000157E4 367C 0010                  		movea.w	#$10,a3
000157E8 3C3C 0000                  		move.w	#0,d6
000157EC 7A0E                       		moveq	#$E,d5
000157EE 6100 FC16                  		bsr.w	FindWall
000157F2 1638 F768                  		move.b	($FFFFF768).w,d3
000157F6 0803 0000                  		btst	#0,d3
000157FA 6700                       		beq.s	locret_14F06
000157FC 163C 00C0                  		move.b	#-$40,d3
00015800                            
00015800                            locret_14F06:
00015800 4E75                       		rts	
00015802                            
00015802                            ; End of function ObjHitWallRight
00015802                            
00015802                            ; ---------------------------------------------------------------------------
00015802                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015802                            ; touches them
00015802                            ; ---------------------------------------------------------------------------
00015802                            
00015802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015802                            
00015802                            
00015802                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015802 3428 000C                  		move.w	$C(a0),d2
00015806 3628 0008                  		move.w	8(a0),d3
0001580A 7000                       		moveq	#0,d0
0001580C 1028 0016                  		move.b	$16(a0),d0
00015810 4880                       		ext.w	d0
00015812 9440                       		sub.w	d0,d2
00015814 0A42 000F                  		eori.w	#$F,d2
00015818 1028 0017                  		move.b	$17(a0),d0
0001581C 4880                       		ext.w	d0
0001581E D640                       		add.w	d0,d3
00015820 49F8 F768                  		lea	($FFFFF768).w,a4
00015824 367C FFF0                  		movea.w	#-$10,a3
00015828 3C3C 1000                  		move.w	#$1000,d6
0001582C 7A0E                       		moveq	#$E,d5
0001582E 6100 FA98                  		bsr.w	FindFloor
00015832 3F01                       		move.w	d1,-(sp)
00015834 3428 000C                  		move.w	$C(a0),d2
00015838 3628 0008                  		move.w	8(a0),d3
0001583C 7000                       		moveq	#0,d0
0001583E 1028 0016                  		move.b	$16(a0),d0
00015842 4880                       		ext.w	d0
00015844 9440                       		sub.w	d0,d2
00015846 0A42 000F                  		eori.w	#$F,d2
0001584A 1028 0017                  		move.b	$17(a0),d0
0001584E 4880                       		ext.w	d0
00015850 9640                       		sub.w	d0,d3
00015852 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015856 367C FFF0                  		movea.w	#-$10,a3
0001585A 3C3C 1000                  		move.w	#$1000,d6
0001585E 7A0E                       		moveq	#$E,d5
00015860 6100 FA66                  		bsr.w	FindFloor
00015864 301F                       		move.w	(sp)+,d0
00015866 143C 0080                  		move.b	#-$80,d2
0001586A 6000 FE5E                  		bra.w	loc_14DD0
0001586E                            ; End of function Sonic_DontRunOnWalls
0001586E                            
0001586E                            ; ===========================================================================
0001586E 3428 000C                  		move.w	$C(a0),d2
00015872 3628 0008                  		move.w	8(a0),d3
00015876                            
00015876                            loc_14F7C:
00015876 0442 000A                  		subi.w	#$A,d2
0001587A 0A42 000F                  		eori.w	#$F,d2
0001587E 49F8 F768                  		lea	($FFFFF768).w,a4
00015882 367C FFF0                  		movea.w	#-$10,a3
00015886 3C3C 1000                  		move.w	#$1000,d6
0001588A 7A0E                       		moveq	#$E,d5
0001588C 6100 FA3A                  		bsr.w	FindFloor
00015890 143C 0080                  		move.b	#-$80,d2
00015894 6000 FE6E                  		bra.w	loc_14E0A
00015898                            
00015898                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015898                            
00015898                            
00015898                            ObjHitCeiling:
00015898 3428 000C                  		move.w	$C(a0),d2
0001589C 3628 0008                  		move.w	8(a0),d3
000158A0 7000                       		moveq	#0,d0
000158A2 1028 0016                  		move.b	$16(a0),d0
000158A6 4880                       		ext.w	d0
000158A8 9440                       		sub.w	d0,d2
000158AA 0A42 000F                  		eori.w	#$F,d2
000158AE 49F8 F768                  		lea	($FFFFF768).w,a4
000158B2 367C FFF0                  		movea.w	#-$10,a3
000158B6 3C3C 1000                  		move.w	#$1000,d6
000158BA 7A0E                       		moveq	#$E,d5
000158BC 6100 FA0A                  		bsr.w	FindFloor
000158C0 1638 F768                  		move.b	($FFFFF768).w,d3
000158C4 0803 0000                  		btst	#0,d3
000158C8 6700                       		beq.s	locret_14FD4
000158CA 163C 0080                  		move.b	#-$80,d3
000158CE                            
000158CE                            locret_14FD4:
000158CE 4E75                       		rts	
000158D0                            ; End of function ObjHitCeiling
000158D0                            
000158D0                            ; ===========================================================================
000158D0                            
000158D0                            loc_14FD6:				; XREF: sub_14D48
000158D0 3428 000C                  		move.w	$C(a0),d2
000158D4 3628 0008                  		move.w	8(a0),d3
000158D8 7000                       		moveq	#0,d0
000158DA 1028 0017                  		move.b	$17(a0),d0
000158DE 4880                       		ext.w	d0
000158E0 9440                       		sub.w	d0,d2
000158E2 1028 0016                  		move.b	$16(a0),d0
000158E6 4880                       		ext.w	d0
000158E8 9640                       		sub.w	d0,d3
000158EA 0A43 000F                  		eori.w	#$F,d3
000158EE 49F8 F768                  		lea	($FFFFF768).w,a4
000158F2 367C FFF0                  		movea.w	#-$10,a3
000158F6 3C3C 0800                  		move.w	#$800,d6
000158FA 7A0E                       		moveq	#$E,d5
000158FC 6100 FB08                  		bsr.w	FindWall
00015900 3F01                       		move.w	d1,-(sp)
00015902 3428 000C                  		move.w	$C(a0),d2
00015906 3628 0008                  		move.w	8(a0),d3
0001590A 7000                       		moveq	#0,d0
0001590C 1028 0017                  		move.b	$17(a0),d0
00015910 4880                       		ext.w	d0
00015912 D440                       		add.w	d0,d2
00015914 1028 0016                  		move.b	$16(a0),d0
00015918 4880                       		ext.w	d0
0001591A 9640                       		sub.w	d0,d3
0001591C 0A43 000F                  		eori.w	#$F,d3
00015920 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015924 367C FFF0                  		movea.w	#-$10,a3
00015928 3C3C 0800                  		move.w	#$800,d6
0001592C 7A0E                       		moveq	#$E,d5
0001592E 6100 FAD6                  		bsr.w	FindWall
00015932 301F                       		move.w	(sp)+,d0
00015934 143C 0040                  		move.b	#$40,d2
00015938 6000 FD90                  		bra.w	loc_14DD0
0001593C                            
0001593C                            ; ---------------------------------------------------------------------------
0001593C                            ; Subroutine to	stop Sonic when	he jumps at a wall
0001593C                            ; ---------------------------------------------------------------------------
0001593C                            
0001593C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001593C                            
0001593C                            
0001593C                            Sonic_HitWall:				; XREF: Sonic_Floor
0001593C 3428 000C                  		move.w	$C(a0),d2
00015940 3628 0008                  		move.w	8(a0),d3
00015944                            
00015944                            loc_1504A:
00015944 0443 000A                  		subi.w	#$A,d3
00015948 0A43 000F                  		eori.w	#$F,d3
0001594C 49F8 F768                  		lea	($FFFFF768).w,a4
00015950 367C FFF0                  		movea.w	#-$10,a3
00015954 3C3C 0800                  		move.w	#$800,d6
00015958 7A0E                       		moveq	#$E,d5
0001595A 6100 FAAA                  		bsr.w	FindWall
0001595E 143C 0040                  		move.b	#$40,d2
00015962 6000 FDA0                  		bra.w	loc_14E0A
00015966                            ; End of function Sonic_HitWall
00015966                            
00015966                            ; ---------------------------------------------------------------------------
00015966                            ; Subroutine to	detect when an object hits a wall to its left
00015966                            ; ---------------------------------------------------------------------------
00015966                            
00015966                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015966                            
00015966                            
00015966                            ObjHitWallLeft:
00015966 D668 0008                  		add.w	8(a0),d3
0001596A 3428 000C                  		move.w	$C(a0),d2
0001596E 49F8 F768                  		lea	($FFFFF768).w,a4
00015972 18BC 0000                  		move.b	#0,(a4)
00015976 367C FFF0                  		movea.w	#-$10,a3
0001597A 3C3C 0800                  		move.w	#$800,d6
0001597E 7A0E                       		moveq	#$E,d5
00015980 6100 FA84                  		bsr.w	FindWall
00015984 1638 F768                  		move.b	($FFFFF768).w,d3
00015988 0803 0000                  		btst	#0,d3
0001598C 6700                       		beq.s	locret_15098
0001598E 163C 0040                  		move.b	#$40,d3
00015992                            
00015992                            locret_15098:
00015992 4E75                       		rts	
00015994                            ; End of function ObjHitWallLeft
00015994                            
00015994                            ; ===========================================================================
00015994                            ; ---------------------------------------------------------------------------
00015994                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015994                            ; ---------------------------------------------------------------------------
00015994                            
00015994                            Obj66:					; XREF: Obj_Index
00015994 7000                       		moveq	#0,d0
00015996 1028 0024                  		move.b	$24(a0),d0
0001599A 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
0001599E 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000159A2                            ; ===========================================================================
000159A2 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000159A4 0000                       		dc.w Obj66_Action-Obj66_Index
000159A6 0000                       		dc.w Obj66_Display-Obj66_Index
000159A8 0000                       		dc.w Obj66_Release-Obj66_Index
000159AA                            ; ===========================================================================
000159AA                            
000159AA                            Obj66_Main:				; XREF: Obj66_Index
000159AA 5428 0024                  		addq.b	#2,$24(a0)
000159AE 323C 0001                  		move.w	#1,d1
000159B2 2248                       		movea.l	a0,a1
000159B4 6000                       		bra.s	Obj66_MakeItem
000159B6                            ; ===========================================================================
000159B6                            
000159B6                            Obj66_Loop:
000159B6 6100 88D6                  		bsr.w	SingleObjLoad
000159BA 6600                       		bne.s	loc_150FE
000159BC 12BC 0066                  		move.b	#$66,0(a1)
000159C0 5829 0024                  		addq.b	#4,$24(a1)
000159C4 3368 0008 0008             		move.w	8(a0),8(a1)
000159CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000159D0 137C 0003 0018             		move.b	#3,$18(a1)
000159D6 137C 0010 001A             		move.b	#$10,$1A(a1)
000159DC                            
000159DC                            Obj66_MakeItem:				; XREF: Obj66_Main
000159DC 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000159E4 337C 4348 0002             		move.w	#$4348,2(a1)
000159EA 0029 0004 0001             		ori.b	#4,1(a1)
000159F0 137C 0038 0019             		move.b	#$38,$19(a1)
000159F6                            
000159F6                            loc_150FE:
000159F6 51C9 FFBE                  		dbf	d1,Obj66_Loop
000159FA                            
000159FA 117C 0030 0019             		move.b	#$30,$19(a0)
00015A00 117C 0004 0018             		move.b	#4,$18(a0)
00015A06 317C 003C 0030             		move.w	#$3C,$30(a0)
00015A0C 117C 0001 0034             		move.b	#1,$34(a0)
00015A12 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015A18                            
00015A18                            Obj66_Action:				; XREF: Obj66_Index
00015A18 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015A1C 4A28 0001                  		tst.b	1(a0)
00015A20 6A00 0000                  		bpl.w	Obj66_Display
00015A24 323C 0030                  		move.w	#$30,d1
00015A28 3401                       		move.w	d1,d2
00015A2A 3602                       		move.w	d2,d3
00015A2C 5243                       		addq.w	#1,d3
00015A2E 3828 0008                  		move.w	8(a0),d4
00015A32 6100 A7A4                  		bsr.w	SolidObject
00015A36 0828 0005 0022             		btst	#5,$22(a0)
00015A3C 6700 0000                  		beq.w	Obj66_Display
00015A40 43F8 D000                  		lea	($FFFFD000).w,a1
00015A44 720E                       		moveq	#$E,d1
00015A46 3029 0008                  		move.w	8(a1),d0
00015A4A B068 0008                  		cmp.w	8(a0),d0
00015A4E 6500                       		bcs.s	Obj66_GrabSonic
00015A50 7207                       		moveq	#7,d1
00015A52                            
00015A52                            Obj66_GrabSonic:
00015A52 B228 001A                  		cmp.b	$1A(a0),d1
00015A56 6600                       		bne.s	Obj66_Display
00015A58 1141 0032                  		move.b	d1,$32(a0)
00015A5C 5828 0024                  		addq.b	#4,$24(a0)
00015A60 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015A66 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015A6C 337C 0800 0014             		move.w	#$800,$14(a1)
00015A72 337C 0000 0010             		move.w	#0,$10(a1)
00015A78 337C 0000 0012             		move.w	#0,$12(a1)
00015A7E 08A8 0005 0022             		bclr	#5,$22(a0)
00015A84 08A9 0005 0022             		bclr	#5,$22(a1)
00015A8A 08E9 0001 0022             		bset	#1,$22(a1)
00015A90 3429 0008                  		move.w	8(a1),d2
00015A94 3629 000C                  		move.w	$C(a1),d3
00015A98 6100 0000                  		bsr.w	Obj66_ChgPos
00015A9C D569 0008                  		add.w	d2,8(a1)
00015AA0 D769 000C                  		add.w	d3,$C(a1)
00015AA4 E0E9 0008                  		asr	8(a1)
00015AA8 E0E9 000C                  		asr	$C(a1)
00015AAC                            
00015AAC                            Obj66_Display:				; XREF: Obj66_Index
00015AAC 6000 A402                  		bra.w	MarkObjGone
00015AB0                            ; ===========================================================================
00015AB0                            
00015AB0                            Obj66_Release:				; XREF: Obj66_Index
00015AB0 1028 001A                  		move.b	$1A(a0),d0
00015AB4 0C00 0004                  		cmpi.b	#4,d0
00015AB8 6700                       		beq.s	loc_151C8
00015ABA 0C00 0007                  		cmpi.b	#7,d0
00015ABE 6600                       		bne.s	loc_151F8
00015AC0                            
00015AC0                            loc_151C8:
00015AC0 B028 0032                  		cmp.b	$32(a0),d0
00015AC4 6700                       		beq.s	loc_151F8
00015AC6 43F8 D000                  		lea	($FFFFD000).w,a1
00015ACA 337C 0000 0010             		move.w	#0,$10(a1)
00015AD0 337C 0800 0012             		move.w	#$800,$12(a1)
00015AD6 0C00 0004                  		cmpi.b	#4,d0
00015ADA 6700                       		beq.s	loc_151F0
00015ADC 337C 0800 0010             		move.w	#$800,$10(a1)
00015AE2 337C 0800 0012             		move.w	#$800,$12(a1)
00015AE8                            
00015AE8                            loc_151F0:
00015AE8 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015AEC 5928 0024                  		subq.b	#4,$24(a0)
00015AF0                            
00015AF0                            loc_151F8:
00015AF0 6100                       		bsr.s	Obj66_ChkSwitch
00015AF2 6100                       		bsr.s	Obj66_ChgPos
00015AF4 6000 A3BA                  		bra.w	MarkObjGone
00015AF8                            
00015AF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AF8                            
00015AF8                            
00015AF8                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015AF8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015AFC 7000                       		moveq	#0,d0
00015AFE 1028 0038                  		move.b	$38(a0),d0
00015B02 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015B08 6700                       		beq.s	loc_15224	; if not, branch
00015B0A 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015B0E 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015B10 4428 0034                  		neg.b	$34(a0)
00015B14 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015B1A 6000                       		bra.s	Obj66_Animate
00015B1C                            ; ===========================================================================
00015B1C                            
00015B1C                            loc_15224:
00015B1C 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015B20                            
00015B20                            Obj66_Animate:
00015B20 5328 001E                  		subq.b	#1,$1E(a0)
00015B24 6A00                       		bpl.s	locret_15246
00015B26 117C 0007 001E             		move.b	#7,$1E(a0)
00015B2C 1228 0034                  		move.b	$34(a0),d1
00015B30 1028 001A                  		move.b	$1A(a0),d0
00015B34 D001                       		add.b	d1,d0
00015B36 0200 000F                  		andi.b	#$F,d0
00015B3A 1140 001A                  		move.b	d0,$1A(a0)
00015B3E                            
00015B3E                            locret_15246:
00015B3E 4E75                       		rts	
00015B40                            ; End of function Obj66_ChkSwitch
00015B40                            
00015B40                            
00015B40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B40                            
00015B40                            
00015B40                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015B40 43F8 D000                  		lea	($FFFFD000).w,a1
00015B44 7000                       		moveq	#0,d0
00015B46 1028 001A                  		move.b	$1A(a0),d0
00015B4A D040                       		add.w	d0,d0
00015B4C 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015B50 101A                       		move.b	(a2)+,d0
00015B52 4880                       		ext.w	d0
00015B54 D068 0008                  		add.w	8(a0),d0
00015B58 3340 0008                  		move.w	d0,8(a1)
00015B5C 101A                       		move.b	(a2)+,d0
00015B5E 4880                       		ext.w	d0
00015B60 D068 000C                  		add.w	$C(a0),d0
00015B64 3340 000C                  		move.w	d0,$C(a1)
00015B68 4E75                       		rts	
00015B6A                            ; End of function Obj66_ChgPos
00015B6A                            
00015B6A                            ; ===========================================================================
00015B6A E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015B6E E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015B72 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015B76 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015B7A 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015B7E 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015B82 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015B86 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015B8A                            ; ---------------------------------------------------------------------------
00015B8A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015B8A                            ; ---------------------------------------------------------------------------
00015B8A                            Map_obj66:
00015B8A                            	include "_maps\obj66.asm"
00015B8A                            ; ---------------------------------------------------------------------------
00015B8A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015B8A                            ; ---------------------------------------------------------------------------
00015B8A 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015B8E 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015B92 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015B96 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015B9A 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015B9E 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015BA2 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015BA6 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015BAA 0000                       		dc.w byte_154A4-Map_obj66
00015BAC 06                         byte_152B4:	dc.b 6
00015BAD E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015BB2 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015BB7 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015BBC E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015BC1 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015BC6 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015BCB 06                         byte_152D3:	dc.b 6
00015BCC F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015BD1 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015BD6 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015BDB F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015BE0 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015BE5 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015BEA 06                         byte_152F2:	dc.b 6
00015BEB 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015BF0 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015BF5 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015BFA 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015BFF 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015C04 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015C09 06                         byte_15311:	dc.b 6
00015C0A 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015C0F 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015C14 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015C19 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015C1E 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015C23 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015C28 06                         byte_15330:	dc.b 6
00015C29 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015C2E 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015C33 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015C38 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015C3D 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015C42 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015C47 06                         byte_1534F:	dc.b 6
00015C48 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015C4D 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015C52 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015C57 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015C5C 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015C61 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015C66 06                         byte_1536E:	dc.b 6
00015C67 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015C6C 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015C71 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015C76 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015C7B 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015C80 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015C85 06                         byte_1538D:	dc.b 6
00015C86 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015C8B F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015C90 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015C95 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015C9A 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015C9F 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015CA4 06                         byte_153AC:	dc.b 6
00015CA5 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015CAA 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015CAF E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015CB4 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015CB9 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015CBE 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015CC3 06                         byte_153CB:	dc.b 6
00015CC4 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015CC9 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015CCE DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015CD3 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015CD8 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015CDD F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015CE2 06                         byte_153EA:	dc.b 6
00015CE3 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015CE8 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015CED D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015CF2 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015CF7 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015CFC E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015D01 06                         byte_15409:	dc.b 6
00015D02 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015D07 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015D0C CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015D11 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015D16 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015D1B E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015D20 06                         byte_15428:	dc.b 6
00015D21 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015D26 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015D2B C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015D30 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015D35 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015D3A E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015D3F 06                         byte_15447:	dc.b 6
00015D40 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015D45 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015D4A CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015D4F CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015D54 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015D59 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015D5E 06                         byte_15466:	dc.b 6
00015D5F E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015D64 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015D69 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015D6E D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015D73 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015D78 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015D7D 06                         byte_15485:	dc.b 6
00015D7E E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015D83 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015D88 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015D8D DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015D92 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015D97 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015D9C 0C                         byte_154A4:	dc.b $C
00015D9D C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015DA2 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015DA7 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015DAC C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015DB1 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015DB6 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015DBB 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015DC0 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015DC5 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015DCA 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015DCF 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015DD4 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015DDA 00                         		even
00015DDA 00                         		even
00015DDA                            
00015DDA                            ; ===========================================================================
00015DDA                            ; ---------------------------------------------------------------------------
00015DDA                            ; Object 67 - disc that	you run	around (SBZ)
00015DDA                            ; ---------------------------------------------------------------------------
00015DDA                            
00015DDA                            Obj67:					; XREF: Obj_Index
00015DDA 7000                       		moveq	#0,d0
00015DDC 1028 0024                  		move.b	$24(a0),d0
00015DE0 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015DE4 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015DE8                            ; ===========================================================================
00015DE8 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015DEA 0000                       		dc.w Obj67_Action-Obj67_Index
00015DEC                            ; ===========================================================================
00015DEC                            
00015DEC                            Obj67_Main:				; XREF: Obj67_Index
00015DEC 5428 0024                  		addq.b	#2,$24(a0)
00015DF0 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015DF8 317C C344 0002             		move.w	#$C344,2(a0)
00015DFE 117C 0004 0001             		move.b	#4,1(a0)
00015E04 117C 0004 0018             		move.b	#4,$18(a0)
00015E0A 117C 0008 0019             		move.b	#8,$19(a0)
00015E10 3168 0008 0032             		move.w	8(a0),$32(a0)
00015E16 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015E1C 117C 0018 0034             		move.b	#$18,$34(a0)
00015E22 117C 0048 0038             		move.b	#$48,$38(a0)
00015E28 1228 0028                  		move.b	$28(a0),d1	; get object type
00015E2C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015E30 6700                       		beq.s	loc_15546
00015E32 117C 0010 0034             		move.b	#$10,$34(a0)
00015E38 117C 0038 0038             		move.b	#$38,$38(a0)
00015E3E                            
00015E3E                            loc_15546:
00015E3E 1228 0028                  		move.b	$28(a0),d1	; get object type
00015E42 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015E46 4881                       		ext.w	d1
00015E48 E741                       		asl.w	#3,d1
00015E4A 3141 0036                  		move.w	d1,$36(a0)
00015E4E 1028 0022                  		move.b	$22(a0),d0
00015E52 E418                       		ror.b	#2,d0
00015E54 0200 00C0                  		andi.b	#-$40,d0
00015E58 1140 0026                  		move.b	d0,$26(a0)
00015E5C                            
00015E5C                            Obj67_Action:				; XREF: Obj67_Index
00015E5C 6100 0000                  		bsr.w	Obj67_MoveSonic
00015E60 6100 0000                  		bsr.w	Obj67_MoveSpot
00015E64 6000 0000                  		bra.w	Obj67_ChkDel
00015E68                            ; ===========================================================================
00015E68                            
00015E68                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015E68 7400                       		moveq	#0,d2
00015E6A 1428 0038                  		move.b	$38(a0),d2
00015E6E 3602                       		move.w	d2,d3
00015E70 D643                       		add.w	d3,d3
00015E72 43F8 D000                  		lea	($FFFFD000).w,a1
00015E76 3029 0008                  		move.w	8(a1),d0
00015E7A 9068 0032                  		sub.w	$32(a0),d0
00015E7E D042                       		add.w	d2,d0
00015E80 B043                       		cmp.w	d3,d0
00015E82 6400                       		bcc.s	loc_155A8
00015E84 3229 000C                  		move.w	$C(a1),d1
00015E88 9268 0030                  		sub.w	$30(a0),d1
00015E8C D242                       		add.w	d2,d1
00015E8E B243                       		cmp.w	d3,d1
00015E90 6400                       		bcc.s	loc_155A8
00015E92 0829 0001 0022             		btst	#1,$22(a1)
00015E98 6700                       		beq.s	loc_155B8
00015E9A 4228 003A                  		clr.b	$3A(a0)
00015E9E 4E75                       		rts	
00015EA0                            ; ===========================================================================
00015EA0                            
00015EA0                            loc_155A8:
00015EA0 4A28 003A                  		tst.b	$3A(a0)
00015EA4 6700                       		beq.s	locret_155B6
00015EA6 4229 0038                  		clr.b	$38(a1)
00015EAA 4228 003A                  		clr.b	$3A(a0)
00015EAE                            
00015EAE                            locret_155B6:
00015EAE 4E75                       		rts	
00015EB0                            ; ===========================================================================
00015EB0                            
00015EB0                            loc_155B8:
00015EB0 4A28 003A                  		tst.b	$3A(a0)
00015EB4 6600                       		bne.s	loc_155E2
00015EB6 117C 0001 003A             		move.b	#1,$3A(a0)
00015EBC 0829 0002 0022             		btst	#2,$22(a1)
00015EC2 6600                       		bne.s	loc_155D0
00015EC4 4229 001C                  		clr.b	$1C(a1)
00015EC8                            
00015EC8                            loc_155D0:
00015EC8 08A9 0005 0022             		bclr	#5,$22(a1)
00015ECE 137C 0001 001D             		move.b	#1,$1D(a1)
00015ED4 137C 0001 0038             		move.b	#1,$38(a1)
00015EDA                            
00015EDA                            loc_155E2:
00015EDA 3029 0014                  		move.w	$14(a1),d0
00015EDE 4A68 0036                  		tst.w	$36(a0)
00015EE2 6A00                       		bpl.s	loc_15608
00015EE4 0C40 FC00                  		cmpi.w	#-$400,d0
00015EE8 6F00                       		ble.s	loc_155FA
00015EEA 337C FC00 0014             		move.w	#-$400,$14(a1)
00015EF0 4E75                       		rts	
00015EF2                            ; ===========================================================================
00015EF2                            
00015EF2                            loc_155FA:
00015EF2 0C40 F100                  		cmpi.w	#-$F00,d0
00015EF6 6C00                       		bge.s	locret_15606
00015EF8 337C F100 0014             		move.w	#-$F00,$14(a1)
00015EFE                            
00015EFE                            locret_15606:
00015EFE 4E75                       		rts	
00015F00                            ; ===========================================================================
00015F00                            
00015F00                            loc_15608:
00015F00 0C40 0400                  		cmpi.w	#$400,d0
00015F04 6C00                       		bge.s	loc_15616
00015F06 337C 0400 0014             		move.w	#$400,$14(a1)
00015F0C 4E75                       		rts	
00015F0E                            ; ===========================================================================
00015F0E                            
00015F0E                            loc_15616:
00015F0E 0C40 0F00                  		cmpi.w	#$F00,d0
00015F12 6F00                       		ble.s	locret_15622
00015F14 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015F1A                            
00015F1A                            locret_15622:
00015F1A 4E75                       		rts	
00015F1C                            ; ===========================================================================
00015F1C                            
00015F1C                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015F1C 3028 0036                  		move.w	$36(a0),d0
00015F20 D168 0026                  		add.w	d0,$26(a0)
00015F24 1028 0026                  		move.b	$26(a0),d0
00015F28 4EB9 0000 2CEC             		jsr	(CalcSine).l
00015F2E 3428 0030                  		move.w	$30(a0),d2
00015F32 3628 0032                  		move.w	$32(a0),d3
00015F36 7800                       		moveq	#0,d4
00015F38 1828 0034                  		move.b	$34(a0),d4
00015F3C E14C                       		lsl.w	#8,d4
00015F3E 2A04                       		move.l	d4,d5
00015F40 C9C0                       		muls.w	d0,d4
00015F42 4844                       		swap	d4
00015F44 CBC1                       		muls.w	d1,d5
00015F46 4845                       		swap	d5
00015F48 D842                       		add.w	d2,d4
00015F4A DA43                       		add.w	d3,d5
00015F4C 3144 000C                  		move.w	d4,$C(a0)
00015F50 3145 0008                  		move.w	d5,8(a0)
00015F54 4E75                       		rts	
00015F56                            ; ===========================================================================
00015F56                            
00015F56                            Obj67_ChkDel:				; XREF: Obj67_Action
00015F56 3028 0032                  		move.w	$32(a0),d0
00015F5A 0240 FF80                  		andi.w	#-$80,d0
00015F5E 3238 F700                  		move.w	($FFFFF700).w,d1
00015F62 0441 0080                  		subi.w	#$80,d1
00015F66 0241 FF80                  		andi.w	#-$80,d1
00015F6A 9041                       		sub.w	d1,d0
00015F6C 0C40 0280                  		cmpi.w	#$280,d0
00015F70 6200                       		bhi.s	Obj67_Delete
00015F72 4EF9 0000 DE08             		jmp	DisplaySprite
00015F78                            ; ===========================================================================
00015F78                            
00015F78                            Obj67_Delete:
00015F78 4EF9 0000 DE44             		jmp	DeleteObject
00015F7E                            ; ===========================================================================
00015F7E                            ; ---------------------------------------------------------------------------
00015F7E                            ; Sprite mappings - disc that you run around (SBZ)
00015F7E                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015F7E                            ; part of the level tiles.)
00015F7E                            ; ---------------------------------------------------------------------------
00015F7E                            Map_obj67:
00015F7E                            	include "_maps\obj67.asm"
00015F7E                            ; ---------------------------------------------------------------------------
00015F7E                            ; Sprite mappings - disc that you run around (SBZ)
00015F7E                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015F7E                            ; part of the level tiles.)
00015F7E                            ; ---------------------------------------------------------------------------
00015F7E 0000                       		dc.w byte_15688-Map_obj67
00015F80 01                         byte_15688:	dc.b 1
00015F81 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015F86                            		even
00015F86                            		even
00015F86                            
00015F86                            ; ===========================================================================
00015F86                            ; ---------------------------------------------------------------------------
00015F86                            ; Object 68 - conveyor belts (SBZ)
00015F86                            ; ---------------------------------------------------------------------------
00015F86                            
00015F86                            Obj68:					; XREF: Obj_Index
00015F86 7000                       		moveq	#0,d0
00015F88 1028 0024                  		move.b	$24(a0),d0
00015F8C 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015F90 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015F94                            ; ===========================================================================
00015F94 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015F96 0000                       		dc.w Obj68_Action-Obj68_Index
00015F98                            ; ===========================================================================
00015F98                            
00015F98                            Obj68_Main:				; XREF: Obj68_Index
00015F98 5428 0024                  		addq.b	#2,$24(a0)
00015F9C 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015FA2 1228 0028                  		move.b	$28(a0),d1	; get object type
00015FA6 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015FAA 6700                       		beq.s	loc_156BA	; if zero, branch
00015FAC 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015FB2                            
00015FB2                            loc_156BA:
00015FB2 1228 0028                  		move.b	$28(a0),d1	; get object type
00015FB6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015FBA 4881                       		ext.w	d1
00015FBC E841                       		asr.w	#4,d1
00015FBE 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015FC2                            
00015FC2                            Obj68_Action:				; XREF: Obj68_Index
00015FC2 6100                       		bsr.s	Obj68_MoveSonic
00015FC4 3028 0008                  		move.w	8(a0),d0
00015FC8 0240 FF80                  		andi.w	#$FF80,d0
00015FCC 3238 F700                  		move.w	($FFFFF700).w,d1
00015FD0 0441 0080                  		subi.w	#$80,d1
00015FD4 0241 FF80                  		andi.w	#$FF80,d1
00015FD8 9041                       		sub.w	d1,d0
00015FDA 0C40 0280                  		cmpi.w	#$280,d0
00015FDE 6200                       		bhi.s	Obj68_Delete
00015FE0 4E75                       		rts	
00015FE2                            ; ===========================================================================
00015FE2                            
00015FE2                            Obj68_Delete:
00015FE2 4EF9 0000 DE44             		jmp	DeleteObject
00015FE8                            ; ===========================================================================
00015FE8                            
00015FE8                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015FE8 7400                       		moveq	#0,d2
00015FEA 1428 0038                  		move.b	$38(a0),d2
00015FEE 3602                       		move.w	d2,d3
00015FF0 D643                       		add.w	d3,d3
00015FF2 43F8 D000                  		lea	($FFFFD000).w,a1
00015FF6 3029 0008                  		move.w	8(a1),d0
00015FFA 9068 0008                  		sub.w	8(a0),d0
00015FFE D042                       		add.w	d2,d0
00016000 B043                       		cmp.w	d3,d0
00016002 6400                       		bcc.s	locret_1572E
00016004 3229 000C                  		move.w	$C(a1),d1
00016008 9268 000C                  		sub.w	$C(a0),d1
0001600C 0641 0030                  		addi.w	#$30,d1
00016010 0C41 0030                  		cmpi.w	#$30,d1
00016014 6400                       		bcc.s	locret_1572E
00016016 0829 0001 0022             		btst	#1,$22(a1)
0001601C 6600                       		bne.s	locret_1572E
0001601E 3028 0036                  		move.w	$36(a0),d0
00016022 D169 0008                  		add.w	d0,8(a1)
00016026                            
00016026                            locret_1572E:
00016026 4E75                       		rts	
00016028                            
00016028                            ; ===========================================================================
00016028                            ; ---------------------------------------------------------------------------
00016028                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00016028                            ; ---------------------------------------------------------------------------
00016028                            
00016028                            Obj69:					; XREF: Obj_Index
00016028 7000                       		moveq	#0,d0
0001602A 1028 0024                  		move.b	$24(a0),d0
0001602E 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00016032 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00016036                            ; ===========================================================================
00016036 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00016038 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
0001603A 0000                       		dc.w Obj69_Spinner-Obj69_Index
0001603C                            ; ===========================================================================
0001603C                            
0001603C                            Obj69_Main:				; XREF: Obj69_Index
0001603C 5428 0024                  		addq.b	#2,$24(a0)
00016040 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00016048 317C 4492 0002             		move.w	#$4492,2(a0)
0001604E 0028 0004 0001             		ori.b	#4,1(a0)
00016054 117C 0080 0019             		move.b	#$80,$19(a0)
0001605A 7000                       		moveq	#0,d0
0001605C 1028 0028                  		move.b	$28(a0),d0
00016060 0240 000F                  		andi.w	#$F,d0
00016064 C0FC 003C                  		mulu.w	#$3C,d0
00016068 3140 0032                  		move.w	d0,$32(a0)
0001606C 4A28 0028                  		tst.b	$28(a0)
00016070 6A00                       		bpl.s	Obj69_Trapdoor
00016072 5428 0024                  		addq.b	#2,$24(a0)
00016076 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
0001607E 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016084 117C 0010 0019             		move.b	#$10,$19(a0)
0001608A 117C 0002 001C             		move.b	#2,$1C(a0)
00016090 7000                       		moveq	#0,d0
00016092 1028 0028                  		move.b	$28(a0),d0	; get object type
00016096 3200                       		move.w	d0,d1
00016098 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001609C C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000160A0 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000160A4 3140 0032                  		move.w	d0,$32(a0)
000160A8 0241 0070                  		andi.w	#$70,d1
000160AC 0641 0010                  		addi.w	#$10,d1
000160B0 E549                       		lsl.w	#2,d1
000160B2 5341                       		subq.w	#1,d1
000160B4 3141 0036                  		move.w	d1,$36(a0)
000160B8 6000                       		bra.s	Obj69_Spinner
000160BA                            ; ===========================================================================
000160BA                            
000160BA                            Obj69_Trapdoor:				; XREF: Obj69_Index
000160BA 5368 0030                  		subq.w	#1,$30(a0)
000160BE 6A00                       		bpl.s	Obj69_Animate
000160C0 3168 0032 0030             		move.w	$32(a0),$30(a0)
000160C6 0868 0000 001C             		bchg	#0,$1C(a0)
000160CC 4A28 0001                  		tst.b	1(a0)
000160D0 6A00                       		bpl.s	Obj69_Animate
000160D2 303C 00BB                  		move.w	#$BB,d0
000160D6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
000160DC                            
000160DC                            Obj69_Animate:
000160DC 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000160E2 4EB9 0000 AEC8             		jsr	AnimateSprite
000160E8 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000160EC 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000160EE 323C 004B                  		move.w	#$4B,d1
000160F2 343C 000C                  		move.w	#$C,d2
000160F6 3602                       		move.w	d2,d3
000160F8 5243                       		addq.w	#1,d3
000160FA 3828 0008                  		move.w	8(a0),d4
000160FE 6100 A0D8                  		bsr.w	SolidObject
00016102 6000 9DAC                  		bra.w	MarkObjGone
00016106                            ; ===========================================================================
00016106                            
00016106                            Obj69_NotSolid:
00016106 0828 0003 0022             		btst	#3,$22(a0)
0001610C 6700                       		beq.s	Obj69_Display
0001610E 43F8 D000                  		lea	($FFFFD000).w,a1
00016112 08A9 0003 0022             		bclr	#3,$22(a1)
00016118 08A8 0003 0022             		bclr	#3,$22(a0)
0001611E 4228 0025                  		clr.b	$25(a0)
00016122                            
00016122                            Obj69_Display:
00016122 6000 9D8C                  		bra.w	MarkObjGone
00016126                            ; ===========================================================================
00016126                            
00016126                            Obj69_Spinner:				; XREF: Obj69_Index
00016126 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001612A C068 0036                  		and.w	$36(a0),d0
0001612E 6600                       		bne.s	Obj69_Delay
00016130 117C 0001 0034             		move.b	#1,$34(a0)
00016136                            
00016136                            Obj69_Delay:
00016136 4A28 0034                  		tst.b	$34(a0)
0001613A 6700                       		beq.s	Obj69_Animate2
0001613C 5368 0030                  		subq.w	#1,$30(a0)
00016140 6A00                       		bpl.s	Obj69_Animate2
00016142 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016148 4228 0034                  		clr.b	$34(a0)
0001614C 0868 0000 001C             		bchg	#0,$1C(a0)
00016152                            
00016152                            Obj69_Animate2:
00016152 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016158 4EB9 0000 AEC8             		jsr	AnimateSprite
0001615E 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00016162 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00016164 323C 001B                  		move.w	#$1B,d1
00016168 343C 0007                  		move.w	#7,d2
0001616C 3602                       		move.w	d2,d3
0001616E 5243                       		addq.w	#1,d3
00016170 3828 0008                  		move.w	8(a0),d4
00016174 6100 A062                  		bsr.w	SolidObject
00016178 6000 9D36                  		bra.w	MarkObjGone
0001617C                            ; ===========================================================================
0001617C                            
0001617C                            Obj69_NotSolid2:
0001617C 0828 0003 0022             		btst	#3,$22(a0)
00016182 6700                       		beq.s	Obj69_Display2
00016184 43F8 D000                  		lea	($FFFFD000).w,a1
00016188 08A9 0003 0022             		bclr	#3,$22(a1)
0001618E 08A8 0003 0022             		bclr	#3,$22(a0)
00016194 4228 0025                  		clr.b	$25(a0)
00016198                            
00016198                            Obj69_Display2:
00016198 6000 9D16                  		bra.w	MarkObjGone
0001619C                            ; ===========================================================================
0001619C                            Ani_obj69:
0001619C                            	include "_anim\obj69.asm"
0001619C                            ; ---------------------------------------------------------------------------
0001619C                            ; Animation script - trapdoor (SBZ)
0001619C                            ; ---------------------------------------------------------------------------
0001619C 0000                       		dc.w byte_158AC-Ani_obj69
0001619E 0000                       		dc.w byte_158B2-Ani_obj69
000161A0 0000                       		dc.w byte_158B8-Ani_obj69
000161A2 0000                       		dc.w byte_158CC-Ani_obj69
000161A4 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000161AA 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000161B0 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000161BD 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000161C4 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000161D1 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000161D8                            		even
000161D8                            		even
000161D8                            
000161D8                            ; ---------------------------------------------------------------------------
000161D8                            ; Sprite mappings - trapdoor (SBZ)
000161D8                            ; ---------------------------------------------------------------------------
000161D8                            Map_obj69:
000161D8                            	include "_maps\obj69.asm"
000161D8                            ; ---------------------------------------------------------------------------
000161D8                            ; Sprite mappings - trapdoor (SBZ)
000161D8                            ; ---------------------------------------------------------------------------
000161D8 0000                       		dc.w byte_158E6-Map_obj69
000161DA 0000                       		dc.w byte_158FB-Map_obj69
000161DC 0000                       		dc.w byte_15924-Map_obj69
000161DE 04                         byte_158E6:	dc.b 4
000161DF F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000161E4 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000161E9 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000161EE F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000161F3 08                         byte_158FB:	dc.b 8
000161F4 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000161F9 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000161FE 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00016203 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016208 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
0001620D 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00016212 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016217 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
0001621C 04                         byte_15924:	dc.b 4
0001621D 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00016222 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016227 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
0001622C 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00016232 00                         		even
00016232 00                         		even
00016232                            
00016232                            ; ---------------------------------------------------------------------------
00016232                            ; Sprite mappings - spinning platforms (SBZ)
00016232                            ; ---------------------------------------------------------------------------
00016232                            Map_obj69a:
00016232                            	include "_maps\obj69a.asm"
00016232                            ; ---------------------------------------------------------------------------
00016232                            ; Sprite mappings - spinning platforms (SBZ)
00016232                            ; ---------------------------------------------------------------------------
00016232 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00016236 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
0001623A 0000                       		dc.w byte_15970-Map_obj69a
0001623C 02                         byte_15944:	dc.b 2
0001623D F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00016242 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00016247 02                         byte_1594F:	dc.b 2
00016248 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
0001624D 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00016252 02                         byte_1595A:	dc.b 2
00016253 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00016258 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
0001625D 02                         byte_15965:	dc.b 2
0001625E F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00016263 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00016268 02                         byte_15970:	dc.b 2
00016269 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
0001626E 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00016274 00                         		even
00016274 00                         		even
00016274                            
00016274                            ; ===========================================================================
00016274                            ; ---------------------------------------------------------------------------
00016274                            ; Object 6A - ground saws and pizza cutters (SBZ)
00016274                            ; ---------------------------------------------------------------------------
00016274                            
00016274                            Obj6A:					; XREF: Obj_Index
00016274 7000                       		moveq	#0,d0
00016276 1028 0024                  		move.b	$24(a0),d0
0001627A 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
0001627E 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00016282                            ; ===========================================================================
00016282 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00016284 0000                       		dc.w Obj6A_Action-Obj6A_Index
00016286                            ; ===========================================================================
00016286                            
00016286                            Obj6A_Main:				; XREF: Obj6A_Index
00016286 5428 0024                  		addq.b	#2,$24(a0)
0001628A 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00016292 317C 43B5 0002             		move.w	#$43B5,2(a0)
00016298 117C 0004 0001             		move.b	#4,1(a0)
0001629E 117C 0004 0018             		move.b	#4,$18(a0)
000162A4 117C 0020 0019             		move.b	#$20,$19(a0)
000162AA 3168 0008 003A             		move.w	8(a0),$3A(a0)
000162B0 3168 000C 0038             		move.w	$C(a0),$38(a0)
000162B6 0C28 0003 0028             		cmpi.b	#3,$28(a0)
000162BC 6400                       		bcc.s	Obj6A_Action
000162BE 117C 00A2 0020             		move.b	#$A2,$20(a0)
000162C4                            
000162C4                            Obj6A_Action:				; XREF: Obj6A_Index
000162C4 7000                       		moveq	#0,d0
000162C6 1028 0028                  		move.b	$28(a0),d0
000162CA 0240 0007                  		andi.w	#7,d0
000162CE D040                       		add.w	d0,d0
000162D0 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000162D4 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000162D8 3028 003A                  		move.w	$3A(a0),d0
000162DC 0240 FF80                  		andi.w	#$FF80,d0
000162E0 3238 F700                  		move.w	($FFFFF700).w,d1
000162E4 0441 0080                  		subi.w	#$80,d1
000162E8 0241 FF80                  		andi.w	#$FF80,d1
000162EC 9041                       		sub.w	d1,d0
000162EE 0C40 0280                  		cmpi.w	#$280,d0
000162F2 6200                       		bhi.s	Obj6A_Delete
000162F4 4EF9 0000 DE08             		jmp	DisplaySprite
000162FA                            ; ===========================================================================
000162FA                            
000162FA                            Obj6A_Delete:
000162FA 4EF9 0000 DE44             		jmp	DeleteObject
00016300                            ; ===========================================================================
00016300 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00016304 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016308 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
0001630A                            ; ===========================================================================
0001630A                            
0001630A                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
0001630A 4E75                       		rts	
0001630C                            ; ===========================================================================
0001630C                            
0001630C                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
0001630C 323C 0060                  		move.w	#$60,d1
00016310 7000                       		moveq	#0,d0
00016312 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016316 0828 0000 0022             		btst	#0,$22(a0)
0001631C 6700                       		beq.s	Obj6A_Animate01
0001631E 4440                       		neg.w	d0
00016320 D041                       		add.w	d1,d0
00016322                            
00016322                            Obj6A_Animate01:
00016322 3228 003A                  		move.w	$3A(a0),d1
00016326 9240                       		sub.w	d0,d1
00016328 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
0001632C 5328 001E                  		subq.b	#1,$1E(a0)
00016330 6A00                       		bpl.s	loc_15A46
00016332 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016338 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0001633E                            
0001633E                            loc_15A46:
0001633E 4A28 0001                  		tst.b	1(a0)
00016342 6A00                       		bpl.s	locret_15A60
00016344 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016348 0240 000F                  		andi.w	#$F,d0
0001634C 6600                       		bne.s	locret_15A60
0001634E 303C 00B0                  		move.w	#$B0,d0
00016352 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
00016358                            
00016358                            locret_15A60:
00016358 4E75                       		rts	
0001635A                            ; ===========================================================================
0001635A                            
0001635A                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
0001635A 323C 0030                  		move.w	#$30,d1
0001635E 7000                       		moveq	#0,d0
00016360 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016364 0828 0000 0022             		btst	#0,$22(a0)
0001636A 6700                       		beq.s	Obj6A_Animate02
0001636C 4440                       		neg.w	d0
0001636E 0640 0080                  		addi.w	#$80,d0
00016372                            
00016372                            Obj6A_Animate02:
00016372 3228 0038                  		move.w	$38(a0),d1
00016376 9240                       		sub.w	d0,d1
00016378 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
0001637C 5328 001E                  		subq.b	#1,$1E(a0)
00016380 6A00                       		bpl.s	loc_15A96
00016382 117C 0002 001E             		move.b	#2,$1E(a0)
00016388 0868 0000 001A             		bchg	#0,$1A(a0)
0001638E                            
0001638E                            loc_15A96:
0001638E 4A28 0001                  		tst.b	1(a0)
00016392 6A00                       		bpl.s	locret_15AB0
00016394 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016398 0C00 0018                  		cmpi.b	#$18,d0
0001639C 6600                       		bne.s	locret_15AB0
0001639E 303C 00B0                  		move.w	#$B0,d0
000163A2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
000163A8                            
000163A8                            locret_15AB0:
000163A8 4E75                       		rts	
000163AA                            ; ===========================================================================
000163AA                            
000163AA                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000163AA 4A28 003D                  		tst.b	$3D(a0)
000163AE 6600                       		bne.s	Obj6A_Animate03
000163B0 3038 D008                  		move.w	($FFFFD008).w,d0
000163B4 0440 00C0                  		subi.w	#$C0,d0
000163B8 6500                       		bcs.s	loc_15B02
000163BA 9068 0008                  		sub.w	8(a0),d0
000163BE 6500                       		bcs.s	loc_15B02
000163C0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000163C4 0440 0080                  		subi.w	#$80,d0
000163C8 B068 000C                  		cmp.w	$C(a0),d0
000163CC 6400                       		bcc.s	locret_15B04
000163CE 0640 0100                  		addi.w	#$100,d0
000163D2 B068 000C                  		cmp.w	$C(a0),d0
000163D6 6500                       		bcs.s	locret_15B04
000163D8 117C 0001 003D             		move.b	#1,$3D(a0)
000163DE 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000163E4 117C 00A2 0020             		move.b	#$A2,$20(a0)
000163EA 117C 0002 001A             		move.b	#2,$1A(a0)
000163F0 303C 00B0                  		move.w	#$B0,d0
000163F4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
000163FA                            
000163FA                            loc_15B02:
000163FA 588F                       		addq.l	#4,sp
000163FC                            
000163FC                            locret_15B04:
000163FC 4E75                       		rts	
000163FE                            ; ===========================================================================
000163FE                            
000163FE                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000163FE 4EB9 0000 DDE2             		jsr	SpeedToPos
00016404 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001640A 5328 001E                  		subq.b	#1,$1E(a0)
0001640E 6A00                       		bpl.s	locret_15B24
00016410 117C 0002 001E             		move.b	#2,$1E(a0)
00016416 0868 0000 001A             		bchg	#0,$1A(a0)
0001641C                            
0001641C                            locret_15B24:
0001641C 4E75                       		rts	
0001641E                            ; ===========================================================================
0001641E                            
0001641E                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
0001641E 4A28 003D                  		tst.b	$3D(a0)
00016422 6600                       		bne.s	Obj6A_Animate04
00016424 3038 D008                  		move.w	($FFFFD008).w,d0
00016428 0640 00E0                  		addi.w	#$E0,d0
0001642C 9068 0008                  		sub.w	8(a0),d0
00016430 6400                       		bcc.s	loc_15B74
00016432 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016436 0440 0080                  		subi.w	#$80,d0
0001643A B068 000C                  		cmp.w	$C(a0),d0
0001643E 6400                       		bcc.s	locret_15B76
00016440 0640 0100                  		addi.w	#$100,d0
00016444 B068 000C                  		cmp.w	$C(a0),d0
00016448 6500                       		bcs.s	locret_15B76
0001644A 117C 0001 003D             		move.b	#1,$3D(a0)
00016450 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016456 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001645C 117C 0002 001A             		move.b	#2,$1A(a0)
00016462 303C 00B0                  		move.w	#$B0,d0
00016466 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
0001646C                            
0001646C                            loc_15B74:
0001646C 588F                       		addq.l	#4,sp
0001646E                            
0001646E                            locret_15B76:
0001646E 4E75                       		rts	
00016470                            ; ===========================================================================
00016470                            
00016470                            Obj6A_Animate04:
00016470 4EB9 0000 DDE2             		jsr	SpeedToPos
00016476 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001647C 5328 001E                  		subq.b	#1,$1E(a0)
00016480 6A00                       		bpl.s	locret_15B96
00016482 117C 0002 001E             		move.b	#2,$1E(a0)
00016488 0868 0000 001A             		bchg	#0,$1A(a0)
0001648E                            
0001648E                            locret_15B96:
0001648E 4E75                       		rts	
00016490                            ; ===========================================================================
00016490                            ; ---------------------------------------------------------------------------
00016490                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016490                            ; ---------------------------------------------------------------------------
00016490                            Map_obj6A:
00016490                            	include "_maps\obj6A.asm"
00016490                            ; ---------------------------------------------------------------------------
00016490                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016490                            ; ---------------------------------------------------------------------------
00016490 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016494 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016498 07                         byte_15BA0:	dc.b 7
00016499 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001649E D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000164A3 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000164A8 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000164AD E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000164B2 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000164B7 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000164BC 07                         byte_15BC4:	dc.b 7
000164BD C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000164C2 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000164C7 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000164CC E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000164D1 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000164D6 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000164DB 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000164E0 04                         byte_15BE8:	dc.b 4
000164E1 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000164E6 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000164EB 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000164F0 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000164F5 04                         byte_15BFD:	dc.b 4
000164F6 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000164FB E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016500 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016505 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001650A                            		even
0001650A                            		even
0001650A                            
0001650A                            ; ===========================================================================
0001650A                            ; ---------------------------------------------------------------------------
0001650A                            ; Object 6B - stomper (SBZ)
0001650A                            ; ---------------------------------------------------------------------------
0001650A                            
0001650A                            Obj6B:					; XREF: Obj_Index
0001650A 7000                       		moveq	#0,d0
0001650C 1028 0024                  		move.b	$24(a0),d0
00016510 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016514 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016518                            ; ===========================================================================
00016518 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
0001651A 0000                       		dc.w Obj6B_Action-Obj6B_Index
0001651C                            
0001651C 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016520 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016524 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016528 1C20 6004                  		dc.b  $1C, $20,	$60,   4
0001652C 8040 0005                  		dc.b  $80, $40,	  0,   5
00016530                            ; ===========================================================================
00016530                            
00016530                            Obj6B_Main:				; XREF: Obj6B_Index
00016530 5428 0024                  		addq.b	#2,$24(a0)
00016534 7000                       		moveq	#0,d0
00016536 1028 0028                  		move.b	$28(a0),d0
0001653A E448                       		lsr.w	#2,d0
0001653C 0240 001C                  		andi.w	#$1C,d0
00016540 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016544 115B 0019                  		move.b	(a3)+,$19(a0)
00016548 115B 0016                  		move.b	(a3)+,$16(a0)
0001654C E448                       		lsr.w	#2,d0
0001654E 1140 001A                  		move.b	d0,$1A(a0)
00016552 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
0001655A 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016560 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016566 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00016568 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
0001656E 6700                       		beq.s	Obj6B_SBZ3
00016570                            
00016570                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016570 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016574 7000                       		moveq	#0,d0
00016576 1028 0023                  		move.b	$23(a0),d0
0001657A 6700                       		beq.s	Obj6B_Delete
0001657C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016582                            
00016582                            Obj6B_Delete:
00016582 4EF9 0000 DE44             		jmp	DeleteObject
00016588                            ; ===========================================================================
00016588                            
00016588                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00016588 317C 41F0 0002             		move.w	#$41F0,2(a0)
0001658E 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016594 6600                       		bne.s	Obj6B_SBZ12
00016596 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001659A 7000                       		moveq	#0,d0
0001659C 1028 0023                  		move.b	$23(a0),d0
000165A0 6700                       		beq.s	Obj6B_SBZ12
000165A2 0832 0000 0002             		btst	#0,2(a2,d0.w)
000165A8 6700                       		beq.s	Obj6B_SBZ12
000165AA 4238 F7CB                  		clr.b	($FFFFF7CB).w
000165AE 60C0                       		bra.s	Obj6B_ChkGone
000165B0                            ; ===========================================================================
000165B0                            
000165B0                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000165B0 0028 0004 0001             		ori.b	#4,1(a0)
000165B6 117C 0004 0018             		move.b	#4,$18(a0)
000165BC 3168 0008 0034             		move.w	8(a0),$34(a0)
000165C2 3168 000C 0030             		move.w	$C(a0),$30(a0)
000165C8 7000                       		moveq	#0,d0
000165CA 101B                       		move.b	(a3)+,d0
000165CC 3140 003C                  		move.w	d0,$3C(a0)
000165D0 7000                       		moveq	#0,d0
000165D2 1028 0028                  		move.b	$28(a0),d0
000165D6 6A00                       		bpl.s	Obj6B_Action
000165D8 0200 000F                  		andi.b	#$F,d0
000165DC 1140 003E                  		move.b	d0,$3E(a0)
000165E0 1153 0028                  		move.b	(a3),$28(a0)
000165E4 0C13 0005                  		cmpi.b	#5,(a3)
000165E8 6600                       		bne.s	Obj6B_ChkGone2
000165EA 08E8 0004 0001             		bset	#4,1(a0)
000165F0                            
000165F0                            Obj6B_ChkGone2:
000165F0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000165F4 7000                       		moveq	#0,d0
000165F6 1028 0023                  		move.b	$23(a0),d0
000165FA 6700                       		beq.s	Obj6B_Action
000165FC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016602                            
00016602                            Obj6B_Action:				; XREF: Obj6B_Index
00016602 3F28 0008                  		move.w	8(a0),-(sp)
00016606 7000                       		moveq	#0,d0
00016608 1028 0028                  		move.b	$28(a0),d0
0001660C 0240 000F                  		andi.w	#$F,d0
00016610 D040                       		add.w	d0,d0
00016612 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016616 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
0001661A 381F                       		move.w	(sp)+,d4
0001661C 4A28 0001                  		tst.b	1(a0)
00016620 6A00                       		bpl.s	Obj6B_ChkDel
00016622 7200                       		moveq	#0,d1
00016624 1228 0019                  		move.b	$19(a0),d1
00016628 0641 000B                  		addi.w	#$B,d1
0001662C 7400                       		moveq	#0,d2
0001662E 1428 0016                  		move.b	$16(a0),d2
00016632 3602                       		move.w	d2,d3
00016634 5243                       		addq.w	#1,d3
00016636 6100 9BA0                  		bsr.w	SolidObject
0001663A                            
0001663A                            Obj6B_ChkDel:
0001663A 3028 0034                  		move.w	$34(a0),d0
0001663E 0240 FF80                  		andi.w	#$FF80,d0
00016642 3238 F700                  		move.w	($FFFFF700).w,d1
00016646 0441 0080                  		subi.w	#$80,d1
0001664A 0241 FF80                  		andi.w	#$FF80,d1
0001664E 9041                       		sub.w	d1,d0
00016650 0C40 0280                  		cmpi.w	#$280,d0
00016654 6200                       		bhi.s	loc_15D64
00016656 4EF9 0000 DE08             		jmp	DisplaySprite
0001665C                            ; ===========================================================================
0001665C                            
0001665C                            loc_15D64:
0001665C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016662 6600                       		bne.s	Obj6B_Delete2
00016664 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016668 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001666C 7000                       		moveq	#0,d0
0001666E 1028 0023                  		move.b	$23(a0),d0
00016672 6700                       		beq.s	Obj6B_Delete2
00016674 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001667A                            
0001667A                            Obj6B_Delete2:
0001667A 4EF9 0000 DE44             		jmp	DeleteObject
00016680                            ; ===========================================================================
00016680 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016684 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00016688 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
0001668C                            ; ===========================================================================
0001668C                            
0001668C                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
0001668C 4E75                       		rts	
0001668E                            ; ===========================================================================
0001668E                            
0001668E                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
0001668E 4A28 0038                  		tst.b	$38(a0)
00016692 6600                       		bne.s	loc_15DB4
00016694 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016698 7000                       		moveq	#0,d0
0001669A 1028 003E                  		move.b	$3E(a0),d0
0001669E 0832 0000 0000             		btst	#0,(a2,d0.w)
000166A4 6700                       		beq.s	loc_15DC2
000166A6 117C 0001 0038             		move.b	#1,$38(a0)
000166AC                            
000166AC                            loc_15DB4:
000166AC 3028 003C                  		move.w	$3C(a0),d0
000166B0 B068 003A                  		cmp.w	$3A(a0),d0
000166B4 6700                       		beq.s	loc_15DE0
000166B6 5468 003A                  		addq.w	#2,$3A(a0)
000166BA                            
000166BA                            loc_15DC2:
000166BA 3028 003A                  		move.w	$3A(a0),d0
000166BE 0828 0000 0022             		btst	#0,$22(a0)
000166C4 6700                       		beq.s	loc_15DD4
000166C6 4440                       		neg.w	d0
000166C8 0640 0080                  		addi.w	#$80,d0
000166CC                            
000166CC                            loc_15DD4:
000166CC 3228 0034                  		move.w	$34(a0),d1
000166D0 9240                       		sub.w	d0,d1
000166D2 3141 0008                  		move.w	d1,8(a0)
000166D6 4E75                       		rts	
000166D8                            ; ===========================================================================
000166D8                            
000166D8                            loc_15DE0:
000166D8 5228 0028                  		addq.b	#1,$28(a0)
000166DC 317C 00B4 0036             		move.w	#$B4,$36(a0)
000166E2 4228 0038                  		clr.b	$38(a0)
000166E6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000166EA 7000                       		moveq	#0,d0
000166EC 1028 0023                  		move.b	$23(a0),d0
000166F0 67C8                       		beq.s	loc_15DC2
000166F2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000166F8 60C0                       		bra.s	loc_15DC2
000166FA                            ; ===========================================================================
000166FA                            
000166FA                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000166FA 4A28 0038                  		tst.b	$38(a0)
000166FE 6600                       		bne.s	loc_15E14
00016700 5368 0036                  		subq.w	#1,$36(a0)
00016704 6600                       		bne.s	loc_15E1E
00016706 117C 0001 0038             		move.b	#1,$38(a0)
0001670C                            
0001670C                            loc_15E14:
0001670C 4A68 003A                  		tst.w	$3A(a0)
00016710 6700                       		beq.s	loc_15E3C
00016712 5568 003A                  		subq.w	#2,$3A(a0)
00016716                            
00016716                            loc_15E1E:
00016716 3028 003A                  		move.w	$3A(a0),d0
0001671A 0828 0000 0022             		btst	#0,$22(a0)
00016720 6700                       		beq.s	loc_15E30
00016722 4440                       		neg.w	d0
00016724 0640 0080                  		addi.w	#$80,d0
00016728                            
00016728                            loc_15E30:
00016728 3228 0034                  		move.w	$34(a0),d1
0001672C 9240                       		sub.w	d0,d1
0001672E 3141 0008                  		move.w	d1,8(a0)
00016732 4E75                       		rts	
00016734                            ; ===========================================================================
00016734                            
00016734                            loc_15E3C:
00016734 5328 0028                  		subq.b	#1,$28(a0)
00016738 4228 0038                  		clr.b	$38(a0)
0001673C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016740 7000                       		moveq	#0,d0
00016742 1028 0023                  		move.b	$23(a0),d0
00016746 67CE                       		beq.s	loc_15E1E
00016748 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001674E 60C6                       		bra.s	loc_15E1E
00016750                            ; ===========================================================================
00016750                            
00016750                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016750 4A28 0038                  		tst.b	$38(a0)
00016754 6600                       		bne.s	loc_15E7C
00016756 4A68 003A                  		tst.w	$3A(a0)
0001675A 6700                       		beq.s	loc_15E6A
0001675C 5368 003A                  		subq.w	#1,$3A(a0)
00016760 6000                       		bra.s	loc_15E8E
00016762                            ; ===========================================================================
00016762                            
00016762                            loc_15E6A:
00016762 5368 0036                  		subq.w	#1,$36(a0)
00016766 6A00                       		bpl.s	loc_15E8E
00016768 317C 003C 0036             		move.w	#$3C,$36(a0)
0001676E 117C 0001 0038             		move.b	#1,$38(a0)
00016774                            
00016774                            loc_15E7C:
00016774 5068 003A                  		addq.w	#8,$3A(a0)
00016778 3028 003A                  		move.w	$3A(a0),d0
0001677C B068 003C                  		cmp.w	$3C(a0),d0
00016780 6600                       		bne.s	loc_15E8E
00016782 4228 0038                  		clr.b	$38(a0)
00016786                            
00016786                            loc_15E8E:
00016786 3028 003A                  		move.w	$3A(a0),d0
0001678A 0828 0000 0022             		btst	#0,$22(a0)
00016790 6700                       		beq.s	loc_15EA0
00016792 4440                       		neg.w	d0
00016794 0640 0038                  		addi.w	#$38,d0
00016798                            
00016798                            loc_15EA0:
00016798 3228 0030                  		move.w	$30(a0),d1
0001679C D240                       		add.w	d0,d1
0001679E 3141 000C                  		move.w	d1,$C(a0)
000167A2 4E75                       		rts	
000167A4                            ; ===========================================================================
000167A4                            
000167A4                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000167A4 4A28 0038                  		tst.b	$38(a0)
000167A8 6600                       		bne.s	loc_15ED0
000167AA 4A68 003A                  		tst.w	$3A(a0)
000167AE 6700                       		beq.s	loc_15EBE
000167B0 5168 003A                  		subq.w	#8,$3A(a0)
000167B4 6000                       		bra.s	loc_15EF0
000167B6                            ; ===========================================================================
000167B6                            
000167B6                            loc_15EBE:
000167B6 5368 0036                  		subq.w	#1,$36(a0)
000167BA 6A00                       		bpl.s	loc_15EF0
000167BC 317C 003C 0036             		move.w	#$3C,$36(a0)
000167C2 117C 0001 0038             		move.b	#1,$38(a0)
000167C8                            
000167C8                            loc_15ED0:
000167C8 3028 003A                  		move.w	$3A(a0),d0
000167CC B068 003C                  		cmp.w	$3C(a0),d0
000167D0 6700                       		beq.s	loc_15EE0
000167D2 5068 003A                  		addq.w	#8,$3A(a0)
000167D6 6000                       		bra.s	loc_15EF0
000167D8                            ; ===========================================================================
000167D8                            
000167D8                            loc_15EE0:
000167D8 5368 0036                  		subq.w	#1,$36(a0)
000167DC 6A00                       		bpl.s	loc_15EF0
000167DE 317C 003C 0036             		move.w	#$3C,$36(a0)
000167E4 4228 0038                  		clr.b	$38(a0)
000167E8                            
000167E8                            loc_15EF0:
000167E8 3028 003A                  		move.w	$3A(a0),d0
000167EC 0828 0000 0022             		btst	#0,$22(a0)
000167F2 6700                       		beq.s	loc_15F02
000167F4 4440                       		neg.w	d0
000167F6 0640 0038                  		addi.w	#$38,d0
000167FA                            
000167FA                            loc_15F02:
000167FA 3228 0030                  		move.w	$30(a0),d1
000167FE D240                       		add.w	d0,d1
00016800 3141 000C                  		move.w	d1,$C(a0)
00016804 4E75                       		rts	
00016806                            ; ===========================================================================
00016806                            
00016806                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016806 4A28 0038                  		tst.b	$38(a0)
0001680A 6600                       		bne.s	loc_15F3E
0001680C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016810 7000                       		moveq	#0,d0
00016812 1028 003E                  		move.b	$3E(a0),d0
00016816 0832 0000 0000             		btst	#0,(a2,d0.w)
0001681C 6700                       		beq.s	locret_15F5C
0001681E 117C 0001 0038             		move.b	#1,$38(a0)
00016824 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016828 7000                       		moveq	#0,d0
0001682A 1028 0023                  		move.b	$23(a0),d0
0001682E 6700                       		beq.s	loc_15F3E
00016830 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016836                            
00016836                            loc_15F3E:
00016836 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0001683E 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016846 3168 0008 0034             		move.w	8(a0),$34(a0)
0001684C 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016852 6700                       		beq.s	loc_15F5E
00016854                            
00016854                            locret_15F5C:
00016854 4E75                       		rts	
00016856                            ; ===========================================================================
00016856                            
00016856                            loc_15F5E:
00016856 4228 0028                  		clr.b	$28(a0)
0001685A 4228 0038                  		clr.b	$38(a0)
0001685E 4E75                       		rts	
00016860                            ; ===========================================================================
00016860                            ; ---------------------------------------------------------------------------
00016860                            ; Sprite mappings - stomper and	platforms (SBZ)
00016860                            ; ---------------------------------------------------------------------------
00016860                            Map_obj6B:
00016860                            	include "_maps\obj6B.asm"
00016860                            ; ---------------------------------------------------------------------------
00016860                            ; Sprite mappings - stomper and	platforms (SBZ)
00016860                            ; ---------------------------------------------------------------------------
00016860 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016864 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016868 0000                       		dc.w byte_15FB0-Map_obj6B
0001686A 04                         byte_15F72:	dc.b 4
0001686B F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016870 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016875 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001687A F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
0001687F 08                         byte_15F87:	dc.b 8
00016880 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016885 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001688A E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
0001688F E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016894 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016899 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001689E 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
000168A3 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
000168A8 0E                         byte_15FB0:	dc.b $E
000168A9 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000168AE C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000168B3 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000168B8 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000168BD C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000168C2 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000168C7 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000168CC C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000168D1 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000168D6 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000168DB E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000168E0 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000168E5 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000168EA 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000168F0 00                         		even
000168F0 00                         		even
000168F0                            
000168F0                            ; ===========================================================================
000168F0                            ; ---------------------------------------------------------------------------
000168F0                            ; Object 6C - vanishing	platforms (SBZ)
000168F0                            ; ---------------------------------------------------------------------------
000168F0                            
000168F0                            Obj6C:					; XREF: Obj_Index
000168F0 7000                       		moveq	#0,d0
000168F2 1028 0024                  		move.b	$24(a0),d0
000168F6 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000168FA 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000168FE                            ; ===========================================================================
000168FE 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016900 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016902 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016904 0000                       		dc.w loc_16068-Obj6C_Index
00016906                            ; ===========================================================================
00016906                            
00016906                            Obj6C_Main:				; XREF: Obj6C_Index
00016906 5C28 0024                  		addq.b	#6,$24(a0)
0001690A 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016912 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016918 0028 0004 0001             		ori.b	#4,1(a0)
0001691E 117C 0010 0019             		move.b	#$10,$19(a0)
00016924 117C 0004 0018             		move.b	#4,$18(a0)
0001692A 7000                       		moveq	#0,d0
0001692C 1028 0028                  		move.b	$28(a0),d0	; get object type
00016930 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016934 5240                       		addq.w	#1,d0		; add 1
00016936 EF48                       		lsl.w	#7,d0		; multiply by $80
00016938 3200                       		move.w	d0,d1
0001693A 5340                       		subq.w	#1,d0
0001693C 3140 0030                  		move.w	d0,$30(a0)
00016940 3140 0032                  		move.w	d0,$32(a0)
00016944 7000                       		moveq	#0,d0
00016946 1028 0028                  		move.b	$28(a0),d0	; get object type
0001694A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
0001694E 0641 0080                  		addi.w	#$80,d1
00016952 C0C1                       		mulu.w	d1,d0
00016954 E088                       		lsr.l	#8,d0
00016956 3140 0036                  		move.w	d0,$36(a0)
0001695A 5341                       		subq.w	#1,d1
0001695C 3141 0038                  		move.w	d1,$38(a0)
00016960                            
00016960                            loc_16068:				; XREF: Obj6C_Index
00016960 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016964 9068 0036                  		sub.w	$36(a0),d0
00016968 C068 0038                  		and.w	$38(a0),d0
0001696C 6600                       		bne.s	Obj6C_Animate
0001696E 5928 0024                  		subq.b	#4,$24(a0)
00016972 6000                       		bra.s	Obj6C_Vanish
00016974                            ; ===========================================================================
00016974                            
00016974                            Obj6C_Animate:
00016974 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001697A 4EB9 0000 AEC8             		jsr	AnimateSprite
00016980 6000 952E                  		bra.w	MarkObjGone
00016984                            ; ===========================================================================
00016984                            
00016984                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016984 5368 0030                  		subq.w	#1,$30(a0)
00016988 6A00                       		bpl.s	loc_160AA
0001698A 317C 007F 0030             		move.w	#127,$30(a0)
00016990 4A28 001C                  		tst.b	$1C(a0)
00016994 6700                       		beq.s	loc_160A4
00016996 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001699C                            
0001699C                            loc_160A4:
0001699C 0868 0000 001C             		bchg	#0,$1C(a0)
000169A2                            
000169A2                            loc_160AA:
000169A2 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000169A8 4EB9 0000 AEC8             		jsr	AnimateSprite
000169AE 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000169B4 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000169B6 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000169BC 6600                       		bne.s	loc_160D6
000169BE 7200                       		moveq	#0,d1
000169C0 1228 0019                  		move.b	$19(a0),d1
000169C4 4EB9 0000 7A88             		jsr	(PlatformObject).l
000169CA 6000 94E4                  		bra.w	MarkObjGone
000169CE                            ; ===========================================================================
000169CE                            
000169CE                            loc_160D6:
000169CE 7200                       		moveq	#0,d1
000169D0 1228 0019                  		move.b	$19(a0),d1
000169D4 4EB9 0000 7BFC             		jsr	(ExitPlatform).l
000169DA 3428 0008                  		move.w	8(a0),d2
000169DE 4EB9 0000 8166             		jsr	(MvSonicOnPtfm2).l
000169E4 6000 94CA                  		bra.w	MarkObjGone
000169E8                            ; ===========================================================================
000169E8                            
000169E8                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000169E8 0828 0003 0022             		btst	#3,$22(a0)
000169EE 6700                       		beq.s	Obj6C_Display
000169F0 43F8 D000                  		lea	($FFFFD000).w,a1
000169F4 08A9 0003 0022             		bclr	#3,$22(a1)
000169FA 08A8 0003 0022             		bclr	#3,$22(a0)
00016A00 117C 0002 0024             		move.b	#2,$24(a0)
00016A06 4228 0025                  		clr.b	$25(a0)
00016A0A                            
00016A0A                            Obj6C_Display:
00016A0A 6000 94A4                  		bra.w	MarkObjGone
00016A0E                            ; ===========================================================================
00016A0E                            Ani_obj6C:
00016A0E                            	include "_anim\obj6C.asm"
00016A0E                            ; ---------------------------------------------------------------------------
00016A0E                            ; Animation script - vanishing platforms (SBZ)
00016A0E                            ; ---------------------------------------------------------------------------
00016A0E 0000                       		dc.w byte_1611A-Ani_obj6C
00016A10 0000                       		dc.w byte_16122-Ani_obj6C
00016A12 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016A1A 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016A22                            		even
00016A22                            		even
00016A22                            
00016A22                            ; ---------------------------------------------------------------------------
00016A22                            ; Sprite mappings - vanishing platforms	(SBZ)
00016A22                            ; ---------------------------------------------------------------------------
00016A22                            Map_obj6C:
00016A22                            	include "_maps\obj6C.asm"
00016A22                            ; ---------------------------------------------------------------------------
00016A22                            ; Sprite mappings - vanishing platforms	(SBZ)
00016A22                            ; ---------------------------------------------------------------------------
00016A22 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016A26 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016A2A 01                         byte_16132:	dc.b 1
00016A2B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016A30 01                         byte_16138:	dc.b 1
00016A31 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016A36 01                         byte_1613E:	dc.b 1
00016A37 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016A3C 00                         byte_16144:	dc.b 0
00016A3E 00                         		even
00016A3E 00                         		even
00016A3E                            
00016A3E                            ; ===========================================================================
00016A3E                            ; ---------------------------------------------------------------------------
00016A3E                            ; Object 6E - electrocution orbs (SBZ)
00016A3E                            ; ---------------------------------------------------------------------------
00016A3E                            
00016A3E                            Obj6E:					; XREF: Obj_Index
00016A3E 7000                       		moveq	#0,d0
00016A40 1028 0024                  		move.b	$24(a0),d0
00016A44 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016A48 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016A4C                            ; ===========================================================================
00016A4C 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016A4E 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016A50                            ; ===========================================================================
00016A50                            
00016A50                            Obj6E_Main:				; XREF: Obj6E_Index
00016A50 5428 0024                  		addq.b	#2,$24(a0)
00016A54 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016A5C 317C 047E 0002             		move.w	#$47E,2(a0)
00016A62 0028 0004 0001             		ori.b	#4,1(a0)
00016A68 117C 0028 0019             		move.b	#$28,$19(a0)
00016A6E 7000                       		moveq	#0,d0
00016A70 1028 0028                  		move.b	$28(a0),d0	; read object type
00016A74 E948                       		lsl.w	#4,d0		; multiply by $10
00016A76 5340                       		subq.w	#1,d0
00016A78 3140 0034                  		move.w	d0,$34(a0)
00016A7C                            
00016A7C                            Obj6E_Shock:				; XREF: Obj6E_Index
00016A7C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016A80 C068 0034                  		and.w	$34(a0),d0
00016A84 6600                       		bne.s	Obj6E_Animate
00016A86 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016A8C 4A28 0001                  		tst.b	1(a0)
00016A90 6A00                       		bpl.s	Obj6E_Animate
00016A92 303C 00B1                  		move.w	#$B1,d0
00016A96 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play electricity sound
00016A9C                            
00016A9C                            Obj6E_Animate:
00016A9C 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016AA2 4EB9 0000 AEC8             		jsr	AnimateSprite
00016AA8 117C 0000 0020             		move.b	#0,$20(a0)
00016AAE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016AB4 6600                       		bne.s	Obj6E_Display	; if not, branch
00016AB6 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016ABC                            
00016ABC                            Obj6E_Display:
00016ABC 6000 93F2                  		bra.w	MarkObjGone
00016AC0                            ; ===========================================================================
00016AC0                            Ani_obj6E:
00016AC0                            	include "_anim\obj6E.asm"
00016AC0                            ; ---------------------------------------------------------------------------
00016AC0                            ; Animation script - electrocution orbs (SBZ)
00016AC0                            ; ---------------------------------------------------------------------------
00016AC0 0000                       		dc.w byte_161CC-Ani_obj6E
00016AC2 0000                       		dc.w byte_161D0-Ani_obj6E
00016AC4 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016AC8 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016AD8                            		even
00016AD8                            		even
00016AD8                            
00016AD8                            ; ---------------------------------------------------------------------------
00016AD8                            ; Sprite mappings - electrocution orbs (SBZ)
00016AD8                            ; ---------------------------------------------------------------------------
00016AD8                            Map_obj6E:
00016AD8                            	include "_maps\obj6E.asm"
00016AD8                            Map_26ed:
00016AD8 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016ADA 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016ADC 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016ADE 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016AE0 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016AE2 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016AE4 01                         Map_26ed_C: 	dc.b $1
00016AE5 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016AEA 02                         Map_26ed_12: 	dc.b $2
00016AEB F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016AF0 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016AF5 06                         Map_26ed_1D: 	dc.b $6
00016AF6 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016AFB 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B00 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016B05 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016B0A F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016B0F F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016B14 08                         Map_26ed_3C: 	dc.b $8
00016B15 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B1A 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B1F F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016B24 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016B29 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016B2E F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016B33 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016B38 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016B3D 06                         Map_26ed_65: 	dc.b $6
00016B3E F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B43 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B48 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016B4D F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016B52 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016B57 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016B5C 04                         Map_26ed_84: 	dc.b $4
00016B5D F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B62 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B67 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016B6C F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016B72 00                         	even
00016B72 00                         	even
00016B72                            
00016B72                            ; ===========================================================================
00016B72                            ; ---------------------------------------------------------------------------
00016B72                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016B72                            ; ---------------------------------------------------------------------------
00016B72                            
00016B72                            Obj6F:					; XREF: Obj_Index
00016B72 7000                       		moveq	#0,d0
00016B74 1028 0024                  		move.b	$24(a0),d0
00016B78 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016B7C 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016B80 3028 0030                  		move.w	$30(a0),d0
00016B84 0240 FF80                  		andi.w	#$FF80,d0
00016B88 3238 F700                  		move.w	($FFFFF700).w,d1
00016B8C 0441 0080                  		subi.w	#$80,d1
00016B90 0241 FF80                  		andi.w	#$FF80,d1
00016B94 9041                       		sub.w	d1,d0
00016B96 0C40 0280                  		cmpi.w	#$280,d0
00016B9A 6200                       		bhi.s	loc_1629A
00016B9C                            
00016B9C                            Obj6F_Display:
00016B9C 4EF9 0000 DE08             		jmp	DisplaySprite
00016BA2                            ; ===========================================================================
00016BA2                            
00016BA2                            loc_1629A:
00016BA2 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016BA8 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016BAA 0C40 FF80                  		cmpi.w	#-$80,d0
00016BAE 64EC                       		bcc.s	Obj6F_Display
00016BB0                            
00016BB0                            Obj6F_Act1or2:
00016BB0 1028 002F                  		move.b	$2F(a0),d0
00016BB4 6A00                       		bpl.s	Obj6F_Delete
00016BB6 0240 007F                  		andi.w	#$7F,d0
00016BBA 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016BBE 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016BC4                            
00016BC4                            Obj6F_Delete:
00016BC4 4EF9 0000 DE44             		jmp	DeleteObject
00016BCA                            ; ===========================================================================
00016BCA 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016BCC 0000                       		dc.w loc_163D8-Obj6F_Index
00016BCE                            ; ===========================================================================
00016BCE                            
00016BCE                            Obj6F_Main:				; XREF: Obj6F_Index
00016BCE 1028 0028                  		move.b	$28(a0),d0
00016BD2 6B00 0000                  		bmi.w	loc_16380
00016BD6 5428 0024                  		addq.b	#2,$24(a0)
00016BDA 217C 0001 6232 0004        		move.l	#Map_obj69a,4(a0)
00016BE2 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016BE8 117C 0010 0019             		move.b	#$10,$19(a0)
00016BEE 0028 0004 0001             		ori.b	#4,1(a0)
00016BF4 117C 0004 0018             		move.b	#4,$18(a0)
00016BFA 7000                       		moveq	#0,d0
00016BFC 1028 0028                  		move.b	$28(a0),d0
00016C00 3200                       		move.w	d0,d1
00016C02 E648                       		lsr.w	#3,d0
00016C04 0240 001E                  		andi.w	#$1E,d0
00016C08 45FA 0000                  		lea	off_164A6(pc),a2
00016C0C D4F2 0000                  		adda.w	(a2,d0.w),a2
00016C10 315A 0038                  		move.w	(a2)+,$38(a0)
00016C14 315A 0030                  		move.w	(a2)+,$30(a0)
00016C18 214A 003C                  		move.l	a2,$3C(a0)
00016C1C 0241 000F                  		andi.w	#$F,d1
00016C20 E549                       		lsl.w	#2,d1
00016C22 1141 0038                  		move.b	d1,$38(a0)
00016C26 117C 0004 003A             		move.b	#4,$3A(a0)
00016C2C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016C30 6700                       		beq.s	loc_16356
00016C32 117C 0001 003B             		move.b	#1,$3B(a0)
00016C38 4428 003A                  		neg.b	$3A(a0)
00016C3C 7200                       		moveq	#0,d1
00016C3E 1228 0038                  		move.b	$38(a0),d1
00016C42 D228 003A                  		add.b	$3A(a0),d1
00016C46 B228 0039                  		cmp.b	$39(a0),d1
00016C4A 6500                       		bcs.s	loc_16352
00016C4C 1001                       		move.b	d1,d0
00016C4E 7200                       		moveq	#0,d1
00016C50 4A00                       		tst.b	d0
00016C52 6A00                       		bpl.s	loc_16352
00016C54 1228 0039                  		move.b	$39(a0),d1
00016C58 5901                       		subq.b	#4,d1
00016C5A                            
00016C5A                            loc_16352:
00016C5A 1141 0038                  		move.b	d1,$38(a0)
00016C5E                            
00016C5E                            loc_16356:
00016C5E 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016C64 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016C6A 4A41                       		tst.w	d1
00016C6C 6600                       		bne.s	loc_1636C
00016C6E 117C 0001 001C             		move.b	#1,$1C(a0)
00016C74                            
00016C74                            loc_1636C:
00016C74 0C41 0008                  		cmpi.w	#8,d1
00016C78 6600                       		bne.s	loc_16378
00016C7A 117C 0000 001C             		move.b	#0,$1C(a0)
00016C80                            
00016C80                            loc_16378:
00016C80 6100 C0C6                  		bsr.w	Obj63_ChangeDir
00016C84 6000 0000                  		bra.w	loc_163D8
00016C88                            ; ===========================================================================
00016C88                            
00016C88                            loc_16380:				; XREF: Obj6F_Main
00016C88 1140 002F                  		move.b	d0,$2F(a0)
00016C8C 0240 007F                  		andi.w	#$7F,d0
00016C90 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016C94 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016C9A 6700                       		beq.s	loc_1639A
00016C9C 4EF9 0000 DE44             		jmp	DeleteObject
00016CA2                            ; ===========================================================================
00016CA2                            
00016CA2                            loc_1639A:
00016CA2 D040                       		add.w	d0,d0
00016CA4 0240 001E                  		andi.w	#$1E,d0
00016CA8 0640 0080                  		addi.w	#$80,d0
00016CAC 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016CB2 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016CB6 321A                       		move.w	(a2)+,d1
00016CB8 2248                       		movea.l	a0,a1
00016CBA 6000                       		bra.s	Obj6F_LoadPform
00016CBC                            ; ===========================================================================
00016CBC                            
00016CBC                            Obj6F_Loop:
00016CBC 4EB9 0000 E28E             		jsr	SingleObjLoad
00016CC2 6600                       		bne.s	loc_163D0
00016CC4                            
00016CC4                            Obj6F_LoadPform:			; XREF: loc_1639A
00016CC4 12BC 006F                  		move.b	#$6F,0(a1)
00016CC8 335A 0008                  		move.w	(a2)+,8(a1)
00016CCC 335A 000C                  		move.w	(a2)+,$C(a1)
00016CD0 301A                       		move.w	(a2)+,d0
00016CD2 1340 0028                  		move.b	d0,$28(a1)
00016CD6                            
00016CD6                            loc_163D0:
00016CD6 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016CDA                            
00016CDA 588F                       		addq.l	#4,sp
00016CDC 4E75                       		rts	
00016CDE                            ; ===========================================================================
00016CDE                            
00016CDE                            loc_163D8:				; XREF: Obj6F_Index
00016CDE 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016CE4 4EB9 0000 AEC8             		jsr	AnimateSprite
00016CEA 4A28 001A                  		tst.b	$1A(a0)
00016CEE 6600                       		bne.s	loc_16404
00016CF0 3F28 0008                  		move.w	8(a0),-(sp)
00016CF4 6100 0000                  		bsr.w	loc_16424
00016CF8 323C 001B                  		move.w	#$1B,d1
00016CFC 343C 0007                  		move.w	#7,d2
00016D00 3602                       		move.w	d2,d3
00016D02 5243                       		addq.w	#1,d3
00016D04 381F                       		move.w	(sp)+,d4
00016D06 6000 94D0                  		bra.w	SolidObject
00016D0A                            ; ===========================================================================
00016D0A                            
00016D0A                            loc_16404:
00016D0A 0828 0003 0022             		btst	#3,$22(a0)
00016D10 6700                       		beq.s	loc_16420
00016D12 43F8 D000                  		lea	($FFFFD000).w,a1
00016D16 08A9 0003 0022             		bclr	#3,$22(a1)
00016D1C 08A8 0003 0022             		bclr	#3,$22(a0)
00016D22 4228 0025                  		clr.b	$25(a0)
00016D26                            
00016D26                            loc_16420:
00016D26 6000 0002                  		bra.w	*+4
00016D2A                            
00016D2A                            loc_16424:
00016D2A 3028 0008                  		move.w	8(a0),d0
00016D2E B068 0034                  		cmp.w	$34(a0),d0
00016D32 6600                       		bne.s	loc_16484
00016D34 3028 000C                  		move.w	$C(a0),d0
00016D38 B068 0036                  		cmp.w	$36(a0),d0
00016D3C 6600                       		bne.s	loc_16484
00016D3E 7200                       		moveq	#0,d1
00016D40 1228 0038                  		move.b	$38(a0),d1
00016D44 D228 003A                  		add.b	$3A(a0),d1
00016D48 B228 0039                  		cmp.b	$39(a0),d1
00016D4C 6500                       		bcs.s	loc_16456
00016D4E 1001                       		move.b	d1,d0
00016D50 7200                       		moveq	#0,d1
00016D52 4A00                       		tst.b	d0
00016D54 6A00                       		bpl.s	loc_16456
00016D56 1228 0039                  		move.b	$39(a0),d1
00016D5A 5901                       		subq.b	#4,d1
00016D5C                            
00016D5C                            loc_16456:
00016D5C 1141 0038                  		move.b	d1,$38(a0)
00016D60 2268 003C                  		movea.l	$3C(a0),a1
00016D64 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016D6A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016D70 4A41                       		tst.w	d1
00016D72 6600                       		bne.s	loc_16474
00016D74 117C 0001 001C             		move.b	#1,$1C(a0)
00016D7A                            
00016D7A                            loc_16474:
00016D7A 0C41 0008                  		cmpi.w	#8,d1
00016D7E 6600                       		bne.s	loc_16480
00016D80 117C 0000 001C             		move.b	#0,$1C(a0)
00016D86                            
00016D86                            loc_16480:
00016D86 6100 BFC0                  		bsr.w	Obj63_ChangeDir
00016D8A                            
00016D8A                            loc_16484:
00016D8A 4EF9 0000 DDE2             		jmp	SpeedToPos
00016D90                            ; ===========================================================================
00016D90                            Ani_obj6F:
00016D90                            	include "_anim\obj6F.asm"
00016D90                            ; ---------------------------------------------------------------------------
00016D90                            ; Animation script - platform on conveyor belt (SBZ)
00016D90                            ; ---------------------------------------------------------------------------
00016D90 0000                       		dc.w byte_1648E-Ani_obj6F
00016D92 0000                       		dc.w byte_164A2-Ani_obj6F
00016D94 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016DA1 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016DA8 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016DAC 00                         		even
00016DAC 00                         		even
00016DAC                            
00016DAC 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016DB2 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016DB8 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016DCC 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016DE0 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016DF4 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016E08 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016E1C 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016E30                            ; ===========================================================================
00016E30                            ; ---------------------------------------------------------------------------
00016E30                            ; Object 70 - large girder block (SBZ)
00016E30                            ; ---------------------------------------------------------------------------
00016E30                            
00016E30                            Obj70:					; XREF: Obj_Index
00016E30 7000                       		moveq	#0,d0
00016E32 1028 0024                  		move.b	$24(a0),d0
00016E36 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016E3A 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016E3E                            ; ===========================================================================
00016E3E 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016E40 0000                       		dc.w Obj70_Action-Obj70_Index
00016E42                            ; ===========================================================================
00016E42                            
00016E42                            Obj70_Main:				; XREF: Obj70_Index
00016E42 5428 0024                  		addq.b	#2,$24(a0)
00016E46 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016E4E 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016E54 0028 0004 0001             		ori.b	#4,1(a0)
00016E5A 117C 0004 0018             		move.b	#4,$18(a0)
00016E60 117C 0060 0019             		move.b	#$60,$19(a0)
00016E66 117C 0018 0016             		move.b	#$18,$16(a0)
00016E6C 3168 0008 0032             		move.w	8(a0),$32(a0)
00016E72 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016E78 6100 0000                  		bsr.w	Obj70_Move2
00016E7C                            
00016E7C                            Obj70_Action:				; XREF: Obj70_Index
00016E7C 3F28 0008                  		move.w	8(a0),-(sp)
00016E80 4A68 003A                  		tst.w	$3A(a0)
00016E84 6700                       		beq.s	Obj70_Move
00016E86 5368 003A                  		subq.w	#1,$3A(a0)
00016E8A 6600                       		bne.s	Obj70_Solid
00016E8C                            
00016E8C                            Obj70_Move:
00016E8C 4EB9 0000 DDE2             		jsr	SpeedToPos
00016E92 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016E96 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016E98 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016E9C                            
00016E9C                            Obj70_Solid:
00016E9C 381F                       		move.w	(sp)+,d4
00016E9E 4A28 0001                  		tst.b	1(a0)
00016EA2 6A00                       		bpl.s	Obj70_ChkDel
00016EA4 7200                       		moveq	#0,d1
00016EA6 1228 0019                  		move.b	$19(a0),d1
00016EAA 0641 000B                  		addi.w	#$B,d1
00016EAE 7400                       		moveq	#0,d2
00016EB0 1428 0016                  		move.b	$16(a0),d2
00016EB4 3602                       		move.w	d2,d3
00016EB6 5243                       		addq.w	#1,d3
00016EB8 6100 931E                  		bsr.w	SolidObject
00016EBC                            
00016EBC                            Obj70_ChkDel:
00016EBC 3028 0032                  		move.w	$32(a0),d0
00016EC0 0240 FF80                  		andi.w	#$FF80,d0
00016EC4 3238 F700                  		move.w	($FFFFF700).w,d1
00016EC8 0441 0080                  		subi.w	#$80,d1
00016ECC 0241 FF80                  		andi.w	#$FF80,d1
00016ED0 9041                       		sub.w	d1,d0
00016ED2 0C40 0280                  		cmpi.w	#$280,d0
00016ED6 6200                       		bhi.s	Obj70_Delete
00016ED8 4EF9 0000 DE08             		jmp	DisplaySprite
00016EDE                            ; ===========================================================================
00016EDE                            
00016EDE                            Obj70_Delete:
00016EDE 4EF9 0000 DE44             		jmp	DeleteObject
00016EE4                            ; ===========================================================================
00016EE4                            
00016EE4                            Obj70_Move2:				; XREF: Obj70_Main
00016EE4 1028 0038                  		move.b	$38(a0),d0
00016EE8 0240 0018                  		andi.w	#$18,d0
00016EEC 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016EF2 43F1 0000                  		lea	(a1,d0.w),a1
00016EF6 3159 0010                  		move.w	(a1)+,$10(a0)
00016EFA 3159 0012                  		move.w	(a1)+,$12(a0)
00016EFE 3159 0034                  		move.w	(a1)+,$34(a0)
00016F02 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016F06 317C 0007 003A             		move.w	#7,$3A(a0)
00016F0C 4E75                       		rts	
00016F0E                            ; ===========================================================================
00016F0E 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016F16 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016F1E FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016F26 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016F2E                            ; ---------------------------------------------------------------------------
00016F2E                            ; Sprite mappings - large girder block (SBZ)
00016F2E                            ; ---------------------------------------------------------------------------
00016F2E                            Map_obj70:
00016F2E                            	include "_maps\obj70.asm"
00016F2E                            ; ---------------------------------------------------------------------------
00016F2E                            ; Sprite mappings - large girder block (SBZ)
00016F2E                            ; ---------------------------------------------------------------------------
00016F2E 0000                       		dc.w byte_1662A-Map_obj70
00016F30 0C                         byte_1662A:	dc.b $C
00016F31 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016F36 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016F3B E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016F40 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016F45 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016F4A 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016F4F E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016F54 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016F59 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016F5E 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016F63 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016F68 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016F6E 00                         		even
00016F6E 00                         		even
00016F6E                            
00016F6E                            ; ===========================================================================
00016F6E                            ; ---------------------------------------------------------------------------
00016F6E                            ; Object 72 - teleporter (SBZ)
00016F6E                            ; ---------------------------------------------------------------------------
00016F6E                            
00016F6E                            Obj72:					; XREF: Obj_Index
00016F6E 7000                       		moveq	#0,d0
00016F70 1028 0024                  		move.b	$24(a0),d0
00016F74 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016F78 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016F7C 3028 0008                  		move.w	8(a0),d0
00016F80 0240 FF80                  		andi.w	#$FF80,d0
00016F84 3238 F700                  		move.w	($FFFFF700).w,d1
00016F88 0441 0080                  		subi.w	#$80,d1
00016F8C 0241 FF80                  		andi.w	#$FF80,d1
00016F90 9041                       		sub.w	d1,d0
00016F92 0C40 0280                  		cmpi.w	#$280,d0
00016F96 6200                       		bhi.s	Obj72_Delete
00016F98 4E75                       		rts	
00016F9A                            ; ===========================================================================
00016F9A                            
00016F9A                            Obj72_Delete:
00016F9A 4EF9 0000 DE44             		jmp	DeleteObject
00016FA0                            ; ===========================================================================
00016FA0 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016FA2 0000                       		dc.w loc_166C8-Obj72_Index
00016FA4 0000                       		dc.w loc_1675E-Obj72_Index
00016FA6 0000                       		dc.w loc_16798-Obj72_Index
00016FA8                            ; ===========================================================================
00016FA8                            
00016FA8                            Obj72_Main:				; XREF: Obj72_Index
00016FA8 5428 0024                  		addq.b	#2,$24(a0)
00016FAC 1028 0028                  		move.b	$28(a0),d0
00016FB0 D040                       		add.w	d0,d0
00016FB2 0240 001E                  		andi.w	#$1E,d0
00016FB6 45FA 0000                  		lea	Obj72_Data(pc),a2
00016FBA D4F2 0000                  		adda.w	(a2,d0.w),a2
00016FBE 315A 003A                  		move.w	(a2)+,$3A(a0)
00016FC2 214A 003C                  		move.l	a2,$3C(a0)
00016FC6 315A 0036                  		move.w	(a2)+,$36(a0)
00016FCA 315A 0038                  		move.w	(a2)+,$38(a0)
00016FCE                            
00016FCE                            loc_166C8:				; XREF: Obj72_Index
00016FCE 43F8 D000                  		lea	($FFFFD000).w,a1
00016FD2 3029 0008                  		move.w	8(a1),d0
00016FD6 9068 0008                  		sub.w	8(a0),d0
00016FDA 0828 0000 0022             		btst	#0,$22(a0)
00016FE0 6700                       		beq.s	loc_166E0
00016FE2 0640 000F                  		addi.w	#$F,d0
00016FE6                            
00016FE6                            loc_166E0:
00016FE6 0C40 0010                  		cmpi.w	#$10,d0
00016FEA 6400                       		bcc.s	locret_1675C
00016FEC 3229 000C                  		move.w	$C(a1),d1
00016FF0 9268 000C                  		sub.w	$C(a0),d1
00016FF4 0641 0020                  		addi.w	#$20,d1
00016FF8 0C41 0040                  		cmpi.w	#$40,d1
00016FFC 6400                       		bcc.s	locret_1675C
00016FFE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017002 6600                       		bne.s	locret_1675C
00017004 0C28 0007 0028             		cmpi.b	#7,$28(a0)
0001700A 6600                       		bne.s	loc_1670E
0001700C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00017012 6500                       		bcs.s	locret_1675C
00017014                            
00017014                            loc_1670E:
00017014 5428 0024                  		addq.b	#2,$24(a0)
00017018 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001701E 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00017024 337C 0800 0014             		move.w	#$800,$14(a1)
0001702A 337C 0000 0010             		move.w	#0,$10(a1)
00017030 337C 0000 0012             		move.w	#0,$12(a1)
00017036 08A8 0005 0022             		bclr	#5,$22(a0)
0001703C 08A9 0005 0022             		bclr	#5,$22(a1)
00017042 08E9 0001 0022             		bset	#1,$22(a1)
00017048 3368 0008 0008             		move.w	8(a0),8(a1)
0001704E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017054 4228 0032                  		clr.b	$32(a0)
00017058 303C 00BE                  		move.w	#$BE,d0
0001705C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00017062                            
00017062                            locret_1675C:
00017062 4E75                       		rts	
00017064                            ; ===========================================================================
00017064                            
00017064                            loc_1675E:				; XREF: Obj72_Index
00017064 43F8 D000                  		lea	($FFFFD000).w,a1
00017068 1028 0032                  		move.b	$32(a0),d0
0001706C 5428 0032                  		addq.b	#2,$32(a0)
00017070 4EB9 0000 2CEC             		jsr	(CalcSine).l
00017076 EA40                       		asr.w	#5,d0
00017078 3428 000C                  		move.w	$C(a0),d2
0001707C 9440                       		sub.w	d0,d2
0001707E 3342 000C                  		move.w	d2,$C(a1)
00017082 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00017088 6600                       		bne.s	locret_16796
0001708A 6100 0000                  		bsr.w	sub_1681C
0001708E 5428 0024                  		addq.b	#2,$24(a0)
00017092 303C 00BC                  		move.w	#$BC,d0
00017096 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play teleport sound
0001709C                            
0001709C                            locret_16796:
0001709C 4E75                       		rts	
0001709E                            ; ===========================================================================
0001709E                            
0001709E                            loc_16798:				; XREF: Obj72_Index
0001709E 588F                       		addq.l	#4,sp
000170A0 43F8 D000                  		lea	($FFFFD000).w,a1
000170A4 5328 002E                  		subq.b	#1,$2E(a0)
000170A8 6A00                       		bpl.s	loc_167DA
000170AA 3368 0036 0008             		move.w	$36(a0),8(a1)
000170B0 3368 0038 000C             		move.w	$38(a0),$C(a1)
000170B6 7200                       		moveq	#0,d1
000170B8 1228 003A                  		move.b	$3A(a0),d1
000170BC 5801                       		addq.b	#4,d1
000170BE B228 003B                  		cmp.b	$3B(a0),d1
000170C2 6500                       		bcs.s	loc_167C2
000170C4 7200                       		moveq	#0,d1
000170C6 6000                       		bra.s	loc_16800
000170C8                            ; ===========================================================================
000170C8                            
000170C8                            loc_167C2:
000170C8 1141 003A                  		move.b	d1,$3A(a0)
000170CC 2468 003C                  		movea.l	$3C(a0),a2
000170D0 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000170D6 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000170DC 6000 0000                  		bra.w	sub_1681C
000170E0                            ; ===========================================================================
000170E0                            
000170E0                            loc_167DA:
000170E0 2429 0008                  		move.l	8(a1),d2
000170E4 2629 000C                  		move.l	$C(a1),d3
000170E8 3029 0010                  		move.w	$10(a1),d0
000170EC 48C0                       		ext.l	d0
000170EE E180                       		asl.l	#8,d0
000170F0 D480                       		add.l	d0,d2
000170F2 3029 0012                  		move.w	$12(a1),d0
000170F6 48C0                       		ext.l	d0
000170F8 E180                       		asl.l	#8,d0
000170FA D680                       		add.l	d0,d3
000170FC 2342 0008                  		move.l	d2,8(a1)
00017100 2343 000C                  		move.l	d3,$C(a1)
00017104 4E75                       		rts	
00017106                            ; ===========================================================================
00017106                            
00017106                            loc_16800:
00017106 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
0001710C 4228 0024                  		clr.b	$24(a0)
00017110 4238 F7C8                  		clr.b	($FFFFF7C8).w
00017114 337C 0000 0010             		move.w	#0,$10(a1)
0001711A 337C 0200 0012             		move.w	#$200,$12(a1)
00017120 4E75                       		rts	
00017122                            
00017122                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017122                            
00017122                            
00017122                            sub_1681C:
00017122 7000                       		moveq	#0,d0
00017124 343C 1000                  		move.w	#$1000,d2
00017128 3028 0036                  		move.w	$36(a0),d0
0001712C 9069 0008                  		sub.w	8(a1),d0
00017130 6C00                       		bge.s	loc_16830
00017132 4440                       		neg.w	d0
00017134 4442                       		neg.w	d2
00017136                            
00017136                            loc_16830:
00017136 7200                       		moveq	#0,d1
00017138 363C 1000                  		move.w	#$1000,d3
0001713C 3228 0038                  		move.w	$38(a0),d1
00017140 9269 000C                  		sub.w	$C(a1),d1
00017144 6C00                       		bge.s	loc_16844
00017146 4441                       		neg.w	d1
00017148 4443                       		neg.w	d3
0001714A                            
0001714A                            loc_16844:
0001714A B240                       		cmp.w	d0,d1
0001714C 6500                       		bcs.s	loc_1687A
0001714E 7200                       		moveq	#0,d1
00017150 3228 0038                  		move.w	$38(a0),d1
00017154 9269 000C                  		sub.w	$C(a1),d1
00017158 4841                       		swap	d1
0001715A 83C3                       		divs.w	d3,d1
0001715C 7000                       		moveq	#0,d0
0001715E 3028 0036                  		move.w	$36(a0),d0
00017162 9069 0008                  		sub.w	8(a1),d0
00017166 6700                       		beq.s	loc_16866
00017168 4840                       		swap	d0
0001716A 81C1                       		divs.w	d1,d0
0001716C                            
0001716C                            loc_16866:
0001716C 3340 0010                  		move.w	d0,$10(a1)
00017170 3343 0012                  		move.w	d3,$12(a1)
00017174 4A41                       		tst.w	d1
00017176 6A00                       		bpl.s	loc_16874
00017178 4441                       		neg.w	d1
0001717A                            
0001717A                            loc_16874:
0001717A 3141 002E                  		move.w	d1,$2E(a0)
0001717E 4E75                       		rts	
00017180                            ; ===========================================================================
00017180                            
00017180                            loc_1687A:
00017180 7000                       		moveq	#0,d0
00017182 3028 0036                  		move.w	$36(a0),d0
00017186 9069 0008                  		sub.w	8(a1),d0
0001718A 4840                       		swap	d0
0001718C 81C2                       		divs.w	d2,d0
0001718E 7200                       		moveq	#0,d1
00017190 3228 0038                  		move.w	$38(a0),d1
00017194 9269 000C                  		sub.w	$C(a1),d1
00017198 6700                       		beq.s	loc_16898
0001719A 4841                       		swap	d1
0001719C 83C0                       		divs.w	d0,d1
0001719E                            
0001719E                            loc_16898:
0001719E 3341 0012                  		move.w	d1,$12(a1)
000171A2 3342 0010                  		move.w	d2,$10(a1)
000171A6 4A40                       		tst.w	d0
000171A8 6A00                       		bpl.s	loc_168A6
000171AA 4440                       		neg.w	d0
000171AC                            
000171AC                            loc_168A6:
000171AC 3140 002E                  		move.w	d0,$2E(a0)
000171B0 4E75                       		rts	
000171B2                            ; End of function sub_1681C
000171B2                            
000171B2                            ; ===========================================================================
000171B2 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000171B8 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000171BE 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000171C2 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
000171C8 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000171CE 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000171D4 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000171DA 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000171E0 0884 0298 0894             		dc.w $884, $298, $894
000171E6 0270 0894 0190             		dc.w $270, $894, $190
000171EC 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000171F2 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000171F8 1184 0498 1158             		dc.w $1184, $498, $1158
000171FE 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00017204 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001720A 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017210 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017216 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
0001721C 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017222 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017228 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001722E FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00017234 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
0001723A                            ; ===========================================================================
0001723A                            ; ---------------------------------------------------------------------------
0001723A                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001723A                            ; ---------------------------------------------------------------------------
0001723A                            
0001723A                            Obj78:					; XREF: Obj_Index
0001723A 7000                       		moveq	#0,d0
0001723C 1028 0024                  		move.b	$24(a0),d0
00017240 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00017244 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00017248                            ; ===========================================================================
00017248 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
0001724A 0000                       		dc.w Obj78_Action-Obj78_Index
0001724C 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001724E 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017250 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017252 0000                       		dc.w Obj78_Delete-Obj78_Index
00017254 0000                       		dc.w loc_16CC0-Obj78_Index
00017256                            ; ===========================================================================
00017256                            
00017256                            locret_16950:
00017256 4E75                       		rts	
00017258                            ; ===========================================================================
00017258                            
00017258                            Obj78_Main:				; XREF: Obj78_Index
00017258 117C 0007 0016             		move.b	#7,$16(a0)
0001725E 117C 0008 0017             		move.b	#8,$17(a0)
00017264 4EB9 0000 DDB6             		jsr	ObjectFall
0001726A 4EBA E4A6                  		jsr	ObjHitFloor
0001726E 4A41                       		tst.w	d1
00017270 6AE4                       		bpl.s	locret_16950
00017272 D368 000C                  		add.w	d1,$C(a0)
00017276 4268 0012                  		clr.w	$12(a0)
0001727A 5428 0024                  		addq.b	#2,$24(a0)
0001727E 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00017286 317C 22B0 0002             		move.w	#$22B0,2(a0)
0001728C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00017292 6700                       		beq.s	loc_16996
00017294 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
0001729A                            
0001729A                            loc_16996:
0001729A 0228 0003 0001             		andi.b	#3,1(a0)
000172A0 0028 0004 0001             		ori.b	#4,1(a0)
000172A6 1168 0001 0022             		move.b	1(a0),$22(a0)
000172AC 117C 0004 0018             		move.b	#4,$18(a0)
000172B2 117C 0008 0019             		move.b	#8,$19(a0)
000172B8 117C 000B 0020             		move.b	#$B,$20(a0)
000172BE 3428 0008                  		move.w	8(a0),d2
000172C2 7A0C                       		moveq	#$C,d5
000172C4 0828 0000 0022             		btst	#0,$22(a0)
000172CA 6700                       		beq.s	loc_169CA
000172CC 4445                       		neg.w	d5
000172CE                            
000172CE                            loc_169CA:
000172CE 1C3C 0004                  		move.b	#4,d6
000172D2 7600                       		moveq	#0,d3
000172D4 7804                       		moveq	#4,d4
000172D6 2448                       		movea.l	a0,a2
000172D8 7202                       		moveq	#2,d1
000172DA                            
000172DA                            Obj78_LoadBody:
000172DA 4EB9 0000 E2A4             		jsr	SingleObjLoad2
000172E0 6600                       		bne.s	Obj78_QuitLoad
000172E2 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000172E6 1346 0024                  		move.b	d6,$24(a1)
000172EA 5406                       		addq.b	#2,d6
000172EC 2368 0004 0004             		move.l	4(a0),4(a1)
000172F2 3368 0002 0002             		move.w	2(a0),2(a1)
000172F8 137C 0005 0018             		move.b	#5,$18(a1)
000172FE 137C 0008 0019             		move.b	#8,$19(a1)
00017304 137C 00CB 0020             		move.b	#$CB,$20(a1)
0001730A D445                       		add.w	d5,d2
0001730C 3342 0008                  		move.w	d2,8(a1)
00017310 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017316 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001731C 1368 0022 0001             		move.b	$22(a0),1(a1)
00017322 137C 0008 001A             		move.b	#8,$1A(a1)
00017328 234A 003C                  		move.l	a2,$3C(a1)
0001732C 1344 003C                  		move.b	d4,$3C(a1)
00017330 5804                       		addq.b	#4,d4
00017332 2449                       		movea.l	a1,a2
00017334                            
00017334                            Obj78_QuitLoad:
00017334 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017338                            
00017338 117C 0007 002A             		move.b	#7,$2A(a0)
0001733E 4228 003C                  		clr.b	$3C(a0)
00017342                            
00017342                            Obj78_Action:				; XREF: Obj78_Index
00017342 4A28 0022                  		tst.b	$22(a0)
00017346 6B00 0000                  		bmi.w	loc_16C96
0001734A 7000                       		moveq	#0,d0
0001734C 1028 0025                  		move.b	$25(a0),d0
00017350 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00017354 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017358 1228 002B                  		move.b	$2B(a0),d1
0001735C 6A00                       		bpl.s	Obj78_Display
0001735E 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017364 1028 0026                  		move.b	$26(a0),d0
00017368 0240 007F                  		andi.w	#$7F,d0
0001736C 5828 0026                  		addq.b	#4,$26(a0)
00017370 1031 0000                  		move.b	(a1,d0.w),d0
00017374 6A00                       		bpl.s	Obj78_AniHead
00017376 08A8 0007 002B             		bclr	#7,$2B(a0)
0001737C 6000                       		bra.s	Obj78_Display
0001737E                            ; ===========================================================================
0001737E                            
0001737E                            Obj78_AniHead:
0001737E 0201 0010                  		andi.b	#$10,d1
00017382 D001                       		add.b	d1,d0
00017384 1140 001A                  		move.b	d0,$1A(a0)
00017388                            
00017388                            Obj78_Display:
00017388 3028 0008                  		move.w	8(a0),d0
0001738C 0240 FF80                  		andi.w	#$FF80,d0
00017390 3238 F700                  		move.w	($FFFFF700).w,d1
00017394 0441 0080                  		subi.w	#$80,d1
00017398 0241 FF80                  		andi.w	#$FF80,d1
0001739C 9041                       		sub.w	d1,d0
0001739E 0C40 0280                  		cmpi.w	#$280,d0
000173A2 6200 0000                  		bhi.w	Obj78_ChkGone
000173A6 4EF9 0000 DE08             		jmp	DisplaySprite
000173AC                            ; ===========================================================================
000173AC                            
000173AC                            Obj78_ChkGone:
000173AC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000173B0 7000                       		moveq	#0,d0
000173B2 1028 0023                  		move.b	$23(a0),d0
000173B6 6700                       		beq.s	loc_16ABC
000173B8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000173BE                            
000173BE                            loc_16ABC:
000173BE 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000173C4 4E75                       		rts	
000173C6                            ; ===========================================================================
000173C6                            
000173C6                            Obj78_Delete:				; XREF: Obj78_Index
000173C6 4EF9 0000 DE44             		jmp	DeleteObject
000173CC                            ; ===========================================================================
000173CC 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000173CE 0000                       		dc.w loc_16B02-Obj78_Index2
000173D0                            ; ===========================================================================
000173D0                            
000173D0                            Obj78_Move:				; XREF: Obj78_Index2
000173D0 5328 002A                  		subq.b	#1,$2A(a0)
000173D4 6B00                       		bmi.s	Obj78_Move2
000173D6 4E75                       		rts	
000173D8                            ; ===========================================================================
000173D8                            
000173D8                            Obj78_Move2:
000173D8 5428 0025                  		addq.b	#2,$25(a0)
000173DC 117C 0010 002A             		move.b	#$10,$2A(a0)
000173E2 317C FF40 0010             		move.w	#-$C0,$10(a0)
000173E8 317C 0040 0014             		move.w	#$40,$14(a0)
000173EE 0868 0004 002B             		bchg	#4,$2B(a0)
000173F4 6600                       		bne.s	loc_16AFC
000173F6 4268 0010                  		clr.w	$10(a0)
000173FA 4468 0014                  		neg.w	$14(a0)
000173FE                            
000173FE                            loc_16AFC:
000173FE 08E8 0007 002B             		bset	#7,$2B(a0)
00017404                            
00017404                            loc_16B02:				; XREF: Obj78_Index2
00017404 5328 002A                  		subq.b	#1,$2A(a0)
00017408 6B00                       		bmi.s	loc_16B5E
0001740A 2F28 0008                  		move.l	8(a0),-(sp)
0001740E 2428 0008                  		move.l	8(a0),d2
00017412 3028 0010                  		move.w	$10(a0),d0
00017416 0828 0000 0022             		btst	#0,$22(a0)
0001741C 6700                       		beq.s	loc_16B1E
0001741E 4440                       		neg.w	d0
00017420                            
00017420                            loc_16B1E:
00017420 48C0                       		ext.l	d0
00017422 E180                       		asl.l	#8,d0
00017424 D480                       		add.l	d0,d2
00017426 2142 0008                  		move.l	d2,8(a0)
0001742A 4EBA E2E6                  		jsr	ObjHitFloor
0001742E 241F                       		move.l	(sp)+,d2
00017430 0C41 FFF8                  		cmpi.w	#-8,d1
00017434 6D00                       		blt.s	loc_16B70
00017436 0C41 000C                  		cmpi.w	#$C,d1
0001743A 6C00                       		bge.s	loc_16B70
0001743C D368 000C                  		add.w	d1,$C(a0)
00017440 4842                       		swap	d2
00017442 B468 0008                  		cmp.w	8(a0),d2
00017446 6700                       		beq.s	locret_16B5C
00017448 7000                       		moveq	#0,d0
0001744A 1028 003C                  		move.b	$3C(a0),d0
0001744E 5228 003C                  		addq.b	#1,$3C(a0)
00017452 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017458 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001745C                            
0001745C                            locret_16B5C:
0001745C 4E75                       		rts	
0001745E                            ; ===========================================================================
0001745E                            
0001745E                            loc_16B5E:
0001745E 5528 0025                  		subq.b	#2,$25(a0)
00017462 117C 0007 002A             		move.b	#7,$2A(a0)
00017468 317C 0000 0010             		move.w	#0,$10(a0)
0001746E 4E75                       		rts	
00017470                            ; ===========================================================================
00017470                            
00017470                            loc_16B70:
00017470 2142 0008                  		move.l	d2,8(a0)
00017474 0868 0000 0022             		bchg	#0,$22(a0)
0001747A 1168 0022 0001             		move.b	$22(a0),1(a0)
00017480 7000                       		moveq	#0,d0
00017482 1028 003C                  		move.b	$3C(a0),d0
00017486 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
0001748C 5228 003C                  		addq.b	#1,$3C(a0)
00017490 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017496 4E75                       		rts	
00017498                            ; ===========================================================================
00017498                            
00017498                            Obj78_BodySeg2:				; XREF: Obj78_Index
00017498 2268 003C                  		movea.l	$3C(a0),a1
0001749C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000174A2 6A00                       		bpl.s	Obj78_BodySeg1
000174A4 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000174AA 1028 0026                  		move.b	$26(a0),d0
000174AE 0240 007F                  		andi.w	#$7F,d0
000174B2 5828 0026                  		addq.b	#4,$26(a0)
000174B6 4A31 0004                  		tst.b	4(a1,d0.w)
000174BA 6A00                       		bpl.s	Obj78_AniBody
000174BC 5828 0026                  		addq.b	#4,$26(a0)
000174C0                            
000174C0                            Obj78_AniBody:
000174C0 1031 0000                  		move.b	(a1,d0.w),d0
000174C4 5000                       		addq.b	#8,d0
000174C6 1140 001A                  		move.b	d0,$1A(a0)
000174CA                            
000174CA                            Obj78_BodySeg1:				; XREF: Obj78_Index
000174CA 2268 003C                  		movea.l	$3C(a0),a1
000174CE 4A28 0022                  		tst.b	$22(a0)
000174D2 6B00 0000                  		bmi.w	loc_16C90
000174D6 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000174DC 1169 0025 0025             		move.b	$25(a1),$25(a0)
000174E2 6700 0000                  		beq.w	loc_16C64
000174E6 3169 0014 0014             		move.w	$14(a1),$14(a0)
000174EC 3029 0010                  		move.w	$10(a1),d0
000174F0 D069 0014                  		add.w	$14(a1),d0
000174F4 3140 0010                  		move.w	d0,$10(a0)
000174F8 2428 0008                  		move.l	8(a0),d2
000174FC 2602                       		move.l	d2,d3
000174FE 3028 0010                  		move.w	$10(a0),d0
00017502 0828 0000 0022             		btst	#0,$22(a0)
00017508 6700                       		beq.s	loc_16C0C
0001750A 4440                       		neg.w	d0
0001750C                            
0001750C                            loc_16C0C:
0001750C 48C0                       		ext.l	d0
0001750E E180                       		asl.l	#8,d0
00017510 D480                       		add.l	d0,d2
00017512 2142 0008                  		move.l	d2,8(a0)
00017516 4843                       		swap	d3
00017518 B668 0008                  		cmp.w	8(a0),d3
0001751C 6700                       		beq.s	loc_16C64
0001751E 7000                       		moveq	#0,d0
00017520 1028 003C                  		move.b	$3C(a0),d0
00017524 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017528 0C01 0080                  		cmpi.b	#-$80,d1
0001752C 6600                       		bne.s	loc_16C50
0001752E 4843                       		swap	d3
00017530 2143 0008                  		move.l	d3,8(a0)
00017534 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017538 0868 0000 0022             		bchg	#0,$22(a0)
0001753E 1168 0022 0001             		move.b	$22(a0),1(a0)
00017544 5228 003C                  		addq.b	#1,$3C(a0)
00017548 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001754E 6000                       		bra.s	loc_16C64
00017550                            ; ===========================================================================
00017550                            
00017550                            loc_16C50:
00017550 4881                       		ext.w	d1
00017552 D368 000C                  		add.w	d1,$C(a0)
00017556 5228 003C                  		addq.b	#1,$3C(a0)
0001755A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017560 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017564                            
00017564                            loc_16C64:
00017564 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
0001756A 6700                       		beq.s	loc_16C90
0001756C 0C11 0027                  		cmpi.b	#$27,0(a1)
00017570 6700                       		beq.s	loc_16C7C
00017572 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00017578 6600                       		bne.s	loc_16C82
0001757A                            
0001757A                            loc_16C7C:
0001757A 117C 000A 0024             		move.b	#$A,$24(a0)
00017580                            
00017580                            loc_16C82:
00017580 4EF9 0000 DE08             		jmp	DisplaySprite
00017586                            
00017586                            ; ===========================================================================
00017586 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
0001758E                            ; ===========================================================================
0001758E                            
0001758E                            loc_16C90:
0001758E 08E9 0007 0022             		bset	#7,$22(a1)
00017594                            
00017594                            loc_16C96:
00017594 7000                       		moveq	#0,d0
00017596 1028 0024                  		move.b	$24(a0),d0
0001759A 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
0001759E 0828 0000 0022             		btst	#0,$22(a0)
000175A4 6700                       		beq.s	loc_16CAA
000175A6 4440                       		neg.w	d0
000175A8                            
000175A8                            loc_16CAA:
000175A8 3140 0010                  		move.w	d0,$10(a0)
000175AC 317C FC00 0012             		move.w	#-$400,$12(a0)
000175B2 117C 000C 0024             		move.b	#$C,$24(a0)
000175B8 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000175BE                            
000175BE                            loc_16CC0:				; XREF: Obj78_Index
000175BE 4EB9 0000 DDB6             		jsr	ObjectFall
000175C4 4A68 0012                  		tst.w	$12(a0)
000175C8 6B00                       		bmi.s	loc_16CE0
000175CA 4EBA E146                  		jsr	ObjHitFloor
000175CE 4A41                       		tst.w	d1
000175D0 6A00                       		bpl.s	loc_16CE0
000175D2 D368 000C                  		add.w	d1,$C(a0)
000175D6 317C FC00 0012             		move.w	#-$400,$12(a0)
000175DC                            
000175DC                            loc_16CE0:
000175DC 4A28 0001                  		tst.b	1(a0)
000175E0 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000175E4 4EF9 0000 DE08             		jmp	DisplaySprite
000175EA                            ; ===========================================================================
000175EA                            Ani_obj78:
000175EA                            	include "_anim\obj78.asm"
000175EA                            ; ---------------------------------------------------------------------------
000175EA                            ; Animation script - Caterkiller enemy (uses non-standard format)
000175EA                            ; ---------------------------------------------------------------------------
000175EA 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000175FA 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0001760A 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001761A 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001762A 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001763A 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001764A 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001765A 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001766A                            	even
0001766A                            	even
0001766A                            
0001766A                            ; ---------------------------------------------------------------------------
0001766A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001766A                            ; ---------------------------------------------------------------------------
0001766A                            Map_obj78:
0001766A                            	include "_maps\obj78.asm"
0001766A                            ; ---------------------------------------------------------------------------
0001766A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001766A                            ; ---------------------------------------------------------------------------
0001766A 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
0001766E 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017672 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017676 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
0001767A 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
0001767E 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017682 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017686 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001768A 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
0001768E 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017692 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017696 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001769A 01                         byte_16D9E:	dc.b 1
0001769B F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
000176A0 01                         byte_16DA4:	dc.b 1
000176A1 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
000176A6 01                         byte_16DAA:	dc.b 1
000176A7 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
000176AC 01                         byte_16DB0:	dc.b 1
000176AD EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000176B2 01                         byte_16DB6:	dc.b 1
000176B3 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
000176B8 01                         byte_16DBC:	dc.b 1
000176B9 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000176BE 01                         byte_16DC2:	dc.b 1
000176BF EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000176C4 01                         byte_16DC8:	dc.b 1
000176C5 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000176CA 01                         byte_16DCE:	dc.b 1
000176CB F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000176D0 01                         byte_16DD4:	dc.b 1
000176D1 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000176D6 01                         byte_16DDA:	dc.b 1
000176D7 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000176DC 01                         byte_16DE0:	dc.b 1
000176DD F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000176E2 01                         byte_16DE6:	dc.b 1
000176E3 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000176E8 01                         byte_16DEC:	dc.b 1
000176E9 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000176EE 01                         byte_16DF2:	dc.b 1
000176EF F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000176F4 01                         byte_16DF8:	dc.b 1
000176F5 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000176FA 01                         byte_16DFE:	dc.b 1
000176FB F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00017700 01                         byte_16E04:	dc.b 1
00017701 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017706 01                         byte_16E0A:	dc.b 1
00017707 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0001770C 01                         byte_16E10:	dc.b 1
0001770D EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00017712 01                         byte_16E16:	dc.b 1
00017713 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017718 01                         byte_16E1C:	dc.b 1
00017719 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001771E 01                         byte_16E22:	dc.b 1
0001771F EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00017724 01                         byte_16E28:	dc.b 1
00017725 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001772A                            		even
0001772A                            		even
0001772A                            
0001772A                            ; ===========================================================================
0001772A                            ; ---------------------------------------------------------------------------
0001772A                            ; Object 79 - lamppost
0001772A                            ; ---------------------------------------------------------------------------
0001772A                            
0001772A                            Obj79:					; XREF: Obj_Index
0001772A 7000                       		moveq	#0,d0
0001772C 1028 0024                  		move.b	$24(a0),d0
00017730 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00017734 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017738 4EFA 8776                  		jmp	MarkObjGone
0001773C                            ; ===========================================================================
0001773C 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
0001773E 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017740 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017742 0000                       		dc.w Obj79_Twirl-Obj79_Index
00017744                            ; ===========================================================================
00017744                            
00017744                            Obj79_Main:				; XREF: Obj79_Index
00017744 5428 0024                  		addq.b	#2,$24(a0)
00017748 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017750 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017756 117C 0004 0001             		move.b	#4,1(a0)
0001775C 117C 0008 0019             		move.b	#8,$19(a0)
00017762 117C 0005 0018             		move.b	#5,$18(a0)
00017768 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001776C 7000                       		moveq	#0,d0
0001776E 1028 0023                  		move.b	$23(a0),d0
00017772 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017778 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001777E 6600                       		bne.s	Obj79_RedLamp
00017780 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017784 0201 007F                  		andi.b	#$7F,d1
00017788 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
0001778C 0202 007F                  		andi.b	#$7F,d2
00017790 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017792 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017794                            
00017794                            Obj79_RedLamp:
00017794 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001779A 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
000177A0 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
000177A6 4E75                       		rts	
000177A8                            ; ===========================================================================
000177A8                            
000177A8                            Obj79_BlueLamp:				; XREF: Obj79_Index
000177A8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000177AC 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000177B0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000177B4 6B00 0000                  		bmi.w	locret_16F90
000177B8 1238 FE30                  		move.b	($FFFFFE30).w,d1
000177BC 0201 007F                  		andi.b	#$7F,d1
000177C0 1428 0028                  		move.b	$28(a0),d2
000177C4 0202 007F                  		andi.b	#$7F,d2
000177C8 B202                       		cmp.b	d2,d1
000177CA 6500                       		bcs.s	Obj79_HitLamp
000177CC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177D0 7000                       		moveq	#0,d0
000177D2 1028 0023                  		move.b	$23(a0),d0
000177D6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000177DC 117C 0004 0024             		move.b	#4,$24(a0)
000177E2 117C 0003 001A             		move.b	#3,$1A(a0)
000177E8 6000 0000                  		bra.w	locret_16F90
000177EC                            ; ===========================================================================
000177EC                            
000177EC                            Obj79_HitLamp:
000177EC 3038 D008                  		move.w	($FFFFD008).w,d0
000177F0 9068 0008                  		sub.w	8(a0),d0
000177F4 5040                       		addq.w	#8,d0
000177F6 0C40 0010                  		cmpi.w	#$10,d0
000177FA 6400 0000                  		bcc.w	locret_16F90
000177FE 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017802 9068 000C                  		sub.w	$C(a0),d0
00017806 0640 0040                  		addi.w	#$40,d0
0001780A 0C40 0068                  		cmpi.w	#$68,d0
0001780E 6400                       		bcc.s	locret_16F90
00017810 303C 00A1                  		move.w	#$A1,d0
00017814 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lamppost sound
0001781A 5428 0024                  		addq.b	#2,$24(a0)
0001781E 4EB9 0000 E28E             		jsr	SingleObjLoad
00017824 6600                       		bne.s	loc_16F76
00017826 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
0001782A 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017830 3368 0008 0030             		move.w	8(a0),$30(a1)
00017836 3368 000C 0032             		move.w	$C(a0),$32(a1)
0001783C 0469 0018 0032             		subi.w	#$18,$32(a1)
00017842 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
0001784A 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017850 137C 0004 0001             		move.b	#4,1(a1)
00017856 137C 0008 0019             		move.b	#8,$19(a1)
0001785C 137C 0004 0018             		move.b	#4,$18(a1)
00017862 137C 0002 001A             		move.b	#2,$1A(a1)
00017868 337C 0020 0036             		move.w	#$20,$36(a1)
0001786E                            
0001786E                            loc_16F76:
0001786E 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017874 6100 0000                  		bsr.w	Obj79_StoreInfo
00017878 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001787C 7000                       		moveq	#0,d0
0001787E 1028 0023                  		move.b	$23(a0),d0
00017882 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017888                            
00017888                            locret_16F90:
00017888 4E75                       		rts	
0001788A                            ; ===========================================================================
0001788A                            
0001788A                            Obj79_AfterHit:				; XREF: Obj79_Index
0001788A 4E75                       		rts	
0001788C                            ; ===========================================================================
0001788C                            
0001788C                            Obj79_Twirl:				; XREF: Obj79_Index
0001788C 5368 0036                  		subq.w	#1,$36(a0)
00017890 6A00                       		bpl.s	loc_16FA0
00017892 117C 0004 0024             		move.b	#4,$24(a0)
00017898                            
00017898                            loc_16FA0:
00017898 1028 0026                  		move.b	$26(a0),d0
0001789C 0428 0010 0026             		subi.b	#$10,$26(a0)
000178A2 0400 0040                  		subi.b	#$40,d0
000178A6 4EB9 0000 2CEC             		jsr	(CalcSine).l
000178AC C3FC 0C00                  		muls.w	#$C00,d1
000178B0 4841                       		swap	d1
000178B2 D268 0030                  		add.w	$30(a0),d1
000178B6 3141 0008                  		move.w	d1,8(a0)
000178BA C1FC 0C00                  		muls.w	#$C00,d0
000178BE 4840                       		swap	d0
000178C0 D068 0032                  		add.w	$32(a0),d0
000178C4 3140 000C                  		move.w	d0,$C(a0)
000178C8 4E75                       		rts	
000178CA                            ; ===========================================================================
000178CA                            ; ---------------------------------------------------------------------------
000178CA                            ; Subroutine to	store information when you hit a lamppost
000178CA                            ; ---------------------------------------------------------------------------
000178CA                            
000178CA                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000178CA 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000178D0 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000178D6 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000178DC 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000178E2 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000178E8 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000178EE 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000178F4 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000178FA 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017900 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017906 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
0001790C 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017912 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017918 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
0001791E 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017924 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
0001792A 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017930 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017936 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
0001793C 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017942 4E75                       		rts	
00017944                            
00017944                            ; ---------------------------------------------------------------------------
00017944                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017944                            ; ---------------------------------------------------------------------------
00017944                            
00017944                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017944                            
00017944                            
00017944                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017944 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
0001794A 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017950 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017956 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
0001795C 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017962 4278 FE20                  		clr.w	($FFFFFE20).w
00017966 4238 FE1B                  		clr.b	($FFFFFE1B).w
0001796A 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017970 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017976 5338 FE24                  		subq.b	#1,($FFFFFE24).w
0001797A 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017980 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017986 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
0001798C 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017992 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017998 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
0001799E 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000179A4 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000179AA 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
000179B0 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
000179B6 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000179BC 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000179C2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000179C8 6600                       		bne.s	loc_170E4
000179CA 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000179D0 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000179D6 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000179DC                            
000179DC                            loc_170E4:
000179DC 4A38 FE30                  		tst.b	($FFFFFE30).w
000179E0 6A00                       		bpl.s	locret_170F6
000179E2 3038 FE32                  		move.w	($FFFFFE32).w,d0
000179E6 0440 00A0                  		subi.w	#$A0,d0
000179EA 31C0 F728                  		move.w	d0,($FFFFF728).w
000179EE                            
000179EE                            locret_170F6:
000179EE 4E75                       		rts	
000179F0                            ; End of function Obj79_LoadInfo
000179F0                            
000179F0                            ; ===========================================================================
000179F0                            ; ---------------------------------------------------------------------------
000179F0                            ; Sprite mappings - lamppost
000179F0                            ; ---------------------------------------------------------------------------
000179F0                            Map_obj79:
000179F0                            	include "_maps\obj79.asm"
000179F0                            ; ---------------------------------------------------------------------------
000179F0                            ; Sprite mappings - lamppost
000179F0                            ; ---------------------------------------------------------------------------
000179F0 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000179F4 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000179F8 06                         byte_17100:	dc.b 6
000179F9 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000179FE E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017A03 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017A08 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017A0D D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017A12 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017A17 04                         byte_1711F:	dc.b 4
00017A18 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017A1D E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017A22 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017A27 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017A2C 02                         byte_17134:	dc.b 2
00017A2D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017A32 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017A37 06                         byte_1713F:	dc.b 6
00017A38 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017A3D E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017A42 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017A47 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017A4C D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017A51 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017A56                            		even
00017A56                            		even
00017A56                            
00017A56                            ; ===========================================================================
00017A56                            ; ---------------------------------------------------------------------------
00017A56                            ; Object 7D - hidden points at the end of a level
00017A56                            ; ---------------------------------------------------------------------------
00017A56                            
00017A56                            Obj7D:					; XREF: Obj_Index
00017A56 7000                       		moveq	#0,d0
00017A58 1028 0024                  		move.b	$24(a0),d0
00017A5C 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017A60 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017A64                            ; ===========================================================================
00017A64 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017A66 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017A68                            ; ===========================================================================
00017A68                            
00017A68                            Obj7D_Main:				; XREF: Obj7D_Index
00017A68 7410                       		moveq	#$10,d2
00017A6A 3602                       		move.w	d2,d3
00017A6C D643                       		add.w	d3,d3
00017A6E 43F8 D000                  		lea	($FFFFD000).w,a1
00017A72 3029 0008                  		move.w	8(a1),d0
00017A76 9068 0008                  		sub.w	8(a0),d0
00017A7A D042                       		add.w	d2,d0
00017A7C B043                       		cmp.w	d3,d0
00017A7E 6400                       		bcc.s	Obj7D_ChkDel
00017A80 3229 000C                  		move.w	$C(a1),d1
00017A84 9268 000C                  		sub.w	$C(a0),d1
00017A88 D242                       		add.w	d2,d1
00017A8A B243                       		cmp.w	d3,d1
00017A8C 6400                       		bcc.s	Obj7D_ChkDel
00017A8E 4A78 FE08                  		tst.w	($FFFFFE08).w
00017A92 6600                       		bne.s	Obj7D_ChkDel
00017A94 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017A98 6600                       		bne.s	Obj7D_ChkDel
00017A9A 5428 0024                  		addq.b	#2,$24(a0)
00017A9E 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017AA6 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017AAC 0028 0004 0001             		ori.b	#4,1(a0)
00017AB2 117C 0000 0018             		move.b	#0,$18(a0)
00017AB8 117C 0010 0019             		move.b	#$10,$19(a0)
00017ABE 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017AC4 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017ACA 303C 00C9                  		move.w	#$C9,d0
00017ACE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bonus sound
00017AD4 7000                       		moveq	#0,d0
00017AD6 1028 0028                  		move.b	$28(a0),d0
00017ADA D040                       		add.w	d0,d0
00017ADC 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017AE0 4EB9 0000 0000             		jsr	AddPoints
00017AE6                            
00017AE6                            Obj7D_ChkDel:
00017AE6 3028 0008                  		move.w	8(a0),d0
00017AEA 0240 FF80                  		andi.w	#$FF80,d0
00017AEE 3238 F700                  		move.w	($FFFFF700).w,d1
00017AF2 0441 0080                  		subi.w	#$80,d1
00017AF6 0241 FF80                  		andi.w	#$FF80,d1
00017AFA 9041                       		sub.w	d1,d0
00017AFC 0C40 0280                  		cmpi.w	#$280,d0
00017B00 6200                       		bhi.s	Obj7D_Delete
00017B02 4E75                       		rts	
00017B04                            ; ===========================================================================
00017B04                            
00017B04                            Obj7D_Delete:
00017B04 4EF9 0000 DE44             		jmp	DeleteObject
00017B0A                            ; ===========================================================================
00017B0A 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017B0C 03E8                       		dc.w 1000
00017B0E 0064                       		dc.w 100
00017B10 0001                       		dc.w 1
00017B12                            ; ===========================================================================
00017B12                            
00017B12                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017B12 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017B16 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017B18 3028 0008                  		move.w	8(a0),d0
00017B1C 0240 FF80                  		andi.w	#-$80,d0
00017B20 3238 F700                  		move.w	($FFFFF700).w,d1
00017B24 0441 0080                  		subi.w	#$80,d1
00017B28 0241 FF80                  		andi.w	#-$80,d1
00017B2C 9041                       		sub.w	d1,d0
00017B2E 0C40 0280                  		cmpi.w	#$280,d0
00017B32 6200                       		bhi.s	Obj7D_Delete2
00017B34 4EF9 0000 DE08             		jmp	DisplaySprite
00017B3A                            ; ===========================================================================
00017B3A                            
00017B3A                            Obj7D_Delete2:
00017B3A 4EF9 0000 DE44             		jmp	DeleteObject
00017B40                            ; ===========================================================================
00017B40                            ; ---------------------------------------------------------------------------
00017B40                            ; Sprite mappings - hidden points at the end of	a level
00017B40                            ; ---------------------------------------------------------------------------
00017B40                            Map_obj7D:
00017B40                            	include "_maps\obj7D.asm"
00017B40                            ; ---------------------------------------------------------------------------
00017B40                            ; Sprite mappings - hidden points at the end of	a level
00017B40                            ; ---------------------------------------------------------------------------
00017B40 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017B44 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017B48 00                         byte_17250:	dc.b 0
00017B49 01                         byte_17251:	dc.b 1
00017B4A F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017B4F 01                         byte_17257:	dc.b 1
00017B50 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017B55 01                         byte_1725D:	dc.b 1
00017B56 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017B5C 00                         		even
00017B5C 00                         		even
00017B5C                            
00017B5C                            ; ===========================================================================
00017B5C                            ; ---------------------------------------------------------------------------
00017B5C                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017B5C                            ; ---------------------------------------------------------------------------
00017B5C                            
00017B5C                            Obj8A:					; XREF: Obj_Index
00017B5C 7000                       		moveq	#0,d0
00017B5E 1028 0024                  		move.b	$24(a0),d0
00017B62 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017B66 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017B6A                            ; ===========================================================================
00017B6A 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017B6C 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017B6E                            ; ===========================================================================
00017B6E                            
00017B6E                            Obj8A_Main:				; XREF: Obj8A_Index
00017B6E 5428 0024                  		addq.b	#2,$24(a0)
00017B72 317C 0120 0008             		move.w	#$120,8(a0)
00017B78 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017B7E 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017B86 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017B8C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017B90 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017B94 117C 0000 0001             		move.b	#0,1(a0)
00017B9A 117C 0000 0018             		move.b	#0,$18(a0)
00017BA0 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017BA6 6600                       		bne.s	Obj8A_Display	; if not, branch
00017BA8 317C 00A6 0002             		move.w	#$A6,2(a0)
00017BAE 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017BB4 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017BB8 6700                       		beq.s	Obj8A_Display	; if not, branch
00017BBA 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017BC0 6600                       		bne.s	Obj8A_Display	; if not, branch
00017BC2 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017BC8 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017BCE 4EF9 0000 DE44             		jmp	DeleteObject
00017BD4                            ; ===========================================================================
00017BD4                            
00017BD4                            Obj8A_Display:				; XREF: Obj8A_Index
00017BD4 4EF9 0000 DE08             		jmp	DisplaySprite
00017BDA                            ; ===========================================================================
00017BDA                            ; ---------------------------------------------------------------------------
00017BDA                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017BDA                            ; ---------------------------------------------------------------------------
00017BDA                            Map_obj8A:
00017BDA                            	include "_maps\obj8A.asm"
00017BDA                            Map_ca8f:
00017BDA 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00017BDC 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
00017BDE 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
00017BE0 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
00017BE2 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00017BE4 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00017BE6 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00017BE8 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00017BEA 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00017BEC 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
00017BEE 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
00017BF0 08                         Map_ca8f_16: 	dc.b $8
00017BF1 CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00017BF6 E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
00017BFB F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
00017C00 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00017C05 B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
00017C0A B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
00017C0F B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00017C14 B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00017C19 10                         Map_ca8f_3F: 	dc.b $10
00017C1A D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017C1F D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017C24 D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017C29 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017C2E D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017C33 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017C38 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017C3D D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017C42 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017C47 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017C4C 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017C51 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017C56 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017C5B 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017C60 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017C65 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017C6A 0A                         Map_ca8f_90: 	dc.b $A
00017C6B D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017C70 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017C75 D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017C7A D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017C7F D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017C84 D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017C89 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017C8E 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017C93 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017C98 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017C9D 18                         Map_ca8f_C3: 	dc.b $18
00017C9E D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017CA3 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017CA8 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017CAD D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017CB2 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017CB7 D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017CBC D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017CC1 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017CC6 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017CCB D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017CD0 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017CD5 D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017CDA D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017CDF D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017CE4 D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017CE9 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017CEE 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017CF3 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017CF8 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017CFD 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017D02 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017D07 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017D0C 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017D11 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017D16 14                         Map_ca8f_13C: 	dc.b $14
00017D17 D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017D1C D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017D21 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017D26 D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017D2B D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017D30 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017D35 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017D3A 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017D3F 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017D44 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017D49 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017D4E 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017D53 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017D58 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017D5D 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017D62 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017D67 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017D6C 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017D71 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017D76 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017D7B 1A                         Map_ca8f_1A1: 	dc.b $1A
00017D7C D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017D81 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017D86 D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017D8B D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017D90 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017D95 D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017D9A D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017D9F D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017DA4 D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017DA9 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017DAE D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017DB3 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017DB8 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017DBD 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017DC2 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017DC7 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017DCC 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017DD1 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017DD6 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017DDB 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017DE0 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017DE5 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017DEA 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017DEF 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017DF4 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017DF9 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017DFE 17                         Map_ca8f_224: 	dc.b $17
00017DFF D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017E04 D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017E09 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00017E0E D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00017E13 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00017E18 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00017E1D D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00017E22 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00017E27 D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00017E2C D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00017E31 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00017E36 D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00017E3B 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017E40 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017E45 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00017E4A 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00017E4F 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00017E54 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00017E59 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00017E5E 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00017E63 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00017E68 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00017E6D 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00017E72 1F                         Map_ca8f_298: 	dc.b $1F
00017E73 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00017E78 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00017E7D D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00017E82 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00017E87 D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00017E8C D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017E91 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00017E96 D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00017E9B D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00017EA0 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00017EA5 D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00017EAA D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00017EAF D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00017EB4 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00017EB9 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00017EBE 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017EC3 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017EC8 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00017ECD 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00017ED2 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00017ED7 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00017EDC 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00017EE1 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00017EE6 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00017EEB 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00017EF0 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00017EF5 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00017EFA 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00017EFF 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00017F04 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00017F09 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00017F0E 0F                         Map_ca8f_334: 	dc.b $F
00017F0F F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00017F14 F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00017F19 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00017F1E F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00017F23 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00017F28 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00017F2D F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00017F32 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00017F37 F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00017F3C F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00017F41 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00017F46 F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00017F4B F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00017F50 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00017F55 F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00017F5A 08                         Map_ca8f_380: 	dc.b $8
00017F5B 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00017F60 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00017F65 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00017F6A 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00017F6F 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00017F74 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00017F79 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00017F7E 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00017F83 20                         Map_ca8f_3A9: 	dc.b $20
00017F84 ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
00017F89 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00017F8E ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00017F93 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
00017F98 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
00017F9D ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00017FA2 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00017FA7 FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
00017FAC FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00017FB1 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00017FB6 FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
00017FBB FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00017FC0 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00017FC5 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00017FCA 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
00017FCF 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00017FD4 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00017FD9 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00017FDE 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00017FE3 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00017FE8 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00017FED 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00017FF2 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00017FF7 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
00017FFC 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00018001 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00018006 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
0001800B 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00018010 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00018015 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
0001801A 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
0001801F 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00018024                            	even
00018024                            	even
00018024                            
00018024                            ; ===========================================================================
00018024                            ; ---------------------------------------------------------------------------
00018024                            ; Object 3D - matthew boss - modified by GK89
00018024                            ; ---------------------------------------------------------------------------
00018024                            
00018024                            Obj3D:					; XREF: Obj_Index
00018024 7000                       		moveq	#0,d0
00018026 1028 0024                  		move.b	$24(a0),d0
0001802A 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
0001802E 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00018032                            ; ===========================================================================
00018032 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00018034 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00018036 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018038 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
0001803A                            
0001803A 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
0001803C 0401                       		dc.b 4,	1
0001803E 0607                       		dc.b 6,	7
00018040                            ; ===========================================================================
00018040                            
00018040                            Obj3D_Main:				; XREF: Obj3D_Index
00018040 45F9 0001 803A             		lea	(Obj3D_ObjData).l,a2
00018046 2248                       		movea.l	a0,a1
00018048 7202                       		moveq	#2,d1
0001804A 6000                       		bra.s	Obj3D_LoadBoss
0001804C                            ; ===========================================================================
0001804C                            
0001804C                            Obj3D_Loop:
0001804C 4EB9 0000 E2A4             		jsr	SingleObjLoad2
00018052 6600                       		bne.s	loc_17772
00018054                            
00018054                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00018054 135A 0024                  		move.b	(a2)+,$24(a1)
00018058 12BC 003D                  		move.b	#$3D,0(a1)
0001805C 3368 0008 0008             		move.w	8(a0),8(a1)
00018062 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018068 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00018070 337C 0400 0002             		move.w	#$400,2(a1)
00018076 137C 0004 0001             		move.b	#4,1(a1)
0001807C 137C 0020 0019             		move.b	#$20,$19(a1)
00018082 137C 0003 0018             		move.b	#3,$18(a1)
00018088 135A 001C                  		move.b	(a2)+,$1C(a1)
0001808C 2348 0034                  		move.l	a0,$34(a1)
00018090 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00018094                            
00018094                            loc_17772:
00018094 3168 0008 0030             		move.w	8(a0),$30(a0)
0001809A 3168 000C 0038             		move.w	$C(a0),$38(a0)
000180A0 117C 000F 0020             		move.b	#$F,$20(a0)
000180A6 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
000180AC                            
000180AC                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000180AC 7000                       		moveq	#0,d0
000180AE 1028 0025                  		move.b	$25(a0),d0
000180B2 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000180B6 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000180BA 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000180C0 4EB9 0000 AEC8             		jsr	AnimateSprite
000180C6 1028 0022                  		move.b	$22(a0),d0
000180CA 0200 0003                  		andi.b	#3,d0
000180CE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000180D4 8128 0001                  		or.b	d0,1(a0)
000180D8 4EF9 0000 DE08             		jmp	DisplaySprite
000180DE                            ; ===========================================================================
000180DE 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000180E0 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000180E2 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000180E4 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000180E6 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000180E8 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000180EA 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000180EC                            ; ===========================================================================
000180EC                            
000180EC                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000180EC 4EB9 0000 0000             		jsr    Obj3D_ShipMove
000180F2 6100 0000                  		bsr.w	BossMove
000180F6 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000180FC 6600                       		bne.s	loc_177E6
000180FE 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018104 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018108                            
00018108                            loc_177E6:
00018108 1028 003F                  		move.b	$3F(a0),d0
0001810C 4EB9 0000 2CEC             		jsr	(CalcSine).l
00018112 EC40                       		asr.w	#6,d0
00018114 D068 0038                  		add.w	$38(a0),d0
00018118 3140 000C                  		move.w	d0,$C(a0)
0001811C 3168 0030 0008             		move.w	$30(a0),8(a0)
00018122 5428 003F                  		addq.b	#2,$3F(a0)
00018126 0C28 0008 0025             		cmpi.b	#8,$25(a0)
0001812C 6400                       		bcc.s	locret_1784A
0001812E 4A28 0022                  		tst.b	$22(a0)
00018132 6B00                       		bmi.s	loc_1784C
00018134 4A28 0020                  		tst.b	$20(a0)
00018138 6600                       		bne.s	locret_1784A
0001813A 4A28 003E                  		tst.b	$3E(a0)
0001813E 6600                       		bne.s	Obj3D_ShipFlash
00018140 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00018146 303C 00AC                  		move.w	#$AC,d0
0001814A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018150                            
00018150                            Obj3D_ShipFlash:
00018150 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018154 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018156 4A51                       		tst.w	(a1)
00018158 6600                       		bne.s	loc_1783C
0001815A 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001815E                            
0001815E                            loc_1783C:
0001815E 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018160 5328 003E                  		subq.b	#1,$3E(a0)
00018164 6600                       		bne.s	locret_1784A
00018166 117C 000F 0020             		move.b	#$F,$20(a0)
0001816C                            
0001816C                            locret_1784A:
0001816C 4E75                       		rts	
0001816E                            ; ===========================================================================
0001816E                            
0001816E                            loc_1784C:				; XREF: loc_177E6
0001816E 7064                       		moveq	#100,d0
00018170 6100 0000                  		bsr.w	AddPoints
00018174 117C 0008 0025             		move.b	#8,$25(a0)
0001817A 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018180 4E75                       		rts	
00018182                            
00018182                            ; ---------------------------------------------------------------------------
00018182                            ; Defeated boss	subroutine
00018182                            ; ---------------------------------------------------------------------------
00018182                            
00018182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018182                            
00018182                            
00018182                            BossDefeated:
00018182 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00018186 0200 0007                  		andi.b	#7,d0
0001818A 6600                       		bne.s	locret_178A2
0001818C 4EB9 0000 E28E             		jsr	SingleObjLoad
00018192 6600                       		bne.s	locret_178A2
00018194 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00018198 3368 0008 0008             		move.w	8(a0),8(a1)
0001819E 3368 000C 000C             		move.w	$C(a0),$C(a1)
000181A4 4EB9 0000 2CC6             		jsr	(RandomNumber).l
000181AA 3200                       		move.w	d0,d1
000181AC 7200                       		moveq	#0,d1
000181AE 1200                       		move.b	d0,d1
000181B0 E409                       		lsr.b	#2,d1
000181B2 0441 0020                  		subi.w	#$20,d1
000181B6 D369 0008                  		add.w	d1,8(a1)
000181BA E048                       		lsr.w	#8,d0
000181BC E608                       		lsr.b	#3,d0
000181BE D169 000C                  		add.w	d0,$C(a1)
000181C2                            
000181C2                            locret_178A2:
000181C2 4E75                       		rts	
000181C4                            ; End of function BossDefeated
000181C4                            
000181C4                            ; ---------------------------------------------------------------------------
000181C4                            ; Subroutine to	move a boss
000181C4                            ; ---------------------------------------------------------------------------
000181C4                            
000181C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181C4                            
000181C4                            
000181C4                            BossMove:
000181C4 2428 0030                  		move.l	$30(a0),d2
000181C8 2628 0038                  		move.l	$38(a0),d3
000181CC 3028 0010                  		move.w	$10(a0),d0
000181D0 48C0                       		ext.l	d0
000181D2 E180                       		asl.l	#8,d0
000181D4 D480                       		add.l	d0,d2
000181D6 3028 0012                  		move.w	$12(a0),d0
000181DA 48C0                       		ext.l	d0
000181DC E180                       		asl.l	#8,d0
000181DE D680                       		add.l	d0,d3
000181E0 2142 0030                  		move.l	d2,$30(a0)
000181E4 2143 0038                  		move.l	d3,$38(a0)
000181E8 4E75                       		rts	
000181EA                            ; End of function BossMove
000181EA                            
000181EA                            ; ===========================================================================
000181EA                            
000181EA                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
000181EA 6100 FFD8                  		bsr.w	BossMove
000181EE 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000181F4 6600                       		bne.s	loc_17916
000181F6 317C 0000 0010             		move.w	#0,$10(a0)
000181FC 317C 0000 0012             		move.w	#0,$12(a0)
00018202 5428 0025                  		addq.b	#2,$25(a0)
00018206 4EB9 0000 E2A4             		jsr	SingleObjLoad2
0001820C 6600                       		bne.s	loc_17910
0001820E 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00018212 3368 0030 0008             		move.w	$30(a0),8(a1)
00018218 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001821E 2348 0034                  		move.l	a0,$34(a1)
00018222                            
00018222                            loc_17910:
00018222 317C 0077 003C             		move.w	#$77,$3C(a0)
00018228                            
00018228                            loc_17916:
00018228 6000 FEDE                  		bra.w	loc_177E6
0001822C                            ; ===========================================================================
0001822C                            
0001822C                            Obj3D_ShipMove:				; XREF:  sonic follow move
0001822C 5368 003C                  		subq.w	#1,$3C(a0)
00018230 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
00018236 5428 0025                  		addq.b	#2,$25(a0)
0001823A 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018240 3038 D008                  		move.w	($FFFFD008).w,d0	 
00018244 9068 0008                  		sub.w	8(a0),d0		 
00018248 6A00                       		bpl.s	Obj3D_left			 
0001824A 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018250 6000                       		bra.s	Obj3D_right		 
00018252 08A8 0005 0022             		bclr	#5,$22(a0)
00018258 4EB9 0000 0000              		jsr     loc_17950
0001825E 4E75                       		rts
00018260                            ; ===========================================================================
00018260                            
00018260                            Obj3D_right:
00018260 317C FF00 0010             		move.w	#-$100,$10(a0)	
00018266 4E75                       		Rts
00018268                            
00018268                            Obj3D_left:
00018268 317C 0100 0010             		move.w	#$100,$10(a0)	 
0001826E 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
00018274 6600                       		bne.s	RTSboss  	; if not, branch
00018276 0868 0000 0022              		bchg	#0,$22(a0)
0001827C                            
0001827C                            RTSboss:	    
0001827C 4E75                       		rts
0001827E                             ; ===========================================================================
0001827E                            
0001827E                            Obj3D_UpStuff:
0001827E 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00018282 9068 000C                  		sub.w	$C(a0),d0		 
00018286 6A00                       		bpl.s	Obj3D_down			 
00018288 6000                        		bra.s	Obj3D_up		 
0001828A 08A8 0005 0022             		bclr	#5,$22(a0)
00018290                             
00018290                            Obj3D_up:		
00018290 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
00018296 4E75                        	    rts
00018298                            
00018298                            Obj3D_down:
00018298 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
0001829E                            
0001829E                            loc_17950:
0001829E 6000 FE68                  		bra.w	loc_177E6
000182A2                            ; ===========================================================================
000182A2                            
000182A2                            loc_17954:				; XREF: Obj3D_ShipIndex
000182A2 5368 003C                  		subq.w	#1,$3C(a0)
000182A6 6B00                       		bmi.s	loc_17960
000182A8 6100 FF1A                  		bsr.w	BossMove
000182AC 6000                       		bra.s	loc_17976
000182AE                            ; ===========================================================================
000182AE                            
000182AE                            loc_17960:
000182AE 0868 0000 0022             		bchg	#0,$22(a0)
000182B4 317C 003F 003C             		move.w	#$3F,$3C(a0)
000182BA 5528 0025                  		subq.b	#2,$25(a0)
000182BE 317C 0000 0010             		move.w	#0,$10(a0)
000182C4                            
000182C4                            loc_17976:
000182C4 6000 FE42                  		bra.w	loc_177E6
000182C8                            ; ===========================================================================
000182C8                            
000182C8                            loc_1797A:				; XREF: Obj3D_ShipIndex
000182C8 5368 003C                  		subq.w	#1,$3C(a0)
000182CC 6B00                       		bmi.s	loc_17984
000182CE 6000 FEB2                  		bra.w	BossDefeated
000182D2                            ; ===========================================================================
000182D2                            
000182D2                            loc_17984:
000182D2 08E8 0000 0022             		bset	#0,$22(a0)
000182D8 08A8 0007 0022             		bclr	#7,$22(a0)
000182DE 4268 0010                  		clr.w	$10(a0)
000182E2 5428 0025                  		addq.b	#2,$25(a0)
000182E6 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000182EC 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000182F0 6600                       		bne.s	locret_179AA
000182F2 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000182F8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000182FE 6000 FE82                  		bra.w	BossDefeated
00018302                            
00018302                            locret_179AA:
00018302 4E75                       		rts	
00018304                            ; ===========================================================================
00018304                            
00018304                            loc_179AC:				; XREF: Obj3D_ShipIndex
00018304 4EB9 0000 DDB6             		jsr ObjectFall		
0001830A 5268 003C                  		addq.w	#1,$3C(a0)
0001830E 6700                       		beq.s	loc_179BC
00018310 6A00                       		bpl.s	loc_179C2
00018312 6000                       		bra.s	loc_179EE
00018314                            ; ===========================================================================
00018314                            
00018314                            loc_179BC:
00018314 4268 0012                  		clr.w	$12(a0)
00018318 6000                       		bra.s	loc_179EE
0001831A                            ; ===========================================================================
0001831A                            
0001831A                            loc_179C2:
0001831A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018320 6500                       		bcs.s	loc_179DA
00018322 6700                       		beq.s	loc_179E0
00018324 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001832A 6500                       		bcs.s	loc_179EE
0001832C 5428 0025                  		addq.b	#2,$25(a0)
00018330 6000                       		bra.s	loc_179EE
00018332                            ; ===========================================================================
00018332                            
00018332                            loc_179DA:
00018332 5168 0012                  		subq.w	#8,$12(a0)
00018336 6000                       		bra.s	loc_179EE
00018338 6000 FE48                  		bra.w	BossDefeated
0001833C                            ; ===========================================================================
0001833C                            
0001833C                            loc_179E0:
0001833C 4268 0012                  		clr.w	$12(a0)
00018340 303C 0081                  		move.w	#$81,d0
00018344 4EB9 0000 15BA             		jsr	(PlaySound).l	; play GHZ music
0001834A                            
0001834A                            loc_179EE:
0001834A 6100 FE78                  		bsr.w	BossMove
0001834E 6000 FDB8                  		bra.w	loc_177E6
00018352                            ; ===========================================================================
00018352                            
00018352                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018352 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018358 6700                       		beq.s	loc_17A10
0001835A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001835E 6000                       		bra.s	loc_17A16
00018360                            ; ===========================================================================
00018360                            
00018360                            loc_17A10:
00018360 4A28 0001                  		tst.b	1(a0)
00018364 6A00                       		bpl.s	Obj3D_ShipDel
00018366                            
00018366                            loc_17A16:
00018366 6100 FE5C                  		bsr.w	BossMove
0001836A 6000 FD9C                  		bra.w	loc_177E6
0001836E                            ; ===========================================================================
0001836E                            
0001836E                            Obj3D_ShipDel:
0001836E 4EF9 0000 DE44             		jmp	DeleteObject
00018374                            ; ===========================================================================
00018374                            
00018374                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018374 7000                       		moveq	#0,d0
00018376 7201                       		moveq	#1,d1
00018378 2268 0034                  		movea.l	$34(a0),a1
0001837C 1029 0025                  		move.b	$25(a1),d0
00018380 5900                       		subq.b	#4,d0
00018382 6600                       		bne.s	loc_17A3E
00018384 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001838A 6600                       		bne.s	loc_17A46
0001838C 7204                       		moveq	#4,d1
0001838E                            
0001838E                            loc_17A3E:
0001838E 5D00                       		subq.b	#6,d0
00018390 6B00                       		bmi.s	loc_17A46
00018392 720A                       		moveq	#$A,d1
00018394 6000                       		bra.s	loc_17A5A
00018396                            ; ===========================================================================
00018396                            
00018396                            loc_17A46:
00018396 4A29 0020                  		tst.b	$20(a1)
0001839A 6600                       		bne.s	loc_17A50
0001839C 7205                       		moveq	#5,d1
0001839E 6000                       		bra.s	loc_17A5A
000183A0                            ; ===========================================================================
000183A0                            
000183A0                            loc_17A50:
000183A0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000183A6 6500                       		bcs.s	loc_17A5A
000183A8 7204                       		moveq	#4,d1
000183AA                            
000183AA                            loc_17A5A:
000183AA 1141 001C                  		move.b	d1,$1C(a0)
000183AE 5500                       		subq.b	#2,d0
000183B0 6600                       		bne.s	Obj3D_FaceDisp
000183B2 117C 0006 001C             		move.b	#6,$1C(a0)
000183B8 4A28 0001                  		tst.b	1(a0)
000183BC 6A00                       		bpl.s	Obj3D_FaceDel
000183BE                            
000183BE                            Obj3D_FaceDisp:
000183BE 6000                       		bra.s	Obj3D_Display
000183C0                            ; ===========================================================================
000183C0                            
000183C0                            Obj3D_FaceDel:
000183C0 4EF9 0000 DE44             		jmp	DeleteObject
000183C6                            ; ===========================================================================
000183C6                            
000183C6                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000183C6 117C 0007 001C             		move.b	#7,$1C(a0)
000183CC 2268 0034                  		movea.l	$34(a0),a1
000183D0 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000183D6 6600                       		bne.s	loc_17A96
000183D8 117C 000B 001C             		move.b	#$B,$1C(a0)
000183DE 4A28 0001                  		tst.b	1(a0)
000183E2 6A00                       		bpl.s	Obj3D_FlameDel
000183E4 6000                       		bra.s	Obj3D_FlameDisp
000183E6                            ; ===========================================================================
000183E6                            
000183E6                            loc_17A96:
000183E6 3029 0010                  		move.w	$10(a1),d0
000183EA 6700                       		beq.s	Obj3D_FlameDisp
000183EC 117C 0008 001C             		move.b	#8,$1C(a0)
000183F2                            
000183F2                            Obj3D_FlameDisp:
000183F2 6000                       		bra.s	Obj3D_Display
000183F4                            ; ===========================================================================
000183F4                            
000183F4                            Obj3D_FlameDel:
000183F4 4EF9 0000 DE44             		jmp	DeleteObject
000183FA                            ; ===========================================================================
000183FA                            
000183FA                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000183FA 2268 0034                  		movea.l	$34(a0),a1
000183FE 3169 0008 0008             		move.w	8(a1),8(a0)
00018404 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001840A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018410 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018416 4EB9 0000 AEC8             		jsr	AnimateSprite
0001841C 1028 0022                  		move.b	$22(a0),d0
00018420 0200 0003                  		andi.b	#3,d0
00018424 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001842A 8128 0001                  		or.b	d0,1(a0)
0001842E 4EF9 0000 DE08             		jmp	DisplaySprite
00018434                            ; ===========================================================================
00018434                            ; ---------------------------------------------------------------------------
00018434                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018434                            ; ---------------------------------------------------------------------------
00018434                            
00018434                            Obj48:					; XREF: Obj_Index
00018434 7000                       		moveq	#0,d0
00018436 1028 0024                  		move.b	$24(a0),d0
0001843A 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
0001843E 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018442                            ; ===========================================================================
00018442 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018444 0000                       		dc.w Obj48_Base-Obj48_Index
00018446 0000                       		dc.w Obj48_Display2-Obj48_Index
00018448 0000                       		dc.w loc_17C68-Obj48_Index
0001844A 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
0001844C                            ; ===========================================================================
0001844C                            
0001844C                            Obj48_Main:				; XREF: Obj48_Index
0001844C 5428 0024                  		addq.b	#2,$24(a0)
00018450 317C 4080 0026             		move.w	#$4080,$26(a0)
00018456 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001845C 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018464 317C 046C 0002             		move.w	#$46C,2(a0)
0001846A 45E8 0028                  		lea	$28(a0),a2
0001846E 14FC 0000                  		move.b	#0,(a2)+
00018472 7205                       		moveq	#5,d1
00018474 2248                       		movea.l	a0,a1
00018476 6000                       		bra.s	loc_17B60
00018478                            ; ===========================================================================
00018478                            
00018478                            Obj48_MakeLinks:
00018478 4EB9 0000 E2A4             		jsr	SingleObjLoad2
0001847E 6600                       		bne.s	Obj48_MakeBall
00018480 3368 0008 0008             		move.w	8(a0),8(a1)
00018486 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001848C 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018490 137C 0006 0024             		move.b	#6,$24(a1)
00018496 237C 0000 8280 0004        		move.l	#Map_obj15,4(a1)
0001849E 337C 0380 0002             		move.w	#$380,2(a1)
000184A4 137C 0001 001A             		move.b	#1,$1A(a1)
000184AA 5228 0028                  		addq.b	#1,$28(a0)
000184AE                            
000184AE                            loc_17B60:				; XREF: Obj48_Main
000184AE 3A09                       		move.w	a1,d5
000184B0 0445 D000                  		subi.w	#$D000,d5
000184B4 EC4D                       		lsr.w	#6,d5
000184B6 0245 007F                  		andi.w	#$7F,d5
000184BA 14C5                       		move.b	d5,(a2)+
000184BC 137C 0004 0001             		move.b	#4,1(a1)
000184C2 137C 0008 0019             		move.b	#8,$19(a1)
000184C8 137C 0006 0018             		move.b	#6,$18(a1)
000184CE 2368 0034 0034             		move.l	$34(a0),$34(a1)
000184D4 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000184D8                            
000184D8                            Obj48_MakeBall:
000184D8 137C 0008 0024             		move.b	#8,$24(a1)
000184DE 237C 0000 8870 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000184E6 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000184EC 137C 0001 001A             		move.b	#1,$1A(a1)
000184F2 137C 0005 0018             		move.b	#5,$18(a1)
000184F8 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000184FE 4E75                       		rts	
00018500                            ; ===========================================================================
00018500                            
00018500 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00018506                            
00018506                            ; ===========================================================================
00018506                            
00018506                            Obj48_Base:				; XREF: Obj48_Index
00018506 47F9 0001 8500             		lea	(Obj48_PosData).l,a3
0001850C 45E8 0028                  		lea	$28(a0),a2
00018510 7C00                       		moveq	#0,d6
00018512 1C1A                       		move.b	(a2)+,d6
00018514                            
00018514                            loc_17BC6:
00018514 7800                       		moveq	#0,d4
00018516 181A                       		move.b	(a2)+,d4
00018518 ED4C                       		lsl.w	#6,d4
0001851A 0684 00FF D000             		addi.l	#$FFD000,d4
00018520 2244                       		movea.l	d4,a1
00018522 101B                       		move.b	(a3)+,d0
00018524 B029 003C                  		cmp.b	$3C(a1),d0
00018528 6700                       		beq.s	loc_17BE0
0001852A 5229 003C                  		addq.b	#1,$3C(a1)
0001852E                            
0001852E                            loc_17BE0:
0001852E 51CE FFE4                  		dbf	d6,loc_17BC6
00018532                            
00018532 B029 003C                  		cmp.b	$3C(a1),d0
00018536 6600                       		bne.s	loc_17BFA
00018538 2268 0034                  		movea.l	$34(a0),a1
0001853C 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018542 6600                       		bne.s	loc_17BFA
00018544 5428 0024                  		addq.b	#2,$24(a0)
00018548                            
00018548                            loc_17BFA:
00018548 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001854E 6700                       		beq.s	Obj48_Display
00018550 5268 0032                  		addq.w	#1,$32(a0)
00018554                            
00018554                            Obj48_Display:
00018554 6100 0000                  		bsr.w	sub_17C2A
00018558 1028 0026                  		move.b	$26(a0),d0
0001855C 4EB9 0000 81F2             		jsr	(Obj15_Move2).l
00018562 4EF9 0000 DE08             		jmp	DisplaySprite
00018568                            ; ===========================================================================
00018568                            
00018568                            Obj48_Display2:				; XREF: Obj48_Index
00018568 6100 0000                  		bsr.w	sub_17C2A
0001856C 4EB9 0000 81B2             		jsr	(Obj48_Move).l
00018572 4EF9 0000 DE08             		jmp	DisplaySprite
00018578                            
00018578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018578                            
00018578                            
00018578                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018578 2268 0034                  		movea.l	$34(a0),a1
0001857C 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018582 6400                       		bcc.s	loc_17C3C
00018584 0868 0000 001A             		bchg	#0,$1A(a0)
0001858A                            
0001858A                            loc_17C3C:
0001858A 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018590 3029 000C                  		move.w	$C(a1),d0
00018594 D068 0032                  		add.w	$32(a0),d0
00018598 3140 0038                  		move.w	d0,$38(a0)
0001859C 1169 0022 0022             		move.b	$22(a1),$22(a0)
000185A2 4A29 0022                  		tst.b	$22(a1)
000185A6 6A00                       		bpl.s	locret_17C66
000185A8 10BC 003F                  		move.b	#$3F,0(a0)
000185AC 117C 0000 0024             		move.b	#0,$24(a0)
000185B2                            
000185B2                            locret_17C66:
000185B2 4E75                       		rts	
000185B4                            ; End of function sub_17C2A
000185B4                            
000185B4                            ; ===========================================================================
000185B4                            
000185B4                            loc_17C68:				; XREF: Obj48_Index
000185B4 2268 0034                  		movea.l	$34(a0),a1
000185B8 4A29 0022                  		tst.b	$22(a1)
000185BC 6A00                       		bpl.s	Obj48_Display3
000185BE 10BC 003F                  		move.b	#$3F,0(a0)
000185C2 117C 0000 0024             		move.b	#0,$24(a0)
000185C8                            
000185C8                            Obj48_Display3:
000185C8 4EF9 0000 DE08             		jmp	DisplaySprite
000185CE                            ; ===========================================================================
000185CE                            
000185CE                            Obj48_ChkVanish:			; XREF: Obj48_Index
000185CE 7000                       		moveq	#0,d0
000185D0 4A28 001A                  		tst.b	$1A(a0)
000185D4 6600                       		bne.s	Obj48_Vanish
000185D6 5200                       		addq.b	#1,d0
000185D8                            
000185D8                            Obj48_Vanish:
000185D8 1140 001A                  		move.b	d0,$1A(a0)
000185DC 2268 0034                  		movea.l	$34(a0),a1
000185E0 4A29 0022                  		tst.b	$22(a1)
000185E4 6A00                       		bpl.s	Obj48_Display4
000185E6 117C 0000 0020             		move.b	#0,$20(a0)
000185EC 6100 FB94                  		bsr.w	BossDefeated
000185F0 5328 003C                  		subq.b	#1,$3C(a0)
000185F4 6A00                       		bpl.s	Obj48_Display4
000185F6 10BC 003F                  		move.b	#$3F,(a0)
000185FA 117C 0000 0024             		move.b	#0,$24(a0)
00018600                            
00018600                            Obj48_Display4:
00018600 4EF9 0000 DE08             		jmp	DisplaySprite
00018606                            ; ===========================================================================
00018606                            Ani_Eggman:
00018606                            	include "_anim\Eggman.asm"
00018606                            ; ---------------------------------------------------------------------------
00018606                            ; Animation script - Eggman (bosses)
00018606                            ; ---------------------------------------------------------------------------
00018606 0000                       		dc.w byte_17CD4-Ani_Eggman
00018608 0000                       		dc.w byte_17CD8-Ani_Eggman
0001860A 0000                       		dc.w byte_17CDC-Ani_Eggman
0001860C 0000                       		dc.w byte_17CE0-Ani_Eggman
0001860E 0000                       		dc.w byte_17CE4-Ani_Eggman
00018610 0000                       		dc.w byte_17CE8-Ani_Eggman
00018612 0000                       		dc.w byte_17CEC-Ani_Eggman
00018614 0000                       		dc.w byte_17CF0-Ani_Eggman
00018616 0000                       		dc.w byte_17CF4-Ani_Eggman
00018618 0000                       		dc.w byte_17CF8-Ani_Eggman
0001861A 0000                       		dc.w byte_17CFC-Ani_Eggman
0001861C 0000                       		dc.w byte_17D00-Ani_Eggman
0001861E 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018622 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00018626 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
0001862A 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
0001862E 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018632 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00018636 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
0001863A 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
0001863E 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018642 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00018646 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
0001864A 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018656                            		even
00018656                            		even
00018656                            Ani_TetoB:
00018656                            	include "_anim\TetoB.asm"
00018656                            ; ---------------------------------------------------------------------------
00018656                            ; Animation script - Eggman (bosses)
00018656                            ; ---------------------------------------------------------------------------
00018656 0000                       		dc.w spin-Ani_TetoB
00018658 0000                       		dc.w static-Ani_TetoB
0001865A 0000                       		dc.w static2-Ani_TetoB
0001865C 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
00018663 0500 FF                    static:	dc.b 5,	0, $FF
00018666 0501 FF                    static2:	dc.b 5,	1, $FF
0001866A 00                         		even
0001866A 00                         		even
0001866A                            ; ---------------------------------------------------------------------------
0001866A                            ; Sprite mappings - Eggman (boss levels)
0001866A                            ; ---------------------------------------------------------------------------
0001866A                            Map_Eggman:
0001866A                            	include "_maps\Eggman.asm"
0001866A                            Map_dc7e:
0001866A 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
0001866C 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
0001866E 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018670 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018672 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018674 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00018676 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018678 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
0001867A 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
0001867C 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
0001867E 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018680 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018682 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018684 06                         Map_dc7e_1A: 	dc.b $6
00018685 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
0001868A EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
0001868F FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00018694 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018699 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
0001869E 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
000186A3 02                         Map_dc7e_39: 	dc.b $2
000186A4 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000186A9 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
000186AE 02                         Map_dc7e_44: 	dc.b $2
000186AF E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000186B4 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000186B9 03                         Map_dc7e_4F: 	dc.b $3
000186BA E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
000186BF EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
000186C4 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
000186C9 03                         Map_dc7e_5F: 	dc.b $3
000186CA E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
000186CF EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
000186D4 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
000186D9 03                         Map_dc7e_6F: 	dc.b $3
000186DA E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000186DF EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000186E4 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000186E9 03                         Map_dc7e_7F: 	dc.b $3
000186EA E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000186EF E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000186F4 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000186F9 04                         Map_dc7e_8F: 	dc.b $4
000186FA E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000186FF E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018704 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018709 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
0001870E 01                         Map_dc7e_A4: 	dc.b $1
0001870F 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
00018714 01                         Map_dc7e_AA: 	dc.b $1
00018715 0405 0031 22               	dc.b $4, $5, $0, $31, $22
0001871A 00                         Map_dc7e_B0: 	dc.b $0
0001871B 02                         Map_dc7e_B1: 	dc.b $2
0001871C 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018721 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00018726 02                         Map_dc7e_BC: 	dc.b $2
00018727 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
0001872C 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018732 00                         	even
00018732 00                         	even
00018732                            
00018732                            ; ---------------------------------------------------------------------------
00018732                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018732                            ; ---------------------------------------------------------------------------
00018732                            Map_BossItems:
00018732                            	include "_maps\Boss items.asm"
00018732                            ; ---------------------------------------------------------------------------
00018732                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018732                            ; ---------------------------------------------------------------------------
00018732 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00018736 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
0001873A 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
0001873E 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018742 01                         byte_17DE4:	dc.b 1
00018743 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018748 02                         byte_17DEA:	dc.b 2
00018749 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
0001874E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018753 00                         		dc.b 0
00018754 01                         byte_17DF6:	dc.b 1
00018755 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001875A 01                         byte_17DFC:	dc.b 1
0001875B 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018760 01                         byte_17E02:	dc.b 1
00018761 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018766 04                         byte_17E08:	dc.b 4
00018767 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
0001876C F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018771 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018776 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001877B 00                         		dc.b 0
0001877C 02                         byte_17E1E:	dc.b 2
0001877D 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018782 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018787 00                         		dc.b 0
00018788 02                         byte_17E2A:	dc.b 2
00018789 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
0001878E 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018794 00                         		even
00018794 00                         		even
00018794                            
00018794                            ; ===========================================================================
00018794                            ; ---------------------------------------------------------------------------
00018794                            ; Object 77 - Fatass teto boss fight in LZ -STDH
00018794                            ; ---------------------------------------------------------------------------
00018794                            
00018794                            
00018794                            obj77:					; XREF: Obj_Index
00018794 7000                       		moveq	#0,d0
00018796 1028 0024                  		move.b	$24(a0),d0
0001879A 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
0001879E 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
000187A2                            ; ===========================================================================
000187A2 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
000187A4 0000                       		dc.w obj77_ShipMain-obj77_Index
000187A6 0000                       		dc.w obj77_FaceMain-obj77_Index
000187A8 0000                       		dc.w obj77_FlameMain-obj77_Index
000187AA                            
000187AA 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
000187AC 0401                       		dc.b 4,	1
000187AE 0607                       		dc.b 6,	7
000187B0                            ; ===========================================================================
000187B0                            
000187B0                            obj77_Main:				; XREF: obj77_Index
000187B0 45F9 0001 87AA             		lea	(obj77_ObjData).l,a2
000187B6 2248                       		movea.l	a0,a1
000187B8 7202                       		moveq	#2,d1
000187BA 6000                       		bra.s	obj77_LoadBoss
000187BC                            ; ===========================================================================
000187BC                            
000187BC                            obj77_Loop:
000187BC 4EB9 0000 E2A4             		jsr	SingleObjLoad2
000187C2 6600                       		bne.s	loc2_17772
000187C4                            
000187C4                            obj77_LoadBoss:				; XREF: obj77_Main
000187C4 135A 0024                  		move.b	(a2)+,$24(a1)
000187C8 12BC 0077                  		move.b	#$77,0(a1)
000187CC 3368 0008 0008             		move.w	8(a0),8(a1)
000187D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000187D8 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
000187E0 337C 0400 0002             		move.w	#$400,2(a1)
000187E6 137C 0004 0001             		move.b	#4,1(a1)
000187EC 137C 0020 0019             		move.b	#$20,$19(a1)
000187F2 137C 0003 0018             		move.b	#3,$18(a1)
000187F8 135A 001C                  		move.b	(a2)+,$1C(a1)
000187FC 2348 0034                  		move.l	a0,$34(a1)
00018800 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
00018804                            
00018804                            loc2_17772:
00018804 3168 0008 0030             		move.w	8(a0),$30(a0)
0001880A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018810 117C 000F 0020             		move.b	#$F,$20(a0)
00018816 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001881C                            
0001881C                            obj77_ShipMain:				; XREF: obj77_Index
0001881C 7000                       		moveq	#0,d0
0001881E 1028 0025                  		move.b	$25(a0),d0
00018822 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00018826 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
0001882A 43F9 0001 8656             		lea	(Ani_TetoB).l,a1
00018830 4EB9 0000 AEC8             		jsr	AnimateSprite
00018836 1028 0022                  		move.b	$22(a0),d0
0001883A 0200 0003                  		andi.b	#3,d0
0001883E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018844 8128 0001                  		or.b	d0,1(a0)
00018848 4EF9 0000 DE08             		jmp	DisplaySprite
0001884E                            ; ===========================================================================
0001884E 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
00018850 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00018852 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00018854 0000                       		dc.w loc2_17954-obj77_ShipIndex
00018856 0000                       		dc.w fatassruns-obj77_ShipIndex		
00018858 0000                       		dc.w loc2_1797A-obj77_ShipIndex
0001885A 0000                       		dc.w loc2_179AC-obj77_ShipIndex
0001885C 0000                       		dc.w loc2_179F6-obj77_ShipIndex
0001885E                            ; ===========================================================================
0001885E                            
0001885E                            obj77_ShipStart:			; XREF: obj77_ShipIndex
0001885E                            	;	move.w	#$100,$12(a0)	; move ship down
0001885E 6100 F964                  		bsr.w	BossMove
00018862 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00018868 6600                       		bne.s	loc2_177E6
0001886A 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018870 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018874                            
00018874                            loc2_177E6:
00018874                            ;		move.b	$3F(a0),d0
00018874                            ;		jsr	(CalcSine).l
00018874 EC40                       		asr.w	#6,d0
00018876 D068 0038                  		add.w	$38(a0),d0
0001887A 3140 000C                  		move.w	d0,$C(a0)
0001887E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018884 5428 003F                  		addq.b	#2,$3F(a0)
00018888 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
0001888E 6400                       		bcc.s	locret_1784A2
00018890 4A28 0022                  		tst.b	$22(a0)
00018894 6B00                       		bmi.s	loc2_1784C
00018896 4A28 0020                  		tst.b	$20(a0)
0001889A 6600                       		bne.s	locret_1784A2
0001889C 4A28 003E                  		tst.b	$3E(a0)
000188A0 6600                       		bne.s	obj77_ShipFlash
000188A2 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
000188A8 303C 00AC                  		move.w	#$AC,d0
000188AC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
000188B2                            
000188B2                            obj77_ShipFlash:
000188B2 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000188B6 7000                       		moveq	#0,d0		; move 0 (black) to d0
000188B8 4A51                       		tst.w	(a1)
000188BA 6600                       		bne.s	loc2_1783C
000188BC 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000188C0                            
000188C0                            loc2_1783C:
000188C0 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000188C2 5328 003E                  		subq.b	#1,$3E(a0)
000188C6 6600                       		bne.s	locret_1784A2
000188C8 117C 000F 0020             		move.b	#$F,$20(a0)
000188CE                            
000188CE                            locret_1784A2:
000188CE 4E75                       		rts	
000188D0                            ; ===========================================================================
000188D0                            
000188D0                            loc2_1784C:				; XREF: loc2_177E6
000188D0 7064                       		moveq	#100,d0
000188D2 6100 0000                  		bsr.w	AddPoints
000188D6 117C 000A 0025             		move.b	#$A,$25(a0)
000188DC 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000188E2 4E75                       		rts	
000188E4                            ; ===========================================================================
000188E4                            
000188E4                            obj77_MakeBall:				; XREF: obj77_ShipIndex
000188E4 317C FF00 0010             		move.w	#-$100,$10(a0)
000188EA 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
000188F0 6100 F8D2                  		bsr.w	BossMove
000188F4 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
000188FA 6600                       		bne.s	loc2_17916
000188FC 317C 0000 0010             		move.w	#0,$10(a0)
00018902 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00018908 317C 0000 0012             		move.w	#0,$12(a0)
0001890E 5428 0025                  		addq.b	#2,$25(a0)
00018912                            
00018912                            loc2_17910:
00018912 317C 0077 003C             		move.w	#$77,$3C(a0)
00018918                            
00018918                            loc2_17916:
00018918 6000 FF5A                  		bra.w	loc2_177E6
0001891C                            ; ===========================================================================
0001891C                            
0001891C                            obj77_ShipMove:				; XREF: obj77_ShipIndex
0001891C 6100 F8A6                  		bsr.w	BossMove
00018920 5368 003C                  		subq.w	#1,$3C(a0)
00018924 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00018926 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
0001892C 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
00018932 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00018938 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
0001893E 6600                       		bne.s	loc2_17950 ; if not branch
00018940                            
00018940                            fatass_attack:
00018940 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00018946 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
0001894C 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
00018952 6600                       		bne.s	loc2_17950    ; if not you know the drill
00018954 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018958 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
0001895E                            
0001895E                            loc2_17950:
0001895E 6000 FF14                  		bra.w	loc2_177E6
00018962                            ; ===========================================================================
00018962                            
00018962                            loc2_17954:				; XREF: obj77_ShipIndex
00018962 6100 F860                  		bsr.w	BossMove
00018966 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
0001896C                            		; i suck at programming
0001896C 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
00018972 6600                       		bne.s	loc2_17976    ; if not blah blah
00018974 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
0001897A 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
0001897E 303C 00B9                  		move.w	#$B9,d0
00018982 4EB9 0000 15BA             		jsr	(PlaySound).l	; play the earthquake sound
00018988                            
00018988                            Peartobombs:	
00018988 4EB9 0000 E2A4                		jsr	SingleObjLoad2
0001898E 6600                       		bne.s	secondone
00018990 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00018994 337C 1D70 0008             		move.w	#$1D70,8(a1)
0001899A 337C 0670 000C             		move.w	#$670,$C(a1)
000189A0                            secondone:		
000189A0 4EB9 0000 E2A4                		jsr	SingleObjLoad2
000189A6 6600                       		bne.s	loc2_17976		
000189A8 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
000189AC 337C 1D20 0008             		move.w	#$1D20,8(a1)
000189B2 337C 0670 000C             		move.w	#$670,$C(a1)
000189B8                            lastone:
000189B8 4EB9 0000 E2A4                		jsr	SingleObjLoad2
000189BE 6600                       		bne.s	loc2_17976		
000189C0 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
000189C4 337C 1E00 0008             		move.w	#$1E00,8(a1)
000189CA 337C 0670 000C             		move.w	#$670,$C(a1)
000189D0                            		
000189D0                            loc2_17976:
000189D0 6000 FEA2                  		bra.w	loc2_177E6
000189D4                            		
000189D4                            ; ===========================================================================
000189D4                            Fatassruns:
000189D4 6100 F7EE                   		bsr.w	BossMove
000189D8 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
000189DE 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
000189E4 6600                       		bne.s	processstuff ; is not go here
000189E6 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
000189EC 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
000189F2 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
000189F6 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
000189FC 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018A02                            		
00018A02                            		
00018A02                            processstuff:
00018A02 6000 FE70                  		bra.w	loc2_177E6
00018A06                            ; ===========================================================================
00018A06                            
00018A06                            loc2_1797A:				; XREF: obj77_ShipIndex
00018A06 5368 003C                  		subq.w	#1,$3C(a0)
00018A0A 6B00                       		bmi.s	loc2_17984
00018A0C 6000 F774                  		bra.w	BossDefeated
00018A10                            ; ===========================================================================
00018A10                            
00018A10                            loc2_17984:
00018A10 08E8 0000 0022             		bset	#0,$22(a0)
00018A16 08A8 0007 0022             		bclr	#7,$22(a0)
00018A1C 4268 0010                  		clr.w	$10(a0)
00018A20 5428 0025                  		addq.b	#2,$25(a0)
00018A24 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018A2A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018A2E 6600                       		bne.s	locret_179AA2
00018A30 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018A36                            
00018A36                            locret_179AA2:
00018A36 4E75                       		rts	
00018A38                            ; ===========================================================================
00018A38                            
00018A38                            loc2_179AC:				; XREF: obj77_ShipIndex
00018A38 5268 003C                  		addq.w	#1,$3C(a0)
00018A3C 6700                       		beq.s	loc2_179BC
00018A3E 6A00                       		bpl.s	loc2_179C2
00018A40 0668 0018 0012             		addi.w	#$18,$12(a0)
00018A46 6000                       		bra.s	loc2_179EE
00018A48                            ; ===========================================================================
00018A48                            
00018A48                            loc2_179BC:
00018A48 4268 0012                  		clr.w	$12(a0)
00018A4C 6000                       		bra.s	loc2_179EE
00018A4E                            ; ===========================================================================
00018A4E                            
00018A4E                            loc2_179C2:
00018A4E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018A54 6500                       		bcs.s	loc2_179DA
00018A56 6700                       		beq.s	loc2_179E0
00018A58 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018A5E 6500                       		bcs.s	loc2_179EE
00018A60 5428 0025                  		addq.b	#2,$25(a0)
00018A64 6000                       		bra.s	loc2_179EE
00018A66                            ; ===========================================================================
00018A66                            
00018A66                            loc2_179DA:
00018A66 5168 0012                  		subq.w	#8,$12(a0)
00018A6A 6000                       		bra.s	loc2_179EE
00018A6C                            ; ===========================================================================
00018A6C                            
00018A6C                            loc2_179E0:
00018A6C 4268 0012                  		clr.w	$12(a0)
00018A70 303C 0097                  		move.w	#$97,d0
00018A74 4EB9 0000 15BA             		jsr	(PlaySound).l	; play lz3 music
00018A7A                            
00018A7A                            loc2_179EE:
00018A7A 6100 F748                  		bsr.w	BossMove
00018A7E 6000 FDF4                  		bra.w	loc2_177E6
00018A82                            ; ===========================================================================
00018A82                            
00018A82                            loc2_179F6:				; XREF: obj77_ShipIndex
00018A82 317C 0400 0010             		move.w	#$400,$10(a0)
00018A88 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018A8E 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018A94 6700                       		beq.s	loc2_17A10
00018A96 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018A9A 6000                       		bra.s	loc2_17A16
00018A9C                            ; ===========================================================================
00018A9C                            
00018A9C                            loc2_17A10:
00018A9C 4A28 0001                  		tst.b	1(a0)
00018AA0 6A00                       		bpl.s	obj77_ShipDel
00018AA2                            
00018AA2                            loc2_17A16:
00018AA2 6100 F720                  		bsr.w	BossMove
00018AA6 6000 FDCC                  		bra.w	loc2_177E6
00018AAA                            ; ===========================================================================
00018AAA                            
00018AAA                            obj77_ShipDel:
00018AAA 4EF9 0000 DE44             		jmp	DeleteObject
00018AB0                            ; ===========================================================================
00018AB0                            
00018AB0                            obj77_FaceMain:				; XREF: obj77_Index
00018AB0 4E75                       		rts
00018AB2                            ; ===========================================================================
00018AB2                            
00018AB2                            obj77_FlameMain:			; XREF: obj77_Index
00018AB2 4E75                       		rts
00018AB4                            ; ===========================================================================
00018AB4                            
00018AB4                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018AB4 43F9 0001 8656             		lea	(Ani_TetoB).l,a1
00018ABA 4EB9 0000 AEC8             		jsr	AnimateSprite
00018AC0 4EF9 0000 DE08             		jmp	DisplaySprite
00018AC6                            ; ---------------------------------------------------------------------------
00018AC6                            ; Sprite mappings - Fatass teto boss
00018AC6                            ; ---------------------------------------------------------------------------
00018AC6                            Map_TetoBoss:
00018AC6                            	include "_maps\tetoboss.asm"
00018AC6                            Map_f09a:
00018AC6 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018AC8 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018ACA 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018ACC 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018ACE 03                         Map_f09a_8: 	dc.b $3
00018ACF E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018AD4 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018AD9 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018ADE 06                         Map_f09a_18: 	dc.b $6
00018ADF EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018AE4 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018AE9 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018AEE 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018AF3 EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018AF8 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018AFD 03                         Map_f09a_37: 	dc.b $3
00018AFE E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018B03 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018B08 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018B0D 06                         Map_f09a_47: 	dc.b $6
00018B0E ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018B13 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018B18 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018B1D DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018B22 ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018B27 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018B2C                            	even
00018B2C                            	even
00018B2C                            ; ===========================================================================
00018B2C                            ; ---------------------------------------------------------------------------
00018B2C                            ; Object 73 - Eggman (MZ)
00018B2C                            ; ---------------------------------------------------------------------------
00018B2C                            
00018B2C                            Obj73:					; XREF: Obj_Index
00018B2C 7000                       		moveq	#0,d0
00018B2E 1028 0024                  		move.b	$24(a0),d0
00018B32 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018B36 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018B3A                            ; ===========================================================================
00018B3A 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018B3C 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018B3E 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018B40 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018B42 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018B44                            
00018B44 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018B47 0401 04                    		dc.b 4,	1, 4
00018B4A 0607 04                    		dc.b 6,	7, 4
00018B4D 0800 03                    		dc.b 8,	0, 3
00018B50                            ; ===========================================================================
00018B50                            
00018B50                            Obj73_Main:				; XREF: Obj73_Index
00018B50 3168 0008 0030             		move.w	8(a0),$30(a0)
00018B56 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018B5C 117C 000F 0020             		move.b	#$F,$20(a0)
00018B62 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018B68 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018B6C 2248                       		movea.l	a0,a1
00018B6E 7203                       		moveq	#3,d1
00018B70 6000                       		bra.s	Obj73_LoadBoss
00018B72                            ; ===========================================================================
00018B72                            
00018B72                            Obj73_Loop:
00018B72 4EB9 0000 E2A4             		jsr	SingleObjLoad2
00018B78 6600                       		bne.s	Obj73_ShipMain
00018B7A 12BC 0073                  		move.b	#$73,0(a1)
00018B7E 3368 0008 0008             		move.w	8(a0),8(a1)
00018B84 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018B8A                            
00018B8A                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018B8A 08A8 0000 0022             		bclr	#0,$22(a0)
00018B90 4229 0025                  		clr.b	$25(a1)
00018B94 135A 0024                  		move.b	(a2)+,$24(a1)
00018B98 135A 001C                  		move.b	(a2)+,$1C(a1)
00018B9C 135A 0018                  		move.b	(a2)+,$18(a1)
00018BA0 237C 0001 866A 0004        		move.l	#Map_Eggman,4(a1)
00018BA8 337C 0400 0002             		move.w	#$400,2(a1)
00018BAE 137C 0004 0001             		move.b	#4,1(a1)
00018BB4 137C 0020 0019             		move.b	#$20,$19(a1)
00018BBA 2348 0034                  		move.l	a0,$34(a1)
00018BBE 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018BC2                            
00018BC2                            Obj73_ShipMain:
00018BC2 7000                       		moveq	#0,d0
00018BC4 1028 0025                  		move.b	$25(a0),d0
00018BC8 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018BCC 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018BD0 43F9 0001 8606             		lea	(Ani_Eggman).l,a1
00018BD6 4EB9 0000 AEC8             		jsr	AnimateSprite
00018BDC 7003                       		moveq	#3,d0
00018BDE C028 0022                  		and.b	$22(a0),d0
00018BE2 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018BE8 8128 0001                  		or.b	d0,1(a0)
00018BEC 4EF9 0000 DE08             		jmp	DisplaySprite
00018BF2                            ; ===========================================================================
00018BF2 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018BF4 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018BF6 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018BF8 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018BFA 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018BFC                            ; ===========================================================================
00018BFC                            
00018BFC                            loc_18302:				; XREF: Obj73_ShipIndex
00018BFC 1028 003F                  		move.b	$3F(a0),d0
00018C00 5428 003F                  		addq.b	#2,$3F(a0)
00018C04 4EB9 0000 2CEC             		jsr	(CalcSine).l
00018C0A E440                       		asr.w	#2,d0
00018C0C 3140 0012                  		move.w	d0,$12(a0)
00018C10 317C FF00 0010             		move.w	#-$100,$10(a0)
00018C16 6100 F5AC                  		bsr.w	BossMove
00018C1A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018C20 6600                       		bne.s	loc_18334
00018C22 5428 0025                  		addq.b	#2,$25(a0)
00018C26 4228 0028                  		clr.b	$28(a0)
00018C2A 42A8 0010                  		clr.l	$10(a0)
00018C2E                            
00018C2E                            loc_18334:
00018C2E 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00018C34 1140 0034                  		move.b	d0,$34(a0)
00018C38                            
00018C38                            loc_1833E:
00018C38 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018C3E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018C44 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018C4A 6400                       		bcc.s	locret_18390
00018C4C 4A28 0022                  		tst.b	$22(a0)
00018C50 6B00                       		bmi.s	loc_18392
00018C52 4A28 0020                  		tst.b	$20(a0)
00018C56 6600                       		bne.s	locret_18390
00018C58 4A28 003E                  		tst.b	$3E(a0)
00018C5C 6600                       		bne.s	loc_18374
00018C5E 117C 0028 003E             		move.b	#$28,$3E(a0)
00018C64 303C 00AC                  		move.w	#$AC,d0
00018C68 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018C6E                            
00018C6E                            loc_18374:
00018C6E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018C72 7000                       		moveq	#0,d0
00018C74 4A51                       		tst.w	(a1)
00018C76 6600                       		bne.s	loc_18382
00018C78 303C 0EEE                  		move.w	#$EEE,d0
00018C7C                            
00018C7C                            loc_18382:
00018C7C 3280                       		move.w	d0,(a1)
00018C7E 5328 003E                  		subq.b	#1,$3E(a0)
00018C82 6600                       		bne.s	locret_18390
00018C84 117C 000F 0020             		move.b	#$F,$20(a0)
00018C8A                            
00018C8A                            locret_18390:
00018C8A 4E75                       		rts	
00018C8C                            ; ===========================================================================
00018C8C                            
00018C8C                            loc_18392:				; XREF: loc_1833E
00018C8C 7064                       		moveq	#100,d0
00018C8E 6100 0000                  		bsr.w	AddPoints
00018C92 117C 0004 0025             		move.b	#4,$25(a0)
00018C98 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018C9E 4268 0010                  		clr.w	$10(a0)
00018CA2 4E75                       		rts	
00018CA4                            ; ===========================================================================
00018CA4                            
00018CA4                            loc_183AA:				; XREF: Obj73_ShipIndex
00018CA4 7000                       		moveq	#0,d0
00018CA6 1028 0028                  		move.b	$28(a0),d0
00018CAA 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018CAE 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018CB2 0228 0006 0028             		andi.b	#6,$28(a0)
00018CB8 6000 FF7E                  		bra.w	loc_1833E
00018CBC                            ; ===========================================================================
00018CBC 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018CBE 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018CC0 0000                       		dc.w loc_183CA-off_183C2
00018CC2 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018CC4                            ; ===========================================================================
00018CC4                            
00018CC4                            loc_183CA:				; XREF: off_183C2
00018CC4 4A68 0010                  		tst.w	$10(a0)
00018CC8 6600                       		bne.s	loc_183FE
00018CCA 7040                       		moveq	#$40,d0
00018CCC 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018CD2 6700                       		beq.s	loc_183E6
00018CD4 6500                       		bcs.s	loc_183DE
00018CD6 4440                       		neg.w	d0
00018CD8                            
00018CD8                            loc_183DE:
00018CD8 3140 0012                  		move.w	d0,$12(a0)
00018CDC 6000 F4E6                  		bra.w	BossMove
00018CE0                            ; ===========================================================================
00018CE0                            
00018CE0                            loc_183E6:
00018CE0 317C 0200 0010             		move.w	#$200,$10(a0)
00018CE6 317C 0100 0012             		move.w	#$100,$12(a0)
00018CEC 0828 0000 0022             		btst	#0,$22(a0)
00018CF2 6600                       		bne.s	loc_183FE
00018CF4 4468 0010                  		neg.w	$10(a0)
00018CF8                            
00018CF8                            loc_183FE:
00018CF8 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018CFE 6400                       		bcc.s	Obj73_MakeLava
00018D00 6100 F4C2                  		bsr.w	BossMove
00018D04 5968 0012                  		subq.w	#4,$12(a0)
00018D08                            
00018D08                            Obj73_MakeLava:
00018D08 5328 0034                  		subq.b	#1,$34(a0)
00018D0C 6400                       		bcc.s	loc_1845C
00018D0E 4EB9 0000 E28E             		jsr	SingleObjLoad
00018D14 6600                       		bne.s	loc_1844A
00018D16 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018D1A 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018D20 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00018D26 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018D2C 80FC 0050                  		divu.w	#$50,d0
00018D30 4840                       		swap	d0
00018D32 0640 1878                  		addi.w	#$1878,d0
00018D36 3340 0008                  		move.w	d0,8(a1)
00018D3A EE09                       		lsr.b	#7,d1
00018D3C 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018D42                            
00018D42                            loc_1844A:
00018D42 4EB9 0000 2CC6             		jsr	(RandomNumber).l
00018D48 0200 001F                  		andi.b	#$1F,d0
00018D4C 0600 0040                  		addi.b	#$40,d0
00018D50 1140 0034                  		move.b	d0,$34(a0)
00018D54                            
00018D54                            loc_1845C:
00018D54 0828 0000 0022             		btst	#0,$22(a0)
00018D5A 6700                       		beq.s	loc_18474
00018D5C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018D62 6D00                       		blt.s	locret_1849C
00018D64 317C 1910 0030             		move.w	#$1910,$30(a0)
00018D6A 6000                       		bra.s	loc_18482
00018D6C                            ; ===========================================================================
00018D6C                            
00018D6C                            loc_18474:
00018D6C 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018D72 6E00                       		bgt.s	locret_1849C
00018D74 317C 1830 0030             		move.w	#$1830,$30(a0)
00018D7A                            
00018D7A                            loc_18482:
00018D7A 4268 0010                  		clr.w	$10(a0)
00018D7E 317C FE80 0012             		move.w	#-$180,$12(a0)
00018D84 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018D8A 6400                       		bcc.s	loc_18498
00018D8C 4468 0012                  		neg.w	$12(a0)
00018D90                            
00018D90                            loc_18498:
00018D90 5428 0028                  		addq.b	#2,$28(a0)
00018D94                            
00018D94                            locret_1849C:
00018D94 4E75                       		rts	
00018D96                            ; ===========================================================================
00018D96                            
00018D96                            Obj73_MakeLava2:			; XREF: off_183C2
00018D96 6100 F42C                  		bsr.w	BossMove
00018D9A 3028 0038                  		move.w	$38(a0),d0
00018D9E 0440 022C                  		subi.w	#$22C,d0
00018DA2 6E00                       		bgt.s	locret_184F4
00018DA4 303C 022C                  		move.w	#$22C,d0
00018DA8 4A68 0012                  		tst.w	$12(a0)
00018DAC 6700                       		beq.s	loc_184EA
00018DAE 4268 0012                  		clr.w	$12(a0)
00018DB2 317C 0050 003C             		move.w	#$50,$3C(a0)
00018DB8 0868 0000 0022             		bchg	#0,$22(a0)
00018DBE 4EB9 0000 E28E             		jsr	SingleObjLoad
00018DC4 6600                       		bne.s	loc_184EA
00018DC6 3368 0030 0008             		move.w	$30(a0),8(a1)
00018DCC 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018DD2 0669 0018 000C             		addi.w	#$18,$C(a1)
00018DD8 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018DDC 137C 0001 0028             		move.b	#1,$28(a1)
00018DE2                            
00018DE2                            loc_184EA:
00018DE2 5368 003C                  		subq.w	#1,$3C(a0)
00018DE6 6600                       		bne.s	locret_184F4
00018DE8 5428 0028                  		addq.b	#2,$28(a0)
00018DEC                            
00018DEC                            locret_184F4:
00018DEC 4E75                       		rts	
00018DEE                            ; ===========================================================================
00018DEE                            
00018DEE                            loc_184F6:				; XREF: Obj73_ShipIndex
00018DEE 5368 003C                  		subq.w	#1,$3C(a0)
00018DF2 6B00                       		bmi.s	loc_18500
00018DF4 6000 F38C                  		bra.w	BossDefeated
00018DF8                            ; ===========================================================================
00018DF8                            
00018DF8                            loc_18500:
00018DF8 08E8 0000 0022             		bset	#0,$22(a0)
00018DFE 08A8 0007 0022             		bclr	#7,$22(a0)
00018E04 4268 0010                  		clr.w	$10(a0)
00018E08 5428 0025                  		addq.b	#2,$25(a0)
00018E0C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018E12 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018E16 6600                       		bne.s	locret_1852A
00018E18 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018E1E 4268 0012                  		clr.w	$12(a0)
00018E22                            
00018E22                            locret_1852A:
00018E22 4E75                       		rts	
00018E24                            ; ===========================================================================
00018E24                            
00018E24                            loc_1852C:				; XREF: Obj73_ShipIndex
00018E24 5268 003C                  		addq.w	#1,$3C(a0)
00018E28 6700                       		beq.s	loc_18544
00018E2A 6A00                       		bpl.s	loc_1854E
00018E2C 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018E32 6400                       		bcc.s	loc_18544
00018E34 0668 0018 0012             		addi.w	#$18,$12(a0)
00018E3A 6000                       		bra.s	loc_1857A
00018E3C                            ; ===========================================================================
00018E3C                            
00018E3C                            loc_18544:
00018E3C 4268 0012                  		clr.w	$12(a0)
00018E40 4268 003C                  		clr.w	$3C(a0)
00018E44 6000                       		bra.s	loc_1857A
00018E46                            ; ===========================================================================
00018E46                            
00018E46                            loc_1854E:
00018E46 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018E4C 6500                       		bcs.s	loc_18566
00018E4E 6700                       		beq.s	loc_1856C
00018E50 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018E56 6500                       		bcs.s	loc_1857A
00018E58 5428 0025                  		addq.b	#2,$25(a0)
00018E5C 6000                       		bra.s	loc_1857A
00018E5E                            ; ===========================================================================
00018E5E                            
00018E5E                            loc_18566:
00018E5E 5168 0012                  		subq.w	#8,$12(a0)
00018E62 6000                       		bra.s	loc_1857A
00018E64                            ; ===========================================================================
00018E64                            
00018E64                            loc_1856C:
00018E64 4268 0012                  		clr.w	$12(a0)
00018E68 303C 0083                  		move.w	#$83,d0
00018E6C 4EB9 0000 15BA             		jsr	(PlaySound).l	; play MZ music
00018E72                            
00018E72                            loc_1857A:
00018E72 6100 F350                  		bsr.w	BossMove
00018E76 6000 FDC0                  		bra.w	loc_1833E
00018E7A                            ; ===========================================================================
00018E7A                            
00018E7A                            loc_18582:				; XREF: Obj73_ShipIndex
00018E7A 317C 0500 0010             		move.w	#$500,$10(a0)
00018E80 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018E86 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018E8C 6400                       		bcc.s	loc_1859C
00018E8E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018E92 6000                       		bra.s	loc_185A2
00018E94                            ; ===========================================================================
00018E94                            
00018E94                            loc_1859C:
00018E94 4A28 0001                  		tst.b	1(a0)
00018E98 6A00                       		bpl.s	Obj73_ShipDel
00018E9A                            
00018E9A                            loc_185A2:
00018E9A 6100 F328                  		bsr.w	BossMove
00018E9E 6000 FD98                  		bra.w	loc_1833E
00018EA2                            ; ===========================================================================
00018EA2                            
00018EA2                            Obj73_ShipDel:
00018EA2 4EF9 0000 DE44             		jmp	DeleteObject
00018EA8                            ; ===========================================================================
00018EA8                            
00018EA8                            Obj73_FaceMain:				; XREF: Obj73_Index
00018EA8 7000                       		moveq	#0,d0
00018EAA 7201                       		moveq	#1,d1
00018EAC 2268 0034                  		movea.l	$34(a0),a1
00018EB0 1029 0025                  		move.b	$25(a1),d0
00018EB4 5540                       		subq.w	#2,d0
00018EB6 6600                       		bne.s	loc_185D2
00018EB8 0829 0001 0028             		btst	#1,$28(a1)
00018EBE 6700                       		beq.s	loc_185DA
00018EC0 4A69 0012                  		tst.w	$12(a1)
00018EC4 6600                       		bne.s	loc_185DA
00018EC6 7204                       		moveq	#4,d1
00018EC8 6000                       		bra.s	loc_185EE
00018ECA                            ; ===========================================================================
00018ECA                            
00018ECA                            loc_185D2:
00018ECA 5500                       		subq.b	#2,d0
00018ECC 6B00                       		bmi.s	loc_185DA
00018ECE 720A                       		moveq	#$A,d1
00018ED0 6000                       		bra.s	loc_185EE
00018ED2                            ; ===========================================================================
00018ED2                            
00018ED2                            loc_185DA:
00018ED2 4A29 0020                  		tst.b	$20(a1)
00018ED6 6600                       		bne.s	loc_185E4
00018ED8 7205                       		moveq	#5,d1
00018EDA 6000                       		bra.s	loc_185EE
00018EDC                            ; ===========================================================================
00018EDC                            
00018EDC                            loc_185E4:
00018EDC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018EE2 6500                       		bcs.s	loc_185EE
00018EE4 7204                       		moveq	#4,d1
00018EE6                            
00018EE6                            loc_185EE:
00018EE6 1141 001C                  		move.b	d1,$1C(a0)
00018EEA 5900                       		subq.b	#4,d0
00018EEC 6600                       		bne.s	loc_18602
00018EEE 117C 0006 001C             		move.b	#6,$1C(a0)
00018EF4 4A28 0001                  		tst.b	1(a0)
00018EF8 6A00                       		bpl.s	Obj73_FaceDel
00018EFA                            
00018EFA                            loc_18602:
00018EFA 6000                       		bra.s	Obj73_Display
00018EFC                            ; ===========================================================================
00018EFC                            
00018EFC                            Obj73_FaceDel:
00018EFC 4EF9 0000 DE44             		jmp	DeleteObject
00018F02                            ; ===========================================================================
00018F02                            
00018F02                            Obj73_FlameMain:			; XREF: Obj73_Index
00018F02 117C 0007 001C             		move.b	#7,$1C(a0)
00018F08 2268 0034                  		movea.l	$34(a0),a1
00018F0C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018F12 6D00                       		blt.s	loc_1862A
00018F14 117C 000B 001C             		move.b	#$B,$1C(a0)
00018F1A 4A28 0001                  		tst.b	1(a0)
00018F1E 6A00                       		bpl.s	Obj73_FlameDel
00018F20 6000                       		bra.s	loc_18636
00018F22                            ; ===========================================================================
00018F22                            
00018F22                            loc_1862A:
00018F22 4A69 0010                  		tst.w	$10(a1)
00018F26 6700                       		beq.s	loc_18636
00018F28 117C 0008 001C             		move.b	#8,$1C(a0)
00018F2E                            
00018F2E                            loc_18636:
00018F2E 6000                       		bra.s	Obj73_Display
00018F30                            ; ===========================================================================
00018F30                            
00018F30                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018F30 4EF9 0000 DE44             		jmp	DeleteObject
00018F36                            ; ===========================================================================
00018F36                            
00018F36                            Obj73_Display:
00018F36 43F9 0001 8606             		lea	(Ani_Eggman).l,a1
00018F3C 4EB9 0000 AEC8             		jsr	AnimateSprite
00018F42                            
00018F42                            loc_1864A:
00018F42 2268 0034                  		movea.l	$34(a0),a1
00018F46 3169 0008 0008             		move.w	8(a1),8(a0)
00018F4C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018F52 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018F58 7003                       		moveq	#3,d0
00018F5A C028 0022                  		and.b	$22(a0),d0
00018F5E 0228 00FC 0001             		andi.b	#-4,1(a0)
00018F64 8128 0001                  		or.b	d0,1(a0)
00018F68 4EF9 0000 DE08             		jmp	DisplaySprite
00018F6E                            ; ===========================================================================
00018F6E                            
00018F6E                            Obj73_TubeMain:				; XREF: Obj73_Index
00018F6E 2268 0034                  		movea.l	$34(a0),a1
00018F72 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018F78 6600                       		bne.s	loc_18688
00018F7A 4A28 0001                  		tst.b	1(a0)
00018F7E 6A00                       		bpl.s	Obj73_TubeDel
00018F80                            
00018F80                            loc_18688:
00018F80 217C 0001 8732 0004        		move.l	#Map_BossItems,4(a0)
00018F88 317C 246C 0002             		move.w	#$246C,2(a0)
00018F8E 117C 0004 001A             		move.b	#4,$1A(a0)
00018F94 60AC                       		bra.s	loc_1864A
00018F96                            ; ===========================================================================
00018F96                            
00018F96                            Obj73_TubeDel:
00018F96 4EF9 0000 DE44             		jmp	DeleteObject
00018F9C                            ; ===========================================================================
00018F9C                            ; ---------------------------------------------------------------------------
00018F9C                            ; Object 74 - lava that	Eggman drops (MZ)
00018F9C                            ; ---------------------------------------------------------------------------
00018F9C                            
00018F9C                            Obj74:					; XREF: Obj_Index
00018F9C 7000                       		moveq	#0,d0
00018F9E 1028 0024                  		move.b	$24(a0),d0
00018FA2 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018FA6 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018FAA 4EF9 0000 DE08             		jmp	DisplaySprite
00018FB0                            ; ===========================================================================
00018FB0 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018FB2 0000                       		dc.w Obj74_Action-Obj74_Index
00018FB4 0000                       		dc.w loc_18886-Obj74_Index
00018FB6 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018FB8                            ; ===========================================================================
00018FB8                            
00018FB8                            Obj74_Main:				; XREF: Obj74_Index
00018FB8 117C 0008 0016             		move.b	#8,$16(a0)
00018FBE 117C 0008 0017             		move.b	#8,$17(a0)
00018FC4 217C 0000 BAC6 0004        		move.l	#Map_obj14,4(a0)
00018FCC 317C 0345 0002             		move.w	#$345,2(a0)
00018FD2 117C 0004 0001             		move.b	#4,1(a0)
00018FD8 117C 0005 0018             		move.b	#5,$18(a0)
00018FDE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018FE4 117C 0008 0019             		move.b	#8,$19(a0)
00018FEA 5428 0024                  		addq.b	#2,$24(a0)
00018FEE 4A28 0028                  		tst.b	$28(a0)
00018FF2 6600                       		bne.s	loc_1870A
00018FF4 117C 008B 0020             		move.b	#$8B,$20(a0)
00018FFA 5428 0024                  		addq.b	#2,$24(a0)
00018FFE 6000 0000                  		bra.w	loc_18886
00019002                            ; ===========================================================================
00019002                            
00019002                            loc_1870A:
00019002 117C 001E 0029             		move.b	#$1E,$29(a0)
00019008 303C 00AE                  		move.w	#$AE,d0
0001900C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava sound
00019012                            
00019012                            Obj74_Action:				; XREF: Obj74_Index
00019012 7000                       		moveq	#0,d0
00019014 1028 0025                  		move.b	$25(a0),d0
00019018 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001901C 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00019020 4EB9 0000 DDE2             		jsr	SpeedToPos
00019026 43F9 0000 ECC2             		lea	(Ani_obj14).l,a1
0001902C 4EB9 0000 AEC8             		jsr	AnimateSprite
00019032 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00019038 6200                       		bhi.s	Obj74_Delete
0001903A 4E75                       		rts	
0001903C                            ; ===========================================================================
0001903C                            
0001903C                            Obj74_Delete:
0001903C 4EF9 0000 DE44             		jmp	DeleteObject
00019042                            ; ===========================================================================
00019042 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00019044 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00019046 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00019048 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001904A                            ; ===========================================================================
0001904A                            
0001904A                            Obj74_Drop:				; XREF: Obj74_Index2
0001904A 08E8 0001 0022             		bset	#1,$22(a0)
00019050 5328 0029                  		subq.b	#1,$29(a0)
00019054 6A00                       		bpl.s	locret_18780
00019056 117C 008B 0020             		move.b	#$8B,$20(a0)
0001905C 4228 0028                  		clr.b	$28(a0)
00019060 0668 0018 0012             		addi.w	#$18,$12(a0)
00019066 08A8 0001 0022             		bclr	#1,$22(a0)
0001906C 6100 C6A4                  		bsr.w	ObjHitFloor
00019070 4A41                       		tst.w	d1
00019072 6A00                       		bpl.s	locret_18780
00019074 5428 0025                  		addq.b	#2,$25(a0)
00019078                            
00019078                            locret_18780:
00019078 4E75                       		rts	
0001907A                            ; ===========================================================================
0001907A                            
0001907A                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001907A 5568 000C                  		subq.w	#2,$C(a0)
0001907E 08E8 0007 0002             		bset	#7,2(a0)
00019084 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001908A 4268 0012                  		clr.w	$12(a0)
0001908E 3168 0008 0030             		move.w	8(a0),$30(a0)
00019094 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001909A 117C 0003 0029             		move.b	#3,$29(a0)
000190A0 4EB9 0000 E2A4             		jsr	SingleObjLoad2
000190A6 6600                       		bne.s	loc_187CA
000190A8 47D1                       		lea	(a1),a3
000190AA 45D0                       		lea	(a0),a2
000190AC 7003                       		moveq	#3,d0
000190AE                            
000190AE                            Obj74_Loop:
000190AE 26DA                       		move.l	(a2)+,(a3)+
000190B0 26DA                       		move.l	(a2)+,(a3)+
000190B2 26DA                       		move.l	(a2)+,(a3)+
000190B4 26DA                       		move.l	(a2)+,(a3)+
000190B6 51C8 FFF6                  		dbf	d0,Obj74_Loop
000190BA                            
000190BA 4469 0010                  		neg.w	$10(a1)
000190BE 5429 0025                  		addq.b	#2,$25(a1)
000190C2                            
000190C2                            loc_187CA:
000190C2 5428 0025                  		addq.b	#2,$25(a0)
000190C6 4E75                       		rts	
000190C8                            
000190C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000190C8                            
000190C8                            
000190C8                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000190C8 4EB9 0000 E2A4             		jsr	SingleObjLoad2
000190CE 6600                       		bne.s	locret_187EE
000190D0 3368 0008 0008             		move.w	8(a0),8(a1)
000190D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000190DC 12BC 0074                  		move.b	#$74,(a1)
000190E0 337C 0067 0028             		move.w	#$67,$28(a1)
000190E6                            
000190E6                            locret_187EE:
000190E6 4E75                       		rts	
000190E8                            ; End of function Obj74_Duplicate2
000190E8                            
000190E8                            ; ===========================================================================
000190E8                            
000190E8                            Obj74_Duplicate:			; XREF: Obj74_Index2
000190E8 6100 C628                  		bsr.w	ObjHitFloor
000190EC 4A41                       		tst.w	d1
000190EE 6A00                       		bpl.s	loc_18826
000190F0 3028 0008                  		move.w	8(a0),d0
000190F4 0C40 1940                  		cmpi.w	#$1940,d0
000190F8 6E00                       		bgt.s	loc_1882C
000190FA 3228 0030                  		move.w	$30(a0),d1
000190FE B240                       		cmp.w	d0,d1
00019100 6700                       		beq.s	loc_1881E
00019102 0240 0010                  		andi.w	#$10,d0
00019106 0241 0010                  		andi.w	#$10,d1
0001910A B240                       		cmp.w	d0,d1
0001910C 6700                       		beq.s	loc_1881E
0001910E 61B8                       		bsr.s	Obj74_Duplicate2
00019110 3168 0008 0032             		move.w	8(a0),$32(a0)
00019116                            
00019116                            loc_1881E:
00019116 3168 0008 0030             		move.w	8(a0),$30(a0)
0001911C 4E75                       		rts	
0001911E                            ; ===========================================================================
0001911E                            
0001911E                            loc_18826:
0001911E 5428 0025                  		addq.b	#2,$25(a0)
00019122 4E75                       		rts	
00019124                            ; ===========================================================================
00019124                            
00019124                            loc_1882C:
00019124 5428 0024                  		addq.b	#2,$24(a0)
00019128 4E75                       		rts	
0001912A                            ; ===========================================================================
0001912A                            
0001912A                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001912A 08A8 0001 0022             		bclr	#1,$22(a0)
00019130 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00019136 3028 0008                  		move.w	8(a0),d0
0001913A 9068 0032                  		sub.w	$32(a0),d0
0001913E 6A00                       		bpl.s	loc_1884A
00019140 4440                       		neg.w	d0
00019142                            
00019142                            loc_1884A:
00019142 0C40 0012                  		cmpi.w	#$12,d0
00019146 6600                       		bne.s	loc_18856
00019148 08A8 0007 0002             		bclr	#7,2(a0)
0001914E                            
0001914E                            loc_18856:
0001914E 6100 C5C2                  		bsr.w	ObjHitFloor
00019152 4A41                       		tst.w	d1
00019154 6A00                       		bpl.s	locret_1887E
00019156 5328 0029                  		subq.b	#1,$29(a0)
0001915A 6700                       		beq.s	Obj74_Delete2
0001915C 4268 0012                  		clr.w	$12(a0)
00019160 3168 0032 0008             		move.w	$32(a0),8(a0)
00019166 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001916C 08E8 0007 0002             		bset	#7,2(a0)
00019172 5528 0025                  		subq.b	#2,$25(a0)
00019176                            
00019176                            locret_1887E:
00019176 4E75                       		rts	
00019178                            ; ===========================================================================
00019178                            
00019178                            Obj74_Delete2:
00019178 4EF9 0000 DE44             		jmp	DeleteObject
0001917E                            ; ===========================================================================
0001917E                            
0001917E                            loc_18886:				; XREF: Obj74_Index
0001917E 08E8 0007 0002             		bset	#7,2(a0)
00019184 5328 0029                  		subq.b	#1,$29(a0)
00019188 6600                       		bne.s	Obj74_Animate
0001918A 117C 0001 001C             		move.b	#1,$1C(a0)
00019190 5968 000C                  		subq.w	#4,$C(a0)
00019194 4228 0020                  		clr.b	$20(a0)
00019198                            
00019198                            Obj74_Animate:
00019198 43F9 0000 ECC2             		lea	(Ani_obj14).l,a1
0001919E 4EF9 0000 AEC8             		jmp	AnimateSprite
000191A4                            ; ===========================================================================
000191A4                            
000191A4                            Obj74_Delete3:				; XREF: Obj74_Index
000191A4 4EF9 0000 DE44             		jmp	DeleteObject
000191AA                            ; ===========================================================================
000191AA                            
000191AA                            Obj7A_Delete:
000191AA 4EF9 0000 DE44             		jmp	DeleteObject
000191B0                            ; ===========================================================================
000191B0                            ; ---------------------------------------------------------------------------
000191B0                            ; Object 7A - Eggman (SLZ)
000191B0                            ; ---------------------------------------------------------------------------
000191B0                            
000191B0                            Obj7A:					; XREF: Obj_Index
000191B0 7000                       		moveq	#0,d0
000191B2 1028 0024                  		move.b	$24(a0),d0
000191B6 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000191BA 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000191BE                            ; ===========================================================================
000191BE 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000191C0 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000191C2 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000191C4 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000191C6 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000191C8                            
000191C8 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000191CB 0401 04                    		dc.b 4,	1, 4
000191CE 0607 04                    		dc.b 6,	7, 4
000191D1 0800 03                    		dc.b 8,	0, 3
000191D4                            ; ===========================================================================
000191D4                            
000191D4                            Obj7A_Main:				; XREF: Obj7A_Index
000191D4 317C 2188 0008             		move.w	#$2188,8(a0)
000191DA 317C 0228 000C             		move.w	#$228,$C(a0)
000191E0 3168 0008 0030             		move.w	8(a0),$30(a0)
000191E6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000191EC 117C 000F 0020             		move.b	#$F,$20(a0)
000191F2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000191F8 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000191FC 2248                       		movea.l	a0,a1
000191FE 7203                       		moveq	#3,d1
00019200 6000                       		bra.s	Obj7A_LoadBoss
00019202                            ; ===========================================================================
00019202                            
00019202                            Obj7A_Loop:
00019202 4EB9 0000 E2A4             		jsr	SingleObjLoad2
00019208 6600                       		bne.s	loc_1895C
0001920A 12BC 007A                  		move.b	#$7A,0(a1)
0001920E 3368 0008 0008             		move.w	8(a0),8(a1)
00019214 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001921A                            
0001921A                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001921A 08A8 0000 0022             		bclr	#0,$22(a0)
00019220 4229 0025                  		clr.b	$25(a1)
00019224 135A 0024                  		move.b	(a2)+,$24(a1)
00019228 135A 001C                  		move.b	(a2)+,$1C(a1)
0001922C 135A 0018                  		move.b	(a2)+,$18(a1)
00019230 237C 0001 866A 0004        		move.l	#Map_Eggman,4(a1)
00019238 337C 0400 0002             		move.w	#$400,2(a1)
0001923E 137C 0004 0001             		move.b	#4,1(a1)
00019244 137C 0020 0019             		move.b	#$20,$19(a1)
0001924A 2348 0034                  		move.l	a0,$34(a1)
0001924E 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019252                            
00019252                            loc_1895C:
00019252 43F8 D040                  		lea	($FFFFD040).w,a1
00019256 45E8 002A                  		lea	$2A(a0),a2
0001925A 705E                       		moveq	#$5E,d0
0001925C 723E                       		moveq	#$3E,d1
0001925E                            
0001925E                            loc_18968:
0001925E B011                       		cmp.b	(a1),d0
00019260 6600                       		bne.s	loc_18974
00019262 4A29 0028                  		tst.b	$28(a1)
00019266 6700                       		beq.s	loc_18974
00019268 34C9                       		move.w	a1,(a2)+
0001926A                            
0001926A                            loc_18974:
0001926A D2FC 0040                  		adda.w	#$40,a1
0001926E 51C9 FFEE                  		dbf	d1,loc_18968
00019272                            
00019272                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00019272 7000                       		moveq	#0,d0
00019274 1028 0025                  		move.b	$25(a0),d0
00019278 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001927C 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019280 43F9 0001 8606             		lea	(Ani_Eggman).l,a1
00019286 4EB9 0000 AEC8             		jsr	AnimateSprite
0001928C 7003                       		moveq	#3,d0
0001928E C028 0022                  		and.b	$22(a0),d0
00019292 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019298 8128 0001                  		or.b	d0,1(a0)
0001929C 4EF9 0000 DE08             		jmp	DisplaySprite
000192A2                            ; ===========================================================================
000192A2 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
000192A4 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
000192A6 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
000192A8 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
000192AA 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000192AC 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000192AE                            ; ===========================================================================
000192AE                            
000192AE                            loc_189B8:				; XREF: Obj7A_ShipIndex
000192AE 317C FF00 0010             		move.w	#-$100,$10(a0)
000192B4 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000192BA 6400                       		bcc.s	loc_189CA
000192BC 5428 0025                  		addq.b	#2,$25(a0)
000192C0                            
000192C0                            loc_189CA:
000192C0 6100 EF02                  		bsr.w	BossMove
000192C4 1028 003F                  		move.b	$3F(a0),d0
000192C8 5428 003F                  		addq.b	#2,$3F(a0)
000192CC 4EB9 0000 2CEC             		jsr	(CalcSine).l
000192D2 EC40                       		asr.w	#6,d0
000192D4 D068 0038                  		add.w	$38(a0),d0
000192D8 3140 000C                  		move.w	d0,$C(a0)
000192DC 3168 0030 0008             		move.w	$30(a0),8(a0)
000192E2 6000                       		bra.s	loc_189FE
000192E4                            ; ===========================================================================
000192E4                            
000192E4                            loc_189EE:
000192E4 6100 EEDE                  		bsr.w	BossMove
000192E8 3168 0038 000C             		move.w	$38(a0),$C(a0)
000192EE 3168 0030 0008             		move.w	$30(a0),8(a0)
000192F4                            
000192F4                            loc_189FE:
000192F4 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000192FA 6400                       		bcc.s	locret_18A44
000192FC 4A28 0022                  		tst.b	$22(a0)
00019300 6B00                       		bmi.s	loc_18A46
00019302 4A28 0020                  		tst.b	$20(a0)
00019306 6600                       		bne.s	locret_18A44
00019308 4A28 003E                  		tst.b	$3E(a0)
0001930C 6600                       		bne.s	loc_18A28
0001930E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019314 303C 00AC                  		move.w	#$AC,d0
00019318 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001931E                            
0001931E                            loc_18A28:
0001931E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019322 7000                       		moveq	#0,d0
00019324 4A51                       		tst.w	(a1)
00019326 6600                       		bne.s	loc_18A36
00019328 303C 0EEE                  		move.w	#$EEE,d0
0001932C                            
0001932C                            loc_18A36:
0001932C 3280                       		move.w	d0,(a1)
0001932E 5328 003E                  		subq.b	#1,$3E(a0)
00019332 6600                       		bne.s	locret_18A44
00019334 117C 000F 0020             		move.b	#$F,$20(a0)
0001933A                            
0001933A                            locret_18A44:
0001933A 4E75                       		rts	
0001933C                            ; ===========================================================================
0001933C                            
0001933C                            loc_18A46:
0001933C 7064                       		moveq	#100,d0
0001933E 6100 0000                  		bsr.w	AddPoints
00019342 117C 0006 0025             		move.b	#6,$25(a0)
00019348 117C 0078 003C             		move.b	#$78,$3C(a0)
0001934E 4268 0010                  		clr.w	$10(a0)
00019352 4E75                       		rts	
00019354                            ; ===========================================================================
00019354                            
00019354                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019354 3028 0030                  		move.w	$30(a0),d0
00019358 317C 0200 0010             		move.w	#$200,$10(a0)
0001935E 0828 0000 0022             		btst	#0,$22(a0)
00019364 6600                       		bne.s	loc_18A7C
00019366 4468 0010                  		neg.w	$10(a0)
0001936A 0C40 2008                  		cmpi.w	#$2008,d0
0001936E 6E00                       		bgt.s	loc_18A88
00019370 6000                       		bra.s	loc_18A82
00019372                            ; ===========================================================================
00019372                            
00019372                            loc_18A7C:
00019372 0C40 2138                  		cmpi.w	#$2138,d0
00019376 6D00                       		blt.s	loc_18A88
00019378                            
00019378                            loc_18A82:
00019378 0868 0000 0022             		bchg	#0,$22(a0)
0001937E                            
0001937E                            loc_18A88:
0001937E 3028 0008                  		move.w	8(a0),d0
00019382 72FF                       		moveq	#-1,d1
00019384 7402                       		moveq	#2,d2
00019386 45E8 002A                  		lea	$2A(a0),a2
0001938A 7828                       		moveq	#$28,d4
0001938C 4A68 0010                  		tst.w	$10(a0)
00019390 6A00                       		bpl.s	loc_18A9E
00019392 4444                       		neg.w	d4
00019394                            
00019394                            loc_18A9E:
00019394 321A                       		move.w	(a2)+,d1
00019396 2641                       		movea.l	d1,a3
00019398 082B 0003 0022             		btst	#3,$22(a3)
0001939E 6600                       		bne.s	loc_18AB4
000193A0 362B 0008                  		move.w	8(a3),d3
000193A4 D644                       		add.w	d4,d3
000193A6 9640                       		sub.w	d0,d3
000193A8 6700                       		beq.s	loc_18AC0
000193AA                            
000193AA                            loc_18AB4:
000193AA 51CA FFE8                  		dbf	d2,loc_18A9E
000193AE                            
000193AE 1142 0028                  		move.b	d2,$28(a0)
000193B2 6000 FF0C                  		bra.w	loc_189CA
000193B6                            ; ===========================================================================
000193B6                            
000193B6                            loc_18AC0:
000193B6 1142 0028                  		move.b	d2,$28(a0)
000193BA 5428 0025                  		addq.b	#2,$25(a0)
000193BE 117C 0028 003C             		move.b	#$28,$3C(a0)
000193C4 6000 FEFA                  		bra.w	loc_189CA
000193C8                            ; ===========================================================================
000193C8                            
000193C8                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000193C8 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000193CE 6600                       		bne.s	loc_18B36
000193D0 70FF                       		moveq	#-1,d0
000193D2 1028 0028                  		move.b	$28(a0),d0
000193D6 4880                       		ext.w	d0
000193D8 6B00                       		bmi.s	loc_18B40
000193DA 5540                       		subq.w	#2,d0
000193DC 4440                       		neg.w	d0
000193DE D040                       		add.w	d0,d0
000193E0 43E8 002A                  		lea	$2A(a0),a1
000193E4 3031 0000                  		move.w	(a1,d0.w),d0
000193E8 2440                       		movea.l	d0,a2
000193EA 43F8 D040                  		lea	($FFFFD040).w,a1
000193EE 723E                       		moveq	#$3E,d1
000193F0                            
000193F0                            loc_18AFA:
000193F0 B0A9 003C                  		cmp.l	$3C(a1),d0
000193F4 6700                       		beq.s	loc_18B40
000193F6 D2FC 0040                  		adda.w	#$40,a1
000193FA 51C9 FFF4                  		dbf	d1,loc_18AFA
000193FE                            
000193FE 2F08                       		move.l	a0,-(sp)
00019400 41D2                       		lea	(a2),a0
00019402 4EB9 0000 E2A4             		jsr	SingleObjLoad2
00019408 205F                       		movea.l	(sp)+,a0
0001940A 6600                       		bne.s	loc_18B40
0001940C 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019410 3368 0008 0008             		move.w	8(a0),8(a1)
00019416 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001941C 0669 0020 000C             		addi.w	#$20,$C(a1)
00019422 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019428 234A 003C                  		move.l	a2,$3C(a1)
0001942C                            
0001942C                            loc_18B36:
0001942C 5328 003C                  		subq.b	#1,$3C(a0)
00019430 6700                       		beq.s	loc_18B40
00019432 6000 FEC0                  		bra.w	loc_189FE
00019436                            ; ===========================================================================
00019436                            
00019436                            loc_18B40:
00019436 5528 0025                  		subq.b	#2,$25(a0)
0001943A 6000 FE84                  		bra.w	loc_189CA
0001943E                            ; ===========================================================================
0001943E                            
0001943E                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001943E 5328 003C                  		subq.b	#1,$3C(a0)
00019442 6B00                       		bmi.s	loc_18B52
00019444 6000 ED3C                  		bra.w	BossDefeated
00019448                            ; ===========================================================================
00019448                            
00019448                            loc_18B52:
00019448 5428 0025                  		addq.b	#2,$25(a0)
0001944C 4268 0012                  		clr.w	$12(a0)
00019450 08E8 0000 0022             		bset	#0,$22(a0)
00019456 08A8 0007 0022             		bclr	#7,$22(a0)
0001945C 4268 0010                  		clr.w	$10(a0)
00019460 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019466 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001946A 6600                       		bne.s	loc_18B7C
0001946C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019472                            
00019472                            loc_18B7C:
00019472 6000 FE80                  		bra.w	loc_189FE
00019476                            ; ===========================================================================
00019476                            
00019476                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019476 5228 003C                  		addq.b	#1,$3C(a0)
0001947A 6700                       		beq.s	loc_18B90
0001947C 6A00                       		bpl.s	loc_18B96
0001947E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019484 6000                       		bra.s	loc_18BC2
00019486                            ; ===========================================================================
00019486                            
00019486                            loc_18B90:
00019486 4268 0012                  		clr.w	$12(a0)
0001948A 6000                       		bra.s	loc_18BC2
0001948C                            ; ===========================================================================
0001948C                            
0001948C                            loc_18B96:
0001948C 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019492 6500                       		bcs.s	loc_18BAE
00019494 6700                       		beq.s	loc_18BB4
00019496 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001949C 6500                       		bcs.s	loc_18BC2
0001949E 5428 0025                  		addq.b	#2,$25(a0)
000194A2 6000                       		bra.s	loc_18BC2
000194A4                            ; ===========================================================================
000194A4                            
000194A4                            loc_18BAE:
000194A4 5168 0012                  		subq.w	#8,$12(a0)
000194A8 6000                       		bra.s	loc_18BC2
000194AA                            ; ===========================================================================
000194AA                            
000194AA                            loc_18BB4:
000194AA 4268 0012                  		clr.w	$12(a0)
000194AE 303C 0084                  		move.w	#$84,d0
000194B2 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SLZ music
000194B8                            
000194B8                            loc_18BC2:
000194B8 6000 FE2A                  		bra.w	loc_189EE
000194BC                            ; ===========================================================================
000194BC                            
000194BC                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000194BC 317C 0400 0010             		move.w	#$400,$10(a0)
000194C2 317C FFC0 0012             		move.w	#-$40,$12(a0)
000194C8 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000194CE 6400                       		bcc.s	loc_18BE0
000194D0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000194D4 6000                       		bra.s	loc_18BE8
000194D6                            ; ===========================================================================
000194D6                            
000194D6                            loc_18BE0:
000194D6 4A28 0001                  		tst.b	1(a0)
000194DA 6A00 FCCE                  		bpl.w	Obj7A_Delete
000194DE                            
000194DE                            loc_18BE8:
000194DE 6100 ECE4                  		bsr.w	BossMove
000194E2 6000 FDDC                  		bra.w	loc_189CA
000194E6                            ; ===========================================================================
000194E6                            
000194E6                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000194E6 7000                       		moveq	#0,d0
000194E8 7201                       		moveq	#1,d1
000194EA 2268 0034                  		movea.l	$34(a0),a1
000194EE 1029 0025                  		move.b	$25(a1),d0
000194F2 0C00 0006                  		cmpi.b	#6,d0
000194F6 6B00                       		bmi.s	loc_18C06
000194F8 720A                       		moveq	#$A,d1
000194FA 6000                       		bra.s	loc_18C1A
000194FC                            ; ===========================================================================
000194FC                            
000194FC                            loc_18C06:
000194FC 4A29 0020                  		tst.b	$20(a1)
00019500 6600                       		bne.s	loc_18C10
00019502 7205                       		moveq	#5,d1
00019504 6000                       		bra.s	loc_18C1A
00019506                            ; ===========================================================================
00019506                            
00019506                            loc_18C10:
00019506 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001950C 6500                       		bcs.s	loc_18C1A
0001950E 7204                       		moveq	#4,d1
00019510                            
00019510                            loc_18C1A:
00019510 1141 001C                  		move.b	d1,$1C(a0)
00019514 0C00 000A                  		cmpi.b	#$A,d0
00019518 6600                       		bne.s	loc_18C32
0001951A 117C 0006 001C             		move.b	#6,$1C(a0)
00019520 4A28 0001                  		tst.b	1(a0)
00019524 6A00 FC84                  		bpl.w	Obj7A_Delete
00019528                            
00019528                            loc_18C32:
00019528 6000                       		bra.s	loc_18C6C
0001952A                            ; ===========================================================================
0001952A                            
0001952A                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001952A 117C 0008 001C             		move.b	#8,$1C(a0)
00019530 2268 0034                  		movea.l	$34(a0),a1
00019534 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001953A 6600                       		bne.s	loc_18C56
0001953C 4A28 0001                  		tst.b	1(a0)
00019540 6A00 FC68                  		bpl.w	Obj7A_Delete
00019544 117C 000B 001C             		move.b	#$B,$1C(a0)
0001954A 6000                       		bra.s	loc_18C6C
0001954C                            ; ===========================================================================
0001954C                            
0001954C                            loc_18C56:
0001954C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019552 6E00                       		bgt.s	loc_18C6C
00019554 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001955A 6D00                       		blt.s	loc_18C6C
0001955C 117C 0007 001C             		move.b	#7,$1C(a0)
00019562                            
00019562                            loc_18C6C:
00019562 43F9 0001 8606             		lea	(Ani_Eggman).l,a1
00019568 4EB9 0000 AEC8             		jsr	AnimateSprite
0001956E                            
0001956E                            loc_18C78:
0001956E 2268 0034                  		movea.l	$34(a0),a1
00019572 3169 0008 0008             		move.w	8(a1),8(a0)
00019578 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001957E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019584 7003                       		moveq	#3,d0
00019586 C028 0022                  		and.b	$22(a0),d0
0001958A 0228 00FC 0001             		andi.b	#-4,1(a0)
00019590 8128 0001                  		or.b	d0,1(a0)
00019594 4EF9 0000 DE08             		jmp	DisplaySprite
0001959A                            ; ===========================================================================
0001959A                            
0001959A                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001959A 2268 0034                  		movea.l	$34(a0),a1
0001959E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000195A4 6600                       		bne.s	loc_18CB8
000195A6 4A28 0001                  		tst.b	1(a0)
000195AA 6A00 FBFE                  		bpl.w	Obj7A_Delete
000195AE                            
000195AE                            loc_18CB8:
000195AE 217C 0001 8732 0004        		move.l	#Map_BossItems,4(a0)
000195B6 317C 246C 0002             		move.w	#$246C,2(a0)
000195BC 117C 0003 001A             		move.b	#3,$1A(a0)
000195C2 60AA                       		bra.s	loc_18C78
000195C4                            ; ===========================================================================
000195C4                            ; ---------------------------------------------------------------------------
000195C4                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000195C4                            ; ---------------------------------------------------------------------------
000195C4                            
000195C4                            Obj7B:					; XREF: Obj_Index
000195C4 7000                       		moveq	#0,d0
000195C6 1028 0024                  		move.b	$24(a0),d0
000195CA 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000195CE 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000195D2 3028 0030                  		move.w	$30(a0),d0
000195D6 0240 FF80                  		andi.w	#$FF80,d0
000195DA 3238 F700                  		move.w	($FFFFF700).w,d1
000195DE 0441 0080                  		subi.w	#$80,d1
000195E2 0241 FF80                  		andi.w	#$FF80,d1
000195E6 9041                       		sub.w	d1,d0
000195E8 6B00 FBC0                  		bmi.w	Obj7A_Delete
000195EC 0C40 0280                  		cmpi.w	#$280,d0
000195F0 6200 FBB8                  		bhi.w	Obj7A_Delete
000195F4 4EF9 0000 DE08             		jmp	DisplaySprite
000195FA                            ; ===========================================================================
000195FA 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000195FC 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000195FE 0000                       		dc.w loc_18DC6-Obj7B_Index
00019600 0000                       		dc.w loc_18EAA-Obj7B_Index
00019602 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019604 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019606                            ; ===========================================================================
00019606                            
00019606                            Obj7B_Main:				; XREF: Obj7B_Index
00019606 217C 0001 21CE 0004        		move.l	#Map_obj5Ea,4(a0)
0001960E 317C 0518 0002             		move.w	#$518,2(a0)
00019614 117C 0001 001A             		move.b	#1,$1A(a0)
0001961A 0028 0004 0001             		ori.b	#4,1(a0)
00019620 117C 0004 0018             		move.b	#4,$18(a0)
00019626 117C 008B 0020             		move.b	#$8B,$20(a0)
0001962C 117C 000C 0019             		move.b	#$C,$19(a0)
00019632 2268 003C                  		movea.l	$3C(a0),a1
00019636 3169 0008 0030             		move.w	8(a1),$30(a0)
0001963C 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019642 08E8 0000 0022             		bset	#0,$22(a0)
00019648 3028 0008                  		move.w	8(a0),d0
0001964C B069 0008                  		cmp.w	8(a1),d0
00019650 6E00                       		bgt.s	loc_18D68
00019652 08A8 0000 0022             		bclr	#0,$22(a0)
00019658 117C 0002 003A             		move.b	#2,$3A(a0)
0001965E                            
0001965E                            loc_18D68:
0001965E 5428 0024                  		addq.b	#2,$24(a0)
00019662                            
00019662                            Obj7B_Fall:				; XREF: Obj7B_Index
00019662 4EB9 0000 DDB6             		jsr	ObjectFall
00019668 2268 003C                  		movea.l	$3C(a0),a1
0001966C 45F9 0000 0000             		lea	(word_19018).l,a2
00019672 7000                       		moveq	#0,d0
00019674 1029 001A                  		move.b	$1A(a1),d0
00019678 3228 0008                  		move.w	8(a0),d1
0001967C 9268 0030                  		sub.w	$30(a0),d1
00019680 6400                       		bcc.s	loc_18D8E
00019682 5440                       		addq.w	#2,d0
00019684                            
00019684                            loc_18D8E:
00019684 D040                       		add.w	d0,d0
00019686 3228 0034                  		move.w	$34(a0),d1
0001968A D272 0000                  		add.w	(a2,d0.w),d1
0001968E B268 000C                  		cmp.w	$C(a0),d1
00019692 6E00                       		bgt.s	locret_18DC4
00019694 2268 003C                  		movea.l	$3C(a0),a1
00019698 7202                       		moveq	#2,d1
0001969A 0828 0000 0022             		btst	#0,$22(a0)
000196A0 6700                       		beq.s	loc_18DAE
000196A2 7200                       		moveq	#0,d1
000196A4                            
000196A4                            loc_18DAE:
000196A4 317C 00F0 0028             		move.w	#$F0,$28(a0)
000196AA 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000196B0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000196B6 6000 0000                  		bra.w	loc_18FA2
000196BA                            ; ===========================================================================
000196BA                            
000196BA                            locret_18DC4:
000196BA 4E75                       		rts	
000196BC                            ; ===========================================================================
000196BC                            
000196BC                            loc_18DC6:				; XREF: Obj7B_Index
000196BC 2268 003C                  		movea.l	$3C(a0),a1
000196C0 7000                       		moveq	#0,d0
000196C2 1028 003A                  		move.b	$3A(a0),d0
000196C6 9029 003A                  		sub.b	$3A(a1),d0
000196CA 6700                       		beq.s	loc_18E2A
000196CC 6400                       		bcc.s	loc_18DDA
000196CE 4400                       		neg.b	d0
000196D0                            
000196D0                            loc_18DDA:
000196D0 323C F7E8                  		move.w	#-$818,d1
000196D4 343C FEEC                  		move.w	#-$114,d2
000196D8 0C00 0001                  		cmpi.b	#1,d0
000196DC 6700                       		beq.s	loc_18E00
000196DE 323C F6A0                  		move.w	#-$960,d1
000196E2 343C FF0C                  		move.w	#-$F4,d2
000196E6 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000196EC 6D00                       		blt.s	loc_18E00
000196EE 323C F5E0                  		move.w	#-$A20,d1
000196F2 343C FF80                  		move.w	#-$80,d2
000196F6                            
000196F6                            loc_18E00:
000196F6 3141 0012                  		move.w	d1,$12(a0)
000196FA 3142 0010                  		move.w	d2,$10(a0)
000196FE 3028 0008                  		move.w	8(a0),d0
00019702 9068 0030                  		sub.w	$30(a0),d0
00019706 6400                       		bcc.s	loc_18E16
00019708 4468 0010                  		neg.w	$10(a0)
0001970C                            
0001970C                            loc_18E16:
0001970C 117C 0001 001A             		move.b	#1,$1A(a0)
00019712 317C 0020 0028             		move.w	#$20,$28(a0)
00019718 5428 0024                  		addq.b	#2,$24(a0)
0001971C 6000 0000                  		bra.w	loc_18EAA
00019720                            ; ===========================================================================
00019720                            
00019720                            loc_18E2A:				; XREF: loc_18DC6
00019720 45F9 0000 0000             		lea	(word_19018).l,a2
00019726 7000                       		moveq	#0,d0
00019728 1029 001A                  		move.b	$1A(a1),d0
0001972C 343C 0028                  		move.w	#$28,d2
00019730 3228 0008                  		move.w	8(a0),d1
00019734 9268 0030                  		sub.w	$30(a0),d1
00019738 6400                       		bcc.s	loc_18E48
0001973A 4442                       		neg.w	d2
0001973C 5440                       		addq.w	#2,d0
0001973E                            
0001973E                            loc_18E48:
0001973E D040                       		add.w	d0,d0
00019740 3228 0034                  		move.w	$34(a0),d1
00019744 D272 0000                  		add.w	(a2,d0.w),d1
00019748 3141 000C                  		move.w	d1,$C(a0)
0001974C D468 0030                  		add.w	$30(a0),d2
00019750 3142 0008                  		move.w	d2,8(a0)
00019754 4268 000E                  		clr.w	$E(a0)
00019758 4268 000A                  		clr.w	$A(a0)
0001975C 5368 0028                  		subq.w	#1,$28(a0)
00019760 6600                       		bne.s	loc_18E7A
00019762 317C 0020 0028             		move.w	#$20,$28(a0)
00019768 117C 0008 0024             		move.b	#8,$24(a0)
0001976E 4E75                       		rts	
00019770                            ; ===========================================================================
00019770                            
00019770                            loc_18E7A:
00019770 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019776 6600                       		bne.s	loc_18E88
00019778 117C 0005 001F             		move.b	#5,$1F(a0)
0001977E                            
0001977E                            loc_18E88:
0001977E 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019784 6600                       		bne.s	loc_18E96
00019786 117C 0002 001F             		move.b	#2,$1F(a0)
0001978C                            
0001978C                            loc_18E96:
0001978C 5328 001E                  		subq.b	#1,$1E(a0)
00019790 6E00                       		bgt.s	locret_18EA8
00019792 0868 0000 001A             		bchg	#0,$1A(a0)
00019798 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001979E                            
0001979E                            locret_18EA8:
0001979E 4E75                       		rts	
000197A0                            ; ===========================================================================
000197A0                            
000197A0                            loc_18EAA:				; XREF: Obj7B_Index
000197A0 43F8 D040                  		lea	($FFFFD040).w,a1
000197A4 707A                       		moveq	#$7A,d0
000197A6 7240                       		moveq	#$40,d1
000197A8 743E                       		moveq	#$3E,d2
000197AA                            
000197AA                            loc_18EB4:
000197AA B011                       		cmp.b	(a1),d0
000197AC 6700                       		beq.s	loc_18EC0
000197AE D2C1                       		adda.w	d1,a1
000197B0 51CA FFF8                  		dbf	d2,loc_18EB4
000197B4                            
000197B4 6000                       		bra.s	loc_18F38
000197B6                            ; ===========================================================================
000197B6                            
000197B6                            loc_18EC0:
000197B6 3029 0008                  		move.w	8(a1),d0
000197BA 3229 000C                  		move.w	$C(a1),d1
000197BE 3428 0008                  		move.w	8(a0),d2
000197C2 3628 000C                  		move.w	$C(a0),d3
000197C6 45FA 0000                  		lea	byte_19022(pc),a2
000197CA 47FA 0000                  		lea	byte_19026(pc),a3
000197CE 181A                       		move.b	(a2)+,d4
000197D0 4884                       		ext.w	d4
000197D2 D044                       		add.w	d4,d0
000197D4 181B                       		move.b	(a3)+,d4
000197D6 4884                       		ext.w	d4
000197D8 D444                       		add.w	d4,d2
000197DA B440                       		cmp.w	d0,d2
000197DC 6500                       		bcs.s	loc_18F38
000197DE 181A                       		move.b	(a2)+,d4
000197E0 4884                       		ext.w	d4
000197E2 D044                       		add.w	d4,d0
000197E4 181B                       		move.b	(a3)+,d4
000197E6 4884                       		ext.w	d4
000197E8 D444                       		add.w	d4,d2
000197EA B042                       		cmp.w	d2,d0
000197EC 6500                       		bcs.s	loc_18F38
000197EE 181A                       		move.b	(a2)+,d4
000197F0 4884                       		ext.w	d4
000197F2 D244                       		add.w	d4,d1
000197F4 181B                       		move.b	(a3)+,d4
000197F6 4884                       		ext.w	d4
000197F8 D644                       		add.w	d4,d3
000197FA B641                       		cmp.w	d1,d3
000197FC 6500                       		bcs.s	loc_18F38
000197FE 181A                       		move.b	(a2)+,d4
00019800 4884                       		ext.w	d4
00019802 D244                       		add.w	d4,d1
00019804 181B                       		move.b	(a3)+,d4
00019806 4884                       		ext.w	d4
00019808 D644                       		add.w	d4,d3
0001980A B243                       		cmp.w	d3,d1
0001980C 6500                       		bcs.s	loc_18F38
0001980E 5428 0024                  		addq.b	#2,$24(a0)
00019812 4268 0028                  		clr.w	$28(a0)
00019816 4229 0020                  		clr.b	$20(a1)
0001981A 5329 0021                  		subq.b	#1,$21(a1)
0001981E 6600                       		bne.s	loc_18F38
00019820 08E9 0007 0022             		bset	#7,$22(a1)
00019826 4268 0010                  		clr.w	$10(a0)
0001982A 4268 0012                  		clr.w	$12(a0)
0001982E                            
0001982E                            loc_18F38:
0001982E 4A68 0012                  		tst.w	$12(a0)
00019832 6A00                       		bpl.s	loc_18F5C
00019834 4EB9 0000 DDB6             		jsr	ObjectFall
0001983A 3028 0034                  		move.w	$34(a0),d0
0001983E 0440 002F                  		subi.w	#$2F,d0
00019842 B068 000C                  		cmp.w	$C(a0),d0
00019846 6E00                       		bgt.s	loc_18F58
00019848 4EB9 0000 DDB6             		jsr	ObjectFall
0001984E                            
0001984E                            loc_18F58:
0001984E 6000 FF20                  		bra.w	loc_18E7A
00019852                            ; ===========================================================================
00019852                            
00019852                            loc_18F5C:
00019852 4EB9 0000 DDB6             		jsr	ObjectFall
00019858 2268 003C                  		movea.l	$3C(a0),a1
0001985C 45F9 0000 0000             		lea	(word_19018).l,a2
00019862 7000                       		moveq	#0,d0
00019864 1029 001A                  		move.b	$1A(a1),d0
00019868 3228 0008                  		move.w	8(a0),d1
0001986C 9268 0030                  		sub.w	$30(a0),d1
00019870 6400                       		bcc.s	loc_18F7E
00019872 5440                       		addq.w	#2,d0
00019874                            
00019874                            loc_18F7E:
00019874 D040                       		add.w	d0,d0
00019876 3228 0034                  		move.w	$34(a0),d1
0001987A D272 0000                  		add.w	(a2,d0.w),d1
0001987E B268 000C                  		cmp.w	$C(a0),d1
00019882 6ECA                       		bgt.s	loc_18F58
00019884 2268 003C                  		movea.l	$3C(a0),a1
00019888 7202                       		moveq	#2,d1
0001988A 4A68 0010                  		tst.w	$10(a0)
0001988E 6B00                       		bmi.s	loc_18F9C
00019890 7200                       		moveq	#0,d1
00019892                            
00019892                            loc_18F9C:
00019892 317C 0000 0028             		move.w	#0,$28(a0)
00019898                            
00019898                            loc_18FA2:
00019898 1341 003A                  		move.b	d1,$3A(a1)
0001989C 1141 003A                  		move.b	d1,$3A(a0)
000198A0 B229 001A                  		cmp.b	$1A(a1),d1
000198A4 6700                       		beq.s	loc_19008
000198A6 08A9 0003 0022             		bclr	#3,$22(a1)
000198AC 6700                       		beq.s	loc_19008
000198AE 4229 0025                  		clr.b	$25(a1)
000198B2 137C 0002 0024             		move.b	#2,$24(a1)
000198B8 45F8 D000                  		lea	($FFFFD000).w,a2
000198BC 3568 0012 0012             		move.w	$12(a0),$12(a2)
000198C2 446A 0012                  		neg.w	$12(a2)
000198C6 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000198CC 6600                       		bne.s	loc_18FDC
000198CE E0EA 0012                  		asr	$12(a2)
000198D2                            
000198D2                            loc_18FDC:
000198D2 08EA 0001 0022             		bset	#1,$22(a2)
000198D8 08AA 0003 0022             		bclr	#3,$22(a2)
000198DE 422A 003C                  		clr.b	$3C(a2)
000198E2 2F08                       		move.l	a0,-(sp)
000198E4 41D2                       		lea	(a2),a0
000198E6 4EBA A368                  		jsr	Obj01_ChkRoll
000198EA 205F                       		movea.l	(sp)+,a0
000198EC 157C 0002 0024             		move.b	#2,$24(a2)
000198F2 303C 00CC                  		move.w	#$CC,d0
000198F6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spring" sound
000198FC                            
000198FC                            loc_19008:
000198FC 4268 0010                  		clr.w	$10(a0)
00019900 4268 0012                  		clr.w	$12(a0)
00019904 5428 0024                  		addq.b	#2,$24(a0)
00019908 6000 FE66                  		bra.w	loc_18E7A
0001990C                            ; ===========================================================================
0001990C FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019916                            		even
00019916 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001991A                            		even
0001991A 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001991E                            		even
0001991E                            ; ===========================================================================
0001991E                            
0001991E                            Obj7B_Explode:				; XREF: Obj7B_Index
0001991E 10BC 003F                  		move.b	#$3F,(a0)
00019922 4228 0024                  		clr.b	$24(a0)
00019926 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001992C 6700                       		beq.s	Obj7B_MakeFrag
0001992E 4E75                       		rts	
00019930                            ; ===========================================================================
00019930                            
00019930                            Obj7B_MakeFrag:
00019930 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019936 7203                       		moveq	#3,d1
00019938 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001993C                            
0001993C                            Obj7B_Loop:
0001993C 4EB9 0000 E28E             		jsr	SingleObjLoad
00019942 6600                       		bne.s	loc_1909A
00019944 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019948 137C 000A 0024             		move.b	#$A,$24(a1)
0001994E 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019956 137C 0003 0018             		move.b	#3,$18(a1)
0001995C 337C 0518 0002             		move.w	#$518,2(a1)
00019962 3368 0008 0008             		move.w	8(a0),8(a1)
00019968 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001996E 335A 0010                  		move.w	(a2)+,$10(a1)
00019972 335A 0012                  		move.w	(a2)+,$12(a1)
00019976 137C 0098 0020             		move.b	#$98,$20(a1)
0001997C 0029 0004 0001             		ori.b	#4,1(a1)
00019982 08E9 0007 0001             		bset	#7,1(a1)
00019988 137C 000C 0019             		move.b	#$C,$19(a1)
0001998E                            
0001998E                            loc_1909A:
0001998E 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019992                            
00019992 4E75                       		rts	
00019994                            ; ===========================================================================
00019994 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019998 FF60 FDC0                  		dc.w $FF60, $FDC0
0001999C 0100 FCC0                  		dc.w $100, $FCC0
000199A0 00A0 FDC0                  		dc.w $A0, $FDC0
000199A4                            ; ===========================================================================
000199A4                            
000199A4                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
000199A4 4EB9 0000 DDE2             		jsr	SpeedToPos
000199AA 3168 0008 0030             		move.w	8(a0),$30(a0)
000199B0 3168 000C 0034             		move.w	$C(a0),$34(a0)
000199B6 0668 0018 0012             		addi.w	#$18,$12(a0)
000199BC 7004                       		moveq	#4,d0
000199BE C078 FE0E                  		and.w	($FFFFFE0E).w,d0
000199C2 E448                       		lsr.w	#2,d0
000199C4 1140 001A                  		move.b	d0,$1A(a0)
000199C8 4A28 0001                  		tst.b	1(a0)
000199CC 6A00 F7DC                  		bpl.w	Obj7A_Delete
000199D0 4E75                       		rts	
000199D2                            ; ===========================================================================
000199D2                            ; ---------------------------------------------------------------------------
000199D2                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000199D2                            ; ---------------------------------------------------------------------------
000199D2                            Map_obj7B:
000199D2                            	include "_maps\obj7B.asm"
000199D2                            ; ---------------------------------------------------------------------------
000199D2                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000199D2                            ; ---------------------------------------------------------------------------
000199D2 0000                       		dc.w byte_190E2-Map_obj7B
000199D4 0000                       		dc.w byte_190E8-Map_obj7B
000199D6 01                         byte_190E2:	dc.b 1
000199D7 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000199DC 01                         byte_190E8:	dc.b 1
000199DD FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000199E2                            		even
000199E2                            		even
000199E2                            
000199E2                            ; ===========================================================================
000199E2                            ; ---------------------------------------------------------------------------
000199E2                            ; Object 75 - Eggman (SYZ)
000199E2                            ; ---------------------------------------------------------------------------
000199E2                            
000199E2                            Obj75:					; XREF: Obj_Index
000199E2 7000                       		moveq	#0,d0
000199E4 1028 0024                  		move.b	$24(a0),d0
000199E8 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
000199EC 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
000199F0                            ; ===========================================================================
000199F0 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
000199F2 0000                       		dc.w Obj75_ShipMain-Obj75_Index
000199F4 0000                       		dc.w Obj75_FaceMain-Obj75_Index
000199F6 0000                       		dc.w Obj75_FlameMain-Obj75_Index
000199F8 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
000199FA                            
000199FA 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
000199FD 0401 05                    		dc.b 4,	1, 5
00019A00 0607 05                    		dc.b 6,	7, 5
00019A03 0800 05                    		dc.b 8,	0, 5
00019A06                            ; ===========================================================================
00019A06                            
00019A06                            Obj75_Main:				; XREF: Obj75_Index
00019A06 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019A0C 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019A12 3168 0008 0030             		move.w	8(a0),$30(a0)
00019A18 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019A1E 117C 000F 0020             		move.b	#$F,$20(a0)
00019A24 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019A2A 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019A2E 2248                       		movea.l	a0,a1
00019A30 7203                       		moveq	#3,d1
00019A32 6000                       		bra.s	Obj75_LoadBoss
00019A34                            ; ===========================================================================
00019A34                            
00019A34                            Obj75_Loop:
00019A34 4EB9 0000 E2A4             		jsr	SingleObjLoad2
00019A3A 6600                       		bne.s	Obj75_ShipMain
00019A3C 12BC 0075                  		move.b	#$75,(a1)
00019A40 3368 0008 0008             		move.w	8(a0),8(a1)
00019A46 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019A4C                            
00019A4C                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019A4C 08A8 0000 0022             		bclr	#0,$22(a0)
00019A52 4229 0025                  		clr.b	$25(a1)
00019A56 135A 0024                  		move.b	(a2)+,$24(a1)
00019A5A 135A 001C                  		move.b	(a2)+,$1C(a1)
00019A5E 135A 0018                  		move.b	(a2)+,$18(a1)
00019A62 237C 0001 866A 0004        		move.l	#Map_Eggman,4(a1)
00019A6A 337C 0400 0002             		move.w	#$400,2(a1)
00019A70 137C 0004 0001             		move.b	#4,1(a1)
00019A76 137C 0020 0019             		move.b	#$20,$19(a1)
00019A7C 2348 0034                  		move.l	a0,$34(a1)
00019A80 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019A84                            
00019A84                            Obj75_ShipMain:				; XREF: Obj75_Index
00019A84 7000                       		moveq	#0,d0
00019A86 1028 0025                  		move.b	$25(a0),d0
00019A8A 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019A8E 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019A92 43F9 0001 8606             		lea	(Ani_Eggman).l,a1
00019A98 4EB9 0000 AEC8             		jsr	AnimateSprite
00019A9E 7003                       		moveq	#3,d0
00019AA0 C028 0022                  		and.b	$22(a0),d0
00019AA4 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019AAA 8128 0001                  		or.b	d0,1(a0)
00019AAE 4EF9 0000 DE08             		jmp	DisplaySprite
00019AB4                            ; ===========================================================================
00019AB4 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019AB8 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019ABC 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019AC0                            ; ===========================================================================
00019AC0                            
00019AC0                            loc_191CC:				; XREF: Obj75_ShipIndex
00019AC0 317C FF00 0010             		move.w	#-$100,$10(a0)
00019AC6 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019ACC 6400                       		bcc.s	loc_191DE
00019ACE 5428 0025                  		addq.b	#2,$25(a0)
00019AD2                            
00019AD2                            loc_191DE:
00019AD2 1028 003F                  		move.b	$3F(a0),d0
00019AD6 5428 003F                  		addq.b	#2,$3F(a0)
00019ADA 4EB9 0000 2CEC             		jsr	(CalcSine).l
00019AE0 E440                       		asr.w	#2,d0
00019AE2 3140 0012                  		move.w	d0,$12(a0)
00019AE6                            
00019AE6                            loc_191F2:
00019AE6 6100 E6DC                  		bsr.w	BossMove
00019AEA 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019AF0 3168 0030 0008             		move.w	$30(a0),8(a0)
00019AF6                            
00019AF6                            loc_19202:
00019AF6 3028 0008                  		move.w	8(a0),d0
00019AFA 0440 2C00                  		subi.w	#$2C00,d0
00019AFE EA48                       		lsr.w	#5,d0
00019B00 1140 0034                  		move.b	d0,$34(a0)
00019B04 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019B0A 6400                       		bcc.s	locret_19256
00019B0C 4A28 0022                  		tst.b	$22(a0)
00019B10 6B00                       		bmi.s	loc_19258
00019B12 4A28 0020                  		tst.b	$20(a0)
00019B16 6600                       		bne.s	locret_19256
00019B18 4A28 003E                  		tst.b	$3E(a0)
00019B1C 6600                       		bne.s	loc_1923A
00019B1E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019B24 303C 00AC                  		move.w	#$AC,d0
00019B28 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019B2E                            
00019B2E                            loc_1923A:
00019B2E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019B32 7000                       		moveq	#0,d0
00019B34 4A51                       		tst.w	(a1)
00019B36 6600                       		bne.s	loc_19248
00019B38 303C 0EEE                  		move.w	#$EEE,d0
00019B3C                            
00019B3C                            loc_19248:
00019B3C 3280                       		move.w	d0,(a1)
00019B3E 5328 003E                  		subq.b	#1,$3E(a0)
00019B42 6600                       		bne.s	locret_19256
00019B44 117C 000F 0020             		move.b	#$F,$20(a0)
00019B4A                            
00019B4A                            locret_19256:
00019B4A 4E75                       		rts	
00019B4C                            ; ===========================================================================
00019B4C                            
00019B4C                            loc_19258:				; XREF: loc_19202
00019B4C 7064                       		moveq	#100,d0
00019B4E 6100 0000                  		bsr.w	AddPoints
00019B52 117C 0006 0025             		move.b	#6,$25(a0)
00019B58 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019B5E 4268 0010                  		clr.w	$10(a0)
00019B62 4E75                       		rts	
00019B64                            ; ===========================================================================
00019B64                            
00019B64                            loc_19270:				; XREF: Obj75_ShipIndex
00019B64 3028 0030                  		move.w	$30(a0),d0
00019B68 317C 0140 0010             		move.w	#$140,$10(a0)
00019B6E 0828 0000 0022             		btst	#0,$22(a0)
00019B74 6600                       		bne.s	loc_1928E
00019B76 4468 0010                  		neg.w	$10(a0)
00019B7A 0C40 2C08                  		cmpi.w	#$2C08,d0
00019B7E 6E00                       		bgt.s	loc_1929E
00019B80 6000                       		bra.s	loc_19294
00019B82                            ; ===========================================================================
00019B82                            
00019B82                            loc_1928E:
00019B82 0C40 2D38                  		cmpi.w	#$2D38,d0
00019B86 6D00                       		blt.s	loc_1929E
00019B88                            
00019B88                            loc_19294:
00019B88 0868 0000 0022             		bchg	#0,$22(a0)
00019B8E 4228 003D                  		clr.b	$3D(a0)
00019B92                            
00019B92                            loc_1929E:
00019B92 0440 2C10                  		subi.w	#$2C10,d0
00019B96 0240 001F                  		andi.w	#$1F,d0
00019B9A 0440 001F                  		subi.w	#$1F,d0
00019B9E 6A00                       		bpl.s	loc_192AE
00019BA0 4440                       		neg.w	d0
00019BA2                            
00019BA2                            loc_192AE:
00019BA2 5340                       		subq.w	#1,d0
00019BA4 6E00                       		bgt.s	loc_192E8
00019BA6 4A28 003D                  		tst.b	$3D(a0)
00019BAA 6600                       		bne.s	loc_192E8
00019BAC 3238 D008                  		move.w	($FFFFD008).w,d1
00019BB0 0441 2C00                  		subi.w	#$2C00,d1
00019BB4 EA41                       		asr.w	#5,d1
00019BB6 B228 0034                  		cmp.b	$34(a0),d1
00019BBA 6600                       		bne.s	loc_192E8
00019BBC 7000                       		moveq	#0,d0
00019BBE 1028 0034                  		move.b	$34(a0),d0
00019BC2 EB40                       		asl.w	#5,d0
00019BC4 0640 2C10                  		addi.w	#$2C10,d0
00019BC8 3140 0030                  		move.w	d0,$30(a0)
00019BCC 6100 0000                  		bsr.w	Obj75_FindBlocks
00019BD0 5428 0025                  		addq.b	#2,$25(a0)
00019BD4 4268 0028                  		clr.w	$28(a0)
00019BD8 4268 0010                  		clr.w	$10(a0)
00019BDC                            
00019BDC                            loc_192E8:
00019BDC 6000 FEF4                  		bra.w	loc_191DE
00019BE0                            ; ===========================================================================
00019BE0                            
00019BE0                            loc_192EC:				; XREF: Obj75_ShipIndex
00019BE0 7000                       		moveq	#0,d0
00019BE2 1028 0028                  		move.b	$28(a0),d0
00019BE6 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019BEA 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019BEE                            ; ===========================================================================
00019BEE 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019BF0 0000                       		dc.w loc_19348-off_192FA
00019BF2 0000                       		dc.w loc_1938E-off_192FA
00019BF4 0000                       		dc.w loc_193D0-off_192FA
00019BF6                            ; ===========================================================================
00019BF6                            
00019BF6                            loc_19302:				; XREF: off_192FA
00019BF6 317C 0180 0012             		move.w	#$180,$12(a0)
00019BFC 3028 0038                  		move.w	$38(a0),d0
00019C00 0C40 0556                  		cmpi.w	#$556,d0
00019C04 6500                       		bcs.s	loc_19344
00019C06 317C 0556 0038             		move.w	#$556,$38(a0)
00019C0C 4268 003C                  		clr.w	$3C(a0)
00019C10 70FF                       		moveq	#-1,d0
00019C12 3028 0036                  		move.w	$36(a0),d0
00019C16 6700                       		beq.s	loc_1933C
00019C18 2240                       		movea.l	d0,a1
00019C1A 137C 00FF 0029             		move.b	#-1,$29(a1)
00019C20 117C 00FF 0029             		move.b	#-1,$29(a0)
00019C26 2348 0034                  		move.l	a0,$34(a1)
00019C2A 317C 0032 003C             		move.w	#$32,$3C(a0)
00019C30                            
00019C30                            loc_1933C:
00019C30 4268 0012                  		clr.w	$12(a0)
00019C34 5428 0028                  		addq.b	#2,$28(a0)
00019C38                            
00019C38                            loc_19344:
00019C38 6000 FEAC                  		bra.w	loc_191F2
00019C3C                            ; ===========================================================================
00019C3C                            
00019C3C                            loc_19348:				; XREF: off_192FA
00019C3C 5368 003C                  		subq.w	#1,$3C(a0)
00019C40 6A00                       		bpl.s	loc_19366
00019C42 5428 0028                  		addq.b	#2,$28(a0)
00019C46 317C F800 0012             		move.w	#-$800,$12(a0)
00019C4C 4A68 0036                  		tst.w	$36(a0)
00019C50 6600                       		bne.s	loc_19362
00019C52 E0E8 0012                  		asr	$12(a0)
00019C56                            
00019C56                            loc_19362:
00019C56 7000                       		moveq	#0,d0
00019C58 6000                       		bra.s	loc_1937C
00019C5A                            ; ===========================================================================
00019C5A                            
00019C5A                            loc_19366:
00019C5A 7000                       		moveq	#0,d0
00019C5C 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019C62 6E00                       		bgt.s	loc_1937C
00019C64 7002                       		moveq	#2,d0
00019C66 0828 0001 003D             		btst	#1,$3D(a0)
00019C6C 6700                       		beq.s	loc_1937C
00019C6E 4440                       		neg.w	d0
00019C70                            
00019C70                            loc_1937C:
00019C70 D068 0038                  		add.w	$38(a0),d0
00019C74 3140 000C                  		move.w	d0,$C(a0)
00019C78 3168 0030 0008             		move.w	$30(a0),8(a0)
00019C7E 6000 FE76                  		bra.w	loc_19202
00019C82                            ; ===========================================================================
00019C82                            
00019C82                            loc_1938E:				; XREF: off_192FA
00019C82 303C 04DA                  		move.w	#$4DA,d0
00019C86 4A68 0036                  		tst.w	$36(a0)
00019C8A 6700                       		beq.s	loc_1939C
00019C8C 0440 0018                  		subi.w	#$18,d0
00019C90                            
00019C90                            loc_1939C:
00019C90 B068 0038                  		cmp.w	$38(a0),d0
00019C94 6D00                       		blt.s	loc_193BE
00019C96 317C 0008 003C             		move.w	#8,$3C(a0)
00019C9C 4A68 0036                  		tst.w	$36(a0)
00019CA0 6700                       		beq.s	loc_193B4
00019CA2 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019CA8                            
00019CA8                            loc_193B4:
00019CA8 5428 0028                  		addq.b	#2,$28(a0)
00019CAC 4268 0012                  		clr.w	$12(a0)
00019CB0 6000                       		bra.s	loc_193CC
00019CB2                            ; ===========================================================================
00019CB2                            
00019CB2                            loc_193BE:
00019CB2 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019CB8 6C00                       		bge.s	loc_193CC
00019CBA 0668 000C 0012             		addi.w	#$C,$12(a0)
00019CC0                            
00019CC0                            loc_193CC:
00019CC0 6000 FE24                  		bra.w	loc_191F2
00019CC4                            ; ===========================================================================
00019CC4                            
00019CC4                            loc_193D0:				; XREF: off_192FA
00019CC4 5368 003C                  		subq.w	#1,$3C(a0)
00019CC8 6E00                       		bgt.s	loc_19406
00019CCA 6B00                       		bmi.s	loc_193EE
00019CCC 70FF                       		moveq	#-1,d0
00019CCE 3028 0036                  		move.w	$36(a0),d0
00019CD2 6700                       		beq.s	loc_193E8
00019CD4 2240                       		movea.l	d0,a1
00019CD6 137C 000A 0029             		move.b	#$A,$29(a1)
00019CDC                            
00019CDC                            loc_193E8:
00019CDC 4268 0036                  		clr.w	$36(a0)
00019CE0 6000                       		bra.s	loc_19406
00019CE2                            ; ===========================================================================
00019CE2                            
00019CE2                            loc_193EE:
00019CE2 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019CE8 6600                       		bne.s	loc_19406
00019CEA 4228 0029                  		clr.b	$29(a0)
00019CEE 5528 0025                  		subq.b	#2,$25(a0)
00019CF2 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019CF8 6000                       		bra.s	loc_19446
00019CFA                            ; ===========================================================================
00019CFA                            
00019CFA                            loc_19406:
00019CFA 7001                       		moveq	#1,d0
00019CFC 4A68 0036                  		tst.w	$36(a0)
00019D00 6700                       		beq.s	loc_19410
00019D02 7002                       		moveq	#2,d0
00019D04                            
00019D04                            loc_19410:
00019D04 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019D0A 6700                       		beq.s	loc_19424
00019D0C 6D00                       		blt.s	loc_1941C
00019D0E 4440                       		neg.w	d0
00019D10                            
00019D10                            loc_1941C:
00019D10 4A68 0036                  		tst.w	$36(a0)
00019D14 D168 0038                  		add.w	d0,$38(a0)
00019D18                            
00019D18                            loc_19424:
00019D18 7000                       		moveq	#0,d0
00019D1A 4A68 0036                  		tst.w	$36(a0)
00019D1E 6700                       		beq.s	loc_19438
00019D20 7002                       		moveq	#2,d0
00019D22 0828 0000 003D             		btst	#0,$3D(a0)
00019D28 6700                       		beq.s	loc_19438
00019D2A 4440                       		neg.w	d0
00019D2C                            
00019D2C                            loc_19438:
00019D2C D068 0038                  		add.w	$38(a0),d0
00019D30 3140 000C                  		move.w	d0,$C(a0)
00019D34 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D3A                            
00019D3A                            loc_19446:
00019D3A 6000 FDBA                  		bra.w	loc_19202
00019D3E                            
00019D3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D3E                            
00019D3E                            
00019D3E                            Obj75_FindBlocks:			; XREF: loc_192AE
00019D3E 4268 0036                  		clr.w	$36(a0)
00019D42 43F8 D040                  		lea	($FFFFD040).w,a1
00019D46 703E                       		moveq	#$3E,d0
00019D48 7276                       		moveq	#$76,d1
00019D4A 1428 0034                  		move.b	$34(a0),d2
00019D4E                            
00019D4E                            Obj75_FindLoop:
00019D4E B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019D50 6600                       		bne.s	loc_1946A	; if not, branch
00019D52 B429 0028                  		cmp.b	$28(a1),d2
00019D56 6600                       		bne.s	loc_1946A
00019D58 3149 0036                  		move.w	a1,$36(a0)
00019D5C 6000                       		bra.s	locret_19472
00019D5E                            ; ===========================================================================
00019D5E                            
00019D5E                            loc_1946A:
00019D5E 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019D62 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019D66                            
00019D66                            locret_19472:
00019D66 4E75                       		rts	
00019D68                            ; End of function Obj75_FindBlocks
00019D68                            
00019D68                            ; ===========================================================================
00019D68                            
00019D68                            loc_19474:				; XREF: Obj75_ShipIndex
00019D68 5368 003C                  		subq.w	#1,$3C(a0)
00019D6C 6B00                       		bmi.s	loc_1947E
00019D6E 6000 E412                  		bra.w	BossDefeated
00019D72                            ; ===========================================================================
00019D72                            
00019D72                            loc_1947E:
00019D72 5428 0025                  		addq.b	#2,$25(a0)
00019D76 4268 0012                  		clr.w	$12(a0)
00019D7A 08E8 0000 0022             		bset	#0,$22(a0)
00019D80 08A8 0007 0022             		bclr	#7,$22(a0)
00019D86 4268 0010                  		clr.w	$10(a0)
00019D8A 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019D90 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019D94 6600                       		bne.s	loc_194A8
00019D96 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019D9C                            
00019D9C                            loc_194A8:
00019D9C 6000 FD58                  		bra.w	loc_19202
00019DA0                            ; ===========================================================================
00019DA0                            
00019DA0                            loc_194AC:				; XREF: Obj75_ShipIndex
00019DA0 5268 003C                  		addq.w	#1,$3C(a0)
00019DA4 6700                       		beq.s	loc_194BC
00019DA6 6A00                       		bpl.s	loc_194C2
00019DA8 0668 0018 0012             		addi.w	#$18,$12(a0)
00019DAE 6000                       		bra.s	loc_194EE
00019DB0                            ; ===========================================================================
00019DB0                            
00019DB0                            loc_194BC:
00019DB0 4268 0012                  		clr.w	$12(a0)
00019DB4 6000                       		bra.s	loc_194EE
00019DB6                            ; ===========================================================================
00019DB6                            
00019DB6                            loc_194C2:
00019DB6 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019DBC 6500                       		bcs.s	loc_194DA
00019DBE 6700                       		beq.s	loc_194E0
00019DC0 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019DC6 6500                       		bcs.s	loc_194EE
00019DC8 5428 0025                  		addq.b	#2,$25(a0)
00019DCC 6000                       		bra.s	loc_194EE
00019DCE                            ; ===========================================================================
00019DCE                            
00019DCE                            loc_194DA:
00019DCE 5168 0012                  		subq.w	#8,$12(a0)
00019DD2 6000                       		bra.s	loc_194EE
00019DD4                            ; ===========================================================================
00019DD4                            
00019DD4                            loc_194E0:
00019DD4 4268 0012                  		clr.w	$12(a0)
00019DD8 303C 0085                  		move.w	#$85,d0
00019DDC 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SYZ music
00019DE2                            
00019DE2                            loc_194EE:
00019DE2 6000 FD02                  		bra.w	loc_191F2
00019DE6                            ; ===========================================================================
00019DE6                            
00019DE6                            loc_194F2:				; XREF: Obj75_ShipIndex
00019DE6 317C 0400 0010             		move.w	#$400,$10(a0)
00019DEC 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019DF2 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019DF8 6400                       		bcc.s	loc_1950C
00019DFA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019DFE 6000                       		bra.s	loc_19512
00019E00                            ; ===========================================================================
00019E00                            
00019E00                            loc_1950C:
00019E00 4A28 0001                  		tst.b	1(a0)
00019E04 6A00                       		bpl.s	Obj75_ShipDelete
00019E06                            
00019E06                            loc_19512:
00019E06 6100 E3BC                  		bsr.w	BossMove
00019E0A 6000 FCC6                  		bra.w	loc_191DE
00019E0E                            ; ===========================================================================
00019E0E                            
00019E0E                            Obj75_ShipDelete:
00019E0E 4EF9 0000 DE44             		jmp	DeleteObject
00019E14                            ; ===========================================================================
00019E14                            
00019E14                            Obj75_FaceMain:				; XREF: Obj75_Index
00019E14 7201                       		moveq	#1,d1
00019E16 2268 0034                  		movea.l	$34(a0),a1
00019E1A 7000                       		moveq	#0,d0
00019E1C 1029 0025                  		move.b	$25(a1),d0
00019E20 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019E24 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019E28 1141 001C                  		move.b	d1,$1C(a0)
00019E2C 1010                       		move.b	(a0),d0
00019E2E B011                       		cmp.b	(a1),d0
00019E30 6600                       		bne.s	Obj75_FaceDelete
00019E32 6000                       		bra.s	loc_195BE
00019E34                            ; ===========================================================================
00019E34                            
00019E34                            Obj75_FaceDelete:
00019E34 4EF9 0000 DE44             		jmp	DeleteObject
00019E3A                            ; ===========================================================================
00019E3A 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019E3E 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019E42 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019E46                            ; ===========================================================================
00019E46                            
00019E46                            loc_19552:				; XREF: off_19546
00019E46 720A                       		moveq	#$A,d1
00019E48 4E75                       		rts	
00019E4A                            ; ===========================================================================
00019E4A                            
00019E4A                            loc_19556:				; XREF: off_19546
00019E4A 7206                       		moveq	#6,d1
00019E4C 4E75                       		rts	
00019E4E                            ; ===========================================================================
00019E4E                            
00019E4E                            loc_1955A:				; XREF: off_19546
00019E4E 7000                       		moveq	#0,d0
00019E50 1029 0028                  		move.b	$28(a1),d0
00019E54 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019E58 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019E5C                            ; ===========================================================================
00019E5C 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019E60 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019E64                            ; ===========================================================================
00019E64                            
00019E64                            loc_19570:				; XREF: off_19568
00019E64 6000                       		bra.s	loc_19574
00019E66                            ; ===========================================================================
00019E66                            
00019E66                            loc_19572:				; XREF: off_19568
00019E66 7206                       		moveq	#6,d1
00019E68                            
00019E68                            loc_19574:				; XREF: off_19546
00019E68 4A29 0020                  		tst.b	$20(a1)
00019E6C 6600                       		bne.s	loc_1957E
00019E6E 7205                       		moveq	#5,d1
00019E70 4E75                       		rts	
00019E72                            ; ===========================================================================
00019E72                            
00019E72                            loc_1957E:
00019E72 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019E78 6500                       		bcs.s	locret_19588
00019E7A 7204                       		moveq	#4,d1
00019E7C                            
00019E7C                            locret_19588:
00019E7C 4E75                       		rts	
00019E7E                            ; ===========================================================================
00019E7E                            
00019E7E                            Obj75_FlameMain:			; XREF: Obj75_Index
00019E7E 117C 0007 001C             		move.b	#7,$1C(a0)
00019E84 2268 0034                  		movea.l	$34(a0),a1
00019E88 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019E8E 6600                       		bne.s	loc_195AA
00019E90 117C 000B 001C             		move.b	#$B,$1C(a0)
00019E96 4A28 0001                  		tst.b	1(a0)
00019E9A 6A00                       		bpl.s	Obj75_FlameDelete
00019E9C 6000                       		bra.s	loc_195B6
00019E9E                            ; ===========================================================================
00019E9E                            
00019E9E                            loc_195AA:
00019E9E 4A69 0010                  		tst.w	$10(a1)
00019EA2 6700                       		beq.s	loc_195B6
00019EA4 117C 0008 001C             		move.b	#8,$1C(a0)
00019EAA                            
00019EAA                            loc_195B6:
00019EAA 6000                       		bra.s	loc_195BE
00019EAC                            ; ===========================================================================
00019EAC                            
00019EAC                            Obj75_FlameDelete:
00019EAC 4EF9 0000 DE44             		jmp	DeleteObject
00019EB2                            ; ===========================================================================
00019EB2                            
00019EB2                            loc_195BE:
00019EB2 43F9 0001 8606             		lea	(Ani_Eggman).l,a1
00019EB8 4EB9 0000 AEC8             		jsr	AnimateSprite
00019EBE 2268 0034                  		movea.l	$34(a0),a1
00019EC2 3169 0008 0008             		move.w	8(a1),8(a0)
00019EC8 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019ECE                            
00019ECE                            loc_195DA:
00019ECE 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019ED4 7003                       		moveq	#3,d0
00019ED6 C028 0022                  		and.b	$22(a0),d0
00019EDA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019EE0 8128 0001                  		or.b	d0,1(a0)
00019EE4 4EF9 0000 DE08             		jmp	DisplaySprite
00019EEA                            ; ===========================================================================
00019EEA                            
00019EEA                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019EEA 217C 0001 8732 0004        		move.l	#Map_BossItems,4(a0)
00019EF2 317C 246C 0002             		move.w	#$246C,2(a0)
00019EF8 117C 0005 001A             		move.b	#5,$1A(a0)
00019EFE 2268 0034                  		movea.l	$34(a0),a1
00019F02 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019F08 6600                       		bne.s	loc_1961C
00019F0A 4A28 0001                  		tst.b	1(a0)
00019F0E 6A00                       		bpl.s	Obj75_SpikeDelete
00019F10                            
00019F10                            loc_1961C:
00019F10 3169 0008 0008             		move.w	8(a1),8(a0)
00019F16 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019F1C 3028 003C                  		move.w	$3C(a0),d0
00019F20 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019F26 6600                       		bne.s	loc_19652
00019F28 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019F2E 6700                       		beq.s	loc_1964C
00019F30 4A29 0028                  		tst.b	$28(a1)
00019F34 6600                       		bne.s	loc_19658
00019F36 0C40 0094                  		cmpi.w	#$94,d0
00019F3A 6C00                       		bge.s	loc_19658
00019F3C 5E40                       		addq.w	#7,d0
00019F3E 6000                       		bra.s	loc_19658
00019F40                            ; ===========================================================================
00019F40                            
00019F40                            loc_1964C:
00019F40 4A69 003C                  		tst.w	$3C(a1)
00019F44 6A00                       		bpl.s	loc_19658
00019F46                            
00019F46                            loc_19652:
00019F46 4A40                       		tst.w	d0
00019F48 6F00                       		ble.s	loc_19658
00019F4A 5B40                       		subq.w	#5,d0
00019F4C                            
00019F4C                            loc_19658:
00019F4C 3140 003C                  		move.w	d0,$3C(a0)
00019F50 E440                       		asr.w	#2,d0
00019F52 D168 000C                  		add.w	d0,$C(a0)
00019F56 117C 0008 0019             		move.b	#8,$19(a0)
00019F5C 117C 000C 0016             		move.b	#$C,$16(a0)
00019F62 4228 0020                  		clr.b	$20(a0)
00019F66 2268 0034                  		movea.l	$34(a0),a1
00019F6A 4A29 0020                  		tst.b	$20(a1)
00019F6E 6700                       		beq.s	loc_19688
00019F70 4A29 0029                  		tst.b	$29(a1)
00019F74 6600                       		bne.s	loc_19688
00019F76 117C 0084 0020             		move.b	#$84,$20(a0)
00019F7C                            
00019F7C                            loc_19688:
00019F7C 6000 FF50                  		bra.w	loc_195DA
00019F80                            ; ===========================================================================
00019F80                            
00019F80                            Obj75_SpikeDelete:
00019F80 4EF9 0000 DE44             		jmp	DeleteObject
00019F86                            ; ===========================================================================
00019F86                            ; ---------------------------------------------------------------------------
00019F86                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019F86                            ; ---------------------------------------------------------------------------
00019F86                            
00019F86                            Obj76:					; XREF: Obj_Index
00019F86 7000                       		moveq	#0,d0
00019F88 1028 0024                  		move.b	$24(a0),d0
00019F8C 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019F90 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019F94                            ; ===========================================================================
00019F94 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019F96 0000                       		dc.w Obj76_Action-Obj76_Index
00019F98 0000                       		dc.w loc_19762-Obj76_Index
00019F9A                            ; ===========================================================================
00019F9A                            
00019F9A                            Obj76_Main:				; XREF: Obj76_Index
00019F9A 7800                       		moveq	#0,d4
00019F9C 3A3C 2C10                  		move.w	#$2C10,d5
00019FA0 7C09                       		moveq	#9,d6
00019FA2 43D0                       		lea	(a0),a1
00019FA4 6000                       		bra.s	Obj76_MakeBlock
00019FA6                            ; ===========================================================================
00019FA6                            
00019FA6                            Obj76_Loop:
00019FA6 4EB9 0000 E28E             		jsr	SingleObjLoad
00019FAC 6600                       		bne.s	Obj76_ExitLoop
00019FAE                            
00019FAE                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019FAE 12BC 0076                  		move.b	#$76,(a1)
00019FB2 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019FBA 337C 4000 0002             		move.w	#$4000,2(a1)
00019FC0 137C 0004 0001             		move.b	#4,1(a1)
00019FC6 137C 0010 0019             		move.b	#$10,$19(a1)
00019FCC 137C 0010 0016             		move.b	#$10,$16(a1)
00019FD2 137C 0003 0018             		move.b	#3,$18(a1)
00019FD8 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019FDC 337C 0582 000C             		move.w	#$582,$C(a1)
00019FE2 3344 0028                  		move.w	d4,$28(a1)
00019FE6 0644 0101                  		addi.w	#$101,d4
00019FEA 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019FEE 5429 0024                  		addq.b	#2,$24(a1)
00019FF2 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019FF6                            
00019FF6                            Obj76_ExitLoop:
00019FF6 4E75                       		rts	
00019FF8                            ; ===========================================================================
00019FF8                            
00019FF8                            Obj76_Action:				; XREF: Obj76_Index
00019FF8 1028 0029                  		move.b	$29(a0),d0
00019FFC B028 0028                  		cmp.b	$28(a0),d0
0001A000 6700                       		beq.s	Obj76_Solid
0001A002 4A00                       		tst.b	d0
0001A004 6B00                       		bmi.s	loc_19718
0001A006                            
0001A006                            loc_19712:
0001A006 6100 0000                  		bsr.w	Obj76_Break
0001A00A 6000                       		bra.s	Obj76_Display
0001A00C                            ; ===========================================================================
0001A00C                            
0001A00C                            loc_19718:
0001A00C 2268 0034                  		movea.l	$34(a0),a1
0001A010 4A29 0021                  		tst.b	$21(a1)
0001A014 67F0                       		beq.s	loc_19712
0001A016 3169 0008 0008             		move.w	8(a1),8(a0)
0001A01C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A022 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A028 B2C8                       		cmpa.w	a0,a1
0001A02A 6500                       		bcs.s	Obj76_Display
0001A02C 3029 0012                  		move.w	$12(a1),d0
0001A030 48C0                       		ext.l	d0
0001A032 E080                       		asr.l	#8,d0
0001A034 D168 000C                  		add.w	d0,$C(a0)
0001A038 6000                       		bra.s	Obj76_Display
0001A03A                            ; ===========================================================================
0001A03A                            
0001A03A                            Obj76_Solid:				; XREF: Obj76_Action
0001A03A 323C 001B                  		move.w	#$1B,d1
0001A03E 343C 0010                  		move.w	#$10,d2
0001A042 363C 0011                  		move.w	#$11,d3
0001A046 3828 0008                  		move.w	8(a0),d4
0001A04A 4EB9 0001 01D8             		jsr	SolidObject
0001A050                            
0001A050                            Obj76_Display:				; XREF: Obj76_Action
0001A050 4EF9 0000 DE08             		jmp	DisplaySprite
0001A056                            ; ===========================================================================
0001A056                            
0001A056                            loc_19762:				; XREF: Obj76_Index
0001A056 4A28 0001                  		tst.b	1(a0)
0001A05A 6A00                       		bpl.s	Obj76_Delete
0001A05C 4EB9 0000 DDB6             		jsr	ObjectFall
0001A062 4EF9 0000 DE08             		jmp	DisplaySprite
0001A068                            ; ===========================================================================
0001A068                            
0001A068                            Obj76_Delete:
0001A068 4EF9 0000 DE44             		jmp	DeleteObject
0001A06E                            
0001A06E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A06E                            
0001A06E                            
0001A06E                            Obj76_Break:				; XREF: Obj76_Action
0001A06E 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A072 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A076 7801                       		moveq	#1,d4
0001A078 7203                       		moveq	#3,d1
0001A07A 7438                       		moveq	#$38,d2
0001A07C 5428 0024                  		addq.b	#2,$24(a0)
0001A080 117C 0008 0019             		move.b	#8,$19(a0)
0001A086 117C 0008 0016             		move.b	#8,$16(a0)
0001A08C 43D0                       		lea	(a0),a1
0001A08E 6000                       		bra.s	Obj76_MakeFrag
0001A090                            ; ===========================================================================
0001A090                            
0001A090                            Obj76_LoopFrag:
0001A090 4EB9 0000 E2A4             		jsr	SingleObjLoad2
0001A096 6600                       		bne.s	loc_197D4
0001A098                            
0001A098                            Obj76_MakeFrag:
0001A098 45D0                       		lea	(a0),a2
0001A09A 47D1                       		lea	(a1),a3
0001A09C 7603                       		moveq	#3,d3
0001A09E                            
0001A09E                            loc_197AA:
0001A09E 26DA                       		move.l	(a2)+,(a3)+
0001A0A0 26DA                       		move.l	(a2)+,(a3)+
0001A0A2 26DA                       		move.l	(a2)+,(a3)+
0001A0A4 26DA                       		move.l	(a2)+,(a3)+
0001A0A6 51CB FFF6                  		dbf	d3,loc_197AA
0001A0AA                            
0001A0AA 335C 0010                  		move.w	(a4)+,$10(a1)
0001A0AE 335C 0012                  		move.w	(a4)+,$12(a1)
0001A0B2 361D                       		move.w	(a5)+,d3
0001A0B4 D769 0008                  		add.w	d3,8(a1)
0001A0B8 361D                       		move.w	(a5)+,d3
0001A0BA D769 000C                  		add.w	d3,$C(a1)
0001A0BE 1344 001A                  		move.b	d4,$1A(a1)
0001A0C2 5244                       		addq.w	#1,d4
0001A0C4 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A0C8                            
0001A0C8                            loc_197D4:
0001A0C8 303C 00CB                  		move.w	#$CB,d0
0001A0CC 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A0D2                            ; End of function Obj76_Break
0001A0D2                            
0001A0D2                            ; ===========================================================================
0001A0D2 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A0D6 0180 FE00                  		dc.w $180, $FE00
0001A0DA FF00 FF00                  		dc.w $FF00, $FF00
0001A0DE 0100 FF00                  		dc.w $100, $FF00
0001A0E2 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A0E6 0010 0000                  		dc.w $10, 0
0001A0EA 0000 0010                  		dc.w 0,	$10
0001A0EE 0010 0010                  		dc.w $10, $10
0001A0F2                            ; ---------------------------------------------------------------------------
0001A0F2                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A0F2                            ; ---------------------------------------------------------------------------
0001A0F2                            Map_obj76:
0001A0F2                            	include "_maps\obj76.asm"
0001A0F2                            ; ---------------------------------------------------------------------------
0001A0F2                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A0F2                            ; ---------------------------------------------------------------------------
0001A0F2 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A0F6 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A0FA 0000                       		dc.w byte_19826-Map_obj76
0001A0FC 02                         byte_19808:	dc.b 2
0001A0FD F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A102 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A107 00                         		dc.b 0
0001A108 01                         byte_19814:	dc.b 1
0001A109 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A10E 01                         byte_1981A:	dc.b 1
0001A10F F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A114 01                         byte_19820:	dc.b 1
0001A115 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A11A 01                         byte_19826:	dc.b 1
0001A11B F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A120                            		even
0001A120                            		even
0001A120                            
0001A120                            ; ===========================================================================
0001A120                            
0001A120                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A120 4EF9 0000 DE44             		jmp	DeleteObject
0001A126                            ; ===========================================================================
0001A126                            ; ---------------------------------------------------------------------------
0001A126                            ; Object 82 - Eggman (SBZ2)
0001A126                            ; ---------------------------------------------------------------------------
0001A126                            
0001A126                            Obj82:					; XREF: Obj_Index
0001A126 7000                       		moveq	#0,d0
0001A128 1028 0024                  		move.b	$24(a0),d0
0001A12C 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A130 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A134                            ; ===========================================================================
0001A134 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A136 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A138 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A13A                            
0001A13A 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A13D 0400 03                    		dc.b 4,	0, 3
0001A140                            ; ===========================================================================
0001A140                            
0001A140                            Obj82_Main:				; XREF: Obj82_Index
0001A140 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A144 317C 2160 0008             		move.w	#$2160,8(a0)
0001A14A 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A150 117C 000F 0020             		move.b	#$F,$20(a0)
0001A156 117C 0010 0021             		move.b	#$10,$21(a0)
0001A15C 08A8 0000 0022             		bclr	#0,$22(a0)
0001A162 4228 0025                  		clr.b	$25(a0)
0001A166 115A 0024                  		move.b	(a2)+,$24(a0)
0001A16A 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A16E 115A 0018                  		move.b	(a2)+,$18(a0)
0001A172 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A17A 317C 0400 0002             		move.w	#$400,2(a0)
0001A180 117C 0004 0001             		move.b	#4,1(a0)
0001A186 08E8 0007 0001             		bset	#7,1(a0)
0001A18C 117C 0020 0019             		move.b	#$20,$19(a0)
0001A192 4EB9 0000 E2A4             		jsr	SingleObjLoad2
0001A198 6600                       		bne.s	Obj82_Eggman
0001A19A 2348 0034                  		move.l	a0,$34(a1)
0001A19E 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A1A2 337C 2130 0008             		move.w	#$2130,8(a1)
0001A1A8 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A1AE 4228 0025                  		clr.b	$25(a0)
0001A1B2 135A 0024                  		move.b	(a2)+,$24(a1)
0001A1B6 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A1BA 135A 0018                  		move.b	(a2)+,$18(a1)
0001A1BE 237C 0000 C5FC 0004        		move.l	#Map_obj32,4(a1)
0001A1C6 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A1CC 137C 0004 0001             		move.b	#4,1(a1)
0001A1D2 08E9 0007 0001             		bset	#7,1(a1)
0001A1D8 137C 0010 0019             		move.b	#$10,$19(a1)
0001A1DE 137C 0000 001A             		move.b	#0,$1A(a1)
0001A1E4                            
0001A1E4                            Obj82_Eggman:				; XREF: Obj82_Index
0001A1E4 7000                       		moveq	#0,d0
0001A1E6 1028 0025                  		move.b	$25(a0),d0
0001A1EA 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A1EE 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A1F2 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A1F6 4EB9 0000 AEC8             		jsr	AnimateSprite
0001A1FC 4EF9 0000 DE08             		jmp	DisplaySprite
0001A202                            ; ===========================================================================
0001A202 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A204 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A206 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A208 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A20A                            ; ===========================================================================
0001A20A                            
0001A20A                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A20A 3028 0008                  		move.w	8(a0),d0
0001A20E 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A212 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A216 6400                       		bcc.s	loc_19934	; if not, branch
0001A218 5428 0025                  		addq.b	#2,$25(a0)
0001A21C 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A222 117C 0001 001C             		move.b	#1,$1C(a0)
0001A228                            
0001A228                            loc_19934:				; XREF: Obj82_EggIndex
0001A228 4EF9 0000 DDE2             		jmp	SpeedToPos
0001A22E                            ; ===========================================================================
0001A22E                            
0001A22E                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A22E 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A232 6600                       		bne.s	loc_19954	; if time remains, branch
0001A234 5428 0025                  		addq.b	#2,$25(a0)
0001A238 117C 0002 001C             		move.b	#2,$1C(a0)
0001A23E 5868 000C                  		addq.w	#4,$C(a0)
0001A242 317C 000F 003C             		move.w	#15,$3C(a0)
0001A248                            
0001A248                            loc_19954:
0001A248 60DE                       		bra.s	loc_19934
0001A24A                            ; ===========================================================================
0001A24A                            
0001A24A                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A24A 5368 003C                  		subq.w	#1,$3C(a0)
0001A24E 6E00                       		bgt.s	loc_199D0
0001A250 6600                       		bne.s	loc_1996A
0001A252 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A258 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A25E                            
0001A25E                            loc_1996A:
0001A25E 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A264 6E00                       		bgt.s	loc_19976
0001A266 4268 0010                  		clr.w	$10(a0)
0001A26A                            
0001A26A                            loc_19976:
0001A26A 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A270 4A68 0012                  		tst.w	$12(a0)
0001A274 6B00                       		bmi.s	Obj82_FindBlocks
0001A276 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A27C 6500                       		bcs.s	Obj82_FindBlocks
0001A27E 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A284 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A28A 6500                       		bcs.s	Obj82_FindBlocks
0001A28C 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A292 4268 0012                  		clr.w	$12(a0)
0001A296                            
0001A296                            Obj82_FindBlocks:
0001A296 3028 0010                  		move.w	$10(a0),d0
0001A29A 8068 0012                  		or.w	$12(a0),d0
0001A29E 6600                       		bne.s	loc_199D0
0001A2A0 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A2A4 703E                       		moveq	#$3E,d0
0001A2A6 7240                       		moveq	#$40,d1
0001A2A8                            
0001A2A8                            Obj82_FindLoop:	
0001A2A8 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A2AA 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A2AE 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A2B2                            
0001A2B2 6600                       		bne.s	loc_199D0
0001A2B4 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A2BA 5428 0025                  		addq.b	#2,$25(a0)
0001A2BE 117C 0001 001C             		move.b	#1,$1C(a0)
0001A2C4                            
0001A2C4                            loc_199D0:
0001A2C4 6000 FF62                  		bra.w	loc_19934
0001A2C8                            ; ===========================================================================
0001A2C8                            
0001A2C8                            Obj82_Switch:				; XREF: Obj82_Index
0001A2C8 7000                       		moveq	#0,d0
0001A2CA 1028 0025                  		move.b	$25(a0),d0
0001A2CE 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A2D2 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A2D6                            ; ===========================================================================
0001A2D6 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A2D8 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A2DA                            ; ===========================================================================
0001A2DA                            
0001A2DA                            loc_199E6:				; XREF: Obj82_SwIndex
0001A2DA 2268 0034                  		movea.l	$34(a0),a1
0001A2DE 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A2E4 6600                       		bne.s	Obj82_SwDisplay
0001A2E6 117C 0001 001A             		move.b	#1,$1A(a0)
0001A2EC 5428 0025                  		addq.b	#2,$25(a0)
0001A2F0                            
0001A2F0                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A2F0 4EF9 0000 DE08             		jmp	DisplaySprite
0001A2F6                            ; ===========================================================================
0001A2F6                            Ani_obj82:
0001A2F6                            	include "_anim\obj82.asm"
0001A2F6                            ; ---------------------------------------------------------------------------
0001A2F6                            ; Animation script - Eggman (SBZ2)
0001A2F6                            ; ---------------------------------------------------------------------------
0001A2F6 0000                       		dc.w byte_19A10-Ani_obj82
0001A2F8 0000                       		dc.w byte_19A14-Ani_obj82
0001A2FA 0000                       		dc.w byte_19A18-Ani_obj82
0001A2FC 0000                       		dc.w byte_19A20-Ani_obj82
0001A2FE 0000                       		dc.w byte_19A24-Ani_obj82
0001A300 0000                       		dc.w byte_19A2A-Ani_obj82
0001A302 0000                       		dc.w byte_19A30-Ani_obj82
0001A304 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A308 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A30C 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A314 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A318 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A31E 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A324 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A328                            		even
0001A328                            		even
0001A328                            
0001A328                            ; ---------------------------------------------------------------------------
0001A328                            ; Sprite mappings - Eggman (SBZ2)
0001A328                            ; ---------------------------------------------------------------------------
0001A328                            Map_obj82:
0001A328                            	include "_maps\obj82.asm"
0001A328                            ; ================================================================================
0001A328                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A328                            ; ================================================================================
0001A328                            
0001A328                            DATAA16Z12RYSAF:
0001A328 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A32C 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A330 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A334 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A338 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A33C 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A33E 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A33F FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A344 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A349 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A34E 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A34F E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A354 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A359 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A35E FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A363 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A364 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A369 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A36E 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A373 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A378 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A379 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A37E 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A383 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A388 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A389 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A38E 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A393 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A398 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A39D 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A39E E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A3A3 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A3A8 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A3AD 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A3B2 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A3B3 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A3B8 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A3BD 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A3C2 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A3C7 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A3CC F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A3D1 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A3D6 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A3D7 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A3DC E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A3E1 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A3E6 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A3EB 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A3EC 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A3F1 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A3F6 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A3FB 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A400 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A405 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A406 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A40B E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A410 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A415 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A41A E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A41F F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A424 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A429 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A42E 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A42F EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A434 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A439 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A43E                            	even
0001A43E                            	even
0001A43E                            
0001A43E                            ; ===========================================================================
0001A43E                            ; ---------------------------------------------------------------------------
0001A43E                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A43E                            ; ---------------------------------------------------------------------------
0001A43E                            
0001A43E                            Obj83:					; XREF: Obj_Index
0001A43E 7000                       		moveq	#0,d0
0001A440 1028 0024                  		move.b	$24(a0),d0
0001A444 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A448 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A44C                            ; ===========================================================================
0001A44C 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A44E 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A450 0000                       		dc.w loc_19C36-Obj83_Index
0001A452 0000                       		dc.w loc_19C62-Obj83_Index
0001A454 0000                       		dc.w loc_19C72-Obj83_Index
0001A456 0000                       		dc.w loc_19C80-Obj83_Index
0001A458                            ; ===========================================================================
0001A458                            
0001A458                            Obj83_Main:				; XREF: Obj83_Index
0001A458 317C 2080 0008             		move.w	#$2080,8(a0)
0001A45E 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A464 117C 0080 0019             		move.b	#$80,$19(a0)
0001A46A 117C 0010 0016             		move.b	#$10,$16(a0)
0001A470 117C 0004 0001             		move.b	#4,1(a0)
0001A476 08E8 0007 0001             		bset	#7,1(a0)
0001A47C 7800                       		moveq	#0,d4
0001A47E 3A3C 2010                  		move.w	#$2010,d5
0001A482 7C07                       		moveq	#7,d6
0001A484 45E8 0030                  		lea	$30(a0),a2
0001A488                            
0001A488                            Obj83_MakeBlock:
0001A488 4EB9 0000 E28E             		jsr	SingleObjLoad
0001A48E 6600                       		bne.s	Obj83_ExitMake
0001A490 34C9                       		move.w	a1,(a2)+
0001A492 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A496 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A49E 337C 4518 0002             		move.w	#$4518,2(a1)
0001A4A4 137C 0004 0001             		move.b	#4,1(a1)
0001A4AA 137C 0010 0019             		move.b	#$10,$19(a1)
0001A4B0 137C 0010 0016             		move.b	#$10,$16(a1)
0001A4B6 137C 0003 0018             		move.b	#3,$18(a1)
0001A4BC 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A4C0 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A4C6 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A4CA 137C 0008 0024             		move.b	#8,$24(a1)
0001A4D0 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A4D4                            
0001A4D4                            Obj83_ExitMake:
0001A4D4 5428 0024                  		addq.b	#2,$24(a0)
0001A4D8 4E75                       		rts	
0001A4DA                            ; ===========================================================================
0001A4DA                            
0001A4DA                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A4DA 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A4E0 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A4E2 4228 001A                  		clr.b	$1A(a0)
0001A4E6 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A4EA                            
0001A4EA                            Obj83_Solid:
0001A4EA 7000                       		moveq	#0,d0
0001A4EC 1028 001A                  		move.b	$1A(a0),d0
0001A4F0 4400                       		neg.b	d0
0001A4F2 4880                       		ext.w	d0
0001A4F4 5040                       		addq.w	#8,d0
0001A4F6 E940                       		asl.w	#4,d0
0001A4F8 383C 2100                  		move.w	#$2100,d4
0001A4FC 9840                       		sub.w	d0,d4
0001A4FE 1140 0019                  		move.b	d0,$19(a0)
0001A502 3144 0008                  		move.w	d4,8(a0)
0001A506 720B                       		moveq	#$B,d1
0001A508 D240                       		add.w	d0,d1
0001A50A 7410                       		moveq	#$10,d2
0001A50C 7611                       		moveq	#$11,d3
0001A50E 4EF9 0001 01D8             		jmp	SolidObject
0001A514                            ; ===========================================================================
0001A514                            
0001A514                            loc_19C36:				; XREF: Obj83_Index
0001A514 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A51A 6400                       		bcc.s	Obj83_Solid2
0001A51C 70FF                       		moveq	#-1,d0
0001A51E 1028 001A                  		move.b	$1A(a0),d0
0001A522 4880                       		ext.w	d0
0001A524 D040                       		add.w	d0,d0
0001A526 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A52A 2240                       		movea.l	d0,a1
0001A52C 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A532 5228 001A                  		addq.b	#1,$1A(a0)
0001A536 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A53C 6700                       		beq.s	loc_19C62
0001A53E                            
0001A53E                            Obj83_Solid2:
0001A53E 60AA                       		bra.s	Obj83_Solid
0001A540                            ; ===========================================================================
0001A540                            
0001A540                            loc_19C62:				; XREF: Obj83_Index
0001A540 08A8 0003 0022             		bclr	#3,$22(a0)
0001A546 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A54C 6000 FBD2                  		bra.w	loc_1982C
0001A550                            ; ===========================================================================
0001A550                            
0001A550                            loc_19C72:				; XREF: Obj83_Index
0001A550 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A556 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A558 4EF9 0000 DE08             		jmp	DisplaySprite
0001A55E                            ; ===========================================================================
0001A55E                            
0001A55E                            loc_19C80:				; XREF: Obj83_Index
0001A55E 4A28 0001                  		tst.b	1(a0)
0001A562 6A00 FBBC                  		bpl.w	loc_1982C
0001A566 4EB9 0000 DDB6             		jsr	ObjectFall
0001A56C 4EF9 0000 DE08             		jmp	DisplaySprite
0001A572                            ; ===========================================================================
0001A572                            
0001A572                            Obj83_Break:				; XREF: loc_19C72
0001A572 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A576 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A57A 7801                       		moveq	#1,d4
0001A57C 7203                       		moveq	#3,d1
0001A57E 7438                       		moveq	#$38,d2
0001A580 5428 0024                  		addq.b	#2,$24(a0)
0001A584 117C 0008 0019             		move.b	#8,$19(a0)
0001A58A 117C 0008 0016             		move.b	#8,$16(a0)
0001A590 43D0                       		lea	(a0),a1
0001A592 6000                       		bra.s	Obj83_MakeFrag
0001A594                            ; ===========================================================================
0001A594                            
0001A594                            Obj83_LoopFrag:
0001A594 4EB9 0000 E2A4             		jsr	SingleObjLoad2
0001A59A 6600                       		bne.s	Obj83_BreakSnd
0001A59C                            
0001A59C                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A59C 45D0                       		lea	(a0),a2
0001A59E 47D1                       		lea	(a1),a3
0001A5A0 7603                       		moveq	#3,d3
0001A5A2                            
0001A5A2                            loc_19CC4:
0001A5A2 26DA                       		move.l	(a2)+,(a3)+
0001A5A4 26DA                       		move.l	(a2)+,(a3)+
0001A5A6 26DA                       		move.l	(a2)+,(a3)+
0001A5A8 26DA                       		move.l	(a2)+,(a3)+
0001A5AA 51CB FFF6                  		dbf	d3,loc_19CC4
0001A5AE                            
0001A5AE 335C 0012                  		move.w	(a4)+,$12(a1)
0001A5B2 361D                       		move.w	(a5)+,d3
0001A5B4 D769 0008                  		add.w	d3,8(a1)
0001A5B8 361D                       		move.w	(a5)+,d3
0001A5BA D769 000C                  		add.w	d3,$C(a1)
0001A5BE 1344 001A                  		move.b	d4,$1A(a1)
0001A5C2 5244                       		addq.w	#1,d4
0001A5C4 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A5C8                            
0001A5C8                            Obj83_BreakSnd:
0001A5C8 303C 00CB                  		move.w	#$CB,d0
0001A5CC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A5D2 4EF9 0000 DE08             		jmp	DisplaySprite
0001A5D8                            ; ===========================================================================
0001A5D8 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A5DC 0120 00C0                  		dc.w $120, $C0
0001A5E0 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A5E4 0010 0000                  		dc.w $10, 0
0001A5E8 0000 0010                  		dc.w 0,	$10
0001A5EC 0010 0010                  		dc.w $10, $10
0001A5F0                            ; ---------------------------------------------------------------------------
0001A5F0                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A5F0                            ; ---------------------------------------------------------------------------
0001A5F0                            Map_obj83:
0001A5F0                            	include "_maps\obj83.asm"
0001A5F0                            ; ---------------------------------------------------------------------------
0001A5F0                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A5F0                            ; ---------------------------------------------------------------------------
0001A5F0 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A5F4 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A5F8 0000                       		dc.w byte_19D46-Map_obj83
0001A5FA 01                         byte_19D1C:	dc.b 1
0001A5FB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A600 02                         byte_19D22:	dc.b 2
0001A601 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A606 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A60B 00                         		dc.b 0
0001A60C 02                         byte_19D2E:	dc.b 2
0001A60D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A612 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A617 00                         		dc.b 0
0001A618 02                         byte_19D3A:	dc.b 2
0001A619 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A61E F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A623 00                         		dc.b 0
0001A624 02                         byte_19D46:	dc.b 2
0001A625 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A62A F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A630 00                         		even
0001A630 00                         		even
0001A630                            
0001A630                            ; ===========================================================================
0001A630                            ; ---------------------------------------------------------------------------
0001A630                            ; Object 85 - Eggman (FZ)
0001A630                            ; ---------------------------------------------------------------------------
0001A630                            
0001A630                            Obj85_Delete:
0001A630 4EF9 0000 DE44             		jmp	DeleteObject
0001A636                            ; ===========================================================================
0001A636                            
0001A636                            Obj85:					; XREF: Obj_Index
0001A636 7000                       		moveq	#0,d0
0001A638 1028 0024                  		move.b	$24(a0),d0
0001A63C 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A640 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A644                            ; ===========================================================================
0001A644 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A646 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A648 0000                       		dc.w loc_1A38E-Obj85_Index
0001A64A 0000                       		dc.w loc_1A346-Obj85_Index
0001A64C 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A64E 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A650 0000                       		dc.w loc_1A264-Obj85_Index
0001A652                            
0001A652 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A658 0001 A328                  		dc.l Map_obj82		; mappings pointer
0001A65C 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A662 0000 0000                  		dc.l Map_obj84
0001A666 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A66C 0000 0000                  		dc.l Map_FZBoss
0001A670 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A676 0001 A328                  		dc.l Map_obj82
0001A67A 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A680 0001 866A                  		dc.l Map_Eggman
0001A684 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A68A 0001 866A                  		dc.l Map_Eggman
0001A68E                            
0001A68E 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A693 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A698 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A69D 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A6A2 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A6A7 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A6AC                            ; ===========================================================================
0001A6AC                            
0001A6AC                            Obj85_Main:				; XREF: Obj85_Index
0001A6AC 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A6B0 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A6B4 2248                       		movea.l	a0,a1
0001A6B6 7205                       		moveq	#5,d1
0001A6B8 6000                       		bra.s	Obj85_LoadBoss
0001A6BA                            ; ===========================================================================
0001A6BA                            
0001A6BA                            Obj85_Loop:
0001A6BA 4EB9 0000 E2A4             		jsr	SingleObjLoad2
0001A6C0 6600                       		bne.s	loc_19E20
0001A6C2                            
0001A6C2                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A6C2 12BC 0085                  		move.b	#$85,(a1)
0001A6C6 335A 0008                  		move.w	(a2)+,8(a1)
0001A6CA 335A 000C                  		move.w	(a2)+,$C(a1)
0001A6CE 335A 0002                  		move.w	(a2)+,2(a1)
0001A6D2 235A 0004                  		move.l	(a2)+,4(a1)
0001A6D6 135B 0024                  		move.b	(a3)+,$24(a1)
0001A6DA 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A6DE 135B 0018                  		move.b	(a3)+,$18(a1)
0001A6E2 135B 0017                  		move.b	(a3)+,$17(a1)
0001A6E6 135B 0016                  		move.b	(a3)+,$16(a1)
0001A6EA 137C 0004 0001             		move.b	#4,1(a1)
0001A6F0 08E8 0007 0001             		bset	#7,1(a0)
0001A6F6 2348 0034                  		move.l	a0,$34(a1)
0001A6FA 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A6FE                            
0001A6FE                            loc_19E20:
0001A6FE 45E8 0036                  		lea	$36(a0),a2
0001A702 4EB9 0000 E28E             		jsr	SingleObjLoad
0001A708 6600                       		bne.s	loc_19E5A
0001A70A 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A70E 3489                       		move.w	a1,(a2)
0001A710 2348 0034                  		move.l	a0,$34(a1)
0001A714 45E8 0038                  		lea	$38(a0),a2
0001A718 7400                       		moveq	#0,d2
0001A71A 7203                       		moveq	#3,d1
0001A71C                            
0001A71C                            loc_19E3E:
0001A71C 4EB9 0000 E2A4             		jsr	SingleObjLoad2
0001A722 6600                       		bne.s	loc_19E5A
0001A724 34C9                       		move.w	a1,(a2)+
0001A726 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A72A 2348 0034                  		move.l	a0,$34(a1)
0001A72E 1342 0028                  		move.b	d2,$28(a1)
0001A732 5442                       		addq.w	#2,d2
0001A734 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A738                            
0001A738                            loc_19E5A:
0001A738 317C 0000 0034             		move.w	#0,$34(a0)
0001A73E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A744 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A74A                            
0001A74A                            Obj85_Eggman:				; XREF: Obj85_Index
0001A74A 7000                       		moveq	#0,d0
0001A74C 1028 0034                  		move.b	$34(a0),d0
0001A750 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A754 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A758 4EF9 0000 DE08             		jmp	DisplaySprite
0001A75E                            ; ===========================================================================
0001A75E 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A762 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A766 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A76A 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A76E                            ; ===========================================================================
0001A76E                            
0001A76E                            loc_19E90:				; XREF: off_19E80
0001A76E 4AB8 F680                  		tst.l	($FFFFF680).w
0001A772 6600                       		bne.s	loc_19EA2
0001A774 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A77A 6500                       		bcs.s	loc_19EA2
0001A77C 5428 0034                  		addq.b	#2,$34(a0)
0001A780                            
0001A780                            loc_19EA2:
0001A780 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A784 4E75                       		rts	
0001A786                            ; ===========================================================================
0001A786                            
0001A786                            loc_19EA8:				; XREF: off_19E80
0001A786 4A68 0030                  		tst.w	$30(a0)
0001A78A 6A00                       		bpl.s	loc_19F10
0001A78C 4268 0030                  		clr.w	$30(a0)
0001A790 4EB9 0000 2CC6             		jsr	(RandomNumber).l
0001A796 0240 000C                  		andi.w	#$C,d0
0001A79A 3200                       		move.w	d0,d1
0001A79C 5441                       		addq.w	#2,d1
0001A79E 4A80                       		tst.l	d0
0001A7A0 6A00                       		bpl.s	loc_19EC6
0001A7A2 C141                       		exg	d1,d0
0001A7A4                            
0001A7A4                            loc_19EC6:
0001A7A4 43FA 0000                  		lea	word_19FD6(pc),a1
0001A7A8 3031 0000                  		move.w	(a1,d0.w),d0
0001A7AC 3231 1000                  		move.w	(a1,d1.w),d1
0001A7B0 3140 0030                  		move.w	d0,$30(a0)
0001A7B4 74FF                       		moveq	#-1,d2
0001A7B6 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A7BA 2242                       		movea.l	d2,a1
0001A7BC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A7C2 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A7C8 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A7CC 2242                       		movea.l	d2,a1
0001A7CE 137C 0001 0029             		move.b	#1,$29(a1)
0001A7D4 337C 0000 0030             		move.w	#0,$30(a1)
0001A7DA 317C 0001 0032             		move.w	#1,$32(a0)
0001A7E0 4228 0035                  		clr.b	$35(a0)
0001A7E4 303C 00B7                  		move.w	#$B7,d0
0001A7E8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A7EE                            
0001A7EE                            loc_19F10:
0001A7EE 4A68 0032                  		tst.w	$32(a0)
0001A7F2 6B00 0000                  		bmi.w	loc_19FA6
0001A7F6 08A8 0000 0022             		bclr	#0,$22(a0)
0001A7FC 3038 D008                  		move.w	($FFFFD008).w,d0
0001A800 9068 0008                  		sub.w	8(a0),d0
0001A804 6500                       		bcs.s	loc_19F2E
0001A806 08E8 0000 0022             		bset	#0,$22(a0)
0001A80C                            
0001A80C                            loc_19F2E:
0001A80C 323C 002B                  		move.w	#$2B,d1
0001A810 343C 0014                  		move.w	#$14,d2
0001A814 363C 0014                  		move.w	#$14,d3
0001A818 3828 0008                  		move.w	8(a0),d4
0001A81C 4EB9 0001 01D8             		jsr	SolidObject
0001A822 4A44                       		tst.w	d4
0001A824 6E00                       		bgt.s	loc_19F50
0001A826                            
0001A826                            loc_19F48:
0001A826 4A28 0035                  		tst.b	$35(a0)
0001A82A 6600                       		bne.s	loc_19F88
0001A82C 6000                       		bra.s	loc_19F96
0001A82E                            ; ===========================================================================
0001A82E                            
0001A82E                            loc_19F50:
0001A82E 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A832 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A838 66EC                       		bne.s	loc_19F48
0001A83A 303C 0300                  		move.w	#$300,d0
0001A83E 0828 0000 0022             		btst	#0,$22(a0)
0001A844 6600                       		bne.s	loc_19F6A
0001A846 4440                       		neg.w	d0
0001A848                            
0001A848                            loc_19F6A:
0001A848 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A84C 4A28 0035                  		tst.b	$35(a0)
0001A850 6600                       		bne.s	loc_19F88
0001A852 5328 0021                  		subq.b	#1,$21(a0)
0001A856 117C 0064 0035             		move.b	#$64,$35(a0)
0001A85C 303C 00AC                  		move.w	#$AC,d0
0001A860 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A866                            
0001A866                            loc_19F88:
0001A866 5328 0035                  		subq.b	#1,$35(a0)
0001A86A 6700                       		beq.s	loc_19F96
0001A86C 117C 0003 001C             		move.b	#3,$1C(a0)
0001A872 6000                       		bra.s	loc_19F9C
0001A874                            ; ===========================================================================
0001A874                            
0001A874                            loc_19F96:
0001A874 117C 0001 001C             		move.b	#1,$1C(a0)
0001A87A                            
0001A87A                            loc_19F9C:
0001A87A 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A87E 4EF9 0000 AEC8             		jmp	AnimateSprite
0001A884                            ; ===========================================================================
0001A884                            
0001A884                            loc_19FA6:
0001A884 4A28 0021                  		tst.b	$21(a0)
0001A888 6700                       		beq.s	loc_19FBC
0001A88A 5428 0034                  		addq.b	#2,$34(a0)
0001A88E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A894 4268 0032                  		clr.w	$32(a0)
0001A898 4E75                       		rts	
0001A89A                            ; ===========================================================================
0001A89A                            
0001A89A                            loc_19FBC:
0001A89A 117C 0006 0034             		move.b	#6,$34(a0)
0001A8A0 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A8A6 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A8AC 117C 0014 0016             		move.b	#$14,$16(a0)
0001A8B2 4E75                       		rts	
0001A8B4                            ; ===========================================================================
0001A8B4 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A8C4                            ; ===========================================================================
0001A8C4                            
0001A8C4                            loc_19FE6:				; XREF: off_19E80
0001A8C4 70FF                       		moveq	#-1,d0
0001A8C6 3028 0036                  		move.w	$36(a0),d0
0001A8CA 2240                       		movea.l	d0,a1
0001A8CC 4A68 0030                  		tst.w	$30(a0)
0001A8D0 6A00                       		bpl.s	loc_1A000
0001A8D2 4268 0030                  		clr.w	$30(a0)
0001A8D6 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A8DC 6100                       		bsr.s	loc_1A020
0001A8DE                            
0001A8DE                            loc_1A000:
0001A8DE 700F                       		moveq	#$F,d0
0001A8E0 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A8E4 6600                       		bne.s	loc_1A00A
0001A8E6 6100                       		bsr.s	loc_1A020
0001A8E8                            
0001A8E8                            loc_1A00A:
0001A8E8 4A68 0032                  		tst.w	$32(a0)
0001A8EC 6700                       		beq.s	locret_1A01E
0001A8EE 5528 0034                  		subq.b	#2,$34(a0)
0001A8F2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A8F8 4268 0032                  		clr.w	$32(a0)
0001A8FC                            
0001A8FC                            locret_1A01E:
0001A8FC 4E75                       		rts	
0001A8FE                            ; ===========================================================================
0001A8FE                            
0001A8FE                            loc_1A020:
0001A8FE 303C 00B1                  		move.w	#$B1,d0
0001A902 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A908                            ; ===========================================================================
0001A908                            
0001A908                            loc_1A02A:				; XREF: off_19E80
0001A908 117C 0030 0017             		move.b	#$30,$17(a0)
0001A90E 08E8 0000 0022             		bset	#0,$22(a0)
0001A914 4EB9 0000 DDE2             		jsr	SpeedToPos
0001A91A 117C 0006 001A             		move.b	#6,$1A(a0)
0001A920 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A926 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A92C 6500                       		bcs.s	loc_1A070
0001A92E 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A934 5428 0034                  		addq.b	#2,$34(a0)
0001A938 117C 0020 0017             		move.b	#$20,$17(a0)
0001A93E 317C 0100 0010             		move.w	#$100,$10(a0)
0001A944 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A94A 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A94E                            
0001A94E                            loc_1A070:
0001A94E 6000 0000                  		bra.w	loc_1A166
0001A952                            ; ===========================================================================
0001A952                            
0001A952                            loc_1A074:				; XREF: off_19E80
0001A952 08E8 0000 0022             		bset	#0,$22(a0)
0001A958 117C 0004 001C             		move.b	#4,$1C(a0)
0001A95E 4EB9 0000 DDE2             		jsr	SpeedToPos
0001A964 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A96A 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A970 6500                       		bcs.s	loc_1A09A
0001A972 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A978                            
0001A978                            loc_1A09A:
0001A978 317C 0400 0010             		move.w	#$400,$10(a0)
0001A97E 3028 0008                  		move.w	8(a0),d0
0001A982 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A986 6A00                       		bpl.s	loc_1A0B4
0001A988 317C 0500 0010             		move.w	#$500,$10(a0)
0001A98E 6000 0000                  		bra.w	loc_1A0F2
0001A992                            ; ===========================================================================
0001A992                            
0001A992                            loc_1A0B4:
0001A992 0440 0070                  		subi.w	#$70,d0
0001A996 6500                       		bcs.s	loc_1A0F2
0001A998 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A99E 5140                       		subq.w	#8,d0
0001A9A0 6500                       		bcs.s	loc_1A0F2
0001A9A2 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A9A8 5140                       		subq.w	#8,d0
0001A9AA 6500                       		bcs.s	loc_1A0F2
0001A9AC 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A9B2 5140                       		subq.w	#8,d0
0001A9B4 6500                       		bcs.s	loc_1A0F2
0001A9B6 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A9BC 5140                       		subq.w	#8,d0
0001A9BE 6500                       		bcs.s	loc_1A0F2
0001A9C0 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A9C6 0440 0038                  		subi.w	#$38,d0
0001A9CA 6500                       		bcs.s	loc_1A0F2
0001A9CC 4268 0010                  		clr.w	$10(a0)
0001A9D0                            
0001A9D0                            loc_1A0F2:
0001A9D0 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A9D6 6500                       		bcs.s	loc_1A110
0001A9D8 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A9DE 317C 0240 0010             		move.w	#$240,$10(a0)
0001A9E4 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A9EA 5428 0034                  		addq.b	#2,$34(a0)
0001A9EE                            
0001A9EE                            loc_1A110:
0001A9EE 6000                       		bra.s	loc_1A15C
0001A9F0                            ; ===========================================================================
0001A9F0                            
0001A9F0                            loc_1A112:				; XREF: off_19E80
0001A9F0 4EB9 0000 DDE2             		jsr	SpeedToPos
0001A9F6 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A9FC 6500                       		bcs.s	loc_1A124
0001A9FE 4268 0010                  		clr.w	$10(a0)
0001AA02                            
0001AA02                            loc_1A124:
0001AA02 0668 0034 0012             		addi.w	#$34,$12(a0)
0001AA08 4A68 0012                  		tst.w	$12(a0)
0001AA0C 6B00                       		bmi.s	loc_1A142
0001AA0E 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001AA14 6500                       		bcs.s	loc_1A142
0001AA16 317C 0592 000C             		move.w	#$592,$C(a0)
0001AA1C 4268 0012                  		clr.w	$12(a0)
0001AA20                            
0001AA20                            loc_1A142:
0001AA20 3028 0010                  		move.w	$10(a0),d0
0001AA24 8068 0012                  		or.w	$12(a0),d0
0001AA28 6600                       		bne.s	loc_1A15C
0001AA2A 5428 0034                  		addq.b	#2,$34(a0)
0001AA2E 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AA34 117C 0001 0021             		move.b	#1,$21(a0)
0001AA3A                            
0001AA3A                            loc_1A15C:
0001AA3A 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001AA3E 4EB9 0000 AEC8             		jsr	AnimateSprite
0001AA44                            
0001AA44                            loc_1A166:
0001AA44 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AA4A 6C00                       		bge.s	loc_1A172
0001AA4C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AA50                            
0001AA50                            loc_1A172:
0001AA50 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AA56 6C00                       		bge.s	locret_1A190
0001AA58 323C 001B                  		move.w	#$1B,d1
0001AA5C 343C 0070                  		move.w	#$70,d2
0001AA60 363C 0071                  		move.w	#$71,d3
0001AA64 3828 0008                  		move.w	8(a0),d4
0001AA68 4EF9 0001 01D8             		jmp	SolidObject
0001AA6E                            ; ===========================================================================
0001AA6E                            
0001AA6E                            locret_1A190:
0001AA6E 4E75                       		rts	
0001AA70                            ; ===========================================================================
0001AA70                            
0001AA70                            loc_1A192:				; XREF: off_19E80
0001AA70 217C 0001 866A 0004        		move.l	#Map_Eggman,4(a0)
0001AA78 317C 0400 0002             		move.w	#$400,2(a0)
0001AA7E 117C 0000 001C             		move.b	#0,$1C(a0)
0001AA84 08E8 0000 0022             		bset	#0,$22(a0)
0001AA8A 4EB9 0000 DDE2             		jsr	SpeedToPos
0001AA90 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AA96 6400                       		bcc.s	loc_1A1D0
0001AA98 317C 0180 0010             		move.w	#$180,$10(a0)
0001AA9E 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AAA4 117C 000F 0020             		move.b	#$F,$20(a0)
0001AAAA 5428 0034                  		addq.b	#2,$34(a0)
0001AAAE                            
0001AAAE                            loc_1A1D0:
0001AAAE 6000 FF8A                  		bra.w	loc_1A15C
0001AAB2                            ; ===========================================================================
0001AAB2                            
0001AAB2                            loc_1A1D4:				; XREF: off_19E80
0001AAB2 08E8 0000 0022             		bset	#0,$22(a0)
0001AAB8 4EB9 0000 DDE2             		jsr	SpeedToPos
0001AABE 4A68 0030                  		tst.w	$30(a0)
0001AAC2 6600                       		bne.s	loc_1A1FC
0001AAC4 4A28 0020                  		tst.b	$20(a0)
0001AAC8 6600                       		bne.s	loc_1A216
0001AACA 317C 001E 0030             		move.w	#$1E,$30(a0)
0001AAD0 303C 00AC                  		move.w	#$AC,d0
0001AAD4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AADA                            
0001AADA                            loc_1A1FC:
0001AADA 5368 0030                  		subq.w	#1,$30(a0)
0001AADE 6600                       		bne.s	loc_1A216
0001AAE0 4A28 0022                  		tst.b	$22(a0)
0001AAE4 6A00                       		bpl.s	loc_1A210
0001AAE6 317C 0060 0012             		move.w	#$60,$12(a0)
0001AAEC 6000                       		bra.s	loc_1A216
0001AAEE                            ; ===========================================================================
0001AAEE                            
0001AAEE                            loc_1A210:
0001AAEE 117C 000F 0020             		move.b	#$F,$20(a0)
0001AAF4                            
0001AAF4                            loc_1A216:
0001AAF4 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AAFA 6D00                       		blt.s	loc_1A23A
0001AAFC 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AB02 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AB08 4278 D014                  		clr.w	($FFFFD014).w
0001AB0C 4A68 0012                  		tst.w	$12(a0)
0001AB10 6A00                       		bpl.s	loc_1A248
0001AB12 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AB18                            
0001AB18                            loc_1A23A:
0001AB18 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AB1E 6D00                       		blt.s	loc_1A248
0001AB20 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AB26                            
0001AB26                            loc_1A248:
0001AB26 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AB2C 6500                       		bcs.s	loc_1A260
0001AB2E 4A28 0001                  		tst.b	1(a0)
0001AB32 6B00                       		bmi.s	loc_1A260
0001AB34 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AB3A 6000 FAF4                  		bra.w	Obj85_Delete
0001AB3E                            ; ===========================================================================
0001AB3E                            
0001AB3E                            loc_1A260:
0001AB3E 6000 FEFA                  		bra.w	loc_1A15C
0001AB42                            ; ===========================================================================
0001AB42                            
0001AB42                            loc_1A264:				; XREF: Obj85_Index
0001AB42 2268 0034                  		movea.l	$34(a0),a1
0001AB46 1011                       		move.b	(a1),d0
0001AB48 B010                       		cmp.b	(a0),d0
0001AB4A 6600 FAE4                  		bne.w	Obj85_Delete
0001AB4E 117C 0007 001C             		move.b	#7,$1C(a0)
0001AB54 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AB5A 6C00                       		bge.s	loc_1A280
0001AB5C 6000                       		bra.s	loc_1A2A6
0001AB5E                            ; ===========================================================================
0001AB5E                            
0001AB5E                            loc_1A280:
0001AB5E 4A69 0010                  		tst.w	$10(a1)
0001AB62 6700                       		beq.s	loc_1A28C
0001AB64 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AB6A                            
0001AB6A                            loc_1A28C:
0001AB6A 43FA DA9A                  		lea	Ani_Eggman(pc),a1
0001AB6E 4EB9 0000 AEC8             		jsr	AnimateSprite
0001AB74                            
0001AB74                            loc_1A296:
0001AB74 2268 0034                  		movea.l	$34(a0),a1
0001AB78 3169 0008 0008             		move.w	8(a1),8(a0)
0001AB7E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AB84                            
0001AB84                            loc_1A2A6:
0001AB84 2268 0034                  		movea.l	$34(a0),a1
0001AB88 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AB8E 7003                       		moveq	#3,d0
0001AB90 C028 0022                  		and.b	$22(a0),d0
0001AB94 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AB9A 8128 0001                  		or.b	d0,1(a0)
0001AB9E 4EF9 0000 DE08             		jmp	DisplaySprite
0001ABA4                            ; ===========================================================================
0001ABA4                            
0001ABA4                            loc_1A2C6:				; XREF: Obj85_Index
0001ABA4 2268 0034                  		movea.l	$34(a0),a1
0001ABA8 1011                       		move.b	(a1),d0
0001ABAA B010                       		cmp.b	(a0),d0
0001ABAC 6600 FA82                  		bne.w	Obj85_Delete
0001ABB0 0CA9 0001 866A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ABB8 6700                       		beq.s	loc_1A2E4
0001ABBA 117C 000A 001A             		move.b	#$A,$1A(a0)
0001ABC0 60C2                       		bra.s	loc_1A2A6
0001ABC2                            ; ===========================================================================
0001ABC2                            
0001ABC2                            loc_1A2E4:
0001ABC2 117C 0001 001C             		move.b	#1,$1C(a0)
0001ABC8 4A29 0021                  		tst.b	$21(a1)
0001ABCC 6F00                       		ble.s	loc_1A312
0001ABCE 117C 0006 001C             		move.b	#6,$1C(a0)
0001ABD4 217C 0001 866A 0004        		move.l	#Map_Eggman,4(a0)
0001ABDC 317C 0400 0002             		move.w	#$400,2(a0)
0001ABE2 43FA DA22                  		lea	Ani_Eggman(pc),a1
0001ABE6 4EB9 0000 AEC8             		jsr	AnimateSprite
0001ABEC 6000 FF86                  		bra.w	loc_1A296
0001ABF0                            ; ===========================================================================
0001ABF0                            
0001ABF0                            loc_1A312:
0001ABF0 4A28 0001                  		tst.b	1(a0)
0001ABF4 6A00 FA3A                  		bpl.w	Obj85_Delete
0001ABF8 6100 D588                  		bsr.w	BossDefeated
0001ABFC 117C 0002 0018             		move.b	#2,$18(a0)
0001AC02 117C 0000 001C             		move.b	#0,$1C(a0)
0001AC08 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AC10 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AC16 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AC1A 4EB9 0000 AEC8             		jsr	AnimateSprite
0001AC20 6000 FF52                  		bra.w	loc_1A296
0001AC24                            ; ===========================================================================
0001AC24                            
0001AC24                            loc_1A346:				; XREF: Obj85_Index
0001AC24 08E8 0000 0022             		bset	#0,$22(a0)
0001AC2A 2268 0034                  		movea.l	$34(a0),a1
0001AC2E 0CA9 0001 866A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AC36 6700                       		beq.s	loc_1A35E
0001AC38 6000 FF4A                  		bra.w	loc_1A2A6
0001AC3C                            ; ===========================================================================
0001AC3C                            
0001AC3C                            loc_1A35E:
0001AC3C 3169 0008 0008             		move.w	8(a1),8(a0)
0001AC42 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AC48 4A28 001E                  		tst.b	$1E(a0)
0001AC4C 6600                       		bne.s	loc_1A376
0001AC4E 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AC54                            
0001AC54                            loc_1A376:
0001AC54 5328 001E                  		subq.b	#1,$1E(a0)
0001AC58 6E00                       		bgt.s	loc_1A38A
0001AC5A 5228 001A                  		addq.b	#1,$1A(a0)
0001AC5E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AC64 6E00 F9CA                  		bgt.w	Obj85_Delete
0001AC68                            
0001AC68                            loc_1A38A:
0001AC68 6000 FF0A                  		bra.w	loc_1A296
0001AC6C                            ; ===========================================================================
0001AC6C                            
0001AC6C                            loc_1A38E:				; XREF: Obj85_Index
0001AC6C 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AC72 3038 D008                  		move.w	($FFFFD008).w,d0
0001AC76 9068 0008                  		sub.w	8(a0),d0
0001AC7A 6500                       		bcs.s	loc_1A3A6
0001AC7C 4A28 0001                  		tst.b	1(a0)
0001AC80 6A00 F9AE                  		bpl.w	Obj85_Delete
0001AC84                            
0001AC84                            loc_1A3A6:
0001AC84 4EF9 0000 DE08             		jmp	DisplaySprite
0001AC8A                            ; ===========================================================================
0001AC8A                            
0001AC8A                            loc_1A3AC:				; XREF: Obj85_Index
0001AC8A 117C 0000 001A             		move.b	#0,$1A(a0)
0001AC90 08E8 0000 0022             		bset	#0,$22(a0)
0001AC96 2268 0034                  		movea.l	$34(a0),a1
0001AC9A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001ACA0 6600                       		bne.s	loc_1A3D0
0001ACA2 0CA9 0001 866A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ACAA 6700 F984                  		beq.w	Obj85_Delete
0001ACAE                            
0001ACAE                            loc_1A3D0:
0001ACAE 6000 FED4                  		bra.w	loc_1A2A6
0001ACB2                            ; ===========================================================================
0001ACB2                            Ani_obj85:
0001ACB2                            	include "_anim\obj85.asm"
0001ACB2                            ; ---------------------------------------------------------------------------
0001ACB2                            ; Animation script - Eggman (FZ)
0001ACB2                            ; ---------------------------------------------------------------------------
0001ACB2 0000                       		dc.w byte_1A3D6-Ani_obj85
0001ACB4 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001ACB8                            		even
0001ACB8                            		even
0001ACB8                            
0001ACB8                            Map_Eggman2:
0001ACB8                            	include "_maps\Eggman2.asm"
0001ACB8                            ; ---------------------------------------------------------------------------
0001ACB8                            ; Sprite mappings - Eggman (FZ)
0001ACB8                            ; ---------------------------------------------------------------------------
0001ACB8 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001ACBA 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001ACBC 06                         byte_1A3DE:	dc.b 6
0001ACBD E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001ACC2 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001ACC7 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001ACCC FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001ACD1 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001ACD6 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001ACDB 06                         byte_1A3FD:	dc.b 6
0001ACDC E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001ACE1 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001ACE6 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001ACEB FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001ACF0 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001ACF5 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001ACFA                            		even
0001ACFA                            		even
0001ACFA                            
0001ACFA                            Map_FZBoss:
0001ACFA                            	include "_maps\FZ boss.asm"
0001ACFA                            ; ---------------------------------------------------------------------------
0001ACFA                            ; Sprite mappings - boss (FZ)
0001ACFA                            ; ---------------------------------------------------------------------------
0001ACFA 0000                       		dc.w byte_1A422-Map_FZBoss
0001ACFC 0000                       		dc.w byte_1A42D-Map_FZBoss
0001ACFE 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AD00 02                         byte_1A422:	dc.b 2
0001AD01 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AD06 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AD0B 03                         byte_1A42D:	dc.b 3
0001AD0C 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AD11 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AD16 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AD1B 02                         byte_1A43D:	dc.b 2
0001AD1C 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AD21 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AD26                            		even
0001AD26                            		even
0001AD26                            
0001AD26                            ; ===========================================================================
0001AD26                            
0001AD26                            Obj84_Delete:
0001AD26 4EF9 0000 DE44             		jmp	DeleteObject
0001AD2C                            ; ===========================================================================
0001AD2C                            ; ---------------------------------------------------------------------------
0001AD2C                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AD2C                            ; ---------------------------------------------------------------------------
0001AD2C                            
0001AD2C                            Obj84:					; XREF: Obj_Index
0001AD2C 7000                       		moveq	#0,d0
0001AD2E 1028 0024                  		move.b	$24(a0),d0
0001AD32 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AD36 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AD3A                            ; ===========================================================================
0001AD3A 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AD3C 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AD3E 0000                       		dc.w loc_1A57E-Obj84_Index
0001AD40                            
0001AD40 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AD44 2550 0620                  		dc.w $2550, $620
0001AD48 2490 04C0                  		dc.w $2490, $4C0
0001AD4C 2510 04C0                  		dc.w $2510, $4C0
0001AD50                            ; ===========================================================================
0001AD50                            
0001AD50                            Obj84_Main:				; XREF: Obj84_Index
0001AD50 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AD54 7000                       		moveq	#0,d0
0001AD56 1028 0028                  		move.b	$28(a0),d0
0001AD5A D040                       		add.w	d0,d0
0001AD5C D2C0                       		adda.w	d0,a1
0001AD5E 117C 0004 0001             		move.b	#4,1(a0)
0001AD64 08E8 0007 0001             		bset	#7,1(a0)
0001AD6A 08E8 0004 0001             		bset	#4,1(a0)
0001AD70 317C 0300 0002             		move.w	#$300,2(a0)
0001AD76 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AD7E 3159 0008                  		move.w	(a1)+,8(a0)
0001AD82 3151 000C                  		move.w	(a1),$C(a0)
0001AD86 3159 0038                  		move.w	(a1)+,$38(a0)
0001AD8A 117C 0020 0016             		move.b	#$20,$16(a0)
0001AD90 117C 0060 0017             		move.b	#$60,$17(a0)
0001AD96 117C 0020 0019             		move.b	#$20,$19(a0)
0001AD9C 117C 0060 0016             		move.b	#$60,$16(a0)
0001ADA2 117C 0003 0018             		move.b	#3,$18(a0)
0001ADA8 5428 0024                  		addq.b	#2,$24(a0)
0001ADAC                            
0001ADAC                            loc_1A4CE:				; XREF: Obj84_Index
0001ADAC 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001ADB2 6F00                       		ble.s	loc_1A4DC
0001ADB4 08E8 0001 0001             		bset	#1,1(a0)
0001ADBA                            
0001ADBA                            loc_1A4DC:
0001ADBA 42A8 003C                  		clr.l	$3C(a0)
0001ADBE 4A28 0029                  		tst.b	$29(a0)
0001ADC2 6700                       		beq.s	loc_1A4EA
0001ADC4 5428 0024                  		addq.b	#2,$24(a0)
0001ADC8                            
0001ADC8                            loc_1A4EA:
0001ADC8 2028 003C                  		move.l	$3C(a0),d0
0001ADCC 2228 0038                  		move.l	$38(a0),d1
0001ADD0 D280                       		add.l	d0,d1
0001ADD2 4841                       		swap	d1
0001ADD4 3141 000C                  		move.w	d1,$C(a0)
0001ADD8 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001ADDE 6600                       		bne.s	loc_1A524
0001ADE0 4A68 0030                  		tst.w	$30(a0)
0001ADE4 6A00                       		bpl.s	loc_1A524
0001ADE6 70F6                       		moveq	#-$A,d0
0001ADE8 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001ADEE 6F00                       		ble.s	loc_1A514
0001ADF0 700E                       		moveq	#$E,d0
0001ADF2                            
0001ADF2                            loc_1A514:
0001ADF2 D240                       		add.w	d0,d1
0001ADF4 2268 0034                  		movea.l	$34(a0),a1
0001ADF8 3341 000C                  		move.w	d1,$C(a1)
0001ADFC 3368 0008 0008             		move.w	8(a0),8(a1)
0001AE02                            
0001AE02                            loc_1A524:
0001AE02 323C 002B                  		move.w	#$2B,d1
0001AE06 343C 0060                  		move.w	#$60,d2
0001AE0A 363C 0061                  		move.w	#$61,d3
0001AE0E 3828 0008                  		move.w	8(a0),d4
0001AE12 4EB9 0001 01D8             		jsr	SolidObject
0001AE18 7000                       		moveq	#0,d0
0001AE1A 3228 003C                  		move.w	$3C(a0),d1
0001AE1E 6A00                       		bpl.s	loc_1A550
0001AE20 4441                       		neg.w	d1
0001AE22 5141                       		subq.w	#8,d1
0001AE24 6500                       		bcs.s	loc_1A55C
0001AE26 5200                       		addq.b	#1,d0
0001AE28 E841                       		asr.w	#4,d1
0001AE2A D041                       		add.w	d1,d0
0001AE2C 6000                       		bra.s	loc_1A55C
0001AE2E                            ; ===========================================================================
0001AE2E                            
0001AE2E                            loc_1A550:
0001AE2E 0441 0027                  		subi.w	#$27,d1
0001AE32 6500                       		bcs.s	loc_1A55C
0001AE34 5200                       		addq.b	#1,d0
0001AE36 E841                       		asr.w	#4,d1
0001AE38 D041                       		add.w	d1,d0
0001AE3A                            
0001AE3A                            loc_1A55C:
0001AE3A 1140 001A                  		move.b	d0,$1A(a0)
0001AE3E 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE42 9068 0008                  		sub.w	8(a0),d0
0001AE46 6B00                       		bmi.s	loc_1A578
0001AE48 0440 0140                  		subi.w	#$140,d0
0001AE4C 6B00                       		bmi.s	loc_1A578
0001AE4E 4A28 0001                  		tst.b	1(a0)
0001AE52 6A00 FED2                  		bpl.w	Obj84_Delete
0001AE56                            
0001AE56                            loc_1A578:
0001AE56 4EF9 0000 DE08             		jmp	DisplaySprite
0001AE5C                            ; ===========================================================================
0001AE5C                            
0001AE5C                            loc_1A57E:				; XREF: Obj84_Index
0001AE5C 7000                       		moveq	#0,d0
0001AE5E 1028 0028                  		move.b	$28(a0),d0
0001AE62 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AE66 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AE6A 6000 FF5C                  		bra.w	loc_1A4EA
0001AE6E                            ; ===========================================================================
0001AE6E 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AE70 0000                       		dc.w loc_1A598-off_1A590
0001AE72 0000                       		dc.w loc_1A604-off_1A590
0001AE74 0000                       		dc.w loc_1A604-off_1A590
0001AE76                            ; ===========================================================================
0001AE76                            
0001AE76                            loc_1A598:				; XREF: off_1A590
0001AE76 4A28 0029                  		tst.b	$29(a0)
0001AE7A 6600                       		bne.s	loc_1A5D4
0001AE7C 2268 0034                  		movea.l	$34(a0),a1
0001AE80 4A29 0021                  		tst.b	$21(a1)
0001AE84 6600                       		bne.s	loc_1A5B4
0001AE86 6100 D2FA                  		bsr.w	BossDefeated
0001AE8A 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001AE92                            
0001AE92                            loc_1A5B4:
0001AE92 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AE9A 6400                       		bcc.s	locret_1A602
0001AE9C 42A8 003C                  		clr.l	$3C(a0)
0001AEA0 2268 0034                  		movea.l	$34(a0),a1
0001AEA4 5369 0032                  		subq.w	#1,$32(a1)
0001AEA8 4269 0030                  		clr.w	$30(a1)
0001AEAC 5528 0024                  		subq.b	#2,$24(a0)
0001AEB0 4E75                       		rts	
0001AEB2                            ; ===========================================================================
0001AEB2                            
0001AEB2                            loc_1A5D4:
0001AEB2 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AEB8 6C00                       		bge.s	loc_1A5E4
0001AEBA 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AEC2                            
0001AEC2                            loc_1A5E4:
0001AEC2 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001AECA 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AED0 6E00                       		bgt.s	locret_1A602
0001AED2 4268 003E                  		clr.w	$3E(a0)
0001AED6 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AEDC 4228 0029                  		clr.b	$29(a0)
0001AEE0                            
0001AEE0                            locret_1A602:
0001AEE0 4E75                       		rts	
0001AEE2                            ; ===========================================================================
0001AEE2                            
0001AEE2                            loc_1A604:				; XREF: off_1A590
0001AEE2 08E8 0001 0001             		bset	#1,1(a0)
0001AEE8 4A28 0029                  		tst.b	$29(a0)
0001AEEC 6600                       		bne.s	loc_1A646
0001AEEE 2268 0034                  		movea.l	$34(a0),a1
0001AEF2 4A29 0021                  		tst.b	$21(a1)
0001AEF6 6600                       		bne.s	loc_1A626
0001AEF8 6100 D288                  		bsr.w	BossDefeated
0001AEFC 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AF04                            
0001AF04                            loc_1A626:
0001AF04 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AF0C 6400                       		bcc.s	locret_1A674
0001AF0E 42A8 003C                  		clr.l	$3C(a0)
0001AF12 2268 0034                  		movea.l	$34(a0),a1
0001AF16 5369 0032                  		subq.w	#1,$32(a1)
0001AF1A 4269 0030                  		clr.w	$30(a1)
0001AF1E 5528 0024                  		subq.b	#2,$24(a0)
0001AF22 4E75                       		rts	
0001AF24                            ; ===========================================================================
0001AF24                            
0001AF24                            loc_1A646:
0001AF24 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AF2A 6D00                       		blt.s	loc_1A656
0001AF2C 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AF34                            
0001AF34                            loc_1A656:
0001AF34 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AF3C 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AF42 6D00                       		blt.s	locret_1A674
0001AF44 4268 003E                  		clr.w	$3E(a0)
0001AF48 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AF4E 4228 0029                  		clr.b	$29(a0)
0001AF52                            
0001AF52                            locret_1A674:
0001AF52 4E75                       		rts	
0001AF54                            ; ===========================================================================
0001AF54                            ; ---------------------------------------------------------------------------
0001AF54                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AF54                            ; ---------------------------------------------------------------------------
0001AF54                            Map_obj84:
0001AF54                            	include "_maps\obj84.asm"
0001AF54                            ; ---------------------------------------------------------------------------
0001AF54                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AF54                            ; ---------------------------------------------------------------------------
0001AF54 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AF58 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AF5C 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AF60 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AF64 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AF68 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AF6C 06                         byte_1A68E:	dc.b 6
0001AF6D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF72 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF77 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF7C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF81 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF86 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF8B 08                         byte_1A6AD:	dc.b 8
0001AF8C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF91 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF96 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF9B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFA0 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFA5 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AFAA D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AFAF D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AFB4 0A                         byte_1A6D6:	dc.b $A
0001AFB5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AFBA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AFBF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AFC4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFC9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFCE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AFD3 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AFD8 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AFDD F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AFE2 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AFE7 0C                         byte_1A709:	dc.b $C
0001AFE8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AFED A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AFF2 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AFF7 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFFC B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B001 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B006 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B00B D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B010 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B015 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B01A 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B01F 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B024 0D                         byte_1A746:	dc.b $D
0001B025 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B02A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B02F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B034 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B039 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B03E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B043 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B048 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B04D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B052 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B057 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B05C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B061 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B066 0E                         byte_1A788:	dc.b $E
0001B067 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B06C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B071 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B076 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B07B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B080 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B085 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B08A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B08F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B094 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B099 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B09E 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B0A3 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B0A8 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B0AD 02                         byte_1A7CF:	dc.b 2
0001B0AE F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B0B3 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B0B8                            		even
0001B0B8                            		even
0001B0B8                            
0001B0B8                            ; ===========================================================================
0001B0B8                            ; ---------------------------------------------------------------------------
0001B0B8                            ; Object 86 - energy balls (FZ)
0001B0B8                            ; ---------------------------------------------------------------------------
0001B0B8                            
0001B0B8                            Obj86:					; XREF: Obj_Index
0001B0B8 7000                       		moveq	#0,d0
0001B0BA 1028 0024                  		move.b	$24(a0),d0
0001B0BE 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B0C2 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B0C6                            ; ===========================================================================
0001B0C6 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B0C8 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B0CA 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B0CC 0000                       		dc.w loc_1A962-Obj86_Index
0001B0CE 0000                       		dc.w loc_1A982-Obj86_Index
0001B0D0                            ; ===========================================================================
0001B0D0                            
0001B0D0                            Obj86_Main:				; XREF: Obj86_Index
0001B0D0 317C 2588 0008             		move.w	#$2588,8(a0)
0001B0D6 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B0DC 317C 0300 0002             		move.w	#$300,2(a0)
0001B0E2 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B0EA 117C 0000 001C             		move.b	#0,$1C(a0)
0001B0F0 117C 0003 0018             		move.b	#3,$18(a0)
0001B0F6 117C 0008 0017             		move.b	#8,$17(a0)
0001B0FC 117C 0008 0016             		move.b	#8,$16(a0)
0001B102 117C 0004 0001             		move.b	#4,1(a0)
0001B108 08E8 0007 0001             		bset	#7,1(a0)
0001B10E 5428 0024                  		addq.b	#2,$24(a0)
0001B112                            
0001B112                            Obj86_Generator:			; XREF: Obj86_Index
0001B112 2268 0034                  		movea.l	$34(a0),a1
0001B116 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B11C 6600                       		bne.s	loc_1A850
0001B11E 10BC 003F                  		move.b	#$3F,(a0)
0001B122 117C 0000 0024             		move.b	#0,$24(a0)
0001B128 4EF9 0000 DE08             		jmp	DisplaySprite
0001B12E                            ; ===========================================================================
0001B12E                            
0001B12E                            loc_1A850:
0001B12E 117C 0000 001C             		move.b	#0,$1C(a0)
0001B134 4A28 0029                  		tst.b	$29(a0)
0001B138 6700                       		beq.s	loc_1A86C
0001B13A 5428 0024                  		addq.b	#2,$24(a0)
0001B13E 117C 0001 001C             		move.b	#1,$1C(a0)
0001B144 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B14A                            
0001B14A                            loc_1A86C:
0001B14A 323C 0013                  		move.w	#$13,d1
0001B14E 343C 0008                  		move.w	#8,d2
0001B152 363C 0011                  		move.w	#$11,d3
0001B156 3828 0008                  		move.w	8(a0),d4
0001B15A 4EB9 0001 01D8             		jsr	SolidObject
0001B160 3038 D008                  		move.w	($FFFFD008).w,d0
0001B164 9068 0008                  		sub.w	8(a0),d0
0001B168 6B00                       		bmi.s	loc_1A89A
0001B16A 0440 0140                  		subi.w	#$140,d0
0001B16E 6B00                       		bmi.s	loc_1A89A
0001B170 4A28 0001                  		tst.b	1(a0)
0001B174 6A00 FBB0                  		bpl.w	Obj84_Delete
0001B178                            
0001B178                            loc_1A89A:
0001B178 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B17C 4EB9 0000 AEC8             		jsr	AnimateSprite
0001B182 4EF9 0000 DE08             		jmp	DisplaySprite
0001B188                            ; ===========================================================================
0001B188                            
0001B188                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B188 4A28 0029                  		tst.b	$29(a0)
0001B18C 6700 0000                  		beq.w	loc_1A954
0001B190 4228 0029                  		clr.b	$29(a0)
0001B194 D068 0030                  		add.w	$30(a0),d0
0001B198 0240 001E                  		andi.w	#$1E,d0
0001B19C D4C0                       		adda.w	d0,a2
0001B19E 5868 0030                  		addq.w	#4,$30(a0)
0001B1A2 4268 0032                  		clr.w	$32(a0)
0001B1A6 7403                       		moveq	#3,d2
0001B1A8                            
0001B1A8                            Obj86_Loop:
0001B1A8 4EB9 0000 E2A4             		jsr	SingleObjLoad2
0001B1AE 6600 0000                  		bne.w	loc_1A954
0001B1B2 12BC 0086                  		move.b	#$86,(a1)
0001B1B6 3368 0008 0008             		move.w	8(a0),8(a1)
0001B1BC 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B1C2 137C 0008 0024             		move.b	#8,$24(a1)
0001B1C8 337C 2300 0002             		move.w	#$2300,2(a1)
0001B1CE 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B1D6 137C 000C 0016             		move.b	#$C,$16(a1)
0001B1DC 137C 000C 0017             		move.b	#$C,$17(a1)
0001B1E2 137C 0000 0020             		move.b	#0,$20(a1)
0001B1E8 137C 0003 0018             		move.b	#3,$18(a1)
0001B1EE 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B1F4 137C 0004 0001             		move.b	#4,1(a1)
0001B1FA 08E9 0007 0001             		bset	#7,1(a1)
0001B200 2348 0034                  		move.l	a0,$34(a1)
0001B204 4EB9 0000 2CC6             		jsr	(RandomNumber).l
0001B20A 3228 0032                  		move.w	$32(a0),d1
0001B20E C3FC FFB1                  		muls.w	#-$4F,d1
0001B212 0641 2578                  		addi.w	#$2578,d1
0001B216 0240 001F                  		andi.w	#$1F,d0
0001B21A 0440 0010                  		subi.w	#$10,d0
0001B21E D041                       		add.w	d1,d0
0001B220 3340 0030                  		move.w	d0,$30(a1)
0001B224 5268 0032                  		addq.w	#1,$32(a0)
0001B228 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B22E 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B232                            
0001B232                            loc_1A954:
0001B232 4A68 0032                  		tst.w	$32(a0)
0001B236 6600                       		bne.s	loc_1A95E
0001B238 5428 0024                  		addq.b	#2,$24(a0)
0001B23C                            
0001B23C                            loc_1A95E:
0001B23C 6000 FF0C                  		bra.w	loc_1A86C
0001B240                            ; ===========================================================================
0001B240                            
0001B240                            loc_1A962:				; XREF: Obj86_Index
0001B240 117C 0002 001C             		move.b	#2,$1C(a0)
0001B246 4A68 0038                  		tst.w	$38(a0)
0001B24A 6600                       		bne.s	loc_1A97E
0001B24C 117C 0002 0024             		move.b	#2,$24(a0)
0001B252 2268 0034                  		movea.l	$34(a0),a1
0001B256 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B25C                            
0001B25C                            loc_1A97E:
0001B25C 6000 FEEC                  		bra.w	loc_1A86C
0001B260                            ; ===========================================================================
0001B260                            
0001B260                            loc_1A982:				; XREF: Obj86_Index
0001B260 7000                       		moveq	#0,d0
0001B262 1028 0025                  		move.b	$25(a0),d0
0001B266 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B26A 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B26E 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B272 4EB9 0000 AEC8             		jsr	AnimateSprite
0001B278 4EF9 0000 DE08             		jmp	DisplaySprite
0001B27E                            ; ===========================================================================
0001B27E 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B280 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B282 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B284                            ; ===========================================================================
0001B284                            
0001B284                            loc_1A9A6:				; XREF: Obj86_Index2
0001B284 3028 0030                  		move.w	$30(a0),d0
0001B288 9068 0008                  		sub.w	8(a0),d0
0001B28C E940                       		asl.w	#4,d0
0001B28E 3140 0010                  		move.w	d0,$10(a0)
0001B292 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B298 5428 0025                  		addq.b	#2,$25(a0)
0001B29C 4E75                       		rts	
0001B29E                            ; ===========================================================================
0001B29E                            
0001B29E                            loc_1A9C0:				; XREF: Obj86_Index2
0001B29E 4A68 0010                  		tst.w	$10(a0)
0001B2A2 6700                       		beq.s	loc_1A9E6
0001B2A4 4EB9 0000 DDE2             		jsr	SpeedToPos
0001B2AA 3028 0008                  		move.w	8(a0),d0
0001B2AE 9068 0030                  		sub.w	$30(a0),d0
0001B2B2 6400                       		bcc.s	loc_1A9E6
0001B2B4 4268 0010                  		clr.w	$10(a0)
0001B2B8 D168 0008                  		add.w	d0,8(a0)
0001B2BC 2268 0034                  		movea.l	$34(a0),a1
0001B2C0 5369 0032                  		subq.w	#1,$32(a1)
0001B2C4                            
0001B2C4                            loc_1A9E6:
0001B2C4 117C 0000 001C             		move.b	#0,$1C(a0)
0001B2CA 5368 0028                  		subq.w	#1,$28(a0)
0001B2CE 6600                       		bne.s	locret_1AA1C
0001B2D0 5428 0025                  		addq.b	#2,$25(a0)
0001B2D4 117C 0001 001C             		move.b	#1,$1C(a0)
0001B2DA 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B2E0 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B2E6 7000                       		moveq	#0,d0
0001B2E8 3038 D008                  		move.w	($FFFFD008).w,d0
0001B2EC 9068 0008                  		sub.w	8(a0),d0
0001B2F0 3140 0010                  		move.w	d0,$10(a0)
0001B2F4 317C 0140 0012             		move.w	#$140,$12(a0)
0001B2FA                            
0001B2FA                            locret_1AA1C:
0001B2FA 4E75                       		rts	
0001B2FC                            ; ===========================================================================
0001B2FC                            
0001B2FC                            loc_1AA1E:				; XREF: Obj86_Index2
0001B2FC 4EB9 0000 DDE2             		jsr	SpeedToPos
0001B302 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B308 6400                       		bcc.s	loc_1AA34
0001B30A 5368 0028                  		subq.w	#1,$28(a0)
0001B30E 6700                       		beq.s	loc_1AA34
0001B310 4E75                       		rts	
0001B312                            ; ===========================================================================
0001B312                            
0001B312                            loc_1AA34:
0001B312 2268 0034                  		movea.l	$34(a0),a1
0001B316 5369 0038                  		subq.w	#1,$38(a1)
0001B31A 6000 FA0A                  		bra.w	Obj84_Delete
0001B31E                            ; ===========================================================================
0001B31E                            Ani_obj86:
0001B31E                            	include "_anim\obj86.asm"
0001B31E                            ; ---------------------------------------------------------------------------
0001B31E                            ; Animation script - energy ball launcher (FZ)
0001B31E                            ; ---------------------------------------------------------------------------
0001B31E 0000                       		dc.w byte_1AA46-Ani_obj86
0001B320 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B322 0000                       		dc.w byte_1AA50-Ani_obj86
0001B324 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B328 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B32E 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B334                            		even
0001B334                            		even
0001B334                            
0001B334                            ; ---------------------------------------------------------------------------
0001B334                            ; Sprite mappings - energy ball	launcher (FZ)
0001B334                            ; ---------------------------------------------------------------------------
0001B334                            Map_obj86:
0001B334                            	include "_maps\obj86.asm"
0001B334                            ; ---------------------------------------------------------------------------
0001B334                            ; Sprite mappings - energy ball	launcher (FZ)
0001B334                            ; ---------------------------------------------------------------------------
0001B334 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B338 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B33C 01                         byte_1AA5E:	dc.b 1
0001B33D F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B342 01                         byte_1AA64:	dc.b 1
0001B343 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B348 01                         byte_1AA6A:	dc.b 1
0001B349 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B34E 01                         byte_1AA70:	dc.b 1
0001B34F F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B354                            		even
0001B354                            		even
0001B354                            
0001B354                            Ani_obj86a:
0001B354                            	include "_anim\obj86a.asm"
0001B354                            ; ---------------------------------------------------------------------------
0001B354                            ; Animation script - energy balls (FZ)
0001B354                            ; ---------------------------------------------------------------------------
0001B354 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B356 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B358 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B367 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B376 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B37A 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B384                            		even
0001B384                            		even
0001B384                            
0001B384                            ; ---------------------------------------------------------------------------
0001B384                            ; Sprite mappings - energy balls (FZ)
0001B384                            ; ---------------------------------------------------------------------------
0001B384                            Map_obj86a:
0001B384                            	include "_maps\obj86a.asm"
0001B384                            ; ---------------------------------------------------------------------------
0001B384                            ; Sprite mappings - energy balls (FZ)
0001B384                            ; ---------------------------------------------------------------------------
0001B384 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B388 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B38C 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B390 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B394 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B398 0000                       		dc.w byte_1AB20-Map_obj86a
0001B39A 02                         byte_1AABC:	dc.b 2
0001B39B F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B3A0 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B3A5 02                         byte_1AAC7:	dc.b 2
0001B3A6 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B3AB F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B3B0 02                         byte_1AAD2:	dc.b 2
0001B3B1 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B3B6 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B3BB 02                         byte_1AADD:	dc.b 2
0001B3BC F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B3C1 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B3C6 02                         byte_1AAE8:	dc.b 2
0001B3C7 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B3CC 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B3D1 02                         byte_1AAF3:	dc.b 2
0001B3D2 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B3D7 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B3DC 01                         byte_1AAFE:	dc.b 1
0001B3DD F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B3E2 01                         byte_1AB04:	dc.b 1
0001B3E3 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B3E8 02                         byte_1AB0A:	dc.b 2
0001B3E9 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B3EE 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B3F3 02                         byte_1AB15:	dc.b 2
0001B3F4 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B3F9 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B3FE 00                         byte_1AB20:	dc.b 0
0001B400 00                         		even
0001B400 00                         		even
0001B400                            
0001B400                            ; ===========================================================================
0001B400                            ; ---------------------------------------------------------------------------
0001B400                            ; Object 3E - prison capsule
0001B400                            ; ---------------------------------------------------------------------------
0001B400                            
0001B400                            Obj3E:					; XREF: Obj_Index
0001B400 7000                       		moveq	#0,d0
0001B402 1028 0024                  		move.b	$24(a0),d0
0001B406 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B40A 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B40E 3028 0008                  		move.w	8(a0),d0
0001B412 0240 FF80                  		andi.w	#$FF80,d0
0001B416 3238 F700                  		move.w	($FFFFF700).w,d1
0001B41A 0441 0080                  		subi.w	#$80,d1
0001B41E 0241 FF80                  		andi.w	#$FF80,d1
0001B422 9041                       		sub.w	d1,d0
0001B424 0C40 0280                  		cmpi.w	#$280,d0
0001B428 6200                       		bhi.s	Obj3E_Delete
0001B42A 4EF9 0000 DE08             		jmp	DisplaySprite
0001B430                            ; ===========================================================================
0001B430                            
0001B430                            Obj3E_Delete:
0001B430 4EF9 0000 DE44             		jmp	DeleteObject
0001B436                            ; ===========================================================================
0001B436 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B438 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B43A 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B43C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B43E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B440 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B442 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B444 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B446                            
0001B446 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B44A 040C 0501                  		dc.b 4,	$C, 5, 1
0001B44E 0610 0403                  		dc.b 6,	$10, 4,	3
0001B452 0810 0305                  		dc.b 8,	$10, 3,	5
0001B456                            ; ===========================================================================
0001B456                            
0001B456                            Obj3E_Main:				; XREF: Obj3E_Index
0001B456 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B45E 317C 049D 0002             		move.w	#$49D,2(a0)
0001B464 117C 0004 0001             		move.b	#4,1(a0)
0001B46A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B470 7000                       		moveq	#0,d0
0001B472 1028 0028                  		move.b	$28(a0),d0
0001B476 E548                       		lsl.w	#2,d0
0001B478 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B47C 1159 0024                  		move.b	(a1)+,$24(a0)
0001B480 1159 0019                  		move.b	(a1)+,$19(a0)
0001B484 1159 0018                  		move.b	(a1)+,$18(a0)
0001B488 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B48C 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B490 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B492 117C 0006 0020             		move.b	#6,$20(a0)
0001B498 117C 0008 0021             		move.b	#8,$21(a0)
0001B49E                            
0001B49E                            Obj3E_Not02:
0001B49E 4E75                       		rts	
0001B4A0                            ; ===========================================================================
0001B4A0                            
0001B4A0                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B4A0 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B4A6 6700                       		beq.s	Obj3E_ChkOpened
0001B4A8 323C 002B                  		move.w	#$2B,d1
0001B4AC 343C 0018                  		move.w	#$18,d2
0001B4B0 363C 0018                  		move.w	#$18,d3
0001B4B4 3828 0008                  		move.w	8(a0),d4
0001B4B8 4EF9 0001 01D8             		jmp	SolidObject
0001B4BE                            ; ===========================================================================
0001B4BE                            
0001B4BE                            Obj3E_ChkOpened:
0001B4BE 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B4C2 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B4C4 4228 0025                  		clr.b	$25(a0)
0001B4C8 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B4CE 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B4D4                            
0001B4D4                            Obj3E_DoOpen:
0001B4D4 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B4DA 4E75                       		rts	
0001B4DC                            ; ===========================================================================
0001B4DC                            
0001B4DC                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B4DC 323C 0017                  		move.w	#$17,d1
0001B4E0 343C 0008                  		move.w	#8,d2
0001B4E4 363C 0008                  		move.w	#8,d3
0001B4E8 3828 0008                  		move.w	8(a0),d4
0001B4EC 4EB9 0001 01D8             		jsr	SolidObject
0001B4F2 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B4F8 4EB9 0000 AEC8             		jsr	AnimateSprite
0001B4FE 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B504 4A28 0025                  		tst.b	$25(a0)
0001B508 6700                       		beq.s	locret_1AC60
0001B50A 5068 000C                  		addq.w	#8,$C(a0)
0001B50E 117C 000A 0024             		move.b	#$A,$24(a0)
0001B514 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B51A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B51E 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B522 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B528 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B52E 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B530 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B536 6000                       		bra.s	Obj3E_ContinueCode
0001B538                            
0001B538                            Obj3E_MoveLeft:
0001B538 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B53E                            
0001B53E                            Obj3E_ContinueCode:
0001B53E 4228 0025                  		clr.b	$25(a0)
0001B542 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B548 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B54E                            
0001B54E                            locret_1AC60:
0001B54E 4E75                       		rts	
0001B550                            ; ===========================================================================
0001B550                            
0001B550                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B550 7007                       		moveq	#7,d0
0001B552 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B556 6600                       		bne.s	loc_1ACA0
0001B558 4EB9 0000 E28E             		jsr	SingleObjLoad
0001B55E 6600                       		bne.s	loc_1ACA0
0001B560 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B564 3368 0008 0008             		move.w	8(a0),8(a1)
0001B56A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B570 4EB9 0000 2CC6             		jsr	(RandomNumber).l
0001B576 7200                       		moveq	#0,d1
0001B578 1200                       		move.b	d0,d1
0001B57A E409                       		lsr.b	#2,d1
0001B57C 0441 0020                  		subi.w	#$20,d1
0001B580 D369 0008                  		add.w	d1,8(a1)
0001B584 E048                       		lsr.w	#8,d0
0001B586 E608                       		lsr.b	#3,d0
0001B588 D169 000C                  		add.w	d0,$C(a1)
0001B58C                            
0001B58C                            loc_1ACA0:
0001B58C 5368 001E                  		subq.w	#1,$1E(a0)
0001B590 6700                       		beq.s	Obj3E_MakeAnimal
0001B592 4E75                       		rts	
0001B594                            ; ===========================================================================
0001B594                            
0001B594                            Obj3E_MakeAnimal:
0001B594 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B59A 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B5A0 117C 0006 001A             		move.b	#6,$1A(a0)
0001B5A6 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B5AC 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B5B2 7C07                       		moveq	#7,d6
0001B5B4 3A3C 009A                  		move.w	#$9A,d5
0001B5B8 78E4                       		moveq	#-$1C,d4
0001B5BA                            
0001B5BA                            Obj3E_Loop:
0001B5BA 4EB9 0000 E28E             		jsr	SingleObjLoad
0001B5C0 6600                       		bne.s	locret_1ACF8
0001B5C2 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B5C6 3368 0008 0008             		move.w	8(a0),8(a1)
0001B5CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B5D2 D969 0008                  		add.w	d4,8(a1)
0001B5D6 5E44                       		addq.w	#7,d4
0001B5D8 3345 0036                  		move.w	d5,$36(a1)
0001B5DC 5145                       		subq.w	#8,d5
0001B5DE 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B5E2                            
0001B5E2                            locret_1ACF8:
0001B5E2 4E75                       		rts	
0001B5E4                            ; ===========================================================================
0001B5E4                            
0001B5E4                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B5E4 7007                       		moveq	#7,d0
0001B5E6 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B5EA 6600                       		bne.s	loc_1AD38
0001B5EC 4EB9 0000 E28E             		jsr	SingleObjLoad
0001B5F2 6600                       		bne.s	loc_1AD38
0001B5F4 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B5F8 3368 0008 0008             		move.w	8(a0),8(a1)
0001B5FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B604 4EB9 0000 2CC6             		jsr	(RandomNumber).l
0001B60A 0240 001F                  		andi.w	#$1F,d0
0001B60E 5D40                       		subq.w	#6,d0
0001B610 4A41                       		tst.w	d1
0001B612 6A00                       		bpl.s	loc_1AD2E
0001B614 4440                       		neg.w	d0
0001B616                            
0001B616                            loc_1AD2E:
0001B616 D169 0008                  		add.w	d0,8(a1)
0001B61A 337C 000C 0036             		move.w	#$C,$36(a1)
0001B620                            
0001B620                            loc_1AD38:
0001B620 5368 001E                  		subq.w	#1,$1E(a0)
0001B624 6600                       		bne.s	locret_1AD48
0001B626 5428 0024                  		addq.b	#2,$24(a0)
0001B62A 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B630                            
0001B630                            locret_1AD48:
0001B630 4E75                       		rts	
0001B632                            ; ===========================================================================
0001B632                            
0001B632                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B632 703E                       		moveq	#$3E,d0
0001B634 7228                       		moveq	#$28,d1
0001B636 7440                       		moveq	#$40,d2
0001B638 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B63C                            
0001B63C                            Obj3E_FindObj28:
0001B63C B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B63E 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B640 D2C2                       		adda.w	d2,a1		; next object RAM
0001B642 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B646                            
0001B646 4EB9 0000 F494             		jsr	GotThroughAct
0001B64C 4EF9 0000 DE44             		jmp	DeleteObject
0001B652                            ; ===========================================================================
0001B652                            
0001B652                            Obj3E_Obj28Found:
0001B652 4E75                       		rts	
0001B654                            ; ===========================================================================
0001B654                            Ani_obj3E:
0001B654                            	include "_anim\obj3E.asm"
0001B654                            ; ---------------------------------------------------------------------------
0001B654                            ; Animation script - prison capsule
0001B654                            ; ---------------------------------------------------------------------------
0001B654 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B656 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B658 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B65C                            		even
0001B65C                            		even
0001B65C                            
0001B65C                            ; ---------------------------------------------------------------------------
0001B65C                            ; Sprite mappings - prison capsule
0001B65C                            ; ---------------------------------------------------------------------------
0001B65C                            Map_obj3E:
0001B65C                            	include "_maps\obj3E.asm"
0001B65C                            ; ---------------------------------------------------------------------------
0001B65C                            ; Sprite mappings - prison capsule
0001B65C                            ; ---------------------------------------------------------------------------
0001B65C 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B660 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B664 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B668 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B66A 07                         byte_1AD82:	dc.b 7
0001B66B E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B670 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B675 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B67A F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B67F F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B684 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B689 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B68E 01                         byte_1ADA6:	dc.b 1
0001B68F F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B694 06                         byte_1ADAC:	dc.b 6
0001B695 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B69A 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B69F 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B6A4 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B6A9 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B6AE 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B6B3 01                         byte_1ADCB:	dc.b 1
0001B6B4 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B6B9 02                         byte_1ADD1:	dc.b 2
0001B6BA E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B6BF 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B6C4 01                         byte_1ADDC:	dc.b 1
0001B6C5 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B6CA 00                         byte_1ADE2:	dc.b 0
0001B6CC 00                         		even
0001B6CC 00                         		even
0001B6CC                            
0001B6CC                            ; ---------------------------------------------------------------------------
0001B6CC                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B6CC                            ; ---------------------------------------------------------------------------
0001B6CC                            
0001B6CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6CC                            
0001B6CC                            
0001B6CC                            TouchResponse:				; XREF: Obj01
0001B6CC 4E71                       		nop	
0001B6CE 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B6D2 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B6D6 5142                       		subq.w	#8,d2
0001B6D8 7A00                       		moveq	#0,d5
0001B6DA 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B6DE 5705                       		subq.b	#3,d5
0001B6E0 9645                       		sub.w	d5,d3
0001B6E2 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B6E8 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B6EA 0643 000C                  		addi.w	#$C,d3
0001B6EE 7A0A                       		moveq	#$A,d5
0001B6F0                            
0001B6F0                            Touch_NoDuck:
0001B6F0 383C 0010                  		move.w	#$10,d4
0001B6F4 DA45                       		add.w	d5,d5
0001B6F6 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B6FA 3C3C 005F                  		move.w	#$5F,d6
0001B6FE                            
0001B6FE                            Touch_Loop:
0001B6FE 4A29 0001                  		tst.b	1(a1)
0001B702 6A00                       		bpl.s	Touch_NextObj
0001B704 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B708 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B70A                            
0001B70A                            Touch_NextObj:
0001B70A 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B70E 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B712                            
0001B712 7000                       		moveq	#0,d0
0001B714 4E75                       		rts	
0001B716                            ; ===========================================================================
0001B716 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B718 0C14                       		dc.b   $C, $14
0001B71A 140C                       		dc.b  $14,  $C
0001B71C 0410                       		dc.b	4, $10
0001B71E 0C12                       		dc.b   $C, $12
0001B720 1010                       		dc.b  $10, $10
0001B722 0606                       		dc.b	6,   6
0001B724 180C                       		dc.b  $18,  $C
0001B726 0C10                       		dc.b   $C, $10
0001B728 100C                       		dc.b  $10,  $C
0001B72A 0808                       		dc.b	8,   8
0001B72C 1410                       		dc.b  $14, $10
0001B72E 1408                       		dc.b  $14,   8
0001B730 0E0E                       		dc.b   $E,  $E
0001B732 1818                       		dc.b  $18, $18
0001B734 2810                       		dc.b  $28, $10
0001B736 1018                       		dc.b  $10, $18
0001B738 0810                       		dc.b	8, $10
0001B73A 2070                       		dc.b  $20, $70
0001B73C 4020                       		dc.b  $40, $20
0001B73E 8020                       		dc.b  $80, $20
0001B740 2020                       		dc.b  $20, $20
0001B742 0808                       		dc.b	8,   8
0001B744 0404                       		dc.b	4,   4
0001B746 2008                       		dc.b  $20,   8
0001B748 0C0C                       		dc.b   $C,  $C
0001B74A 0804                       		dc.b	8,   4
0001B74C 1804                       		dc.b  $18,   4
0001B74E 2804                       		dc.b  $28,   4
0001B750 0408                       		dc.b	4,   8
0001B752 0418                       		dc.b	4, $18
0001B754 0428                       		dc.b	4, $28
0001B756 0420                       		dc.b	4, $20
0001B758 1818                       		dc.b  $18, $18
0001B75A 0C18                       		dc.b   $C, $18
0001B75C 4808                       		dc.b  $48,   8
0001B75E                            ; ===========================================================================
0001B75E                            
0001B75E                            Touch_Height:				; XREF: TouchResponse
0001B75E 0240 003F                  		andi.w	#$3F,d0
0001B762 D040                       		add.w	d0,d0
0001B764 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B768 7200                       		moveq	#0,d1
0001B76A 121A                       		move.b	(a2)+,d1
0001B76C 3029 0008                  		move.w	8(a1),d0
0001B770 9041                       		sub.w	d1,d0
0001B772 9042                       		sub.w	d2,d0
0001B774 6400                       		bcc.s	loc_1AE98
0001B776 D241                       		add.w	d1,d1
0001B778 D041                       		add.w	d1,d0
0001B77A 6500                       		bcs.s	Touch_Width
0001B77C 6000 FF8C                  		bra.w	Touch_NextObj
0001B780                            ; ===========================================================================
0001B780                            
0001B780                            loc_1AE98:
0001B780 B044                       		cmp.w	d4,d0
0001B782 6200 FF86                  		bhi.w	Touch_NextObj
0001B786                            
0001B786                            Touch_Width:
0001B786 7200                       		moveq	#0,d1
0001B788 121A                       		move.b	(a2)+,d1
0001B78A 3029 000C                  		move.w	$C(a1),d0
0001B78E 9041                       		sub.w	d1,d0
0001B790 9043                       		sub.w	d3,d0
0001B792 6400                       		bcc.s	loc_1AEB6
0001B794 D241                       		add.w	d1,d1
0001B796 D240                       		add.w	d0,d1
0001B798 6500                       		bcs.s	Touch_ChkValue
0001B79A 6000 FF6E                  		bra.w	Touch_NextObj
0001B79E                            ; ===========================================================================
0001B79E                            
0001B79E                            loc_1AEB6:
0001B79E B045                       		cmp.w	d5,d0
0001B7A0 6200 FF68                  		bhi.w	Touch_NextObj
0001B7A4                            
0001B7A4                            Touch_ChkValue:
0001B7A4 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B7A8 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B7AC 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B7B0 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B7B4 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B7B8 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B7BA 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B7BE                            
0001B7BE                            ; touch	response is $40-$7F
0001B7BE                            
0001B7BE 1029 0020                  		move.b	$20(a1),d0
0001B7C2 0200 003F                  		andi.b	#$3F,d0
0001B7C6 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B7CA 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B7CC 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B7D2 6400 0000                  		bcc.w	locret_1AEF2
0001B7D6 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B7DA                            
0001B7DA                            locret_1AEF2:
0001B7DA 4E75                       		rts	
0001B7DC                            ; ===========================================================================
0001B7DC                            
0001B7DC                            Touch_Monitor:
0001B7DC 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B7E0 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B7E2 3028 000C                  		move.w	$C(a0),d0
0001B7E6 0440 0010                  		subi.w	#$10,d0
0001B7EA B069 000C                  		cmp.w	$C(a1),d0
0001B7EE 6500                       		bcs.s	locret_1AF2E
0001B7F0 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B7F4 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B7FA 4A29 0025                  		tst.b	$25(a1)
0001B7FE 6600                       		bne.s	locret_1AF2E
0001B800 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B804 4E75                       		rts	
0001B806                            ; ===========================================================================
0001B806                            
0001B806                            loc_1AF1E:
0001B806 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B80C 6600                       		bne.s	locret_1AF2E
0001B80E 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B812 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B816                            
0001B816                            locret_1AF2E:
0001B816 4E75                       		rts	
0001B818                            ; ===========================================================================
0001B818                            
0001B818                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B818 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B81C 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B81E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B824 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B828                            
0001B828                            loc_1AF40:
0001B828 4A29 0021                  		tst.b	$21(a1)
0001B82C 6700                       		beq.s	Touch_KillEnemy
0001B82E 4468 0010                  		neg.w	$10(a0)
0001B832 4468 0012                  		neg.w	$12(a0)
0001B836 E0E8 0010                  		asr	$10(a0)
0001B83A E0E8 0012                  		asr	$12(a0)
0001B83E 137C 0000 0020             		move.b	#0,$20(a1)
0001B844 5329 0021                  		subq.b	#1,$21(a1)
0001B848 6600                       		bne.s	locret_1AF68
0001B84A 08E9 0007 0022             		bset	#7,$22(a1)
0001B850                            
0001B850                            locret_1AF68:
0001B850 4E75                       		rts	
0001B852                            ; ===========================================================================
0001B852                            
0001B852                            Touch_KillEnemy:
0001B852 08E9 0007 0022             		bset	#7,$22(a1)
0001B858 7000                       		moveq	#0,d0
0001B85A 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B85E 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B862 0C40 0006                  		cmpi.w	#6,d0
0001B866 6500                       		bcs.s	loc_1AF82
0001B868 7006                       		moveq	#6,d0
0001B86A                            
0001B86A                            loc_1AF82:
0001B86A 3340 003E                  		move.w	d0,$3E(a1)
0001B86E 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B872 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B878 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B87A 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B87E 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B884                            
0001B884                            loc_1AF9C:
0001B884 6100 0000                  		bsr.w	AddPoints
0001B888 7400                       		moveq	#0,d2	; GMZ
0001B88A 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B88C 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B88E                            
0001B88E                            TouchKE_Explode:
0001B88E 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B892 137C 0000 0024             		move.b	#0,$24(a1)
0001B898 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B89C                            
0001B89C                            TouchKE_NextExplosion:
0001B89C 5802                       		addq.b	#4,d2
0001B89E 4EB9 0000 E28E             		jsr	SingleObjLoad
0001B8A4 6600                       		bne.s	TouchKE_NoExplosion
0001B8A6 336A 0008 0008             		move.w	8(a2),8(a1)
0001B8AC 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B8B2 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B8B6                            
0001B8B6                            TouchKE_NoExplosion:
0001B8B6 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B8B8 4A68 0012                  		tst.w	$12(a0)
0001B8BC 6B00                       		bmi.s	loc_1AFC2
0001B8BE 3028 000C                  		move.w	$C(a0),d0
0001B8C2 B069 000C                  		cmp.w	$C(a1),d0
0001B8C6 6400                       		bcc.s	loc_1AFCA
0001B8C8 4468 0012                  		neg.w	$12(a0)
0001B8CC 4E75                       		rts	
0001B8CE                            ; ===========================================================================
0001B8CE                            
0001B8CE                            loc_1AFC2:
0001B8CE 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B8D4 4E75                       		rts	
0001B8D6                            ; ===========================================================================
0001B8D6                            
0001B8D6                            loc_1AFCA:
0001B8D6 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B8DC 4E75                       		rts	
0001B8DE                            ; ===========================================================================
0001B8DE 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B8E6                            ; ===========================================================================
0001B8E6                            
0001B8E6                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B8E6 08E9 0007 0022             		bset	#7,$22(a1)
0001B8EC                            
0001B8EC                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B8EC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B8F0 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B8F2                            
0001B8F2                            loc_1AFE6:				; XREF: Touch_Hurt
0001B8F2 70FF                       		moveq	#-1,d0
0001B8F4 4E75                       		rts	
0001B8F6                            ; ===========================================================================
0001B8F6                            
0001B8F6                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B8F6 4E71                       		nop	
0001B8F8 4A68 0030                  		tst.w	$30(a0)
0001B8FC 66F4                       		bne.s	loc_1AFE6
0001B8FE 2449                       		movea.l	a1,a2
0001B900                            
0001B900                            ; End of function TouchResponse
0001B900                            ; continue straight to HurtSonic
0001B900                            
0001B900                            ; ---------------------------------------------------------------------------
0001B900                            ; Hurting Sonic	subroutine
0001B900                            ; ---------------------------------------------------------------------------
0001B900                            
0001B900                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B900                            
0001B900                            
0001B900                            HurtSonic:
0001B900 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B904 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B906 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B90A 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B90E 4EB9 0000 E28E             		jsr	SingleObjLoad
0001B914 6600                       		bne.s	Hurt_Shield
0001B916 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B91A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B920 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B926                            
0001B926                            Hurt_Shield:
0001B926 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B92C 117C 0004 0024             		move.b	#4,$24(a0)
0001B932 6100 8716                  		bsr.w	Sonic_ResetOnFloor
0001B936 08E8 0001 0022             		bset	#1,$22(a0)
0001B93C 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B942 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B948 0828 0006 0022             		btst	#6,$22(a0)
0001B94E 6700                       		beq.s	Hurt_Reverse
0001B950 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B956 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B95C                            
0001B95C                            Hurt_Reverse:
0001B95C 3028 0008                  		move.w	8(a0),d0
0001B960 B06A 0008                  		cmp.w	8(a2),d0
0001B964 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B966 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B96A                            
0001B96A                            Hurt_ChkSpikes:
0001B96A 317C 0000 0014             		move.w	#0,$14(a0)
0001B970 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B976 317C 0078 0030             		move.w	#$78,$30(a0)
0001B97C 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B980 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B984 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B986 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B98A 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B98C 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B990                            
0001B990                            Hurt_Sound:
0001B990 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B996 70FF                       		moveq	#-1,d0
0001B998 4E75                       		rts	
0001B99A                            ; ===========================================================================
0001B99A                            
0001B99A                            Hurt_NoRings:
0001B99A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B99E 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B9A2                            ; End of function HurtSonic
0001B9A2                            
0001B9A2                            ; ---------------------------------------------------------------------------
0001B9A2                            ; Subroutine to	kill Sonic
0001B9A2                            ; ---------------------------------------------------------------------------
0001B9A2                            
0001B9A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9A2                            
0001B9A2                            
0001B9A2                            KillSonic:
0001B9A2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B9A6 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B9A8 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B9AE 117C 0006 0024             		move.b	#6,$24(a0)
0001B9B4 6100 8694                  		bsr.w	Sonic_ResetOnFloor
0001B9B8 08E8 0001 0022             		bset	#1,$22(a0)
0001B9BE 317C F900 0012             		move.w	#-$700,$12(a0)
0001B9C4 317C 0000 0010             		move.w	#0,$10(a0)
0001B9CA 317C 0000 0014             		move.w	#0,$14(a0)
0001B9D0 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B9D6 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B9DC 08E8 0007 0002             		bset	#7,2(a0)
0001B9E2 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B9E6 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B9EA 6600                       		bne.s	Kill_Sound
0001B9EC 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B9F0                            
0001B9F0                            Kill_Sound:
0001B9F0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B9F6                            
0001B9F6                            Kill_NoDeath:
0001B9F6 70FF                       		moveq	#-1,d0
0001B9F8 4E75                       		rts	
0001B9FA                            ; End of function KillSonic
0001B9FA                            
0001B9FA                            
0001B9FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9FA                            
0001B9FA                            
0001B9FA                            Touch_Special:				; XREF: Touch_ChkValue
0001B9FA 1229 0020                  		move.b	$20(a1),d1
0001B9FE 0201 003F                  		andi.b	#$3F,d1
0001BA02 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BA06 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BA08 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BA0C 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BA0E 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BA12 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BA14 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BA18 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BA1A 4E75                       		rts	
0001BA1C                            ; ===========================================================================
0001BA1C                            
0001BA1C                            Touch_CatKiller:			; XREF: Touch_Special
0001BA1C 6000 FEC8                  		bra.w	loc_1AFDA
0001BA20                            ; ===========================================================================
0001BA20                            
0001BA20                            Touch_Yadrin:				; XREF: Touch_Special
0001BA20 9A40                       		sub.w	d0,d5
0001BA22 0C45 0008                  		cmpi.w	#8,d5
0001BA26 6400                       		bcc.s	loc_1B144
0001BA28 3029 0008                  		move.w	8(a1),d0
0001BA2C 5940                       		subq.w	#4,d0
0001BA2E 0829 0000 0022             		btst	#0,$22(a1)
0001BA34 6700                       		beq.s	loc_1B130
0001BA36 0440 0010                  		subi.w	#$10,d0
0001BA3A                            
0001BA3A                            loc_1B130:
0001BA3A 9042                       		sub.w	d2,d0
0001BA3C 6400                       		bcc.s	loc_1B13C
0001BA3E 0640 0018                  		addi.w	#$18,d0
0001BA42 6500                       		bcs.s	loc_1B140
0001BA44 6000                       		bra.s	loc_1B144
0001BA46                            ; ===========================================================================
0001BA46                            
0001BA46                            loc_1B13C:
0001BA46 B044                       		cmp.w	d4,d0
0001BA48 6200                       		bhi.s	loc_1B144
0001BA4A                            
0001BA4A                            loc_1B140:
0001BA4A 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BA4E                            ; ===========================================================================
0001BA4E                            
0001BA4E                            loc_1B144:
0001BA4E 6000 FDC8                  		bra.w	Touch_Enemy
0001BA52                            ; ===========================================================================
0001BA52                            
0001BA52                            Touch_D7orE1:				; XREF: Touch_Special
0001BA52 5229 0021                  		addq.b	#1,$21(a1)
0001BA56 4E75                       		rts	
0001BA58                            ; End of function Touch_Special
0001BA58                            
0001BA58                            ; ---------------------------------------------------------------------------
0001BA58                            ; Subroutine to	show the special stage layout
0001BA58                            ; ---------------------------------------------------------------------------
0001BA58                            
0001BA58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA58                            
0001BA58                            
0001BA58                            SS_ShowLayout:				; XREF: SpecialStage
0001BA58 6100 0000                  		bsr.w	SS_AniWallsRings
0001BA5C 6100 0000                  		bsr.w	SS_AniItems
0001BA60 3F05                       		move.w	d5,-(sp)
0001BA62 43F8 8000                  		lea	($FFFF8000).w,a1
0001BA66 1038 F780                  		move.b	($FFFFF780).w,d0
0001BA6A 0200 00FC                  		andi.b	#$FC,d0
0001BA6E 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001BA74 3800                       		move.w	d0,d4
0001BA76 3A01                       		move.w	d1,d5
0001BA78 C9FC 0018                  		muls.w	#$18,d4
0001BA7C CBFC 0018                  		muls.w	#$18,d5
0001BA80 7400                       		moveq	#0,d2
0001BA82 3438 F700                  		move.w	($FFFFF700).w,d2
0001BA86 84FC 0018                  		divu.w	#$18,d2
0001BA8A 4842                       		swap	d2
0001BA8C 4442                       		neg.w	d2
0001BA8E 0642 FF4C                  		addi.w	#-$B4,d2
0001BA92 7600                       		moveq	#0,d3
0001BA94 3638 F704                  		move.w	($FFFFF704).w,d3
0001BA98 86FC 0018                  		divu.w	#$18,d3
0001BA9C 4843                       		swap	d3
0001BA9E 4443                       		neg.w	d3
0001BAA0 0643 FF4C                  		addi.w	#-$B4,d3
0001BAA4 3E3C 000F                  		move.w	#$F,d7
0001BAA8                            
0001BAA8                            loc_1B19E:
0001BAA8 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BAAC 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BAB0 4440                       		neg.w	d0
0001BAB2 C3C2                       		muls.w	d2,d1
0001BAB4 C1C3                       		muls.w	d3,d0
0001BAB6 2C00                       		move.l	d0,d6
0001BAB8 DC81                       		add.l	d1,d6
0001BABA 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BABE C1C2                       		muls.w	d2,d0
0001BAC0 C3C3                       		muls.w	d3,d1
0001BAC2 D280                       		add.l	d0,d1
0001BAC4 2406                       		move.l	d6,d2
0001BAC6 3C3C 000F                  		move.w	#$F,d6
0001BACA                            
0001BACA                            loc_1B1C0:
0001BACA 2002                       		move.l	d2,d0
0001BACC E080                       		asr.l	#8,d0
0001BACE 32C0                       		move.w	d0,(a1)+
0001BAD0 2001                       		move.l	d1,d0
0001BAD2 E080                       		asr.l	#8,d0
0001BAD4 32C0                       		move.w	d0,(a1)+
0001BAD6 D485                       		add.l	d5,d2
0001BAD8 D284                       		add.l	d4,d1
0001BADA 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BADE                            
0001BADE 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BAE2 0643 0018                  		addi.w	#$18,d3
0001BAE6 51CF FFC0                  		dbf	d7,loc_1B19E
0001BAEA                            
0001BAEA 3A1F                       		move.w	(sp)+,d5
0001BAEC 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BAF2 7000                       		moveq	#0,d0
0001BAF4 3038 F704                  		move.w	($FFFFF704).w,d0
0001BAF8 80FC 0018                  		divu.w	#$18,d0
0001BAFC C0FC 0080                  		mulu.w	#$80,d0
0001BB00 D1C0                       		adda.l	d0,a0
0001BB02 7000                       		moveq	#0,d0
0001BB04 3038 F700                  		move.w	($FFFFF700).w,d0
0001BB08 80FC 0018                  		divu.w	#$18,d0
0001BB0C D0C0                       		adda.w	d0,a0
0001BB0E 49F8 8000                  		lea	($FFFF8000).w,a4
0001BB12 3E3C 000F                  		move.w	#$F,d7
0001BB16                            
0001BB16                            loc_1B20C:
0001BB16 3C3C 000F                  		move.w	#$F,d6
0001BB1A                            
0001BB1A                            loc_1B210:
0001BB1A 7000                       		moveq	#0,d0
0001BB1C 1018                       		move.b	(a0)+,d0
0001BB1E 6700                       		beq.s	loc_1B268
0001BB20 0C00 004E                  		cmpi.b	#$4E,d0
0001BB24 6200                       		bhi.s	loc_1B268
0001BB26 3614                       		move.w	(a4),d3
0001BB28 0643 0120                  		addi.w	#$120,d3
0001BB2C 0C43 0070                  		cmpi.w	#$70,d3
0001BB30 6500                       		bcs.s	loc_1B268
0001BB32 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BB36 6400                       		bcc.s	loc_1B268
0001BB38 342C 0002                  		move.w	2(a4),d2
0001BB3C 0642 00F0                  		addi.w	#$F0,d2
0001BB40 0C42 0070                  		cmpi.w	#$70,d2
0001BB44 6500                       		bcs.s	loc_1B268
0001BB46 0C42 0170                  		cmpi.w	#$170,d2
0001BB4A 6400                       		bcc.s	loc_1B268
0001BB4C 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BB52 E748                       		lsl.w	#3,d0
0001BB54 4BF5 0000                  		lea	(a5,d0.w),a5
0001BB58 225D                       		movea.l	(a5)+,a1
0001BB5A 321D                       		move.w	(a5)+,d1
0001BB5C D241                       		add.w	d1,d1
0001BB5E D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BB62 365D                       		movea.w	(a5)+,a3
0001BB64 7200                       		moveq	#0,d1
0001BB66 1219                       		move.b	(a1)+,d1
0001BB68 5301                       		subq.b	#1,d1
0001BB6A 6B00                       		bmi.s	loc_1B268
0001BB6C 4EB9 0000 DF66             		jsr	sub_D762
0001BB72                            
0001BB72                            loc_1B268:
0001BB72 584C                       		addq.w	#4,a4
0001BB74 51CE FFA4                  		dbf	d6,loc_1B210
0001BB78                            
0001BB78 41E8 0070                  		lea	$70(a0),a0
0001BB7C 51CF FF98                  		dbf	d7,loc_1B20C
0001BB80                            
0001BB80 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BB84 0C05 0050                  		cmpi.b	#$50,d5
0001BB88 6700                       		beq.s	loc_1B288
0001BB8A 24BC 0000 0000             		move.l	#0,(a2)
0001BB90 4E75                       		rts	
0001BB92                            ; ===========================================================================
0001BB92                            
0001BB92                            loc_1B288:
0001BB92 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BB98 4E75                       		rts	
0001BB9A                            ; End of function SS_ShowLayout
0001BB9A                            
0001BB9A                            ; ---------------------------------------------------------------------------
0001BB9A                            ; Subroutine to	animate	walls and rings	in the special stage
0001BB9A                            ; ---------------------------------------------------------------------------
0001BB9A                            
0001BB9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB9A                            
0001BB9A                            
0001BB9A                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BB9A 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BBA0 7000                       		moveq	#0,d0
0001BBA2 1038 F780                  		move.b	($FFFFF780).w,d0
0001BBA6 E408                       		lsr.b	#2,d0
0001BBA8 0240 000F                  		andi.w	#$F,d0
0001BBAC 7223                       		moveq	#$23,d1
0001BBAE                            
0001BBAE                            loc_1B2A4:
0001BBAE 3280                       		move.w	d0,(a1)
0001BBB0 5049                       		addq.w	#8,a1
0001BBB2 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BBB6                            
0001BBB6 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BBBC 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BBC0 6A00                       		bpl.s	loc_1B2C8
0001BBC2 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BBC8 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BBCC 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BBD2                            
0001BBD2                            loc_1B2C8:
0001BBD2 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BBD8 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BBDC 6A00                       		bpl.s	loc_1B2E4
0001BBDE 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BBE4 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BBE8 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BBEE                            
0001BBEE                            loc_1B2E4:
0001BBEE 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BBF2 1340 0138                  		move.b	d0,$138(a1)
0001BBF6 1340 0160                  		move.b	d0,$160(a1)
0001BBFA 1340 0148                  		move.b	d0,$148(a1)
0001BBFE 1340 0150                  		move.b	d0,$150(a1)
0001BC02 1340 01D8                  		move.b	d0,$1D8(a1)
0001BC06 1340 01E0                  		move.b	d0,$1E0(a1)
0001BC0A 1340 01E8                  		move.b	d0,$1E8(a1)
0001BC0E 1340 01F0                  		move.b	d0,$1F0(a1)
0001BC12 1340 01F8                  		move.b	d0,$1F8(a1)
0001BC16 1340 0200                  		move.b	d0,$200(a1)
0001BC1A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BC1E 6A00                       		bpl.s	loc_1B326
0001BC20 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BC26 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BC2A 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BC30                            
0001BC30                            loc_1B326:
0001BC30 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BC34 1340 0168                  		move.b	d0,$168(a1)
0001BC38 1340 0170                  		move.b	d0,$170(a1)
0001BC3C 1340 0178                  		move.b	d0,$178(a1)
0001BC40 1340 0180                  		move.b	d0,$180(a1)
0001BC44 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BC48 6A00                       		bpl.s	loc_1B350
0001BC4A 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BC50 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BC54 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BC5A                            
0001BC5A                            loc_1B350:
0001BC5A 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BC60 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BC66 7000                       		moveq	#0,d0
0001BC68 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BC6C D040                       		add.w	d0,d0
0001BC6E 41F0 0000                  		lea	(a0,d0.w),a0
0001BC72 3290                       		move.w	(a0),(a1)
0001BC74 3368 0002 0008             		move.w	2(a0),8(a1)
0001BC7A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BC80 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BC86 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BC8C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BC92 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BC98 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC9E D0FC 0020                  		adda.w	#$20,a0
0001BCA2 D2FC 0048                  		adda.w	#$48,a1
0001BCA6 3290                       		move.w	(a0),(a1)
0001BCA8 3368 0002 0008             		move.w	2(a0),8(a1)
0001BCAE 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BCB4 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BCBA 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BCC0 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BCC6 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BCCC 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BCD2 D0FC 0020                  		adda.w	#$20,a0
0001BCD6 D2FC 0048                  		adda.w	#$48,a1
0001BCDA 3290                       		move.w	(a0),(a1)
0001BCDC 3368 0002 0008             		move.w	2(a0),8(a1)
0001BCE2 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BCE8 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BCEE 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BCF4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BCFA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BD00 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BD06 D0FC 0020                  		adda.w	#$20,a0
0001BD0A D2FC 0048                  		adda.w	#$48,a1
0001BD0E 3290                       		move.w	(a0),(a1)
0001BD10 3368 0002 0008             		move.w	2(a0),8(a1)
0001BD16 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BD1C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BD22 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BD28 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BD2E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BD34 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BD3A D0FC 0020                  		adda.w	#$20,a0
0001BD3E D2FC 0048                  		adda.w	#$48,a1
0001BD42 4E75                       		rts	
0001BD44                            ; End of function SS_AniWallsRings
0001BD44                            
0001BD44                            ; ===========================================================================
0001BD44 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BD54 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BD64 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BD74 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BD84 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BD94 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BDA4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BDB4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BDC4                            ; ---------------------------------------------------------------------------
0001BDC4                            ; Subroutine to	remove items when you collect them in the special stage
0001BDC4                            ; ---------------------------------------------------------------------------
0001BDC4                            
0001BDC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDC4                            
0001BDC4                            
0001BDC4                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BDC4 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BDCA 303C 001F                  		move.w	#$1F,d0
0001BDCE                            
0001BDCE                            loc_1B4C4:
0001BDCE 4A12                       		tst.b	(a2)
0001BDD0 6700                       		beq.s	locret_1B4CE
0001BDD2 504A                       		addq.w	#8,a2
0001BDD4 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BDD8                            
0001BDD8                            locret_1B4CE:
0001BDD8 4E75                       		rts	
0001BDDA                            ; End of function SS_RemoveCollectedItem
0001BDDA                            
0001BDDA                            ; ---------------------------------------------------------------------------
0001BDDA                            ; Subroutine to	animate	special	stage items when you touch them
0001BDDA                            ; ---------------------------------------------------------------------------
0001BDDA                            
0001BDDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDDA                            
0001BDDA                            
0001BDDA                            SS_AniItems:				; XREF: SS_ShowLayout
0001BDDA 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BDE0 3E3C 001F                  		move.w	#$1F,d7
0001BDE4                            
0001BDE4                            loc_1B4DA:
0001BDE4 7000                       		moveq	#0,d0
0001BDE6 1010                       		move.b	(a0),d0
0001BDE8 6700                       		beq.s	loc_1B4E8
0001BDEA E548                       		lsl.w	#2,d0
0001BDEC 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BDF0 4E91                       		jsr	(a1)
0001BDF2                            
0001BDF2                            loc_1B4E8:
0001BDF2 5048                       		addq.w	#8,a0
0001BDF4                            
0001BDF4                            loc_1B4EA:
0001BDF4 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BDF8                            
0001BDF8 4E75                       		rts	
0001BDFA                            ; End of function SS_AniItems
0001BDFA                            
0001BDFA                            ; ===========================================================================
0001BDFA 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BDFE 0000 0000                  		dc.l SS_AniBumper
0001BE02 0000 0000                  		dc.l SS_Ani1Up
0001BE06 0000 0000                  		dc.l SS_AniReverse
0001BE0A 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BE0E 0000 0000                  		dc.l SS_AniGlassBlock
0001BE12                            ; ===========================================================================
0001BE12                            
0001BE12                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BE12 5328 0002                  		subq.b	#1,2(a0)
0001BE16 6A00                       		bpl.s	locret_1B530
0001BE18 117C 0005 0002             		move.b	#5,2(a0)
0001BE1E 7000                       		moveq	#0,d0
0001BE20 1028 0003                  		move.b	3(a0),d0
0001BE24 5228 0003                  		addq.b	#1,3(a0)
0001BE28 2268 0004                  		movea.l	4(a0),a1
0001BE2C 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BE30 1280                       		move.b	d0,(a1)
0001BE32 6600                       		bne.s	locret_1B530
0001BE34 4290                       		clr.l	(a0)
0001BE36 42A8 0004                  		clr.l	4(a0)
0001BE3A                            
0001BE3A                            locret_1B530:
0001BE3A 4E75                       		rts	
0001BE3C                            ; ===========================================================================
0001BE3C 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BE42                            ; ===========================================================================
0001BE42                            
0001BE42                            SS_AniBumper:				; XREF: SS_AniIndex
0001BE42 5328 0002                  		subq.b	#1,2(a0)
0001BE46 6A00                       		bpl.s	locret_1B566
0001BE48 117C 0007 0002             		move.b	#7,2(a0)
0001BE4E 7000                       		moveq	#0,d0
0001BE50 1028 0003                  		move.b	3(a0),d0
0001BE54 5228 0003                  		addq.b	#1,3(a0)
0001BE58 2268 0004                  		movea.l	4(a0),a1
0001BE5C 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BE60 6600                       		bne.s	loc_1B564
0001BE62 4290                       		clr.l	(a0)
0001BE64 42A8 0004                  		clr.l	4(a0)
0001BE68 12BC 0025                  		move.b	#$25,(a1)
0001BE6C 4E75                       		rts	
0001BE6E                            ; ===========================================================================
0001BE6E                            
0001BE6E                            loc_1B564:
0001BE6E 1280                       		move.b	d0,(a1)
0001BE70                            
0001BE70                            locret_1B566:
0001BE70 4E75                       		rts	
0001BE72                            ; ===========================================================================
0001BE72 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BE78                            ; ===========================================================================
0001BE78                            
0001BE78                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BE78 5328 0002                  		subq.b	#1,2(a0)
0001BE7C 6A00                       		bpl.s	locret_1B596
0001BE7E 117C 0005 0002             		move.b	#5,2(a0)
0001BE84 7000                       		moveq	#0,d0
0001BE86 1028 0003                  		move.b	3(a0),d0
0001BE8A 5228 0003                  		addq.b	#1,3(a0)
0001BE8E 2268 0004                  		movea.l	4(a0),a1
0001BE92 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BE96 1280                       		move.b	d0,(a1)
0001BE98 6600                       		bne.s	locret_1B596
0001BE9A 4290                       		clr.l	(a0)
0001BE9C 42A8 0004                  		clr.l	4(a0)
0001BEA0                            
0001BEA0                            locret_1B596:
0001BEA0 4E75                       		rts	
0001BEA2                            ; ===========================================================================
0001BEA2 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BEA8                            ; ===========================================================================
0001BEA8                            
0001BEA8                            SS_AniReverse:				; XREF: SS_AniIndex
0001BEA8 5328 0002                  		subq.b	#1,2(a0)
0001BEAC 6A00                       		bpl.s	locret_1B5CC
0001BEAE 117C 0007 0002             		move.b	#7,2(a0)
0001BEB4 7000                       		moveq	#0,d0
0001BEB6 1028 0003                  		move.b	3(a0),d0
0001BEBA 5228 0003                  		addq.b	#1,3(a0)
0001BEBE 2268 0004                  		movea.l	4(a0),a1
0001BEC2 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BEC6 6600                       		bne.s	loc_1B5CA
0001BEC8 4290                       		clr.l	(a0)
0001BECA 42A8 0004                  		clr.l	4(a0)
0001BECE 12BC 002B                  		move.b	#$2B,(a1)
0001BED2 4E75                       		rts	
0001BED4                            ; ===========================================================================
0001BED4                            
0001BED4                            loc_1B5CA:
0001BED4 1280                       		move.b	d0,(a1)
0001BED6                            
0001BED6                            locret_1B5CC:
0001BED6 4E75                       		rts	
0001BED8                            ; ===========================================================================
0001BED8 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BEDE                            ; ===========================================================================
0001BEDE                            
0001BEDE                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BEDE 5328 0002                  		subq.b	#1,2(a0)
0001BEE2 6A00                       		bpl.s	locret_1B60C
0001BEE4 117C 0005 0002             		move.b	#5,2(a0)
0001BEEA 7000                       		moveq	#0,d0
0001BEEC 1028 0003                  		move.b	3(a0),d0
0001BEF0 5228 0003                  		addq.b	#1,3(a0)
0001BEF4 2268 0004                  		movea.l	4(a0),a1
0001BEF8 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BEFC 1280                       		move.b	d0,(a1)
0001BEFE 6600                       		bne.s	locret_1B60C
0001BF00 4290                       		clr.l	(a0)
0001BF02 42A8 0004                  		clr.l	4(a0)
0001BF06 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BF0C 303C 00A8                  		move.w	#$A8,d0
0001BF10 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BF16                            
0001BF16                            locret_1B60C:
0001BF16 4E75                       		rts	
0001BF18                            ; ===========================================================================
0001BF18 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BF1E                            ; ===========================================================================
0001BF1E                            
0001BF1E                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BF1E 5328 0002                  		subq.b	#1,2(a0)
0001BF22 6A00                       		bpl.s	locret_1B640
0001BF24 117C 0001 0002             		move.b	#1,2(a0)
0001BF2A 7000                       		moveq	#0,d0
0001BF2C 1028 0003                  		move.b	3(a0),d0
0001BF30 5228 0003                  		addq.b	#1,3(a0)
0001BF34 2268 0004                  		movea.l	4(a0),a1
0001BF38 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BF3C 1280                       		move.b	d0,(a1)
0001BF3E 6600                       		bne.s	locret_1B640
0001BF40 12A8 0004                  		move.b	4(a0),(a1)
0001BF44 4290                       		clr.l	(a0)
0001BF46 42A8 0004                  		clr.l	4(a0)
0001BF4A                            
0001BF4A                            locret_1B640:
0001BF4A 4E75                       		rts	
0001BF4C                            ; ===========================================================================
0001BF4C 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BF56                            ; ---------------------------------------------------------------------------
0001BF56                            ; Special stage	layout pointers
0001BF56                            ; ---------------------------------------------------------------------------
0001BF56                            SS_LayoutIndex:
0001BF56                            	include "_inc\Special stage layout pointers.asm"
0001BF56                            ; ---------------------------------------------------------------------------
0001BF56                            ; Special stage	layout pointers
0001BF56                            ; ---------------------------------------------------------------------------
0001BF56 0000 0000                  	dc.l SS_1
0001BF5A 0000 0000                  	dc.l SS_2
0001BF5E 0000 0000                  	dc.l SS_3
0001BF62 0000 0000                  	dc.l SS_4
0001BF66 0000 0000                  	dc.l SS_5
0001BF6A 0000 0000                  	dc.l SS_6
0001BF6E                            	even
0001BF6E                            	even
0001BF6E                            
0001BF6E                            ; ---------------------------------------------------------------------------
0001BF6E                            ; Special stage	start locations
0001BF6E                            ; ---------------------------------------------------------------------------
0001BF6E                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BF86                            		even
0001BF86                            
0001BF86                            ; ---------------------------------------------------------------------------
0001BF86                            ; Subroutine to	load special stage layout
0001BF86                            ; ---------------------------------------------------------------------------
0001BF86                            
0001BF86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF86                            
0001BF86                            
0001BF86                            SS_Load:				; XREF: SpecialStage
0001BF86 7000                       		moveq	#0,d0
0001BF88 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BF8C 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BF90 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BF96 6500                       		bcs.s	SS_ChkEmldNum
0001BF98 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BF9E                            
0001BF9E                            SS_ChkEmldNum:
0001BF9E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BFA4 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BFA6 7200                       		moveq	#0,d1
0001BFA8 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BFAC 5301                       		subq.b	#1,d1
0001BFAE 6500                       		bcs.s	SS_LoadData
0001BFB0 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BFB4                            
0001BFB4                            SS_ChkEmldLoop:	
0001BFB4 B033 1000                  		cmp.b	(a3,d1.w),d0
0001BFB8 6600                       		bne.s	SS_ChkEmldRepeat
0001BFBA 60CA                       		bra.s	SS_Load
0001BFBC                            ; ===========================================================================
0001BFBC                            
0001BFBC                            SS_ChkEmldRepeat:
0001BFBC 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BFC0                            
0001BFC0                            SS_LoadData:
0001BFC0 E548                       		lsl.w	#2,d0
0001BFC2 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BFC6 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BFCA 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BFCE 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BFD2 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BFD8 303C 0000                  		move.w	#0,d0
0001BFDC 4EB9 0000 1942             		jsr	(EniDec).l
0001BFE2 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BFE8 303C 0FFF                  		move.w	#$FFF,d0
0001BFEC                            
0001BFEC                            SS_ClrRAM3:
0001BFEC 4299                       		clr.l	(a1)+
0001BFEE 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BFF2                            
0001BFF2 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BFF8 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BFFE 723F                       		moveq	#$3F,d1
0001C000                            
0001C000                            loc_1B6F6:
0001C000 743F                       		moveq	#$3F,d2
0001C002                            
0001C002                            loc_1B6F8:
0001C002 12D8                       		move.b	(a0)+,(a1)+
0001C004 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C008                            
0001C008 43E9 0040                  		lea	$40(a1),a1
0001C00C 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C010                            
0001C010 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C016 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C01C 724D                       		moveq	#$4D,d1
0001C01E                            
0001C01E                            loc_1B714:
0001C01E 22D8                       		move.l	(a0)+,(a1)+
0001C020 32FC 0000                  		move.w	#0,(a1)+
0001C024 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C02A 32D8                       		move.w	(a0)+,(a1)+
0001C02C 51C9 FFF0                  		dbf	d1,loc_1B714
0001C030                            
0001C030 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C036 323C 003F                  		move.w	#$3F,d1
0001C03A                            
0001C03A                            loc_1B730:
0001C03A                            
0001C03A 4299                       		clr.l	(a1)+
0001C03C 51C9 FFFC                  		dbf	d1,loc_1B730
0001C040                            
0001C040 4E75                       		rts	
0001C042                            ; End of function SS_Load
0001C042                            
0001C042                            ; ===========================================================================
0001C042                            ; ---------------------------------------------------------------------------
0001C042                            ; Special stage	mappings and VRAM pointers
0001C042                            ; ---------------------------------------------------------------------------
0001C042                            SS_MapIndex:
0001C042                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C042                            ; ---------------------------------------------------------------------------
0001C042                            ; Special stage	mappings and VRAM pointers
0001C042                            ; ---------------------------------------------------------------------------
0001C042 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C046 0142                       	dc.w $142		; VRAM setting
0001C048 0000 0000                  	dc.l Map_SSWalls
0001C04C 0142                       	dc.w $142
0001C04E 0000 0000                  	dc.l Map_SSWalls
0001C052 0142                       	dc.w $142
0001C054 0000 0000                  	dc.l Map_SSWalls
0001C058 0142                       	dc.w $142
0001C05A 0000 0000                  	dc.l Map_SSWalls
0001C05E 0142                       	dc.w $142
0001C060 0000 0000                  	dc.l Map_SSWalls
0001C064 0142                       	dc.w $142
0001C066 0000 0000                  	dc.l Map_SSWalls
0001C06A 0142                       	dc.w $142
0001C06C 0000 0000                  	dc.l Map_SSWalls
0001C070 0142                       	dc.w $142
0001C072 0000 0000                  	dc.l Map_SSWalls
0001C076 0142                       	dc.w $142
0001C078 0000 0000                  	dc.l Map_SSWalls
0001C07C 2142                       	dc.w $2142
0001C07E 0000 0000                  	dc.l Map_SSWalls
0001C082 2142                       	dc.w $2142
0001C084 0000 0000                  	dc.l Map_SSWalls
0001C088 2142                       	dc.w $2142
0001C08A 0000 0000                  	dc.l Map_SSWalls
0001C08E 2142                       	dc.w $2142
0001C090 0000 0000                  	dc.l Map_SSWalls
0001C094 2142                       	dc.w $2142
0001C096 0000 0000                  	dc.l Map_SSWalls
0001C09A 2142                       	dc.w $2142
0001C09C 0000 0000                  	dc.l Map_SSWalls
0001C0A0 2142                       	dc.w $2142
0001C0A2 0000 0000                  	dc.l Map_SSWalls
0001C0A6 2142                       	dc.w $2142
0001C0A8 0000 0000                  	dc.l Map_SSWalls
0001C0AC 2142                       	dc.w $2142
0001C0AE 0000 0000                  	dc.l Map_SSWalls
0001C0B2 4142                       	dc.w $4142
0001C0B4 0000 0000                  	dc.l Map_SSWalls
0001C0B8 4142                       	dc.w $4142
0001C0BA 0000 0000                  	dc.l Map_SSWalls
0001C0BE 4142                       	dc.w $4142
0001C0C0 0000 0000                  	dc.l Map_SSWalls
0001C0C4 4142                       	dc.w $4142
0001C0C6 0000 0000                  	dc.l Map_SSWalls
0001C0CA 4142                       	dc.w $4142
0001C0CC 0000 0000                  	dc.l Map_SSWalls
0001C0D0 4142                       	dc.w $4142
0001C0D2 0000 0000                  	dc.l Map_SSWalls
0001C0D6 4142                       	dc.w $4142
0001C0D8 0000 0000                  	dc.l Map_SSWalls
0001C0DC 4142                       	dc.w $4142
0001C0DE 0000 0000                  	dc.l Map_SSWalls
0001C0E2 4142                       	dc.w $4142
0001C0E4 0000 0000                  	dc.l Map_SSWalls
0001C0E8 6142                       	dc.w $6142
0001C0EA 0000 0000                  	dc.l Map_SSWalls
0001C0EE 6142                       	dc.w $6142
0001C0F0 0000 0000                  	dc.l Map_SSWalls
0001C0F4 6142                       	dc.w $6142
0001C0F6 0000 0000                  	dc.l Map_SSWalls
0001C0FA 6142                       	dc.w $6142
0001C0FC 0000 0000                  	dc.l Map_SSWalls
0001C100 6142                       	dc.w $6142
0001C102 0000 0000                  	dc.l Map_SSWalls
0001C106 6142                       	dc.w $6142
0001C108 0000 0000                  	dc.l Map_SSWalls
0001C10C 6142                       	dc.w $6142
0001C10E 0000 0000                  	dc.l Map_SSWalls
0001C112 6142                       	dc.w $6142
0001C114 0000 0000                  	dc.l Map_SSWalls
0001C118 6142                       	dc.w $6142
0001C11A 0000 F2FC                  	dc.l Map_obj47
0001C11E 023B                       	dc.w $23B
0001C120 0000 0000                  	dc.l Map_SS_R
0001C124 0570                       	dc.w $570
0001C126 0000 0000                  	dc.l Map_SS_R
0001C12A 0251                       	dc.w $251
0001C12C 0000 0000                  	dc.l Map_SS_R
0001C130 0370                       	dc.w $370
0001C132 0000 0000                  	dc.l Map_SS_Up
0001C136 0263                       	dc.w $263
0001C138 0000 0000                  	dc.l Map_SS_Down
0001C13C 0263                       	dc.w $263
0001C13E 0000 0000                  	dc.l Map_SS_R
0001C142 22F0                       	dc.w $22F0
0001C144 0000 0000                  	dc.l Map_SS_Glass
0001C148 0470                       	dc.w $470
0001C14A 0000 0000                  	dc.l Map_SS_Glass
0001C14E 05F0                       	dc.w $5F0
0001C150 0000 0000                  	dc.l Map_SS_Glass
0001C154 65F0                       	dc.w $65F0
0001C156 0000 0000                  	dc.l Map_SS_Glass
0001C15A 25F0                       	dc.w $25F0
0001C15C 0000 0000                  	dc.l Map_SS_Glass
0001C160 45F0                       	dc.w $45F0
0001C162 0000 0000                  	dc.l Map_SS_R
0001C166 02F0                       	dc.w $2F0
0001C168 0100 F2FC                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C16C 023B                       	dc.w $23B
0001C16E 0200 F2FC                  	dc.l Map_obj47+$2000000
0001C172 023B                       	dc.w $23B
0001C174 0000 0000                  	dc.l Map_SS_R
0001C178 0797                       	dc.w $797
0001C17A 0000 0000                  	dc.l Map_SS_R
0001C17E 07A0                       	dc.w $7A0
0001C180 0000 0000                  	dc.l Map_SS_R
0001C184 07A9                       	dc.w $7A9
0001C186 0000 0000                  	dc.l Map_SS_R
0001C18A 0797                       	dc.w $797
0001C18C 0000 0000                  	dc.l Map_SS_R
0001C190 07A0                       	dc.w $7A0
0001C192 0000 0000                  	dc.l Map_SS_R
0001C196 07A9                       	dc.w $7A9
0001C198 0000 A666                  	dc.l Map_obj25
0001C19C 27B2                       	dc.w $27B2
0001C19E 0000 0000                  	dc.l Map_SS_Chaos3
0001C1A2 0770                       	dc.w $770
0001C1A4 0000 0000                  	dc.l Map_SS_Chaos3
0001C1A8 2770                       	dc.w $2770
0001C1AA 0000 0000                  	dc.l Map_SS_Chaos3
0001C1AE 4770                       	dc.w $4770
0001C1B0 0000 0000                  	dc.l Map_SS_Chaos3
0001C1B4 6770                       	dc.w $6770
0001C1B6 0000 0000                  	dc.l Map_SS_Chaos1
0001C1BA 0770                       	dc.w $770
0001C1BC 0000 0000                  	dc.l Map_SS_Chaos2
0001C1C0 0770                       	dc.w $770
0001C1C2 0000 0000                  	dc.l Map_SS_R
0001C1C6 04F0                       	dc.w $4F0
0001C1C8 0400 A666                  	dc.l Map_obj25+$4000000
0001C1CC 27B2                       	dc.w $27B2
0001C1CE 0500 A666                  	dc.l Map_obj25+$5000000
0001C1D2 27B2                       	dc.w $27B2
0001C1D4 0600 A666                  	dc.l Map_obj25+$6000000
0001C1D8 27B2                       	dc.w $27B2
0001C1DA 0700 A666                  	dc.l Map_obj25+$7000000
0001C1DE 27B2                       	dc.w $27B2
0001C1E0 0000 0000                  	dc.l Map_SS_Glass
0001C1E4 23F0                       	dc.w $23F0
0001C1E6 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C1EA 23F0                       	dc.w $23F0
0001C1EC 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C1F0 23F0                       	dc.w $23F0
0001C1F2 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C1F6 23F0                       	dc.w $23F0
0001C1F8 0000 0000                  	dc.l Map_SS_R+$2000000
0001C1FC 04F0                       	dc.w $4F0
0001C1FE 0000 0000                  	dc.l Map_SS_Glass
0001C202 05F0                       	dc.w $5F0
0001C204 0000 0000                  	dc.l Map_SS_Glass
0001C208 65F0                       	dc.w $65F0
0001C20A 0000 0000                  	dc.l Map_SS_Glass
0001C20E 25F0                       	dc.w $25F0
0001C210 0000 0000                  	dc.l Map_SS_Glass
0001C214 45F0                       	dc.w $45F0
0001C214 45F0                       	dc.w $45F0
0001C216                            
0001C216                            ; ---------------------------------------------------------------------------
0001C216                            ; Sprite mappings - special stage "R" block
0001C216                            ; ---------------------------------------------------------------------------
0001C216                            Map_SS_R:
0001C216                            	include "_maps\SSRblock.asm"
0001C216                            ; ---------------------------------------------------------------------------
0001C216                            ; Sprite mappings - special stage "R" block
0001C216                            ; ---------------------------------------------------------------------------
0001C216 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C21A 0000                       		dc.w byte_1B91E-Map_SS_R
0001C21C 01                         byte_1B912:	dc.b 1
0001C21D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C222 01                         byte_1B918:	dc.b 1
0001C223 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C228 00                         byte_1B91E:	dc.b 0
0001C22A 00                         		even
0001C22A 00                         		even
0001C22A                            
0001C22A                            ; ---------------------------------------------------------------------------
0001C22A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C22A                            ; ---------------------------------------------------------------------------
0001C22A                            Map_SS_Glass:
0001C22A                            	include "_maps\SSglassblock.asm"
0001C22A                            ; ---------------------------------------------------------------------------
0001C22A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C22A                            ; ---------------------------------------------------------------------------
0001C22A 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C22E 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C232 01                         byte_1B928:	dc.b 1
0001C233 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C238 01                         byte_1B92E:	dc.b 1
0001C239 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C23E 01                         byte_1B934:	dc.b 1
0001C23F F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C244 01                         byte_1B93A:	dc.b 1
0001C245 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C24A                            		even
0001C24A                            		even
0001C24A                            
0001C24A                            ; ---------------------------------------------------------------------------
0001C24A                            ; Sprite mappings - special stage "UP" block
0001C24A                            ; ---------------------------------------------------------------------------
0001C24A                            Map_SS_Up:
0001C24A                            	include "_maps\SSUPblock.asm"
0001C24A                            ; ---------------------------------------------------------------------------
0001C24A                            ; Sprite mappings - special stage "UP" block
0001C24A                            ; ---------------------------------------------------------------------------
0001C24A 0000                       		dc.w byte_1B944-Map_SS_Up
0001C24C 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C24E 01                         byte_1B944:	dc.b 1
0001C24F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C254 01                         byte_1B94A:	dc.b 1
0001C255 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C25A                            		even
0001C25A                            		even
0001C25A                            
0001C25A                            ; ---------------------------------------------------------------------------
0001C25A                            ; Sprite mappings - special stage "DOWN" block
0001C25A                            ; ---------------------------------------------------------------------------
0001C25A                            Map_SS_Down:
0001C25A                            	include "_maps\SSDOWNblock.asm"
0001C25A                            ; ---------------------------------------------------------------------------
0001C25A                            ; Sprite mappings - special stage "DOWN" block
0001C25A                            ; ---------------------------------------------------------------------------
0001C25A 0000                       		dc.w byte_1B954-Map_SS_Down
0001C25C 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C25E 01                         byte_1B954:	dc.b 1
0001C25F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C264 01                         byte_1B95A:	dc.b 1
0001C265 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C26A                            		even
0001C26A                            		even
0001C26A                            
0001C26A                            ; ---------------------------------------------------------------------------
0001C26A                            ; Sprite mappings - special stage chaos	emeralds
0001C26A                            ; ---------------------------------------------------------------------------
0001C26A 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C26C 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C26E 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C270 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C272 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C274 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C276 01                         byte_1B96C:	dc.b 1
0001C277 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C27C 01                         byte_1B972:	dc.b 1
0001C27D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C282 01                         byte_1B978:	dc.b 1
0001C283 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C288 01                         byte_1B97E:	dc.b 1
0001C289 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C28E                            		even
0001C28E                            ; ===========================================================================
0001C28E                            ; ---------------------------------------------------------------------------
0001C28E                            ; Object 09 - Sonic (special stage)
0001C28E                            ; ---------------------------------------------------------------------------
0001C28E                            
0001C28E                            Obj09:					; XREF: Obj_Index
0001C28E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C292 6700                       		beq.s	Obj09_Normal	; if not, branch
0001C294 6100 0000                  		bsr.w	SS_FixCamera
0001C298 6000 0000                  		bra.w	DebugMode
0001C29C                            ; ===========================================================================
0001C29C                            
0001C29C                            Obj09_Normal:
0001C29C 7000                       		moveq	#0,d0
0001C29E 1028 0024                  		move.b	$24(a0),d0
0001C2A2 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C2A6 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C2AA                            ; ===========================================================================
0001C2AA 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C2AC 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C2AE 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C2B0 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C2B2                            ; ===========================================================================
0001C2B2                            
0001C2B2                            Obj09_Main:				; XREF: Obj09_Index
0001C2B2 5428 0024                  		addq.b	#2,$24(a0)
0001C2B6 117C 000E 0016             		move.b	#$E,$16(a0)
0001C2BC 117C 0007 0017             		move.b	#7,$17(a0)
0001C2C2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C2CA 317C 0780 0002             		move.w	#$780,2(a0)
0001C2D0 117C 0004 0001             		move.b	#4,1(a0)
0001C2D6 117C 0000 0018             		move.b	#0,$18(a0)
0001C2DC 117C 0002 001C             		move.b	#2,$1C(a0)
0001C2E2 08E8 0002 0022             		bset	#2,$22(a0)
0001C2E8 08E8 0001 0022             		bset	#1,$22(a0)
0001C2EE                            
0001C2EE                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C2EE 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C2F2 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C2F4 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C2FA 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C2FC 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C302                            
0001C302                            Obj09_NoDebug:
0001C302 117C 0000 0030             		move.b	#0,$30(a0)
0001C308 7000                       		moveq	#0,d0
0001C30A 1028 0022                  		move.b	$22(a0),d0
0001C30E 0240 0002                  		andi.w	#2,d0
0001C312 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C316 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C31A 4EBA 81F4                  		jsr	LoadSonicDynPLC
0001C31E 4EF9 0000 DE08             		jmp	DisplaySprite
0001C324                            ; ===========================================================================
0001C324 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C326 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C328                            ; ===========================================================================
0001C328                            
0001C328                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C328 6100 0000                  		bsr.w	Obj09_Jump
0001C32C 6100 0000                  		bsr.w	Obj09_Move
0001C330 6100 0000                  		bsr.w	Obj09_Fall
0001C334 6000                       		bra.s	Obj09_Display
0001C336                            ; ===========================================================================
0001C336                            
0001C336                            Obj09_InAir:				; XREF: Obj09_Modes
0001C336 6100 0000                  		bsr.w	nullsub_2
0001C33A 6100 0000                  		bsr.w	Obj09_Move
0001C33E 6100 0000                  		bsr.w	Obj09_Fall
0001C342                            
0001C342                            Obj09_Display:				; XREF: Obj09_OnWall
0001C342 6100 0000                  		bsr.w	Obj09_ChkItems
0001C346 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C34A 4EB9 0000 DDE2             		jsr	SpeedToPos
0001C350 6100 0000                  		bsr.w	SS_FixCamera
0001C354 3038 F780                  		move.w	($FFFFF780).w,d0
0001C358 D078 F782                  		add.w	($FFFFF782).w,d0
0001C35C 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C360 4EB9 0001 4272             		jsr	Sonic_Animate
0001C366 4E75                       		rts	
0001C368                            
0001C368                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C368                            
0001C368                            
0001C368                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C368 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C36E 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C370 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C374                            
0001C374                            Obj09_ChkRight:
0001C374 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C37A 6700                       		beq.s	loc_1BA78	; if not, branch
0001C37C 6100 0000                  		bsr.w	Obj09_MoveRight
0001C380                            
0001C380                            loc_1BA78:
0001C380 1038 F602                  		move.b	($FFFFF602).w,d0
0001C384 0200 000C                  		andi.b	#$C,d0
0001C388 6600                       		bne.s	loc_1BAA8
0001C38A 3028 0014                  		move.w	$14(a0),d0
0001C38E 6700                       		beq.s	loc_1BAA8
0001C390 6B00                       		bmi.s	loc_1BA9A
0001C392 0440 000C                  		subi.w	#$C,d0
0001C396 6400                       		bcc.s	loc_1BA94
0001C398 303C 0000                  		move.w	#0,d0
0001C39C                            
0001C39C                            loc_1BA94:
0001C39C 3140 0014                  		move.w	d0,$14(a0)
0001C3A0 6000                       		bra.s	loc_1BAA8
0001C3A2                            ; ===========================================================================
0001C3A2                            
0001C3A2                            loc_1BA9A:
0001C3A2 0640 000C                  		addi.w	#$C,d0
0001C3A6 6400                       		bcc.s	loc_1BAA4
0001C3A8 303C 0000                  		move.w	#0,d0
0001C3AC                            
0001C3AC                            loc_1BAA4:
0001C3AC 3140 0014                  		move.w	d0,$14(a0)
0001C3B0                            
0001C3B0                            loc_1BAA8:
0001C3B0 1038 F780                  		move.b	($FFFFF780).w,d0
0001C3B4 0600 0020                  		addi.b	#$20,d0
0001C3B8 0200 00C0                  		andi.b	#$C0,d0
0001C3BC 4400                       		neg.b	d0
0001C3BE 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001C3C4 C3E8 0014                  		muls.w	$14(a0),d1
0001C3C8 D3A8 0008                  		add.l	d1,8(a0)
0001C3CC C1E8 0014                  		muls.w	$14(a0),d0
0001C3D0 D1A8 000C                  		add.l	d0,$C(a0)
0001C3D4 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C3D8 2428 000C                  		move.l	$C(a0),d2
0001C3DC 2628 0008                  		move.l	8(a0),d3
0001C3E0 6100 0000                  		bsr.w	sub_1BCE8
0001C3E4 6700                       		beq.s	loc_1BAF2
0001C3E6 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C3EA 93A8 0008                  		sub.l	d1,8(a0)
0001C3EE 91A8 000C                  		sub.l	d0,$C(a0)
0001C3F2 317C 0000 0014             		move.w	#0,$14(a0)
0001C3F8 4E75                       		rts	
0001C3FA                            ; ===========================================================================
0001C3FA                            
0001C3FA                            loc_1BAF2:
0001C3FA 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C3FE 4E75                       		rts	
0001C400                            ; End of function Obj09_Move
0001C400                            
0001C400                            
0001C400                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C400                            
0001C400                            
0001C400                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C400 08E8 0000 0022             		bset	#0,$22(a0)
0001C406 3028 0014                  		move.w	$14(a0),d0
0001C40A 6700                       		beq.s	loc_1BB06
0001C40C 6A00                       		bpl.s	loc_1BB1A
0001C40E                            
0001C40E                            loc_1BB06:
0001C40E 0440 000C                  		subi.w	#$C,d0
0001C412 0C40 F800                  		cmpi.w	#-$800,d0
0001C416 6E00                       		bgt.s	loc_1BB14
0001C418 303C F800                  		move.w	#-$800,d0
0001C41C                            
0001C41C                            loc_1BB14:
0001C41C 3140 0014                  		move.w	d0,$14(a0)
0001C420 4E75                       		rts	
0001C422                            ; ===========================================================================
0001C422                            
0001C422                            loc_1BB1A:
0001C422 0440 0040                  		subi.w	#$40,d0
0001C426 6400                       		bcc.s	loc_1BB22
0001C428 4E71                       		nop	
0001C42A                            
0001C42A                            loc_1BB22:
0001C42A 3140 0014                  		move.w	d0,$14(a0)
0001C42E 4E75                       		rts	
0001C430                            ; End of function Obj09_MoveLeft
0001C430                            
0001C430                            
0001C430                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C430                            
0001C430                            
0001C430                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C430 08A8 0000 0022             		bclr	#0,$22(a0)
0001C436 3028 0014                  		move.w	$14(a0),d0
0001C43A 6B00                       		bmi.s	loc_1BB48
0001C43C 0640 000C                  		addi.w	#$C,d0
0001C440 0C40 0800                  		cmpi.w	#$800,d0
0001C444 6D00                       		blt.s	loc_1BB42
0001C446 303C 0800                  		move.w	#$800,d0
0001C44A                            
0001C44A                            loc_1BB42:
0001C44A 3140 0014                  		move.w	d0,$14(a0)
0001C44E 6000                       		bra.s	locret_1BB54
0001C450                            ; ===========================================================================
0001C450                            
0001C450                            loc_1BB48:
0001C450 0640 0040                  		addi.w	#$40,d0
0001C454 6400                       		bcc.s	loc_1BB50
0001C456 4E71                       		nop	
0001C458                            
0001C458                            loc_1BB50:
0001C458 3140 0014                  		move.w	d0,$14(a0)
0001C45C                            
0001C45C                            locret_1BB54:
0001C45C 4E75                       		rts	
0001C45E                            ; End of function Obj09_MoveRight
0001C45E                            
0001C45E                            
0001C45E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C45E                            
0001C45E                            
0001C45E                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C45E 1038 F603                  		move.b	($FFFFF603).w,d0
0001C462 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C466 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C468 1038 F780                  		move.b	($FFFFF780).w,d0
0001C46C 0200 00FC                  		andi.b	#$FC,d0
0001C470 4400                       		neg.b	d0
0001C472 0400 0040                  		subi.b	#$40,d0
0001C476 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001C47C C3FC 0680                  		muls.w	#$680,d1
0001C480 E081                       		asr.l	#8,d1
0001C482 3141 0010                  		move.w	d1,$10(a0)
0001C486 C1FC 0680                  		muls.w	#$680,d0
0001C48A E080                       		asr.l	#8,d0
0001C48C 3140 0012                  		move.w	d0,$12(a0)
0001C490 08E8 0001 0022             		bset	#1,$22(a0)
0001C496 303C 00A0                  		move.w	#$A0,d0
0001C49A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C4A0                            
0001C4A0                            Obj09_NoJump:
0001C4A0 4E75                       		rts	
0001C4A2                            ; End of function Obj09_Jump
0001C4A2                            
0001C4A2                            
0001C4A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4A2                            
0001C4A2                            
0001C4A2                            nullsub_2:				; XREF: Obj09_InAir
0001C4A2 4E75                       		rts	
0001C4A4                            ; End of function nullsub_2
0001C4A4                            
0001C4A4                            ; ===========================================================================
0001C4A4                            ; ---------------------------------------------------------------------------
0001C4A4                            ; unused subroutine to limit Sonic's upward vertical speed
0001C4A4                            ; ---------------------------------------------------------------------------
0001C4A4 323C FC00                  		move.w	#-$400,d1
0001C4A8 B268 0012                  		cmp.w	$12(a0),d1
0001C4AC 6F00                       		ble.s	locret_1BBB4
0001C4AE 1038 F602                  		move.b	($FFFFF602).w,d0
0001C4B2 0200 0070                  		andi.b	#$70,d0
0001C4B6 6600                       		bne.s	locret_1BBB4
0001C4B8 3141 0012                  		move.w	d1,$12(a0)
0001C4BC                            
0001C4BC                            locret_1BBB4:
0001C4BC 4E75                       		rts	
0001C4BE                            ; ---------------------------------------------------------------------------
0001C4BE                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C4BE                            ; ---------------------------------------------------------------------------
0001C4BE                            
0001C4BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4BE                            
0001C4BE                            
0001C4BE                            SS_FixCamera:				; XREF: Obj09
0001C4BE 3428 000C                  		move.w	$C(a0),d2
0001C4C2 3628 0008                  		move.w	8(a0),d3
0001C4C6 3038 F700                  		move.w	($FFFFF700).w,d0
0001C4CA 0443 00A0                  		subi.w	#$A0,d3
0001C4CE 6500                       		bcs.s	loc_1BBCE
0001C4D0 9043                       		sub.w	d3,d0
0001C4D2 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C4D6                            
0001C4D6                            loc_1BBCE:
0001C4D6 3038 F704                  		move.w	($FFFFF704).w,d0
0001C4DA 0442 0070                  		subi.w	#$70,d2
0001C4DE 6500                       		bcs.s	locret_1BBDE
0001C4E0 9042                       		sub.w	d2,d0
0001C4E2 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C4E6                            
0001C4E6                            locret_1BBDE:
0001C4E6 4E75                       		rts	
0001C4E8                            ; End of function SS_FixCamera
0001C4E8                            
0001C4E8                            ; ===========================================================================
0001C4E8                            
0001C4E8                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C4E8 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C4EE 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C4F4 6600                       		bne.s	loc_1BBF4
0001C4F6 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C4FC                            
0001C4FC                            loc_1BBF4:
0001C4FC 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C502 6D00                       		blt.s	loc_1BC12
0001C504 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C50A 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C510 5428 0024                  		addq.b	#2,$24(a0)
0001C514 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C51A                            
0001C51A                            loc_1BC12:
0001C51A 3038 F780                  		move.w	($FFFFF780).w,d0
0001C51E D078 F782                  		add.w	($FFFFF782).w,d0
0001C522 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C526 4EB9 0001 4272             		jsr	Sonic_Animate
0001C52C 4EB9 0001 4510             		jsr	LoadSonicDynPLC
0001C532 6100 FF8A                  		bsr.w	SS_FixCamera
0001C536 4EF9 0000 DE08             		jmp	DisplaySprite
0001C53C                            ; ===========================================================================
0001C53C                            
0001C53C                            Obj09_Exit2:				; XREF: Obj09_Index
0001C53C 5368 0038                  		subq.w	#1,$38(a0)
0001C540 6600                       		bne.s	loc_1BC40
0001C542 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C548                            
0001C548                            loc_1BC40:
0001C548 4EB9 0001 4272             		jsr	Sonic_Animate
0001C54E 4EB9 0001 4510             		jsr	LoadSonicDynPLC
0001C554 6100 FF68                  		bsr.w	SS_FixCamera
0001C558 4EF9 0000 DE08             		jmp	DisplaySprite
0001C55E                            
0001C55E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C55E                            
0001C55E                            
0001C55E                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C55E 2428 000C                  		move.l	$C(a0),d2
0001C562 2628 0008                  		move.l	8(a0),d3
0001C566 1038 F780                  		move.b	($FFFFF780).w,d0
0001C56A 0200 00FC                  		andi.b	#$FC,d0
0001C56E 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001C574 3828 0010                  		move.w	$10(a0),d4
0001C578 48C4                       		ext.l	d4
0001C57A E184                       		asl.l	#8,d4
0001C57C C1FC 002A                  		muls.w	#$2A,d0
0001C580 D084                       		add.l	d4,d0
0001C582 3828 0012                  		move.w	$12(a0),d4
0001C586 48C4                       		ext.l	d4
0001C588 E184                       		asl.l	#8,d4
0001C58A C3FC 002A                  		muls.w	#$2A,d1
0001C58E D284                       		add.l	d4,d1
0001C590 D680                       		add.l	d0,d3
0001C592 6100 0000                  		bsr.w	sub_1BCE8
0001C596 6700                       		beq.s	loc_1BCB0
0001C598 9680                       		sub.l	d0,d3
0001C59A 7000                       		moveq	#0,d0
0001C59C 3140 0010                  		move.w	d0,$10(a0)
0001C5A0 08A8 0001 0022             		bclr	#1,$22(a0)
0001C5A6 D481                       		add.l	d1,d2
0001C5A8 6100 0000                  		bsr.w	sub_1BCE8
0001C5AC 6700                       		beq.s	loc_1BCC6
0001C5AE 9481                       		sub.l	d1,d2
0001C5B0 7200                       		moveq	#0,d1
0001C5B2 3141 0012                  		move.w	d1,$12(a0)
0001C5B6 4E75                       		rts	
0001C5B8                            ; ===========================================================================
0001C5B8                            
0001C5B8                            loc_1BCB0:
0001C5B8 D481                       		add.l	d1,d2
0001C5BA 6100 0000                  		bsr.w	sub_1BCE8
0001C5BE 6700                       		beq.s	loc_1BCD4
0001C5C0 9481                       		sub.l	d1,d2
0001C5C2 7200                       		moveq	#0,d1
0001C5C4 3141 0012                  		move.w	d1,$12(a0)
0001C5C8 08A8 0001 0022             		bclr	#1,$22(a0)
0001C5CE                            
0001C5CE                            loc_1BCC6:
0001C5CE E080                       		asr.l	#8,d0
0001C5D0 E081                       		asr.l	#8,d1
0001C5D2 3140 0010                  		move.w	d0,$10(a0)
0001C5D6 3141 0012                  		move.w	d1,$12(a0)
0001C5DA 4E75                       		rts	
0001C5DC                            ; ===========================================================================
0001C5DC                            
0001C5DC                            loc_1BCD4:
0001C5DC E080                       		asr.l	#8,d0
0001C5DE E081                       		asr.l	#8,d1
0001C5E0 3140 0010                  		move.w	d0,$10(a0)
0001C5E4 3141 0012                  		move.w	d1,$12(a0)
0001C5E8 08E8 0001 0022             		bset	#1,$22(a0)
0001C5EE 4E75                       		rts	
0001C5F0                            ; End of function Obj09_Fall
0001C5F0                            
0001C5F0                            
0001C5F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5F0                            
0001C5F0                            
0001C5F0                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C5F0 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C5F6 7800                       		moveq	#0,d4
0001C5F8 4842                       		swap	d2
0001C5FA 3802                       		move.w	d2,d4
0001C5FC 4842                       		swap	d2
0001C5FE 0644 0044                  		addi.w	#$44,d4
0001C602 88FC 0018                  		divu.w	#$18,d4
0001C606 C8FC 0080                  		mulu.w	#$80,d4
0001C60A D3C4                       		adda.l	d4,a1
0001C60C 7800                       		moveq	#0,d4
0001C60E 4843                       		swap	d3
0001C610 3803                       		move.w	d3,d4
0001C612 4843                       		swap	d3
0001C614 0644 0014                  		addi.w	#$14,d4
0001C618 88FC 0018                  		divu.w	#$18,d4
0001C61C D2C4                       		adda.w	d4,a1
0001C61E 7A00                       		moveq	#0,d5
0001C620 1819                       		move.b	(a1)+,d4
0001C622 6100                       		bsr.s	sub_1BD30
0001C624 1819                       		move.b	(a1)+,d4
0001C626 6100                       		bsr.s	sub_1BD30
0001C628 D2FC 007E                  		adda.w	#$7E,a1
0001C62C 1819                       		move.b	(a1)+,d4
0001C62E 6100                       		bsr.s	sub_1BD30
0001C630 1819                       		move.b	(a1)+,d4
0001C632 6100                       		bsr.s	sub_1BD30
0001C634 4A05                       		tst.b	d5
0001C636 4E75                       		rts	
0001C638                            ; End of function sub_1BCE8
0001C638                            
0001C638                            
0001C638                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C638                            
0001C638                            
0001C638                            sub_1BD30:				; XREF: sub_1BCE8
0001C638 6700                       		beq.s	locret_1BD44
0001C63A 0C04 0028                  		cmpi.b	#$28,d4
0001C63E 6700                       		beq.s	locret_1BD44
0001C640 0C04 003A                  		cmpi.b	#$3A,d4
0001C644 6500                       		bcs.s	loc_1BD46
0001C646 0C04 004B                  		cmpi.b	#$4B,d4
0001C64A 6400                       		bcc.s	loc_1BD46
0001C64C                            
0001C64C                            locret_1BD44:
0001C64C 4E75                       		rts	
0001C64E                            ; ===========================================================================
0001C64E                            
0001C64E                            loc_1BD46:
0001C64E 1144 0030                  		move.b	d4,$30(a0)
0001C652 2149 0032                  		move.l	a1,$32(a0)
0001C656 7AFF                       		moveq	#-1,d5
0001C658 4E75                       		rts	
0001C65A                            ; End of function sub_1BD30
0001C65A                            
0001C65A                            
0001C65A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C65A                            
0001C65A                            
0001C65A                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C65A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C660 7800                       		moveq	#0,d4
0001C662 3828 000C                  		move.w	$C(a0),d4
0001C666 0644 0050                  		addi.w	#$50,d4
0001C66A 88FC 0018                  		divu.w	#$18,d4
0001C66E C8FC 0080                  		mulu.w	#$80,d4
0001C672 D3C4                       		adda.l	d4,a1
0001C674 7800                       		moveq	#0,d4
0001C676 3828 0008                  		move.w	8(a0),d4
0001C67A 0644 0020                  		addi.w	#$20,d4
0001C67E 88FC 0018                  		divu.w	#$18,d4
0001C682 D2C4                       		adda.w	d4,a1
0001C684 1811                       		move.b	(a1),d4
0001C686 6600                       		bne.s	Obj09_ChkCont
0001C688 4A28 003A                  		tst.b	$3A(a0)
0001C68C 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C690 7800                       		moveq	#0,d4
0001C692 4E75                       		rts	
0001C694                            ; ===========================================================================
0001C694                            
0001C694                            Obj09_ChkCont:
0001C694 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C698 6600                       		bne.s	Obj09_Chk1Up
0001C69A 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C69E 6600                       		bne.s	Obj09_GetCont
0001C6A0 14BC 0001                  		move.b	#1,(a2)
0001C6A4 2549 0004                  		move.l	a1,4(a2)
0001C6A8                            
0001C6A8                            Obj09_GetCont:
0001C6A8 4EB9 0000 A34E             		jsr	CollectRing
0001C6AE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C6B4 6500                       		bcs.s	Obj09_NoCont
0001C6B6 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C6BC 6600                       		bne.s	Obj09_NoCont
0001C6BE 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C6C2 303C 00BF                  		move.w	#$BF,d0
0001C6C6 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra continue sound
0001C6CC                            
0001C6CC                            Obj09_NoCont:
0001C6CC 7800                       		moveq	#0,d4
0001C6CE 4E75                       		rts	
0001C6D0                            ; ===========================================================================
0001C6D0                            
0001C6D0                            Obj09_Chk1Up:
0001C6D0 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C6D4 6600                       		bne.s	Obj09_ChkEmer
0001C6D6 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C6DA 6600                       		bne.s	Obj09_Get1Up
0001C6DC 14BC 0003                  		move.b	#3,(a2)
0001C6E0 2549 0004                  		move.l	a1,4(a2)
0001C6E4                            
0001C6E4                            Obj09_Get1Up:
0001C6E4 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C6E8 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C6EC 303C 0088                  		move.w	#$88,d0
0001C6F0 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra life music
0001C6F6 7800                       		moveq	#0,d4
0001C6F8 4E75                       		rts	
0001C6FA                            ; ===========================================================================
0001C6FA                            
0001C6FA                            Obj09_ChkEmer:
0001C6FA 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C6FE 6500                       		bcs.s	Obj09_ChkGhost
0001C700 0C04 0040                  		cmpi.b	#$40,d4
0001C704 6200                       		bhi.s	Obj09_ChkGhost
0001C706 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C70A 6600                       		bne.s	Obj09_GetEmer
0001C70C 14BC 0005                  		move.b	#5,(a2)
0001C710 2549 0004                  		move.l	a1,4(a2)
0001C714                            
0001C714                            Obj09_GetEmer:
0001C714 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C71A 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C71C 0404 003B                  		subi.b	#$3B,d4
0001C720 7000                       		moveq	#0,d0
0001C722 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C726 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C72A 1584 0000                  		move.b	d4,(a2,d0.w)
0001C72E 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C732                            
0001C732                            Obj09_NoEmer:
0001C732 303C 0093                  		move.w	#$93,d0
0001C736 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play emerald music
0001C73C 7800                       		moveq	#0,d4
0001C73E 4E75                       		rts	
0001C740                            ; ===========================================================================
0001C740                            
0001C740                            Obj09_ChkGhost:
0001C740 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C744 6600                       		bne.s	Obj09_ChkGhostTag
0001C746 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C74C                            
0001C74C                            Obj09_ChkGhostTag:
0001C74C 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C750 6600                       		bne.s	Obj09_NoGhost
0001C752 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C758 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C75A 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C760                            
0001C760                            Obj09_NoGhost:
0001C760 78FF                       		moveq	#-1,d4
0001C762 4E75                       		rts	
0001C764                            ; ===========================================================================
0001C764                            
0001C764                            Obj09_MakeGhostSolid:
0001C764 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C76A 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C76C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C772 723F                       		moveq	#$3F,d1
0001C774                            
0001C774                            Obj09_GhostLoop2:
0001C774 743F                       		moveq	#$3F,d2
0001C776                            
0001C776                            Obj09_GhostLoop:
0001C776 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C77A 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C77C 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C780                            
0001C780                            Obj09_NoReplace:
0001C780 5249                       		addq.w	#1,a1
0001C782 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C786 43E9 0040                  		lea	$40(a1),a1
0001C78A 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C78E                            
0001C78E                            Obj09_GhostNotSolid:
0001C78E 4228 003A                  		clr.b	$3A(a0)
0001C792 7800                       		moveq	#0,d4
0001C794 4E75                       		rts	
0001C796                            ; End of function Obj09_ChkItems
0001C796                            
0001C796                            
0001C796                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C796                            
0001C796                            
0001C796                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C796 1028 0030                  		move.b	$30(a0),d0
0001C79A 6600                       		bne.s	Obj09_ChkBumper
0001C79C 5328 0036                  		subq.b	#1,$36(a0)
0001C7A0 6A00                       		bpl.s	loc_1BEA0
0001C7A2 117C 0000 0036             		move.b	#0,$36(a0)
0001C7A8                            
0001C7A8                            loc_1BEA0:
0001C7A8 5328 0037                  		subq.b	#1,$37(a0)
0001C7AC 6A00                       		bpl.s	locret_1BEAC
0001C7AE 117C 0000 0037             		move.b	#0,$37(a0)
0001C7B4                            
0001C7B4                            locret_1BEAC:
0001C7B4 4E75                       		rts	
0001C7B6                            ; ===========================================================================
0001C7B6                            
0001C7B6                            Obj09_ChkBumper:
0001C7B6 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C7BA 6600                       		bne.s	Obj09_GOAL
0001C7BC 2228 0032                  		move.l	$32(a0),d1
0001C7C0 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C7C6 3401                       		move.w	d1,d2
0001C7C8 0241 007F                  		andi.w	#$7F,d1
0001C7CC C2FC 0018                  		mulu.w	#$18,d1
0001C7D0 0441 0014                  		subi.w	#$14,d1
0001C7D4 EE4A                       		lsr.w	#7,d2
0001C7D6 0242 007F                  		andi.w	#$7F,d2
0001C7DA C4FC 0018                  		mulu.w	#$18,d2
0001C7DE 0442 0044                  		subi.w	#$44,d2
0001C7E2 9268 0008                  		sub.w	8(a0),d1
0001C7E6 9468 000C                  		sub.w	$C(a0),d2
0001C7EA 4EB9 0000 2FBA             		jsr	(CalcAngle).l
0001C7F0 4EB9 0000 2CEC             		jsr	(CalcSine).l
0001C7F6 C3FC F900                  		muls.w	#-$700,d1
0001C7FA E081                       		asr.l	#8,d1
0001C7FC 3141 0010                  		move.w	d1,$10(a0)
0001C800 C1FC F900                  		muls.w	#-$700,d0
0001C804 E080                       		asr.l	#8,d0
0001C806 3140 0012                  		move.w	d0,$12(a0)
0001C80A 08E8 0001 0022             		bset	#1,$22(a0)
0001C810 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C814 6600                       		bne.s	Obj09_BumpSnd
0001C816 14BC 0002                  		move.b	#2,(a2)
0001C81A 2028 0032                  		move.l	$32(a0),d0
0001C81E 5380                       		subq.l	#1,d0
0001C820 2540 0004                  		move.l	d0,4(a2)
0001C824                            
0001C824                            Obj09_BumpSnd:
0001C824 303C 00B4                  		move.w	#$B4,d0
0001C828 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C82E                            ; ===========================================================================
0001C82E                            
0001C82E                            Obj09_GOAL:
0001C82E 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C832 6600                       		bne.s	Obj09_UPblock
0001C834 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C838 303C 00A8                  		move.w	#$A8,d0		; change item
0001C83C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C842 4E75                       		rts	
0001C844                            ; ===========================================================================
0001C844                            
0001C844                            Obj09_UPblock:
0001C844 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C848 6600                       		bne.s	Obj09_DOWNblock
0001C84A 4A28 0036                  		tst.b	$36(a0)
0001C84E 6600 0000                  		bne.w	Obj09_NoGlass
0001C852 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C858 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C85E 6700                       		beq.s	Obj09_UPsnd
0001C860 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C864 2268 0032                  		movea.l	$32(a0),a1
0001C868 5389                       		subq.l	#1,a1
0001C86A 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C86E                            
0001C86E                            Obj09_UPsnd:
0001C86E 303C 00A9                  		move.w	#$A9,d0
0001C872 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C878                            ; ===========================================================================
0001C878                            
0001C878                            Obj09_DOWNblock:
0001C878 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C87C 6600                       		bne.s	Obj09_Rblock
0001C87E 4A28 0036                  		tst.b	$36(a0)
0001C882 6600 0000                  		bne.w	Obj09_NoGlass
0001C886 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C88C 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C892 6600                       		bne.s	Obj09_DOWNsnd
0001C894 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C898 2268 0032                  		movea.l	$32(a0),a1
0001C89C 5389                       		subq.l	#1,a1
0001C89E 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C8A2                            
0001C8A2                            Obj09_DOWNsnd:
0001C8A2 303C 00A9                  		move.w	#$A9,d0
0001C8A6 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C8AC                            ; ===========================================================================
0001C8AC                            
0001C8AC                            Obj09_Rblock:
0001C8AC 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C8B0 6600                       		bne.s	Obj09_ChkGlass
0001C8B2 4A28 0037                  		tst.b	$37(a0)
0001C8B6 6600 0000                  		bne.w	Obj09_NoGlass
0001C8BA 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C8C0 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C8C4 6600                       		bne.s	Obj09_RevStage
0001C8C6 14BC 0004                  		move.b	#4,(a2)
0001C8CA 2028 0032                  		move.l	$32(a0),d0
0001C8CE 5380                       		subq.l	#1,d0
0001C8D0 2540 0004                  		move.l	d0,4(a2)
0001C8D4                            
0001C8D4                            Obj09_RevStage:
0001C8D4 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C8D8 303C 00A9                  		move.w	#$A9,d0
0001C8DC 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play sound
0001C8E2                            ; ===========================================================================
0001C8E2                            
0001C8E2                            Obj09_ChkGlass:
0001C8E2 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C8E6 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C8E8 0C00 002E                  		cmpi.b	#$2E,d0
0001C8EC 6700                       		beq.s	Obj09_Glass
0001C8EE 0C00 002F                  		cmpi.b	#$2F,d0
0001C8F2 6700                       		beq.s	Obj09_Glass
0001C8F4 0C00 0030                  		cmpi.b	#$30,d0
0001C8F8 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C8FA                            
0001C8FA                            Obj09_Glass:
0001C8FA 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C8FE 6600                       		bne.s	Obj09_GlassSnd
0001C900 14BC 0006                  		move.b	#6,(a2)
0001C904 2268 0032                  		movea.l	$32(a0),a1
0001C908 5389                       		subq.l	#1,a1
0001C90A 2549 0004                  		move.l	a1,4(a2)
0001C90E 1011                       		move.b	(a1),d0
0001C910 5200                       		addq.b	#1,d0		; change glass type when touched
0001C912 0C00 0030                  		cmpi.b	#$30,d0
0001C916 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C918 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C91A                            
0001C91A                            Obj09_GlassUpdate:
0001C91A 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C91E                            
0001C91E                            Obj09_GlassSnd:
0001C91E 303C 00BA                  		move.w	#$BA,d0
0001C922 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C928                            ; ===========================================================================
0001C928                            
0001C928                            Obj09_NoGlass:
0001C928 4E75                       		rts	
0001C92A                            ; End of function Obj09_ChkItems2
0001C92A                            
0001C92A                            ; ===========================================================================
0001C92A                            ; ---------------------------------------------------------------------------
0001C92A                            ; Object 10 - blank
0001C92A                            ; ---------------------------------------------------------------------------
0001C92A                            
0001C92A                            Obj10:					; XREF: Obj_Index
0001C92A 4E75                       		rts	
0001C92C                            ; ---------------------------------------------------------------------------
0001C92C                            ; Subroutine to	animate	level graphics
0001C92C                            ; ---------------------------------------------------------------------------
0001C92C                            
0001C92C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C92C                            
0001C92C                            
0001C92C                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C92C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C930 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C932 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C938 6100 0000                  		bsr.w	AniArt_GiantRing
0001C93C 7000                       		moveq	#0,d0
0001C93E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C942 D040                       		add.w	d0,d0
0001C944 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C948 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C94C                            ; ===========================================================================
0001C94C                            
0001C94C                            AniArt_Pause:
0001C94C 4E75                       		rts	
0001C94E                            ; End of function AniArt_Load
0001C94E                            
0001C94E                            ; ===========================================================================
0001C94E 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C952 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C956 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C95A 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C95C                            ; ===========================================================================
0001C95C                            ; ---------------------------------------------------------------------------
0001C95C                            ; Animated pattern routine - Green Hill
0001C95C                            ; ---------------------------------------------------------------------------
0001C95C                            
0001C95C                            AniArt_GHZ:				; XREF: AniArt_Index
0001C95C 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C960 6A00                       		bpl.s	loc_1C08A
0001C962 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C968 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C96E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C972 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C976 0240 0001                  		andi.w	#1,d0
0001C97A 6700                       		beq.s	loc_1C078
0001C97C 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C980                            
0001C980                            loc_1C078:
0001C980 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C98A 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C98E 6000 0000                  		bra.w	LoadTiles
0001C992                            ; ===========================================================================
0001C992                            
0001C992                            loc_1C08A:
0001C992 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C996 6A00                       		bpl.s	loc_1C0C0
0001C998 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C99E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C9A4 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C9A8 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C9AC 0240 0001                  		andi.w	#1,d0
0001C9B0 6700                       		beq.s	loc_1C0AE
0001C9B2 43E9 0200                  		lea	$200(a1),a1
0001C9B6                            
0001C9B6                            loc_1C0AE:
0001C9B6 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C9C0 323C 000F                  		move.w	#$F,d1
0001C9C4 6000 0000                  		bra.w	LoadTiles
0001C9C8                            ; ===========================================================================
0001C9C8                            
0001C9C8                            loc_1C0C0:
0001C9C8 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C9CC 6A00                       		bpl.s	locret_1C10C
0001C9CE 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C9D4 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C9D8 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C9DC 0240 0003                  		andi.w	#3,d0
0001C9E0 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C9E4 0800 0000                  		btst	#0,d0
0001C9E8 6600                       		bne.s	loc_1C0E8
0001C9EA 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C9F0                            
0001C9F0                            loc_1C0E8:
0001C9F0 EF48                       		lsl.w	#7,d0
0001C9F2 3200                       		move.w	d0,d1
0001C9F4 D040                       		add.w	d0,d0
0001C9F6 D041                       		add.w	d1,d0
0001C9F8 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CA02 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CA08 43F1 0000                  		lea	(a1,d0.w),a1
0001CA0C 323C 000B                  		move.w	#$B,d1
0001CA10 6100 0000                  		bsr.w	LoadTiles
0001CA14                            
0001CA14                            locret_1C10C:
0001CA14 4E75                       		rts	
0001CA16                            ; ===========================================================================
0001CA16 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CA1A                            ; ===========================================================================
0001CA1A                            ; ---------------------------------------------------------------------------
0001CA1A                            ; Animated pattern routine - Marble
0001CA1A                            ; ---------------------------------------------------------------------------
0001CA1A                            
0001CA1A                            AniArt_MZ:				; XREF: AniArt_Index
0001CA1A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CA1E 6A00                       		bpl.s	loc_1C150
0001CA20 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CA26 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CA2C 7000                       		moveq	#0,d0
0001CA2E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CA32 5200                       		addq.b	#1,d0
0001CA34 0C00 0003                  		cmpi.b	#3,d0
0001CA38 6600                       		bne.s	loc_1C134
0001CA3A 7000                       		moveq	#0,d0
0001CA3C                            
0001CA3C                            loc_1C134:
0001CA3C 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CA40 C0FC 0100                  		mulu.w	#$100,d0
0001CA44 D2C0                       		adda.w	d0,a1
0001CA46 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CA50 323C 0007                  		move.w	#7,d1
0001CA54 6100 0000                  		bsr.w	LoadTiles
0001CA58                            
0001CA58                            loc_1C150:
0001CA58 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CA5C 6A00                       		bpl.s	loc_1C1AE
0001CA5E 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CA64 7000                       		moveq	#0,d0
0001CA66 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CA6A 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CA70 EE58                       		ror.w	#7,d0
0001CA72 D8C0                       		adda.w	d0,a4
0001CA74 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CA7E 7600                       		moveq	#0,d3
0001CA80 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CA84 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CA88 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CA8C 343C 0003                  		move.w	#3,d2
0001CA90                            
0001CA90                            loc_1C188:
0001CA90 3003                       		move.w	d3,d0
0001CA92 D040                       		add.w	d0,d0
0001CA94 0240 001E                  		andi.w	#$1E,d0
0001CA98 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CA9E 3033 0000                  		move.w	(a3,d0.w),d0
0001CAA2 47F3 0000                  		lea	(a3,d0.w),a3
0001CAA6 224C                       		movea.l	a4,a1
0001CAA8 323C 001F                  		move.w	#$1F,d1
0001CAAC 4E93                       		jsr	(a3)
0001CAAE 5843                       		addq.w	#4,d3
0001CAB0 51CA FFDE                  		dbf	d2,loc_1C188
0001CAB4 4E75                       		rts	
0001CAB6                            ; ===========================================================================
0001CAB6                            
0001CAB6                            loc_1C1AE:
0001CAB6 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CABA 6A00 0000                  		bpl.w	locret_1C1EA
0001CABE 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CAC4 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CACA 7000                       		moveq	#0,d0
0001CACC 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CAD0 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CAD4 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CADA C0FC 00C0                  		mulu.w	#$C0,d0
0001CADE D2C0                       		adda.w	d0,a1
0001CAE0 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CAEA 323C 0005                  		move.w	#5,d1
0001CAEE 6000 0000                  		bra.w	LoadTiles
0001CAF2                            ; ===========================================================================
0001CAF2                            
0001CAF2                            locret_1C1EA:
0001CAF2 4E75                       		rts	
0001CAF4                            ; ===========================================================================
0001CAF4                            ; ---------------------------------------------------------------------------
0001CAF4                            ; Animated pattern routine - Scrap Brain
0001CAF4                            ; ---------------------------------------------------------------------------
0001CAF4                            
0001CAF4                            AniArt_SBZ:				; XREF: AniArt_Index
0001CAF4 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CAF8 6700                       		beq.s	loc_1C1F8
0001CAFA 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CAFE 6000                       		bra.s	loc_1C250
0001CB00                            ; ===========================================================================
0001CB00                            
0001CB00                            loc_1C1F8:
0001CB00 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CB04 6A00                       		bpl.s	loc_1C250
0001CB06 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CB0C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CB12 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CB1C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CB20 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CB24 0240 0007                  		andi.w	#7,d0
0001CB28 6700                       		beq.s	loc_1C234
0001CB2A 5340                       		subq.w	#1,d0
0001CB2C C0FC 0180                  		mulu.w	#$180,d0
0001CB30 43F1 0000                  		lea	(a1,d0.w),a1
0001CB34 323C 000B                  		move.w	#$B,d1
0001CB38 6000 0000                  		bra.w	LoadTiles
0001CB3C                            ; ===========================================================================
0001CB3C                            
0001CB3C                            loc_1C234:
0001CB3C 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CB42                            
0001CB42                            loc_1C23A:
0001CB42 323C 0005                  		move.w	#5,d1
0001CB46 6100 0000                  		bsr.w	LoadTiles
0001CB4A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CB50 323C 0005                  		move.w	#5,d1
0001CB54 6000 0000                  		bra.w	LoadTiles
0001CB58                            ; ===========================================================================
0001CB58                            
0001CB58                            loc_1C250:
0001CB58 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CB5C 6700                       		beq.s	loc_1C25C
0001CB5E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CB62 6000                       		bra.s	locret_1C2A0
0001CB64                            ; ===========================================================================
0001CB64                            
0001CB64                            loc_1C25C:
0001CB64 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CB68 6A00                       		bpl.s	locret_1C2A0
0001CB6A 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CB70 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CB76 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CB80 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CB84 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CB88 0240 0007                  		andi.w	#7,d0
0001CB8C 6700                       		beq.s	loc_1C298
0001CB8E 5340                       		subq.w	#1,d0
0001CB90 C0FC 0180                  		mulu.w	#$180,d0
0001CB94 43F1 0000                  		lea	(a1,d0.w),a1
0001CB98 323C 000B                  		move.w	#$B,d1
0001CB9C 6000 0000                  		bra.w	LoadTiles
0001CBA0                            ; ===========================================================================
0001CBA0                            
0001CBA0                            loc_1C298:
0001CBA0 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CBA6 609A                       		bra.s	loc_1C23A
0001CBA8                            ; ===========================================================================
0001CBA8                            
0001CBA8                            locret_1C2A0:
0001CBA8 4E75                       		rts	
0001CBAA                            ; ===========================================================================
0001CBAA                            ; ---------------------------------------------------------------------------
0001CBAA                            ; Animated pattern routine - ending sequence
0001CBAA                            ; ---------------------------------------------------------------------------
0001CBAA                            
0001CBAA                            AniArt_Ending:				; XREF: AniArt_Index
0001CBAA 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CBAE 6A00                       		bpl.s	loc_1C2F4
0001CBB0 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CBB6 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CBBC 45F8 9400                  		lea	($FFFF9400).w,a2
0001CBC0 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CBC4 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CBC8 0240 0001                  		andi.w	#1,d0
0001CBCC 6700                       		beq.s	loc_1C2CE
0001CBCE 43E9 0200                  		lea	$200(a1),a1
0001CBD2 45EA 0200                  		lea	$200(a2),a2
0001CBD6                            
0001CBD6                            loc_1C2CE:
0001CBD6 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CBE0 323C 000F                  		move.w	#$F,d1
0001CBE4 6100 0000                  		bsr.w	LoadTiles
0001CBE8 224A                       		movea.l	a2,a1
0001CBEA 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CBF4 323C 000F                  		move.w	#$F,d1
0001CBF8 6000 0000                  		bra.w	LoadTiles
0001CBFC                            ; ===========================================================================
0001CBFC                            
0001CBFC                            loc_1C2F4:
0001CBFC 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CC00 6A00                       		bpl.s	loc_1C33C
0001CC02 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CC08 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CC0C 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CC10 0240 0007                  		andi.w	#7,d0
0001CC14 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CC18 EF48                       		lsl.w	#7,d0
0001CC1A 3200                       		move.w	d0,d1
0001CC1C D040                       		add.w	d0,d0
0001CC1E D041                       		add.w	d1,d0
0001CC20 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CC2A 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CC30 43F1 0000                  		lea	(a1,d0.w),a1
0001CC34 323C 000B                  		move.w	#$B,d1
0001CC38 6000 0000                  		bra.w	LoadTiles
0001CC3C                            ; ===========================================================================
0001CC3C 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CC44                            ; ===========================================================================
0001CC44                            
0001CC44                            loc_1C33C:
0001CC44 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CC48 6A00                       		bpl.s	loc_1C37A
0001CC4A 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CC50 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CC54 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CC58 0240 0003                  		andi.w	#3,d0
0001CC5C 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CC60 E148                       		lsl.w	#8,d0
0001CC62 D040                       		add.w	d0,d0
0001CC64 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CC6E 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CC72 43F1 0000                  		lea	(a1,d0.w),a1
0001CC76 323C 000F                  		move.w	#$F,d1
0001CC7A 6000 0000                  		bra.w	LoadTiles
0001CC7E                            ; ===========================================================================
0001CC7E 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CC82                            ; ===========================================================================
0001CC82                            
0001CC82                            loc_1C37A:
0001CC82 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CC86 6A00                       		bpl.s	locret_1C3B4
0001CC88 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CC8E 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CC92 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CC96 0240 0003                  		andi.w	#3,d0
0001CC9A 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CC9E E148                       		lsl.w	#8,d0
0001CCA0 D040                       		add.w	d0,d0
0001CCA2 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CCAC 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CCB0 43F1 0000                  		lea	(a1,d0.w),a1
0001CCB4 323C 000F                  		move.w	#$F,d1
0001CCB8 6000 0000                  		bra.w	LoadTiles
0001CCBC                            ; ===========================================================================
0001CCBC                            
0001CCBC                            locret_1C3B4:
0001CCBC 4E75                       		rts	
0001CCBE                            ; ===========================================================================
0001CCBE                            
0001CCBE                            AniArt_none:				; XREF: AniArt_Index
0001CCBE 4E75                       		rts	
0001CCC0                            
0001CCC0                            ; ---------------------------------------------------------------------------
0001CCC0                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CCC0                            ; ---------------------------------------------------------------------------
0001CCC0                            
0001CCC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCC0                            
0001CCC0                            
0001CCC0                            LoadTiles:
0001CCC0 2C99                       		move.l	(a1)+,(a6)
0001CCC2 2C99                       		move.l	(a1)+,(a6)
0001CCC4 2C99                       		move.l	(a1)+,(a6)
0001CCC6 2C99                       		move.l	(a1)+,(a6)
0001CCC8 2C99                       		move.l	(a1)+,(a6)
0001CCCA 2C99                       		move.l	(a1)+,(a6)
0001CCCC 2C99                       		move.l	(a1)+,(a6)
0001CCCE 2C99                       		move.l	(a1)+,(a6)
0001CCD0 51C9 FFEE                  		dbf	d1,LoadTiles
0001CCD4 4E75                       		rts	
0001CCD6                            ; End of function LoadTiles
0001CCD6                            
0001CCD6                            ; ===========================================================================
0001CCD6                            ; ---------------------------------------------------------------------------
0001CCD6                            ; Animated pattern routine - more Marble Zone
0001CCD6                            ; ---------------------------------------------------------------------------
0001CCD6 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CCDA 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CCDE 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CCE2 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CCE6 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CCEA 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CCEE 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CCF2 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CCF6                            ; ===========================================================================
0001CCF6                            
0001CCF6                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CCF6 2C91                       		move.l	(a1),(a6)
0001CCF8 43E9 0010                  		lea	$10(a1),a1
0001CCFC 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CD00 4E75                       		rts	
0001CD02                            ; ===========================================================================
0001CD02                            
0001CD02                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CD02 2029 0002                  		move.l	2(a1),d0
0001CD06 1029 0001                  		move.b	1(a1),d0
0001CD0A E098                       		ror.l	#8,d0
0001CD0C 2C80                       		move.l	d0,(a6)
0001CD0E 43E9 0010                  		lea	$10(a1),a1
0001CD12 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CD16 4E75                       		rts	
0001CD18                            ; ===========================================================================
0001CD18                            
0001CD18                            loc_1C410:				; XREF: AniArt_MZextra
0001CD18 2CA9 0002                  		move.l	2(a1),(a6)
0001CD1C 43E9 0010                  		lea	$10(a1),a1
0001CD20 51C9 FFF6                  		dbf	d1,loc_1C410
0001CD24 4E75                       		rts	
0001CD26                            ; ===========================================================================
0001CD26                            
0001CD26                            loc_1C41E:				; XREF: AniArt_MZextra
0001CD26 2029 0004                  		move.l	4(a1),d0
0001CD2A 1029 0003                  		move.b	3(a1),d0
0001CD2E E098                       		ror.l	#8,d0
0001CD30 2C80                       		move.l	d0,(a6)
0001CD32 43E9 0010                  		lea	$10(a1),a1
0001CD36 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CD3A 4E75                       		rts	
0001CD3C                            ; ===========================================================================
0001CD3C                            
0001CD3C                            loc_1C434:				; XREF: AniArt_MZextra
0001CD3C 2CA9 0004                  		move.l	4(a1),(a6)
0001CD40 43E9 0010                  		lea	$10(a1),a1
0001CD44 51C9 FFF6                  		dbf	d1,loc_1C434
0001CD48 4E75                       		rts	
0001CD4A                            ; ===========================================================================
0001CD4A                            
0001CD4A                            loc_1C442:				; XREF: AniArt_MZextra
0001CD4A 2029 0006                  		move.l	6(a1),d0
0001CD4E 1029 0005                  		move.b	5(a1),d0
0001CD52 E098                       		ror.l	#8,d0
0001CD54 2C80                       		move.l	d0,(a6)
0001CD56 43E9 0010                  		lea	$10(a1),a1
0001CD5A 51C9 FFEE                  		dbf	d1,loc_1C442
0001CD5E 4E75                       		rts	
0001CD60                            ; ===========================================================================
0001CD60                            
0001CD60                            loc_1C458:				; XREF: AniArt_MZextra
0001CD60 2CA9 0006                  		move.l	6(a1),(a6)
0001CD64 43E9 0010                  		lea	$10(a1),a1
0001CD68 51C9 FFF6                  		dbf	d1,loc_1C458
0001CD6C 4E75                       		rts	
0001CD6E                            ; ===========================================================================
0001CD6E                            
0001CD6E                            loc_1C466:				; XREF: AniArt_MZextra
0001CD6E 2029 0008                  		move.l	8(a1),d0
0001CD72 1029 0007                  		move.b	7(a1),d0
0001CD76 E098                       		ror.l	#8,d0
0001CD78 2C80                       		move.l	d0,(a6)
0001CD7A 43E9 0010                  		lea	$10(a1),a1
0001CD7E 51C9 FFEE                  		dbf	d1,loc_1C466
0001CD82 4E75                       		rts	
0001CD84                            ; ===========================================================================
0001CD84                            
0001CD84                            loc_1C47C:				; XREF: AniArt_MZextra
0001CD84 2CA9 0008                  		move.l	8(a1),(a6)
0001CD88 43E9 0010                  		lea	$10(a1),a1
0001CD8C 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CD90 4E75                       		rts	
0001CD92                            ; ===========================================================================
0001CD92                            
0001CD92                            loc_1C48A:				; XREF: AniArt_MZextra
0001CD92 2029 000A                  		move.l	$A(a1),d0
0001CD96 1029 0009                  		move.b	9(a1),d0
0001CD9A E098                       		ror.l	#8,d0
0001CD9C 2C80                       		move.l	d0,(a6)
0001CD9E 43E9 0010                  		lea	$10(a1),a1
0001CDA2 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CDA6 4E75                       		rts	
0001CDA8                            ; ===========================================================================
0001CDA8                            
0001CDA8                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CDA8 2CA9 000A                  		move.l	$A(a1),(a6)
0001CDAC 43E9 0010                  		lea	$10(a1),a1
0001CDB0 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CDB4 4E75                       		rts	
0001CDB6                            ; ===========================================================================
0001CDB6                            
0001CDB6                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CDB6 2029 000C                  		move.l	$C(a1),d0
0001CDBA 1029 000B                  		move.b	$B(a1),d0
0001CDBE E098                       		ror.l	#8,d0
0001CDC0 2C80                       		move.l	d0,(a6)
0001CDC2 43E9 0010                  		lea	$10(a1),a1
0001CDC6 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CDCA 4E75                       		rts	
0001CDCC                            ; ===========================================================================
0001CDCC                            
0001CDCC                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CDCC 2CA9 000C                  		move.l	$C(a1),(a6)
0001CDD0 43E9 0010                  		lea	$10(a1),a1
0001CDD4 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CDD8 4E75                       		rts	
0001CDDA                            ; ===========================================================================
0001CDDA                            
0001CDDA                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CDDA 2029 000C                  		move.l	$C(a1),d0
0001CDDE E198                       		rol.l	#8,d0
0001CDE0 1011                       		move.b	0(a1),d0
0001CDE2 2C80                       		move.l	d0,(a6)
0001CDE4 43E9 0010                  		lea	$10(a1),a1
0001CDE8 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CDEC 4E75                       		rts	
0001CDEE                            ; ===========================================================================
0001CDEE                            
0001CDEE                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CDEE 3CA9 000E                  		move.w	$E(a1),(a6)
0001CDF2 3C91                       		move.w	0(a1),(a6)
0001CDF4 43E9 0010                  		lea	$10(a1),a1
0001CDF8 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CDFC 4E75                       		rts	
0001CDFE                            ; ===========================================================================
0001CDFE                            
0001CDFE                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CDFE 2011                       		move.l	0(a1),d0
0001CE00 1029 000F                  		move.b	$F(a1),d0
0001CE04 E098                       		ror.l	#8,d0
0001CE06 2C80                       		move.l	d0,(a6)
0001CE08 43E9 0010                  		lea	$10(a1),a1
0001CE0C 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CE10 4E75                       		rts	
0001CE12                            
0001CE12                            ; ---------------------------------------------------------------------------
0001CE12                            ; Animated pattern routine - giant ring
0001CE12                            ; ---------------------------------------------------------------------------
0001CE12                            
0001CE12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE12                            
0001CE12                            
0001CE12                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CE12 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CE16 6600                       		bne.s	loc_1C518
0001CE18 4E75                       		rts	
0001CE1A                            ; ===========================================================================
0001CE1A                            
0001CE1A                            loc_1C518:
0001CE1A 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CE20 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CE26 7000                       		moveq	#0,d0
0001CE28 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CE2C 43F1 0000                  		lea	(a1,d0.w),a1
0001CE30 0640 8000                  		addi.w	#$8000,d0
0001CE34 E588                       		lsl.l	#2,d0
0001CE36 E448                       		lsr.w	#2,d0
0001CE38 0040 4000                  		ori.w	#$4000,d0
0001CE3C 4840                       		swap	d0
0001CE3E 2D40 0004                  		move.l	d0,4(a6)
0001CE42 323C 000D                  		move.w	#$D,d1
0001CE46 6000 FE78                  		bra.w	LoadTiles
0001CE4A                            ; End of function AniArt_GiantRing
0001CE4A                            
0001CE4A                            ; ===========================================================================
0001CE4A                            ; ---------------------------------------------------------------------------
0001CE4A                            ; Object 21 - SCORE, TIME, RINGS
0001CE4A                            ; ---------------------------------------------------------------------------
0001CE4A                            
0001CE4A                            Obj21:					; XREF: Obj_Index
0001CE4A 7000                       		moveq	#0,d0
0001CE4C 1028 0024                  		move.b	$24(a0),d0
0001CE50 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CE54 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CE58                            ; ===========================================================================
0001CE58 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CE5A 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CE5C                            ; ===========================================================================
0001CE5C                            
0001CE5C                            Obj21_Main:				; XREF: Obj21_Main
0001CE5C 5428 0024                  		addq.b	#2,$24(a0)
0001CE60 317C 0090 0008             		move.w	#$90,8(a0)
0001CE66 317C 0108 000A             		move.w	#$108,$A(a0)
0001CE6C 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CE74 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CE7A 117C 0000 0001             		move.b	#0,1(a0)
0001CE80 117C 0000 0018             		move.b	#0,$18(a0)
0001CE86                            
0001CE86                            Obj21_Flash:				; XREF: Obj21_Main
0001CE86 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CE8A 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CE8C 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CE90 4EF9 0000 DE08             		jmp	DisplaySprite
0001CE96                            ; ===========================================================================
0001CE96                            
0001CE96                            Obj21_Flash2:
0001CE96 7000                       		moveq	#0,d0
0001CE98 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CE9E 6600                       		bne.s	Obj21_Display
0001CEA0 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CEA2 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CEA8 6600                       		bne.s	Obj21_Display	; if not, branch
0001CEAA 5440                       		addq.w	#2,d0		; make time counter flash red
0001CEAC                            
0001CEAC                            Obj21_Display:
0001CEAC 1140 001A                  		move.b	d0,$1A(a0)
0001CEB0 4EF9 0000 DE08             		jmp	DisplaySprite
0001CEB6                            ; ===========================================================================
0001CEB6                            ; ---------------------------------------------------------------------------
0001CEB6                            ; Sprite mappings - SCORE, TIME, RINGS
0001CEB6                            ; ---------------------------------------------------------------------------
0001CEB6                            Map_obj21:
0001CEB6                            	include "_maps\obj21.asm"
0001CEB6                            ; ---------------------------------------------------------------------------
0001CEB6                            ; Sprite mappings - SCORE, TIME, RINGS
0001CEB6                            ; ---------------------------------------------------------------------------
0001CEB6 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CEBA 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CEBE 0A                         byte_1C5BC:	dc.b $A
0001CEBF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CEC4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CEC9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CECE 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CED3 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CED8 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CEDD A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CEE2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CEE7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CEEC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CEF1 00                         		dc.b 0
0001CEF2 0A                         byte_1C5F0:	dc.b $A
0001CEF3 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CEF8 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CEFD 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF02 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CF07 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF0C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CF11 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CF16 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CF1B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF20 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF25 00                         		dc.b 0
0001CF26 0A                         byte_1C624:	dc.b $A
0001CF27 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CF2C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CF31 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF36 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CF3B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF40 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CF45 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CF4A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CF4F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF54 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF59 00                         		dc.b 0
0001CF5A 0A                         byte_1C658:	dc.b $A
0001CF5B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CF60 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CF65 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF6A 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CF6F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF74 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CF79 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CF7E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CF83 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF88 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF8E 00                         		even
0001CF8E 00                         		even
0001CF8E                            
0001CF8E                            ; ---------------------------------------------------------------------------
0001CF8E                            ; Add points subroutine
0001CF8E                            ; ---------------------------------------------------------------------------
0001CF8E                            
0001CF8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF8E                            
0001CF8E                            
0001CF8E                            AddPoints:
0001CF8E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CF94 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CF98 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CF9C D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CF9E 223C 000F 423F             		move.l	#999999,d1
0001CFA4 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CFA6 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CFAA 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CFAC 2481                       		move.l	d1,(a2)
0001CFAE                            
0001CFAE                            loc_1C6AC:
0001CFAE 2013                       		move.l	(a3),d0
0001CFB0 B092                       		cmp.l	(a2),d0
0001CFB2 6500 0000                  		bcs.w	locret_1C6B6
0001CFB6 2480                       		move.l	d0,(a2)
0001CFB8                            
0001CFB8                            locret_1C6B6:
0001CFB8 4E75                       		rts	
0001CFBA                            ; End of function AddPoints
0001CFBA                            
0001CFBA                            ; ---------------------------------------------------------------------------
0001CFBA                            ; Subroutine to	update the HUD
0001CFBA                            ; ---------------------------------------------------------------------------
0001CFBA                            
0001CFBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFBA                            
0001CFBA                            
0001CFBA                            HudUpdate:
0001CFBA 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CFBE 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CFC2 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CFC6 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CFC8 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CFCC 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CFD2 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CFD6 6100 0000                  		bsr.w	Hud_Score
0001CFDA                            
0001CFDA                            Hud_ChkRings:
0001CFDA 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CFDE 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CFE0 6A00                       		bpl.s	loc_1C6E4
0001CFE2 6100 0000                  		bsr.w	Hud_LoadZero
0001CFE6                            
0001CFE6                            loc_1C6E4:
0001CFE6 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CFEA 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CFF0 7200                       		moveq	#0,d1
0001CFF2 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CFF6 6100 0000                  		bsr.w	Hud_Rings
0001CFFA                            
0001CFFA                            Hud_ChkTime:
0001CFFA 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CFFE 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D000 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D004 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D006 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D00A 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D010 6700                       		beq.s	TimeOver	; if yes, branch
0001D012 5221                       		addq.b	#1,-(a1)
0001D014 0C11 003C                  		cmpi.b	#60,(a1)
0001D018 6500                       		bcs.s	Hud_ChkLives
0001D01A 12BC 0000                  		move.b	#0,(a1)
0001D01E 5221                       		addq.b	#1,-(a1)
0001D020 0C11 003C                  		cmpi.b	#60,(a1)
0001D024 6500                       		bcs.s	loc_1C734
0001D026 12BC 0000                  		move.b	#0,(a1)
0001D02A 5221                       		addq.b	#1,-(a1)
0001D02C 0C11 0009                  		cmpi.b	#9,(a1)
0001D030 6500                       		bcs.s	loc_1C734
0001D032 12BC 0009                  		move.b	#9,(a1)
0001D036                            
0001D036                            loc_1C734:
0001D036 203C 5E40 0003             		move.l	#$5E400003,d0
0001D03C 7200                       		moveq	#0,d1
0001D03E 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D042 6100 0000                  		bsr.w	Hud_Mins
0001D046 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D04C 7200                       		moveq	#0,d1
0001D04E 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D052 6100 0000                  		bsr.w	Hud_Secs
0001D056                            
0001D056                            Hud_ChkLives:
0001D056 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D05A 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D05C 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D060 6100 0000                  		bsr.w	Hud_Lives
0001D064                            
0001D064                            Hud_ChkBonus:
0001D064 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D068 6700                       		beq.s	Hud_End		; if not, branch
0001D06A 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D06E 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D078 7200                       		moveq	#0,d1
0001D07A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D07E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D082 7200                       		moveq	#0,d1
0001D084 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D088 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D08C                            
0001D08C                            Hud_End:
0001D08C 4E75                       		rts	
0001D08E                            ; ===========================================================================
0001D08E                            
0001D08E                            TimeOver:				; XREF: Hud_ChkTime
0001D08E 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D092 41F8 D000                  		lea	($FFFFD000).w,a0
0001D096 2448                       		movea.l	a0,a2
0001D098 6100 E908                  		bsr.w	KillSonic
0001D09C 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D0A2 4E75                       		rts	
0001D0A4                            ; ===========================================================================
0001D0A4                            
0001D0A4                            HudDebug:				; XREF: HudUpdate
0001D0A4 6100 0000                  		bsr.w	HudDb_XY
0001D0A8 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D0AC 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D0AE 6A00                       		bpl.s	HudDb_Rings
0001D0B0 6100 0000                  		bsr.w	Hud_LoadZero
0001D0B4                            
0001D0B4                            HudDb_Rings:
0001D0B4 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D0B8 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D0BE 7200                       		moveq	#0,d1
0001D0C0 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D0C4 6100 0000                  		bsr.w	Hud_Rings
0001D0C8                            
0001D0C8                            HudDb_ObjCount:
0001D0C8 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D0CE 7200                       		moveq	#0,d1
0001D0D0 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D0D4 6100 0000                  		bsr.w	Hud_Secs
0001D0D8 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D0DC 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D0DE 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D0E2 6100 0000                  		bsr.w	Hud_Lives
0001D0E6                            
0001D0E6                            HudDb_ChkBonus:
0001D0E6 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D0EA 6700                       		beq.s	HudDb_End	; if not, branch
0001D0EC 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D0F0 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D0FA 7200                       		moveq	#0,d1
0001D0FC 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D100 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D104 7200                       		moveq	#0,d1
0001D106 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D10A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D10E                            
0001D10E                            HudDb_End:
0001D10E 4E75                       		rts	
0001D110                            ; End of function HudUpdate
0001D110                            
0001D110                            ; ---------------------------------------------------------------------------
0001D110                            ; Subroutine to	load "0" on the	HUD
0001D110                            ; ---------------------------------------------------------------------------
0001D110                            
0001D110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D110                            
0001D110                            
0001D110                            Hud_LoadZero:				; XREF: HudUpdate
0001D110 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D11A 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D11E 343C 0002                  		move.w	#2,d2
0001D122 6000                       		bra.s	loc_1C83E
0001D124                            ; End of function Hud_LoadZero
0001D124                            
0001D124                            ; ---------------------------------------------------------------------------
0001D124                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D124                            ; ---------------------------------------------------------------------------
0001D124                            
0001D124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D124                            
0001D124                            
0001D124                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D124 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D12A 6100 0000                  		bsr.w	Hud_Lives
0001D12E 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D138 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D13C 343C 000E                  		move.w	#$E,d2
0001D140                            
0001D140                            loc_1C83E:				; XREF: Hud_LoadZero
0001D140 43FA 0000                  		lea	Art_Hud(pc),a1
0001D144                            
0001D144                            loc_1C842:
0001D144 323C 000F                  		move.w	#$F,d1
0001D148 101A                       		move.b	(a2)+,d0
0001D14A 6B00                       		bmi.s	loc_1C85E
0001D14C 4880                       		ext.w	d0
0001D14E EB48                       		lsl.w	#5,d0
0001D150 47F1 0000                  		lea	(a1,d0.w),a3
0001D154                            
0001D154                            loc_1C852:
0001D154 2C9B                       		move.l	(a3)+,(a6)
0001D156 51C9 FFFC                  		dbf	d1,loc_1C852
0001D15A                            
0001D15A                            loc_1C858:
0001D15A 51CA FFE8                  		dbf	d2,loc_1C842
0001D15E                            
0001D15E 4E75                       		rts	
0001D160                            ; ===========================================================================
0001D160                            
0001D160                            loc_1C85E:
0001D160 2CBC 0000 0000             		move.l	#0,(a6)
0001D166 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D16A                            
0001D16A 60EE                       		bra.s	loc_1C858
0001D16C                            ; End of function Hud_Base
0001D16C                            
0001D16C                            ; ===========================================================================
0001D16C 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D178 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D17C                            ; ---------------------------------------------------------------------------
0001D17C                            ; Subroutine to	load debug mode	numbers	patterns
0001D17C                            ; ---------------------------------------------------------------------------
0001D17C                            
0001D17C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D17C                            
0001D17C                            
0001D17C                            HudDb_XY:				; XREF: HudDebug
0001D17C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D186 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D18A 4841                       		swap	d1
0001D18C 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D190 6100                       		bsr.s	HudDb_XY2
0001D192 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D196 4841                       		swap	d1
0001D198 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D19C                            ; End of function HudDb_XY
0001D19C                            
0001D19C                            
0001D19C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D19C                            
0001D19C                            
0001D19C                            HudDb_XY2:
0001D19C 7C07                       		moveq	#7,d6
0001D19E 43F9 0000 05F4             		lea	(Art_Text).l,a1
0001D1A4                            
0001D1A4                            HudDb_XYLoop:
0001D1A4 E959                       		rol.w	#4,d1
0001D1A6 3401                       		move.w	d1,d2
0001D1A8 0242 000F                  		andi.w	#$F,d2
0001D1AC 0C42 000A                  		cmpi.w	#$A,d2
0001D1B0 6500                       		bcs.s	loc_1C8B2
0001D1B2 5E42                       		addq.w	#7,d2
0001D1B4                            
0001D1B4                            loc_1C8B2:
0001D1B4 EB4A                       		lsl.w	#5,d2
0001D1B6 47F1 2000                  		lea	(a1,d2.w),a3
0001D1BA 2C9B                       		move.l	(a3)+,(a6)
0001D1BC 2C9B                       		move.l	(a3)+,(a6)
0001D1BE 2C9B                       		move.l	(a3)+,(a6)
0001D1C0 2C9B                       		move.l	(a3)+,(a6)
0001D1C2 2C9B                       		move.l	(a3)+,(a6)
0001D1C4 2C9B                       		move.l	(a3)+,(a6)
0001D1C6 2C9B                       		move.l	(a3)+,(a6)
0001D1C8 2C9B                       		move.l	(a3)+,(a6)
0001D1CA 4841                       		swap	d1
0001D1CC 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D1D0                            
0001D1D0 4E75                       		rts	
0001D1D2                            ; End of function HudDb_XY2
0001D1D2                            
0001D1D2                            ; ---------------------------------------------------------------------------
0001D1D2                            ; Subroutine to	load rings numbers patterns
0001D1D2                            ; ---------------------------------------------------------------------------
0001D1D2                            
0001D1D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1D2                            
0001D1D2                            
0001D1D2                            Hud_Rings:				; XREF: HudUpdate
0001D1D2 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D1D8 7C02                       		moveq	#2,d6
0001D1DA 6000                       		bra.s	Hud_LoadArt
0001D1DC                            ; End of function Hud_Rings
0001D1DC                            
0001D1DC                            ; ---------------------------------------------------------------------------
0001D1DC                            ; Subroutine to	load score numbers patterns
0001D1DC                            ; ---------------------------------------------------------------------------
0001D1DC                            
0001D1DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1DC                            
0001D1DC                            
0001D1DC                            Hud_Score:				; XREF: HudUpdate
0001D1DC 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D1E2 7C05                       		moveq	#5,d6
0001D1E4                            
0001D1E4                            Hud_LoadArt:
0001D1E4 7800                       		moveq	#0,d4
0001D1E6 43FA 0000                  		lea	Art_Hud(pc),a1
0001D1EA                            
0001D1EA                            Hud_ScoreLoop:
0001D1EA 7400                       		moveq	#0,d2
0001D1EC 261A                       		move.l	(a2)+,d3
0001D1EE                            
0001D1EE                            loc_1C8EC:
0001D1EE 9283                       		sub.l	d3,d1
0001D1F0 6500                       		bcs.s	loc_1C8F4
0001D1F2 5242                       		addq.w	#1,d2
0001D1F4 60F8                       		bra.s	loc_1C8EC
0001D1F6                            ; ===========================================================================
0001D1F6                            
0001D1F6                            loc_1C8F4:
0001D1F6 D283                       		add.l	d3,d1
0001D1F8 4A42                       		tst.w	d2
0001D1FA 6700                       		beq.s	loc_1C8FE
0001D1FC 383C 0001                  		move.w	#1,d4
0001D200                            
0001D200                            loc_1C8FE:
0001D200 4A44                       		tst.w	d4
0001D202 6700                       		beq.s	loc_1C92C
0001D204 ED4A                       		lsl.w	#6,d2
0001D206 2D40 0004                  		move.l	d0,4(a6)
0001D20A 47F1 2000                  		lea	(a1,d2.w),a3
0001D20E 2C9B                       		move.l	(a3)+,(a6)
0001D210 2C9B                       		move.l	(a3)+,(a6)
0001D212 2C9B                       		move.l	(a3)+,(a6)
0001D214 2C9B                       		move.l	(a3)+,(a6)
0001D216 2C9B                       		move.l	(a3)+,(a6)
0001D218 2C9B                       		move.l	(a3)+,(a6)
0001D21A 2C9B                       		move.l	(a3)+,(a6)
0001D21C 2C9B                       		move.l	(a3)+,(a6)
0001D21E 2C9B                       		move.l	(a3)+,(a6)
0001D220 2C9B                       		move.l	(a3)+,(a6)
0001D222 2C9B                       		move.l	(a3)+,(a6)
0001D224 2C9B                       		move.l	(a3)+,(a6)
0001D226 2C9B                       		move.l	(a3)+,(a6)
0001D228 2C9B                       		move.l	(a3)+,(a6)
0001D22A 2C9B                       		move.l	(a3)+,(a6)
0001D22C 2C9B                       		move.l	(a3)+,(a6)
0001D22E                            
0001D22E                            loc_1C92C:
0001D22E 0680 0040 0000             		addi.l	#$400000,d0
0001D234 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D238                            
0001D238 4E75                       		rts	
0001D23A                            ; End of function Hud_Score
0001D23A                            
0001D23A                            ; ---------------------------------------------------------------------------
0001D23A                            ; Subroutine to	load countdown numbers on the continue screen
0001D23A                            ; ---------------------------------------------------------------------------
0001D23A                            
0001D23A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D23A                            
0001D23A                            
0001D23A                            ContScrCounter:				; XREF: ContinueScreen
0001D23A 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D244 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D24A 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D250 7C01                       		moveq	#1,d6
0001D252 7800                       		moveq	#0,d4
0001D254 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D258                            
0001D258                            ContScr_Loop:
0001D258 7400                       		moveq	#0,d2
0001D25A 261A                       		move.l	(a2)+,d3
0001D25C                            
0001D25C                            loc_1C95A:
0001D25C 9283                       		sub.l	d3,d1
0001D25E 6500                       		bcs.s	loc_1C962
0001D260 5242                       		addq.w	#1,d2
0001D262 60F8                       		bra.s	loc_1C95A
0001D264                            ; ===========================================================================
0001D264                            
0001D264                            loc_1C962:
0001D264 D283                       		add.l	d3,d1
0001D266 ED4A                       		lsl.w	#6,d2
0001D268 47F1 2000                  		lea	(a1,d2.w),a3
0001D26C 2C9B                       		move.l	(a3)+,(a6)
0001D26E 2C9B                       		move.l	(a3)+,(a6)
0001D270 2C9B                       		move.l	(a3)+,(a6)
0001D272 2C9B                       		move.l	(a3)+,(a6)
0001D274 2C9B                       		move.l	(a3)+,(a6)
0001D276 2C9B                       		move.l	(a3)+,(a6)
0001D278 2C9B                       		move.l	(a3)+,(a6)
0001D27A 2C9B                       		move.l	(a3)+,(a6)
0001D27C 2C9B                       		move.l	(a3)+,(a6)
0001D27E 2C9B                       		move.l	(a3)+,(a6)
0001D280 2C9B                       		move.l	(a3)+,(a6)
0001D282 2C9B                       		move.l	(a3)+,(a6)
0001D284 2C9B                       		move.l	(a3)+,(a6)
0001D286 2C9B                       		move.l	(a3)+,(a6)
0001D288 2C9B                       		move.l	(a3)+,(a6)
0001D28A 2C9B                       		move.l	(a3)+,(a6)
0001D28C 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D290                            
0001D290 4E75                       		rts	
0001D292                            ; End of function ContScrCounter
0001D292                            
0001D292                            ; ===========================================================================
0001D292                            ; ---------------------------------------------------------------------------
0001D292                            ; HUD counter sizes
0001D292                            ; ---------------------------------------------------------------------------
0001D292 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D296 0000 2710                  Hud_10000:	dc.l 10000
0001D29A 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D29E 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D2A2 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D2A6 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D2AA                            
0001D2AA                            ; ---------------------------------------------------------------------------
0001D2AA                            ; Subroutine to	load time numbers patterns
0001D2AA                            ; ---------------------------------------------------------------------------
0001D2AA                            
0001D2AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2AA                            
0001D2AA                            
0001D2AA                            Hud_Mins:				; XREF: Hud_ChkTime
0001D2AA 45F9 0001 D2A6             		lea	(Hud_1).l,a2
0001D2B0 7C00                       		moveq	#0,d6
0001D2B2 6000                       		bra.s	loc_1C9BA
0001D2B4                            ; End of function Hud_Mins
0001D2B4                            
0001D2B4                            
0001D2B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2B4                            
0001D2B4                            
0001D2B4                            Hud_Secs:				; XREF: Hud_ChkTime
0001D2B4 45F9 0001 D2A2             		lea	(Hud_10).l,a2
0001D2BA 7C01                       		moveq	#1,d6
0001D2BC                            
0001D2BC                            loc_1C9BA:
0001D2BC 7800                       		moveq	#0,d4
0001D2BE 43FA 0000                  		lea	Art_Hud(pc),a1
0001D2C2                            
0001D2C2                            Hud_TimeLoop:
0001D2C2 7400                       		moveq	#0,d2
0001D2C4 261A                       		move.l	(a2)+,d3
0001D2C6                            
0001D2C6                            loc_1C9C4:
0001D2C6 9283                       		sub.l	d3,d1
0001D2C8 6500                       		bcs.s	loc_1C9CC
0001D2CA 5242                       		addq.w	#1,d2
0001D2CC 60F8                       		bra.s	loc_1C9C4
0001D2CE                            ; ===========================================================================
0001D2CE                            
0001D2CE                            loc_1C9CC:
0001D2CE D283                       		add.l	d3,d1
0001D2D0 4A42                       		tst.w	d2
0001D2D2 6700                       		beq.s	loc_1C9D6
0001D2D4 383C 0001                  		move.w	#1,d4
0001D2D8                            
0001D2D8                            loc_1C9D6:
0001D2D8 ED4A                       		lsl.w	#6,d2
0001D2DA 2D40 0004                  		move.l	d0,4(a6)
0001D2DE 47F1 2000                  		lea	(a1,d2.w),a3
0001D2E2 2C9B                       		move.l	(a3)+,(a6)
0001D2E4 2C9B                       		move.l	(a3)+,(a6)
0001D2E6 2C9B                       		move.l	(a3)+,(a6)
0001D2E8 2C9B                       		move.l	(a3)+,(a6)
0001D2EA 2C9B                       		move.l	(a3)+,(a6)
0001D2EC 2C9B                       		move.l	(a3)+,(a6)
0001D2EE 2C9B                       		move.l	(a3)+,(a6)
0001D2F0 2C9B                       		move.l	(a3)+,(a6)
0001D2F2 2C9B                       		move.l	(a3)+,(a6)
0001D2F4 2C9B                       		move.l	(a3)+,(a6)
0001D2F6 2C9B                       		move.l	(a3)+,(a6)
0001D2F8 2C9B                       		move.l	(a3)+,(a6)
0001D2FA 2C9B                       		move.l	(a3)+,(a6)
0001D2FC 2C9B                       		move.l	(a3)+,(a6)
0001D2FE 2C9B                       		move.l	(a3)+,(a6)
0001D300 2C9B                       		move.l	(a3)+,(a6)
0001D302 0680 0040 0000             		addi.l	#$400000,d0
0001D308 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D30C                            
0001D30C 4E75                       		rts	
0001D30E                            ; End of function Hud_Secs
0001D30E                            
0001D30E                            ; ---------------------------------------------------------------------------
0001D30E                            ; Subroutine to	load time/ring bonus numbers patterns
0001D30E                            ; ---------------------------------------------------------------------------
0001D30E                            
0001D30E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D30E                            
0001D30E                            
0001D30E                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D30E 45F9 0001 D29A             		lea	(Hud_1000).l,a2
0001D314 7C03                       		moveq	#3,d6
0001D316 7800                       		moveq	#0,d4
0001D318 43FA 0000                  		lea	Art_Hud(pc),a1
0001D31C                            
0001D31C                            Hud_BonusLoop:
0001D31C 7400                       		moveq	#0,d2
0001D31E 261A                       		move.l	(a2)+,d3
0001D320                            
0001D320                            loc_1CA1E:
0001D320 9283                       		sub.l	d3,d1
0001D322 6500                       		bcs.s	loc_1CA26
0001D324 5242                       		addq.w	#1,d2
0001D326 60F8                       		bra.s	loc_1CA1E
0001D328                            ; ===========================================================================
0001D328                            
0001D328                            loc_1CA26:
0001D328 D283                       		add.l	d3,d1
0001D32A 4A42                       		tst.w	d2
0001D32C 6700                       		beq.s	loc_1CA30
0001D32E 383C 0001                  		move.w	#1,d4
0001D332                            
0001D332                            loc_1CA30:
0001D332 4A44                       		tst.w	d4
0001D334 6700                       		beq.s	Hud_ClrBonus
0001D336 ED4A                       		lsl.w	#6,d2
0001D338 47F1 2000                  		lea	(a1,d2.w),a3
0001D33C 2C9B                       		move.l	(a3)+,(a6)
0001D33E 2C9B                       		move.l	(a3)+,(a6)
0001D340 2C9B                       		move.l	(a3)+,(a6)
0001D342 2C9B                       		move.l	(a3)+,(a6)
0001D344 2C9B                       		move.l	(a3)+,(a6)
0001D346 2C9B                       		move.l	(a3)+,(a6)
0001D348 2C9B                       		move.l	(a3)+,(a6)
0001D34A 2C9B                       		move.l	(a3)+,(a6)
0001D34C 2C9B                       		move.l	(a3)+,(a6)
0001D34E 2C9B                       		move.l	(a3)+,(a6)
0001D350 2C9B                       		move.l	(a3)+,(a6)
0001D352 2C9B                       		move.l	(a3)+,(a6)
0001D354 2C9B                       		move.l	(a3)+,(a6)
0001D356 2C9B                       		move.l	(a3)+,(a6)
0001D358 2C9B                       		move.l	(a3)+,(a6)
0001D35A 2C9B                       		move.l	(a3)+,(a6)
0001D35C                            
0001D35C                            loc_1CA5A:
0001D35C 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D360                            
0001D360 4E75                       		rts	
0001D362                            ; ===========================================================================
0001D362                            
0001D362                            Hud_ClrBonus:
0001D362 7A0F                       		moveq	#$F,d5
0001D364                            
0001D364                            Hud_ClrBonusLoop:
0001D364 2CBC 0000 0000             		move.l	#0,(a6)
0001D36A 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D36E                            
0001D36E 60EC                       		bra.s	loc_1CA5A
0001D370                            ; End of function Hud_TimeRingBonus
0001D370                            
0001D370                            ; ---------------------------------------------------------------------------
0001D370                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D370                            ; ---------------------------------------------------------------------------
0001D370                            
0001D370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D370                            
0001D370                            
0001D370                            Hud_Lives:				; XREF: Hud_ChkLives
0001D370 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D376 7200                       		moveq	#0,d1
0001D378 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D37C 45F9 0001 D2A2             		lea	(Hud_10).l,a2
0001D382 7C01                       		moveq	#1,d6
0001D384 7800                       		moveq	#0,d4
0001D386 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D38A                            
0001D38A                            Hud_LivesLoop:
0001D38A 2D40 0004                  		move.l	d0,4(a6)
0001D38E 7400                       		moveq	#0,d2
0001D390 261A                       		move.l	(a2)+,d3
0001D392                            
0001D392                            loc_1CA90:
0001D392 9283                       		sub.l	d3,d1
0001D394 6500                       		bcs.s	loc_1CA98
0001D396 5242                       		addq.w	#1,d2
0001D398 60F8                       		bra.s	loc_1CA90
0001D39A                            ; ===========================================================================
0001D39A                            
0001D39A                            loc_1CA98:
0001D39A D283                       		add.l	d3,d1
0001D39C 4A42                       		tst.w	d2
0001D39E 6700                       		beq.s	loc_1CAA2
0001D3A0 383C 0001                  		move.w	#1,d4
0001D3A4                            
0001D3A4                            loc_1CAA2:
0001D3A4 4A44                       		tst.w	d4
0001D3A6 6700                       		beq.s	Hud_ClrLives
0001D3A8                            
0001D3A8                            loc_1CAA6:
0001D3A8 EB4A                       		lsl.w	#5,d2
0001D3AA 47F1 2000                  		lea	(a1,d2.w),a3
0001D3AE 2C9B                       		move.l	(a3)+,(a6)
0001D3B0 2C9B                       		move.l	(a3)+,(a6)
0001D3B2 2C9B                       		move.l	(a3)+,(a6)
0001D3B4 2C9B                       		move.l	(a3)+,(a6)
0001D3B6 2C9B                       		move.l	(a3)+,(a6)
0001D3B8 2C9B                       		move.l	(a3)+,(a6)
0001D3BA 2C9B                       		move.l	(a3)+,(a6)
0001D3BC 2C9B                       		move.l	(a3)+,(a6)
0001D3BE                            
0001D3BE                            loc_1CABC:
0001D3BE 0680 0040 0000             		addi.l	#$400000,d0
0001D3C4 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D3C8                            
0001D3C8 4E75                       		rts	
0001D3CA                            ; ===========================================================================
0001D3CA                            
0001D3CA                            Hud_ClrLives:
0001D3CA 4A46                       		tst.w	d6
0001D3CC 67DA                       		beq.s	loc_1CAA6
0001D3CE 7A07                       		moveq	#7,d5
0001D3D0                            
0001D3D0                            Hud_ClrLivesLoop:
0001D3D0 2CBC 0000 0000             		move.l	#0,(a6)
0001D3D6 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D3DA 60E2                       		bra.s	loc_1CABC
0001D3DC                            ; End of function Hud_Lives
0001D3DC                            
0001D3DC                            ; ===========================================================================
0001D3DC                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D6DC                            		even
0001D6DC                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D81C                            		even
0001D81C                            ; ===========================================================================
0001D81C                            ; ---------------------------------------------------------------------------
0001D81C                            ; When debug mode is currently in use
0001D81C                            ; ---------------------------------------------------------------------------
0001D81C                            
0001D81C                            DebugMode:				; XREF: Obj01; Obj09
0001D81C 7000                       		moveq	#0,d0
0001D81E 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D822 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D826 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D82A                            ; ===========================================================================
0001D82A 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D82C 0000                       		dc.w Debug_Skip-Debug_Index
0001D82E                            ; ===========================================================================
0001D82E                            
0001D82E                            Debug_Main:				; XREF: Debug_Index
0001D82E 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D832 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D838 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D83E 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D844 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D84A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D850 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D856 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D85C 117C 0000 001A             		move.b	#0,$1A(a0)
0001D862 117C 0000 001C             		move.b	#0,$1C(a0)
0001D868 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D86E 6600                       		bne.s	Debug_Zone	; if not, branch
0001D870 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D876 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D87C 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D87E 6000                       		bra.s	Debug_UseList
0001D880                            ; ===========================================================================
0001D880                            
0001D880                            Debug_Zone:
0001D880 7000                       		moveq	#0,d0
0001D882 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D886                            
0001D886                            Debug_UseList:
0001D886 45F9 0000 0000             		lea	(DebugList).l,a2
0001D88C D040                       		add.w	d0,d0
0001D88E D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D892 3C1A                       		move.w	(a2)+,d6
0001D894 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D898 6200                       		bhi.s	loc_1CF9E
0001D89A 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D8A0                            
0001D8A0                            loc_1CF9E:
0001D8A0 6100 0000                  		bsr.w	Debug_ShowItem
0001D8A4 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D8AA 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D8B0                            
0001D8B0                            Debug_Skip:				; XREF: Debug_Index
0001D8B0 7006                       		moveq	#6,d0
0001D8B2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D8B8 6700                       		beq.s	loc_1CFBE
0001D8BA 7000                       		moveq	#0,d0
0001D8BC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D8C0                            
0001D8C0                            loc_1CFBE:
0001D8C0 45F9 0000 0000             		lea	(DebugList).l,a2
0001D8C6 D040                       		add.w	d0,d0
0001D8C8 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D8CC 3C1A                       		move.w	(a2)+,d6
0001D8CE 6100 0000                  		bsr.w	Debug_Control
0001D8D2 4EF9 0000 DE08             		jmp	DisplaySprite
0001D8D8                            
0001D8D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D8D8                            
0001D8D8                            
0001D8D8                            Debug_Control:
0001D8D8 7800                       		moveq	#0,d4
0001D8DA 323C 0001                  		move.w	#1,d1
0001D8DE 1838 F605                  		move.b	($FFFFF605).w,d4
0001D8E2 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D8E6 6600                       		bne.s	loc_1D018	; if yes, branch
0001D8E8 1038 F604                  		move.b	($FFFFF604).w,d0
0001D8EC 0240 000F                  		andi.w	#$F,d0
0001D8F0 6600                       		bne.s	loc_1D000
0001D8F2 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D8F8 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D8FE 6000 0000                  		bra.w	Debug_BackItem
0001D902                            ; ===========================================================================
0001D902                            
0001D902                            loc_1D000:
0001D902 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D906 6600                       		bne.s	loc_1D01C
0001D908 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D90E 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D912 6600                       		bne.s	loc_1D018
0001D914 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D91A                            
0001D91A                            loc_1D018:
0001D91A 1838 F604                  		move.b	($FFFFF604).w,d4
0001D91E                            
0001D91E                            loc_1D01C:
0001D91E 7200                       		moveq	#0,d1
0001D920 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D924 5241                       		addq.w	#1,d1
0001D926 4841                       		swap	d1
0001D928 E881                       		asr.l	#4,d1
0001D92A 2428 000C                  		move.l	$C(a0),d2
0001D92E 2628 0008                  		move.l	8(a0),d3
0001D932 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D936 6700                       		beq.s	loc_1D03C	; if not, branch
0001D938 9481                       		sub.l	d1,d2
0001D93A 6400                       		bcc.s	loc_1D03C
0001D93C 7400                       		moveq	#0,d2
0001D93E                            
0001D93E                            loc_1D03C:
0001D93E 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D942 6700                       		beq.s	loc_1D052	; if not, branch
0001D944 D481                       		add.l	d1,d2
0001D946 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D94C 6500                       		bcs.s	loc_1D052
0001D94E 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D954                            
0001D954                            loc_1D052:
0001D954 0804 0002                  		btst	#2,d4
0001D958 6700                       		beq.s	loc_1D05E
0001D95A 9681                       		sub.l	d1,d3
0001D95C 6400                       		bcc.s	loc_1D05E
0001D95E 7600                       		moveq	#0,d3
0001D960                            
0001D960                            loc_1D05E:
0001D960 0804 0003                  		btst	#3,d4
0001D964 6700                       		beq.s	loc_1D066
0001D966 D681                       		add.l	d1,d3
0001D968                            
0001D968                            loc_1D066:
0001D968 2142 000C                  		move.l	d2,$C(a0)
0001D96C 2143 0008                  		move.l	d3,8(a0)
0001D970                            
0001D970                            Debug_BackItem:
0001D970 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D976 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D978 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D97E 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D980 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D984 6400                       		bcc.s	Debug_NoLoop
0001D986 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D98A 6000                       		bra.s	Debug_NoLoop
0001D98C                            ; ===========================================================================
0001D98C                            
0001D98C                            Debug_NextItem:
0001D98C 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D992 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D994 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D998 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D99C 6200                       		bhi.s	Debug_NoLoop
0001D99E 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D9A4                            
0001D9A4                            Debug_NoLoop:
0001D9A4 6000 0000                  		bra.w	Debug_ShowItem
0001D9A8                            ; ===========================================================================
0001D9A8                            
0001D9A8                            Debug_MakeItem:
0001D9A8 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D9AE 6700                       		beq.s	Debug_Exit	; if not, branch
0001D9B0 4EB9 0000 E28E             		jsr	SingleObjLoad
0001D9B6 6600                       		bne.s	Debug_Exit
0001D9B8 3368 0008 0008             		move.w	8(a0),8(a1)
0001D9BE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D9C4 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D9C8 1368 0001 0001             		move.b	1(a0),1(a1)
0001D9CE 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D9D4 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D9DA 7000                       		moveq	#0,d0
0001D9DC 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D9E0 E748                       		lsl.w	#3,d0
0001D9E2 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D9E8 4E75                       		rts	
0001D9EA                            ; ===========================================================================
0001D9EA                            
0001D9EA                            Debug_Exit:
0001D9EA 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D9F0 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D9F2 7000                       		moveq	#0,d0
0001D9F4 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D9F8 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DA00 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DA06 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DA0A 3140 000A                  		move.w	d0,$A(a0)
0001DA0E 3140 000E                  		move.w	d0,$E(a0)
0001DA12 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DA18 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DA1E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DA24 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DA26 4278 F780                  		clr.w	($FFFFF780).w
0001DA2A 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DA30 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DA38 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DA3E 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DA44 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DA4A 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DA50                            
0001DA50                            Debug_DoNothing:
0001DA50 4E75                       		rts	
0001DA52                            ; End of function Debug_Control
0001DA52                            
0001DA52                            
0001DA52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA52                            
0001DA52                            
0001DA52                            Debug_ShowItem:				; XREF: Debug_Main
0001DA52 7000                       		moveq	#0,d0
0001DA54 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DA58 E748                       		lsl.w	#3,d0
0001DA5A 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DA60 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DA66 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DA6C 4E75                       		rts	
0001DA6E                            ; End of function Debug_ShowItem
0001DA6E                            
0001DA6E                            ; ===========================================================================
0001DA6E                            ; ---------------------------------------------------------------------------
0001DA6E                            ; Debug	list pointers
0001DA6E                            ; ---------------------------------------------------------------------------
0001DA6E                            DebugList:
0001DA6E                            	include "_inc\Debug list pointers.asm"
0001DA6E                            ; ---------------------------------------------------------------------------
0001DA6E                            ; Debug	list pointers
0001DA6E                            ; ---------------------------------------------------------------------------
0001DA6E 0000                       	dc.w Debug_GHZ-DebugList
0001DA70 0000                       	dc.w Debug_LZ-DebugList
0001DA72 0000                       	dc.w Debug_MZ-DebugList
0001DA74 0000                       	dc.w Debug_SLZ-DebugList
0001DA76 0000                       	dc.w Debug_SYZ-DebugList
0001DA78 0000                       	dc.w Debug_SBZ-DebugList
0001DA7A 0000                       	dc.w Debug_Ending-DebugList
0001DA7A 0000                       	dc.w Debug_Ending-DebugList
0001DA7C                            
0001DA7C                            ; ---------------------------------------------------------------------------
0001DA7C                            ; Debug	list - Green Hill
0001DA7C                            ; ---------------------------------------------------------------------------
0001DA7C                            Debug_GHZ:
0001DA7C                            	include "_inc\Debug list - GHZ.asm"
0001DA7C                            ; ---------------------------------------------------------------------------
0001DA7C                            ; Debug	list - Green Hill
0001DA7C                            ; ---------------------------------------------------------------------------
0001DA7C 0010                       	dc.w $10			; number of items in list
0001DA7E 2500 A666                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DA82 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DA86 2600 AC6C                  	dc.l Map_obj26+$26000000
0001DA8A 0000 0680                  	dc.b 0,	0, 6, $80
0001DA8E 1F00 9E5E                  	dc.l Map_obj1F+$1F000000
0001DA92 0000 0400                  	dc.b 0,	0, 4, 0
0001DA96 2200 A11A                  	dc.l Map_obj22+$22000000
0001DA9A 0000 0444                  	dc.b 0,	0, 4, $44
0001DA9E 2B00 B2E0                  	dc.l Map_obj2B+$2B000000
0001DAA2 0000 047B                  	dc.b 0,	0, 4, $7B
0001DAA6 3600 D7F0                  	dc.l Map_obj36+$36000000
0001DAAA 0000 051B                  	dc.b 0,	0, 5, $1B
0001DAAE 1800 8770                  	dc.l Map_obj18+$18000000
0001DAB2 0000 4000                  	dc.b 0,	0, $40,	0
0001DAB6 3B00 D916                  	dc.l Map_obj3B+$3B000000
0001DABA 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DABE 4000 FFA2                  	dc.l Map_obj40+$40000000
0001DAC2 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DAC6 4100 E51C                  	dc.l Map_obj41+$41000000
0001DACA 0000 0523                  	dc.b 0,	0, 5, $23
0001DACE 4200 E742                  	dc.l Map_obj42+$42000000
0001DAD2 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DAD6 4400 EA50                  	dc.l Map_obj44+$44000000
0001DADA 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DADE 1900 8870                  	dc.l Map_obj48+$19000000
0001DAE2 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DAE6 7901 79F0                  	dc.l Map_obj79+$79000000
0001DAEA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DAEE 4B00 A6A6                  	dc.l Map_obj4B+$4B000000
0001DAF2 0000 2400                  	dc.b 0,	0, $24,	0
0001DAF6 7D01 7B40                  	dc.l Map_obj7D+$7D000000
0001DAFA 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DAFE                            	even
0001DAFE                            	even
0001DAFE                            
0001DAFE                            ; ---------------------------------------------------------------------------
0001DAFE                            ; Debug	list - Labyrinth
0001DAFE                            ; ---------------------------------------------------------------------------
0001DAFE                            Debug_LZ:
0001DAFE                            	include "_inc\Debug list - LZ.asm"
0001DAFE                            ; ---------------------------------------------------------------------------
0001DAFE                            ; Debug	list - Labyrinth
0001DAFE                            ; ---------------------------------------------------------------------------
0001DAFE 0019                       	dc.w $19
0001DB00 2500 A666                  	dc.l Map_obj25+$25000000
0001DB04 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB08 2600 AC6C                  	dc.l Map_obj26+$26000000
0001DB0C 0000 0680                  	dc.b 0,	0, 6, $80
0001DB10 4100 E51C                  	dc.l Map_obj41+$41000000
0001DB14 0000 0523                  	dc.b 0,	0, 5, $23
0001DB18 2C00 B390                  	dc.l Map_obj2C+$2C000000
0001DB1C 0800 2486                  	dc.b 8,	0, $24,	$86
0001DB20 2D00 B584                  	dc.l Map_obj2D+$2D000000
0001DB24 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DB28 1601 2776                  	dc.l Map_obj16+$16000000
0001DB2C 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DB30 1601 2776                  	dc.l Map_obj16+$16000000
0001DB34 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DB38 3300 CA3C                  	dc.l Map_obj33+$33000000
0001DB3C 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DB40 3200 C5FC                  	dc.l Map_obj32+$32000000
0001DB44 0000 0513                  	dc.b 0,	0, 5, $13
0001DB48 3600 D7F0                  	dc.l Map_obj36+$36000000
0001DB4C 0000 051B                  	dc.b 0,	0, 5, $1B
0001DB50 5201 0898                  	dc.l Map_obj52a+$52000000
0001DB54 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DB58 6101 299E                  	dc.l Map_obj61+$61000000
0001DB5C 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DB60 6101 299E                  	dc.l Map_obj61+$61000000
0001DB64 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DB68 6101 299E                  	dc.l Map_obj61+$61000000
0001DB6C 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DB70 6201 2AF2                  	dc.l Map_obj62+$62000000
0001DB74 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DB78 6101 299E                  	dc.l Map_obj61+$61000000
0001DB7C 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DB80 6101 299E                  	dc.l Map_obj61+$61000000
0001DB84 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DB88 6301 2E54                  	dc.l Map_obj63+$63000000
0001DB8C 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DB90 6001 26C0                  	dc.l Map_obj60+$60000000
0001DB94 0000 0467                  	dc.b 0,	0, 4, $67
0001DB98 6401 319A                  	dc.l Map_obj64+$64000000
0001DB9C 8413 8348                  	dc.b $84, $13, $83, $48
0001DBA0 6501 3322                  	dc.l Map_obj65+$65000000
0001DBA4 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DBA8 6501 3322                  	dc.l Map_obj65+$65000000
0001DBAC 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DBB0 0B01 1B10                  	dc.l Map_obj0B+$B000000
0001DBB4 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DBB8 0C01 1BE0                  	dc.l Map_obj0C+$C000000
0001DBBC 0200 4328                  	dc.b 2,	0, $43,	$28
0001DBC0 7901 79F0                  	dc.l Map_obj79+$79000000
0001DBC4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DBC8                            	even
0001DBC8                            	even
0001DBC8                            
0001DBC8                            ; ---------------------------------------------------------------------------
0001DBC8                            ; Debug	list - Marble
0001DBC8                            ; ---------------------------------------------------------------------------
0001DBC8                            Debug_MZ:
0001DBC8                            	include "_inc\Debug list - MZ.asm"
0001DBC8                            ; ---------------------------------------------------------------------------
0001DBC8                            ; Debug	list - Marble
0001DBC8                            ; ---------------------------------------------------------------------------
0001DBC8 0012                       	dc.w $12
0001DBCA 2500 A666                  	dc.l Map_obj25+$25000000
0001DBCE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DBD2 2600 AC6C                  	dc.l Map_obj26+$26000000
0001DBD6 0000 0680                  	dc.b 0,	0, 6, $80
0001DBDA 2200 A11A                  	dc.l Map_obj22+$22000000
0001DBDE 0000 0444                  	dc.b 0,	0, 4, $44
0001DBE2 3600 D7F0                  	dc.l Map_obj36+$36000000
0001DBE6 0000 051B                  	dc.b 0,	0, 5, $1B
0001DBEA 4100 E51C                  	dc.l Map_obj41+$41000000
0001DBEE 0000 0523                  	dc.b 0,	0, 5, $23
0001DBF2 1300 BAC6                  	dc.l Map_obj14+$13000000
0001DBF6 0000 0345                  	dc.b 0,	0, 3, $45
0001DBFA 4600 F102                  	dc.l Map_obj46+$46000000
0001DBFE 0000 4000                  	dc.b 0,	0, $40,	0
0001DC02 4C00 FA4E                  	dc.l Map_obj4C+$4C000000
0001DC06 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DC0A 4E00 FD32                  	dc.l Map_obj4E+$4E000000
0001DC0E 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DC12 3300 CA3C                  	dc.l Map_obj33+$33000000
0001DC16 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DC1A 5001 0130                  	dc.l Map_obj50+$50000000
0001DC1E 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DC22 5101 05CC                  	dc.l Map_obj51+$51000000
0001DC26 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DC2A 5201 0842                  	dc.l Map_obj52+$52000000
0001DC2E 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DC32 5300 8E08                  	dc.l Map_obj53+$53000000
0001DC36 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DC3A 5400 FA14                  	dc.l Map_obj54+$54000000
0001DC3E 0000 8680                  	dc.b 0,	0, $86,	$80
0001DC42 5501 0A36                  	dc.l Map_obj55+$55000000
0001DC46 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DC4A 7801 766A                  	dc.l Map_obj78+$78000000
0001DC4E 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DC52 7901 79F0                  	dc.l Map_obj79+$79000000
0001DC56 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC5A                            	even
0001DC5A                            	even
0001DC5A                            
0001DC5A                            ; ---------------------------------------------------------------------------
0001DC5A                            ; Debug	list - Star Light
0001DC5A                            ; ---------------------------------------------------------------------------
0001DC5A                            Debug_SLZ:
0001DC5A                            	include "_inc\Debug list - SLZ.asm"
0001DC5A                            ; ---------------------------------------------------------------------------
0001DC5A                            ; Debug	list - Star Light
0001DC5A                            ; ---------------------------------------------------------------------------
0001DC5A 000F                       	dc.w $F
0001DC5C 2500 A666                  	dc.l Map_obj25+$25000000
0001DC60 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DC64 2600 AC6C                  	dc.l Map_obj26+$26000000
0001DC68 0000 0680                  	dc.b 0,	0, 6, $80
0001DC6C 5901 1538                  	dc.l Map_obj59+$59000000
0001DC70 0000 4000                  	dc.b 0,	0, $40,	0
0001DC74 5300 8E08                  	dc.l Map_obj53+$53000000
0001DC78 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DC7C 1800 87CE                  	dc.l Map_obj18b+$18000000
0001DC80 0000 4000                  	dc.b 0,	0, $40,	0
0001DC84 5A01 1672                  	dc.l Map_obj5A+$5A000000
0001DC88 0000 4000                  	dc.b 0,	0, $40,	0
0001DC8C 5B01 182A                  	dc.l Map_obj5B+$5B000000
0001DC90 0000 4000                  	dc.b 0,	0, $40,	0
0001DC94 5D01 1DFA                  	dc.l Map_obj5D+$5D000000
0001DC98 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DC9C 5E01 218C                  	dc.l Map_obj5E+$5E000000
0001DCA0 0000 0374                  	dc.b 0,	0, 3, $74
0001DCA4 4100 E51C                  	dc.l Map_obj41+$41000000
0001DCA8 0000 0523                  	dc.b 0,	0, 5, $23
0001DCAC 1300 BAC6                  	dc.l Map_obj14+$13000000
0001DCB0 0000 0480                  	dc.b 0,	0, 4, $80
0001DCB4 1C00 8F18                  	dc.l Map_obj1C+$1C000000
0001DCB8 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DCBC 5F01 240A                  	dc.l Map_obj5F+$5F000000
0001DCC0 0000 0400                  	dc.b 0,	0, 4, 0
0001DCC4 6001 26C0                  	dc.l Map_obj60+$60000000
0001DCC8 0000 2429                  	dc.b 0,	0, $24,	$29
0001DCCC 7901 79F0                  	dc.l Map_obj79+$79000000
0001DCD0 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DCD4                            	even
0001DCD4                            	even
0001DCD4                            
0001DCD4                            ; ---------------------------------------------------------------------------
0001DCD4                            ; Debug	list - Spring Yard
0001DCD4                            ; ---------------------------------------------------------------------------
0001DCD4                            Debug_SYZ:
0001DCD4                            	include "_inc\Debug list - SYZ.asm"
0001DCD4                            ; ---------------------------------------------------------------------------
0001DCD4                            ; Debug	list - Spring Yard
0001DCD4                            ; ---------------------------------------------------------------------------
0001DCD4 000F                       	dc.w $F
0001DCD6 2500 A666                  	dc.l Map_obj25+$25000000
0001DCDA 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DCDE 2600 AC6C                  	dc.l Map_obj26+$26000000
0001DCE2 0000 0680                  	dc.b 0,	0, 6, $80
0001DCE6 3600 D7F0                  	dc.l Map_obj36+$36000000
0001DCEA 0000 051B                  	dc.b 0,	0, 5, $1B
0001DCEE 4100 E51C                  	dc.l Map_obj41+$41000000
0001DCF2 0000 0523                  	dc.b 0,	0, 5, $23
0001DCF6 4300 E9A2                  	dc.l Map_obj43+$43000000
0001DCFA 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DCFE 1200 F180                  	dc.l Map_obj12+$12000000
0001DD02 0000 0000                  	dc.b 0,	0, 0, 0
0001DD06 4700 F2FC                  	dc.l Map_obj47+$47000000
0001DD0A 0000 0380                  	dc.b 0,	0, 3, $80
0001DD0E 1F00 9E5E                  	dc.l Map_obj1F+$1F000000
0001DD12 0000 0400                  	dc.b 0,	0, 4, 0
0001DD16 2200 A11A                  	dc.l Map_obj22+$22000000
0001DD1A 0000 0444                  	dc.b 0,	0, 4, $44
0001DD1E 5001 0130                  	dc.l Map_obj50+$50000000
0001DD22 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DD26 1800 87BC                  	dc.l Map_obj18a+$18000000
0001DD2A 0000 4000                  	dc.b 0,	0, $40,	0
0001DD2E 5601 0EF8                  	dc.l Map_obj56+$56000000
0001DD32 0000 4000                  	dc.b 0,	0, $40,	0
0001DD36 3200 C5FC                  	dc.l Map_obj32+$32000000
0001DD3A 0000 0513                  	dc.b 0,	0, 5, $13
0001DD3E 7801 766A                  	dc.l Map_obj78+$78000000
0001DD42 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DD46 7901 79F0                  	dc.l Map_obj79+$79000000
0001DD4A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DD4E                            	even
0001DD4E                            	even
0001DD4E                            
0001DD4E                            ; ---------------------------------------------------------------------------
0001DD4E                            ; Debug	list - Scrap Brain
0001DD4E                            ; ---------------------------------------------------------------------------
0001DD4E                            Debug_SBZ:
0001DD4E                            	include "_inc\Debug list - SBZ.asm"
0001DD4E                            ; ---------------------------------------------------------------------------
0001DD4E                            ; Debug	list - Scrap Brain
0001DD4E                            ; ---------------------------------------------------------------------------
0001DD4E 001D                       	dc.w $1D
0001DD50 2500 A666                  	dc.l Map_obj25+$25000000
0001DD54 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DD58 2600 AC6C                  	dc.l Map_obj26+$26000000
0001DD5C 0000 0680                  	dc.b 0,	0, 6, $80
0001DD60 5F01 240A                  	dc.l Map_obj5F+$5F000000
0001DD64 0000 0400                  	dc.b 0,	0, 4, 0
0001DD68 6001 26C0                  	dc.l Map_obj60+$60000000
0001DD6C 0000 0429                  	dc.b 0,	0, 4, $29
0001DD70 7801 766A                  	dc.l Map_obj78+$78000000
0001DD74 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DD78 1501 1294                  	dc.l Map_obj15b+$15000000
0001DD7C 0702 4391                  	dc.b 7,	2, $43,	$91
0001DD80 6701 5F7E                  	dc.l Map_obj67+$67000000
0001DD84 E000 C344                  	dc.b $E0, 0, $C3, $44
0001DD88 5201 0842                  	dc.l Map_obj52+$52000000
0001DD8C 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DD90 3200 C5FC                  	dc.l Map_obj32+$32000000
0001DD94 0000 0513                  	dc.b 0,	0, 5, $13
0001DD98 6901 61D8                  	dc.l Map_obj69+$69000000
0001DD9C 0300 4492                  	dc.b 3,	0, $44,	$92
0001DDA0 6901 6232                  	dc.l Map_obj69a+$69000000
0001DDA4 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DDA8 6A01 6490                  	dc.l Map_obj6A+$6A000000
0001DDAC 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DDB0 5300 8E08                  	dc.l Map_obj53+$53000000
0001DDB4 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DDB8 5201 0842                  	dc.l Map_obj52+$52000000
0001DDBC 3903 4460                  	dc.b $39, 3, $44, $60
0001DDC0 6B01 6860                  	dc.l Map_obj6B+$6B000000
0001DDC4 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DDC8 2A00 90AE                  	dc.l Map_obj2A+$2A000000
0001DDCC 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DDD0 6B01 6860                  	dc.l Map_obj6B+$6B000000
0001DDD4 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DDD8 6A01 6490                  	dc.l Map_obj6A+$6A000000
0001DDDC 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DDE0 6B01 6860                  	dc.l Map_obj6B+$6B000000
0001DDE4 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DDE8 6A01 6490                  	dc.l Map_obj6A+$6A000000
0001DDEC 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DDF0 6B01 6860                  	dc.l Map_obj6B+$6B000000
0001DDF4 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DDF8 6C01 6A22                  	dc.l Map_obj6C+$6C000000
0001DDFC 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DE00 6D00 EDF2                  	dc.l Map_obj6D+$6D000000
0001DE04 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DE08 6D00 EDF2                  	dc.l Map_obj6D+$6D000000
0001DE0C 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DE10 6E01 6AD8                  	dc.l Map_obj6E+$6E000000
0001DE14 0400 047E                  	dc.b 4,	0, 4, $7E
0001DE18 7001 6F2E                  	dc.l Map_obj70+$70000000
0001DE1C 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DE20 7101 1CA0                  	dc.l Map_obj71+$71000000
0001DE24 1100 8680                  	dc.b $11, 0, $86, $80
0001DE28 1E00 956C                  	dc.l Map_obj1E+$1E000000
0001DE2C 0400 2302                  	dc.b 4,	0, $23,	2
0001DE30 7901 79F0                  	dc.l Map_obj79+$79000000
0001DE34 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DE38                            	even
0001DE38                            	even
0001DE38                            
0001DE38                            ; ---------------------------------------------------------------------------
0001DE38                            ; Debug	list - ending sequence / special stage
0001DE38                            ; ---------------------------------------------------------------------------
0001DE38                            Debug_Ending:
0001DE38                            	include "_inc\Debug list - Ending and SS.asm"
0001DE38                            ; ---------------------------------------------------------------------------
0001DE38                            ; Debug	list - ending sequence / special stage
0001DE38                            ; ---------------------------------------------------------------------------
0001DE38 000D                       	dc.w $D
0001DE3A 2500 A666                  	dc.l Map_obj25+$25000000
0001DE3E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DE42 4700 F2FC                  	dc.l Map_obj47+$47000000
0001DE46 0000 0380                  	dc.b 0,	0, 3, $80
0001DE4A 2800 9B90                  	dc.l Map_obj28a+$28000000
0001DE4E 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DE52 2800 9B90                  	dc.l Map_obj28a+$28000000
0001DE56 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DE5A 2800 9B90                  	dc.l Map_obj28a+$28000000
0001DE5E 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DE62 2800 9B78                  	dc.l Map_obj28+$28000000
0001DE66 0D00 0553                  	dc.b $D, 0, 5, $53
0001DE6A 2800 9B78                  	dc.l Map_obj28+$28000000
0001DE6E 0E00 0553                  	dc.b $E, 0, 5, $53
0001DE72 2800 9B78                  	dc.l Map_obj28+$28000000
0001DE76 0F00 0573                  	dc.b $F, 0, 5, $73
0001DE7A 2800 9B78                  	dc.l Map_obj28+$28000000
0001DE7E 1000 0573                  	dc.b $10, 0, 5,	$73
0001DE82 2800 9B90                  	dc.l Map_obj28a+$28000000
0001DE86 1100 0585                  	dc.b $11, 0, 5,	$85
0001DE8A 2800 9BA8                  	dc.l Map_obj28b+$28000000
0001DE8E 1200 0593                  	dc.b $12, 0, 5,	$93
0001DE92 2800 9B90                  	dc.l Map_obj28a+$28000000
0001DE96 1300 0565                  	dc.b $13, 0, 5,	$65
0001DE9A 2800 9BA8                  	dc.l Map_obj28b+$28000000
0001DE9E 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DEA2                            	even
0001DEA2                            	even
0001DEA2                            
0001DEA2                            ; ---------------------------------------------------------------------------
0001DEA2                            ; Main level load blocks
0001DEA2                            ; ---------------------------------------------------------------------------
0001DEA2                            MainLoadBlocks:
0001DEA2                            	include "_inc\Main level load blocks.asm"
0001DEA2                            ; ---------------------------------------------------------------------------
0001DEA2                            ; Main level load blocks
0001DEA2                            ;
0001DEA2                            ; ===FORMAT===
0001DEA2                            ; level	patterns + (1st	PLC num	* 10^6)
0001DEA2                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DEA2                            ; 256x256 mappings
0001DEA2                            ; blank, music (unused), pal index (unused), pal index
0001DEA2                            ; ---------------------------------------------------------------------------
0001DEA2 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DEA6 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DEAA 0000 0000                  	dc.l Blk256_GHZ
0001DEAE 0081 0404                  	dc.b 0,	$81, 4,	4
0001DEB2 0000 0000                  	dc.l Nem_LZ+$6000000
0001DEB6 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DEBA 0000 0000                  	dc.l Blk256_LZ
0001DEBE 0082 0505                  	dc.b 0,	$82, 5,	5
0001DEC2 0000 0000                  	dc.l Nem_MZ+$8000000
0001DEC6 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DECA 0000 0000                  	dc.l Blk256_MZ
0001DECE 0083 0606                  	dc.b 0,	$83, 6,	6
0001DED2 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DED6 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DEDA 0000 0000                  	dc.l Blk256_SLZ
0001DEDE 0084 0707                  	dc.b 0,	$84, 7,	7
0001DEE2 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DEE6 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DEEA 0000 0000                  	dc.l Blk256_SYZ
0001DEEE 0085 0808                  	dc.b 0,	$85, 8,	8
0001DEF2 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DEF6 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DEFA 0000 0000                  	dc.l Blk256_SBZ
0001DEFE 0086 0909                  	dc.b 0,	$86, 9,	9
0001DF02 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DF06 0000 0000                  	dc.l Blk16_GHZ
0001DF0A 0000 0000                  	dc.l Blk256_GHZ
0001DF0E 0086 1313                  	dc.b 0,	$86, $13, $13
0001DF12                            	even
0001DF12                            	even
0001DF12                            
0001DF12                            ; ---------------------------------------------------------------------------
0001DF12                            ; Pattern load cues
0001DF12                            ; ---------------------------------------------------------------------------
0001DF12                            ArtLoadCues:
0001DF12                            	include "_inc\Pattern load cues.asm"
0001DF12                            ; ---------------------------------------------------------------------------
0001DF12                            ; Pattern load cues - index
0001DF12                            ; ---------------------------------------------------------------------------
0001DF12 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DF16 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DF1A 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DF1E 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DF22 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DF26 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DF2A 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DF2E 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DF32 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DF36 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DF3A 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DF3E 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DF42 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DF46 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DF4A 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DF4E 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DF52 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001DF54                            ; ---------------------------------------------------------------------------
0001DF54                            ; Pattern load cues - standard block 1
0001DF54                            ; ---------------------------------------------------------------------------
0001DF54 0004                       PLC_Main:	dc.w 4
0001DF56 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DF5A F400                       		dc.w $F400
0001DF5C 0000 0000                  		dc.l Nem_Hud		; HUD
0001DF60 D940                       		dc.w $D940
0001DF62 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DF66 FA80                       		dc.w $FA80
0001DF68 0000 0000                  		dc.l Nem_Ring		; rings
0001DF6C F640                       		dc.w $F640
0001DF6E 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DF72 F2E0                       		dc.w $F2E0
0001DF74                            ; ---------------------------------------------------------------------------
0001DF74                            ; Pattern load cues - standard block 2
0001DF74                            ; ---------------------------------------------------------------------------
0001DF74 0002                       PLC_Main2:	dc.w 2
0001DF76 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DF7A D000                       		dc.w $D000
0001DF7C 0000 0000                  		dc.l Nem_Shield		; shield
0001DF80 A820                       		dc.w $A820
0001DF82 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DF86 AB80                       		dc.w $AB80
0001DF88                            ; ---------------------------------------------------------------------------
0001DF88                            ; Pattern load cues - explosion
0001DF88                            ; ---------------------------------------------------------------------------
0001DF88 0000                       PLC_Explode:	dc.w 0
0001DF8A 0000 0000                  		dc.l Nem_Explode	; explosion
0001DF8E B400                       		dc.w $B400
0001DF90                            ; ---------------------------------------------------------------------------
0001DF90                            ; Pattern load cues - game/time	over
0001DF90                            ; ---------------------------------------------------------------------------
0001DF90 0000                       PLC_GameOver:	dc.w 0
0001DF92 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DF96 ABC0                       		dc.w $ABC0
0001DF98                            ; ---------------------------------------------------------------------------
0001DF98                            ; Pattern load cues - Green Hill
0001DF98                            ; ---------------------------------------------------------------------------
0001DF98 000B                       PLC_GHZ:	dc.w $B
0001DF9A 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DF9E 0000                       		dc.w 0
0001DFA0 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DFA4 39A0                       		dc.w $39A0
0001DFA6 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DFAA 6B00                       		dc.w $6B00
0001DFAC 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DFB0 7A00                       		dc.w $7A00
0001DFB2 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DFB6 8000                       		dc.w $8000
0001DFB8 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DFBC 8880                       		dc.w $8880
0001DFBE 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DFC2 8F60                       		dc.w $8F60
0001DFC4 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DFC8 9360                       		dc.w $9360
0001DFCA 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DFCE 9E00                       		dc.w $9E00
0001DFD0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DFD4 A360                       		dc.w $A360
0001DFD6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DFDA A460                       		dc.w $A460
0001DFDC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DFE0 A660                       		dc.w $A660
0001DFE2 0005                       PLC_GHZ2:	dc.w 5
0001DFE4 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DFE8 7000                       		dc.w $7000
0001DFEA 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DFEE 71C0                       		dc.w $71C0
0001DFF0 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DFF4 7300                       		dc.w $7300
0001DFF6 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DFFA 7540                       		dc.w $7540
0001DFFC 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E000 A1E0                       		dc.w $A1E0
0001E002 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E006 6980                       		dc.w $6980
0001E008                            ; ---------------------------------------------------------------------------
0001E008                            ; Pattern load cues - Labyrinth
0001E008                            ; ---------------------------------------------------------------------------
0001E008 000B                       PLC_LZ:		dc.w $B
0001E00A 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E00E 0000                       		dc.w 0
0001E010 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E014 3C00                       		dc.w $3C00
0001E016 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E01A 3E00                       		dc.w $3E00
0001E01C 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E020 4B20                       		dc.w $4B20
0001E022 0000 0000                  		dc.l Nem_Water		; water	surface
0001E026 6000                       		dc.w $6000
0001E028 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E02C 6200                       		dc.w $6200
0001E02E 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E032 6500                       		dc.w $6500
0001E034 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E038 6900                       		dc.w $6900
0001E03A 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E03E 7780                       		dc.w $7780
0001E040 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E044 7880                       		dc.w $7880
0001E046 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E04A 7980                       		dc.w $7980
0001E04C 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E050 94C0                       		dc.w $94C0
0001E052 000C                       PLC_LZ2:	dc.w $C
0001E054 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E058 7BC0                       		dc.w $7BC0
0001E05A 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E05E 7CC0                       		dc.w $7CC0
0001E060 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E064 7EC0                       		dc.w $7EC0
0001E066 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E06A 5D20                       		dc.w $5D20
0001E06C 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E070 8800                       		dc.w $8800
0001E072 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E076 89E0                       		dc.w $89E0
0001E078 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E07C 8CE0                       		dc.w $8CE0
0001E07E 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E082 90C0                       		dc.w $90C0
0001E084 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E088 A1E0                       		dc.w $A1E0
0001E08A 0000 0000                  		dc.l Nem_Cork		; cork block
0001E08E A000                       		dc.w $A000
0001E090 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E094 A360                       		dc.w $A360
0001E096 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E09A A460                       		dc.w $A460
0001E09C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E0A0 A660                       		dc.w $A660
0001E0A2                            ; ---------------------------------------------------------------------------
0001E0A2                            ; Pattern load cues - Marble
0001E0A2                            ; ---------------------------------------------------------------------------
0001E0A2 0009                       PLC_MZ:		dc.w 9
0001E0A4 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E0A8 0000                       		dc.w 0
0001E0AA 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E0AE 6000                       		dc.w $6000
0001E0B0 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E0B4 68A0                       		dc.w $68A0
0001E0B6 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E0BA 7000                       		dc.w $7000
0001E0BC 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E0C0 71C0                       		dc.w $71C0
0001E0C2 0000 0000                  		dc.l Nem_Lava		; lava
0001E0C6 7500                       		dc.w $7500
0001E0C8 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E0CC 8880                       		dc.w $8880
0001E0CE 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E0D2 8F60                       		dc.w $8F60
0001E0D4 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E0D8 9700                       		dc.w $9700
0001E0DA 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E0DE 9FE0                       		dc.w $9FE0
0001E0E0 0004                       PLC_MZ2:	dc.w 4
0001E0E2 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E0E6 A260                       		dc.w $A260
0001E0E8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E0EC A360                       		dc.w $A360
0001E0EE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E0F2 A460                       		dc.w $A460
0001E0F4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E0F8 A660                       		dc.w $A660
0001E0FA 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E0FE 5700                       		dc.w $5700
0001E100                            ; ---------------------------------------------------------------------------
0001E100                            ; Pattern load cues - Star Light
0001E100                            ; ---------------------------------------------------------------------------
0001E100 0008                       PLC_SLZ:	dc.w 8
0001E102 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E106 0000                       		dc.w 0
0001E108 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E10C 8000                       		dc.w $8000
0001E10E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E112 8520                       		dc.w $8520
0001E114 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E118 9000                       		dc.w $9000
0001E11A 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E11E 9C00                       		dc.w $9C00
0001E120 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E124 A260                       		dc.w $A260
0001E126 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E12A A360                       		dc.w $A360
0001E12C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E130 A460                       		dc.w $A460
0001E132 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E136 A660                       		dc.w $A660
0001E138 0005                       PLC_SLZ2:	dc.w 5
0001E13A 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E13E 6E80                       		dc.w $6E80
0001E140 0000 0000                  		dc.l Nem_Fan		; fan
0001E144 7400                       		dc.w $7400
0001E146 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E14A 7980                       		dc.w $7980
0001E14C 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E150 7B80                       		dc.w $7B80
0001E152 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E156 9B00                       		dc.w $9B00
0001E158 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E15C 9E00                       		dc.w $9E00
0001E15E                            ; ---------------------------------------------------------------------------
0001E15E                            ; Pattern load cues - Spring Yard
0001E15E                            ; ---------------------------------------------------------------------------
0001E15E 0004                       PLC_SYZ:	dc.w 4
0001E160 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E164 0000                       		dc.w 0
0001E166 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E16A 8000                       		dc.w $8000
0001E16C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E170 8880                       		dc.w $8880
0001E172 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E176 8F60                       		dc.w $8F60
0001E178 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E17C 9700                       		dc.w $9700
0001E17E 0007                       PLC_SYZ2:	dc.w 7
0001E180 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E184 7000                       		dc.w $7000
0001E186 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E18A 72C0                       		dc.w $72C0
0001E18C 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E190 7740                       		dc.w $7740
0001E192 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E196 9FE0                       		dc.w $9FE0
0001E198 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E19C A1E0                       		dc.w $A1E0
0001E19E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E1A2 A360                       		dc.w $A360
0001E1A4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E1A8 A460                       		dc.w $A460
0001E1AA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E1AE A660                       		dc.w $A660
0001E1B0                            ; ---------------------------------------------------------------------------
0001E1B0                            ; Pattern load cues - Scrap Brain
0001E1B0                            ; ---------------------------------------------------------------------------
0001E1B0 000B                       PLC_SBZ:	dc.w $B
0001E1B2 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E1B6 0000                       		dc.w 0
0001E1B8 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E1BC 5800                       		dc.w $5800
0001E1BE 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E1C2 5D00                       		dc.w $5D00
0001E1C4 0000 0000                  		dc.l Nem_Girder		; girder
0001E1C8 5E00                       		dc.w $5E00
0001E1CA 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E1CE 6040                       		dc.w $6040
0001E1D0 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E1D4 6880                       		dc.w $6880
0001E1D6 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E1DA 6900                       		dc.w $6900
0001E1DC 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E1E0 7220                       		dc.w $7220
0001E1E2 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E1E6 76A0                       		dc.w $76A0
0001E1E8 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E1EC 7B20                       		dc.w $7B20
0001E1EE 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E1F2 7EA0                       		dc.w $7EA0
0001E1F4 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E1F8 9860                       		dc.w $9860
0001E1FA 000C                       PLC_SBZ2:	dc.w $C
0001E1FC 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E200 5600                       		dc.w $5600
0001E202 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E206 8000                       		dc.w $8000
0001E208 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E20C 8520                       		dc.w $8520
0001E20E 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E212 8C00                       		dc.w $8C00
0001E214 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E218 8DE0                       		dc.w $8DE0
0001E21A 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E21E 8FC0                       		dc.w $8FC0
0001E220 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E224 9240                       		dc.w $9240
0001E226 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E22A 7F20                       		dc.w $7F20
0001E22C 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E230 9BE0                       		dc.w $9BE0
0001E232 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E236 A1E0                       		dc.w $A1E0
0001E238 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E23C A360                       		dc.w $A360
0001E23E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E242 A460                       		dc.w $A460
0001E244 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E248 A660                       		dc.w $A660
0001E24A                            ; ---------------------------------------------------------------------------
0001E24A                            ; Pattern load cues - title card
0001E24A                            ; ---------------------------------------------------------------------------
0001E24A 0000                       PLC_TitleCard:	dc.w 0
0001E24C 0000 0000                  		dc.l Nem_TitleCard
0001E250 B000                       		dc.w $B000
0001E252                            ; ---------------------------------------------------------------------------
0001E252                            ; Pattern load cues - act 3 boss
0001E252                            ; ---------------------------------------------------------------------------
0001E252 0005                       PLC_Boss:	dc.w 5
0001E254 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E258 8000                       		dc.w $8000
0001E25A 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E25E 8D80                       		dc.w $8D80
0001E260 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E264 93A0                       		dc.w $93A0
0001E266 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E26A A300                       		dc.w $A300
0001E26C 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E270 A300                       		dc.w $A300
0001E272 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E276 A540                       		dc.w $A540
0001E278                            ; ---------------------------------------------------------------------------
0001E278                            ; Pattern load cues - act 1/2 signpost
0001E278                            ; ---------------------------------------------------------------------------
0001E278 0002                       PLC_Signpost:	dc.w 2
0001E27A 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E27E D000                       		dc.w $D000
0001E280 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E284 96C0                       		dc.w $96C0
0001E286 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E28A 8C40                       		dc.w $8C40
0001E28C                            ; ---------------------------------------------------------------------------
0001E28C                            ; Pattern load cues - beta special stage warp effect
0001E28C                            ; ---------------------------------------------------------------------------
0001E28C 0000                       PLC_Warp:	dc.w 0
0001E28E 0000 0000                  		dc.l Nem_Warp
0001E292 A820                       		dc.w $A820
0001E294                            ; ---------------------------------------------------------------------------
0001E294                            ; Pattern load cues - special stage
0001E294                            ; ---------------------------------------------------------------------------
0001E294 0010                       PLC_SpeStage:	dc.w $10
0001E296 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E29A 0000                       		dc.w 0
0001E29C 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E2A0 0A20                       		dc.w $A20
0001E2A2 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E2A6 2840                       		dc.w $2840
0001E2A8 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E2AC 4760                       		dc.w $4760
0001E2AE 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E2B2 4A20                       		dc.w $4A20
0001E2B4 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E2B8 4C60                       		dc.w $4C60
0001E2BA 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E2BE 5E00                       		dc.w $5E00
0001E2C0 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E2C4 6E00                       		dc.w $6E00
0001E2C6 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E2CA 7E00                       		dc.w $7E00
0001E2CC 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E2D0 8E00                       		dc.w $8E00
0001E2D2 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E2D6 9E00                       		dc.w $9E00
0001E2D8 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E2DC AE00                       		dc.w $AE00
0001E2DE 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E2E2 BE00                       		dc.w $BE00
0001E2E4 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E2E8 EE00                       		dc.w $EE00
0001E2EA 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E2EE F2E0                       		dc.w $F2E0
0001E2F0 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E2F4 F400                       		dc.w $F400
0001E2F6 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E2FA F520                       		dc.w $F520
0001E2FC 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E300 F2E0                       		dc.w $F2E0
0001E302 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E306 F400                       		dc.w $F400
0001E308 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E30C F520                       		dc.w $F520
0001E30E                            ; ---------------------------------------------------------------------------
0001E30E                            ; Pattern load cues - GHZ animals
0001E30E                            ; ---------------------------------------------------------------------------
0001E30E 0001                       PLC_GHZAnimals:	dc.w 1
0001E310 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E314 B000                       		dc.w $B000
0001E316 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E31A B240                       		dc.w $B240
0001E31C                            ; ---------------------------------------------------------------------------
0001E31C                            ; Pattern load cues - LZ animals
0001E31C                            ; ---------------------------------------------------------------------------
0001E31C 0001                       PLC_LZAnimals:	dc.w 1
0001E31E 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E322 B000                       		dc.w $B000
0001E324 0000 0000                  		dc.l Nem_Seal		; seal
0001E328 B240                       		dc.w $B240
0001E32A                            ; ---------------------------------------------------------------------------
0001E32A                            ; Pattern load cues - MZ animals
0001E32A                            ; ---------------------------------------------------------------------------
0001E32A 0001                       PLC_MZAnimals:	dc.w 1
0001E32C 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E330 B000                       		dc.w $B000
0001E332 0000 0000                  		dc.l Nem_Seal		; seal
0001E336 B240                       		dc.w $B240
0001E338                            ; ---------------------------------------------------------------------------
0001E338                            ; Pattern load cues - SLZ animals
0001E338                            ; ---------------------------------------------------------------------------
0001E338 0001                       PLC_SLZAnimals:	dc.w 1
0001E33A 0000 0000                  		dc.l Nem_Pig		; pig
0001E33E B000                       		dc.w $B000
0001E340 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E344 B240                       		dc.w $B240
0001E346                            ; ---------------------------------------------------------------------------
0001E346                            ; Pattern load cues - SYZ animals
0001E346                            ; ---------------------------------------------------------------------------
0001E346 0001                       PLC_SYZAnimals:	dc.w 1
0001E348 0000 0000                  		dc.l Nem_Pig		; pig
0001E34C B000                       		dc.w $B000
0001E34E 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E352 B240                       		dc.w $B240
0001E354                            ; ---------------------------------------------------------------------------
0001E354                            ; Pattern load cues - SBZ animals
0001E354                            ; ---------------------------------------------------------------------------
0001E354 0001                       PLC_SBZAnimals:	dc.w 1
0001E356 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E35A B000                       		dc.w $B000
0001E35C 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E360 B240                       		dc.w $B240
0001E362                            ; ---------------------------------------------------------------------------
0001E362                            ; Pattern load cues - special stage results screen
0001E362                            ; ---------------------------------------------------------------------------
0001E362 0001                       PLC_SpeStResult:dc.w 1
0001E364 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E368 A820                       		dc.w $A820
0001E36A 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E36E AA20                       		dc.w $AA20
0001E370                            ; ---------------------------------------------------------------------------
0001E370                            ; Pattern load cues - ending sequence
0001E370                            ; ---------------------------------------------------------------------------
0001E370 000E                       PLC_Ending:	dc.w $E
0001E372 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E376 0000                       		dc.w 0
0001E378 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E37C 39A0                       		dc.w $39A0
0001E37E 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E382 6B00                       		dc.w $6B00
0001E384 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E388 7400                       		dc.w $7400
0001E38A 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E38E 78A0                       		dc.w $78A0
0001E390 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E394 7C20                       		dc.w $7C20
0001E396 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E39A A480                       		dc.w $A480
0001E39C 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E3A0 AA60                       		dc.w $AA60
0001E3A2 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E3A6 ACA0                       		dc.w $ACA0
0001E3A8 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E3AC AE60                       		dc.w $AE60
0001E3AE 0000 0000                  		dc.l Nem_Seal		; seal
0001E3B2 B0A0                       		dc.w $B0A0
0001E3B4 0000 0000                  		dc.l Nem_Pig		; pig
0001E3B8 B260                       		dc.w $B260
0001E3BA 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E3BE B4A0                       		dc.w $B4A0
0001E3C0 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E3C4 B660                       		dc.w $B660
0001E3C6 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E3CA B8A0                       		dc.w $B8A0
0001E3CC                            ; ---------------------------------------------------------------------------
0001E3CC                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E3CC                            ; ---------------------------------------------------------------------------
0001E3CC 0002                       PLC_TryAgain:	dc.w 2
0001E3CE 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E3D2 78A0                       		dc.w $78A0
0001E3D4 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E3D8 7C20                       		dc.w $7C20
0001E3DA 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E3DE B400                       		dc.w $B400
0001E3E0                            ; ---------------------------------------------------------------------------
0001E3E0                            ; Pattern load cues - Eggman on SBZ 2
0001E3E0                            ; ---------------------------------------------------------------------------
0001E3E0 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E3E2 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E3E6 A300                       		dc.w $A300
0001E3E8 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E3EC 8000                       		dc.w $8000
0001E3EE 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E3F2 9400                       		dc.w $9400
0001E3F4                            ; ---------------------------------------------------------------------------
0001E3F4                            ; Pattern load cues - final boss
0001E3F4                            ; ---------------------------------------------------------------------------
0001E3F4 0004                       PLC_FZBoss:	dc.w 4
0001E3F6 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E3FA 7400                       		dc.w $7400
0001E3FC 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E400 6000                       		dc.w $6000
0001E402 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E406 8000                       		dc.w $8000
0001E408 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E40C 8E00                       		dc.w $8E00
0001E40E 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E412 A540                       		dc.w $A540
0001E414                            ; ---------------------------------------------------------------------------
0001E414                            ; Pattern load cues - Teto boss
0001E414                            ; ---------------------------------------------------------------------------
0001E414 0002                       PLC_TetoBoss:	dc.w 2
0001E416 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E41A 8000                       		dc.w $8000
0001E41C 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E420 93A0                       		dc.w $93A0
0001E422 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E426 9000                       		dc.w $9000
0001E428                            		even
0001E428                            		even
0001E428                            
0001E428                            		incbin	misc\padding.bin
0001E516                            		even
0001E516                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E96C                            		even
0001E96C                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001EA04                            		even
0001EA04                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EB46                            		even
0001EB46                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EB94                            		even
0001EB94                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001ECA8                            		even
0001ECA8                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FB72                            		even
0001FB72                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023C78                            		even
00023C78                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023CAC                            		even
00023CAC                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023D6A                            		even
00023D6A                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024212                            		even
00024212                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00024270                            		even
00024270                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024E76                            		even
00024E76                            ; ---------------------------------------------------------------------------
00024E76                            ; Sprite mappings - Sonic
00024E76                            ; ---------------------------------------------------------------------------
00024E76                            Map_Sonic:
00024E76                            	include "_maps\Sonic.asm"
00024E76                            Map_81b4:
00024E76 0000                       Map_81b4_0: 	dc.w Map_81b4_B8-Map_81b4
00024E78 0000                       Map_81b4_2: 	dc.w Map_81b4_B9-Map_81b4
00024E7A 0000                       Map_81b4_4: 	dc.w Map_81b4_C4-Map_81b4
00024E7C 0000                       Map_81b4_6: 	dc.w Map_81b4_D4-Map_81b4
00024E7E 0000                       Map_81b4_8: 	dc.w Map_81b4_E4-Map_81b4
00024E80 0000                       Map_81b4_A: 	dc.w Map_81b4_F4-Map_81b4
00024E82 0000                       Map_81b4_C: 	dc.w Map_81b4_104-Map_81b4
00024E84 0000                       Map_81b4_E: 	dc.w Map_81b4_119-Map_81b4
00024E86 0000                       Map_81b4_10: 	dc.w Map_81b4_124-Map_81b4
00024E88 0000                       Map_81b4_12: 	dc.w Map_81b4_12F-Map_81b4
00024E8A 0000                       Map_81b4_14: 	dc.w Map_81b4_144-Map_81b4
00024E8C 0000                       Map_81b4_16: 	dc.w Map_81b4_14F-Map_81b4
00024E8E 0000                       Map_81b4_18: 	dc.w Map_81b4_15F-Map_81b4
00024E90 0000                       Map_81b4_1A: 	dc.w Map_81b4_179-Map_81b4
00024E92 0000                       Map_81b4_1C: 	dc.w Map_81b4_198-Map_81b4
00024E94 0000                       Map_81b4_1E: 	dc.w Map_81b4_1AD-Map_81b4
00024E96 0000                       Map_81b4_20: 	dc.w Map_81b4_1C7-Map_81b4
00024E98 0000                       Map_81b4_22: 	dc.w Map_81b4_1DC-Map_81b4
00024E9A 0000                       Map_81b4_24: 	dc.w Map_81b4_1F6-Map_81b4
00024E9C 0000                       Map_81b4_26: 	dc.w Map_81b4_20B-Map_81b4
00024E9E 0000                       Map_81b4_28: 	dc.w Map_81b4_216-Map_81b4
00024EA0 0000                       Map_81b4_2A: 	dc.w Map_81b4_221-Map_81b4
00024EA2 0000                       Map_81b4_2C: 	dc.w Map_81b4_236-Map_81b4
00024EA4 0000                       Map_81b4_2E: 	dc.w Map_81b4_241-Map_81b4
00024EA6 0000                       Map_81b4_30: 	dc.w Map_81b4_251-Map_81b4
00024EA8 0000                       Map_81b4_32: 	dc.w Map_81b4_270-Map_81b4
00024EAA 0000                       Map_81b4_34: 	dc.w Map_81b4_28F-Map_81b4
00024EAC 0000                       Map_81b4_36: 	dc.w Map_81b4_2A4-Map_81b4
00024EAE 0000                       Map_81b4_38: 	dc.w Map_81b4_2BE-Map_81b4
00024EB0 0000                       Map_81b4_3A: 	dc.w Map_81b4_2D3-Map_81b4
00024EB2 0000                       Map_81b4_3C: 	dc.w Map_81b4_2ED-Map_81b4
00024EB4 0000                       Map_81b4_3E: 	dc.w Map_81b4_2F8-Map_81b4
00024EB6 0000                       Map_81b4_40: 	dc.w Map_81b4_303-Map_81b4
00024EB8 0000                       Map_81b4_42: 	dc.w Map_81b4_30E-Map_81b4
00024EBA 0000                       Map_81b4_44: 	dc.w Map_81b4_319-Map_81b4
00024EBC 0000                       Map_81b4_46: 	dc.w Map_81b4_32E-Map_81b4
00024EBE 0000                       Map_81b4_48: 	dc.w Map_81b4_33E-Map_81b4
00024EC0 0000                       Map_81b4_4A: 	dc.w Map_81b4_353-Map_81b4
00024EC2 0000                       Map_81b4_4C: 	dc.w Map_81b4_363-Map_81b4
00024EC4 0000                       Map_81b4_4E: 	dc.w Map_81b4_36E-Map_81b4
00024EC6 0000                       Map_81b4_50: 	dc.w Map_81b4_379-Map_81b4
00024EC8 0000                       Map_81b4_52: 	dc.w Map_81b4_384-Map_81b4
00024ECA 0000                       Map_81b4_54: 	dc.w Map_81b4_38F-Map_81b4
00024ECC 0000                       Map_81b4_56: 	dc.w Map_81b4_3A4-Map_81b4
00024ECE 0000                       Map_81b4_58: 	dc.w Map_81b4_3AF-Map_81b4
00024ED0 0000                       Map_81b4_5A: 	dc.w Map_81b4_3C4-Map_81b4
00024ED2 0000                       Map_81b4_5C: 	dc.w Map_81b4_3CF-Map_81b4
00024ED4 0000                       Map_81b4_5E: 	dc.w Map_81b4_3D5-Map_81b4
00024ED6 0000                       Map_81b4_60: 	dc.w Map_81b4_3DB-Map_81b4
00024ED8 0000                       Map_81b4_62: 	dc.w Map_81b4_3E1-Map_81b4
00024EDA 0000                       Map_81b4_64: 	dc.w Map_81b4_3E7-Map_81b4
00024EDC 0000                       Map_81b4_66: 	dc.w Map_81b4_3ED-Map_81b4
00024EDE 0000                       Map_81b4_68: 	dc.w Map_81b4_3F8-Map_81b4
00024EE0 0000                       Map_81b4_6A: 	dc.w Map_81b4_3FE-Map_81b4
00024EE2 0000                       Map_81b4_6C: 	dc.w Map_81b4_409-Map_81b4
00024EE4 0000                       Map_81b4_6E: 	dc.w Map_81b4_40F-Map_81b4
00024EE6 0000                       Map_81b4_70: 	dc.w Map_81b4_41A-Map_81b4
00024EE8 0000                       Map_81b4_72: 	dc.w Map_81b4_42F-Map_81b4
00024EEA 0000                       Map_81b4_74: 	dc.w Map_81b4_44E-Map_81b4
00024EEC 0000                       Map_81b4_76: 	dc.w Map_81b4_459-Map_81b4
00024EEE 0000                       Map_81b4_78: 	dc.w Map_81b4_464-Map_81b4
00024EF0 0000                       Map_81b4_7A: 	dc.w Map_81b4_479-Map_81b4
00024EF2 0000                       Map_81b4_7C: 	dc.w Map_81b4_484-Map_81b4
00024EF4 0000                       Map_81b4_7E: 	dc.w Map_81b4_494-Map_81b4
00024EF6 0000                       Map_81b4_80: 	dc.w Map_81b4_4A9-Map_81b4
00024EF8 0000                       Map_81b4_82: 	dc.w Map_81b4_4B4-Map_81b4
00024EFA 0000                       Map_81b4_84: 	dc.w Map_81b4_4C9-Map_81b4
00024EFC 0000                       Map_81b4_86: 	dc.w Map_81b4_4DE-Map_81b4
00024EFE 0000                       Map_81b4_88: 	dc.w Map_81b4_4F8-Map_81b4
00024F00 0000                       Map_81b4_8A: 	dc.w Map_81b4_512-Map_81b4
00024F02 0000                       Map_81b4_8C: 	dc.w Map_81b4_51D-Map_81b4
00024F04 0000                       Map_81b4_8E: 	dc.w Map_81b4_52D-Map_81b4
00024F06 0000                       Map_81b4_90: 	dc.w Map_81b4_538-Map_81b4
00024F08 0000                       Map_81b4_92: 	dc.w Map_81b4_548-Map_81b4
00024F0A 0000                       Map_81b4_94: 	dc.w Map_81b4_553-Map_81b4
00024F0C 0000                       Map_81b4_96: 	dc.w Map_81b4_563-Map_81b4
00024F0E 0000                       Map_81b4_98: 	dc.w Map_81b4_573-Map_81b4
00024F10 0000                       Map_81b4_9A: 	dc.w Map_81b4_58D-Map_81b4
00024F12 0000                       Map_81b4_9C: 	dc.w Map_81b4_5A7-Map_81b4
00024F14 0000                       Map_81b4_9E: 	dc.w Map_81b4_5B2-Map_81b4
00024F16 0000                       Map_81b4_A0: 	dc.w Map_81b4_5C2-Map_81b4
00024F18 0000                       Map_81b4_A2: 	dc.w Map_81b4_5C8-Map_81b4
00024F1A 0000                       Map_81b4_A4: 	dc.w Map_81b4_5CE-Map_81b4
00024F1C 0000                       Map_81b4_A6: 	dc.w Map_81b4_5D4-Map_81b4
00024F1E 0000                       Map_81b4_A8: 	dc.w Map_81b4_5E9-Map_81b4
00024F20 0000                       Map_81b4_AA: 	dc.w Map_81b4_5F9-Map_81b4
00024F22 0000                       Map_81b4_AC: 	dc.w Map_81b4_609-Map_81b4
00024F24 0000                       Map_81b4_AE: 	dc.w Map_81b4_619-Map_81b4
00024F26 0000                       Map_81b4_B0: 	dc.w Map_81b4_624-Map_81b4
00024F28 0000                       Map_81b4_B2: 	dc.w Map_81b4_62F-Map_81b4
00024F2A 0000                       Map_81b4_B4: 	dc.w Map_81b4_63F-Map_81b4
00024F2C 0000                       Map_81b4_B6: 	dc.w Map_81b4_64A-Map_81b4
00024F2E 00                         Map_81b4_B8: 	dc.b $0
00024F2F 02                         Map_81b4_B9: 	dc.b $2
00024F30 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024F35 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024F3A 03                         Map_81b4_C4: 	dc.b $3
00024F3B EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024F40 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024F45 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F4A 03                         Map_81b4_D4: 	dc.b $3
00024F4B EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024F50 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024F55 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F5A 03                         Map_81b4_E4: 	dc.b $3
00024F5B EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024F60 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024F65 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F6A 03                         Map_81b4_F4: 	dc.b $3
00024F6B EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024F70 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00024F75 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F7A 04                         Map_81b4_104: 	dc.b $4
00024F7B EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00024F80 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00024F85 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00024F8A 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00024F8F 02                         Map_81b4_119: 	dc.b $2
00024F90 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00024F95 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00024F9A 02                         Map_81b4_124: 	dc.b $2
00024F9B ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00024FA0 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00024FA5 04                         Map_81b4_12F: 	dc.b $4
00024FA6 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024FAB FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00024FB0 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00024FB5 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00024FBA 02                         Map_81b4_144: 	dc.b $2
00024FBB FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00024FC0 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00024FC5 03                         Map_81b4_14F: 	dc.b $3
00024FC6 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00024FCB FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00024FD0 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00024FD5 05                         Map_81b4_15F: 	dc.b $5
00024FD6 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024FDB EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00024FE0 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00024FE5 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00024FEA 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00024FEF 06                         Map_81b4_179: 	dc.b $6
00024FF0 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024FF5 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024FFA FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00024FFF 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00025004 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00025009 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
0002500E 04                         Map_81b4_198: 	dc.b $4
0002500F ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00025014 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00025019 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
0002501E 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00025023 05                         Map_81b4_1AD: 	dc.b $5
00025024 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025029 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
0002502E FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00025033 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00025038 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
0002503D 04                         Map_81b4_1C7: 	dc.b $4
0002503E EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00025043 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025048 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
0002504D 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00025052 05                         Map_81b4_1DC: 	dc.b $5
00025053 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00025058 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
0002505D FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00025062 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00025067 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
0002506C 04                         Map_81b4_1F6: 	dc.b $4
0002506D F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00025072 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00025077 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
0002507C 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00025081 02                         Map_81b4_20B: 	dc.b $2
00025082 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00025087 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
0002508C 02                         Map_81b4_216: 	dc.b $2
0002508D F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00025092 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00025097 04                         Map_81b4_221: 	dc.b $4
00025098 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
0002509D EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
000250A2 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
000250A7 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
000250AC 02                         Map_81b4_236: 	dc.b $2
000250AD F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
000250B2 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
000250B7 03                         Map_81b4_241: 	dc.b $3
000250B8 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
000250BD EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
000250C2 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
000250C7 06                         Map_81b4_251: 	dc.b $6
000250C8 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000250CD ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
000250D2 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
000250D7 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
000250DC 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
000250E1 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
000250E6 06                         Map_81b4_270: 	dc.b $6
000250E7 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000250EC E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
000250F1 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
000250F6 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
000250FB F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00025100 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00025105 04                         Map_81b4_28F: 	dc.b $4
00025106 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
0002510B F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00025110 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00025115 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
0002511A 05                         Map_81b4_2A4: 	dc.b $5
0002511B FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00025120 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00025125 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
0002512A F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
0002512F 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00025134 04                         Map_81b4_2BE: 	dc.b $4
00025135 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
0002513A F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
0002513F EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00025144 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00025149 05                         Map_81b4_2D3: 	dc.b $5
0002514A FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
0002514F EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00025154 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00025159 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
0002515E 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00025163 02                         Map_81b4_2ED: 	dc.b $2
00025164 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025169 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002516E 02                         Map_81b4_2F8: 	dc.b $2
0002516F EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025174 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025179 02                         Map_81b4_303: 	dc.b $2
0002517A EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002517F FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025184 02                         Map_81b4_30E: 	dc.b $2
00025185 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002518A FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002518F 04                         Map_81b4_319: 	dc.b $4
00025190 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025195 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002519A FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002519F FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000251A4 03                         Map_81b4_32E: 	dc.b $3
000251A5 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000251AA EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000251AF FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000251B4 04                         Map_81b4_33E: 	dc.b $4
000251B5 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000251BA EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000251BF FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000251C4 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000251C9 03                         Map_81b4_353: 	dc.b $3
000251CA EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000251CF EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000251D4 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000251D9 02                         Map_81b4_363: 	dc.b $2
000251DA F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000251DF F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000251E4 02                         Map_81b4_36E: 	dc.b $2
000251E5 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000251EA F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000251EF 02                         Map_81b4_379: 	dc.b $2
000251F0 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000251F5 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000251FA 02                         Map_81b4_384: 	dc.b $2
000251FB F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025200 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025205 04                         Map_81b4_38F: 	dc.b $4
00025206 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
0002520B F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00025210 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025215 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
0002521A 02                         Map_81b4_3A4: 	dc.b $2
0002521B F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00025220 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025225 04                         Map_81b4_3AF: 	dc.b $4
00025226 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
0002522B F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00025230 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025235 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
0002523A 02                         Map_81b4_3C4: 	dc.b $2
0002523B F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00025240 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025245 01                         Map_81b4_3CF: 	dc.b $1
00025246 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002524B 01                         Map_81b4_3D5: 	dc.b $1
0002524C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025251 01                         Map_81b4_3DB: 	dc.b $1
00025252 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025257 01                         Map_81b4_3E1: 	dc.b $1
00025258 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002525D 01                         Map_81b4_3E7: 	dc.b $1
0002525E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025263 02                         Map_81b4_3ED: 	dc.b $2
00025264 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00025269 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
0002526E 01                         Map_81b4_3F8: 	dc.b $1
0002526F F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025274 02                         Map_81b4_3FE: 	dc.b $2
00025275 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
0002527A 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
0002527F 01                         Map_81b4_409: 	dc.b $1
00025280 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025285 02                         Map_81b4_40F: 	dc.b $2
00025286 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
0002528B FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00025290 04                         Map_81b4_41A: 	dc.b $4
00025291 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00025296 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
0002529B 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000252A0 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000252A5 06                         Map_81b4_42F: 	dc.b $6
000252A6 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
000252AB FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
000252B0 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
000252B5 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
000252BA FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
000252BF F400 0011 04               	dc.b $F4, $0, $0, $11, $4
000252C4 02                         Map_81b4_44E: 	dc.b $2
000252C5 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
000252CA EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
000252CF 02                         Map_81b4_459: 	dc.b $2
000252D0 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
000252D5 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
000252DA 04                         Map_81b4_464: 	dc.b $4
000252DB F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000252E0 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
000252E5 0408 000C 03               	dc.b $4, $8, $0, $C, $3
000252EA 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
000252EF 02                         Map_81b4_479: 	dc.b $2
000252F0 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
000252F5 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
000252FA 03                         Map_81b4_484: 	dc.b $3
000252FB F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
00025300 FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00025305 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
0002530A 04                         Map_81b4_494: 	dc.b $4
0002530B F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025310 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025315 0408 000C 02               	dc.b $4, $8, $0, $C, $2
0002531A 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002531F 02                         Map_81b4_4A9: 	dc.b $2
00025320 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00025325 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
0002532A 04                         Map_81b4_4B4: 	dc.b $4
0002532B F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025330 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025335 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002533A F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002533F 04                         Map_81b4_4C9: 	dc.b $4
00025340 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025345 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002534A F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002534F F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025354 05                         Map_81b4_4DE: 	dc.b $5
00025355 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
0002535A F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
0002535F 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025364 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025369 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002536E 05                         Map_81b4_4F8: 	dc.b $5
0002536F E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025374 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00025379 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002537E 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025383 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00025388 02                         Map_81b4_512: 	dc.b $2
00025389 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002538E 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00025393 03                         Map_81b4_51D: 	dc.b $3
00025394 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025399 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002539E 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000253A3 02                         Map_81b4_52D: 	dc.b $2
000253A4 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000253A9 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000253AE 03                         Map_81b4_538: 	dc.b $3
000253AF EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000253B4 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000253B9 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000253BE 02                         Map_81b4_548: 	dc.b $2
000253BF EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000253C4 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
000253C9 03                         Map_81b4_553: 	dc.b $3
000253CA EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000253CF 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
000253D4 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
000253D9 03                         Map_81b4_563: 	dc.b $3
000253DA E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000253DF E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000253E4 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
000253E9 05                         Map_81b4_573: 	dc.b $5
000253EA E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000253EF E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000253F4 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000253F9 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000253FE 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025403 05                         Map_81b4_58D: 	dc.b $5
00025404 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025409 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002540E F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025413 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025418 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002541D 02                         Map_81b4_5A7: 	dc.b $2
0002541E EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025423 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025428 03                         Map_81b4_5B2: 	dc.b $3
00025429 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002542E F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00025433 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00025438 01                         Map_81b4_5C2: 	dc.b $1
00025439 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
0002543E 01                         Map_81b4_5C8: 	dc.b $1
0002543F F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00025444 01                         Map_81b4_5CE: 	dc.b $1
00025445 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
0002544A 04                         Map_81b4_5D4: 	dc.b $4
0002544B F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
00025450 F705 0808 04               	dc.b $F7, $5, $8, $8, $4
00025455 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
0002545A 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
0002545F 03                         Map_81b4_5E9: 	dc.b $3
00025460 F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00025465 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
0002546A 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
0002546F 03                         Map_81b4_5F9: 	dc.b $3
00025470 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00025475 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0002547A 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
0002547F 03                         Map_81b4_609: 	dc.b $3
00025480 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025485 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
0002548A 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
0002548F 02                         Map_81b4_619: 	dc.b $2
00025490 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00025495 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
0002549A 02                         Map_81b4_624: 	dc.b $2
0002549B F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000254A0 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000254A5 03                         Map_81b4_62F: 	dc.b $3
000254A6 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
000254AB 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
000254B0 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
000254B5 02                         Map_81b4_63F: 	dc.b $2
000254B6 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
000254BB EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
000254C0 04                         Map_81b4_64A: 	dc.b $4
000254C1 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
000254C6 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
000254CB F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
000254D0 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
000254D6 00                         	even
000254D6 00                         	even
000254D6                            
000254D6                            ; ---------------------------------------------------------------------------
000254D6                            ; Uncompressed graphics	loading	array for Sonic
000254D6                            ; ---------------------------------------------------------------------------
000254D6                            SonicDynPLC:
000254D6                            	include "_inc\Sonic dynamic pattern load cues.asm"
000254D6                            DPLC_b4ca:
000254D6 0000                       DPLC_b4ca_0: 	dc.w DPLC_b4ca_B8-DPLC_b4ca
000254D8 0000                       DPLC_b4ca_2: 	dc.w DPLC_b4ca_B9-DPLC_b4ca
000254DA 0000                       DPLC_b4ca_4: 	dc.w DPLC_b4ca_BE-DPLC_b4ca
000254DC 0000                       DPLC_b4ca_6: 	dc.w DPLC_b4ca_C5-DPLC_b4ca
000254DE 0000                       DPLC_b4ca_8: 	dc.w DPLC_b4ca_CC-DPLC_b4ca
000254E0 0000                       DPLC_b4ca_A: 	dc.w DPLC_b4ca_D3-DPLC_b4ca
000254E2 0000                       DPLC_b4ca_C: 	dc.w DPLC_b4ca_DA-DPLC_b4ca
000254E4 0000                       DPLC_b4ca_E: 	dc.w DPLC_b4ca_E3-DPLC_b4ca
000254E6 0000                       DPLC_b4ca_10: 	dc.w DPLC_b4ca_E8-DPLC_b4ca
000254E8 0000                       DPLC_b4ca_12: 	dc.w DPLC_b4ca_ED-DPLC_b4ca
000254EA 0000                       DPLC_b4ca_14: 	dc.w DPLC_b4ca_F6-DPLC_b4ca
000254EC 0000                       DPLC_b4ca_16: 	dc.w DPLC_b4ca_FB-DPLC_b4ca
000254EE 0000                       DPLC_b4ca_18: 	dc.w DPLC_b4ca_102-DPLC_b4ca
000254F0 0000                       DPLC_b4ca_1A: 	dc.w DPLC_b4ca_10D-DPLC_b4ca
000254F2 0000                       DPLC_b4ca_1C: 	dc.w DPLC_b4ca_11A-DPLC_b4ca
000254F4 0000                       DPLC_b4ca_1E: 	dc.w DPLC_b4ca_123-DPLC_b4ca
000254F6 0000                       DPLC_b4ca_20: 	dc.w DPLC_b4ca_12E-DPLC_b4ca
000254F8 0000                       DPLC_b4ca_22: 	dc.w DPLC_b4ca_137-DPLC_b4ca
000254FA 0000                       DPLC_b4ca_24: 	dc.w DPLC_b4ca_142-DPLC_b4ca
000254FC 0000                       DPLC_b4ca_26: 	dc.w DPLC_b4ca_14B-DPLC_b4ca
000254FE 0000                       DPLC_b4ca_28: 	dc.w DPLC_b4ca_150-DPLC_b4ca
00025500 0000                       DPLC_b4ca_2A: 	dc.w DPLC_b4ca_155-DPLC_b4ca
00025502 0000                       DPLC_b4ca_2C: 	dc.w DPLC_b4ca_15E-DPLC_b4ca
00025504 0000                       DPLC_b4ca_2E: 	dc.w DPLC_b4ca_163-DPLC_b4ca
00025506 0000                       DPLC_b4ca_30: 	dc.w DPLC_b4ca_16A-DPLC_b4ca
00025508 0000                       DPLC_b4ca_32: 	dc.w DPLC_b4ca_177-DPLC_b4ca
0002550A 0000                       DPLC_b4ca_34: 	dc.w DPLC_b4ca_184-DPLC_b4ca
0002550C 0000                       DPLC_b4ca_36: 	dc.w DPLC_b4ca_18D-DPLC_b4ca
0002550E 0000                       DPLC_b4ca_38: 	dc.w DPLC_b4ca_198-DPLC_b4ca
00025510 0000                       DPLC_b4ca_3A: 	dc.w DPLC_b4ca_1A1-DPLC_b4ca
00025512 0000                       DPLC_b4ca_3C: 	dc.w DPLC_b4ca_1AC-DPLC_b4ca
00025514 0000                       DPLC_b4ca_3E: 	dc.w DPLC_b4ca_1B1-DPLC_b4ca
00025516 0000                       DPLC_b4ca_40: 	dc.w DPLC_b4ca_1B6-DPLC_b4ca
00025518 0000                       DPLC_b4ca_42: 	dc.w DPLC_b4ca_1BB-DPLC_b4ca
0002551A 0000                       DPLC_b4ca_44: 	dc.w DPLC_b4ca_1C0-DPLC_b4ca
0002551C 0000                       DPLC_b4ca_46: 	dc.w DPLC_b4ca_1C9-DPLC_b4ca
0002551E 0000                       DPLC_b4ca_48: 	dc.w DPLC_b4ca_1D0-DPLC_b4ca
00025520 0000                       DPLC_b4ca_4A: 	dc.w DPLC_b4ca_1D9-DPLC_b4ca
00025522 0000                       DPLC_b4ca_4C: 	dc.w DPLC_b4ca_1E0-DPLC_b4ca
00025524 0000                       DPLC_b4ca_4E: 	dc.w DPLC_b4ca_1E5-DPLC_b4ca
00025526 0000                       DPLC_b4ca_50: 	dc.w DPLC_b4ca_1EA-DPLC_b4ca
00025528 0000                       DPLC_b4ca_52: 	dc.w DPLC_b4ca_1EF-DPLC_b4ca
0002552A 0000                       DPLC_b4ca_54: 	dc.w DPLC_b4ca_1F4-DPLC_b4ca
0002552C 0000                       DPLC_b4ca_56: 	dc.w DPLC_b4ca_1FD-DPLC_b4ca
0002552E 0000                       DPLC_b4ca_58: 	dc.w DPLC_b4ca_202-DPLC_b4ca
00025530 0000                       DPLC_b4ca_5A: 	dc.w DPLC_b4ca_20B-DPLC_b4ca
00025532 0000                       DPLC_b4ca_5C: 	dc.w DPLC_b4ca_210-DPLC_b4ca
00025534 0000                       DPLC_b4ca_5E: 	dc.w DPLC_b4ca_213-DPLC_b4ca
00025536 0000                       DPLC_b4ca_60: 	dc.w DPLC_b4ca_216-DPLC_b4ca
00025538 0000                       DPLC_b4ca_62: 	dc.w DPLC_b4ca_219-DPLC_b4ca
0002553A 0000                       DPLC_b4ca_64: 	dc.w DPLC_b4ca_21C-DPLC_b4ca
0002553C 0000                       DPLC_b4ca_66: 	dc.w DPLC_b4ca_21F-DPLC_b4ca
0002553E 0000                       DPLC_b4ca_68: 	dc.w DPLC_b4ca_224-DPLC_b4ca
00025540 0000                       DPLC_b4ca_6A: 	dc.w DPLC_b4ca_227-DPLC_b4ca
00025542 0000                       DPLC_b4ca_6C: 	dc.w DPLC_b4ca_22C-DPLC_b4ca
00025544 0000                       DPLC_b4ca_6E: 	dc.w DPLC_b4ca_22F-DPLC_b4ca
00025546 0000                       DPLC_b4ca_70: 	dc.w DPLC_b4ca_234-DPLC_b4ca
00025548 0000                       DPLC_b4ca_72: 	dc.w DPLC_b4ca_23D-DPLC_b4ca
0002554A 0000                       DPLC_b4ca_74: 	dc.w DPLC_b4ca_242-DPLC_b4ca
0002554C 0000                       DPLC_b4ca_76: 	dc.w DPLC_b4ca_247-DPLC_b4ca
0002554E 0000                       DPLC_b4ca_78: 	dc.w DPLC_b4ca_24C-DPLC_b4ca
00025550 0000                       DPLC_b4ca_7A: 	dc.w DPLC_b4ca_251-DPLC_b4ca
00025552 0000                       DPLC_b4ca_7C: 	dc.w DPLC_b4ca_254-DPLC_b4ca
00025554 0000                       DPLC_b4ca_7E: 	dc.w DPLC_b4ca_25B-DPLC_b4ca
00025556 0000                       DPLC_b4ca_80: 	dc.w DPLC_b4ca_260-DPLC_b4ca
00025558 0000                       DPLC_b4ca_82: 	dc.w DPLC_b4ca_263-DPLC_b4ca
0002555A 0000                       DPLC_b4ca_84: 	dc.w DPLC_b4ca_26C-DPLC_b4ca
0002555C 0000                       DPLC_b4ca_86: 	dc.w DPLC_b4ca_275-DPLC_b4ca
0002555E 0000                       DPLC_b4ca_88: 	dc.w DPLC_b4ca_280-DPLC_b4ca
00025560 0000                       DPLC_b4ca_8A: 	dc.w DPLC_b4ca_28B-DPLC_b4ca
00025562 0000                       DPLC_b4ca_8C: 	dc.w DPLC_b4ca_290-DPLC_b4ca
00025564 0000                       DPLC_b4ca_8E: 	dc.w DPLC_b4ca_297-DPLC_b4ca
00025566 0000                       DPLC_b4ca_90: 	dc.w DPLC_b4ca_29C-DPLC_b4ca
00025568 0000                       DPLC_b4ca_92: 	dc.w DPLC_b4ca_2A3-DPLC_b4ca
0002556A 0000                       DPLC_b4ca_94: 	dc.w DPLC_b4ca_2A8-DPLC_b4ca
0002556C 0000                       DPLC_b4ca_96: 	dc.w DPLC_b4ca_2AF-DPLC_b4ca
0002556E 0000                       DPLC_b4ca_98: 	dc.w DPLC_b4ca_2B6-DPLC_b4ca
00025570 0000                       DPLC_b4ca_9A: 	dc.w DPLC_b4ca_2C1-DPLC_b4ca
00025572 0000                       DPLC_b4ca_9C: 	dc.w DPLC_b4ca_2CC-DPLC_b4ca
00025574 0000                       DPLC_b4ca_9E: 	dc.w DPLC_b4ca_2D1-DPLC_b4ca
00025576 0000                       DPLC_b4ca_A0: 	dc.w DPLC_b4ca_2D8-DPLC_b4ca
00025578 0000                       DPLC_b4ca_A2: 	dc.w DPLC_b4ca_2DB-DPLC_b4ca
0002557A 0000                       DPLC_b4ca_A4: 	dc.w DPLC_b4ca_2DE-DPLC_b4ca
0002557C 0000                       DPLC_b4ca_A6: 	dc.w DPLC_b4ca_2E1-DPLC_b4ca
0002557E 0000                       DPLC_b4ca_A8: 	dc.w DPLC_b4ca_2E6-DPLC_b4ca
00025580 0000                       DPLC_b4ca_AA: 	dc.w DPLC_b4ca_2ED-DPLC_b4ca
00025582 0000                       DPLC_b4ca_AC: 	dc.w DPLC_b4ca_2F4-DPLC_b4ca
00025584 0000                       DPLC_b4ca_AE: 	dc.w DPLC_b4ca_2FB-DPLC_b4ca
00025586 0000                       DPLC_b4ca_B0: 	dc.w DPLC_b4ca_300-DPLC_b4ca
00025588 0000                       DPLC_b4ca_B2: 	dc.w DPLC_b4ca_305-DPLC_b4ca
0002558A 0000                       DPLC_b4ca_B4: 	dc.w DPLC_b4ca_30A-DPLC_b4ca
0002558C 0000                       DPLC_b4ca_B6: 	dc.w DPLC_b4ca_30F-DPLC_b4ca
0002558E 00                         DPLC_b4ca_B8: 	dc.b $0
0002558F 02                         DPLC_b4ca_B9: 	dc.b $2
00025590 F000                       	dc.b $F0, $0
00025592 1010                       	dc.b $10, $10
00025594 03                         DPLC_b4ca_BE: 	dc.b $3
00025595 5012                       	dc.b $50, $12
00025597 5018                       	dc.b $50, $18
00025599 201E                       	dc.b $20, $1E
0002559B 03                         DPLC_b4ca_C5: 	dc.b $3
0002559C 5021                       	dc.b $50, $21
0002559E 5018                       	dc.b $50, $18
000255A0 201E                       	dc.b $20, $1E
000255A2 03                         DPLC_b4ca_CC: 	dc.b $3
000255A3 5021                       	dc.b $50, $21
000255A5 5018                       	dc.b $50, $18
000255A7 2027                       	dc.b $20, $27
000255A9 03                         DPLC_b4ca_D3: 	dc.b $3
000255AA 802A                       	dc.b $80, $2A
000255AC 2033                       	dc.b $20, $33
000255AE 2036                       	dc.b $20, $36
000255B0 04                         DPLC_b4ca_DA: 	dc.b $4
000255B1 7039                       	dc.b $70, $39
000255B3 5041                       	dc.b $50, $41
000255B5 5047                       	dc.b $50, $47
000255B7 104D                       	dc.b $10, $4D
000255B9 02                         DPLC_b4ca_E3: 	dc.b $2
000255BA 7039                       	dc.b $70, $39
000255BC B04F                       	dc.b $B0, $4F
000255BE 02                         DPLC_b4ca_E8: 	dc.b $2
000255BF 505B                       	dc.b $50, $5B
000255C1 8061                       	dc.b $80, $61
000255C3 04                         DPLC_b4ca_ED: 	dc.b $4
000255C4 505B                       	dc.b $50, $5B
000255C6 506A                       	dc.b $50, $6A
000255C8 5070                       	dc.b $50, $70
000255CA 1076                       	dc.b $10, $76
000255CC 02                         DPLC_b4ca_F6: 	dc.b $2
000255CD F4F0                       	dc.b $F4, $F0
000255CF 1500                       	dc.b $15, $0
000255D1 03                         DPLC_b4ca_FB: 	dc.b $3
000255D2 7039                       	dc.b $70, $39
000255D4 3078                       	dc.b $30, $78
000255D6 507C                       	dc.b $50, $7C
000255D8 05                         DPLC_b4ca_102: 	dc.b $5
000255D9 5082                       	dc.b $50, $82
000255DB 5088                       	dc.b $50, $88
000255DD 208E                       	dc.b $20, $8E
000255DF 5091                       	dc.b $50, $91
000255E1 0097                       	dc.b $0, $97
000255E3 06                         DPLC_b4ca_10D: 	dc.b $6
000255E4 5082                       	dc.b $50, $82
000255E6 1098                       	dc.b $10, $98
000255E8 309A                       	dc.b $30, $9A
000255EA 509E                       	dc.b $50, $9E
000255EC 30A4                       	dc.b $30, $A4
000255EE 00A8                       	dc.b $0, $A8
000255F0 04                         DPLC_b4ca_11A: 	dc.b $4
000255F1 50A9                       	dc.b $50, $A9
000255F3 10AF                       	dc.b $10, $AF
000255F5 70B1                       	dc.b $70, $B1
000255F7 20B9                       	dc.b $20, $B9
000255F9 05                         DPLC_b4ca_123: 	dc.b $5
000255FA 50BC                       	dc.b $50, $BC
000255FC 30C2                       	dc.b $30, $C2
000255FE 70C6                       	dc.b $70, $C6
00025600 20CE                       	dc.b $20, $CE
00025602 10D1                       	dc.b $10, $D1
00025604 04                         DPLC_b4ca_12E: 	dc.b $4
00025605 50BC                       	dc.b $50, $BC
00025607 10D3                       	dc.b $10, $D3
00025609 70D5                       	dc.b $70, $D5
0002560B 20DD                       	dc.b $20, $DD
0002560D 05                         DPLC_b4ca_137: 	dc.b $5
0002560E 5082                       	dc.b $50, $82
00025610 1098                       	dc.b $10, $98
00025612 008E                       	dc.b $0, $8E
00025614 70E0                       	dc.b $70, $E0
00025616 20E8                       	dc.b $20, $E8
00025618 04                         DPLC_b4ca_142: 	dc.b $4
00025619 70EB                       	dc.b $70, $EB
0002561B 50F3                       	dc.b $50, $F3
0002561D 10F9                       	dc.b $10, $F9
0002561F 50FB                       	dc.b $50, $FB
00025621 02                         DPLC_b4ca_14B: 	dc.b $2
00025622 70EB                       	dc.b $70, $EB
00025624 B101                       	dc.b $B1, $1
00025626 02                         DPLC_b4ca_150: 	dc.b $2
00025627 510D                       	dc.b $51, $D
00025629 8113                       	dc.b $81, $13
0002562B 04                         DPLC_b4ca_155: 	dc.b $4
0002562C 510D                       	dc.b $51, $D
0002562E 511C                       	dc.b $51, $1C
00025630 1122                       	dc.b $11, $22
00025632 5124                       	dc.b $51, $24
00025634 02                         DPLC_b4ca_15E: 	dc.b $2
00025635 510D                       	dc.b $51, $D
00025637 B12A                       	dc.b $B1, $2A
00025639 03                         DPLC_b4ca_163: 	dc.b $3
0002563A 70EB                       	dc.b $70, $EB
0002563C 0101                       	dc.b $1, $1
0002563E 8136                       	dc.b $81, $36
00025640 06                         DPLC_b4ca_16A: 	dc.b $6
00025641 513F                       	dc.b $51, $3F
00025643 1145                       	dc.b $11, $45
00025645 1147                       	dc.b $11, $47
00025647 8149                       	dc.b $81, $49
00025649 0152                       	dc.b $1, $52
0002564B 0153                       	dc.b $1, $53
0002564D 06                         DPLC_b4ca_177: 	dc.b $6
0002564E 513F                       	dc.b $51, $3F
00025650 2154                       	dc.b $21, $54
00025652 1157                       	dc.b $11, $57
00025654 1159                       	dc.b $11, $59
00025656 815B                       	dc.b $81, $5B
00025658 0152                       	dc.b $1, $52
0002565A 04                         DPLC_b4ca_184: 	dc.b $4
0002565B 5164                       	dc.b $51, $64
0002565D 116A                       	dc.b $11, $6A
0002565F 816C                       	dc.b $81, $6C
00025661 1175                       	dc.b $11, $75
00025663 05                         DPLC_b4ca_18D: 	dc.b $5
00025664 5177                       	dc.b $51, $77
00025666 217D                       	dc.b $21, $7D
00025668 1180                       	dc.b $11, $80
0002566A 7182                       	dc.b $71, $82
0002566C 218A                       	dc.b $21, $8A
0002566E 04                         DPLC_b4ca_198: 	dc.b $4
0002566F 5177                       	dc.b $51, $77
00025671 118D                       	dc.b $11, $8D
00025673 818F                       	dc.b $81, $8F
00025675 1198                       	dc.b $11, $98
00025677 05                         DPLC_b4ca_1A1: 	dc.b $5
00025678 513F                       	dc.b $51, $3F
0002567A 819A                       	dc.b $81, $9A
0002567C 1159                       	dc.b $11, $59
0002567E 11A3                       	dc.b $11, $A3
00025680 0152                       	dc.b $1, $52
00025682 02                         DPLC_b4ca_1AC: 	dc.b $2
00025683 51A5                       	dc.b $51, $A5
00025685 B1AB                       	dc.b $B1, $AB
00025687 02                         DPLC_b4ca_1B1: 	dc.b $2
00025688 505B                       	dc.b $50, $5B
0002568A B1B7                       	dc.b $B1, $B7
0002568C 02                         DPLC_b4ca_1B6: 	dc.b $2
0002568D 51A5                       	dc.b $51, $A5
0002568F B1C3                       	dc.b $B1, $C3
00025691 02                         DPLC_b4ca_1BB: 	dc.b $2
00025692 505B                       	dc.b $50, $5B
00025694 B1CF                       	dc.b $B1, $CF
00025696 04                         DPLC_b4ca_1C0: 	dc.b $4
00025697 51DB                       	dc.b $51, $DB
00025699 11E1                       	dc.b $11, $E1
0002569B B1E3                       	dc.b $B1, $E3
0002569D 01EF                       	dc.b $1, $EF
0002569F 03                         DPLC_b4ca_1C9: 	dc.b $3
000256A0 51F0                       	dc.b $51, $F0
000256A2 11F6                       	dc.b $11, $F6
000256A4 B1F8                       	dc.b $B1, $F8
000256A6 04                         DPLC_b4ca_1D0: 	dc.b $4
000256A7 51DB                       	dc.b $51, $DB
000256A9 1204                       	dc.b $12, $4
000256AB B206                       	dc.b $B2, $6
000256AD 01EF                       	dc.b $1, $EF
000256AF 03                         DPLC_b4ca_1D9: 	dc.b $3
000256B0 51F0                       	dc.b $51, $F0
000256B2 11F6                       	dc.b $11, $F6
000256B4 B212                       	dc.b $B2, $12
000256B6 02                         DPLC_b4ca_1E0: 	dc.b $2
000256B7 521E                       	dc.b $52, $1E
000256B9 B224                       	dc.b $B2, $24
000256BB 02                         DPLC_b4ca_1E5: 	dc.b $2
000256BC 510D                       	dc.b $51, $D
000256BE B230                       	dc.b $B2, $30
000256C0 02                         DPLC_b4ca_1EA: 	dc.b $2
000256C1 521E                       	dc.b $52, $1E
000256C3 B23C                       	dc.b $B2, $3C
000256C5 02                         DPLC_b4ca_1EF: 	dc.b $2
000256C6 510D                       	dc.b $51, $D
000256C8 B248                       	dc.b $B2, $48
000256CA 04                         DPLC_b4ca_1F4: 	dc.b $4
000256CB 5254                       	dc.b $52, $54
000256CD 125A                       	dc.b $12, $5A
000256CF B25C                       	dc.b $B2, $5C
000256D1 0268                       	dc.b $2, $68
000256D3 02                         DPLC_b4ca_1FD: 	dc.b $2
000256D4 7269                       	dc.b $72, $69
000256D6 B271                       	dc.b $B2, $71
000256D8 04                         DPLC_b4ca_202: 	dc.b $4
000256D9 5254                       	dc.b $52, $54
000256DB 127D                       	dc.b $12, $7D
000256DD B27F                       	dc.b $B2, $7F
000256DF 0268                       	dc.b $2, $68
000256E1 02                         DPLC_b4ca_20B: 	dc.b $2
000256E2 7269                       	dc.b $72, $69
000256E4 B28B                       	dc.b $B2, $8B
000256E6 01                         DPLC_b4ca_210: 	dc.b $1
000256E7 F297                       	dc.b $F2, $97
000256E9 01                         DPLC_b4ca_213: 	dc.b $1
000256EA F2A7                       	dc.b $F2, $A7
000256EC 01                         DPLC_b4ca_216: 	dc.b $1
000256ED F2B7                       	dc.b $F2, $B7
000256EF 01                         DPLC_b4ca_219: 	dc.b $1
000256F0 F2C7                       	dc.b $F2, $C7
000256F2 01                         DPLC_b4ca_21C: 	dc.b $1
000256F3 F2D7                       	dc.b $F2, $D7
000256F5 02                         DPLC_b4ca_21F: 	dc.b $2
000256F6 B2E7                       	dc.b $B2, $E7
000256F8 22F3                       	dc.b $22, $F3
000256FA 01                         DPLC_b4ca_224: 	dc.b $1
000256FB F2F6                       	dc.b $F2, $F6
000256FD 02                         DPLC_b4ca_227: 	dc.b $2
000256FE B306                       	dc.b $B3, $6
00025700 2312                       	dc.b $23, $12
00025702 01                         DPLC_b4ca_22C: 	dc.b $1
00025703 F315                       	dc.b $F3, $15
00025705 02                         DPLC_b4ca_22F: 	dc.b $2
00025706 5325                       	dc.b $53, $25
00025708 B32B                       	dc.b $B3, $2B
0002570A 04                         DPLC_b4ca_234: 	dc.b $4
0002570B 5337                       	dc.b $53, $37
0002570D 733D                       	dc.b $73, $3D
0002570F 1345                       	dc.b $13, $45
00025711 0347                       	dc.b $3, $47
00025713 02                         DPLC_b4ca_23D: 	dc.b $2
00025714 D348                       	dc.b $D3, $48
00025716 34EC                       	dc.b $34, $EC
00025718 02                         DPLC_b4ca_242: 	dc.b $2
00025719 F528                       	dc.b $F5, $28
0002571B 0538                       	dc.b $5, $38
0002571D 02                         DPLC_b4ca_247: 	dc.b $2
0002571E F539                       	dc.b $F5, $39
00025720 0549                       	dc.b $5, $49
00025722 02                         DPLC_b4ca_24C: 	dc.b $2
00025723 E356                       	dc.b $E3, $56
00025725 054A                       	dc.b $5, $4A
00025727 01                         DPLC_b4ca_251: 	dc.b $1
00025728 8365                       	dc.b $83, $65
0002572A 03                         DPLC_b4ca_254: 	dc.b $3
0002572B 736E                       	dc.b $73, $6E
0002572D 0376                       	dc.b $3, $76
0002572F 3377                       	dc.b $33, $77
00025731 02                         DPLC_b4ca_25B: 	dc.b $2
00025732 E37B                       	dc.b $E3, $7B
00025734 054A                       	dc.b $5, $4A
00025736 01                         DPLC_b4ca_260: 	dc.b $1
00025737 D561                       	dc.b $D5, $61
00025739 04                         DPLC_b4ca_263: 	dc.b $4
0002573A B399                       	dc.b $B3, $99
0002573C 33A5                       	dc.b $33, $A5
0002573E 03A9                       	dc.b $3, $A9
00025740 03AA                       	dc.b $3, $AA
00025742 04                         DPLC_b4ca_26C: 	dc.b $4
00025743 B3AB                       	dc.b $B3, $AB
00025745 33B7                       	dc.b $33, $B7
00025747 03BB                       	dc.b $3, $BB
00025749 03BC                       	dc.b $3, $BC
0002574B 05                         DPLC_b4ca_275: 	dc.b $5
0002574C 83BD                       	dc.b $83, $BD
0002574E 13C6                       	dc.b $13, $C6
00025750 53C8                       	dc.b $53, $C8
00025752 13CE                       	dc.b $13, $CE
00025754 03D0                       	dc.b $3, $D0
00025756 05                         DPLC_b4ca_280: 	dc.b $5
00025757 83D1                       	dc.b $83, $D1
00025759 13DA                       	dc.b $13, $DA
0002575B 53C8                       	dc.b $53, $C8
0002575D 13CE                       	dc.b $13, $CE
0002575F 03D0                       	dc.b $3, $D0
00025761 02                         DPLC_b4ca_28B: 	dc.b $2
00025762 83DC                       	dc.b $83, $DC
00025764 73E5                       	dc.b $73, $E5
00025766 03                         DPLC_b4ca_290: 	dc.b $3
00025767 83ED                       	dc.b $83, $ED
00025769 23F6                       	dc.b $23, $F6
0002576B 13F9                       	dc.b $13, $F9
0002576D 02                         DPLC_b4ca_297: 	dc.b $2
0002576E 83FB                       	dc.b $83, $FB
00025770 7404                       	dc.b $74, $4
00025772 03                         DPLC_b4ca_29C: 	dc.b $3
00025773 83ED                       	dc.b $83, $ED
00025775 240C                       	dc.b $24, $C
00025777 140F                       	dc.b $14, $F
00025779 02                         DPLC_b4ca_2A3: 	dc.b $2
0002577A 5411                       	dc.b $54, $11
0002577C B417                       	dc.b $B4, $17
0002577E 03                         DPLC_b4ca_2A8: 	dc.b $3
0002577F 8423                       	dc.b $84, $23
00025781 342C                       	dc.b $34, $2C
00025783 0430                       	dc.b $4, $30
00025785 03                         DPLC_b4ca_2AF: 	dc.b $3
00025786 7431                       	dc.b $74, $31
00025788 1439                       	dc.b $14, $39
0002578A B43B                       	dc.b $B4, $3B
0002578C 05                         DPLC_b4ca_2B6: 	dc.b $5
0002578D 7447                       	dc.b $74, $47
0002578F 144F                       	dc.b $14, $4F
00025791 5451                       	dc.b $54, $51
00025793 3457                       	dc.b $34, $57
00025795 045B                       	dc.b $4, $5B
00025797 05                         DPLC_b4ca_2C1: 	dc.b $5
00025798 745C                       	dc.b $74, $5C
0002579A 144F                       	dc.b $14, $4F
0002579C 5464                       	dc.b $54, $64
0002579E 3457                       	dc.b $34, $57
000257A0 045B                       	dc.b $4, $5B
000257A2 02                         DPLC_b4ca_2CC: 	dc.b $2
000257A3 246A                       	dc.b $24, $6A
000257A5 F46D                       	dc.b $F4, $6D
000257A7 03                         DPLC_b4ca_2D1: 	dc.b $3
000257A8 247D                       	dc.b $24, $7D
000257AA B480                       	dc.b $B4, $80
000257AC 248C                       	dc.b $24, $8C
000257AE 01                         DPLC_b4ca_2D8: 	dc.b $1
000257AF B48F                       	dc.b $B4, $8F
000257B1 01                         DPLC_b4ca_2DB: 	dc.b $1
000257B2 549B                       	dc.b $54, $9B
000257B4 01                         DPLC_b4ca_2DE: 	dc.b $1
000257B5 14A1                       	dc.b $14, $A1
000257B7 02                         DPLC_b4ca_2E1: 	dc.b $2
000257B8 E356                       	dc.b $E3, $56
000257BA 054A                       	dc.b $5, $4A
000257BC 03                         DPLC_b4ca_2E6: 	dc.b $3
000257BD 736E                       	dc.b $73, $6E
000257BF 0376                       	dc.b $3, $76
000257C1 3377                       	dc.b $33, $77
000257C3 03                         DPLC_b4ca_2ED: 	dc.b $3
000257C4 B4A3                       	dc.b $B4, $A3
000257C6 14AF                       	dc.b $14, $AF
000257C8 34B1                       	dc.b $34, $B1
000257CA 03                         DPLC_b4ca_2F4: 	dc.b $3
000257CB 54B5                       	dc.b $54, $B5
000257CD B4BB                       	dc.b $B4, $BB
000257CF 1074                       	dc.b $10, $74
000257D1 02                         DPLC_b4ca_2FB: 	dc.b $2
000257D2 F4C7                       	dc.b $F4, $C7
000257D4 24D7                       	dc.b $24, $D7
000257D6 02                         DPLC_b4ca_300: 	dc.b $2
000257D7 F4DA                       	dc.b $F4, $DA
000257D9 14EA                       	dc.b $14, $EA
000257DB 02                         DPLC_b4ca_305: 	dc.b $2
000257DC F502                       	dc.b $F5, $2
000257DE 2512                       	dc.b $25, $12
000257E0 02                         DPLC_b4ca_30A: 	dc.b $2
000257E1 F515                       	dc.b $F5, $15
000257E3 2525                       	dc.b $25, $25
000257E5 02                         DPLC_b4ca_30F: 	dc.b $2
000257E6 F54B                       	dc.b $F5, $4B
000257E8 755B                       	dc.b $75, $5B
000257EA                            	even
000257EA                            	even
000257EA                            
000257EA                            ; ---------------------------------------------------------------------------
000257EA                            ; Uncompressed graphics	- Sonic
000257EA                            ; ---------------------------------------------------------------------------
000257EA                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
000305CA                            		even
000305CA                            ; ---------------------------------------------------------------------------
000305CA                            ; Compressed graphics - various
000305CA                            ; ---------------------------------------------------------------------------
000305CA                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
000306CE                            		even
000306CE                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00030708                            		even
00030708                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0003089E                            		even
0003089E                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
000309E6                            		even
000309E6                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030AF0                            		even
00030AF0                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00030B42                            		even
00030B42                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00030D8A                            		even
00030D8A                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00030F10                            		even
00030F10                            ; ---------------------------------------------------------------------------
00030F10                            ; Sprite mappings - walls of the special stage
00030F10                            ; ---------------------------------------------------------------------------
00030F10                            Map_SSWalls:
00030F10                            	include "_maps\SSwalls.asm"
00030F10                            ; ---------------------------------------------------------------------------
00030F10                            ; Sprite mappings - walls of the special stage
00030F10                            ; ---------------------------------------------------------------------------
00030F10 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00030F14 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00030F18 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00030F1C 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00030F20 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00030F24 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00030F28 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00030F2C 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00030F30 01                         byte_2C584:	dc.b 1
00030F31 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00030F36 01                         byte_2C58A:	dc.b 1
00030F37 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00030F3C 01                         byte_2C590:	dc.b 1
00030F3D F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00030F42 01                         byte_2C596:	dc.b 1
00030F43 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00030F48 01                         byte_2C59C:	dc.b 1
00030F49 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00030F4E 01                         byte_2C5A2:	dc.b 1
00030F4F F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00030F54 01                         byte_2C5A8:	dc.b 1
00030F55 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00030F5A 01                         byte_2C5AE:	dc.b 1
00030F5B F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00030F60 01                         byte_2C5B4:	dc.b 1
00030F61 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00030F66 01                         byte_2C5BA:	dc.b 1
00030F67 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00030F6C 01                         byte_2C5C0:	dc.b 1
00030F6D F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00030F72 01                         byte_2C5C6:	dc.b 1
00030F73 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00030F78 01                         byte_2C5CC:	dc.b 1
00030F79 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00030F7E 01                         byte_2C5D2:	dc.b 1
00030F7F F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00030F84 01                         byte_2C5D8:	dc.b 1
00030F85 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00030F8A 01                         byte_2C5DE:	dc.b 1
00030F8B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00030F90                            		even
00030F90                            		even
00030F90                            ; ---------------------------------------------------------------------------
00030F90                            ; Compressed graphics - special stage
00030F90                            ; ---------------------------------------------------------------------------
00030F90                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
000318C8                            		even
000318C8                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031A16                            		even
00031A16                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032EA8                            		even
00032EA8                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
000331A8                            		even
000331A8                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003369C                            		even
0003369C                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0003378A                            		even
0003378A                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0003385A                            		even
0003385A                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033950                            		even
00033950                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
000339AE                            		even
000339AE                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033A40                            		even
00033A40                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033B02                            		even
00033B02                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033BD0                            		even
00033BD0                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033C9C                            		even
00033C9C                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00033D64                            		even
00033D64                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033E2E                            		even
00033E2E                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033EFE                            		even
00033EFE                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000340F2                            		even
000340F2                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003425A                            		even
0003425A                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0003430A                            		even
0003430A                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000343E4                            		even
000343E4                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00034468                            		even
00034468                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000345E6                            		even
000345E6                            ; ---------------------------------------------------------------------------
000345E6                            ; Compressed graphics - GHZ stuff
000345E6                            ; ---------------------------------------------------------------------------
000345E6                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034630                            		even
00034630                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0003474A                            		even
0003474A                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00034836                            		even
00034836                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
0003487E                            		even
0003487E                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034A1C                            		even
00034A1C                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034AD8                            		even
00034AD8                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034CEC                            		even
00034CEC                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034E18                            		even
00034E18                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00034F46                            		even
00034F46                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00034FE4                            		even
00034FE4                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00035044                            		even
00035044                            ; ---------------------------------------------------------------------------
00035044                            ; Compressed graphics - LZ stuff
00035044                            ; ---------------------------------------------------------------------------
00035044                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00035168                            		even
00035168                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0003595C                            		even
0003595C                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035ADC                            		even
00035ADC                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00035C46                            		even
00035C46                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003629C                            		even
0003629C                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036352                            		even
00036352                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000363F4                            		even
000363F4                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036550                            		even
00036550                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000365B4                            		even
000365B4                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00036706                            		even
00036706                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00036BE8                            		even
00036BE8                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00036D58                            		even
00036D58                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00037010                            		even
00037010                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00037148                            		even
00037148                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00037272                            		even
00037272                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00037382                            		even
00037382                            ; ---------------------------------------------------------------------------
00037382                            ; Compressed graphics - MZ stuff
00037382                            ; ---------------------------------------------------------------------------
00037382                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037610                            		even
00037610                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000376CE                            		even
000376CE                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00037786                            		even
00037786                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
000377DA                            		even
000377DA                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00037AAC 00                         		even
00037AAC                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000383C2                            		even
000383C2                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00038526                            		even
00038526                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000385AE                            		even
000385AE                            ; ---------------------------------------------------------------------------
000385AE                            ; Compressed graphics - SLZ stuff
000385AE                            ; ---------------------------------------------------------------------------
000385AE                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
000387EA                            		even
000387EA                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038930                            		even
00038930                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00038B74                            		even
00038B74                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00038BD6                            		even
00038BD6                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00038CB8                            		even
00038CB8                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00038E9A                            		even
00038E9A                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00038FA6                            		even
00038FA6                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003904A                            		even
0003904A                            ; ---------------------------------------------------------------------------
0003904A                            ; Compressed graphics - SYZ stuff
0003904A                            ; ---------------------------------------------------------------------------
0003904A                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000391B4                            		even
000391B4                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00039216                            		even
00039216                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000392F8                            		even
000392F8                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00039586                            		even
00039586                            ; ---------------------------------------------------------------------------
00039586                            ; Compressed graphics - SBZ stuff
00039586                            ; ---------------------------------------------------------------------------
00039586                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000395DA                            		even
000395DA                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00039876                            		even
00039876                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00039A7A                            		even
00039A7A                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00039C18                            		even
00039C18                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039F48                            		even
00039F48                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003A126                            		even
0003A126                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003A17E                            		even
0003A17E                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A348 00                         		even
0003A348                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A446                            		even
0003A446                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A5D2                            		even
0003A5D2                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A622                            		even
0003A622                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A67A                            		even
0003A67A                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A776                            		even
0003A776                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A88C                            		even
0003A88C                            ; ---------------------------------------------------------------------------
0003A88C                            ; Compressed graphics - enemies
0003A88C                            ; ---------------------------------------------------------------------------
0003A88C                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003ACFA 00                         		even
0003ACFA                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003AEA4 00                         		even
0003AEA4                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B266 00                         		even
0003B266                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B44E                            		even
0003B44E                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B606 00                         		even
0003B606                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B750                            		even
0003B750                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003B9DA                            		even
0003B9DA                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003BFFE                            		even
0003BFFE                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C1F4                            		even
0003C1F4                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C812                            		even
0003C812                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003CC12 00                         		even
0003CC12                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003CF0E                            		even
0003CF0E                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D156                            		even
0003D156                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D3EE                            		even
0003D3EE                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D5CC                            		even
0003D5CC                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D75A                            		even
0003D75A                            ; ---------------------------------------------------------------------------
0003D75A                            ; Compressed graphics - various
0003D75A                            ; ---------------------------------------------------------------------------
0003D75A                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003DCA2 00                         		even
0003DCA2                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003DD98                            		even
0003DD98                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003DE9E                            		even
0003DE9E                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003DF92                            		even
0003DF92                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E4D6                            		even
0003E4D6                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003EB3C                            		even
0003EB3C                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003EBEC                            		even
0003EBEC                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003ED7E                            		even
0003ED7E                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003EE92                            		even
0003EE92                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003EF64                            		even
0003EF64                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F3E0                            		even
0003F3E0                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F4A0                            		even
0003F4A0                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F614                            		even
0003F614                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003F916                            		even
0003F916                            ; ---------------------------------------------------------------------------
0003F916                            ; Compressed graphics - continue screen
0003F916                            ; ---------------------------------------------------------------------------
0003F916                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003FBC6                            		even
0003FBC6                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003FE00                            		even
0003FE00                            ; ---------------------------------------------------------------------------
0003FE00                            ; Compressed graphics - animals
0003FE00                            ; ---------------------------------------------------------------------------
0003FE00                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003FF58                            		even
0003FF58                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
000400B4                            		even
000400B4                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00040230                            		even
00040230                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0004034C                            		even
0004034C                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00040482                            		even
00040482                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
000405BC                            		even
000405BC                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00040718                            		even
00040718                            ; ---------------------------------------------------------------------------
00040718                            ; Compressed graphics - primary patterns and block mappings
00040718                            ; ---------------------------------------------------------------------------
00040718                            Blk16_GHZ:	incbin	map16\ghz.bin
0004102C                            		even
0004102C                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
0004293A                            		even
0004293A                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00043CBA                            		even
00043CBA                            Blk256_GHZ:	incbin	map256\ghz.bin
00045FB8                            		even
00045FB8                            Blk16_LZ:	incbin	map16\lz.bin
000466F2                            		even
000466F2                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00048AF8                            		even
00048AF8                            Blk256_LZ:	incbin	map256\lz.bin
0004B478                            		even
0004B478                            Blk16_MZ:	incbin	map16\mz.bin
0004BBE0                            		even
0004BBE0                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004E51C                            		even
0004E51C                            Blk256_MZ:	incbin	map256\mz.bin
0004FCC0                            		even
0004FCC0                            Blk16_SLZ:	incbin	map16\slz.bin
0005038A                            		even
0005038A                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
000522DE                            		even
000522DE                            Blk256_SLZ:	incbin	map256\slz.bin
00052958                            		even
00052958                            Blk16_SYZ:	incbin	map16\syz.bin
0005357E                            		even
0005357E                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00057B10                            		even
00057B10                            Blk256_SYZ:	incbin	map256\syz.bin
00059B6C                            		even
00059B6C                            Blk16_SBZ:	incbin	map16\sbz.bin
0005AAB4                            		even
0005AAB4                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D478                            		even
0005D478                            Blk256_SBZ:	incbin	map256\sbz.bin
0005FF6E                            		even
0005FF6E                            ; ---------------------------------------------------------------------------
0005FF6E                            ; Compressed graphics - bosses and ending sequence
0005FF6E                            ; ---------------------------------------------------------------------------
0005FF6E                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00060788 00                         		even
00060788                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00060DD6                            		even
00060DD6                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
00060E50                            		even
00060E50                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0006113A                            		even
0006113A                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
000619BE                            		even
000619BE                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00062714 00                         		even
00062714                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00062E7C                            		even
00062E7C                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
000633FC                            		even
000633FC                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0006351C                            		even
0006351C                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0006371A                            		even
0006371A                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
000648F8                            		even
000648F8                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006523C                            		even
0006523C                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00065612                            		even
00065612                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00065BA2                            		even
00065BA2                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00065E2A                            		even
00065E2A                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00066418 00                         		even
00066418                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000666A0                            		even
000666A0                            		incbin	misc\padding2.bin
000667A4                            		even
000667A4                            ; ---------------------------------------------------------------------------
000667A4                            ; Collision data
000667A4                            ; ---------------------------------------------------------------------------
000667A4                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
000668A4                            		even
000668A4                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
000678A4                            		even
000678A4                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
000688A4                            		even
000688A4                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00068A5C 00                         		even
00068A5C                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00068BC4                            		even
00068BC4                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00068D54 00                         		even
00068D54                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00068F48                            		even
00068F48                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0006914E                            		even
0006914E                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
000693EC                            		even
000693EC                            ; ---------------------------------------------------------------------------
000693EC                            ; Special layouts
000693EC                            ; ---------------------------------------------------------------------------
000693EC                            SS_1:		incbin	sslayout\1.bin
00069666                            		even
00069666                            SS_2:		incbin	sslayout\2.bin
00069A78                            		even
00069A78                            SS_3:		incbin	sslayout\3.bin
00069DD4                            		even
00069DD4                            SS_4:		incbin	sslayout\4.bin
0006A2AE                            		even
0006A2AE                            SS_5:		incbin	sslayout\5.bin
0006A780                            		even
0006A780                            SS_6:		incbin	sslayout\6.bin
0006AA90                            		even
0006AA90                            ; ---------------------------------------------------------------------------
0006AA90                            ; Animated uncompressed graphics
0006AA90                            ; ---------------------------------------------------------------------------
0006AA90                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006AC90                            		even
0006AC90                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006B090                            		even
0006B090                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006B510                            		even
0006B510                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006B810                            		even
0006B810                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006BE10                            		even
0006BE10                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006C110                            		even
0006C110                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006CB90                            		even
0006CB90                            
0006CB90                            ; ---------------------------------------------------------------------------
0006CB90                            ; Level	layout index
0006CB90                            ; ---------------------------------------------------------------------------
0006CB90 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006CB96 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006CB9C 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006CBA2 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006CBA8 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006CBAE 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006CBB4 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006CBBA 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006CBC0 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006CBC6 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006CBCC 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006CBD2 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006CBD8 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006CBDE 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006CBE4 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006CBEA 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006CBF0 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006CBF6 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006CBFC 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006CC02 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006CC08 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006CC0E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006CC14 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006CC1A 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006CC20 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006CC26 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006CC2C 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006CC32 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006CC38                            
0006CC38                            Level_GHZ1:	incbin	levels\ghz1.bin
0006CD2A                            		even
0006CD2A 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006CD2E                            Level_GHZ2:	incbin	levels\ghz2.bin
0006CDF6                            		even
0006CDF6 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006CDFA                            Level_GHZ3:	incbin	levels\ghz3.bin
0006CF1C                            		even
0006CF1C                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006CF3E                            		even
0006CF3E 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006CF42 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006CF46                            
0006CF46                            Level_LZ1:	incbin	levels\lz1.bin
0006D048                            		even
0006D048                            Level_LZbg:	incbin	levels\lzbg.bin
0006D14A                            		even
0006D14A 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006D14E                            Level_LZ2:	incbin	levels\lz2.bin
0006D1E8                            		even
0006D1E8 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006D1EC                            Level_LZ3:	incbin	levels\lz3.bin
0006D306                            		even
0006D306 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006D30A                            Level_SBZ3:	incbin	levels\sbz3.bin
0006D3C4                            		even
0006D3C4 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006D3C8                            
0006D3C8                            Level_MZ1:	incbin	levels\mz1.bin
0006D466                            		even
0006D466                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006D4E0                            		even
0006D4E0                            Level_MZ2:	incbin	levels\mz2.bin
0006D584                            		even
0006D584                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006D616                            		even
0006D616 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006D61A                            Level_MZ3:	incbin	levels\mz3.bin
0006D6FC                            		even
0006D6FC                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006D7A0 00                         		even
0006D7A0 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006D7A4 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006D7A8                            
0006D7A8                            Level_SLZ1:	incbin	levels\slz1.bin
0006D8BA                            		even
0006D8BA                            Level_SLZbg:	incbin	levels\slzbg.bin
0006D8D4                            		even
0006D8D4                            Level_SLZ2:	incbin	levels\slz2.bin
0006D9C4                            		even
0006D9C4                            Level_SLZ3:	incbin	levels\slz3.bin
0006DADE                            		even
0006DADE 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006DAE2                            
0006DAE2                            Level_SYZ1:	incbin	levels\syz1.bin
0006DB9E 00                         		even
0006DB9E                            Level_SYZbg:	incbin	levels\syzbg.bin
0006DBD8                            		even
0006DBD8 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006DBDC                            Level_SYZ2:	incbin	levels\syz2.bin
0006DCE0                            		even
0006DCE0 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006DCE4                            Level_SYZ3:	incbin	levels\syz3.bin
0006DE3E 00                         		even
0006DE3E 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006DE42 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006DE46                            
0006DE46                            Level_SBZ1:	incbin	levels\sbz1.bin
0006DF68                            		even
0006DF68                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006DFA6                            		even
0006DFA6                            Level_SBZ2:	incbin	levels\sbz2.bin
0006E0E8                            		even
0006E0E8                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006E252                            		even
0006E252 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006E256 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006E25A                            Level_End:	incbin	levels\ending.bin
0006E28A 00                         		even
0006E28A 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006E28E                            
0006E28E                            ; ---------------------------------------------------------------------------
0006E28E                            ; Animated uncompressed giant ring graphics
0006E28E                            ; ---------------------------------------------------------------------------
0006E28E                            Art_BigRing:	incbin	artunc\bigring.bin
0006EECE                            		even
0006EECE                            
0006EECE                            		incbin	misc\padding3.bin
0006EF6A                            		even
0006EF6A                            
0006EF6A                            ; ---------------------------------------------------------------------------
0006EF6A                            ; Sprite locations index
0006EF6A                            ; ---------------------------------------------------------------------------
0006EF6A 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EF6E 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EF72 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EF76 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EF7A 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EF7E 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EF82 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EF86 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EF8A 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EF8E 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EF92 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EF96 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EF9A 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EF9E 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFA2 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFA6 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFAA 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFAE 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFB2 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFB6 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFBA 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFBE 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFC2 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFC6 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFCA 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFCE 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFD2 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFD6 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFDA 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006EFDE 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006EFE2 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006EFE6 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006EFEA 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006EFEE 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006EFF2 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006EFF6 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006EFFA FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006F000                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006F84C                            		even
0006F84C                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006F900                            		even
0006F900                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
00070344                            		even
00070344                            ObjPos_LZ1:	incbin	objpos\lz1.bin
000706EC                            		even
000706EC                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00070A22                            		even
00070A22                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00070F38                            		even
00070F38                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000713D0                            		even
000713D0                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00071402                            		even
00071402                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00071434                            		even
00071434                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00071466                            		even
00071466                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00071498                            		even
00071498                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000714E2                            		even
000714E2                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00071520                            		even
00071520                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0007188C                            		even
0007188C                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00071D36                            		even
00071D36                            ObjPos_MZ3:	incbin	objpos\mz3.bin
000722AC                            		even
000722AC                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000722D6                            		even
000722D6                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007273E                            		even
0007273E                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00072D20                            		even
00072D20                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00073392                            		even
00073392                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000738FC                            		even
000738FC                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00073F02                            		even
00073F02                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00074640                            		even
00074640                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00074D1E                            		even
00074D1E                            ObjPos_FZ:	incbin	objpos\fz.bin
00074D30                            		even
00074D30                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00074D62                            		even
00074D62                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00074D94                            		even
00074D94                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00074DC6                            		even
00074DC6                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00074DF8                            		even
00074DF8                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00074E2A                            		even
00074E2A                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00074E62                            		even
00074E62                            ObjPos_End:	incbin	objpos\ending.bin
00074FBE                            		even
00074FBE FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00074FC4                            ; ---------------------------------------------------------------------------
00074FC4                            		incbin	misc\padding4.bin
000755EE                            		even
000755EE                            
000755EE 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000755F2 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000755F6 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000755FA 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000755FE 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00075602 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00075606                            ; ---------------------------------------------------------------------------
00075606                            ; PSG instruments used in music
00075606                            ; ---------------------------------------------------------------------------
00075606 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00075612 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007561E 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007562A                            PSG1:		incbin	sound\psg1.bin
00075641                            PSG2:		incbin	sound\psg2.bin
00075648                            PSG3:		incbin	sound\psg3.bin
00075659                            PSG4:		incbin	sound\psg4.bin
00075664                            PSG6:		incbin	sound\psg6.bin
00075673                            PSG5:		incbin	sound\psg5.bin
0007569D                            PSG7:		incbin	sound\psg7.bin
000756B9                            PSG8:		incbin	sound\psg8.bin
000756E1                            PSG9:		incbin	sound\psg9.bin
000756F2                            
000756F2 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000756FA                            ; ---------------------------------------------------------------------------
000756FA                            ; Music	Pointers
000756FA                            ; ---------------------------------------------------------------------------
000756FA 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00075702 0000 0000 0000 0000        		dc.l Music83, Music84
0007570A 0000 0000 0000 0000        		dc.l Music85, Music86
00075712 0000 0000 0000 0000        		dc.l Music87, Music88
0007571A 0000 0000 0000 0000        		dc.l Music89, Music8A
00075722 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007572A 0000 0000 0000 0000        		dc.l Music8D, Music8E
00075732 0000 0000 0000 0000        		dc.l Music8F, Music90
0007573A 0000 0000 0000 0000        		dc.l Music91, Music92
00075742 0000 0000 0000 0000        		dc.l Music93, Music94
0007574A 0000 0000 0000 0000        		dc.l Music95, Music96
00075752 0000 0000 0000 0000        		dc.l Music97, Music98
0007575A 0000 0000 0000 0000        		dc.l Music99, Music9A
00075762 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007576A 0000 0000 0000 0000        		dc.l Music9D, Music9E
00075772 0000 0000                  		dc.l Music9F
00075776                            ; ---------------------------------------------------------------------------
00075776                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00075776                            ; ---------------------------------------------------------------------------
00075776 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00075786 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00075796 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000757A6 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000757B6 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
000757C6 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
000757D6 9090 9090                  		dc.b $90, $90, $90, $90
000757DA                            
000757DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000757DA                            
000757DA                            
000757DA                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
000757DA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000757E2 4E71                       		nop	
000757E4 4E71                       		nop	
000757E6 4E71                       		nop	
000757E8                            
000757E8                            loc_71B5A:
000757E8 0839 0000 00A1 1100        		btst	#0,($A11100).l
000757F0 66F6                       		bne.s	loc_71B5A
000757F2                            
000757F2 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
000757FA 6700                       		beq.s	loc_71B82
000757FC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00075804 4E71                       		nop	
00075806 4E71                       		nop	
00075808 4E71                       		nop	
0007580A 4E71                       		nop	
0007580C 4E71                       		nop	
0007580E 60CA                       		bra.s	sub_71B4C
00075810                            ; ===========================================================================
00075810                            
00075810                            loc_71B82:
00075810 4DF9 00FF F000             		lea	($FFF000).l,a6
00075816 422E 000E                  		clr.b	$E(a6)
0007581A 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0007581E 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00075822 532E 0001                  		subq.b	#1,1(a6)
00075826 6600                       		bne.s	loc_71B9E
00075828 4EBA 0000                  		jsr	sub_7260C(pc)
0007582C                            
0007582C                            loc_71B9E:
0007582C 102E 0004                  		move.b	4(a6),d0
00075830 6700                       		beq.s	loc_71BA8
00075832 4EBA 0000                  		jsr	sub_72504(pc)
00075836                            
00075836                            loc_71BA8:
00075836 4A2E 0024                  		tst.b	$24(a6)
0007583A 6700                       		beq.s	loc_71BB2
0007583C 4EBA 0000                  		jsr	sub_7267C(pc)
00075840                            
00075840                            loc_71BB2:
00075840 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00075844 6700                       		beq.s	loc_71BBC	; if not, branch
00075846 4EBA 0000                  		jsr	Sound_Play(pc)
0007584A                            
0007584A                            loc_71BBC:
0007584A 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00075850 6700                       		beq.s	loc_71BC8
00075852 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00075856                            
00075856                            loc_71BC8:
00075856 4BEE 0040                  		lea	$40(a6),a5
0007585A 4A15                       		tst.b	(a5)
0007585C 6A00                       		bpl.s	loc_71BD4
0007585E 4EBA 0000                  		jsr	sub_71C4E(pc)
00075862                            
00075862                            loc_71BD4:
00075862 422E 0008                  		clr.b	8(a6)
00075866 7E05                       		moveq	#5,d7
00075868                            
00075868                            loc_71BDA:
00075868 DAFC 0030                  		adda.w	#$30,a5
0007586C 4A15                       		tst.b	(a5)
0007586E 6A00                       		bpl.s	loc_71BE6
00075870 4EBA 0000                  		jsr	sub_71CCA(pc)
00075874                            
00075874                            loc_71BE6:
00075874 51CF FFF2                  		dbf	d7,loc_71BDA
00075878                            
00075878 7E02                       		moveq	#2,d7
0007587A                            
0007587A                            loc_71BEC:
0007587A DAFC 0030                  		adda.w	#$30,a5
0007587E 4A15                       		tst.b	(a5)
00075880 6A00                       		bpl.s	loc_71BF8
00075882 4EBA 0000                  		jsr	sub_72850(pc)
00075886                            
00075886                            loc_71BF8:
00075886 51CF FFF2                  		dbf	d7,loc_71BEC
0007588A                            
0007588A 1D7C 0080 000E             		move.b	#$80,$E(a6)
00075890 7E02                       		moveq	#2,d7
00075892                            
00075892                            loc_71C04:
00075892 DAFC 0030                  		adda.w	#$30,a5
00075896 4A15                       		tst.b	(a5)
00075898 6A00                       		bpl.s	loc_71C10
0007589A 4EBA 0000                  		jsr	sub_71CCA(pc)
0007589E                            
0007589E                            loc_71C10:
0007589E 51CF FFF2                  		dbf	d7,loc_71C04
000758A2                            
000758A2 7E02                       		moveq	#2,d7
000758A4                            
000758A4                            loc_71C16:
000758A4 DAFC 0030                  		adda.w	#$30,a5
000758A8 4A15                       		tst.b	(a5)
000758AA 6A00                       		bpl.s	loc_71C22
000758AC 4EBA 0000                  		jsr	sub_72850(pc)
000758B0                            
000758B0                            loc_71C22:
000758B0 51CF FFF2                  		dbf	d7,loc_71C16
000758B4 1D7C 0040 000E             		move.b	#$40,$E(a6)
000758BA DAFC 0030                  		adda.w	#$30,a5
000758BE 4A15                       		tst.b	(a5)
000758C0 6A00                       		bpl.s	loc_71C38
000758C2 4EBA 0000                  		jsr	sub_71CCA(pc)
000758C6                            
000758C6                            loc_71C38:
000758C6 DAFC 0030                  		adda.w	#$30,a5
000758CA 4A15                       		tst.b	(a5)
000758CC 6A00                       		bpl.s	loc_71C44
000758CE 4EBA 0000                  		jsr	sub_72850(pc)
000758D2                            
000758D2                            loc_71C44:
000758D2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000758DA 4E75                       		rts	
000758DC                            ; End of function sub_71B4C
000758DC                            
000758DC                            
000758DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000758DC                            
000758DC                            
000758DC                            sub_71C4E:				; XREF: sub_71B4C
000758DC 532D 000E                  		subq.b	#1,$E(a5)
000758E0 6600                       		bne.s	locret_71CAA
000758E2 1D7C 0080 0008             		move.b	#$80,8(a6)
000758E8 286D 0004                  		movea.l	4(a5),a4
000758EC                            
000758EC                            loc_71C5E:
000758EC 7A00                       		moveq	#0,d5
000758EE 1A1C                       		move.b	(a4)+,d5
000758F0 0C05 00E0                  		cmpi.b	#-$20,d5
000758F4 6500                       		bcs.s	loc_71C6E
000758F6 4EBA 0000                  		jsr	sub_72A5A(pc)
000758FA 60F0                       		bra.s	loc_71C5E
000758FC                            ; ===========================================================================
000758FC                            
000758FC                            loc_71C6E:
000758FC 4A05                       		tst.b	d5
000758FE 6A00                       		bpl.s	loc_71C84
00075900 1B45 0010                  		move.b	d5,$10(a5)
00075904 1A1C                       		move.b	(a4)+,d5
00075906 6A00                       		bpl.s	loc_71C84
00075908 534C                       		subq.w	#1,a4
0007590A 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00075910 6000                       		bra.s	loc_71C88
00075912                            ; ===========================================================================
00075912                            
00075912                            loc_71C84:
00075912 4EBA 0000                  		jsr	sub_71D40(pc)
00075916                            
00075916                            loc_71C88:
00075916 2B4C 0004                  		move.l	a4,4(a5)
0007591A 0815 0002                  		btst	#2,(a5)
0007591E 6600                       		bne.s	locret_71CAA
00075920 7000                       		moveq	#0,d0
00075922 102D 0010                  		move.b	$10(a5),d0
00075926 0C00 0080                  		cmpi.b	#$80,d0
0007592A 6700                       		beq.s	locret_71CAA
0007592C 0800 0003                  		btst	#3,d0
00075930 6600                       		bne.s	loc_71CAC
00075932 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00075938                            
00075938                            locret_71CAA:
00075938 4E75                       		rts	
0007593A                            ; ===========================================================================
0007593A                            
0007593A                            loc_71CAC:
0007593A 0400 0088                  		subi.b	#$88,d0
0007593E 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00075942 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00075948 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00075950 4E75                       		rts	
00075952                            ; End of function sub_71C4E
00075952                            
00075952                            ; ===========================================================================
00075952 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00075958                            
00075958                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075958                            
00075958                            
00075958                            sub_71CCA:				; XREF: sub_71B4C
00075958 532D 000E                  		subq.b	#1,$E(a5)
0007595C 6600                       		bne.s	loc_71CE0
0007595E 0895 0004                  		bclr	#4,(a5)
00075962 4EBA 0000                  		jsr	sub_71CEC(pc)
00075966 4EBA 0000                  		jsr	sub_71E18(pc)
0007596A 6000 0000                  		bra.w	loc_726E2
0007596E                            ; ===========================================================================
0007596E                            
0007596E                            loc_71CE0:
0007596E 4EBA 0000                  		jsr	sub_71D9E(pc)
00075972 4EBA 0000                  		jsr	sub_71DC6(pc)
00075976 6000 0000                  		bra.w	loc_71E24
0007597A                            ; End of function sub_71CCA
0007597A                            
0007597A                            
0007597A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007597A                            
0007597A                            
0007597A                            sub_71CEC:				; XREF: sub_71CCA
0007597A 286D 0004                  		movea.l	4(a5),a4
0007597E 0895 0001                  		bclr	#1,(a5)
00075982                            
00075982                            loc_71CF4:
00075982 7A00                       		moveq	#0,d5
00075984 1A1C                       		move.b	(a4)+,d5
00075986 0C05 00E0                  		cmpi.b	#-$20,d5
0007598A 6500                       		bcs.s	loc_71D04
0007598C 4EBA 0000                  		jsr	sub_72A5A(pc)
00075990 60F0                       		bra.s	loc_71CF4
00075992                            ; ===========================================================================
00075992                            
00075992                            loc_71D04:
00075992 4EBA 0000                  		jsr	sub_726FE(pc)
00075996 4A05                       		tst.b	d5
00075998 6A00                       		bpl.s	loc_71D1A
0007599A 4EBA 0000                  		jsr	sub_71D22(pc)
0007599E 1A1C                       		move.b	(a4)+,d5
000759A0 6A00                       		bpl.s	loc_71D1A
000759A2 534C                       		subq.w	#1,a4
000759A4 6000 0000                  		bra.w	sub_71D60
000759A8                            ; ===========================================================================
000759A8                            
000759A8                            loc_71D1A:
000759A8 4EBA 0000                  		jsr	sub_71D40(pc)
000759AC 6000 0000                  		bra.w	sub_71D60
000759B0                            ; End of function sub_71CEC
000759B0                            
000759B0                            
000759B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000759B0                            
000759B0                            
000759B0                            sub_71D22:				; XREF: sub_71CEC
000759B0 0405 0080                  		subi.b	#$80,d5
000759B4 6700                       		beq.s	loc_71D58
000759B6 DA2D 0008                  		add.b	8(a5),d5
000759BA 0245 007F                  		andi.w	#$7F,d5
000759BE E34D                       		lsl.w	#1,d5
000759C0 41FA 0000                  		lea	word_72790(pc),a0
000759C4 3C30 5000                  		move.w	(a0,d5.w),d6
000759C8 3B46 0010                  		move.w	d6,$10(a5)
000759CC 4E75                       		rts	
000759CE                            ; End of function sub_71D22
000759CE                            
000759CE                            
000759CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000759CE                            
000759CE                            
000759CE                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000759CE 1005                       		move.b	d5,d0
000759D0 122D 0002                  		move.b	2(a5),d1
000759D4                            
000759D4                            loc_71D46:
000759D4 5301                       		subq.b	#1,d1
000759D6 6700                       		beq.s	loc_71D4E
000759D8 D005                       		add.b	d5,d0
000759DA 60F8                       		bra.s	loc_71D46
000759DC                            ; ===========================================================================
000759DC                            
000759DC                            loc_71D4E:
000759DC 1B40 000F                  		move.b	d0,$F(a5)
000759E0 1B40 000E                  		move.b	d0,$E(a5)
000759E4 4E75                       		rts	
000759E6                            ; End of function sub_71D40
000759E6                            
000759E6                            ; ===========================================================================
000759E6                            
000759E6                            loc_71D58:				; XREF: sub_71D22
000759E6 08D5 0001                  		bset	#1,(a5)
000759EA 426D 0010                  		clr.w	$10(a5)
000759EE                            
000759EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000759EE                            
000759EE                            
000759EE                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000759EE 2B4C 0004                  		move.l	a4,4(a5)
000759F2 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000759F8 0815 0004                  		btst	#4,(a5)
000759FC 6600                       		bne.s	locret_71D9C
000759FE 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00075A04 422D 000C                  		clr.b	$C(a5)
00075A08 0815 0003                  		btst	#3,(a5)
00075A0C 6700                       		beq.s	locret_71D9C
00075A0E 206D 0014                  		movea.l	$14(a5),a0
00075A12 1B58 0018                  		move.b	(a0)+,$18(a5)
00075A16 1B58 0019                  		move.b	(a0)+,$19(a5)
00075A1A 1B58 001A                  		move.b	(a0)+,$1A(a5)
00075A1E 1018                       		move.b	(a0)+,d0
00075A20 E208                       		lsr.b	#1,d0
00075A22 1B40 001B                  		move.b	d0,$1B(a5)
00075A26 426D 001C                  		clr.w	$1C(a5)
00075A2A                            
00075A2A                            locret_71D9C:
00075A2A 4E75                       		rts	
00075A2C                            ; End of function sub_71D60
00075A2C                            
00075A2C                            
00075A2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A2C                            
00075A2C                            
00075A2C                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00075A2C 4A2D 0012                  		tst.b	$12(a5)
00075A30 6700                       		beq.s	locret_71DC4
00075A32 532D 0012                  		subq.b	#1,$12(a5)
00075A36 6600                       		bne.s	locret_71DC4
00075A38 08D5 0001                  		bset	#1,(a5)
00075A3C 4A2D 0001                  		tst.b	1(a5)
00075A40 6B00 0000                  		bmi.w	loc_71DBE
00075A44 4EBA 0000                  		jsr	sub_726FE(pc)
00075A48 584F                       		addq.w	#4,sp
00075A4A 4E75                       		rts	
00075A4C                            ; ===========================================================================
00075A4C                            
00075A4C                            loc_71DBE:
00075A4C 4EBA 0000                  		jsr	sub_729A0(pc)
00075A50 584F                       		addq.w	#4,sp
00075A52                            
00075A52                            locret_71DC4:
00075A52 4E75                       		rts	
00075A54                            ; End of function sub_71D9E
00075A54                            
00075A54                            
00075A54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A54                            
00075A54                            
00075A54                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00075A54 584F                       		addq.w	#4,sp
00075A56 0815 0003                  		btst	#3,(a5)
00075A5A 6700                       		beq.s	locret_71E16
00075A5C 4A2D 0018                  		tst.b	$18(a5)
00075A60 6700                       		beq.s	loc_71DDA
00075A62 532D 0018                  		subq.b	#1,$18(a5)
00075A66 4E75                       		rts	
00075A68                            ; ===========================================================================
00075A68                            
00075A68                            loc_71DDA:
00075A68 532D 0019                  		subq.b	#1,$19(a5)
00075A6C 6700                       		beq.s	loc_71DE2
00075A6E 4E75                       		rts	
00075A70                            ; ===========================================================================
00075A70                            
00075A70                            loc_71DE2:
00075A70 206D 0014                  		movea.l	$14(a5),a0
00075A74 1B68 0001 0019             		move.b	1(a0),$19(a5)
00075A7A 4A2D 001B                  		tst.b	$1B(a5)
00075A7E 6600                       		bne.s	loc_71DFE
00075A80 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00075A86 442D 001A                  		neg.b	$1A(a5)
00075A8A 4E75                       		rts	
00075A8C                            ; ===========================================================================
00075A8C                            
00075A8C                            loc_71DFE:
00075A8C 532D 001B                  		subq.b	#1,$1B(a5)
00075A90 1C2D 001A                  		move.b	$1A(a5),d6
00075A94 4886                       		ext.w	d6
00075A96 DC6D 001C                  		add.w	$1C(a5),d6
00075A9A 3B46 001C                  		move.w	d6,$1C(a5)
00075A9E DC6D 0010                  		add.w	$10(a5),d6
00075AA2 594F                       		subq.w	#4,sp
00075AA4                            
00075AA4                            locret_71E16:
00075AA4 4E75                       		rts	
00075AA6                            ; End of function sub_71DC6
00075AA6                            
00075AA6                            
00075AA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075AA6                            
00075AA6                            
00075AA6                            sub_71E18:				; XREF: sub_71CCA
00075AA6 0815 0001                  		btst	#1,(a5)
00075AAA 6600                       		bne.s	locret_71E48
00075AAC 3C2D 0010                  		move.w	$10(a5),d6
00075AB0 6700                       		beq.s	loc_71E4A
00075AB2                            
00075AB2                            loc_71E24:				; XREF: sub_71CCA
00075AB2 102D 001E                  		move.b	$1E(a5),d0
00075AB6 4880                       		ext.w	d0
00075AB8 DC40                       		add.w	d0,d6
00075ABA 0815 0002                  		btst	#2,(a5)
00075ABE 6600                       		bne.s	locret_71E48
00075AC0 3206                       		move.w	d6,d1
00075AC2 E049                       		lsr.w	#8,d1
00075AC4 103C 00A4                  		move.b	#-$5C,d0
00075AC8 4EBA 0000                  		jsr	sub_72722(pc)
00075ACC 1206                       		move.b	d6,d1
00075ACE 103C 00A0                  		move.b	#-$60,d0
00075AD2 4EBA 0000                  		jsr	sub_72722(pc)
00075AD6                            
00075AD6                            locret_71E48:
00075AD6 4E75                       		rts	
00075AD8                            ; ===========================================================================
00075AD8                            
00075AD8                            loc_71E4A:
00075AD8 08D5 0001                  		bset	#1,(a5)
00075ADC 4E75                       		rts	
00075ADE                            ; End of function sub_71E18
00075ADE                            
00075ADE                            ; ===========================================================================
00075ADE                            
00075ADE                            loc_71E50:				; XREF: sub_71B4C
00075ADE 6B00                       		bmi.s	loc_71E94
00075AE0 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00075AE6 6700 0000                  		beq.w	loc_71EFE
00075AEA 1D7C 0002 0003             		move.b	#2,3(a6)
00075AF0 7602                       		moveq	#2,d3
00075AF2 103C 00B4                  		move.b	#-$4C,d0
00075AF6 7200                       		moveq	#0,d1
00075AF8                            
00075AF8                            loc_71E6A:
00075AF8 4EBA 0000                  		jsr	sub_7272E(pc)
00075AFC 4EBA 0000                  		jsr	sub_72764(pc)
00075B00 5200                       		addq.b	#1,d0
00075B02 51CB FFF4                  		dbf	d3,loc_71E6A
00075B06                            
00075B06 7602                       		moveq	#2,d3
00075B08 7028                       		moveq	#$28,d0
00075B0A                            
00075B0A                            loc_71E7C:
00075B0A 1203                       		move.b	d3,d1
00075B0C 4EBA 0000                  		jsr	sub_7272E(pc)
00075B10 5801                       		addq.b	#4,d1
00075B12 4EBA 0000                  		jsr	sub_7272E(pc)
00075B16 51CB FFF2                  		dbf	d3,loc_71E7C
00075B1A                            
00075B1A 4EBA 0000                  		jsr	sub_729B6(pc)
00075B1E 6000 FDB2                  		bra.w	loc_71C44
00075B22                            ; ===========================================================================
00075B22                            
00075B22                            loc_71E94:				; XREF: loc_71E50
00075B22 422E 0003                  		clr.b	3(a6)
00075B26 7630                       		moveq	#$30,d3
00075B28 4BEE 0040                  		lea	$40(a6),a5
00075B2C 7806                       		moveq	#6,d4
00075B2E                            
00075B2E                            loc_71EA0:
00075B2E 0815 0007                  		btst	#7,(a5)
00075B32 6700                       		beq.s	loc_71EB8
00075B34 0815 0002                  		btst	#2,(a5)
00075B38 6600                       		bne.s	loc_71EB8
00075B3A 103C 00B4                  		move.b	#-$4C,d0
00075B3E 122D 000A                  		move.b	$A(a5),d1
00075B42 4EBA 0000                  		jsr	sub_72722(pc)
00075B46                            
00075B46                            loc_71EB8:
00075B46 DAC3                       		adda.w	d3,a5
00075B48 51CC FFE4                  		dbf	d4,loc_71EA0
00075B4C                            
00075B4C 4BEE 0220                  		lea	$220(a6),a5
00075B50 7802                       		moveq	#2,d4
00075B52                            
00075B52                            loc_71EC4:
00075B52 0815 0007                  		btst	#7,(a5)
00075B56 6700                       		beq.s	loc_71EDC
00075B58 0815 0002                  		btst	#2,(a5)
00075B5C 6600                       		bne.s	loc_71EDC
00075B5E 103C 00B4                  		move.b	#-$4C,d0
00075B62 122D 000A                  		move.b	$A(a5),d1
00075B66 4EBA 0000                  		jsr	sub_72722(pc)
00075B6A                            
00075B6A                            loc_71EDC:
00075B6A DAC3                       		adda.w	d3,a5
00075B6C 51CC FFE4                  		dbf	d4,loc_71EC4
00075B70                            
00075B70 4BEE 0340                  		lea	$340(a6),a5
00075B74 0815 0007                  		btst	#7,(a5)
00075B78 6700                       		beq.s	loc_71EFE
00075B7A 0815 0002                  		btst	#2,(a5)
00075B7E 6600                       		bne.s	loc_71EFE
00075B80 103C 00B4                  		move.b	#-$4C,d0
00075B84 122D 000A                  		move.b	$A(a5),d1
00075B88 4EBA 0000                  		jsr	sub_72722(pc)
00075B8C                            
00075B8C                            loc_71EFE:
00075B8C 6000 FD44                  		bra.w	loc_71C44
00075B90                            
00075B90                            ; ---------------------------------------------------------------------------
00075B90                            ; Subroutine to	play a sound or	music track
00075B90                            ; ---------------------------------------------------------------------------
00075B90                            
00075B90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075B90                            
00075B90                            
00075B90                            Sound_Play:				; XREF: sub_71B4C
00075B90 2079 0007 55EE             		movea.l	(Go_SoundTypes).l,a0
00075B96 43EE 000A                  		lea	$A(a6),a1	; load music track number
00075B9A 1616                       		move.b	0(a6),d3
00075B9C 7802                       		moveq	#2,d4
00075B9E                            
00075B9E                            loc_71F12:
00075B9E 1011                       		move.b	(a1),d0		; move track number to d0
00075BA0 1200                       		move.b	d0,d1
00075BA2 4219                       		clr.b	(a1)+
00075BA4 0400 0081                  		subi.b	#$81,d0
00075BA8 6500                       		bcs.s	loc_71F3E
00075BAA 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00075BB0 6700                       		beq.s	loc_71F2C
00075BB2 1D41 000A                  		move.b	d1,$A(a6)
00075BB6 6000                       		bra.s	loc_71F3E
00075BB8                            ; ===========================================================================
00075BB8                            
00075BB8                            loc_71F2C:
00075BB8 0240 007F                  		andi.w	#$7F,d0
00075BBC 1430 0000                  		move.b	(a0,d0.w),d2
00075BC0 B403                       		cmp.b	d3,d2
00075BC2 6500                       		bcs.s	loc_71F3E
00075BC4 1602                       		move.b	d2,d3
00075BC6 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00075BCA                            
00075BCA                            loc_71F3E:
00075BCA 51CC FFD2                  		dbf	d4,loc_71F12
00075BCE                            
00075BCE 4A03                       		tst.b	d3
00075BD0 6B00                       		bmi.s	locret_71F4A
00075BD2 1C83                       		move.b	d3,0(a6)
00075BD4                            
00075BD4                            locret_71F4A:
00075BD4 4E75                       		rts	
00075BD6                            ; End of function Sound_Play
00075BD6                            
00075BD6                            
00075BD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075BD6                            
00075BD6                            
00075BD6                            Sound_ChkValue:				; XREF: sub_71B4C
00075BD6 7E00                       		moveq	#0,d7
00075BD8 1E2E 0009                  		move.b	9(a6),d7
00075BDC 6700 0000                  		beq.w	Sound_E4
00075BE0 6A00                       		bpl.s	locret_71F8C
00075BE2 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00075BE8 0C07 009F                  		cmpi.b	#$9F,d7
00075BEC 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00075BF0 0C07 00A0                  		cmpi.b	#$A0,d7
00075BF4 6500 0000                  		bcs.w	locret_71F8C
00075BF8 0C07 00CF                  		cmpi.b	#$CF,d7
00075BFC 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00075C00 0C07 00D0                  		cmpi.b	#$D0,d7
00075C04 6500 0000                  		bcs.w	locret_71F8C
00075C08 0C07 00E0                  		cmpi.b	#$E0,d7
00075C0C 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00075C10 0C07 00E5                  		cmpi.b	#$E5,d7
00075C14 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
00075C16                            
00075C16                            locret_71F8C:
00075C16 4E75                       		rts	
00075C18                            ; ===========================================================================
00075C18                            
00075C18                            Sound_E0toE5				; XREF: Sound_ChkValue
00075C18 0407 00E0                  		subi.b	#$E0,d7
00075C1C E54F                       		lsl.w	#2,d7
00075C1E 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00075C22                            ; ===========================================================================
00075C22                            
00075C22                            Sound_ExIndex:
00075C22 6000 0000                  		bra.w	Sound_E0
00075C26                            ; ===========================================================================
00075C26 6000 0000                  		bra.w	Sound_E1
00075C2A                            ; ===========================================================================
00075C2A 6000 0000                  		bra.w	Sound_E2
00075C2E                            ; ===========================================================================
00075C2E 6000 0000                  		bra.w	Sound_E3
00075C32                            ; ===========================================================================
00075C32 6000 0000                  		bra.w	Sound_E4
00075C36                            ; ===========================================================================
00075C36 6000 0000                  		bra.w	Sound_E5
00075C3A                            ; ===========================================================================
00075C3A                            ; ---------------------------------------------------------------------------
00075C3A                            ; Play "Say-gaa" PCM sound
00075C3A                            ; ---------------------------------------------------------------------------
00075C3A                            
00075C3A                            Sound_E1:				  
00075C3A 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00075C40 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
00075C46 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00075C4E                            PlayPCM_Loop:	  
00075C4E 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075C54 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00075C58 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
00075C5C 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00075C5E 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
00075C60 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00075C64 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
00075C6A 4EB8 1418                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
00075C6E 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00075C74 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00075C76 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00075C78                            return_PlayPCM: 
00075C78 584F                       		addq.w	#4,sp 
00075C7A 4E75                       		rts
00075C7C                            		
00075C7C                            ; ---------------------------------------------------------------------------
00075C7C                            ; Play you are an idiot pcm sound
00075C7C                            ; since the sfx already crashes the game forever load it here :V
00075C7C                            ; ---------------------------------------------------------------------------
00075C7C                            
00075C7C                            Sound_E5: 
00075C7C 4EB8 14E8                  		jsr	ClearScreen
00075C80                            		;control port on a5
00075C80 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
00075C86 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
00075C8C 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
00075C90 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
00075C94 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
00075C98                            		
00075C98 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
00075C9C                            		
00075C9C 2ABC 4000 0000             		move.l	#$40000000,(a5)
00075CA2 41F9 0002 4270             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00075CA8 4EB8 1664                  		jsr	NemDec
00075CAC 43F9 00FF 0000             		lea	($FF0000).l,a1
00075CB2 41F9 0002 4212             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00075CB8 303C 0000                  		move.w	#0,d0
00075CBC 4EB8 1942                  		jsr	EniDec
00075CC0 43F9 00FF 0000             		lea	($FF0000).l,a1
00075CC6 203C 4304 0003             		move.l	#$43040003,d0
00075CCC 7223                       		moveq	#35,d1
00075CCE 740D                       		moveq	#13,d2
00075CD0 4EB8 1644                  		jsr	ShowVDPGraphics
00075CD4 7014                       		moveq	#20,d0
00075CD6 4EB8 2302                  		jsr	PalLoad2	; load pallet
00075CDA                            		
00075CDA                            Sound_E5_StartPCM:
00075CDA 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00075CE0 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
00075CE6 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00075CEE                            PlayPCM_LoopE5:	  
00075CEE                            
00075CEE 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075CF4                            		
00075CF4 5278 FE24                  		addq.w	#1,($FFFFFE24).w
00075CF8                            		
00075CF8 1038 FE24                  		move.b	($FFFFFE24).w,d0
00075CFC 0200 000F                  		andi.b	#$F,d0
00075D00 6700                       		beq.s	SfxE5SwapPalette
00075D02                            		
00075D02 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00075D06 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
00075D0A 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00075D0C 67CC                       		beq.s	Sound_E5_StartPCM			; If d3 = 0, we finished playing the PCM sample, DONT STOP
00075D0E 60DE                       		bra.s	PlayPCM_LoopE5
00075D10                            		
00075D10                            SfxE5SwapPalette:
00075D10                            		
00075D10 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
00075D16                            		
00075D16                            		
00075D16 0838 0004 FE24             		btst	#4,($FFFFFE24).w
00075D1C 6700                       		beq.s	@not_black
00075D1E 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
00075D24 6000                       		bra.s	@merge
00075D26                            	@not_black:
00075D26 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
00075D2C                            	@merge:
00075D2C 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
00075D30 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
00075D34 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
00075D3A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00075D3E                            		
00075D3E 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
00075D42 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
00075D46 60A6                       		bra.s	PlayPCM_LoopE5
00075D48                            		
00075D48                            ; ===========================================================================
00075D48                            ; ---------------------------------------------------------------------------
00075D48                            ; Play music track $81-$9F
00075D48                            ; ---------------------------------------------------------------------------
00075D48                            
00075D48                            Sound_81to9F:				; XREF: Sound_ChkValue
00075D48 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00075D4C 6600                       		bne.s	loc_72024	; if not, branch
00075D4E 4A2E 0027                  		tst.b	$27(a6)
00075D52 6600 0000                  		bne.w	loc_721B6
00075D56 4BEE 0040                  		lea	$40(a6),a5
00075D5A 7009                       		moveq	#9,d0
00075D5C                            
00075D5C                            loc_71FE6:
00075D5C 0895 0002                  		bclr	#2,(a5)
00075D60 DAFC 0030                  		adda.w	#$30,a5
00075D64 51C8 FFF6                  		dbf	d0,loc_71FE6
00075D68                            
00075D68 4BEE 0220                  		lea	$220(a6),a5
00075D6C 7005                       		moveq	#5,d0
00075D6E                            
00075D6E                            loc_71FF8:
00075D6E 0895 0007                  		bclr	#7,(a5)
00075D72 DAFC 0030                  		adda.w	#$30,a5
00075D76 51C8 FFF6                  		dbf	d0,loc_71FF8
00075D7A 4216                       		clr.b	0(a6)
00075D7C 204E                       		movea.l	a6,a0
00075D7E 43EE 03A0                  		lea	$3A0(a6),a1
00075D82 303C 0087                  		move.w	#$87,d0
00075D86                            
00075D86                            loc_72012:
00075D86 22D8                       		move.l	(a0)+,(a1)+
00075D88 51C8 FFFC                  		dbf	d0,loc_72012
00075D8C                            
00075D8C 1D7C 0080 0027             		move.b	#$80,$27(a6)
00075D92 4216                       		clr.b	0(a6)
00075D94 6000                       		bra.s	loc_7202C
00075D96                            ; ===========================================================================
00075D96                            
00075D96                            loc_72024:
00075D96 422E 0027                  		clr.b	$27(a6)
00075D9A 422E 0026                  		clr.b	$26(a6)
00075D9E                            
00075D9E                            loc_7202C:
00075D9E 4EBA 0000                  		jsr	sub_725CA(pc)
00075DA2 2879 0007 55FE             		movea.l	(off_719A0).l,a4
00075DA8 0407 0081                  		subi.b	#$81,d7
00075DAC 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00075DB2 2879 0007 55F6             		movea.l	(Go_MusicIndex).l,a4
00075DB8 E54F                       		lsl.w	#2,d7
00075DBA 2874 7000                  		movea.l	(a4,d7.w),a4
00075DBE 7000                       		moveq	#0,d0
00075DC0 3014                       		move.w	(a4),d0
00075DC2 D08C                       		add.l	a4,d0
00075DC4 2D40 0018                  		move.l	d0,$18(a6)
00075DC8 102C 0005                  		move.b	5(a4),d0
00075DCC 1D40 0028                  		move.b	d0,$28(a6)
00075DD0 4A2E 002A                  		tst.b	$2A(a6)
00075DD4 6700                       		beq.s	loc_72068
00075DD6 102E 0029                  		move.b	$29(a6),d0
00075DDA                            
00075DDA                            loc_72068:
00075DDA 1D40 0002                  		move.b	d0,2(a6)
00075DDE 1D40 0001                  		move.b	d0,1(a6)
00075DE2 7200                       		moveq	#0,d1
00075DE4 264C                       		movea.l	a4,a3
00075DE6 5C4C                       		addq.w	#6,a4
00075DE8 7E00                       		moveq	#0,d7
00075DEA 1E2B 0002                  		move.b	2(a3),d7
00075DEE 6700 0000                  		beq.w	loc_72114
00075DF2 5307                       		subq.b	#1,d7
00075DF4 123C 00C0                  		move.b	#-$40,d1
00075DF8 182B 0004                  		move.b	4(a3),d4
00075DFC 7C30                       		moveq	#$30,d6
00075DFE 1A3C 0001                  		move.b	#1,d5
00075E02 43EE 0040                  		lea	$40(a6),a1
00075E06 45FA 0000                  		lea	byte_721BA(pc),a2
00075E0A                            
00075E0A                            loc_72098:
00075E0A 08D1 0007                  		bset	#7,(a1)
00075E0E 135A 0001                  		move.b	(a2)+,1(a1)
00075E12 1344 0002                  		move.b	d4,2(a1)
00075E16 1346 000D                  		move.b	d6,$D(a1)
00075E1A 1341 000A                  		move.b	d1,$A(a1)
00075E1E 1345 000E                  		move.b	d5,$E(a1)
00075E22 7000                       		moveq	#0,d0
00075E24 301C                       		move.w	(a4)+,d0
00075E26 D08B                       		add.l	a3,d0
00075E28 2340 0004                  		move.l	d0,4(a1)
00075E2C 335C 0008                  		move.w	(a4)+,8(a1)
00075E30 D2C6                       		adda.w	d6,a1
00075E32 51CF FFD6                  		dbf	d7,loc_72098
00075E36 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00075E3C 6600                       		bne.s	loc_720D8
00075E3E 702B                       		moveq	#$2B,d0
00075E40 7200                       		moveq	#0,d1
00075E42 4EBA 0000                  		jsr	sub_7272E(pc)
00075E46 6000 0000                  		bra.w	loc_72114
00075E4A                            ; ===========================================================================
00075E4A                            
00075E4A                            loc_720D8:
00075E4A 7028                       		moveq	#$28,d0
00075E4C 7206                       		moveq	#6,d1
00075E4E 4EBA 0000                  		jsr	sub_7272E(pc)
00075E52 103C 0042                  		move.b	#$42,d0
00075E56 727F                       		moveq	#$7F,d1
00075E58 4EBA 0000                  		jsr	sub_72764(pc)
00075E5C 103C 004A                  		move.b	#$4A,d0
00075E60 727F                       		moveq	#$7F,d1
00075E62 4EBA 0000                  		jsr	sub_72764(pc)
00075E66 103C 0046                  		move.b	#$46,d0
00075E6A 727F                       		moveq	#$7F,d1
00075E6C 4EBA 0000                  		jsr	sub_72764(pc)
00075E70 103C 004E                  		move.b	#$4E,d0
00075E74 727F                       		moveq	#$7F,d1
00075E76 4EBA 0000                  		jsr	sub_72764(pc)
00075E7A 103C 00B6                  		move.b	#-$4A,d0
00075E7E 123C 00C0                  		move.b	#-$40,d1
00075E82 4EBA 0000                  		jsr	sub_72764(pc)
00075E86                            
00075E86                            loc_72114:
00075E86 7E00                       		moveq	#0,d7
00075E88 1E2B 0003                  		move.b	3(a3),d7
00075E8C 6700                       		beq.s	loc_72154
00075E8E 5307                       		subq.b	#1,d7
00075E90 43EE 0190                  		lea	$190(a6),a1
00075E94 45FA 0000                  		lea	byte_721C2(pc),a2
00075E98                            
00075E98                            loc_72126:
00075E98 08D1 0007                  		bset	#7,(a1)
00075E9C 135A 0001                  		move.b	(a2)+,1(a1)
00075EA0 1344 0002                  		move.b	d4,2(a1)
00075EA4 1346 000D                  		move.b	d6,$D(a1)
00075EA8 1345 000E                  		move.b	d5,$E(a1)
00075EAC 7000                       		moveq	#0,d0
00075EAE 301C                       		move.w	(a4)+,d0
00075EB0 D08B                       		add.l	a3,d0
00075EB2 2340 0004                  		move.l	d0,4(a1)
00075EB6 335C 0008                  		move.w	(a4)+,8(a1)
00075EBA 101C                       		move.b	(a4)+,d0
00075EBC 135C 000B                  		move.b	(a4)+,$B(a1)
00075EC0 D2C6                       		adda.w	d6,a1
00075EC2 51CF FFD4                  		dbf	d7,loc_72126
00075EC6                            
00075EC6                            loc_72154:
00075EC6 43EE 0220                  		lea	$220(a6),a1
00075ECA 7E05                       		moveq	#5,d7
00075ECC                            
00075ECC                            loc_7215A:
00075ECC 4A11                       		tst.b	(a1)
00075ECE 6A00 0000                  		bpl.w	loc_7217C
00075ED2 7000                       		moveq	#0,d0
00075ED4 1029 0001                  		move.b	1(a1),d0
00075ED8 6B00                       		bmi.s	loc_7216E
00075EDA 5500                       		subq.b	#2,d0
00075EDC E508                       		lsl.b	#2,d0
00075EDE 6000                       		bra.s	loc_72170
00075EE0                            ; ===========================================================================
00075EE0                            
00075EE0                            loc_7216E:
00075EE0 E608                       		lsr.b	#3,d0
00075EE2                            
00075EE2                            loc_72170:
00075EE2 41FA 0000                  		lea	dword_722CC(pc),a0
00075EE6 2070 0000                  		movea.l	(a0,d0.w),a0
00075EEA 08D0 0002                  		bset	#2,(a0)
00075EEE                            
00075EEE                            loc_7217C:
00075EEE D2C6                       		adda.w	d6,a1
00075EF0 51CF FFDA                  		dbf	d7,loc_7215A
00075EF4                            
00075EF4 4A6E 0340                  		tst.w	$340(a6)
00075EF8 6A00                       		bpl.s	loc_7218E
00075EFA 08EE 0002 0100             		bset	#2,$100(a6)
00075F00                            
00075F00                            loc_7218E:
00075F00 4A6E 0370                  		tst.w	$370(a6)
00075F04 6A00                       		bpl.s	loc_7219A
00075F06 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075F0C                            
00075F0C                            loc_7219A:
00075F0C 4BEE 0070                  		lea	$70(a6),a5
00075F10 7805                       		moveq	#5,d4
00075F12                            
00075F12                            loc_721A0:
00075F12 4EBA 0000                  		jsr	sub_726FE(pc)
00075F16 DAC6                       		adda.w	d6,a5
00075F18 51CC FFF8                  		dbf	d4,loc_721A0
00075F1C 7802                       		moveq	#2,d4
00075F1E                            
00075F1E                            loc_721AC:
00075F1E 4EBA 0000                  		jsr	sub_729A0(pc)
00075F22 DAC6                       		adda.w	d6,a5
00075F24 51CC FFF8                  		dbf	d4,loc_721AC
00075F28                            
00075F28                            loc_721B6:
00075F28 584F                       		addq.w	#4,sp
00075F2A 4E75                       		rts	
00075F2C                            ; ===========================================================================
00075F2C 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00075F34                            		even
00075F34 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00075F38                            		even
00075F38                            ; ===========================================================================
00075F38                            ; ---------------------------------------------------------------------------
00075F38                            ; Play normal sound effect
00075F38                            ; ---------------------------------------------------------------------------
00075F38                            
00075F38                            Sound_A0toCF:				; XREF: Sound_ChkValue
00075F38 4A2E 0027                  		tst.b	$27(a6)
00075F3C 6600 0000                  		bne.w	loc_722C6
00075F40 4A2E 0004                  		tst.b	4(a6)
00075F44 6600 0000                  		bne.w	loc_722C6
00075F48 4A2E 0024                  		tst.b	$24(a6)
00075F4C 6600 0000                  		bne.w	loc_722C6
00075F50 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00075F54 6600                       		bne.s	Sound_notB5	; if not, branch
00075F56 4A2E 002B                  		tst.b	$2B(a6)
00075F5A 6600                       		bne.s	loc_721EE
00075F5C 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00075F60                            
00075F60                            loc_721EE:
00075F60 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00075F66                            
00075F66                            Sound_notB5:
00075F66 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00075F6A 6600                       		bne.s	Sound_notA7	; if not, branch
00075F6C 4A2E 002C                  		tst.b	$2C(a6)
00075F70 6600 0000                  		bne.w	locret_722C4
00075F74 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00075F7A                            
00075F7A                            Sound_notA7:
00075F7A 2079 0007 55FA             		movea.l	(Go_SoundIndex).l,a0
00075F80 0407 00A0                  		subi.b	#$A0,d7
00075F84 E54F                       		lsl.w	#2,d7
00075F86 2670 7000                  		movea.l	(a0,d7.w),a3
00075F8A 224B                       		movea.l	a3,a1
00075F8C 7200                       		moveq	#0,d1
00075F8E 3219                       		move.w	(a1)+,d1
00075F90 D28B                       		add.l	a3,d1
00075F92 1A19                       		move.b	(a1)+,d5
00075F94 1E19                       		move.b	(a1)+,d7
00075F96 5307                       		subq.b	#1,d7
00075F98 7C30                       		moveq	#$30,d6
00075F9A                            
00075F9A                            loc_72228:
00075F9A 7600                       		moveq	#0,d3
00075F9C 1629 0001                  		move.b	1(a1),d3
00075FA0 1803                       		move.b	d3,d4
00075FA2 6B00                       		bmi.s	loc_72244
00075FA4 5543                       		subq.w	#2,d3
00075FA6 E54B                       		lsl.w	#2,d3
00075FA8 4BFA 0000                  		lea	dword_722CC(pc),a5
00075FAC 2A75 3000                  		movea.l	(a5,d3.w),a5
00075FB0 08D5 0002                  		bset	#2,(a5)
00075FB4 6000                       		bra.s	loc_7226E
00075FB6                            ; ===========================================================================
00075FB6                            
00075FB6                            loc_72244:
00075FB6 E64B                       		lsr.w	#3,d3
00075FB8 4BFA 0000                  		lea	dword_722CC(pc),a5
00075FBC 2A75 3000                  		movea.l	(a5,d3.w),a5
00075FC0 08D5 0002                  		bset	#2,(a5)
00075FC4 0C04 00C0                  		cmpi.b	#$C0,d4
00075FC8 6600                       		bne.s	loc_7226E
00075FCA 1004                       		move.b	d4,d0
00075FCC 0000 001F                  		ori.b	#$1F,d0
00075FD0 13C0 00C0 0011             		move.b	d0,($C00011).l
00075FD6 0840 0005                  		bchg	#5,d0
00075FDA 13C0 00C0 0011             		move.b	d0,($C00011).l
00075FE0                            
00075FE0                            loc_7226E:
00075FE0 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00075FE4 244D                       		movea.l	a5,a2
00075FE6 700B                       		moveq	#$B,d0
00075FE8                            
00075FE8                            loc_72276:
00075FE8 429A                       		clr.l	(a2)+
00075FEA 51C8 FFFC                  		dbf	d0,loc_72276
00075FEE                            
00075FEE 3A99                       		move.w	(a1)+,(a5)
00075FF0 1B45 0002                  		move.b	d5,2(a5)
00075FF4 7000                       		moveq	#0,d0
00075FF6 3019                       		move.w	(a1)+,d0
00075FF8 D08B                       		add.l	a3,d0
00075FFA 2B40 0004                  		move.l	d0,4(a5)
00075FFE 3B59 0008                  		move.w	(a1)+,8(a5)
00076002 1B7C 0001 000E             		move.b	#1,$E(a5)
00076008 1B46 000D                  		move.b	d6,$D(a5)
0007600C 4A04                       		tst.b	d4
0007600E 6B00                       		bmi.s	loc_722A8
00076010 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00076016 2B41 0020                  		move.l	d1,$20(a5)
0007601A                            
0007601A                            loc_722A8:
0007601A 51CF FF7E                  		dbf	d7,loc_72228
0007601E                            
0007601E 4A2E 0250                  		tst.b	$250(a6)
00076022 6A00                       		bpl.s	loc_722B8
00076024 08EE 0002 0340             		bset	#2,$340(a6)
0007602A                            
0007602A                            loc_722B8:
0007602A 4A2E 0310                  		tst.b	$310(a6)
0007602E 6A00                       		bpl.s	locret_722C4
00076030 08EE 0002 0370             		bset	#2,$370(a6)
00076036                            
00076036                            locret_722C4:
00076036 4E75                       		rts	
00076038                            ; ===========================================================================
00076038                            
00076038                            loc_722C6:
00076038 4216                       		clr.b	0(a6)
0007603A 4E75                       		rts	
0007603C                            ; ===========================================================================
0007603C 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00076040 0000 0000                  		dc.l 0
00076044 00FF F100                  		dc.l $FFF100
00076048 00FF F130                  		dc.l $FFF130
0007604C 00FF F190                  		dc.l $FFF190
00076050 00FF F1C0                  		dc.l $FFF1C0
00076054 00FF F1F0                  		dc.l $FFF1F0
00076058 00FF F1F0                  		dc.l $FFF1F0
0007605C 00FF F220                  dword_722EC:	dc.l $FFF220
00076060 0000 0000                  		dc.l 0
00076064 00FF F250                  		dc.l $FFF250
00076068 00FF F280                  		dc.l $FFF280
0007606C 00FF F2B0                  		dc.l $FFF2B0
00076070 00FF F2E0                  		dc.l $FFF2E0
00076074 00FF F310                  		dc.l $FFF310
00076078 00FF F310                  		dc.l $FFF310
0007607C                            ; ===========================================================================
0007607C                            ; ---------------------------------------------------------------------------
0007607C                            ; Play GHZ waterfall sound
0007607C                            ; ---------------------------------------------------------------------------
0007607C                            
0007607C                            Sound_D0toDF:				; XREF: Sound_ChkValue
0007607C 4A2E 0027                  		tst.b	$27(a6)
00076080 6600 0000                  		bne.w	locret_723C6
00076084 4A2E 0004                  		tst.b	4(a6)
00076088 6600 0000                  		bne.w	locret_723C6
0007608C 4A2E 0024                  		tst.b	$24(a6)
00076090 6600 0000                  		bne.w	locret_723C6
00076094 2079 0007 55F2             		movea.l	(Go_SoundD0).l,a0
0007609A 0407 00D0                  		subi.b	#$D0,d7
0007609E E54F                       		lsl.w	#2,d7
000760A0 2670 7000                  		movea.l	(a0,d7.w),a3
000760A4 224B                       		movea.l	a3,a1
000760A6 7000                       		moveq	#0,d0
000760A8 3019                       		move.w	(a1)+,d0
000760AA D08B                       		add.l	a3,d0
000760AC 2D40 0020                  		move.l	d0,$20(a6)
000760B0 1A19                       		move.b	(a1)+,d5
000760B2 1E19                       		move.b	(a1)+,d7
000760B4 5307                       		subq.b	#1,d7
000760B6 7C30                       		moveq	#$30,d6
000760B8                            
000760B8                            loc_72348:
000760B8 1829 0001                  		move.b	1(a1),d4
000760BC 6B00                       		bmi.s	loc_7235A
000760BE 08EE 0002 0100             		bset	#2,$100(a6)
000760C4 4BEE 0340                  		lea	$340(a6),a5
000760C8 6000                       		bra.s	loc_72364
000760CA                            ; ===========================================================================
000760CA                            
000760CA                            loc_7235A:
000760CA 08EE 0002 01F0             		bset	#2,$1F0(a6)
000760D0 4BEE 0370                  		lea	$370(a6),a5
000760D4                            
000760D4                            loc_72364:
000760D4 244D                       		movea.l	a5,a2
000760D6 700B                       		moveq	#$B,d0
000760D8                            
000760D8                            loc_72368:
000760D8 429A                       		clr.l	(a2)+
000760DA 51C8 FFFC                  		dbf	d0,loc_72368
000760DE                            
000760DE 3A99                       		move.w	(a1)+,(a5)
000760E0 1B45 0002                  		move.b	d5,2(a5)
000760E4 7000                       		moveq	#0,d0
000760E6 3019                       		move.w	(a1)+,d0
000760E8 D08B                       		add.l	a3,d0
000760EA 2B40 0004                  		move.l	d0,4(a5)
000760EE 3B59 0008                  		move.w	(a1)+,8(a5)
000760F2 1B7C 0001 000E             		move.b	#1,$E(a5)
000760F8 1B46 000D                  		move.b	d6,$D(a5)
000760FC 4A04                       		tst.b	d4
000760FE 6B00                       		bmi.s	loc_72396
00076100 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00076106                            
00076106                            loc_72396:
00076106 51CF FFB0                  		dbf	d7,loc_72348
0007610A                            
0007610A 4A2E 0250                  		tst.b	$250(a6)
0007610E 6A00                       		bpl.s	loc_723A6
00076110 08EE 0002 0340             		bset	#2,$340(a6)
00076116                            
00076116                            loc_723A6:
00076116 4A2E 0310                  		tst.b	$310(a6)
0007611A 6A00                       		bpl.s	locret_723C6
0007611C 08EE 0002 0370             		bset	#2,$370(a6)
00076122 0004 001F                  		ori.b	#$1F,d4
00076126 13C4 00C0 0011             		move.b	d4,($C00011).l
0007612C 0844 0005                  		bchg	#5,d4
00076130 13C4 00C0 0011             		move.b	d4,($C00011).l
00076136                            
00076136                            locret_723C6:
00076136 4E75                       		rts	
00076138                            ; End of function Sound_ChkValue
00076138                            
00076138                            ; ===========================================================================
00076138 00FF F100                  		dc.l $FFF100
0007613C 00FF F1F0                  		dc.l $FFF1F0
00076140 00FF F250                  		dc.l $FFF250
00076144 00FF F310                  		dc.l $FFF310
00076148 00FF F340                  		dc.l $FFF340
0007614C 00FF F370                  		dc.l $FFF370
00076150                            
00076150                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076150                            
00076150                            
00076150                            Snd_FadeOut1:				; XREF: Sound_E0
00076150 4216                       		clr.b	0(a6)
00076152 4BEE 0220                  		lea	$220(a6),a5
00076156 7E05                       		moveq	#5,d7
00076158                            
00076158                            loc_723EA:
00076158 4A15                       		tst.b	(a5)
0007615A 6A00 0000                  		bpl.w	loc_72472
0007615E 0895 0007                  		bclr	#7,(a5)
00076162 7600                       		moveq	#0,d3
00076164 162D 0001                  		move.b	1(a5),d3
00076168 6B00                       		bmi.s	loc_7243C
0007616A 4EBA 0000                  		jsr	sub_726FE(pc)
0007616E 0C03 0004                  		cmpi.b	#4,d3
00076172 6600                       		bne.s	loc_72416
00076174 4A2E 0340                  		tst.b	$340(a6)
00076178 6A00                       		bpl.s	loc_72416
0007617A 4BEE 0340                  		lea	$340(a6),a5
0007617E 226E 0020                  		movea.l	$20(a6),a1
00076182 6000                       		bra.s	loc_72428
00076184                            ; ===========================================================================
00076184                            
00076184                            loc_72416:
00076184 5503                       		subq.b	#2,d3
00076186 E50B                       		lsl.b	#2,d3
00076188 41FA FEB2                  		lea	dword_722CC(pc),a0
0007618C 264D                       		movea.l	a5,a3
0007618E 2A70 3000                  		movea.l	(a0,d3.w),a5
00076192 226E 0018                  		movea.l	$18(a6),a1
00076196                            
00076196                            loc_72428:
00076196 0895 0002                  		bclr	#2,(a5)
0007619A 08D5 0001                  		bset	#1,(a5)
0007619E 102D 000B                  		move.b	$B(a5),d0
000761A2 4EBA 0000                  		jsr	sub_72C4E(pc)
000761A6 2A4B                       		movea.l	a3,a5
000761A8 6000                       		bra.s	loc_72472
000761AA                            ; ===========================================================================
000761AA                            
000761AA                            loc_7243C:
000761AA 4EBA 0000                  		jsr	sub_729A0(pc)
000761AE 41EE 0370                  		lea	$370(a6),a0
000761B2 0C03 00E0                  		cmpi.b	#$E0,d3
000761B6 6700                       		beq.s	loc_7245A
000761B8 0C03 00C0                  		cmpi.b	#$C0,d3
000761BC 6700                       		beq.s	loc_7245A
000761BE E60B                       		lsr.b	#3,d3
000761C0 41FA FE7A                  		lea	dword_722CC(pc),a0
000761C4 2070 3000                  		movea.l	(a0,d3.w),a0
000761C8                            
000761C8                            loc_7245A:
000761C8 0890 0002                  		bclr	#2,(a0)
000761CC 08D0 0001                  		bset	#1,(a0)
000761D0 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000761D6 6600                       		bne.s	loc_72472
000761D8 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000761E0                            
000761E0                            loc_72472:
000761E0 DAFC 0030                  		adda.w	#$30,a5
000761E4 51CF FF72                  		dbf	d7,loc_723EA
000761E8                            
000761E8 4E75                       		rts	
000761EA                            ; End of function Snd_FadeOut1
000761EA                            
000761EA                            
000761EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000761EA                            
000761EA                            
000761EA                            Snd_FadeOut2:				; XREF: Sound_E0
000761EA 4BEE 0340                  		lea	$340(a6),a5
000761EE 4A15                       		tst.b	(a5)
000761F0 6A00                       		bpl.s	loc_724AE
000761F2 0895 0007                  		bclr	#7,(a5)
000761F6 0815 0002                  		btst	#2,(a5)
000761FA 6600                       		bne.s	loc_724AE
000761FC 4EBA 0000                  		jsr	loc_7270A(pc)
00076200 4BEE 0100                  		lea	$100(a6),a5
00076204 0895 0002                  		bclr	#2,(a5)
00076208 08D5 0001                  		bset	#1,(a5)
0007620C 4A15                       		tst.b	(a5)
0007620E 6A00                       		bpl.s	loc_724AE
00076210 226E 0018                  		movea.l	$18(a6),a1
00076214 102D 000B                  		move.b	$B(a5),d0
00076218 4EBA 0000                  		jsr	sub_72C4E(pc)
0007621C                            
0007621C                            loc_724AE:
0007621C 4BEE 0370                  		lea	$370(a6),a5
00076220 4A15                       		tst.b	(a5)
00076222 6A00                       		bpl.s	locret_724E4
00076224 0895 0007                  		bclr	#7,(a5)
00076228 0815 0002                  		btst	#2,(a5)
0007622C 6600                       		bne.s	locret_724E4
0007622E 4EBA 0000                  		jsr	loc_729A6(pc)
00076232 4BEE 01F0                  		lea	$1F0(a6),a5
00076236 0895 0002                  		bclr	#2,(a5)
0007623A 08D5 0001                  		bset	#1,(a5)
0007623E 4A15                       		tst.b	(a5)
00076240 6A00                       		bpl.s	locret_724E4
00076242 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00076248 6600                       		bne.s	locret_724E4
0007624A 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00076252                            
00076252                            locret_724E4:
00076252 4E75                       		rts	
00076254                            ; End of function Snd_FadeOut2
00076254                            
00076254                            ; ===========================================================================
00076254                            ; ---------------------------------------------------------------------------
00076254                            ; Fade out music
00076254                            ; ---------------------------------------------------------------------------
00076254                            
00076254                            Sound_E0:				; XREF: Sound_ExIndex
00076254 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00076258 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0007625C 1D7C 0003 0006             		move.b	#3,6(a6)
00076262 1D7C 0028 0004             		move.b	#$28,4(a6)
00076268 422E 0040                  		clr.b	$40(a6)
0007626C 422E 002A                  		clr.b	$2A(a6)
00076270 4E75                       		rts	
00076272                            
00076272                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076272                            
00076272                            
00076272                            sub_72504:				; XREF: sub_71B4C
00076272 102E 0006                  		move.b	6(a6),d0
00076276 6700                       		beq.s	loc_72510
00076278 532E 0006                  		subq.b	#1,6(a6)
0007627C 4E75                       		rts	
0007627E                            ; ===========================================================================
0007627E                            
0007627E                            loc_72510:
0007627E 532E 0004                  		subq.b	#1,4(a6)
00076282 6700 0000                  		beq.w	Sound_E4
00076286 1D7C 0003 0006             		move.b	#3,6(a6)
0007628C 4BEE 0070                  		lea	$70(a6),a5
00076290 7E05                       		moveq	#5,d7
00076292                            
00076292                            loc_72524:
00076292 4A15                       		tst.b	(a5)
00076294 6A00                       		bpl.s	loc_72538
00076296 522D 0009                  		addq.b	#1,9(a5)
0007629A 6A00                       		bpl.s	loc_72534
0007629C 0895 0007                  		bclr	#7,(a5)
000762A0 6000                       		bra.s	loc_72538
000762A2                            ; ===========================================================================
000762A2                            
000762A2                            loc_72534:
000762A2 4EBA 0000                  		jsr	sub_72CB4(pc)
000762A6                            
000762A6                            loc_72538:
000762A6 DAFC 0030                  		adda.w	#$30,a5
000762AA 51CF FFE6                  		dbf	d7,loc_72524
000762AE                            
000762AE 7E02                       		moveq	#2,d7
000762B0                            
000762B0                            loc_72542:
000762B0 4A15                       		tst.b	(a5)
000762B2 6A00                       		bpl.s	loc_72560
000762B4 522D 0009                  		addq.b	#1,9(a5)
000762B8 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000762BE 6500                       		bcs.s	loc_72558
000762C0 0895 0007                  		bclr	#7,(a5)
000762C4 6000                       		bra.s	loc_72560
000762C6                            ; ===========================================================================
000762C6                            
000762C6                            loc_72558:
000762C6 1C2D 0009                  		move.b	9(a5),d6
000762CA 4EBA 0000                  		jsr	sub_7296A(pc)
000762CE                            
000762CE                            loc_72560:
000762CE DAFC 0030                  		adda.w	#$30,a5
000762D2 51CF FFDC                  		dbf	d7,loc_72542
000762D6                            
000762D6 4E75                       		rts	
000762D8                            ; End of function sub_72504
000762D8                            
000762D8                            
000762D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000762D8                            
000762D8                            
000762D8                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000762D8 7602                       		moveq	#2,d3
000762DA 7028                       		moveq	#$28,d0
000762DC                            
000762DC                            loc_7256E:
000762DC 1203                       		move.b	d3,d1
000762DE 4EBA 0000                  		jsr	sub_7272E(pc)
000762E2 5801                       		addq.b	#4,d1
000762E4 4EBA 0000                  		jsr	sub_7272E(pc)
000762E8 51CB FFF2                  		dbf	d3,loc_7256E
000762EC                            
000762EC 7040                       		moveq	#$40,d0
000762EE 727F                       		moveq	#$7F,d1
000762F0 7802                       		moveq	#2,d4
000762F2                            
000762F2                            loc_72584:
000762F2 7603                       		moveq	#3,d3
000762F4                            
000762F4                            loc_72586:
000762F4 4EBA 0000                  		jsr	sub_7272E(pc)
000762F8 4EBA 0000                  		jsr	sub_72764(pc)
000762FC 5840                       		addq.w	#4,d0
000762FE 51CB FFF4                  		dbf	d3,loc_72586
00076302                            
00076302 0400 000F                  		subi.b	#$F,d0
00076306 51CC FFEA                  		dbf	d4,loc_72584
0007630A                            
0007630A 4E75                       		rts	
0007630C                            ; End of function sub_7256A
0007630C                            
0007630C                            ; ===========================================================================
0007630C                            ; ---------------------------------------------------------------------------
0007630C                            ; Stop music
0007630C                            ; ---------------------------------------------------------------------------
0007630C                            
0007630C                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007630C 702B                       		moveq	#$2B,d0
0007630E 123C 0080                  		move.b	#$80,d1
00076312 4EBA 0000                  		jsr	sub_7272E(pc)
00076316 7027                       		moveq	#$27,d0
00076318 7200                       		moveq	#0,d1
0007631A 4EBA 0000                  		jsr	sub_7272E(pc)
0007631E 204E                       		movea.l	a6,a0
00076320 303C 00E3                  		move.w	#$E3,d0
00076324                            
00076324                            loc_725B6:
00076324 4298                       		clr.l	(a0)+
00076326 51C8 FFFC                  		dbf	d0,loc_725B6
0007632A                            
0007632A 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00076330 4EBA FFA6                  		jsr	sub_7256A(pc)
00076334 6000 0000                  		bra.w	sub_729B6
00076338                            
00076338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076338                            
00076338                            
00076338                            sub_725CA:				; XREF: Sound_ChkValue
00076338 204E                       		movea.l	a6,a0
0007633A 1216                       		move.b	0(a6),d1
0007633C 142E 0027                  		move.b	$27(a6),d2
00076340 162E 002A                  		move.b	$2A(a6),d3
00076344 182E 0026                  		move.b	$26(a6),d4
00076348 3A2E 000A                  		move.w	$A(a6),d5
0007634C 303C 0087                  		move.w	#$87,d0
00076350                            
00076350                            loc_725E4:
00076350 4298                       		clr.l	(a0)+
00076352 51C8 FFFC                  		dbf	d0,loc_725E4
00076356                            
00076356 1C81                       		move.b	d1,0(a6)
00076358 1D42 0027                  		move.b	d2,$27(a6)
0007635C 1D43 002A                  		move.b	d3,$2A(a6)
00076360 1D44 0026                  		move.b	d4,$26(a6)
00076364 3D45 000A                  		move.w	d5,$A(a6)
00076368 1D7C 0080 0009             		move.b	#$80,9(a6)
0007636E 4EBA FF68                  		jsr	sub_7256A(pc)
00076372 6000 0000                  		bra.w	sub_729B6
00076376                            ; End of function sub_725CA
00076376                            
00076376                            
00076376                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076376                            
00076376                            
00076376                            sub_7260C:				; XREF: sub_71B4C
00076376 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007637C 41EE 004E                  		lea	$4E(a6),a0
00076380 7030                       		moveq	#$30,d0
00076382 7209                       		moveq	#9,d1
00076384                            
00076384                            loc_7261A:
00076384 5210                       		addq.b	#1,(a0)
00076386 D0C0                       		adda.w	d0,a0
00076388 51C9 FFFA                  		dbf	d1,loc_7261A
0007638C                            
0007638C 4E75                       		rts	
0007638E                            ; End of function sub_7260C
0007638E                            
0007638E                            ; ===========================================================================
0007638E                            ; ---------------------------------------------------------------------------
0007638E                            ; Speed	up music
0007638E                            ; ---------------------------------------------------------------------------
0007638E                            
0007638E                            Sound_E2:				; XREF: Sound_ExIndex
0007638E 4A2E 0027                  		tst.b	$27(a6)
00076392 6600                       		bne.s	loc_7263E
00076394 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007639A 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000763A0 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000763A6 4E75                       		rts	
000763A8                            ; ===========================================================================
000763A8                            
000763A8                            loc_7263E:
000763A8 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
000763AE 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
000763B4 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
000763BA 4E75                       		rts	
000763BC                            ; ===========================================================================
000763BC                            ; ---------------------------------------------------------------------------
000763BC                            ; Change music back to normal speed
000763BC                            ; ---------------------------------------------------------------------------
000763BC                            
000763BC                            Sound_E3:				; XREF: Sound_ExIndex
000763BC 4A2E 0027                  		tst.b	$27(a6)
000763C0 6600                       		bne.s	loc_7266A
000763C2 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000763C8 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000763CE 422E 002A                  		clr.b	$2A(a6)
000763D2 4E75                       		rts	
000763D4                            ; ===========================================================================
000763D4                            
000763D4                            loc_7266A:
000763D4 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
000763DA 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
000763E0 422E 03CA                  		clr.b	$3CA(a6)
000763E4 4E75                       		rts	
000763E6                            
000763E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000763E6                            
000763E6                            
000763E6                            sub_7267C:				; XREF: sub_71B4C
000763E6 4A2E 0025                  		tst.b	$25(a6)
000763EA 6700                       		beq.s	loc_72688
000763EC 532E 0025                  		subq.b	#1,$25(a6)
000763F0 4E75                       		rts	
000763F2                            ; ===========================================================================
000763F2                            
000763F2                            loc_72688:
000763F2 4A2E 0026                  		tst.b	$26(a6)
000763F6 6700                       		beq.s	loc_726D6
000763F8 532E 0026                  		subq.b	#1,$26(a6)
000763FC 1D7C 0002 0025             		move.b	#2,$25(a6)
00076402 4BEE 0070                  		lea	$70(a6),a5
00076406 7E05                       		moveq	#5,d7
00076408                            
00076408                            loc_7269E:
00076408 4A15                       		tst.b	(a5)
0007640A 6A00                       		bpl.s	loc_726AA
0007640C 532D 0009                  		subq.b	#1,9(a5)
00076410 4EBA 0000                  		jsr	sub_72CB4(pc)
00076414                            
00076414                            loc_726AA:
00076414 DAFC 0030                  		adda.w	#$30,a5
00076418 51CF FFEE                  		dbf	d7,loc_7269E
0007641C 7E02                       		moveq	#2,d7
0007641E                            
0007641E                            loc_726B4:
0007641E 4A15                       		tst.b	(a5)
00076420 6A00                       		bpl.s	loc_726CC
00076422 532D 0009                  		subq.b	#1,9(a5)
00076426 1C2D 0009                  		move.b	9(a5),d6
0007642A 0C06 0010                  		cmpi.b	#$10,d6
0007642E 6500                       		bcs.s	loc_726C8
00076430 7C0F                       		moveq	#$F,d6
00076432                            
00076432                            loc_726C8:
00076432 4EBA 0000                  		jsr	sub_7296A(pc)
00076436                            
00076436                            loc_726CC:
00076436 DAFC 0030                  		adda.w	#$30,a5
0007643A 51CF FFE2                  		dbf	d7,loc_726B4
0007643E 4E75                       		rts	
00076440                            ; ===========================================================================
00076440                            
00076440                            loc_726D6:
00076440 08AE 0002 0040             		bclr	#2,$40(a6)
00076446 422E 0024                  		clr.b	$24(a6)
0007644A 4E75                       		rts	
0007644C                            ; End of function sub_7267C
0007644C                            
0007644C                            ; ===========================================================================
0007644C                            
0007644C                            loc_726E2:				; XREF: sub_71CCA
0007644C 0815 0001                  		btst	#1,(a5)
00076450 6600                       		bne.s	locret_726FC
00076452 0815 0002                  		btst	#2,(a5)
00076456 6600                       		bne.s	locret_726FC
00076458 7028                       		moveq	#$28,d0
0007645A 122D 0001                  		move.b	1(a5),d1
0007645E 0001 00F0                  		ori.b	#-$10,d1
00076462 6000 0000                  		bra.w	sub_7272E
00076466                            ; ===========================================================================
00076466                            
00076466                            locret_726FC:
00076466 4E75                       		rts	
00076468                            
00076468                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076468                            
00076468                            
00076468                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00076468 0815 0004                  		btst	#4,(a5)
0007646C 6600                       		bne.s	locret_72714
0007646E 0815 0002                  		btst	#2,(a5)
00076472 6600                       		bne.s	locret_72714
00076474                            
00076474                            loc_7270A:				; XREF: Snd_FadeOut2
00076474 7028                       		moveq	#$28,d0
00076476 122D 0001                  		move.b	1(a5),d1
0007647A 6000 0000                  		bra.w	sub_7272E
0007647E                            ; ===========================================================================
0007647E                            
0007647E                            locret_72714:
0007647E 4E75                       		rts	
00076480                            ; End of function sub_726FE
00076480                            
00076480                            ; ===========================================================================
00076480                            
00076480                            loc_72716:				; XREF: sub_72A5A
00076480 0815 0002                  		btst	#2,(a5)
00076484 6600                       		bne.s	locret_72720
00076486 6000 0000                  		bra.w	sub_72722
0007648A                            ; ===========================================================================
0007648A                            
0007648A                            locret_72720:
0007648A 4E75                       		rts	
0007648C                            
0007648C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007648C                            
0007648C                            
0007648C                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007648C 082D 0002 0001             		btst	#2,1(a5)
00076492 6600                       		bne.s	loc_7275A
00076494 D02D 0001                  		add.b	1(a5),d0
00076498                            ; End of function sub_72722
00076498                            
00076498                            
00076498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076498                            
00076498                            
00076498                            sub_7272E:				; XREF: loc_71E6A
00076498 1439 00A0 4000             		move.b	($A04000).l,d2
0007649E 0802 0007                  		btst	#7,d2
000764A2 66F4                       		bne.s	sub_7272E
000764A4 13C0 00A0 4000             		move.b	d0,($A04000).l
000764AA 4E71                       		nop	
000764AC 4E71                       		nop	
000764AE 4E71                       		nop	
000764B0                            
000764B0                            loc_72746:
000764B0 1439 00A0 4000             		move.b	($A04000).l,d2
000764B6 0802 0007                  		btst	#7,d2
000764BA 66F4                       		bne.s	loc_72746
000764BC                            
000764BC 13C1 00A0 4001             		move.b	d1,($A04001).l
000764C2 4E75                       		rts	
000764C4                            ; End of function sub_7272E
000764C4                            
000764C4                            ; ===========================================================================
000764C4                            
000764C4                            loc_7275A:				; XREF: sub_72722
000764C4 142D 0001                  		move.b	1(a5),d2
000764C8 0882 0002                  		bclr	#2,d2
000764CC D002                       		add.b	d2,d0
000764CE                            
000764CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000764CE                            
000764CE                            
000764CE                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
000764CE 1439 00A0 4000             		move.b	($A04000).l,d2
000764D4 0802 0007                  		btst	#7,d2
000764D8 66F4                       		bne.s	sub_72764
000764DA 13C0 00A0 4002             		move.b	d0,($A04002).l
000764E0 4E71                       		nop	
000764E2 4E71                       		nop	
000764E4 4E71                       		nop	
000764E6                            
000764E6                            loc_7277C:
000764E6 1439 00A0 4000             		move.b	($A04000).l,d2
000764EC 0802 0007                  		btst	#7,d2
000764F0 66F4                       		bne.s	loc_7277C
000764F2                            
000764F2 13C1 00A0 4003             		move.b	d1,($A04003).l
000764F8 4E75                       		rts	
000764FA                            ; End of function sub_72764
000764FA                            
000764FA                            ; ===========================================================================
000764FA 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007650C 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007651E 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007652E 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007653E 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007654E 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007655E 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0007656E 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007657E 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007658E 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007659E 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000765AE 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000765BA                            
000765BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000765BA                            
000765BA                            
000765BA                            sub_72850:				; XREF: sub_71B4C
000765BA 532D 000E                  		subq.b	#1,$E(a5)
000765BE 6600                       		bne.s	loc_72866
000765C0 0895 0004                  		bclr	#4,(a5)
000765C4 4EBA 0000                  		jsr	sub_72878(pc)
000765C8 4EBA 0000                  		jsr	sub_728DC(pc)
000765CC 6000 0000                  		bra.w	loc_7292E
000765D0                            ; ===========================================================================
000765D0                            
000765D0                            loc_72866:
000765D0 4EBA F45A                  		jsr	sub_71D9E(pc)
000765D4 4EBA 0000                  		jsr	sub_72926(pc)
000765D8 4EBA F47A                  		jsr	sub_71DC6(pc)
000765DC 4EBA 0000                  		jsr	sub_728E2(pc)
000765E0 4E75                       		rts	
000765E2                            ; End of function sub_72850
000765E2                            
000765E2                            
000765E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000765E2                            
000765E2                            
000765E2                            sub_72878:				; XREF: sub_72850
000765E2 0895 0001                  		bclr	#1,(a5)
000765E6 286D 0004                  		movea.l	4(a5),a4
000765EA                            
000765EA                            loc_72880:
000765EA 7A00                       		moveq	#0,d5
000765EC 1A1C                       		move.b	(a4)+,d5
000765EE 0C05 00E0                  		cmpi.b	#$E0,d5
000765F2 6500                       		bcs.s	loc_72890
000765F4 4EBA 0000                  		jsr	sub_72A5A(pc)
000765F8 60F0                       		bra.s	loc_72880
000765FA                            ; ===========================================================================
000765FA                            
000765FA                            loc_72890:
000765FA 4A05                       		tst.b	d5
000765FC 6A00                       		bpl.s	loc_728A4
000765FE 4EBA 0000                  		jsr	sub_728AC(pc)
00076602 1A1C                       		move.b	(a4)+,d5
00076604 4A05                       		tst.b	d5
00076606 6A00                       		bpl.s	loc_728A4
00076608 534C                       		subq.w	#1,a4
0007660A 6000 F3E2                  		bra.w	sub_71D60
0007660E                            ; ===========================================================================
0007660E                            
0007660E                            loc_728A4:
0007660E 4EBA F3BE                  		jsr	sub_71D40(pc)
00076612 6000 F3DA                  		bra.w	sub_71D60
00076616                            ; End of function sub_72878
00076616                            
00076616                            
00076616                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076616                            
00076616                            
00076616                            sub_728AC:				; XREF: sub_72878
00076616 0405 0081                  		subi.b	#$81,d5
0007661A 6500                       		bcs.s	loc_728CA
0007661C DA2D 0008                  		add.b	8(a5),d5
00076620 0245 007F                  		andi.w	#$7F,d5
00076624 E34D                       		lsl.w	#1,d5
00076626 41FA 0000                  		lea	word_729CE(pc),a0
0007662A 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00076630 6000 F3BC                  		bra.w	sub_71D60
00076634                            ; ===========================================================================
00076634                            
00076634                            loc_728CA:
00076634 08D5 0001                  		bset	#1,(a5)
00076638 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0007663E 4EBA F3AE                  		jsr	sub_71D60(pc)
00076642 6000 0000                  		bra.w	sub_729A0
00076646                            ; End of function sub_728AC
00076646                            
00076646                            
00076646                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076646                            
00076646                            
00076646                            sub_728DC:				; XREF: sub_72850
00076646 3C2D 0010                  		move.w	$10(a5),d6
0007664A 6B00                       		bmi.s	loc_72920
0007664C                            ; End of function sub_728DC
0007664C                            
0007664C                            
0007664C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007664C                            
0007664C                            
0007664C                            sub_728E2:				; XREF: sub_72850
0007664C 102D 001E                  		move.b	$1E(a5),d0
00076650 4880                       		ext.w	d0
00076652 DC40                       		add.w	d0,d6
00076654 0815 0002                  		btst	#2,(a5)
00076658 6600                       		bne.s	locret_7291E
0007665A 0815 0001                  		btst	#1,(a5)
0007665E 6600                       		bne.s	locret_7291E
00076660 102D 0001                  		move.b	1(a5),d0
00076664 0C00 00E0                  		cmpi.b	#$E0,d0
00076668 6600                       		bne.s	loc_72904
0007666A 103C 00C0                  		move.b	#$C0,d0
0007666E                            
0007666E                            loc_72904:
0007666E 3206                       		move.w	d6,d1
00076670 0201 000F                  		andi.b	#$F,d1
00076674 8001                       		or.b	d1,d0
00076676 E84E                       		lsr.w	#4,d6
00076678 0206 003F                  		andi.b	#$3F,d6
0007667C 13C0 00C0 0011             		move.b	d0,($C00011).l
00076682 13C6 00C0 0011             		move.b	d6,($C00011).l
00076688                            
00076688                            locret_7291E:
00076688 4E75                       		rts	
0007668A                            ; End of function sub_728E2
0007668A                            
0007668A                            ; ===========================================================================
0007668A                            
0007668A                            loc_72920:				; XREF: sub_728DC
0007668A 08D5 0001                  		bset	#1,(a5)
0007668E 4E75                       		rts	
00076690                            
00076690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076690                            
00076690                            
00076690                            sub_72926:				; XREF: sub_72850
00076690 4A2D 000B                  		tst.b	$B(a5)
00076694 6700 0000                  		beq.w	locret_7298A
00076698                            
00076698                            loc_7292E:				; XREF: sub_72850
00076698 1C2D 0009                  		move.b	9(a5),d6
0007669C 7000                       		moveq	#0,d0
0007669E 102D 000B                  		move.b	$B(a5),d0
000766A2 6700                       		beq.s	sub_7296A
000766A4 2079 0007 5602             		movea.l	(Go_PSGIndex).l,a0
000766AA 5340                       		subq.w	#1,d0
000766AC E548                       		lsl.w	#2,d0
000766AE 2070 0000                  		movea.l	(a0,d0.w),a0
000766B2 102D 000C                  		move.b	$C(a5),d0
000766B6 1030 0000                  		move.b	(a0,d0.w),d0
000766BA 522D 000C                  		addq.b	#1,$C(a5)
000766BE 0800 0007                  		btst	#7,d0
000766C2 6700                       		beq.s	loc_72960
000766C4 0C00 0080                  		cmpi.b	#$80,d0
000766C8 6700                       		beq.s	loc_7299A
000766CA                            
000766CA                            loc_72960:
000766CA DC40                       		add.w	d0,d6
000766CC 0C06 0010                  		cmpi.b	#$10,d6
000766D0 6500                       		bcs.s	sub_7296A
000766D2 7C0F                       		moveq	#$F,d6
000766D4                            ; End of function sub_72926
000766D4                            
000766D4                            
000766D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000766D4                            
000766D4                            
000766D4                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000766D4 0815 0001                  		btst	#1,(a5)
000766D8 6600                       		bne.s	locret_7298A
000766DA 0815 0002                  		btst	#2,(a5)
000766DE 6600                       		bne.s	locret_7298A
000766E0 0815 0004                  		btst	#4,(a5)
000766E4 6600                       		bne.s	loc_7298C
000766E6                            
000766E6                            loc_7297C:
000766E6 8C2D 0001                  		or.b	1(a5),d6
000766EA 0606 0010                  		addi.b	#$10,d6
000766EE 13C6 00C0 0011             		move.b	d6,($C00011).l
000766F4                            
000766F4                            locret_7298A:
000766F4 4E75                       		rts	
000766F6                            ; ===========================================================================
000766F6                            
000766F6                            loc_7298C:
000766F6 4A2D 0013                  		tst.b	$13(a5)
000766FA 67EA                       		beq.s	loc_7297C
000766FC 4A2D 0012                  		tst.b	$12(a5)
00076700 66E4                       		bne.s	loc_7297C
00076702 4E75                       		rts	
00076704                            ; End of function sub_7296A
00076704                            
00076704                            ; ===========================================================================
00076704                            
00076704                            loc_7299A:				; XREF: sub_72926
00076704 532D 000C                  		subq.b	#1,$C(a5)
00076708 4E75                       		rts	
0007670A                            
0007670A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007670A                            
0007670A                            
0007670A                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0007670A 0815 0002                  		btst	#2,(a5)
0007670E 6600                       		bne.s	locret_729B4
00076710                            
00076710                            loc_729A6:				; XREF: Snd_FadeOut2
00076710 102D 0001                  		move.b	1(a5),d0
00076714 0000 001F                  		ori.b	#$1F,d0
00076718 13C0 00C0 0011             		move.b	d0,($C00011).l
0007671E                            
0007671E                            locret_729B4:
0007671E 4E75                       		rts	
00076720                            ; End of function sub_729A0
00076720                            
00076720                            
00076720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076720                            
00076720                            
00076720                            sub_729B6:				; XREF: loc_71E7C
00076720 41F9 00C0 0011             		lea	($C00011).l,a0
00076726 10BC 009F                  		move.b	#$9F,(a0)
0007672A 10BC 00BF                  		move.b	#$BF,(a0)
0007672E 10BC 00DF                  		move.b	#$DF,(a0)
00076732 10BC 00FF                  		move.b	#$FF,(a0)
00076736 4E75                       		rts	
00076738                            ; End of function sub_729B6
00076738                            
00076738                            ; ===========================================================================
00076738 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0007674A 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0007675C 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00076770 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00076784 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00076798 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000767AC 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000767C0 0011 0000                  		dc.w $11, 0
000767C4                            
000767C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000767C4                            
000767C4                            
000767C4                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000767C4 0445 00E0                  		subi.w	#$E0,d5
000767C8 E54D                       		lsl.w	#2,d5
000767CA 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000767CE                            ; End of function sub_72A5A
000767CE                            
000767CE                            ; ===========================================================================
000767CE                            
000767CE                            loc_72A64:
000767CE 6000 0000                  		bra.w	loc_72ACC
000767D2                            ; ===========================================================================
000767D2 6000 0000                  		bra.w	loc_72AEC
000767D6                            ; ===========================================================================
000767D6 6000 0000                  		bra.w	loc_72AF2
000767DA                            ; ===========================================================================
000767DA 6000 0000                  		bra.w	loc_72AF8
000767DE                            ; ===========================================================================
000767DE 6000 0000                  		bra.w	loc_72B14
000767E2                            ; ===========================================================================
000767E2 6000 0000                  		bra.w	loc_72B9E
000767E6                            ; ===========================================================================
000767E6 6000 0000                  		bra.w	loc_72BA4
000767EA                            ; ===========================================================================
000767EA 6000 0000                  		bra.w	loc_72BAE
000767EE                            ; ===========================================================================
000767EE 6000 0000                  		bra.w	loc_72BB4
000767F2                            ; ===========================================================================
000767F2 6000 0000                  		bra.w	loc_72BBE
000767F6                            ; ===========================================================================
000767F6 6000 0000                  		bra.w	loc_72BC6
000767FA                            ; ===========================================================================
000767FA 6000 0000                  		bra.w	loc_72BD0
000767FE                            ; ===========================================================================
000767FE 6000 0000                  		bra.w	loc_72BE6
00076802                            ; ===========================================================================
00076802 6000 0000                  		bra.w	loc_72BEE
00076806                            ; ===========================================================================
00076806 6000 0000                  		bra.w	loc_72BF4
0007680A                            ; ===========================================================================
0007680A 6000 0000                  		bra.w	loc_72C26
0007680E                            ; ===========================================================================
0007680E 6000 0000                  		bra.w	loc_72D30
00076812                            ; ===========================================================================
00076812 6000 0000                  		bra.w	loc_72D52
00076816                            ; ===========================================================================
00076816 6000 0000                  		bra.w	loc_72D58
0007681A                            ; ===========================================================================
0007681A 6000 0000                  		bra.w	loc_72E06
0007681E                            ; ===========================================================================
0007681E 6000 0000                  		bra.w	loc_72E20
00076822                            ; ===========================================================================
00076822 6000 0000                  		bra.w	loc_72E26
00076826                            ; ===========================================================================
00076826 6000 0000                  		bra.w	loc_72E2C
0007682A                            ; ===========================================================================
0007682A 6000 0000                  		bra.w	loc_72E38
0007682E                            ; ===========================================================================
0007682E 6000 0000                  		bra.w	loc_72E52
00076832                            ; ===========================================================================
00076832 6000 0000                  		bra.w	loc_72E64
00076836                            ; ===========================================================================
00076836                            
00076836                            loc_72ACC:				; XREF: loc_72A64
00076836 121C                       		move.b	(a4)+,d1
00076838 4A2D 0001                  		tst.b	1(a5)
0007683C 6B00                       		bmi.s	locret_72AEA
0007683E 102D 000A                  		move.b	$A(a5),d0
00076842 0200 0037                  		andi.b	#$37,d0
00076846 8200                       		or.b	d0,d1
00076848 1B41 000A                  		move.b	d1,$A(a5)
0007684C 103C 00B4                  		move.b	#$B4,d0
00076850 6000 FC2E                  		bra.w	loc_72716
00076854                            ; ===========================================================================
00076854                            
00076854                            locret_72AEA:
00076854 4E75                       		rts	
00076856                            ; ===========================================================================
00076856                            
00076856                            loc_72AEC:				; XREF: loc_72A64
00076856 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0007685A 4E75                       		rts	
0007685C                            ; ===========================================================================
0007685C                            
0007685C                            loc_72AF2:				; XREF: loc_72A64
0007685C 1D5C 0007                  		move.b	(a4)+,7(a6)
00076860 4E75                       		rts	
00076862                            ; ===========================================================================
00076862                            
00076862                            loc_72AF8:				; XREF: loc_72A64
00076862 7000                       		moveq	#0,d0
00076864 102D 000D                  		move.b	$D(a5),d0
00076868 2875 0000                  		movea.l	(a5,d0.w),a4
0007686C 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00076874 544C                       		addq.w	#2,a4
00076876 5800                       		addq.b	#4,d0
00076878 1B40 000D                  		move.b	d0,$D(a5)
0007687C 4E75                       		rts	
0007687E                            ; ===========================================================================
0007687E                            
0007687E                            loc_72B14:				; XREF: loc_72A64
0007687E 204E                       		movea.l	a6,a0
00076880 43EE 03A0                  		lea	$3A0(a6),a1
00076884 303C 0087                  		move.w	#$87,d0
00076888                            
00076888                            loc_72B1E:
00076888 20D9                       		move.l	(a1)+,(a0)+
0007688A 51C8 FFFC                  		dbf	d0,loc_72B1E
0007688E                            
0007688E 08EE 0002 0040             		bset	#2,$40(a6)
00076894 264D                       		movea.l	a5,a3
00076896 1C3C 0028                  		move.b	#$28,d6
0007689A 9C2E 0026                  		sub.b	$26(a6),d6
0007689E 7E05                       		moveq	#5,d7
000768A0 4BEE 0070                  		lea	$70(a6),a5
000768A4                            
000768A4                            loc_72B3A:
000768A4 0815 0007                  		btst	#7,(a5)
000768A8 6700                       		beq.s	loc_72B5C
000768AA 08D5 0001                  		bset	#1,(a5)
000768AE DD2D 0009                  		add.b	d6,9(a5)
000768B2 0815 0002                  		btst	#2,(a5)
000768B6 6600                       		bne.s	loc_72B5C
000768B8 7000                       		moveq	#0,d0
000768BA 102D 000B                  		move.b	$B(a5),d0
000768BE 226E 0018                  		movea.l	$18(a6),a1
000768C2 4EBA 0000                  		jsr	sub_72C4E(pc)
000768C6                            
000768C6                            loc_72B5C:
000768C6 DAFC 0030                  		adda.w	#$30,a5
000768CA 51CF FFD8                  		dbf	d7,loc_72B3A
000768CE                            
000768CE 7E02                       		moveq	#2,d7
000768D0                            
000768D0                            loc_72B66:
000768D0 0815 0007                  		btst	#7,(a5)
000768D4 6700                       		beq.s	loc_72B78
000768D6 08D5 0001                  		bset	#1,(a5)
000768DA 4EBA FE2E                  		jsr	sub_729A0(pc)
000768DE DD2D 0009                  		add.b	d6,9(a5)
000768E2                            
000768E2                            loc_72B78:
000768E2 DAFC 0030                  		adda.w	#$30,a5
000768E6 51CF FFE8                  		dbf	d7,loc_72B66
000768EA 2A4B                       		movea.l	a3,a5
000768EC 1D7C 0080 0024             		move.b	#$80,$24(a6)
000768F2 1D7C 0028 0026             		move.b	#$28,$26(a6)
000768F8 422E 0027                  		clr.b	$27(a6)
000768FC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00076904 504F                       		addq.w	#8,sp
00076906 4E75                       		rts	
00076908                            ; ===========================================================================
00076908                            
00076908                            loc_72B9E:				; XREF: loc_72A64
00076908 1B5C 0002                  		move.b	(a4)+,2(a5)
0007690C 4E75                       		rts	
0007690E                            ; ===========================================================================
0007690E                            
0007690E                            loc_72BA4:				; XREF: loc_72A64
0007690E 101C                       		move.b	(a4)+,d0
00076910 D12D 0009                  		add.b	d0,9(a5)
00076914 6000 0000                  		bra.w	sub_72CB4
00076918                            ; ===========================================================================
00076918                            
00076918                            loc_72BAE:				; XREF: loc_72A64
00076918 08D5 0004                  		bset	#4,(a5)
0007691C 4E75                       		rts	
0007691E                            ; ===========================================================================
0007691E                            
0007691E                            loc_72BB4:				; XREF: loc_72A64
0007691E 1B54 0012                  		move.b	(a4),$12(a5)
00076922 1B5C 0013                  		move.b	(a4)+,$13(a5)
00076926 4E75                       		rts	
00076928                            ; ===========================================================================
00076928                            
00076928                            loc_72BBE:				; XREF: loc_72A64
00076928 101C                       		move.b	(a4)+,d0
0007692A D12D 0008                  		add.b	d0,8(a5)
0007692E 4E75                       		rts	
00076930                            ; ===========================================================================
00076930                            
00076930                            loc_72BC6:				; XREF: loc_72A64
00076930 1D54 0002                  		move.b	(a4),2(a6)
00076934 1D5C 0001                  		move.b	(a4)+,1(a6)
00076938 4E75                       		rts	
0007693A                            ; ===========================================================================
0007693A                            
0007693A                            loc_72BD0:				; XREF: loc_72A64
0007693A 41EE 0040                  		lea	$40(a6),a0
0007693E 101C                       		move.b	(a4)+,d0
00076940 7230                       		moveq	#$30,d1
00076942 7409                       		moveq	#9,d2
00076944                            
00076944                            loc_72BDA:
00076944 1140 0002                  		move.b	d0,2(a0)
00076948 D0C1                       		adda.w	d1,a0
0007694A 51CA FFF8                  		dbf	d2,loc_72BDA
0007694E                            
0007694E 4E75                       		rts	
00076950                            ; ===========================================================================
00076950                            
00076950                            loc_72BE6:				; XREF: loc_72A64
00076950 101C                       		move.b	(a4)+,d0
00076952 D12D 0009                  		add.b	d0,9(a5)
00076956 4E75                       		rts	
00076958                            ; ===========================================================================
00076958                            
00076958                            loc_72BEE:				; XREF: loc_72A64
00076958 422E 002C                  		clr.b	$2C(a6)
0007695C 4E75                       		rts	
0007695E                            ; ===========================================================================
0007695E                            
0007695E                            loc_72BF4:				; XREF: loc_72A64
0007695E 0895 0007                  		bclr	#7,(a5)
00076962 0895 0004                  		bclr	#4,(a5)
00076966 4EBA FB00                  		jsr	sub_726FE(pc)
0007696A 4A2E 0250                  		tst.b	$250(a6)
0007696E 6B00                       		bmi.s	loc_72C22
00076970 264D                       		movea.l	a5,a3
00076972 4BEE 0100                  		lea	$100(a6),a5
00076976 226E 0018                  		movea.l	$18(a6),a1
0007697A 0895 0002                  		bclr	#2,(a5)
0007697E 08D5 0001                  		bset	#1,(a5)
00076982 102D 000B                  		move.b	$B(a5),d0
00076986 4EBA 0000                  		jsr	sub_72C4E(pc)
0007698A 2A4B                       		movea.l	a3,a5
0007698C                            
0007698C                            loc_72C22:
0007698C 504F                       		addq.w	#8,sp
0007698E 4E75                       		rts	
00076990                            ; ===========================================================================
00076990                            
00076990                            loc_72C26:				; XREF: loc_72A64
00076990 7000                       		moveq	#0,d0
00076992 101C                       		move.b	(a4)+,d0
00076994 1B40 000B                  		move.b	d0,$B(a5)
00076998 0815 0002                  		btst	#2,(a5)
0007699C 6600 0000                  		bne.w	locret_72CAA
000769A0 226E 0018                  		movea.l	$18(a6),a1
000769A4 4A2E 000E                  		tst.b	$E(a6)
000769A8 6700                       		beq.s	sub_72C4E
000769AA 226D 0020                  		movea.l	$20(a5),a1
000769AE 4A2E 000E                  		tst.b	$E(a6)
000769B2 6B00                       		bmi.s	sub_72C4E
000769B4 226E 0020                  		movea.l	$20(a6),a1
000769B8                            
000769B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000769B8                            
000769B8                            
000769B8                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000769B8 5340                       		subq.w	#1,d0
000769BA 6B00                       		bmi.s	loc_72C5C
000769BC 323C 0019                  		move.w	#$19,d1
000769C0                            
000769C0                            loc_72C56:
000769C0 D2C1                       		adda.w	d1,a1
000769C2 51C8 FFFC                  		dbf	d0,loc_72C56
000769C6                            
000769C6                            loc_72C5C:
000769C6 1219                       		move.b	(a1)+,d1
000769C8 1B41 001F                  		move.b	d1,$1F(a5)
000769CC 1801                       		move.b	d1,d4
000769CE 103C 00B0                  		move.b	#$B0,d0
000769D2 4EBA FAB8                  		jsr	sub_72722(pc)
000769D6 45FA 0000                  		lea	byte_72D18(pc),a2
000769DA 7613                       		moveq	#$13,d3
000769DC                            
000769DC                            loc_72C72:
000769DC 101A                       		move.b	(a2)+,d0
000769DE 1219                       		move.b	(a1)+,d1
000769E0 4EBA FAAA                  		jsr	sub_72722(pc)
000769E4 51CB FFF6                  		dbf	d3,loc_72C72
000769E8 7A03                       		moveq	#3,d5
000769EA 0244 0007                  		andi.w	#7,d4
000769EE 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000769F2 162D 0009                  		move.b	9(a5),d3
000769F6                            
000769F6                            loc_72C8C:
000769F6 101A                       		move.b	(a2)+,d0
000769F8 1219                       		move.b	(a1)+,d1
000769FA E20C                       		lsr.b	#1,d4
000769FC 6400                       		bcc.s	loc_72C96
000769FE D203                       		add.b	d3,d1
00076A00                            
00076A00                            loc_72C96:
00076A00 4EBA FA8A                  		jsr	sub_72722(pc)
00076A04 51CD FFF0                  		dbf	d5,loc_72C8C
00076A08 103C 00B4                  		move.b	#$B4,d0
00076A0C 122D 000A                  		move.b	$A(a5),d1
00076A10 4EBA FA7A                  		jsr	sub_72722(pc)
00076A14                            
00076A14                            locret_72CAA:
00076A14 4E75                       		rts	
00076A16                            ; End of function sub_72C4E
00076A16                            
00076A16                            ; ===========================================================================
00076A16 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00076A1E                            
00076A1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076A1E                            
00076A1E                            
00076A1E                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00076A1E 0815 0002                  		btst	#2,(a5)
00076A22 6600                       		bne.s	locret_72D16
00076A24 7000                       		moveq	#0,d0
00076A26 102D 000B                  		move.b	$B(a5),d0
00076A2A 226E 0018                  		movea.l	$18(a6),a1
00076A2E 4A2E 000E                  		tst.b	$E(a6)
00076A32 6700                       		beq.s	loc_72CD8
00076A34 226E 0020                  		movea.l	$20(a6),a1
00076A38 4A2E 000E                  		tst.b	$E(a6)
00076A3C 6B00                       		bmi.s	loc_72CD8
00076A3E 226E 0020                  		movea.l	$20(a6),a1
00076A42                            
00076A42                            loc_72CD8:
00076A42 5340                       		subq.w	#1,d0
00076A44 6B00                       		bmi.s	loc_72CE6
00076A46 323C 0019                  		move.w	#$19,d1
00076A4A                            
00076A4A                            loc_72CE0:
00076A4A D2C1                       		adda.w	d1,a1
00076A4C 51C8 FFFC                  		dbf	d0,loc_72CE0
00076A50                            
00076A50                            loc_72CE6:
00076A50 D2FC 0015                  		adda.w	#$15,a1
00076A54 45FA 0000                  		lea	byte_72D2C(pc),a2
00076A58 102D 001F                  		move.b	$1F(a5),d0
00076A5C 0240 0007                  		andi.w	#7,d0
00076A60 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00076A64 162D 0009                  		move.b	9(a5),d3
00076A68 6B00                       		bmi.s	locret_72D16
00076A6A 7A03                       		moveq	#3,d5
00076A6C                            
00076A6C                            loc_72D02:
00076A6C 101A                       		move.b	(a2)+,d0
00076A6E 1219                       		move.b	(a1)+,d1
00076A70 E20C                       		lsr.b	#1,d4
00076A72 6400                       		bcc.s	loc_72D12
00076A74 D203                       		add.b	d3,d1
00076A76 6500                       		bcs.s	loc_72D12
00076A78 4EBA FA12                  		jsr	sub_72722(pc)
00076A7C                            
00076A7C                            loc_72D12:
00076A7C 51CD FFEE                  		dbf	d5,loc_72D02
00076A80                            
00076A80                            locret_72D16:
00076A80 4E75                       		rts	
00076A82                            ; End of function sub_72CB4
00076A82                            
00076A82                            ; ===========================================================================
00076A82 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00076A8C 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00076A96 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00076A9A                            ; ===========================================================================
00076A9A                            
00076A9A                            loc_72D30:				; XREF: loc_72A64
00076A9A 08D5 0003                  		bset	#3,(a5)
00076A9E 2B4C 0014                  		move.l	a4,$14(a5)
00076AA2 1B5C 0018                  		move.b	(a4)+,$18(a5)
00076AA6 1B5C 0019                  		move.b	(a4)+,$19(a5)
00076AAA 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00076AAE 101C                       		move.b	(a4)+,d0
00076AB0 E208                       		lsr.b	#1,d0
00076AB2 1B40 001B                  		move.b	d0,$1B(a5)
00076AB6 426D 001C                  		clr.w	$1C(a5)
00076ABA 4E75                       		rts	
00076ABC                            ; ===========================================================================
00076ABC                            
00076ABC                            loc_72D52:				; XREF: loc_72A64
00076ABC 08D5 0003                  		bset	#3,(a5)
00076AC0 4E75                       		rts	
00076AC2                            ; ===========================================================================
00076AC2                            
00076AC2                            loc_72D58:				; XREF: loc_72A64
00076AC2 0895 0007                  		bclr	#7,(a5)
00076AC6 0895 0004                  		bclr	#4,(a5)
00076ACA 4A2D 0001                  		tst.b	1(a5)
00076ACE 6B00                       		bmi.s	loc_72D74
00076AD0 4A2E 0008                  		tst.b	8(a6)
00076AD4 6B00 0000                  		bmi.w	loc_72E02
00076AD8 4EBA F98E                  		jsr	sub_726FE(pc)
00076ADC 6000                       		bra.s	loc_72D78
00076ADE                            ; ===========================================================================
00076ADE                            
00076ADE                            loc_72D74:
00076ADE 4EBA FC2A                  		jsr	sub_729A0(pc)
00076AE2                            
00076AE2                            loc_72D78:
00076AE2 4A2E 000E                  		tst.b	$E(a6)
00076AE6 6A00 0000                  		bpl.w	loc_72E02
00076AEA 4216                       		clr.b	0(a6)
00076AEC 7000                       		moveq	#0,d0
00076AEE 102D 0001                  		move.b	1(a5),d0
00076AF2 6B00                       		bmi.s	loc_72DCC
00076AF4 41FA F546                  		lea	dword_722CC(pc),a0
00076AF8 264D                       		movea.l	a5,a3
00076AFA 0C00 0004                  		cmpi.b	#4,d0
00076AFE 6600                       		bne.s	loc_72DA8
00076B00 4A2E 0340                  		tst.b	$340(a6)
00076B04 6A00                       		bpl.s	loc_72DA8
00076B06 4BEE 0340                  		lea	$340(a6),a5
00076B0A 226E 0020                  		movea.l	$20(a6),a1
00076B0E 6000                       		bra.s	loc_72DB8
00076B10                            ; ===========================================================================
00076B10                            
00076B10                            loc_72DA8:
00076B10 5500                       		subq.b	#2,d0
00076B12 E508                       		lsl.b	#2,d0
00076B14 2A70 0000                  		movea.l	(a0,d0.w),a5
00076B18 4A15                       		tst.b	(a5)
00076B1A 6A00                       		bpl.s	loc_72DC8
00076B1C 226E 0018                  		movea.l	$18(a6),a1
00076B20                            
00076B20                            loc_72DB8:
00076B20 0895 0002                  		bclr	#2,(a5)
00076B24 08D5 0001                  		bset	#1,(a5)
00076B28 102D 000B                  		move.b	$B(a5),d0
00076B2C 4EBA FE8A                  		jsr	sub_72C4E(pc)
00076B30                            
00076B30                            loc_72DC8:
00076B30 2A4B                       		movea.l	a3,a5
00076B32 6000                       		bra.s	loc_72E02
00076B34                            ; ===========================================================================
00076B34                            
00076B34                            loc_72DCC:
00076B34 41EE 0370                  		lea	$370(a6),a0
00076B38 4A10                       		tst.b	(a0)
00076B3A 6A00                       		bpl.s	loc_72DE0
00076B3C 0C00 00E0                  		cmpi.b	#$E0,d0
00076B40 6700                       		beq.s	loc_72DEA
00076B42 0C00 00C0                  		cmpi.b	#$C0,d0
00076B46 6700                       		beq.s	loc_72DEA
00076B48                            
00076B48                            loc_72DE0:
00076B48 41FA F4F2                  		lea	dword_722CC(pc),a0
00076B4C E608                       		lsr.b	#3,d0
00076B4E 2070 0000                  		movea.l	(a0,d0.w),a0
00076B52                            
00076B52                            loc_72DEA:
00076B52 0890 0002                  		bclr	#2,(a0)
00076B56 08D0 0001                  		bset	#1,(a0)
00076B5A 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00076B60 6600                       		bne.s	loc_72E02
00076B62 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00076B6A                            
00076B6A                            loc_72E02:
00076B6A 504F                       		addq.w	#8,sp
00076B6C 4E75                       		rts	
00076B6E                            ; ===========================================================================
00076B6E                            
00076B6E                            loc_72E06:				; XREF: loc_72A64
00076B6E 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00076B74 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00076B78 0815 0002                  		btst	#2,(a5)
00076B7C 6600                       		bne.s	locret_72E1E
00076B7E 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00076B86                            
00076B86                            locret_72E1E:
00076B86 4E75                       		rts	
00076B88                            ; ===========================================================================
00076B88                            
00076B88                            loc_72E20:				; XREF: loc_72A64
00076B88 0895 0003                  		bclr	#3,(a5)
00076B8C 4E75                       		rts	
00076B8E                            ; ===========================================================================
00076B8E                            
00076B8E                            loc_72E26:				; XREF: loc_72A64
00076B8E 1B5C 000B                  		move.b	(a4)+,$B(a5)
00076B92 4E75                       		rts	
00076B94                            ; ===========================================================================
00076B94                            
00076B94                            loc_72E2C:				; XREF: loc_72A64
00076B94 101C                       		move.b	(a4)+,d0
00076B96 E148                       		lsl.w	#8,d0
00076B98 101C                       		move.b	(a4)+,d0
00076B9A D8C0                       		adda.w	d0,a4
00076B9C 534C                       		subq.w	#1,a4
00076B9E 4E75                       		rts	
00076BA0                            ; ===========================================================================
00076BA0                            
00076BA0                            loc_72E38:				; XREF: loc_72A64
00076BA0 7000                       		moveq	#0,d0
00076BA2 101C                       		move.b	(a4)+,d0
00076BA4 121C                       		move.b	(a4)+,d1
00076BA6 4A35 0024                  		tst.b	$24(a5,d0.w)
00076BAA 6600                       		bne.s	loc_72E48
00076BAC 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00076BB0                            
00076BB0                            loc_72E48:
00076BB0 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00076BB4 66DE                       		bne.s	loc_72E2C
00076BB6 544C                       		addq.w	#2,a4
00076BB8 4E75                       		rts	
00076BBA                            ; ===========================================================================
00076BBA                            
00076BBA                            loc_72E52:				; XREF: loc_72A64
00076BBA 7000                       		moveq	#0,d0
00076BBC 102D 000D                  		move.b	$D(a5),d0
00076BC0 5900                       		subq.b	#4,d0
00076BC2 2B8C 0000                  		move.l	a4,(a5,d0.w)
00076BC6 1B40 000D                  		move.b	d0,$D(a5)
00076BCA 60C8                       		bra.s	loc_72E2C
00076BCC                            ; ===========================================================================
00076BCC                            
00076BCC                            loc_72E64:				; XREF: loc_72A64
00076BCC 103C 0088                  		move.b	#$88,d0
00076BD0 123C 000F                  		move.b	#$F,d1
00076BD4 4EBA F8C2                  		jsr	sub_7272E(pc)
00076BD8 103C 008C                  		move.b	#$8C,d0
00076BDC 123C 000F                  		move.b	#$F,d1
00076BE0 6000 F8B6                  		bra.w	sub_7272E
00076BE4                            ; ===========================================================================
00076BE4                            Kos_Z80:	incbin	sound\z80_1.bin
00076C94 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00076C96 21                         		dc.b $21
00076C97 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00076C99                            		incbin	sound\z80_2.bin
00078344                            		even
00078344                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007EB44                            		even
0007EB44                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
000883E2                            		even
000883E2                            Music83:	incbin	sound\music83.bin ; Marble Act 1
0008C002 00                         		even
0008C002                            Music84:	include	sound\music84.asm ; Star Light Act 1
0008C002                            music84_Header:
0008C002 =00000001                  smpsHeaderStartSong = 1
0008C002 0000                       	smpsHeaderVoice     music84_Voices
0008C004 0603                       	smpsHeaderChan      $06, $03
0008C006 0205                       	smpsHeaderTempo     $02, $05
0008C008                            
0008C00C 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
0008C010 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
0008C014 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
0008C018 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
0008C01C 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
0008C020 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
0008C026 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
0008C02C 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
0008C032                            
0008C032                            ; FM1 Data
0008C032                            music84_FM1:
0008C032 E0C0                       	smpsPan             panCenter, $00
0008C036 E107                       	smpsAlterNote       $07
0008C038 9B03 8007                  	dc.b	nD2, $03, nRst, $07
0008C03C E106                       	smpsAlterNote       $06
0008C03E 9903 800B                  	dc.b	nC2, $03, nRst, $0B
0008C042 E10B                       	smpsAlterNote       $0B
0008C044 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
0008C04A E10C                       	smpsAlterNote       $0C
0008C04C E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C04F E10B                       	smpsAlterNote       $0B
0008C051 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C054 E109                       	smpsAlterNote       $09
0008C056 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
0008C05B E108                       	smpsAlterNote       $08
0008C05D 8001                       	dc.b	nRst, $01
0008C05F E10B                       	smpsAlterNote       $0B
0008C061 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
0008C067 E107                       	smpsAlterNote       $07
0008C069 9B03                       	dc.b	nD2, $03
0008C06B                            
0008C06B                            music84_Jump04:
0008C06B E107                       	smpsAlterNote       $07
0008C06D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C071 E10B                       	smpsAlterNote       $0B
0008C073 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C077 E107                       	smpsAlterNote       $07
0008C079 9B03                       	dc.b	nD2, $03
0008C07B E11A                       	smpsAlterNote       $1A
0008C07D A301                       	dc.b	nBb2, $01
0008C07F E1F2                       	smpsAlterNote       $F2
0008C081 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C084 E1FF                       	smpsAlterNote       $FF
0008C086 E701                       	dc.b	smpsNoAttack, $01
0008C088 E111                       	smpsAlterNote       $11
0008C08A E701                       	dc.b	smpsNoAttack, $01
0008C08C E106                       	smpsAlterNote       $06
0008C08E E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C091 E107                       	smpsAlterNote       $07
0008C093 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C097 E108                       	smpsAlterNote       $08
0008C099 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0008C0A1 E109                       	smpsAlterNote       $09
0008C0A3 A003                       	dc.b	nG2, $03
0008C0A5 E10C                       	smpsAlterNote       $0C
0008C0A7 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C0AB E1FD                       	smpsAlterNote       $FD
0008C0AD A401                       	dc.b	nB2, $01
0008C0AF E109                       	smpsAlterNote       $09
0008C0B1 E701                       	dc.b	smpsNoAttack, $01
0008C0B3 E106                       	smpsAlterNote       $06
0008C0B5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C0B8 E109                       	smpsAlterNote       $09
0008C0BA A007                       	dc.b	nG2, $07
0008C0BC E108                       	smpsAlterNote       $08
0008C0BE 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008C0C2 E107                       	smpsAlterNote       $07
0008C0C4 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C0CA E10B                       	smpsAlterNote       $0B
0008C0CC A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C0D0 E107                       	smpsAlterNote       $07
0008C0D2 9B03                       	dc.b	nD2, $03
0008C0D4 E11A                       	smpsAlterNote       $1A
0008C0D6 A301                       	dc.b	nBb2, $01
0008C0D8 E1F9                       	smpsAlterNote       $F9
0008C0DA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C0DD E107                       	smpsAlterNote       $07
0008C0DF E701                       	dc.b	smpsNoAttack, $01
0008C0E1 E111                       	smpsAlterNote       $11
0008C0E3 E701                       	dc.b	smpsNoAttack, $01
0008C0E5 E106                       	smpsAlterNote       $06
0008C0E7 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008C0EC E107                       	smpsAlterNote       $07
0008C0EE 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008C0F6 E1EC                       	smpsAlterNote       $EC
0008C0F8 A101                       	dc.b	nAb2, $01
0008C0FA E108                       	smpsAlterNote       $08
0008C0FC E701                       	dc.b	smpsNoAttack, $01
0008C0FE E116                       	smpsAlterNote       $16
0008C100 E701                       	dc.b	smpsNoAttack, $01
0008C102 E1F5                       	smpsAlterNote       $F5
0008C104 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C107 E10B                       	smpsAlterNote       $0B
0008C109 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C10D E107                       	smpsAlterNote       $07
0008C10F 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C115 E109                       	smpsAlterNote       $09
0008C117 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C11B E10B                       	smpsAlterNote       $0B
0008C11D 9603                       	dc.b	nA1, $03
0008C11F E107                       	smpsAlterNote       $07
0008C121 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C127 E10B                       	smpsAlterNote       $0B
0008C129 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C12D E107                       	smpsAlterNote       $07
0008C12F 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C133 E11A                       	smpsAlterNote       $1A
0008C135 A301                       	dc.b	nBb2, $01
0008C137 E1F9                       	smpsAlterNote       $F9
0008C139 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C13C E107                       	smpsAlterNote       $07
0008C13E E701                       	dc.b	smpsNoAttack, $01
0008C140 E1FB                       	smpsAlterNote       $FB
0008C142 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C145 E106                       	smpsAlterNote       $06
0008C147 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C14B E107                       	smpsAlterNote       $07
0008C14D 9B03                       	dc.b	nD2, $03
0008C14F E108                       	smpsAlterNote       $08
0008C151 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C157 E109                       	smpsAlterNote       $09
0008C159 A002 8001                  	dc.b	nG2, $02, nRst, $01
0008C15D E10C                       	smpsAlterNote       $0C
0008C15F A303                       	dc.b	nBb2, $03
0008C161 E1F0                       	smpsAlterNote       $F0
0008C163 A401                       	dc.b	nB2, $01
0008C165 E1FD                       	smpsAlterNote       $FD
0008C167 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0008C16C E106                       	smpsAlterNote       $06
0008C16E 8001                       	dc.b	nRst, $01
0008C170 E109                       	smpsAlterNote       $09
0008C172 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C176 E108                       	smpsAlterNote       $08
0008C178 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0008C17C E107                       	smpsAlterNote       $07
0008C17E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C184 E10B                       	smpsAlterNote       $0B
0008C186 A203                       	dc.b	nA2, $03
0008C188 E107                       	smpsAlterNote       $07
0008C18A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C18E E1F2                       	smpsAlterNote       $F2
0008C190 A401                       	dc.b	nB2, $01
0008C192 E1FF                       	smpsAlterNote       $FF
0008C194 E701                       	dc.b	smpsNoAttack, $01
0008C196 E107                       	smpsAlterNote       $07
0008C198 E701                       	dc.b	smpsNoAttack, $01
0008C19A E1FB                       	smpsAlterNote       $FB
0008C19C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C19F E106                       	smpsAlterNote       $06
0008C1A1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C1A5 E107                       	smpsAlterNote       $07
0008C1A7 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
0008C1B1 E117                       	smpsAlterNote       $17
0008C1B3 A001                       	dc.b	nG2, $01
0008C1B5 E1FA                       	smpsAlterNote       $FA
0008C1B7 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C1BA E108                       	smpsAlterNote       $08
0008C1BC E701                       	dc.b	smpsNoAttack, $01
0008C1BE E1E7                       	smpsAlterNote       $E7
0008C1C0 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C1C3 E103                       	smpsAlterNote       $03
0008C1C5 E701                       	dc.b	smpsNoAttack, $01
0008C1C7 E10B                       	smpsAlterNote       $0B
0008C1C9 E702                       	dc.b	smpsNoAttack, $02
0008C1CB E107                       	smpsAlterNote       $07
0008C1CD 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
0008C1D5 E106                       	smpsAlterNote       $06
0008C1D7 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
0008C1DD E10C                       	smpsAlterNote       $0C
0008C1DF 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
0008C1E5 E109                       	smpsAlterNote       $09
0008C1E7 9E03                       	dc.b	nF2, $03
0008C1E9 E10C                       	smpsAlterNote       $0C
0008C1EB 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C1EF E1EA                       	smpsAlterNote       $EA
0008C1F1 A201                       	dc.b	nA2, $01
0008C1F3 E106                       	smpsAlterNote       $06
0008C1F5 E701                       	dc.b	smpsNoAttack, $01
0008C1F7 E1E2                       	smpsAlterNote       $E2
0008C1F9 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C1FC E1F0                       	smpsAlterNote       $F0
0008C1FE E701                       	dc.b	smpsNoAttack, $01
0008C200 E10C                       	smpsAlterNote       $0C
0008C202 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C20E E116                       	smpsAlterNote       $16
0008C210 9C01                       	dc.b	nEb2, $01
0008C212 E105                       	smpsAlterNote       $05
0008C214 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C217 E1F1                       	smpsAlterNote       $F1
0008C219 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C21C E1FF                       	smpsAlterNote       $FF
0008C21E E701                       	dc.b	smpsNoAttack, $01
0008C220 E109                       	smpsAlterNote       $09
0008C222 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C226 E10C                       	smpsAlterNote       $0C
0008C228 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008C234 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
0008C23A E109                       	smpsAlterNote       $09
0008C23C 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C240 E10C                       	smpsAlterNote       $0C
0008C242 9703                       	dc.b	nBb1, $03
0008C244 E11A                       	smpsAlterNote       $1A
0008C246 A101                       	dc.b	nAb2, $01
0008C248 E1FB                       	smpsAlterNote       $FB
0008C24A E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C24D E10A                       	smpsAlterNote       $0A
0008C24F E701                       	dc.b	smpsNoAttack, $01
0008C251 E1E8                       	smpsAlterNote       $E8
0008C253 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C256 E106                       	smpsAlterNote       $06
0008C258 E701                       	dc.b	smpsNoAttack, $01
0008C25A E10C                       	smpsAlterNote       $0C
0008C25C E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
0008C268 E1F9                       	smpsAlterNote       $F9
0008C26A 9D01                       	dc.b	nE2, $01
0008C26C E108                       	smpsAlterNote       $08
0008C26E E701                       	dc.b	smpsNoAttack, $01
0008C270 E1F6                       	smpsAlterNote       $F6
0008C272 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C275 E109                       	smpsAlterNote       $09
0008C277 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
0008C27B E10C                       	smpsAlterNote       $0C
0008C27D 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
0008C289 E108                       	smpsAlterNote       $08
0008C28B 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008C291 E106                       	smpsAlterNote       $06
0008C293 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C297 E108                       	smpsAlterNote       $08
0008C299 9D03                       	dc.b	nE2, $03
0008C29B E1EB                       	smpsAlterNote       $EB
0008C29D A801                       	dc.b	nEb3, $01
0008C29F E109                       	smpsAlterNote       $09
0008C2A1 E701                       	dc.b	smpsNoAttack, $01
0008C2A3 E1FA                       	smpsAlterNote       $FA
0008C2A5 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008C2A8 E108                       	smpsAlterNote       $08
0008C2AA E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
0008C2B6 E1E9                       	smpsAlterNote       $E9
0008C2B8 A301                       	dc.b	nBb2, $01
0008C2BA E107                       	smpsAlterNote       $07
0008C2BC E701                       	dc.b	smpsNoAttack, $01
0008C2BE E1F0                       	smpsAlterNote       $F0
0008C2C0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C2C3 E1F7                       	smpsAlterNote       $F7
0008C2C5 E701                       	dc.b	smpsNoAttack, $01
0008C2C7 E107                       	smpsAlterNote       $07
0008C2C9 E701                       	dc.b	smpsNoAttack, $01
0008C2CB E106                       	smpsAlterNote       $06
0008C2CD E701                       	dc.b	smpsNoAttack, $01
0008C2CF E108                       	smpsAlterNote       $08
0008C2D1 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008C2D7 E106                       	smpsAlterNote       $06
0008C2D9 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C2DD E108                       	smpsAlterNote       $08
0008C2DF 9D03                       	dc.b	nE2, $03
0008C2E1 E10B                       	smpsAlterNote       $0B
0008C2E3 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
0008C2EB E108                       	smpsAlterNote       $08
0008C2ED 9D03                       	dc.b	nE2, $03
0008C2EF E10B                       	smpsAlterNote       $0B
0008C2F1 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C2F5 E113                       	smpsAlterNote       $13
0008C2F7 A001                       	dc.b	nG2, $01
0008C2F9 E118                       	smpsAlterNote       $18
0008C2FB E701                       	dc.b	smpsNoAttack, $01
0008C2FD E1E9                       	smpsAlterNote       $E9
0008C2FF E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C302 E1F3                       	smpsAlterNote       $F3
0008C304 E701                       	dc.b	smpsNoAttack, $01
0008C306 E1FD                       	smpsAlterNote       $FD
0008C308 E701                       	dc.b	smpsNoAttack, $01
0008C30A E102                       	smpsAlterNote       $02
0008C30C E701                       	dc.b	smpsNoAttack, $01
0008C30E E107                       	smpsAlterNote       $07
0008C310 8001                       	dc.b	nRst, $01
0008C312 E10B                       	smpsAlterNote       $0B
0008C314 9603                       	dc.b	nA1, $03
0008C316 E10C                       	smpsAlterNote       $0C
0008C318 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
0008C31E E10B                       	smpsAlterNote       $0B
0008C320 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008C32C 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
0008C332 E107                       	smpsAlterNote       $07
0008C334 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C33A E10B                       	smpsAlterNote       $0B
0008C33C A203                       	dc.b	nA2, $03
0008C33E E107                       	smpsAlterNote       $07
0008C340 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C344 E1F2                       	smpsAlterNote       $F2
0008C346 A401                       	dc.b	nB2, $01
0008C348 E1FF                       	smpsAlterNote       $FF
0008C34A E701                       	dc.b	smpsNoAttack, $01
0008C34C E107                       	smpsAlterNote       $07
0008C34E E701                       	dc.b	smpsNoAttack, $01
0008C350 E1FB                       	smpsAlterNote       $FB
0008C352 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C355 E106                       	smpsAlterNote       $06
0008C357 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C35B E107                       	smpsAlterNote       $07
0008C35D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C361 E108                       	smpsAlterNote       $08
0008C363 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008C369 E109                       	smpsAlterNote       $09
0008C36B A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C36F E10C                       	smpsAlterNote       $0C
0008C371 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008C375 E1F0                       	smpsAlterNote       $F0
0008C377 A401                       	dc.b	nB2, $01
0008C379 E109                       	smpsAlterNote       $09
0008C37B E701                       	dc.b	smpsNoAttack, $01
0008C37D E106                       	smpsAlterNote       $06
0008C37F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C382 E109                       	smpsAlterNote       $09
0008C384 A007                       	dc.b	nG2, $07
0008C386 E108                       	smpsAlterNote       $08
0008C388 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008C38C E107                       	smpsAlterNote       $07
0008C38E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C394 E10B                       	smpsAlterNote       $0B
0008C396 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C39A E107                       	smpsAlterNote       $07
0008C39C 9B03                       	dc.b	nD2, $03
0008C39E E11A                       	smpsAlterNote       $1A
0008C3A0 A301                       	dc.b	nBb2, $01
0008C3A2 E1F2                       	smpsAlterNote       $F2
0008C3A4 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C3A7 E1FF                       	smpsAlterNote       $FF
0008C3A9 E701                       	dc.b	smpsNoAttack, $01
0008C3AB E111                       	smpsAlterNote       $11
0008C3AD E701                       	dc.b	smpsNoAttack, $01
0008C3AF E106                       	smpsAlterNote       $06
0008C3B1 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C3B4 E107                       	smpsAlterNote       $07
0008C3B6 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008C3C2 E117                       	smpsAlterNote       $17
0008C3C4 A001                       	dc.b	nG2, $01
0008C3C6 E1FA                       	smpsAlterNote       $FA
0008C3C8 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C3CB E116                       	smpsAlterNote       $16
0008C3CD E701                       	dc.b	smpsNoAttack, $01
0008C3CF E1F5                       	smpsAlterNote       $F5
0008C3D1 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C3D4 E103                       	smpsAlterNote       $03
0008C3D6 E701                       	dc.b	smpsNoAttack, $01
0008C3D8 E10B                       	smpsAlterNote       $0B
0008C3DA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C3DE E107                       	smpsAlterNote       $07
0008C3E0 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C3E6 E109                       	smpsAlterNote       $09
0008C3E8 9E03                       	dc.b	nF2, $03
0008C3EA E10B                       	smpsAlterNote       $0B
0008C3EC 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C3F0 E107                       	smpsAlterNote       $07
0008C3F2 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C3F8 E10B                       	smpsAlterNote       $0B
0008C3FA A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C3FE E107                       	smpsAlterNote       $07
0008C400 9B03                       	dc.b	nD2, $03
0008C402 E11A                       	smpsAlterNote       $1A
0008C404 A301                       	dc.b	nBb2, $01
0008C406 E1F9                       	smpsAlterNote       $F9
0008C408 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C40B E107                       	smpsAlterNote       $07
0008C40D E701                       	dc.b	smpsNoAttack, $01
0008C40F E111                       	smpsAlterNote       $11
0008C411 E701                       	dc.b	smpsNoAttack, $01
0008C413 E106                       	smpsAlterNote       $06
0008C415 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008C41A E107                       	smpsAlterNote       $07
0008C41C 9B03                       	dc.b	nD2, $03
0008C41E E108                       	smpsAlterNote       $08
0008C420 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C426 E109                       	smpsAlterNote       $09
0008C428 A003                       	dc.b	nG2, $03
0008C42A E10C                       	smpsAlterNote       $0C
0008C42C A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C430 E1FD                       	smpsAlterNote       $FD
0008C432 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
0008C437 E106                       	smpsAlterNote       $06
0008C439 8001                       	dc.b	nRst, $01
0008C43B E109                       	smpsAlterNote       $09
0008C43D A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C441 E108                       	smpsAlterNote       $08
0008C443 9C03                       	dc.b	nEb2, $03
0008C445 E107                       	smpsAlterNote       $07
0008C447 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C44D E10B                       	smpsAlterNote       $0B
0008C44F A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C453 E107                       	smpsAlterNote       $07
0008C455 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C459 E11A                       	smpsAlterNote       $1A
0008C45B A301                       	dc.b	nBb2, $01
0008C45D E1F9                       	smpsAlterNote       $F9
0008C45F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C462 E107                       	smpsAlterNote       $07
0008C464 E701                       	dc.b	smpsNoAttack, $01
0008C466 E1FB                       	smpsAlterNote       $FB
0008C468 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C46B E106                       	smpsAlterNote       $06
0008C46D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C471 E107                       	smpsAlterNote       $07
0008C473 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008C47B E1EC                       	smpsAlterNote       $EC
0008C47D A101                       	dc.b	nAb2, $01
0008C47F E108                       	smpsAlterNote       $08
0008C481 E701                       	dc.b	smpsNoAttack, $01
0008C483 E1E7                       	smpsAlterNote       $E7
0008C485 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C488 E1F5                       	smpsAlterNote       $F5
0008C48A E701                       	dc.b	smpsNoAttack, $01
0008C48C E10B                       	smpsAlterNote       $0B
0008C48E E702                       	dc.b	smpsNoAttack, $02
0008C490 E107                       	smpsAlterNote       $07
0008C492 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008C498 E106                       	smpsAlterNote       $06
0008C49A 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008C4A0 E10C                       	smpsAlterNote       $0C
0008C4A2 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008C4AA E109                       	smpsAlterNote       $09
0008C4AC 9E03                       	dc.b	nF2, $03
0008C4AE E10C                       	smpsAlterNote       $0C
0008C4B0 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C4B4 E1EA                       	smpsAlterNote       $EA
0008C4B6 A201                       	dc.b	nA2, $01
0008C4B8 E106                       	smpsAlterNote       $06
0008C4BA E701                       	dc.b	smpsNoAttack, $01
0008C4BC E114                       	smpsAlterNote       $14
0008C4BE E701                       	dc.b	smpsNoAttack, $01
0008C4C0 E1F0                       	smpsAlterNote       $F0
0008C4C2 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C4C5 E10C                       	smpsAlterNote       $0C
0008C4C7 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008C4D3 9703                       	dc.b	nBb1, $03
0008C4D5 E116                       	smpsAlterNote       $16
0008C4D7 9C01                       	dc.b	nEb2, $01
0008C4D9 E105                       	smpsAlterNote       $05
0008C4DB E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C4DE E113                       	smpsAlterNote       $13
0008C4E0 E701                       	dc.b	smpsNoAttack, $01
0008C4E2 E1FF                       	smpsAlterNote       $FF
0008C4E4 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C4E7 E109                       	smpsAlterNote       $09
0008C4E9 E703                       	dc.b	smpsNoAttack, $03
0008C4EB E10C                       	smpsAlterNote       $0C
0008C4ED 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008C4F9 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C501 E109                       	smpsAlterNote       $09
0008C503 9E03                       	dc.b	nF2, $03
0008C505 E10C                       	smpsAlterNote       $0C
0008C507 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C50B E1EC                       	smpsAlterNote       $EC
0008C50D A201                       	dc.b	nA2, $01
0008C50F E10A                       	smpsAlterNote       $0A
0008C511 E701                       	dc.b	smpsNoAttack, $01
0008C513 E1E8                       	smpsAlterNote       $E8
0008C515 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C518 E1F7                       	smpsAlterNote       $F7
0008C51A E701                       	dc.b	smpsNoAttack, $01
0008C51C E10C                       	smpsAlterNote       $0C
0008C51E E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C52A E1EA                       	smpsAlterNote       $EA
0008C52C 9D01                       	dc.b	nE2, $01
0008C52E E108                       	smpsAlterNote       $08
0008C530 E701                       	dc.b	smpsNoAttack, $01
0008C532 E1F6                       	smpsAlterNote       $F6
0008C534 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C537 E105                       	smpsAlterNote       $05
0008C539 E701                       	dc.b	smpsNoAttack, $01
0008C53B E109                       	smpsAlterNote       $09
0008C53D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C541 E10C                       	smpsAlterNote       $0C
0008C543 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008C54F E108                       	smpsAlterNote       $08
0008C551 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
0008C557 E106                       	smpsAlterNote       $06
0008C559 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C55D E108                       	smpsAlterNote       $08
0008C55F 9D03                       	dc.b	nE2, $03
0008C561 E1EB                       	smpsAlterNote       $EB
0008C563 A801                       	dc.b	nEb3, $01
0008C565 E109                       	smpsAlterNote       $09
0008C567 E701                       	dc.b	smpsNoAttack, $01
0008C569 E1EB                       	smpsAlterNote       $EB
0008C56B E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008C56E E108                       	smpsAlterNote       $08
0008C570 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
0008C57C E1E9                       	smpsAlterNote       $E9
0008C57E A301                       	dc.b	nBb2, $01
0008C580 E1F8                       	smpsAlterNote       $F8
0008C582 E701                       	dc.b	smpsNoAttack, $01
0008C584 E116                       	smpsAlterNote       $16
0008C586 E701                       	dc.b	smpsNoAttack, $01
0008C588 E1F7                       	smpsAlterNote       $F7
0008C58A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C58D E107                       	smpsAlterNote       $07
0008C58F E701                       	dc.b	smpsNoAttack, $01
0008C591 E1EE                       	smpsAlterNote       $EE
0008C593 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C596 E106                       	smpsAlterNote       $06
0008C598 8001                       	dc.b	nRst, $01
0008C59A E108                       	smpsAlterNote       $08
0008C59C 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
0008C5A2 E106                       	smpsAlterNote       $06
0008C5A4 A402 8001                  	dc.b	nB2, $02, nRst, $01
0008C5A8 E108                       	smpsAlterNote       $08
0008C5AA 9D03                       	dc.b	nE2, $03
0008C5AC E10B                       	smpsAlterNote       $0B
0008C5AE 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
0008C5B4 E108                       	smpsAlterNote       $08
0008C5B6 9D03 8001                  	dc.b	nE2, $03, nRst, $01
0008C5BA E10B                       	smpsAlterNote       $0B
0008C5BC 9603                       	dc.b	nA1, $03
0008C5BE E10E                       	smpsAlterNote       $0E
0008C5C0 A001                       	dc.b	nG2, $01
0008C5C2 E118                       	smpsAlterNote       $18
0008C5C4 E701                       	dc.b	smpsNoAttack, $01
0008C5C6 E1E9                       	smpsAlterNote       $E9
0008C5C8 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C5CB E1EE                       	smpsAlterNote       $EE
0008C5CD E701                       	dc.b	smpsNoAttack, $01
0008C5CF E1F8                       	smpsAlterNote       $F8
0008C5D1 E701                       	dc.b	smpsNoAttack, $01
0008C5D3 E102                       	smpsAlterNote       $02
0008C5D5 E701                       	dc.b	smpsNoAttack, $01
0008C5D7 E107                       	smpsAlterNote       $07
0008C5D9 8001                       	dc.b	nRst, $01
0008C5DB E10B                       	smpsAlterNote       $0B
0008C5DD 9603                       	dc.b	nA1, $03
0008C5DF E10C                       	smpsAlterNote       $0C
0008C5E1 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
0008C5E7 E10B                       	smpsAlterNote       $0B
0008C5E9 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008C5F5 8001 9603                  	dc.b	nRst, $01, nA1, $03
0008C5F9 E10C                       	smpsAlterNote       $0C
0008C5FB 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
0008C607 8001                       	dc.b	nRst, $01
0008C609 E10B                       	smpsAlterNote       $0B
0008C60B 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008C613 E107                       	smpsAlterNote       $07
0008C615 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0008C619 E10B                       	smpsAlterNote       $0B
0008C61B 9603                       	dc.b	nA1, $03
0008C61D E109                       	smpsAlterNote       $09
0008C61F 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C623 E108                       	smpsAlterNote       $08
0008C625 9D06                       	dc.b	nE2, $06
0008C627 E107                       	smpsAlterNote       $07
0008C629 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C62D E106                       	smpsAlterNote       $06
0008C62F 9903                       	dc.b	nC2, $03
0008C631 E10C                       	smpsAlterNote       $0C
0008C633 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C637 E10B                       	smpsAlterNote       $0B
0008C639 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008C645 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C64F E10C                       	smpsAlterNote       $0C
0008C651 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
0008C65D 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0008C669 8001                       	dc.b	nRst, $01
0008C66B E10B                       	smpsAlterNote       $0B
0008C66D 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C679 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
0008C685 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
0008C691 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C69B E10C                       	smpsAlterNote       $0C
0008C69D 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
0008C6A9 E10B                       	smpsAlterNote       $0B
0008C6AB 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008C6B3 E107                       	smpsAlterNote       $07
0008C6B5 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0008C6B9 E10B                       	smpsAlterNote       $0B
0008C6BB 9603                       	dc.b	nA1, $03
0008C6BD E109                       	smpsAlterNote       $09
0008C6BF 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C6C3 E108                       	smpsAlterNote       $08
0008C6C5 9D06 8001                  	dc.b	nE2, $06, nRst, $01
0008C6C9 E107                       	smpsAlterNote       $07
0008C6CB 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C6CF E106                       	smpsAlterNote       $06
0008C6D1 9903                       	dc.b	nC2, $03
0008C6D3 E10C                       	smpsAlterNote       $0C
0008C6D5 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C6D9 E10B                       	smpsAlterNote       $0B
0008C6DB 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C6E7 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C6F1 E10C                       	smpsAlterNote       $0C
0008C6F3 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
0008C6FF 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0008C70B 8001                       	dc.b	nRst, $01
0008C70D E10B                       	smpsAlterNote       $0B
0008C70F 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C71B 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C725 E10C                       	smpsAlterNote       $0C
0008C727 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C733 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
0008C73F E10B                       	smpsAlterNote       $0B
0008C741 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C74D 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008C757 E10C                       	smpsAlterNote       $0C
0008C759 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C765 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
0008C771 E10B                       	smpsAlterNote       $0B
0008C773 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
0008C77F 8001                       	dc.b	nRst, $01
0008C781 E1EC                       	smpsAlterNote       $EC
0008C783 A101                       	dc.b	nAb2, $01
0008C785 E1FA                       	smpsAlterNote       $FA
0008C787 E701                       	dc.b	smpsNoAttack, $01
0008C789 E116                       	smpsAlterNote       $16
0008C78B E701                       	dc.b	smpsNoAttack, $01
0008C78D E1F5                       	smpsAlterNote       $F5
0008C78F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C792 E10B                       	smpsAlterNote       $0B
0008C794 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
0008C7A0 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
0008C7AC E107                       	smpsAlterNote       $07
0008C7AE 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C7B4 E10B                       	smpsAlterNote       $0B
0008C7B6 A203                       	dc.b	nA2, $03
0008C7B8 E107                       	smpsAlterNote       $07
0008C7BA 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C7BE E1F3                       	smpsAlterNote       $F3
0008C7C0 A401                       	dc.b	nB2, $01
0008C7C2 E102                       	smpsAlterNote       $02
0008C7C4 E701                       	dc.b	smpsNoAttack, $01
0008C7C6 E109                       	smpsAlterNote       $09
0008C7C8 E701                       	dc.b	smpsNoAttack, $01
0008C7CA E102                       	smpsAlterNote       $02
0008C7CC E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C7CF E106                       	smpsAlterNote       $06
0008C7D1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C7D5 E107                       	smpsAlterNote       $07
0008C7D7 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C7DB E108                       	smpsAlterNote       $08
0008C7DD 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008C7E3 E109                       	smpsAlterNote       $09
0008C7E5 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C7E9 E1F2                       	smpsAlterNote       $F2
0008C7EB A401                       	dc.b	nB2, $01
0008C7ED E1FF                       	smpsAlterNote       $FF
0008C7EF E701                       	dc.b	smpsNoAttack, $01
0008C7F1 E111                       	smpsAlterNote       $11
0008C7F3 E701                       	dc.b	smpsNoAttack, $01
0008C7F5 E1FB                       	smpsAlterNote       $FB
0008C7F7 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C7FA E106                       	smpsAlterNote       $06
0008C7FC E702                       	dc.b	smpsNoAttack, $02
0008C7FE E109                       	smpsAlterNote       $09
0008C800 A007                       	dc.b	nG2, $07
0008C802 E108                       	smpsAlterNote       $08
0008C804 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008C808 E107                       	smpsAlterNote       $07
0008C80A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C810 E10B                       	smpsAlterNote       $0B
0008C812 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C816 E107                       	smpsAlterNote       $07
0008C818 9B03                       	dc.b	nD2, $03
0008C81A E11A                       	smpsAlterNote       $1A
0008C81C A301                       	dc.b	nBb2, $01
0008C81E E1F2                       	smpsAlterNote       $F2
0008C820 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C823 E1FF                       	smpsAlterNote       $FF
0008C825 E701                       	dc.b	smpsNoAttack, $01
0008C827 E111                       	smpsAlterNote       $11
0008C829 E701                       	dc.b	smpsNoAttack, $01
0008C82B E106                       	smpsAlterNote       $06
0008C82D E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C830 E107                       	smpsAlterNote       $07
0008C832 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008C83E E117                       	smpsAlterNote       $17
0008C840 A001                       	dc.b	nG2, $01
0008C842 E1FA                       	smpsAlterNote       $FA
0008C844 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C847 E116                       	smpsAlterNote       $16
0008C849 E701                       	dc.b	smpsNoAttack, $01
0008C84B E1F5                       	smpsAlterNote       $F5
0008C84D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C850 E103                       	smpsAlterNote       $03
0008C852 E701                       	dc.b	smpsNoAttack, $01
0008C854 E10B                       	smpsAlterNote       $0B
0008C856 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C85A E107                       	smpsAlterNote       $07
0008C85C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C862 E109                       	smpsAlterNote       $09
0008C864 9E03                       	dc.b	nF2, $03
0008C866 E10B                       	smpsAlterNote       $0B
0008C868 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C86C E107                       	smpsAlterNote       $07
0008C86E 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C874 E10B                       	smpsAlterNote       $0B
0008C876 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C87A E107                       	smpsAlterNote       $07
0008C87C 9B03                       	dc.b	nD2, $03
0008C87E E11A                       	smpsAlterNote       $1A
0008C880 A301                       	dc.b	nBb2, $01
0008C882 E1F9                       	smpsAlterNote       $F9
0008C884 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C887 E1FF                       	smpsAlterNote       $FF
0008C889 E701                       	dc.b	smpsNoAttack, $01
0008C88B E111                       	smpsAlterNote       $11
0008C88D E701                       	dc.b	smpsNoAttack, $01
0008C88F E106                       	smpsAlterNote       $06
0008C891 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C894 E107                       	smpsAlterNote       $07
0008C896 9B03                       	dc.b	nD2, $03
0008C898 E108                       	smpsAlterNote       $08
0008C89A 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C8A0 E109                       	smpsAlterNote       $09
0008C8A2 A003                       	dc.b	nG2, $03
0008C8A4 E1F0                       	smpsAlterNote       $F0
0008C8A6 A501                       	dc.b	nC3, $01
0008C8A8 E106                       	smpsAlterNote       $06
0008C8AA E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
0008C8AE E109                       	smpsAlterNote       $09
0008C8B0 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C8B4 E108                       	smpsAlterNote       $08
0008C8B6 9C03                       	dc.b	nEb2, $03
0008C8B8 E107                       	smpsAlterNote       $07
0008C8BA 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C8C0 E10B                       	smpsAlterNote       $0B
0008C8C2 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C8C6 E107                       	smpsAlterNote       $07
0008C8C8 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C8CC E11A                       	smpsAlterNote       $1A
0008C8CE A301                       	dc.b	nBb2, $01
0008C8D0 E1F9                       	smpsAlterNote       $F9
0008C8D2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C8D5 E107                       	smpsAlterNote       $07
0008C8D7 E701                       	dc.b	smpsNoAttack, $01
0008C8D9 E1FB                       	smpsAlterNote       $FB
0008C8DB E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C8DE E106                       	smpsAlterNote       $06
0008C8E0 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C8E4 E107                       	smpsAlterNote       $07
0008C8E6 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008C8EE E1EC                       	smpsAlterNote       $EC
0008C8F0 A101                       	dc.b	nAb2, $01
0008C8F2 E108                       	smpsAlterNote       $08
0008C8F4 E701                       	dc.b	smpsNoAttack, $01
0008C8F6 E1E7                       	smpsAlterNote       $E7
0008C8F8 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C8FB E1F5                       	smpsAlterNote       $F5
0008C8FD E701                       	dc.b	smpsNoAttack, $01
0008C8FF E10B                       	smpsAlterNote       $0B
0008C901 E702                       	dc.b	smpsNoAttack, $02
0008C903 E107                       	smpsAlterNote       $07
0008C905 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008C90B E106                       	smpsAlterNote       $06
0008C90D 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008C913 E10C                       	smpsAlterNote       $0C
0008C915 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008C91D E109                       	smpsAlterNote       $09
0008C91F 9E03                       	dc.b	nF2, $03
0008C921 E10C                       	smpsAlterNote       $0C
0008C923 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C927 E1EA                       	smpsAlterNote       $EA
0008C929 A201                       	dc.b	nA2, $01
0008C92B E106                       	smpsAlterNote       $06
0008C92D E701                       	dc.b	smpsNoAttack, $01
0008C92F E114                       	smpsAlterNote       $14
0008C931 E701                       	dc.b	smpsNoAttack, $01
0008C933 E1F0                       	smpsAlterNote       $F0
0008C935 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C938 E10C                       	smpsAlterNote       $0C
0008C93A E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008C946 9703                       	dc.b	nBb1, $03
0008C948 E116                       	smpsAlterNote       $16
0008C94A 9C01                       	dc.b	nEb2, $01
0008C94C E105                       	smpsAlterNote       $05
0008C94E E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C951 E113                       	smpsAlterNote       $13
0008C953 E701                       	dc.b	smpsNoAttack, $01
0008C955 E1FF                       	smpsAlterNote       $FF
0008C957 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C95A E109                       	smpsAlterNote       $09
0008C95C E703                       	dc.b	smpsNoAttack, $03
0008C95E E10C                       	smpsAlterNote       $0C
0008C960 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008C96C 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C974 E109                       	smpsAlterNote       $09
0008C976 9E03                       	dc.b	nF2, $03
0008C978 E10C                       	smpsAlterNote       $0C
0008C97A 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C97E E1EA                       	smpsAlterNote       $EA
0008C980 A201                       	dc.b	nA2, $01
0008C982 E106                       	smpsAlterNote       $06
0008C984 E701                       	dc.b	smpsNoAttack, $01
0008C986 E1E2                       	smpsAlterNote       $E2
0008C988 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C98B E1F0                       	smpsAlterNote       $F0
0008C98D E701                       	dc.b	smpsNoAttack, $01
0008C98F E10C                       	smpsAlterNote       $0C
0008C991 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C99D E116                       	smpsAlterNote       $16
0008C99F 9C01                       	dc.b	nEb2, $01
0008C9A1 E105                       	smpsAlterNote       $05
0008C9A3 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C9A6 E1F1                       	smpsAlterNote       $F1
0008C9A8 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C9AB E1FF                       	smpsAlterNote       $FF
0008C9AD E701                       	dc.b	smpsNoAttack, $01
0008C9AF E109                       	smpsAlterNote       $09
0008C9B1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C9B5 E10C                       	smpsAlterNote       $0C
0008C9B7 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
0008C9C3 E106                       	smpsAlterNote       $06
0008C9C5 9903                       	dc.b	nC2, $03
0008C9C7 E107                       	smpsAlterNote       $07
0008C9C9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C9CD E109                       	smpsAlterNote       $09
0008C9CF 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
0008C9D5 E107                       	smpsAlterNote       $07
0008C9D7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C9DB E108                       	smpsAlterNote       $08
0008C9DD 9D03                       	dc.b	nE2, $03
0008C9DF E10B                       	smpsAlterNote       $0B
0008C9E1 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
0008C9E7 E109                       	smpsAlterNote       $09
0008C9E9 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
0008C9EF E10C                       	smpsAlterNote       $0C
0008C9F1 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
0008C9F7 E106                       	smpsAlterNote       $06
0008C9F9 9903                       	dc.b	nC2, $03
0008C9FB E11A                       	smpsAlterNote       $1A
0008C9FD A301                       	dc.b	nBb2, $01
0008C9FF E1F9                       	smpsAlterNote       $F9
0008CA01 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CA04 E1FF                       	smpsAlterNote       $FF
0008CA06 E701                       	dc.b	smpsNoAttack, $01
0008CA08 E111                       	smpsAlterNote       $11
0008CA0A E701                       	dc.b	smpsNoAttack, $01
0008CA0C E106                       	smpsAlterNote       $06
0008CA0E E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
0008CA15 E109                       	smpsAlterNote       $09
0008CA17 A003                       	dc.b	nG2, $03
0008CA19 E106                       	smpsAlterNote       $06
0008CA1B 9907                       	dc.b	nC2, $07
0008CA1D E107                       	smpsAlterNote       $07
0008CA1F 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
0008CA27 E10B                       	smpsAlterNote       $0B
0008CA29 A203                       	dc.b	nA2, $03
0008CA2B E107                       	smpsAlterNote       $07
0008CA2D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CA31 E1F2                       	smpsAlterNote       $F2
0008CA33 A401                       	dc.b	nB2, $01
0008CA35 E1F9                       	smpsAlterNote       $F9
0008CA37 E701                       	dc.b	smpsNoAttack, $01
0008CA39 E107                       	smpsAlterNote       $07
0008CA3B E701                       	dc.b	smpsNoAttack, $01
0008CA3D E1FB                       	smpsAlterNote       $FB
0008CA3F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CA42 E106                       	smpsAlterNote       $06
0008CA44 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CA48 E107                       	smpsAlterNote       $07
0008CA4A 9B03                       	dc.b	nD2, $03
0008CA4C E108                       	smpsAlterNote       $08
0008CA4E 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008CA54 E109                       	smpsAlterNote       $09
0008CA56 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008CA5A E1F2                       	smpsAlterNote       $F2
0008CA5C A401                       	dc.b	nB2, $01
0008CA5E E1F9                       	smpsAlterNote       $F9
0008CA60 E701                       	dc.b	smpsNoAttack, $01
0008CA62 E107                       	smpsAlterNote       $07
0008CA64 E701                       	dc.b	smpsNoAttack, $01
0008CA66 E1FB                       	smpsAlterNote       $FB
0008CA68 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CA6B E106                       	smpsAlterNote       $06
0008CA6D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CA71 E108                       	smpsAlterNote       $08
0008CA73 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
0008CA77 E10C                       	smpsAlterNote       $0C
0008CA79 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008CA7D E107                       	smpsAlterNote       $07
0008CA7F 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008CA85 E10B                       	smpsAlterNote       $0B
0008CA87 A203                       	dc.b	nA2, $03
0008CA89 E107                       	smpsAlterNote       $07
0008CA8B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CA8F E1F2                       	smpsAlterNote       $F2
0008CA91 A401                       	dc.b	nB2, $01
0008CA93 E1FF                       	smpsAlterNote       $FF
0008CA95 E701                       	dc.b	smpsNoAttack, $01
0008CA97 E107                       	smpsAlterNote       $07
0008CA99 E701                       	dc.b	smpsNoAttack, $01
0008CA9B E1FB                       	smpsAlterNote       $FB
0008CA9D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CAA0 E106                       	smpsAlterNote       $06
0008CAA2 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CAA6 E107                       	smpsAlterNote       $07
0008CAA8 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008CAAC E108                       	smpsAlterNote       $08
0008CAAE 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008CAB4 E109                       	smpsAlterNote       $09
0008CAB6 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008CABA E1F2                       	smpsAlterNote       $F2
0008CABC A401                       	dc.b	nB2, $01
0008CABE E1FF                       	smpsAlterNote       $FF
0008CAC0 E701                       	dc.b	smpsNoAttack, $01
0008CAC2 E111                       	smpsAlterNote       $11
0008CAC4 E701                       	dc.b	smpsNoAttack, $01
0008CAC6 E1FB                       	smpsAlterNote       $FB
0008CAC8 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CACB E106                       	smpsAlterNote       $06
0008CACD E702                       	dc.b	smpsNoAttack, $02
0008CACF E108                       	smpsAlterNote       $08
0008CAD1 9C07                       	dc.b	nEb2, $07
0008CAD3 E10C                       	smpsAlterNote       $0C
0008CAD5 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008CAD9 E107                       	smpsAlterNote       $07
0008CADB 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008CAE1 E10B                       	smpsAlterNote       $0B
0008CAE3 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008CAE7 E107                       	smpsAlterNote       $07
0008CAE9 9B03                       	dc.b	nD2, $03
0008CAEB E11A                       	smpsAlterNote       $1A
0008CAED A301                       	dc.b	nBb2, $01
0008CAEF E1F2                       	smpsAlterNote       $F2
0008CAF1 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CAF4 E1FF                       	smpsAlterNote       $FF
0008CAF6 E701                       	dc.b	smpsNoAttack, $01
0008CAF8 E111                       	smpsAlterNote       $11
0008CAFA E701                       	dc.b	smpsNoAttack, $01
0008CAFC E106                       	smpsAlterNote       $06
0008CAFE E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008CB01 E107                       	smpsAlterNote       $07
0008CB03 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CB07 E108                       	smpsAlterNote       $08
0008CB09 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
0008CB11 E109                       	smpsAlterNote       $09
0008CB13 A003                       	dc.b	nG2, $03
0008CB15 E11A                       	smpsAlterNote       $1A
0008CB17 A301                       	dc.b	nBb2, $01
0008CB19 E1F2                       	smpsAlterNote       $F2
0008CB1B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CB1E E1FF                       	smpsAlterNote       $FF
0008CB20 E701                       	dc.b	smpsNoAttack, $01
0008CB22 E111                       	smpsAlterNote       $11
0008CB24 E701                       	dc.b	smpsNoAttack, $01
0008CB26 E106                       	smpsAlterNote       $06
0008CB28 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008CB2B E108                       	smpsAlterNote       $08
0008CB2D 9C07                       	dc.b	nEb2, $07
0008CB2F E10C                       	smpsAlterNote       $0C
0008CB31 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008CB35 E107                       	smpsAlterNote       $07
0008CB37 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
0008CB43 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
0008CB4D E108                       	smpsAlterNote       $08
0008CB4F 9C06                       	dc.b	nEb2, $06
0008CB51 E10C                       	smpsAlterNote       $0C
0008CB53 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008CB57 E108                       	smpsAlterNote       $08
0008CB59 9C03                       	dc.b	nEb2, $03
0008CB5B E109                       	smpsAlterNote       $09
0008CB5D A003 8001                  	dc.b	nG2, $03, nRst, $01
0008CB61 E10C                       	smpsAlterNote       $0C
0008CB63 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
0008CB6B E107                       	smpsAlterNote       $07
0008CB6D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CB71 F6F4 F8                    	smpsJump            music84_Jump04
0008CB74                            
0008CB74                            ; FM2 Data
0008CB74                            music84_FM2:
0008CB74 E0C0                       	smpsPan             panCenter, $00
0008CB78 E10B                       	smpsAlterNote       $0B
0008CB7A C603 8007                  	dc.b	nA5, $03, nRst, $07
0008CB7E E109                       	smpsAlterNote       $09
0008CB80 C403 800B                  	dc.b	nG5, $03, nRst, $0B
0008CB84 E108                       	smpsAlterNote       $08
0008CB86 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008CB8C E080                       	smpsPan             panLeft, $00
0008CB8E E10C                       	smpsAlterNote       $0C
0008CB90 E6F9                       	smpsAlterVol        $F9
0008CB92 C703                       	dc.b	nBb5, $03
0008CB94 E10B                       	smpsAlterNote       $0B
0008CB96 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008CB9A E109                       	smpsAlterNote       $09
0008CB9C C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008CBA2 E108                       	smpsAlterNote       $08
0008CBA4 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008CBA8 E106                       	smpsAlterNote       $06
0008CBAA BD03                       	dc.b	nC5, $03
0008CBAC E10B                       	smpsAlterNote       $0B
0008CBAE BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008CBB4 E0C0                       	smpsPan             panCenter, $00
0008CBB6 E107                       	smpsAlterNote       $07
0008CBB8 E606                       	smpsAlterVol        $06
0008CBBA BF03                       	dc.b	nD5, $03
0008CBBC                            
0008CBBC                            music84_Jump03:
0008CBBC E108                       	smpsAlterNote       $08
0008CBBE C103 8001                  	dc.b	nE5, $03, nRst, $01
0008CBC2 E109                       	smpsAlterNote       $09
0008CBC4 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
0008CBCA E10B                       	smpsAlterNote       $0B
0008CBCC C607                       	dc.b	nA5, $07
0008CBCE E107                       	smpsAlterNote       $07
0008CBD0 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008CBD4 E106                       	smpsAlterNote       $06
0008CBD6 C90D                       	dc.b	nC6, $0D
0008CBD8 E100                       	smpsAlterNote       $00
0008CBDA E701                       	dc.b	smpsNoAttack, $01
0008CBDC E1FF                       	smpsAlterNote       $FF
0008CBDE E701                       	dc.b	smpsNoAttack, $01
0008CBE0 E103                       	smpsAlterNote       $03
0008CBE2 E701                       	dc.b	smpsNoAttack, $01
0008CBE4 E109                       	smpsAlterNote       $09
0008CBE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CBEA E106                       	smpsAlterNote       $06
0008CBEC E701                       	dc.b	smpsNoAttack, $01
0008CBEE E100                       	smpsAlterNote       $00
0008CBF0 E701                       	dc.b	smpsNoAttack, $01
0008CBF2 E10C                       	smpsAlterNote       $0C
0008CBF4 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008CBF8 E10B                       	smpsAlterNote       $0B
0008CBFA C603                       	dc.b	nA5, $03
0008CBFC E109                       	smpsAlterNote       $09
0008CBFE C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CC02 E10B                       	smpsAlterNote       $0B
0008CC04 C60D                       	dc.b	nA5, $0D
0008CC06 E105                       	smpsAlterNote       $05
0008CC08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC0C E10B                       	smpsAlterNote       $0B
0008CC0E E701                       	dc.b	smpsNoAttack, $01
0008CC10 E10E                       	smpsAlterNote       $0E
0008CC12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC16 E108                       	smpsAlterNote       $08
0008CC18 E701                       	dc.b	smpsNoAttack, $01
0008CC1A E104                       	smpsAlterNote       $04
0008CC1C E701                       	dc.b	smpsNoAttack, $01
0008CC1E E105                       	smpsAlterNote       $05
0008CC20 E701                       	dc.b	smpsNoAttack, $01
0008CC22 E10B                       	smpsAlterNote       $0B
0008CC24 E701                       	dc.b	smpsNoAttack, $01
0008CC26 E10F                       	smpsAlterNote       $0F
0008CC28 E701                       	dc.b	smpsNoAttack, $01
0008CC2A E10B                       	smpsAlterNote       $0B
0008CC2C E701                       	dc.b	smpsNoAttack, $01
0008CC2E E108                       	smpsAlterNote       $08
0008CC30 E701                       	dc.b	smpsNoAttack, $01
0008CC32 E104                       	smpsAlterNote       $04
0008CC34 E701                       	dc.b	smpsNoAttack, $01
0008CC36 E108                       	smpsAlterNote       $08
0008CC38 E701                       	dc.b	smpsNoAttack, $01
0008CC3A E10E                       	smpsAlterNote       $0E
0008CC3C E701                       	dc.b	smpsNoAttack, $01
0008CC3E E10F                       	smpsAlterNote       $0F
0008CC40 E701                       	dc.b	smpsNoAttack, $01
0008CC42 E10B                       	smpsAlterNote       $0B
0008CC44 E701                       	dc.b	smpsNoAttack, $01
0008CC46 E105                       	smpsAlterNote       $05
0008CC48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC4C E108                       	smpsAlterNote       $08
0008CC4E E701                       	dc.b	smpsNoAttack, $01
0008CC50 E10E                       	smpsAlterNote       $0E
0008CC52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC56 E108                       	smpsAlterNote       $08
0008CC58 E701                       	dc.b	smpsNoAttack, $01
0008CC5A E105                       	smpsAlterNote       $05
0008CC5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC60 E10B                       	smpsAlterNote       $0B
0008CC62 E701                       	dc.b	smpsNoAttack, $01
0008CC64 E10F                       	smpsAlterNote       $0F
0008CC66 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008CC6A E107                       	smpsAlterNote       $07
0008CC6C BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008CC70 E108                       	smpsAlterNote       $08
0008CC72 C103                       	dc.b	nE5, $03
0008CC74 E109                       	smpsAlterNote       $09
0008CC76 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008CC7E E10B                       	smpsAlterNote       $0B
0008CC80 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008CC84 E107                       	smpsAlterNote       $07
0008CC86 BF03                       	dc.b	nD5, $03
0008CC88 E106                       	smpsAlterNote       $06
0008CC8A C90D 8001                  	dc.b	nC6, $0D, nRst, $01
0008CC8E E107                       	smpsAlterNote       $07
0008CC90 CB03                       	dc.b	nD6, $03
0008CC92 E10C                       	smpsAlterNote       $0C
0008CC94 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008CC98 E10B                       	smpsAlterNote       $0B
0008CC9A C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CC9E E109                       	smpsAlterNote       $09
0008CCA0 C404                       	dc.b	nG5, $04
0008CCA2 E10B                       	smpsAlterNote       $0B
0008CCA4 C60D                       	dc.b	nA5, $0D
0008CCA6 E108                       	smpsAlterNote       $08
0008CCA8 E701                       	dc.b	smpsNoAttack, $01
0008CCAA E104                       	smpsAlterNote       $04
0008CCAC E701                       	dc.b	smpsNoAttack, $01
0008CCAE E108                       	smpsAlterNote       $08
0008CCB0 E701                       	dc.b	smpsNoAttack, $01
0008CCB2 E10B                       	smpsAlterNote       $0B
0008CCB4 E701                       	dc.b	smpsNoAttack, $01
0008CCB6 E10F                       	smpsAlterNote       $0F
0008CCB8 E701                       	dc.b	smpsNoAttack, $01
0008CCBA E10B                       	smpsAlterNote       $0B
0008CCBC E701                       	dc.b	smpsNoAttack, $01
0008CCBE E105                       	smpsAlterNote       $05
0008CCC0 E701                       	dc.b	smpsNoAttack, $01
0008CCC2 E104                       	smpsAlterNote       $04
0008CCC4 E701                       	dc.b	smpsNoAttack, $01
0008CCC6 E108                       	smpsAlterNote       $08
0008CCC8 E701                       	dc.b	smpsNoAttack, $01
0008CCCA E10E                       	smpsAlterNote       $0E
0008CCCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCD0 E10B                       	smpsAlterNote       $0B
0008CCD2 E701                       	dc.b	smpsNoAttack, $01
0008CCD4 E105                       	smpsAlterNote       $05
0008CCD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCDA E10B                       	smpsAlterNote       $0B
0008CCDC E701                       	dc.b	smpsNoAttack, $01
0008CCDE E10E                       	smpsAlterNote       $0E
0008CCE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCE4 E108                       	smpsAlterNote       $08
0008CCE6 E701                       	dc.b	smpsNoAttack, $01
0008CCE8 E104                       	smpsAlterNote       $04
0008CCEA E701                       	dc.b	smpsNoAttack, $01
0008CCEC E105                       	smpsAlterNote       $05
0008CCEE E701                       	dc.b	smpsNoAttack, $01
0008CCF0 E10B                       	smpsAlterNote       $0B
0008CCF2 E701                       	dc.b	smpsNoAttack, $01
0008CCF4 E10F                       	smpsAlterNote       $0F
0008CCF6 E701                       	dc.b	smpsNoAttack, $01
0008CCF8 E10B                       	smpsAlterNote       $0B
0008CCFA E701                       	dc.b	smpsNoAttack, $01
0008CCFC E108                       	smpsAlterNote       $08
0008CCFE E701                       	dc.b	smpsNoAttack, $01
0008CD00 E105                       	smpsAlterNote       $05
0008CD02 8001                       	dc.b	nRst, $01
0008CD04 E109                       	smpsAlterNote       $09
0008CD06 C401                       	dc.b	nG5, $01
0008CD08 E10B                       	smpsAlterNote       $0B
0008CD0A E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
0008CD13 E109                       	smpsAlterNote       $09
0008CD15 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008CD19 E10B                       	smpsAlterNote       $0B
0008CD1B C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CD1F E107                       	smpsAlterNote       $07
0008CD21 BF0D                       	dc.b	nD5, $0D
0008CD23 E101                       	smpsAlterNote       $01
0008CD25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD29 E104                       	smpsAlterNote       $04
0008CD2B E701                       	dc.b	smpsNoAttack, $01
0008CD2D E10A                       	smpsAlterNote       $0A
0008CD2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD33 E104                       	smpsAlterNote       $04
0008CD35 E701                       	dc.b	smpsNoAttack, $01
0008CD37 E101                       	smpsAlterNote       $01
0008CD39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD3D E107                       	smpsAlterNote       $07
0008CD3F E701                       	dc.b	smpsNoAttack, $01
0008CD41 E10B                       	smpsAlterNote       $0B
0008CD43 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CD47 E108                       	smpsAlterNote       $08
0008CD49 C101                       	dc.b	nE5, $01
0008CD4B E109                       	smpsAlterNote       $09
0008CD4D E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008CD52 E10B                       	smpsAlterNote       $0B
0008CD54 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008CD5C E108                       	smpsAlterNote       $08
0008CD5E CD06                       	dc.b	nE6, $06
0008CD60 E109                       	smpsAlterNote       $09
0008CD62 CE07                       	dc.b	nF6, $07
0008CD64 E108                       	smpsAlterNote       $08
0008CD66 CD03 8001                  	dc.b	nE6, $03, nRst, $01
0008CD6A E106                       	smpsAlterNote       $06
0008CD6C C903                       	dc.b	nC6, $03
0008CD6E E109                       	smpsAlterNote       $09
0008CD70 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CD74 E10C                       	smpsAlterNote       $0C
0008CD76 C70D                       	dc.b	nBb5, $0D
0008CD78 E106                       	smpsAlterNote       $06
0008CD7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD7E E109                       	smpsAlterNote       $09
0008CD80 E701                       	dc.b	smpsNoAttack, $01
0008CD82 E10F                       	smpsAlterNote       $0F
0008CD84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD88 E109                       	smpsAlterNote       $09
0008CD8A E701                       	dc.b	smpsNoAttack, $01
0008CD8C E106                       	smpsAlterNote       $06
0008CD8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD92 E10C                       	smpsAlterNote       $0C
0008CD94 E701                       	dc.b	smpsNoAttack, $01
0008CD96 E110                       	smpsAlterNote       $10
0008CD98 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CD9C E10B                       	smpsAlterNote       $0B
0008CD9E C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
0008CDA2 E105                       	smpsAlterNote       $05
0008CDA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDA8 E10B                       	smpsAlterNote       $0B
0008CDAA E701                       	dc.b	smpsNoAttack, $01
0008CDAC E10E                       	smpsAlterNote       $0E
0008CDAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDB2 E108                       	smpsAlterNote       $08
0008CDB4 E701                       	dc.b	smpsNoAttack, $01
0008CDB6 E104                       	smpsAlterNote       $04
0008CDB8 E701                       	dc.b	smpsNoAttack, $01
0008CDBA E105                       	smpsAlterNote       $05
0008CDBC E701                       	dc.b	smpsNoAttack, $01
0008CDBE E10B                       	smpsAlterNote       $0B
0008CDC0 E701                       	dc.b	smpsNoAttack, $01
0008CDC2 E10F                       	smpsAlterNote       $0F
0008CDC4 E701                       	dc.b	smpsNoAttack, $01
0008CDC6 E10B                       	smpsAlterNote       $0B
0008CDC8 E701                       	dc.b	smpsNoAttack, $01
0008CDCA E108                       	smpsAlterNote       $08
0008CDCC E701                       	dc.b	smpsNoAttack, $01
0008CDCE E104                       	smpsAlterNote       $04
0008CDD0 E701                       	dc.b	smpsNoAttack, $01
0008CDD2 E108                       	smpsAlterNote       $08
0008CDD4 E701                       	dc.b	smpsNoAttack, $01
0008CDD6 E10E                       	smpsAlterNote       $0E
0008CDD8 E701                       	dc.b	smpsNoAttack, $01
0008CDDA E10F                       	smpsAlterNote       $0F
0008CDDC E701                       	dc.b	smpsNoAttack, $01
0008CDDE E10B                       	smpsAlterNote       $0B
0008CDE0 E701                       	dc.b	smpsNoAttack, $01
0008CDE2 E105                       	smpsAlterNote       $05
0008CDE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDE8 E108                       	smpsAlterNote       $08
0008CDEA E701                       	dc.b	smpsNoAttack, $01
0008CDEC E10E                       	smpsAlterNote       $0E
0008CDEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDF2 E108                       	smpsAlterNote       $08
0008CDF4 E701                       	dc.b	smpsNoAttack, $01
0008CDF6 E105                       	smpsAlterNote       $05
0008CDF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDFC E10B                       	smpsAlterNote       $0B
0008CDFE E701                       	dc.b	smpsNoAttack, $01
0008CE00 E10F                       	smpsAlterNote       $0F
0008CE02 E701                       	dc.b	smpsNoAttack, $01
0008CE04 E10E                       	smpsAlterNote       $0E
0008CE06 E701                       	dc.b	smpsNoAttack, $01
0008CE08 E108                       	smpsAlterNote       $08
0008CE0A E701                       	dc.b	smpsNoAttack, $01
0008CE0C E104                       	smpsAlterNote       $04
0008CE0E E701                       	dc.b	smpsNoAttack, $01
0008CE10 E108                       	smpsAlterNote       $08
0008CE12 E701                       	dc.b	smpsNoAttack, $01
0008CE14 E10E                       	smpsAlterNote       $0E
0008CE16 E701                       	dc.b	smpsNoAttack, $01
0008CE18 E10F                       	smpsAlterNote       $0F
0008CE1A E701                       	dc.b	smpsNoAttack, $01
0008CE1C E10B                       	smpsAlterNote       $0B
0008CE1E E701                       	dc.b	smpsNoAttack, $01
0008CE20 E105                       	smpsAlterNote       $05
0008CE22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE26 E108                       	smpsAlterNote       $08
0008CE28 E701                       	dc.b	smpsNoAttack, $01
0008CE2A E10E                       	smpsAlterNote       $0E
0008CE2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE30 E108                       	smpsAlterNote       $08
0008CE32 E701                       	dc.b	smpsNoAttack, $01
0008CE34 E105                       	smpsAlterNote       $05
0008CE36 E701                       	dc.b	smpsNoAttack, $01
0008CE38 E10B                       	smpsAlterNote       $0B
0008CE3A C60D                       	dc.b	nA5, $0D
0008CE3C E108                       	smpsAlterNote       $08
0008CE3E E701                       	dc.b	smpsNoAttack, $01
0008CE40 E104                       	smpsAlterNote       $04
0008CE42 E701                       	dc.b	smpsNoAttack, $01
0008CE44 E105                       	smpsAlterNote       $05
0008CE46 E701                       	dc.b	smpsNoAttack, $01
0008CE48 E10B                       	smpsAlterNote       $0B
0008CE4A E701                       	dc.b	smpsNoAttack, $01
0008CE4C E10F                       	smpsAlterNote       $0F
0008CE4E E701                       	dc.b	smpsNoAttack, $01
0008CE50 E10B                       	smpsAlterNote       $0B
0008CE52 E701                       	dc.b	smpsNoAttack, $01
0008CE54 E108                       	smpsAlterNote       $08
0008CE56 E701                       	dc.b	smpsNoAttack, $01
0008CE58 E104                       	smpsAlterNote       $04
0008CE5A E701                       	dc.b	smpsNoAttack, $01
0008CE5C E108                       	smpsAlterNote       $08
0008CE5E E701                       	dc.b	smpsNoAttack, $01
0008CE60 E10E                       	smpsAlterNote       $0E
0008CE62 E701                       	dc.b	smpsNoAttack, $01
0008CE64 E10F                       	smpsAlterNote       $0F
0008CE66 E701                       	dc.b	smpsNoAttack, $01
0008CE6A E109                       	smpsAlterNote       $09
0008CE6C E6FF                       	smpsAlterVol        $FF
0008CE6E C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
0008CE78 E108                       	smpsAlterNote       $08
0008CE7A C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008CE80 E107                       	smpsAlterNote       $07
0008CE82 E601                       	smpsAlterVol        $01
0008CE84 BF03                       	dc.b	nD5, $03
0008CE86 E108                       	smpsAlterNote       $08
0008CE88 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008CE8C E109                       	smpsAlterNote       $09
0008CE8E C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008CE94 E10B                       	smpsAlterNote       $0B
0008CE96 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008CE9A E107                       	smpsAlterNote       $07
0008CE9C BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008CEA0 E106                       	smpsAlterNote       $06
0008CEA2 C90D                       	dc.b	nC6, $0D
0008CEA4 E103                       	smpsAlterNote       $03
0008CEA6 E701                       	dc.b	smpsNoAttack, $01
0008CEA8 E1FF                       	smpsAlterNote       $FF
0008CEAA E701                       	dc.b	smpsNoAttack, $01
0008CEAC E103                       	smpsAlterNote       $03
0008CEAE E701                       	dc.b	smpsNoAttack, $01
0008CEB0 E109                       	smpsAlterNote       $09
0008CEB2 E701                       	dc.b	smpsNoAttack, $01
0008CEB4 E10A                       	smpsAlterNote       $0A
0008CEB6 E701                       	dc.b	smpsNoAttack, $01
0008CEB8 E106                       	smpsAlterNote       $06
0008CEBA E701                       	dc.b	smpsNoAttack, $01
0008CEBC E100                       	smpsAlterNote       $00
0008CEBE E701                       	dc.b	smpsNoAttack, $01
0008CEC0 E10C                       	smpsAlterNote       $0C
0008CEC2 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008CEC6 E10B                       	smpsAlterNote       $0B
0008CEC8 C603                       	dc.b	nA5, $03
0008CECA E109                       	smpsAlterNote       $09
0008CECC C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CED0 E10B                       	smpsAlterNote       $0B
0008CED2 C60D                       	dc.b	nA5, $0D
0008CED4 E105                       	smpsAlterNote       $05
0008CED6 E701                       	dc.b	smpsNoAttack, $01
0008CED8 E104                       	smpsAlterNote       $04
0008CEDA E701                       	dc.b	smpsNoAttack, $01
0008CEDC E108                       	smpsAlterNote       $08
0008CEDE E701                       	dc.b	smpsNoAttack, $01
0008CEE0 E10E                       	smpsAlterNote       $0E
0008CEE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CEE6 E10B                       	smpsAlterNote       $0B
0008CEE8 E701                       	dc.b	smpsNoAttack, $01
0008CEEA E105                       	smpsAlterNote       $05
0008CEEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CEF0 E10B                       	smpsAlterNote       $0B
0008CEF2 E701                       	dc.b	smpsNoAttack, $01
0008CEF4 E10E                       	smpsAlterNote       $0E
0008CEF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CEFA E108                       	smpsAlterNote       $08
0008CEFC E701                       	dc.b	smpsNoAttack, $01
0008CEFE E104                       	smpsAlterNote       $04
0008CF00 E701                       	dc.b	smpsNoAttack, $01
0008CF02 E105                       	smpsAlterNote       $05
0008CF04 E701                       	dc.b	smpsNoAttack, $01
0008CF06 E10B                       	smpsAlterNote       $0B
0008CF08 E701                       	dc.b	smpsNoAttack, $01
0008CF0A E10F                       	smpsAlterNote       $0F
0008CF0C E701                       	dc.b	smpsNoAttack, $01
0008CF0E E10B                       	smpsAlterNote       $0B
0008CF10 E701                       	dc.b	smpsNoAttack, $01
0008CF12 E108                       	smpsAlterNote       $08
0008CF14 E701                       	dc.b	smpsNoAttack, $01
0008CF16 E104                       	smpsAlterNote       $04
0008CF18 E701                       	dc.b	smpsNoAttack, $01
0008CF1A E108                       	smpsAlterNote       $08
0008CF1C E701                       	dc.b	smpsNoAttack, $01
0008CF1E E10E                       	smpsAlterNote       $0E
0008CF20 E701                       	dc.b	smpsNoAttack, $01
0008CF22 E10F                       	smpsAlterNote       $0F
0008CF24 E701                       	dc.b	smpsNoAttack, $01
0008CF26 E10B                       	smpsAlterNote       $0B
0008CF28 E701                       	dc.b	smpsNoAttack, $01
0008CF2A E105                       	smpsAlterNote       $05
0008CF2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF30 E108                       	smpsAlterNote       $08
0008CF32 E701                       	dc.b	smpsNoAttack, $01
0008CF34 E10E                       	smpsAlterNote       $0E
0008CF36 E701                       	dc.b	smpsNoAttack, $01
0008CF38 E10F                       	smpsAlterNote       $0F
0008CF3A 800F                       	dc.b	nRst, $0F
0008CF3C E107                       	smpsAlterNote       $07
0008CF3E BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008CF42 E108                       	smpsAlterNote       $08
0008CF44 C103                       	dc.b	nE5, $03
0008CF46 E109                       	smpsAlterNote       $09
0008CF48 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008CF4E E10B                       	smpsAlterNote       $0B
0008CF50 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008CF54 E107                       	smpsAlterNote       $07
0008CF56 BF03                       	dc.b	nD5, $03
0008CF58 E106                       	smpsAlterNote       $06
0008CF5A C90E                       	dc.b	nC6, $0E
0008CF5C E107                       	smpsAlterNote       $07
0008CF5E CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008CF62 E10C                       	smpsAlterNote       $0C
0008CF64 C704                       	dc.b	nBb5, $04
0008CF66 E10B                       	smpsAlterNote       $0B
0008CF68 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CF6C E109                       	smpsAlterNote       $09
0008CF6E C404                       	dc.b	nG5, $04
0008CF70 E10B                       	smpsAlterNote       $0B
0008CF72 C60D                       	dc.b	nA5, $0D
0008CF74 E108                       	smpsAlterNote       $08
0008CF76 E701                       	dc.b	smpsNoAttack, $01
0008CF78 E105                       	smpsAlterNote       $05
0008CF7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF7E E10B                       	smpsAlterNote       $0B
0008CF80 E701                       	dc.b	smpsNoAttack, $01
0008CF82 E10F                       	smpsAlterNote       $0F
0008CF84 E701                       	dc.b	smpsNoAttack, $01
0008CF86 E10E                       	smpsAlterNote       $0E
0008CF88 E701                       	dc.b	smpsNoAttack, $01
0008CF8A E108                       	smpsAlterNote       $08
0008CF8C E701                       	dc.b	smpsNoAttack, $01
0008CF8E E104                       	smpsAlterNote       $04
0008CF90 E701                       	dc.b	smpsNoAttack, $01
0008CF92 E108                       	smpsAlterNote       $08
0008CF94 E701                       	dc.b	smpsNoAttack, $01
0008CF96 E10B                       	smpsAlterNote       $0B
0008CF98 E701                       	dc.b	smpsNoAttack, $01
0008CF9A E10F                       	smpsAlterNote       $0F
0008CF9C E701                       	dc.b	smpsNoAttack, $01
0008CF9E E10B                       	smpsAlterNote       $0B
0008CFA0 E701                       	dc.b	smpsNoAttack, $01
0008CFA2 E105                       	smpsAlterNote       $05
0008CFA4 E701                       	dc.b	smpsNoAttack, $01
0008CFA6 E104                       	smpsAlterNote       $04
0008CFA8 E701                       	dc.b	smpsNoAttack, $01
0008CFAA E108                       	smpsAlterNote       $08
0008CFAC E701                       	dc.b	smpsNoAttack, $01
0008CFAE E10E                       	smpsAlterNote       $0E
0008CFB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFB4 E10B                       	smpsAlterNote       $0B
0008CFB6 E701                       	dc.b	smpsNoAttack, $01
0008CFB8 E105                       	smpsAlterNote       $05
0008CFBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFBE E10B                       	smpsAlterNote       $0B
0008CFC0 E701                       	dc.b	smpsNoAttack, $01
0008CFC2 E10E                       	smpsAlterNote       $0E
0008CFC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFC8 E108                       	smpsAlterNote       $08
0008CFCA E701                       	dc.b	smpsNoAttack, $01
0008CFCC E105                       	smpsAlterNote       $05
0008CFCE 8001                       	dc.b	nRst, $01
0008CFD0 E109                       	smpsAlterNote       $09
0008CFD2 C402                       	dc.b	nG5, $02
0008CFD4 E10B                       	smpsAlterNote       $0B
0008CFD6 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008CFDF E109                       	smpsAlterNote       $09
0008CFE1 C404                       	dc.b	nG5, $04
0008CFE3 E10B                       	smpsAlterNote       $0B
0008CFE5 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CFE9 E107                       	smpsAlterNote       $07
0008CFEB BF0D                       	dc.b	nD5, $0D
0008CFED E101                       	smpsAlterNote       $01
0008CFEF E701                       	dc.b	smpsNoAttack, $01
0008CFF1 E100                       	smpsAlterNote       $00
0008CFF3 E701                       	dc.b	smpsNoAttack, $01
0008CFF5 E104                       	smpsAlterNote       $04
0008CFF7 E701                       	dc.b	smpsNoAttack, $01
0008CFF9 E10A                       	smpsAlterNote       $0A
0008CFFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFFF E107                       	smpsAlterNote       $07
0008D001 E701                       	dc.b	smpsNoAttack, $01
0008D003 E101                       	smpsAlterNote       $01
0008D005 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D009 E107                       	smpsAlterNote       $07
0008D00B E701                       	dc.b	smpsNoAttack, $01
0008D00D E10A                       	smpsAlterNote       $0A
0008D00F E701                       	dc.b	smpsNoAttack, $01
0008D011 E10B                       	smpsAlterNote       $0B
0008D013 8001                       	dc.b	nRst, $01
0008D015 E108                       	smpsAlterNote       $08
0008D017 C101                       	dc.b	nE5, $01
0008D019 E109                       	smpsAlterNote       $09
0008D01B E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008D020 E10B                       	smpsAlterNote       $0B
0008D022 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008D02A E108                       	smpsAlterNote       $08
0008D02C CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008D030 E109                       	smpsAlterNote       $09
0008D032 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008D036 E108                       	smpsAlterNote       $08
0008D038 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008D03C E106                       	smpsAlterNote       $06
0008D03E C903                       	dc.b	nC6, $03
0008D040 E109                       	smpsAlterNote       $09
0008D042 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D046 E10C                       	smpsAlterNote       $0C
0008D048 C70D                       	dc.b	nBb5, $0D
0008D04A E109                       	smpsAlterNote       $09
0008D04C E701                       	dc.b	smpsNoAttack, $01
0008D04E E105                       	smpsAlterNote       $05
0008D050 E701                       	dc.b	smpsNoAttack, $01
0008D052 E109                       	smpsAlterNote       $09
0008D054 E701                       	dc.b	smpsNoAttack, $01
0008D056 E10F                       	smpsAlterNote       $0F
0008D058 E701                       	dc.b	smpsNoAttack, $01
0008D05A E110                       	smpsAlterNote       $10
0008D05C E701                       	dc.b	smpsNoAttack, $01
0008D05E E10C                       	smpsAlterNote       $0C
0008D060 E701                       	dc.b	smpsNoAttack, $01
0008D062 E106                       	smpsAlterNote       $06
0008D064 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D068 E109                       	smpsAlterNote       $09
0008D06A E701                       	dc.b	smpsNoAttack, $01
0008D06C E10F                       	smpsAlterNote       $0F
0008D06E E701                       	dc.b	smpsNoAttack, $01
0008D070 E110                       	smpsAlterNote       $10
0008D072 8001                       	dc.b	nRst, $01
0008D074 E10B                       	smpsAlterNote       $0B
0008D076 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008D07C E105                       	smpsAlterNote       $05
0008D07E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D082 E108                       	smpsAlterNote       $08
0008D084 E701                       	dc.b	smpsNoAttack, $01
0008D086 E10E                       	smpsAlterNote       $0E
0008D088 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D08C E108                       	smpsAlterNote       $08
0008D08E E701                       	dc.b	smpsNoAttack, $01
0008D090 E105                       	smpsAlterNote       $05
0008D092 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D096 E10B                       	smpsAlterNote       $0B
0008D098 E701                       	dc.b	smpsNoAttack, $01
0008D09A E10F                       	smpsAlterNote       $0F
0008D09C E701                       	dc.b	smpsNoAttack, $01
0008D09E E10E                       	smpsAlterNote       $0E
0008D0A0 E701                       	dc.b	smpsNoAttack, $01
0008D0A2 E108                       	smpsAlterNote       $08
0008D0A4 E701                       	dc.b	smpsNoAttack, $01
0008D0A6 E104                       	smpsAlterNote       $04
0008D0A8 E701                       	dc.b	smpsNoAttack, $01
0008D0AA E108                       	smpsAlterNote       $08
0008D0AC E701                       	dc.b	smpsNoAttack, $01
0008D0AE E10B                       	smpsAlterNote       $0B
0008D0B0 E701                       	dc.b	smpsNoAttack, $01
0008D0B2 E10F                       	smpsAlterNote       $0F
0008D0B4 E701                       	dc.b	smpsNoAttack, $01
0008D0B6 E10B                       	smpsAlterNote       $0B
0008D0B8 E701                       	dc.b	smpsNoAttack, $01
0008D0BA E105                       	smpsAlterNote       $05
0008D0BC E701                       	dc.b	smpsNoAttack, $01
0008D0BE E104                       	smpsAlterNote       $04
0008D0C0 E701                       	dc.b	smpsNoAttack, $01
0008D0C2 E108                       	smpsAlterNote       $08
0008D0C4 E701                       	dc.b	smpsNoAttack, $01
0008D0C6 E10E                       	smpsAlterNote       $0E
0008D0C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0CC E10B                       	smpsAlterNote       $0B
0008D0CE E701                       	dc.b	smpsNoAttack, $01
0008D0D0 E105                       	smpsAlterNote       $05
0008D0D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0D6 E10B                       	smpsAlterNote       $0B
0008D0D8 E701                       	dc.b	smpsNoAttack, $01
0008D0DA E10E                       	smpsAlterNote       $0E
0008D0DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0E0 E108                       	smpsAlterNote       $08
0008D0E2 E701                       	dc.b	smpsNoAttack, $01
0008D0E4 E104                       	smpsAlterNote       $04
0008D0E6 E701                       	dc.b	smpsNoAttack, $01
0008D0E8 E105                       	smpsAlterNote       $05
0008D0EA E701                       	dc.b	smpsNoAttack, $01
0008D0EC E10B                       	smpsAlterNote       $0B
0008D0EE E701                       	dc.b	smpsNoAttack, $01
0008D0F0 E10F                       	smpsAlterNote       $0F
0008D0F2 E701                       	dc.b	smpsNoAttack, $01
0008D0F4 E10B                       	smpsAlterNote       $0B
0008D0F6 E701                       	dc.b	smpsNoAttack, $01
0008D0F8 E108                       	smpsAlterNote       $08
0008D0FA E701                       	dc.b	smpsNoAttack, $01
0008D0FC E104                       	smpsAlterNote       $04
0008D0FE E701                       	dc.b	smpsNoAttack, $01
0008D100 E108                       	smpsAlterNote       $08
0008D102 E701                       	dc.b	smpsNoAttack, $01
0008D104 E10E                       	smpsAlterNote       $0E
0008D106 E701                       	dc.b	smpsNoAttack, $01
0008D108 E10F                       	smpsAlterNote       $0F
0008D10A E701                       	dc.b	smpsNoAttack, $01
0008D10C E10B                       	smpsAlterNote       $0B
0008D10E E701                       	dc.b	smpsNoAttack, $01
0008D110 E105                       	smpsAlterNote       $05
0008D112 E701                       	dc.b	smpsNoAttack, $01
0008D114 E10B                       	smpsAlterNote       $0B
0008D116 C60E                       	dc.b	nA5, $0E
0008D118 E105                       	smpsAlterNote       $05
0008D11A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D11E E10B                       	smpsAlterNote       $0B
0008D120 E701                       	dc.b	smpsNoAttack, $01
0008D122 E10E                       	smpsAlterNote       $0E
0008D124 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D128 E108                       	smpsAlterNote       $08
0008D12A E701                       	dc.b	smpsNoAttack, $01
0008D12C E104                       	smpsAlterNote       $04
0008D12E E701                       	dc.b	smpsNoAttack, $01
0008D130 E105                       	smpsAlterNote       $05
0008D132 E701                       	dc.b	smpsNoAttack, $01
0008D134 E10B                       	smpsAlterNote       $0B
0008D136 E701                       	dc.b	smpsNoAttack, $01
0008D138 E10F                       	smpsAlterNote       $0F
0008D13A E701                       	dc.b	smpsNoAttack, $01
0008D13C E10B                       	smpsAlterNote       $0B
0008D13E E701                       	dc.b	smpsNoAttack, $01
0008D140 E108                       	smpsAlterNote       $08
0008D142 E701                       	dc.b	smpsNoAttack, $01
0008D144 E104                       	smpsAlterNote       $04
0008D146 E701                       	dc.b	smpsNoAttack, $01
0008D148 E108                       	smpsAlterNote       $08
0008D14A E701                       	dc.b	smpsNoAttack, $01
0008D14C E10E                       	smpsAlterNote       $0E
0008D14E E701                       	dc.b	smpsNoAttack, $01
0008D150 E10F                       	smpsAlterNote       $0F
0008D152 E701                       	dc.b	smpsNoAttack, $01
0008D154 E10B                       	smpsAlterNote       $0B
0008D156 E701                       	dc.b	smpsNoAttack, $01
0008D158 E105                       	smpsAlterNote       $05
0008D15A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D15E E108                       	smpsAlterNote       $08
0008D160 E701                       	dc.b	smpsNoAttack, $01
0008D162 E10E                       	smpsAlterNote       $0E
0008D164 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D168 E108                       	smpsAlterNote       $08
0008D16A E701                       	dc.b	smpsNoAttack, $01
0008D16C E105                       	smpsAlterNote       $05
0008D16E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D172 E10B                       	smpsAlterNote       $0B
0008D174 E701                       	dc.b	smpsNoAttack, $01
0008D176 E10F                       	smpsAlterNote       $0F
0008D178 E701                       	dc.b	smpsNoAttack, $01
0008D17A E10E                       	smpsAlterNote       $0E
0008D17C E701                       	dc.b	smpsNoAttack, $01
0008D17E E108                       	smpsAlterNote       $08
0008D180 E701                       	dc.b	smpsNoAttack, $01
0008D182 E104                       	smpsAlterNote       $04
0008D184 E701                       	dc.b	smpsNoAttack, $01
0008D186 E108                       	smpsAlterNote       $08
0008D188 E701                       	dc.b	smpsNoAttack, $01
0008D18A E10E                       	smpsAlterNote       $0E
0008D18C E701                       	dc.b	smpsNoAttack, $01
0008D18E E10F                       	smpsAlterNote       $0F
0008D190 E701                       	dc.b	smpsNoAttack, $01
0008D192 E10B                       	smpsAlterNote       $0B
0008D194 E701                       	dc.b	smpsNoAttack, $01
0008D196 E105                       	smpsAlterNote       $05
0008D198 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D19C E108                       	smpsAlterNote       $08
0008D19E E701                       	dc.b	smpsNoAttack, $01
0008D1A0 E10E                       	smpsAlterNote       $0E
0008D1A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1A6 E108                       	smpsAlterNote       $08
0008D1A8 E701                       	dc.b	smpsNoAttack, $01
0008D1AA E105                       	smpsAlterNote       $05
0008D1AC E701                       	dc.b	smpsNoAttack, $01
0008D1B0 E10B                       	smpsAlterNote       $0B
0008D1B2 E6FD                       	smpsAlterVol        $FD
0008D1B4 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D1B8 E109                       	smpsAlterNote       $09
0008D1BA C404                       	dc.b	nG5, $04
0008D1BC E10B                       	smpsAlterNote       $0B
0008D1BE C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D1C2 E107                       	smpsAlterNote       $07
0008D1C4 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008D1CA E10B                       	smpsAlterNote       $0B
0008D1CC C604                       	dc.b	nA5, $04
0008D1CE E109                       	smpsAlterNote       $09
0008D1D0 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008D1D4 E10B                       	smpsAlterNote       $0B
0008D1D6 C604                       	dc.b	nA5, $04
0008D1D8 E108                       	smpsAlterNote       $08
0008D1DA C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
0008D1E2 E106                       	smpsAlterNote       $06
0008D1E4 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008D1E8 E10C                       	smpsAlterNote       $0C
0008D1EA C704                       	dc.b	nBb5, $04
0008D1EC E10B                       	smpsAlterNote       $0B
0008D1EE C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D1F2 E109                       	smpsAlterNote       $09
0008D1F4 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008D1FE E10B                       	smpsAlterNote       $0B
0008D200 C60D                       	dc.b	nA5, $0D
0008D202 E108                       	smpsAlterNote       $08
0008D204 E701                       	dc.b	smpsNoAttack, $01
0008D206 E104                       	smpsAlterNote       $04
0008D208 E701                       	dc.b	smpsNoAttack, $01
0008D20A E108                       	smpsAlterNote       $08
0008D20C E701                       	dc.b	smpsNoAttack, $01
0008D20E E10E                       	smpsAlterNote       $0E
0008D210 E701                       	dc.b	smpsNoAttack, $01
0008D212 E10F                       	smpsAlterNote       $0F
0008D214 E701                       	dc.b	smpsNoAttack, $01
0008D216 E10B                       	smpsAlterNote       $0B
0008D218 E701                       	dc.b	smpsNoAttack, $01
0008D21A E105                       	smpsAlterNote       $05
0008D21C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D220 E108                       	smpsAlterNote       $08
0008D222 E701                       	dc.b	smpsNoAttack, $01
0008D224 E10E                       	smpsAlterNote       $0E
0008D226 E701                       	dc.b	smpsNoAttack, $01
0008D228 E10F                       	smpsAlterNote       $0F
0008D22A 8001                       	dc.b	nRst, $01
0008D22C E109                       	smpsAlterNote       $09
0008D22E C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008D234 E108                       	smpsAlterNote       $08
0008D236 C10D                       	dc.b	nE5, $0D
0008D238 E102                       	smpsAlterNote       $02
0008D23A E701                       	dc.b	smpsNoAttack, $01
0008D23C E101                       	smpsAlterNote       $01
0008D23E E701                       	dc.b	smpsNoAttack, $01
0008D240 E105                       	smpsAlterNote       $05
0008D242 E701                       	dc.b	smpsNoAttack, $01
0008D244 E10B                       	smpsAlterNote       $0B
0008D246 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D24A E108                       	smpsAlterNote       $08
0008D24C E701                       	dc.b	smpsNoAttack, $01
0008D24E E102                       	smpsAlterNote       $02
0008D250 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D254 E108                       	smpsAlterNote       $08
0008D256 E701                       	dc.b	smpsNoAttack, $01
0008D258 E10B                       	smpsAlterNote       $0B
0008D25A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D25E E105                       	smpsAlterNote       $05
0008D260 E701                       	dc.b	smpsNoAttack, $01
0008D262 E101                       	smpsAlterNote       $01
0008D264 E701                       	dc.b	smpsNoAttack, $01
0008D266 E102                       	smpsAlterNote       $02
0008D268 E701                       	dc.b	smpsNoAttack, $01
0008D26A E108                       	smpsAlterNote       $08
0008D26C E701                       	dc.b	smpsNoAttack, $01
0008D26E E10C                       	smpsAlterNote       $0C
0008D270 E701                       	dc.b	smpsNoAttack, $01
0008D272 E108                       	smpsAlterNote       $08
0008D274 E701                       	dc.b	smpsNoAttack, $01
0008D276 E105                       	smpsAlterNote       $05
0008D278 E701                       	dc.b	smpsNoAttack, $01
0008D27A E101                       	smpsAlterNote       $01
0008D27C E701                       	dc.b	smpsNoAttack, $01
0008D27E E105                       	smpsAlterNote       $05
0008D280 E701                       	dc.b	smpsNoAttack, $01
0008D282 E10B                       	smpsAlterNote       $0B
0008D284 E701                       	dc.b	smpsNoAttack, $01
0008D286 E10C                       	smpsAlterNote       $0C
0008D288 E701                       	dc.b	smpsNoAttack, $01
0008D28A E108                       	smpsAlterNote       $08
0008D28C E701                       	dc.b	smpsNoAttack, $01
0008D28E E102                       	smpsAlterNote       $02
0008D290 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D294 E105                       	smpsAlterNote       $05
0008D296 E701                       	dc.b	smpsNoAttack, $01
0008D298 E10B                       	smpsAlterNote       $0B
0008D29A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D29E E105                       	smpsAlterNote       $05
0008D2A0 E701                       	dc.b	smpsNoAttack, $01
0008D2A2 E102                       	smpsAlterNote       $02
0008D2A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2A8 E108                       	smpsAlterNote       $08
0008D2AA E701                       	dc.b	smpsNoAttack, $01
0008D2AC E10C                       	smpsAlterNote       $0C
0008D2AE E701                       	dc.b	smpsNoAttack, $01
0008D2B0 E10B                       	smpsAlterNote       $0B
0008D2B2 E701                       	dc.b	smpsNoAttack, $01
0008D2B4 E105                       	smpsAlterNote       $05
0008D2B6 E701                       	dc.b	smpsNoAttack, $01
0008D2B8 E101                       	smpsAlterNote       $01
0008D2BA E701                       	dc.b	smpsNoAttack, $01
0008D2BC E105                       	smpsAlterNote       $05
0008D2BE E701                       	dc.b	smpsNoAttack, $01
0008D2C0 E108                       	smpsAlterNote       $08
0008D2C2 E701                       	dc.b	smpsNoAttack, $01
0008D2C4 E10C                       	smpsAlterNote       $0C
0008D2C6 E701                       	dc.b	smpsNoAttack, $01
0008D2C8 E108                       	smpsAlterNote       $08
0008D2CA E701                       	dc.b	smpsNoAttack, $01
0008D2CC E102                       	smpsAlterNote       $02
0008D2CE E701                       	dc.b	smpsNoAttack, $01
0008D2D0 E101                       	smpsAlterNote       $01
0008D2D2 E701                       	dc.b	smpsNoAttack, $01
0008D2D4 E105                       	smpsAlterNote       $05
0008D2D6 E701                       	dc.b	smpsNoAttack, $01
0008D2D8 E10B                       	smpsAlterNote       $0B
0008D2DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2DE E108                       	smpsAlterNote       $08
0008D2E0 E701                       	dc.b	smpsNoAttack, $01
0008D2E2 E102                       	smpsAlterNote       $02
0008D2E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2E8 E108                       	smpsAlterNote       $08
0008D2EA E701                       	dc.b	smpsNoAttack, $01
0008D2EC E10B                       	smpsAlterNote       $0B
0008D2EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2F2 E105                       	smpsAlterNote       $05
0008D2F4 E701                       	dc.b	smpsNoAttack, $01
0008D2F6 E101                       	smpsAlterNote       $01
0008D2F8 E701                       	dc.b	smpsNoAttack, $01
0008D2FA E102                       	smpsAlterNote       $02
0008D2FC E701                       	dc.b	smpsNoAttack, $01
0008D2FE E108                       	smpsAlterNote       $08
0008D300 E701                       	dc.b	smpsNoAttack, $01
0008D302 E10C                       	smpsAlterNote       $0C
0008D304 E701                       	dc.b	smpsNoAttack, $01
0008D306 E108                       	smpsAlterNote       $08
0008D308 E701                       	dc.b	smpsNoAttack, $01
0008D30A E105                       	smpsAlterNote       $05
0008D30C E701                       	dc.b	smpsNoAttack, $01
0008D30E E101                       	smpsAlterNote       $01
0008D310 E701                       	dc.b	smpsNoAttack, $01
0008D312 E105                       	smpsAlterNote       $05
0008D314 E701                       	dc.b	smpsNoAttack, $01
0008D316 E10B                       	smpsAlterNote       $0B
0008D318 E701                       	dc.b	smpsNoAttack, $01
0008D31A E10C                       	smpsAlterNote       $0C
0008D31C E701                       	dc.b	smpsNoAttack, $01
0008D31E E108                       	smpsAlterNote       $08
0008D320 E701                       	dc.b	smpsNoAttack, $01
0008D322 E102                       	smpsAlterNote       $02
0008D324 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D328 E105                       	smpsAlterNote       $05
0008D32A E701                       	dc.b	smpsNoAttack, $01
0008D32C E10B                       	smpsAlterNote       $0B
0008D32E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D332 E105                       	smpsAlterNote       $05
0008D334 E701                       	dc.b	smpsNoAttack, $01
0008D336 E101                       	smpsAlterNote       $01
0008D338 E701                       	dc.b	smpsNoAttack, $01
0008D33A E102                       	smpsAlterNote       $02
0008D33C E701                       	dc.b	smpsNoAttack, $01
0008D33E E108                       	smpsAlterNote       $08
0008D340 E701                       	dc.b	smpsNoAttack, $01
0008D342 E10C                       	smpsAlterNote       $0C
0008D344 E701                       	dc.b	smpsNoAttack, $01
0008D346 E108                       	smpsAlterNote       $08
0008D348 E701                       	dc.b	smpsNoAttack, $01
0008D34A E105                       	smpsAlterNote       $05
0008D34C E701                       	dc.b	smpsNoAttack, $01
0008D34E E101                       	smpsAlterNote       $01
0008D350 E701                       	dc.b	smpsNoAttack, $01
0008D352 E105                       	smpsAlterNote       $05
0008D354 E701                       	dc.b	smpsNoAttack, $01
0008D356 E10B                       	smpsAlterNote       $0B
0008D358 E701                       	dc.b	smpsNoAttack, $01
0008D35A E10C                       	smpsAlterNote       $0C
0008D35C E701                       	dc.b	smpsNoAttack, $01
0008D35E E108                       	smpsAlterNote       $08
0008D360 E701                       	dc.b	smpsNoAttack, $01
0008D362 E102                       	smpsAlterNote       $02
0008D364 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D368 E105                       	smpsAlterNote       $05
0008D36A E701                       	dc.b	smpsNoAttack, $01
0008D36C E10B                       	smpsAlterNote       $0B
0008D36E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D372 E105                       	smpsAlterNote       $05
0008D374 E701                       	dc.b	smpsNoAttack, $01
0008D376 E102                       	smpsAlterNote       $02
0008D378 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D37C E108                       	smpsAlterNote       $08
0008D37E E701                       	dc.b	smpsNoAttack, $01
0008D380 E10C                       	smpsAlterNote       $0C
0008D382 E701                       	dc.b	smpsNoAttack, $01
0008D384 E10B                       	smpsAlterNote       $0B
0008D386 E701                       	dc.b	smpsNoAttack, $01
0008D388 E105                       	smpsAlterNote       $05
0008D38A E701                       	dc.b	smpsNoAttack, $01
0008D38C E101                       	smpsAlterNote       $01
0008D38E E701                       	dc.b	smpsNoAttack, $01
0008D390 E105                       	smpsAlterNote       $05
0008D392 E701                       	dc.b	smpsNoAttack, $01
0008D394 E108                       	smpsAlterNote       $08
0008D396 E701                       	dc.b	smpsNoAttack, $01
0008D398 E10C                       	smpsAlterNote       $0C
0008D39A E701                       	dc.b	smpsNoAttack, $01
0008D39E E10B                       	smpsAlterNote       $0B
0008D3A0 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D3A4 E109                       	smpsAlterNote       $09
0008D3A6 C404                       	dc.b	nG5, $04
0008D3A8 E10B                       	smpsAlterNote       $0B
0008D3AA C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D3AE E107                       	smpsAlterNote       $07
0008D3B0 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008D3B6 E10B                       	smpsAlterNote       $0B
0008D3B8 C604                       	dc.b	nA5, $04
0008D3BA E109                       	smpsAlterNote       $09
0008D3BC C404 8001                  	dc.b	nG5, $04, nRst, $01
0008D3C0 E10B                       	smpsAlterNote       $0B
0008D3C2 C604                       	dc.b	nA5, $04
0008D3C4 E108                       	smpsAlterNote       $08
0008D3C6 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
0008D3CC E106                       	smpsAlterNote       $06
0008D3CE C904 8001                  	dc.b	nC6, $04, nRst, $01
0008D3D2 E10C                       	smpsAlterNote       $0C
0008D3D4 C704                       	dc.b	nBb5, $04
0008D3D6 E10B                       	smpsAlterNote       $0B
0008D3D8 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D3DC E109                       	smpsAlterNote       $09
0008D3DE C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008D3E8 E10B                       	smpsAlterNote       $0B
0008D3EA C60D                       	dc.b	nA5, $0D
0008D3EC E108                       	smpsAlterNote       $08
0008D3EE E701                       	dc.b	smpsNoAttack, $01
0008D3F0 E104                       	smpsAlterNote       $04
0008D3F2 E701                       	dc.b	smpsNoAttack, $01
0008D3F4 E108                       	smpsAlterNote       $08
0008D3F6 E701                       	dc.b	smpsNoAttack, $01
0008D3F8 E10B                       	smpsAlterNote       $0B
0008D3FA E701                       	dc.b	smpsNoAttack, $01
0008D3FC E10F                       	smpsAlterNote       $0F
0008D3FE E701                       	dc.b	smpsNoAttack, $01
0008D400 E10B                       	smpsAlterNote       $0B
0008D402 E701                       	dc.b	smpsNoAttack, $01
0008D404 E105                       	smpsAlterNote       $05
0008D406 E701                       	dc.b	smpsNoAttack, $01
0008D408 E104                       	smpsAlterNote       $04
0008D40A E701                       	dc.b	smpsNoAttack, $01
0008D40C E108                       	smpsAlterNote       $08
0008D40E E701                       	dc.b	smpsNoAttack, $01
0008D410 E10E                       	smpsAlterNote       $0E
0008D412 E701                       	dc.b	smpsNoAttack, $01
0008D414 E10F                       	smpsAlterNote       $0F
0008D416 8001                       	dc.b	nRst, $01
0008D418 E109                       	smpsAlterNote       $09
0008D41A C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008D420 E108                       	smpsAlterNote       $08
0008D422 C10D                       	dc.b	nE5, $0D
0008D424 E105                       	smpsAlterNote       $05
0008D426 E701                       	dc.b	smpsNoAttack, $01
0008D428 E101                       	smpsAlterNote       $01
0008D42A E701                       	dc.b	smpsNoAttack, $01
0008D42C E105                       	smpsAlterNote       $05
0008D42E E701                       	dc.b	smpsNoAttack, $01
0008D430 E10B                       	smpsAlterNote       $0B
0008D432 E701                       	dc.b	smpsNoAttack, $01
0008D434 E10C                       	smpsAlterNote       $0C
0008D436 E701                       	dc.b	smpsNoAttack, $01
0008D438 E108                       	smpsAlterNote       $08
0008D43A E701                       	dc.b	smpsNoAttack, $01
0008D43C E102                       	smpsAlterNote       $02
0008D43E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D442 E105                       	smpsAlterNote       $05
0008D444 E701                       	dc.b	smpsNoAttack, $01
0008D446 E10B                       	smpsAlterNote       $0B
0008D448 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D44C E105                       	smpsAlterNote       $05
0008D44E E701                       	dc.b	smpsNoAttack, $01
0008D450 E102                       	smpsAlterNote       $02
0008D452 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D456 E108                       	smpsAlterNote       $08
0008D458 E701                       	dc.b	smpsNoAttack, $01
0008D45A E10C                       	smpsAlterNote       $0C
0008D45C E701                       	dc.b	smpsNoAttack, $01
0008D45E E10B                       	smpsAlterNote       $0B
0008D460 E701                       	dc.b	smpsNoAttack, $01
0008D462 E105                       	smpsAlterNote       $05
0008D464 E701                       	dc.b	smpsNoAttack, $01
0008D466 E101                       	smpsAlterNote       $01
0008D468 E701                       	dc.b	smpsNoAttack, $01
0008D46A E105                       	smpsAlterNote       $05
0008D46C E701                       	dc.b	smpsNoAttack, $01
0008D46E E108                       	smpsAlterNote       $08
0008D470 E701                       	dc.b	smpsNoAttack, $01
0008D472 E10C                       	smpsAlterNote       $0C
0008D474 E701                       	dc.b	smpsNoAttack, $01
0008D476 E108                       	smpsAlterNote       $08
0008D478 E701                       	dc.b	smpsNoAttack, $01
0008D47A E102                       	smpsAlterNote       $02
0008D47C E701                       	dc.b	smpsNoAttack, $01
0008D47E E101                       	smpsAlterNote       $01
0008D480 E701                       	dc.b	smpsNoAttack, $01
0008D482 E105                       	smpsAlterNote       $05
0008D484 E701                       	dc.b	smpsNoAttack, $01
0008D486 E10B                       	smpsAlterNote       $0B
0008D488 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D48C E108                       	smpsAlterNote       $08
0008D48E E701                       	dc.b	smpsNoAttack, $01
0008D490 E102                       	smpsAlterNote       $02
0008D492 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D496 E108                       	smpsAlterNote       $08
0008D498 E701                       	dc.b	smpsNoAttack, $01
0008D49A E10B                       	smpsAlterNote       $0B
0008D49C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4A0 E105                       	smpsAlterNote       $05
0008D4A2 E701                       	dc.b	smpsNoAttack, $01
0008D4A4 E101                       	smpsAlterNote       $01
0008D4A6 E701                       	dc.b	smpsNoAttack, $01
0008D4A8 E102                       	smpsAlterNote       $02
0008D4AA E701                       	dc.b	smpsNoAttack, $01
0008D4AC E108                       	smpsAlterNote       $08
0008D4AE E701                       	dc.b	smpsNoAttack, $01
0008D4B0 E10C                       	smpsAlterNote       $0C
0008D4B2 E701                       	dc.b	smpsNoAttack, $01
0008D4B4 E108                       	smpsAlterNote       $08
0008D4B6 E701                       	dc.b	smpsNoAttack, $01
0008D4B8 E105                       	smpsAlterNote       $05
0008D4BA E701                       	dc.b	smpsNoAttack, $01
0008D4BC E101                       	smpsAlterNote       $01
0008D4BE E701                       	dc.b	smpsNoAttack, $01
0008D4C0 E105                       	smpsAlterNote       $05
0008D4C2 E701                       	dc.b	smpsNoAttack, $01
0008D4C4 E10B                       	smpsAlterNote       $0B
0008D4C6 E701                       	dc.b	smpsNoAttack, $01
0008D4C8 E10C                       	smpsAlterNote       $0C
0008D4CA E701                       	dc.b	smpsNoAttack, $01
0008D4CC E108                       	smpsAlterNote       $08
0008D4CE E701                       	dc.b	smpsNoAttack, $01
0008D4D0 E102                       	smpsAlterNote       $02
0008D4D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4D6 E108                       	smpsAlterNote       $08
0008D4D8 E701                       	dc.b	smpsNoAttack, $01
0008D4DA E10B                       	smpsAlterNote       $0B
0008D4DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4E0 E105                       	smpsAlterNote       $05
0008D4E2 E701                       	dc.b	smpsNoAttack, $01
0008D4E4 E101                       	smpsAlterNote       $01
0008D4E6 E701                       	dc.b	smpsNoAttack, $01
0008D4E8 E102                       	smpsAlterNote       $02
0008D4EA E701                       	dc.b	smpsNoAttack, $01
0008D4EC E108                       	smpsAlterNote       $08
0008D4EE E701                       	dc.b	smpsNoAttack, $01
0008D4F0 E10C                       	smpsAlterNote       $0C
0008D4F2 E701                       	dc.b	smpsNoAttack, $01
0008D4F4 E108                       	smpsAlterNote       $08
0008D4F6 E701                       	dc.b	smpsNoAttack, $01
0008D4F8 E105                       	smpsAlterNote       $05
0008D4FA E701                       	dc.b	smpsNoAttack, $01
0008D4FC E101                       	smpsAlterNote       $01
0008D4FE E701                       	dc.b	smpsNoAttack, $01
0008D500 E105                       	smpsAlterNote       $05
0008D502 E701                       	dc.b	smpsNoAttack, $01
0008D504 E10B                       	smpsAlterNote       $0B
0008D506 E701                       	dc.b	smpsNoAttack, $01
0008D508 E10C                       	smpsAlterNote       $0C
0008D50A E701                       	dc.b	smpsNoAttack, $01
0008D50C E108                       	smpsAlterNote       $08
0008D50E E701                       	dc.b	smpsNoAttack, $01
0008D510 E102                       	smpsAlterNote       $02
0008D512 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D516 E105                       	smpsAlterNote       $05
0008D518 E701                       	dc.b	smpsNoAttack, $01
0008D51A E10B                       	smpsAlterNote       $0B
0008D51C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D520 E105                       	smpsAlterNote       $05
0008D522 E701                       	dc.b	smpsNoAttack, $01
0008D524 E102                       	smpsAlterNote       $02
0008D526 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D52A E108                       	smpsAlterNote       $08
0008D52C E701                       	dc.b	smpsNoAttack, $01
0008D52E E10C                       	smpsAlterNote       $0C
0008D530 E701                       	dc.b	smpsNoAttack, $01
0008D532 E10B                       	smpsAlterNote       $0B
0008D534 E701                       	dc.b	smpsNoAttack, $01
0008D536 E105                       	smpsAlterNote       $05
0008D538 E701                       	dc.b	smpsNoAttack, $01
0008D53A E101                       	smpsAlterNote       $01
0008D53C E701                       	dc.b	smpsNoAttack, $01
0008D53E E105                       	smpsAlterNote       $05
0008D540 E701                       	dc.b	smpsNoAttack, $01
0008D542 E108                       	smpsAlterNote       $08
0008D544 E701                       	dc.b	smpsNoAttack, $01
0008D546 E10C                       	smpsAlterNote       $0C
0008D548 E701                       	dc.b	smpsNoAttack, $01
0008D54A E108                       	smpsAlterNote       $08
0008D54C E701                       	dc.b	smpsNoAttack, $01
0008D54E E102                       	smpsAlterNote       $02
0008D550 E701                       	dc.b	smpsNoAttack, $01
0008D552 E101                       	smpsAlterNote       $01
0008D554 E701                       	dc.b	smpsNoAttack, $01
0008D556 E105                       	smpsAlterNote       $05
0008D558 E701                       	dc.b	smpsNoAttack, $01
0008D55A E10B                       	smpsAlterNote       $0B
0008D55C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D560 E108                       	smpsAlterNote       $08
0008D562 E701                       	dc.b	smpsNoAttack, $01
0008D564 E102                       	smpsAlterNote       $02
0008D566 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D56A E108                       	smpsAlterNote       $08
0008D56C E701                       	dc.b	smpsNoAttack, $01
0008D56E E10B                       	smpsAlterNote       $0B
0008D570 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D574 E105                       	smpsAlterNote       $05
0008D576 E701                       	dc.b	smpsNoAttack, $01
0008D578 E102                       	smpsAlterNote       $02
0008D57A 8001                       	dc.b	nRst, $01
0008D57C E107                       	smpsAlterNote       $07
0008D57E BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008D582 E108                       	smpsAlterNote       $08
0008D584 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
0008D588 E102                       	smpsAlterNote       $02
0008D58A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D58E E108                       	smpsAlterNote       $08
0008D590 E701                       	dc.b	smpsNoAttack, $01
0008D592 E10B                       	smpsAlterNote       $0B
0008D594 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D598 E105                       	smpsAlterNote       $05
0008D59A E701                       	dc.b	smpsNoAttack, $01
0008D59C E101                       	smpsAlterNote       $01
0008D59E E701                       	dc.b	smpsNoAttack, $01
0008D5A0 E102                       	smpsAlterNote       $02
0008D5A2 E701                       	dc.b	smpsNoAttack, $01
0008D5A4 E108                       	smpsAlterNote       $08
0008D5A6 E701                       	dc.b	smpsNoAttack, $01
0008D5A8 E10C                       	smpsAlterNote       $0C
0008D5AA E701                       	dc.b	smpsNoAttack, $01
0008D5AC E108                       	smpsAlterNote       $08
0008D5AE E701                       	dc.b	smpsNoAttack, $01
0008D5B0 E105                       	smpsAlterNote       $05
0008D5B2 E701                       	dc.b	smpsNoAttack, $01
0008D5B4 E101                       	smpsAlterNote       $01
0008D5B6 E701                       	dc.b	smpsNoAttack, $01
0008D5B8 E105                       	smpsAlterNote       $05
0008D5BA E701                       	dc.b	smpsNoAttack, $01
0008D5BC E10B                       	smpsAlterNote       $0B
0008D5BE E701                       	dc.b	smpsNoAttack, $01
0008D5C0 E10C                       	smpsAlterNote       $0C
0008D5C2 E701                       	dc.b	smpsNoAttack, $01
0008D5C4 E108                       	smpsAlterNote       $08
0008D5C6 E701                       	dc.b	smpsNoAttack, $01
0008D5C8 E102                       	smpsAlterNote       $02
0008D5CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5CE E105                       	smpsAlterNote       $05
0008D5D0 E701                       	dc.b	smpsNoAttack, $01
0008D5D2 E10B                       	smpsAlterNote       $0B
0008D5D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5D8 E105                       	smpsAlterNote       $05
0008D5DA E701                       	dc.b	smpsNoAttack, $01
0008D5DC E102                       	smpsAlterNote       $02
0008D5DE E701                       	dc.b	smpsNoAttack, $01
0008D5E0 E109                       	smpsAlterNote       $09
0008D5E2 C40A C207                  	dc.b	nG5, $0A, nF5, $07
0008D5E6 E108                       	smpsAlterNote       $08
0008D5E8 C10D                       	dc.b	nE5, $0D
0008D5EA E105                       	smpsAlterNote       $05
0008D5EC E701                       	dc.b	smpsNoAttack, $01
0008D5EE E101                       	smpsAlterNote       $01
0008D5F0 E701                       	dc.b	smpsNoAttack, $01
0008D5F2 E102                       	smpsAlterNote       $02
0008D5F4 E701                       	dc.b	smpsNoAttack, $01
0008D5F6 E108                       	smpsAlterNote       $08
0008D5F8 E701                       	dc.b	smpsNoAttack, $01
0008D5FA E10C                       	smpsAlterNote       $0C
0008D5FC E701                       	dc.b	smpsNoAttack, $01
0008D5FE E108                       	smpsAlterNote       $08
0008D600 E701                       	dc.b	smpsNoAttack, $01
0008D602 E105                       	smpsAlterNote       $05
0008D604 E701                       	dc.b	smpsNoAttack, $01
0008D606 E101                       	smpsAlterNote       $01
0008D608 E701                       	dc.b	smpsNoAttack, $01
0008D60A E105                       	smpsAlterNote       $05
0008D60C E701                       	dc.b	smpsNoAttack, $01
0008D60E E10B                       	smpsAlterNote       $0B
0008D610 E701                       	dc.b	smpsNoAttack, $01
0008D612 E10C                       	smpsAlterNote       $0C
0008D614 E701                       	dc.b	smpsNoAttack, $01
0008D616 E108                       	smpsAlterNote       $08
0008D618 E701                       	dc.b	smpsNoAttack, $01
0008D61A E102                       	smpsAlterNote       $02
0008D61C E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
0008D624 E10B                       	smpsAlterNote       $0B
0008D626 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008D62A E10C                       	smpsAlterNote       $0C
0008D62C BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008D630 E10B                       	smpsAlterNote       $0B
0008D632 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
0008D638 E107                       	smpsAlterNote       $07
0008D63A BF03                       	dc.b	nD5, $03
0008D63C E108                       	smpsAlterNote       $08
0008D63E C103 8001                  	dc.b	nE5, $03, nRst, $01
0008D642 E109                       	smpsAlterNote       $09
0008D644 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008D64A E10B                       	smpsAlterNote       $0B
0008D64C C606 8001                  	dc.b	nA5, $06, nRst, $01
0008D650 E107                       	smpsAlterNote       $07
0008D652 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D656 E106                       	smpsAlterNote       $06
0008D658 C90D                       	dc.b	nC6, $0D
0008D65A E103                       	smpsAlterNote       $03
0008D65C E701                       	dc.b	smpsNoAttack, $01
0008D65E E1FF                       	smpsAlterNote       $FF
0008D660 E701                       	dc.b	smpsNoAttack, $01
0008D662 E103                       	smpsAlterNote       $03
0008D664 E701                       	dc.b	smpsNoAttack, $01
0008D666 E109                       	smpsAlterNote       $09
0008D668 E701                       	dc.b	smpsNoAttack, $01
0008D66A E10A                       	smpsAlterNote       $0A
0008D66C E701                       	dc.b	smpsNoAttack, $01
0008D66E E106                       	smpsAlterNote       $06
0008D670 E701                       	dc.b	smpsNoAttack, $01
0008D672 E100                       	smpsAlterNote       $00
0008D674 E701                       	dc.b	smpsNoAttack, $01
0008D676 E10C                       	smpsAlterNote       $0C
0008D678 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008D67C E10B                       	smpsAlterNote       $0B
0008D67E C603                       	dc.b	nA5, $03
0008D680 E109                       	smpsAlterNote       $09
0008D682 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D686 E10B                       	smpsAlterNote       $0B
0008D688 C60D                       	dc.b	nA5, $0D
0008D68A E105                       	smpsAlterNote       $05
0008D68C E701                       	dc.b	smpsNoAttack, $01
0008D68E E104                       	smpsAlterNote       $04
0008D690 E701                       	dc.b	smpsNoAttack, $01
0008D692 E108                       	smpsAlterNote       $08
0008D694 E701                       	dc.b	smpsNoAttack, $01
0008D696 E10E                       	smpsAlterNote       $0E
0008D698 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D69C E10B                       	smpsAlterNote       $0B
0008D69E E701                       	dc.b	smpsNoAttack, $01
0008D6A0 E105                       	smpsAlterNote       $05
0008D6A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6A6 E10B                       	smpsAlterNote       $0B
0008D6A8 E701                       	dc.b	smpsNoAttack, $01
0008D6AA E10E                       	smpsAlterNote       $0E
0008D6AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6B0 E108                       	smpsAlterNote       $08
0008D6B2 E701                       	dc.b	smpsNoAttack, $01
0008D6B4 E104                       	smpsAlterNote       $04
0008D6B6 E701                       	dc.b	smpsNoAttack, $01
0008D6B8 E105                       	smpsAlterNote       $05
0008D6BA E701                       	dc.b	smpsNoAttack, $01
0008D6BC E10B                       	smpsAlterNote       $0B
0008D6BE E701                       	dc.b	smpsNoAttack, $01
0008D6C0 E10F                       	smpsAlterNote       $0F
0008D6C2 E701                       	dc.b	smpsNoAttack, $01
0008D6C4 E10B                       	smpsAlterNote       $0B
0008D6C6 E701                       	dc.b	smpsNoAttack, $01
0008D6C8 E108                       	smpsAlterNote       $08
0008D6CA E701                       	dc.b	smpsNoAttack, $01
0008D6CC E104                       	smpsAlterNote       $04
0008D6CE E701                       	dc.b	smpsNoAttack, $01
0008D6D0 E108                       	smpsAlterNote       $08
0008D6D2 E701                       	dc.b	smpsNoAttack, $01
0008D6D4 E10E                       	smpsAlterNote       $0E
0008D6D6 E701                       	dc.b	smpsNoAttack, $01
0008D6D8 E10F                       	smpsAlterNote       $0F
0008D6DA E701                       	dc.b	smpsNoAttack, $01
0008D6DC E10B                       	smpsAlterNote       $0B
0008D6DE E701                       	dc.b	smpsNoAttack, $01
0008D6E0 E105                       	smpsAlterNote       $05
0008D6E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6E6 E108                       	smpsAlterNote       $08
0008D6E8 E701                       	dc.b	smpsNoAttack, $01
0008D6EA E10E                       	smpsAlterNote       $0E
0008D6EC E701                       	dc.b	smpsNoAttack, $01
0008D6EE E10F                       	smpsAlterNote       $0F
0008D6F0 800F                       	dc.b	nRst, $0F
0008D6F2 E107                       	smpsAlterNote       $07
0008D6F4 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D6F8 E108                       	smpsAlterNote       $08
0008D6FA C103                       	dc.b	nE5, $03
0008D6FC E109                       	smpsAlterNote       $09
0008D6FE C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008D704 E10B                       	smpsAlterNote       $0B
0008D706 C607                       	dc.b	nA5, $07
0008D708 E107                       	smpsAlterNote       $07
0008D70A BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008D70E E106                       	smpsAlterNote       $06
0008D710 C90D                       	dc.b	nC6, $0D
0008D712 E107                       	smpsAlterNote       $07
0008D714 CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008D718 E10C                       	smpsAlterNote       $0C
0008D71A C704                       	dc.b	nBb5, $04
0008D71C E10B                       	smpsAlterNote       $0B
0008D71E C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D722 E109                       	smpsAlterNote       $09
0008D724 C404                       	dc.b	nG5, $04
0008D726 E10B                       	smpsAlterNote       $0B
0008D728 C60D                       	dc.b	nA5, $0D
0008D72A E108                       	smpsAlterNote       $08
0008D72C E701                       	dc.b	smpsNoAttack, $01
0008D72E E105                       	smpsAlterNote       $05
0008D730 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D734 E10B                       	smpsAlterNote       $0B
0008D736 E701                       	dc.b	smpsNoAttack, $01
0008D738 E10F                       	smpsAlterNote       $0F
0008D73A E701                       	dc.b	smpsNoAttack, $01
0008D73C E10E                       	smpsAlterNote       $0E
0008D73E E701                       	dc.b	smpsNoAttack, $01
0008D740 E108                       	smpsAlterNote       $08
0008D742 E701                       	dc.b	smpsNoAttack, $01
0008D744 E104                       	smpsAlterNote       $04
0008D746 E701                       	dc.b	smpsNoAttack, $01
0008D748 E108                       	smpsAlterNote       $08
0008D74A E701                       	dc.b	smpsNoAttack, $01
0008D74C E10B                       	smpsAlterNote       $0B
0008D74E E701                       	dc.b	smpsNoAttack, $01
0008D750 E10F                       	smpsAlterNote       $0F
0008D752 E701                       	dc.b	smpsNoAttack, $01
0008D754 E10B                       	smpsAlterNote       $0B
0008D756 E701                       	dc.b	smpsNoAttack, $01
0008D758 E105                       	smpsAlterNote       $05
0008D75A E701                       	dc.b	smpsNoAttack, $01
0008D75C E104                       	smpsAlterNote       $04
0008D75E E701                       	dc.b	smpsNoAttack, $01
0008D760 E108                       	smpsAlterNote       $08
0008D762 E701                       	dc.b	smpsNoAttack, $01
0008D764 E10E                       	smpsAlterNote       $0E
0008D766 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D76A E10B                       	smpsAlterNote       $0B
0008D76C E701                       	dc.b	smpsNoAttack, $01
0008D76E E105                       	smpsAlterNote       $05
0008D770 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D774 E10B                       	smpsAlterNote       $0B
0008D776 E701                       	dc.b	smpsNoAttack, $01
0008D778 E10E                       	smpsAlterNote       $0E
0008D77A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D77E E108                       	smpsAlterNote       $08
0008D780 E701                       	dc.b	smpsNoAttack, $01
0008D782 E105                       	smpsAlterNote       $05
0008D784 8001                       	dc.b	nRst, $01
0008D786 E109                       	smpsAlterNote       $09
0008D788 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008D78C E10B                       	smpsAlterNote       $0B
0008D78E C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008D796 E109                       	smpsAlterNote       $09
0008D798 C404                       	dc.b	nG5, $04
0008D79A E10B                       	smpsAlterNote       $0B
0008D79C C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D7A0 E107                       	smpsAlterNote       $07
0008D7A2 BF0D                       	dc.b	nD5, $0D
0008D7A4 E101                       	smpsAlterNote       $01
0008D7A6 E701                       	dc.b	smpsNoAttack, $01
0008D7A8 E100                       	smpsAlterNote       $00
0008D7AA E701                       	dc.b	smpsNoAttack, $01
0008D7AC E104                       	smpsAlterNote       $04
0008D7AE E701                       	dc.b	smpsNoAttack, $01
0008D7B0 E10A                       	smpsAlterNote       $0A
0008D7B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7B6 E107                       	smpsAlterNote       $07
0008D7B8 E701                       	dc.b	smpsNoAttack, $01
0008D7BA E101                       	smpsAlterNote       $01
0008D7BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7C0 E107                       	smpsAlterNote       $07
0008D7C2 E701                       	dc.b	smpsNoAttack, $01
0008D7C4 E10A                       	smpsAlterNote       $0A
0008D7C6 E701                       	dc.b	smpsNoAttack, $01
0008D7C8 E10B                       	smpsAlterNote       $0B
0008D7CA 8001                       	dc.b	nRst, $01
0008D7CC E108                       	smpsAlterNote       $08
0008D7CE 8001                       	dc.b	nRst, $01
0008D7D0 E109                       	smpsAlterNote       $09
0008D7D2 8001 C401                  	dc.b	nRst, $01, nG5, $01
0008D7D6 E10B                       	smpsAlterNote       $0B
0008D7D8 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008D7E0 E108                       	smpsAlterNote       $08
0008D7E2 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008D7E6 E109                       	smpsAlterNote       $09
0008D7E8 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008D7EC E108                       	smpsAlterNote       $08
0008D7EE CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008D7F2 E106                       	smpsAlterNote       $06
0008D7F4 C903                       	dc.b	nC6, $03
0008D7F6 E109                       	smpsAlterNote       $09
0008D7F8 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D7FC E10C                       	smpsAlterNote       $0C
0008D7FE C70D                       	dc.b	nBb5, $0D
0008D800 E109                       	smpsAlterNote       $09
0008D802 E701                       	dc.b	smpsNoAttack, $01
0008D804 E105                       	smpsAlterNote       $05
0008D806 E701                       	dc.b	smpsNoAttack, $01
0008D808 E109                       	smpsAlterNote       $09
0008D80A E701                       	dc.b	smpsNoAttack, $01
0008D80C E10F                       	smpsAlterNote       $0F
0008D80E E701                       	dc.b	smpsNoAttack, $01
0008D810 E110                       	smpsAlterNote       $10
0008D812 E701                       	dc.b	smpsNoAttack, $01
0008D814 E10C                       	smpsAlterNote       $0C
0008D816 E701                       	dc.b	smpsNoAttack, $01
0008D818 E106                       	smpsAlterNote       $06
0008D81A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D81E E109                       	smpsAlterNote       $09
0008D820 E701                       	dc.b	smpsNoAttack, $01
0008D822 E10F                       	smpsAlterNote       $0F
0008D824 E701                       	dc.b	smpsNoAttack, $01
0008D826 E110                       	smpsAlterNote       $10
0008D828 8001                       	dc.b	nRst, $01
0008D82A E10B                       	smpsAlterNote       $0B
0008D82C C606 8001                  	dc.b	nA5, $06, nRst, $01
0008D830 E109                       	smpsAlterNote       $09
0008D832 C40D                       	dc.b	nG5, $0D
0008D834 E103                       	smpsAlterNote       $03
0008D836 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D83A E106                       	smpsAlterNote       $06
0008D83C E701                       	dc.b	smpsNoAttack, $01
0008D83E E10C                       	smpsAlterNote       $0C
0008D840 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D844 E106                       	smpsAlterNote       $06
0008D846 E701                       	dc.b	smpsNoAttack, $01
0008D848 E103                       	smpsAlterNote       $03
0008D84A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D84E E109                       	smpsAlterNote       $09
0008D850 E701                       	dc.b	smpsNoAttack, $01
0008D852 E10D                       	smpsAlterNote       $0D
0008D854 E701                       	dc.b	smpsNoAttack, $01
0008D856 E10C                       	smpsAlterNote       $0C
0008D858 E701                       	dc.b	smpsNoAttack, $01
0008D85A E106                       	smpsAlterNote       $06
0008D85C E701                       	dc.b	smpsNoAttack, $01
0008D85E E102                       	smpsAlterNote       $02
0008D860 E701                       	dc.b	smpsNoAttack, $01
0008D862 E103                       	smpsAlterNote       $03
0008D864 8001                       	dc.b	nRst, $01
0008D866 E10B                       	smpsAlterNote       $0B
0008D868 C60D                       	dc.b	nA5, $0D
0008D86A E108                       	smpsAlterNote       $08
0008D86C E701                       	dc.b	smpsNoAttack, $01
0008D86E E104                       	smpsAlterNote       $04
0008D870 E701                       	dc.b	smpsNoAttack, $01
0008D872 E108                       	smpsAlterNote       $08
0008D874 E701                       	dc.b	smpsNoAttack, $01
0008D876 E10B                       	smpsAlterNote       $0B
0008D878 E701                       	dc.b	smpsNoAttack, $01
0008D87A E10F                       	smpsAlterNote       $0F
0008D87C E701                       	dc.b	smpsNoAttack, $01
0008D87E E10B                       	smpsAlterNote       $0B
0008D880 E701                       	dc.b	smpsNoAttack, $01
0008D882 E105                       	smpsAlterNote       $05
0008D884 E701                       	dc.b	smpsNoAttack, $01
0008D886 E104                       	smpsAlterNote       $04
0008D888 E701                       	dc.b	smpsNoAttack, $01
0008D88A E108                       	smpsAlterNote       $08
0008D88C E701                       	dc.b	smpsNoAttack, $01
0008D88E E10E                       	smpsAlterNote       $0E
0008D890 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D894 E10B                       	smpsAlterNote       $0B
0008D896 E701                       	dc.b	smpsNoAttack, $01
0008D898 E105                       	smpsAlterNote       $05
0008D89A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D89E E10C                       	smpsAlterNote       $0C
0008D8A0 C70E                       	dc.b	nBb5, $0E
0008D8A2 E106                       	smpsAlterNote       $06
0008D8A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8A8 E10C                       	smpsAlterNote       $0C
0008D8AA E701                       	dc.b	smpsNoAttack, $01
0008D8AC E10F                       	smpsAlterNote       $0F
0008D8AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8B2 E109                       	smpsAlterNote       $09
0008D8B4 E701                       	dc.b	smpsNoAttack, $01
0008D8B6 E105                       	smpsAlterNote       $05
0008D8B8 E701                       	dc.b	smpsNoAttack, $01
0008D8BA E106                       	smpsAlterNote       $06
0008D8BC E701                       	dc.b	smpsNoAttack, $01
0008D8BE E10C                       	smpsAlterNote       $0C
0008D8C0 E701                       	dc.b	smpsNoAttack, $01
0008D8C2 E110                       	smpsAlterNote       $10
0008D8C4 E701                       	dc.b	smpsNoAttack, $01
0008D8C6 E10C                       	smpsAlterNote       $0C
0008D8C8 E701                       	dc.b	smpsNoAttack, $01
0008D8CA E109                       	smpsAlterNote       $09
0008D8CC E701                       	dc.b	smpsNoAttack, $01
0008D8CE E105                       	smpsAlterNote       $05
0008D8D0 E701                       	dc.b	smpsNoAttack, $01
0008D8D2 E106                       	smpsAlterNote       $06
0008D8D4 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
0008D8D8 E107                       	smpsAlterNote       $07
0008D8DA CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
0008D8DF E108                       	smpsAlterNote       $08
0008D8E1 CD0D                       	dc.b	nE6, $0D
0008D8E3 E107                       	smpsAlterNote       $07
0008D8E5 CB0D                       	dc.b	nD6, $0D
0008D8E7 E104                       	smpsAlterNote       $04
0008D8E9 E701                       	dc.b	smpsNoAttack, $01
0008D8EB E100                       	smpsAlterNote       $00
0008D8ED E701                       	dc.b	smpsNoAttack, $01
0008D8EF E101                       	smpsAlterNote       $01
0008D8F1 E701                       	dc.b	smpsNoAttack, $01
0008D8F3 E107                       	smpsAlterNote       $07
0008D8F5 E701                       	dc.b	smpsNoAttack, $01
0008D8F7 E10B                       	smpsAlterNote       $0B
0008D8F9 E701                       	dc.b	smpsNoAttack, $01
0008D8FB E107                       	smpsAlterNote       $07
0008D8FD E701                       	dc.b	smpsNoAttack, $01
0008D8FF E104                       	smpsAlterNote       $04
0008D901 E701                       	dc.b	smpsNoAttack, $01
0008D903 E100                       	smpsAlterNote       $00
0008D905 E701                       	dc.b	smpsNoAttack, $01
0008D907 E104                       	smpsAlterNote       $04
0008D909 E701                       	dc.b	smpsNoAttack, $01
0008D90B E10A                       	smpsAlterNote       $0A
0008D90D E701                       	dc.b	smpsNoAttack, $01
0008D90F E10B                       	smpsAlterNote       $0B
0008D911 E701                       	dc.b	smpsNoAttack, $01
0008D913 E108                       	smpsAlterNote       $08
0008D915 CC0D                       	dc.b	nEb6, $0D
0008D917 E105                       	smpsAlterNote       $05
0008D919 E701                       	dc.b	smpsNoAttack, $01
0008D91B E101                       	smpsAlterNote       $01
0008D91D E701                       	dc.b	smpsNoAttack, $01
0008D91F E102                       	smpsAlterNote       $02
0008D921 E701                       	dc.b	smpsNoAttack, $01
0008D923 E108                       	smpsAlterNote       $08
0008D925 E701                       	dc.b	smpsNoAttack, $01
0008D927 E106                       	smpsAlterNote       $06
0008D929 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
0008D935 8001                       	dc.b	nRst, $01
0008D937 E107                       	smpsAlterNote       $07
0008D939 CB0D                       	dc.b	nD6, $0D
0008D93B E104                       	smpsAlterNote       $04
0008D93D E701                       	dc.b	smpsNoAttack, $01
0008D93F E100                       	smpsAlterNote       $00
0008D941 E701                       	dc.b	smpsNoAttack, $01
0008D943 E104                       	smpsAlterNote       $04
0008D945 E701                       	dc.b	smpsNoAttack, $01
0008D947 E107                       	smpsAlterNote       $07
0008D949 E701                       	dc.b	smpsNoAttack, $01
0008D94B E10B                       	smpsAlterNote       $0B
0008D94D E701                       	dc.b	smpsNoAttack, $01
0008D94F E107                       	smpsAlterNote       $07
0008D951 E701                       	dc.b	smpsNoAttack, $01
0008D953 E101                       	smpsAlterNote       $01
0008D955 E701                       	dc.b	smpsNoAttack, $01
0008D957 E100                       	smpsAlterNote       $00
0008D959 E701                       	dc.b	smpsNoAttack, $01
0008D95B E104                       	smpsAlterNote       $04
0008D95D E701                       	dc.b	smpsNoAttack, $01
0008D95F E10A                       	smpsAlterNote       $0A
0008D961 E701                       	dc.b	smpsNoAttack, $01
0008D963 E10B                       	smpsAlterNote       $0B
0008D965 8001                       	dc.b	nRst, $01
0008D967 E109                       	smpsAlterNote       $09
0008D969 CE0A                       	dc.b	nF6, $0A
0008D96B E108                       	smpsAlterNote       $08
0008D96D CC07                       	dc.b	nEb6, $07
0008D96F E106                       	smpsAlterNote       $06
0008D971 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
0008D97D E107                       	smpsAlterNote       $07
0008D97F CB0D                       	dc.b	nD6, $0D
0008D981 E101                       	smpsAlterNote       $01
0008D983 E701                       	dc.b	smpsNoAttack, $01
0008D985 E100                       	smpsAlterNote       $00
0008D987 E701                       	dc.b	smpsNoAttack, $01
0008D989 E104                       	smpsAlterNote       $04
0008D98B E701                       	dc.b	smpsNoAttack, $01
0008D98D E10A                       	smpsAlterNote       $0A
0008D98F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D993 E107                       	smpsAlterNote       $07
0008D995 E701                       	dc.b	smpsNoAttack, $01
0008D997 E101                       	smpsAlterNote       $01
0008D999 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D99D E107                       	smpsAlterNote       $07
0008D99F E701                       	dc.b	smpsNoAttack, $01
0008D9A1 E10A                       	smpsAlterNote       $0A
0008D9A3 E701                       	dc.b	smpsNoAttack, $01
0008D9A5 E10B                       	smpsAlterNote       $0B
0008D9A7 8001                       	dc.b	nRst, $01
0008D9A9 E108                       	smpsAlterNote       $08
0008D9AB CC0D                       	dc.b	nEb6, $0D
0008D9AD E102                       	smpsAlterNote       $02
0008D9AF E701                       	dc.b	smpsNoAttack, $01
0008D9B1 E101                       	smpsAlterNote       $01
0008D9B3 E701                       	dc.b	smpsNoAttack, $01
0008D9B5 E105                       	smpsAlterNote       $05
0008D9B7 E701                       	dc.b	smpsNoAttack, $01
0008D9B9 E108                       	smpsAlterNote       $08
0008D9BB 8001                       	dc.b	nRst, $01
0008D9BD E106                       	smpsAlterNote       $06
0008D9BF C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008D9CB 8001                       	dc.b	nRst, $01
0008D9CD E107                       	smpsAlterNote       $07
0008D9CF CB0D                       	dc.b	nD6, $0D
0008D9D1 E101                       	smpsAlterNote       $01
0008D9D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9D7 E104                       	smpsAlterNote       $04
0008D9D9 E701                       	dc.b	smpsNoAttack, $01
0008D9DB E10A                       	smpsAlterNote       $0A
0008D9DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9E1 E104                       	smpsAlterNote       $04
0008D9E3 E701                       	dc.b	smpsNoAttack, $01
0008D9E5 E101                       	smpsAlterNote       $01
0008D9E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9EB E107                       	smpsAlterNote       $07
0008D9ED E701                       	dc.b	smpsNoAttack, $01
0008D9EF E10B                       	smpsAlterNote       $0B
0008D9F1 E701                       	dc.b	smpsNoAttack, $01
0008D9F3 E10A                       	smpsAlterNote       $0A
0008D9F5 E701                       	dc.b	smpsNoAttack, $01
0008D9F7 E104                       	smpsAlterNote       $04
0008D9F9 E701                       	dc.b	smpsNoAttack, $01
0008D9FB E100                       	smpsAlterNote       $00
0008D9FD E701                       	dc.b	smpsNoAttack, $01
0008D9FF E101                       	smpsAlterNote       $01
0008DA01 801C                       	dc.b	nRst, $1C
0008DA05 E107                       	smpsAlterNote       $07
0008DA07 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008DA0B E603                       	smpsAlterVol        $03
0008DA0D F6F1 AD                    	smpsJump            music84_Jump03
0008DA10                            
0008DA10                            ; FM3 Data
0008DA10                            music84_FM3:
0008DA10 E0C0                       	smpsPan             panCenter, $00
0008DA14 E109                       	smpsAlterNote       $09
0008DA16 C203 8007                  	dc.b	nF5, $03, nRst, $07
0008DA1A E108                       	smpsAlterNote       $08
0008DA1C C103 800B                  	dc.b	nE5, $03, nRst, $0B
0008DA20 E10B                       	smpsAlterNote       $0B
0008DA22 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008DA28 E040                       	smpsPan             panRight, $00
0008DA2A E110                       	smpsAlterNote       $10
0008DA2C E6F9                       	smpsAlterVol        $F9
0008DA2E C702 8001                  	dc.b	nBb5, $02, nRst, $01
0008DA32 E10F                       	smpsAlterNote       $0F
0008DA34 C603                       	dc.b	nA5, $03
0008DA36 E10D                       	smpsAlterNote       $0D
0008DA38 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008DA3E E10C                       	smpsAlterNote       $0C
0008DA40 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008DA44 E10A                       	smpsAlterNote       $0A
0008DA46 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008DA4A E10F                       	smpsAlterNote       $0F
0008DA4C BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008DA50 E0C0                       	smpsPan             panCenter, $00
0008DA54 E109                       	smpsAlterNote       $09
0008DA56 E609                       	smpsAlterVol        $09
0008DA58 B603                       	dc.b	nF4, $03
0008DA5A                            
0008DA5A                            music84_Jump02:
0008DA5A E70A                       	dc.b	smpsNoAttack, $0A
0008DA5C E103                       	smpsAlterNote       $03
0008DA5E E701                       	dc.b	smpsNoAttack, $01
0008DA60 E102                       	smpsAlterNote       $02
0008DA62 E701                       	dc.b	smpsNoAttack, $01
0008DA64 E106                       	smpsAlterNote       $06
0008DA66 E701                       	dc.b	smpsNoAttack, $01
0008DA68 E10C                       	smpsAlterNote       $0C
0008DA6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA6E E109                       	smpsAlterNote       $09
0008DA70 E701                       	dc.b	smpsNoAttack, $01
0008DA72 E103                       	smpsAlterNote       $03
0008DA74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA78 E109                       	smpsAlterNote       $09
0008DA7A E701                       	dc.b	smpsNoAttack, $01
0008DA7C E10C                       	smpsAlterNote       $0C
0008DA7E E701                       	dc.b	smpsNoAttack, $01
0008DA80 E10D                       	smpsAlterNote       $0D
0008DA82 8001                       	dc.b	nRst, $01
0008DA84 E109                       	smpsAlterNote       $09
0008DA86 B80D                       	dc.b	nG4, $0D
0008DA88 E103                       	smpsAlterNote       $03
0008DA8A E701                       	dc.b	smpsNoAttack, $01
0008DA8C E102                       	smpsAlterNote       $02
0008DA8E E701                       	dc.b	smpsNoAttack, $01
0008DA90 E106                       	smpsAlterNote       $06
0008DA92 E701                       	dc.b	smpsNoAttack, $01
0008DA94 E10C                       	smpsAlterNote       $0C
0008DA96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA9A E109                       	smpsAlterNote       $09
0008DA9C E701                       	dc.b	smpsNoAttack, $01
0008DA9E E103                       	smpsAlterNote       $03
0008DAA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAA4 E109                       	smpsAlterNote       $09
0008DAA6 E701                       	dc.b	smpsNoAttack, $01
0008DAA8 E10C                       	smpsAlterNote       $0C
0008DAAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAAE E106                       	smpsAlterNote       $06
0008DAB0 E701                       	dc.b	smpsNoAttack, $01
0008DAB2 E102                       	smpsAlterNote       $02
0008DAB4 E701                       	dc.b	smpsNoAttack, $01
0008DAB6 E103                       	smpsAlterNote       $03
0008DAB8 E701                       	dc.b	smpsNoAttack, $01
0008DABA E109                       	smpsAlterNote       $09
0008DABC E701                       	dc.b	smpsNoAttack, $01
0008DABE E10D                       	smpsAlterNote       $0D
0008DAC0 E701                       	dc.b	smpsNoAttack, $01
0008DAC2 E109                       	smpsAlterNote       $09
0008DAC4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008DAC8 E10B                       	smpsAlterNote       $0B
0008DACA BA0D                       	dc.b	nA4, $0D
0008DACC E105                       	smpsAlterNote       $05
0008DACE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAD2 E108                       	smpsAlterNote       $08
0008DAD4 E701                       	dc.b	smpsNoAttack, $01
0008DAD6 E10E                       	smpsAlterNote       $0E
0008DAD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DADC E108                       	smpsAlterNote       $08
0008DADE E701                       	dc.b	smpsNoAttack, $01
0008DAE0 E104                       	smpsAlterNote       $04
0008DAE2 E701                       	dc.b	smpsNoAttack, $01
0008DAE4 E105                       	smpsAlterNote       $05
0008DAE6 E701                       	dc.b	smpsNoAttack, $01
0008DAE8 E10B                       	smpsAlterNote       $0B
0008DAEA E701                       	dc.b	smpsNoAttack, $01
0008DAEC E10F                       	smpsAlterNote       $0F
0008DAEE E701                       	dc.b	smpsNoAttack, $01
0008DAF0 E10B                       	smpsAlterNote       $0B
0008DAF2 E701                       	dc.b	smpsNoAttack, $01
0008DAF4 E108                       	smpsAlterNote       $08
0008DAF6 E701                       	dc.b	smpsNoAttack, $01
0008DAF8 E104                       	smpsAlterNote       $04
0008DAFA E701                       	dc.b	smpsNoAttack, $01
0008DAFC E108                       	smpsAlterNote       $08
0008DAFE E701                       	dc.b	smpsNoAttack, $01
0008DB00 E10E                       	smpsAlterNote       $0E
0008DB02 E701                       	dc.b	smpsNoAttack, $01
0008DB04 E10F                       	smpsAlterNote       $0F
0008DB06 E701                       	dc.b	smpsNoAttack, $01
0008DB08 E10B                       	smpsAlterNote       $0B
0008DB0A E701                       	dc.b	smpsNoAttack, $01
0008DB0C E105                       	smpsAlterNote       $05
0008DB0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB12 E108                       	smpsAlterNote       $08
0008DB14 E701                       	dc.b	smpsNoAttack, $01
0008DB16 E10E                       	smpsAlterNote       $0E
0008DB18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB1C E108                       	smpsAlterNote       $08
0008DB1E E701                       	dc.b	smpsNoAttack, $01
0008DB20 E105                       	smpsAlterNote       $05
0008DB22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB26 E10B                       	smpsAlterNote       $0B
0008DB28 E701                       	dc.b	smpsNoAttack, $01
0008DB2A E10F                       	smpsAlterNote       $0F
0008DB2C E701                       	dc.b	smpsNoAttack, $01
0008DB2E E10E                       	smpsAlterNote       $0E
0008DB30 E701                       	dc.b	smpsNoAttack, $01
0008DB32 E108                       	smpsAlterNote       $08
0008DB34 E701                       	dc.b	smpsNoAttack, $01
0008DB36 E104                       	smpsAlterNote       $04
0008DB38 E701                       	dc.b	smpsNoAttack, $01
0008DB3A E105                       	smpsAlterNote       $05
0008DB3C 8001                       	dc.b	nRst, $01
0008DB3E E108                       	smpsAlterNote       $08
0008DB40 B50A                       	dc.b	nE4, $0A
0008DB42 E109                       	smpsAlterNote       $09
0008DB44 B60D                       	dc.b	nF4, $0D
0008DB46 E106                       	smpsAlterNote       $06
0008DB48 E701                       	dc.b	smpsNoAttack, $01
0008DB4A E103                       	smpsAlterNote       $03
0008DB4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB50 E109                       	smpsAlterNote       $09
0008DB52 E701                       	dc.b	smpsNoAttack, $01
0008DB54 E10D                       	smpsAlterNote       $0D
0008DB56 E701                       	dc.b	smpsNoAttack, $01
0008DB58 E10C                       	smpsAlterNote       $0C
0008DB5A E701                       	dc.b	smpsNoAttack, $01
0008DB5C E106                       	smpsAlterNote       $06
0008DB5E E701                       	dc.b	smpsNoAttack, $01
0008DB60 E102                       	smpsAlterNote       $02
0008DB62 E701                       	dc.b	smpsNoAttack, $01
0008DB64 E106                       	smpsAlterNote       $06
0008DB66 E701                       	dc.b	smpsNoAttack, $01
0008DB68 E109                       	smpsAlterNote       $09
0008DB6A E701                       	dc.b	smpsNoAttack, $01
0008DB6C E10D                       	smpsAlterNote       $0D
0008DB6E E701                       	dc.b	smpsNoAttack, $01
0008DB70 E109                       	smpsAlterNote       $09
0008DB72 B80D                       	dc.b	nG4, $0D
0008DB74 E106                       	smpsAlterNote       $06
0008DB76 E701                       	dc.b	smpsNoAttack, $01
0008DB78 E103                       	smpsAlterNote       $03
0008DB7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB7E E109                       	smpsAlterNote       $09
0008DB80 E701                       	dc.b	smpsNoAttack, $01
0008DB82 E10D                       	smpsAlterNote       $0D
0008DB84 E701                       	dc.b	smpsNoAttack, $01
0008DB86 E10C                       	smpsAlterNote       $0C
0008DB88 E701                       	dc.b	smpsNoAttack, $01
0008DB8A E106                       	smpsAlterNote       $06
0008DB8C E701                       	dc.b	smpsNoAttack, $01
0008DB8E E102                       	smpsAlterNote       $02
0008DB90 E701                       	dc.b	smpsNoAttack, $01
0008DB92 E106                       	smpsAlterNote       $06
0008DB94 E701                       	dc.b	smpsNoAttack, $01
0008DB96 E109                       	smpsAlterNote       $09
0008DB98 E701                       	dc.b	smpsNoAttack, $01
0008DB9A E10D                       	smpsAlterNote       $0D
0008DB9C E701                       	dc.b	smpsNoAttack, $01
0008DB9E E109                       	smpsAlterNote       $09
0008DBA0 E701                       	dc.b	smpsNoAttack, $01
0008DBA2 E103                       	smpsAlterNote       $03
0008DBA4 E701                       	dc.b	smpsNoAttack, $01
0008DBA6 E102                       	smpsAlterNote       $02
0008DBA8 E701                       	dc.b	smpsNoAttack, $01
0008DBAA E106                       	smpsAlterNote       $06
0008DBAC E701                       	dc.b	smpsNoAttack, $01
0008DBAE E10C                       	smpsAlterNote       $0C
0008DBB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DBB4 E109                       	smpsAlterNote       $09
0008DBB6 E701                       	dc.b	smpsNoAttack, $01
0008DBB8 E10B                       	smpsAlterNote       $0B
0008DBBA BA0D                       	dc.b	nA4, $0D
0008DBBC E108                       	smpsAlterNote       $08
0008DBBE E701                       	dc.b	smpsNoAttack, $01
0008DBC0 E104                       	smpsAlterNote       $04
0008DBC2 E701                       	dc.b	smpsNoAttack, $01
0008DBC4 E108                       	smpsAlterNote       $08
0008DBC6 E701                       	dc.b	smpsNoAttack, $01
0008DBC8 E10B                       	smpsAlterNote       $0B
0008DBCA E701                       	dc.b	smpsNoAttack, $01
0008DBCC E10F                       	smpsAlterNote       $0F
0008DBCE E701                       	dc.b	smpsNoAttack, $01
0008DBD0 E10B                       	smpsAlterNote       $0B
0008DBD2 E701                       	dc.b	smpsNoAttack, $01
0008DBD4 E105                       	smpsAlterNote       $05
0008DBD6 E701                       	dc.b	smpsNoAttack, $01
0008DBD8 E104                       	smpsAlterNote       $04
0008DBDA E701                       	dc.b	smpsNoAttack, $01
0008DBDC E108                       	smpsAlterNote       $08
0008DBDE E701                       	dc.b	smpsNoAttack, $01
0008DBE0 E10E                       	smpsAlterNote       $0E
0008DBE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DBE6 E10B                       	smpsAlterNote       $0B
0008DBE8 E701                       	dc.b	smpsNoAttack, $01
0008DBEA E105                       	smpsAlterNote       $05
0008DBEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DBF0 E10B                       	smpsAlterNote       $0B
0008DBF2 E701                       	dc.b	smpsNoAttack, $01
0008DBF4 E10E                       	smpsAlterNote       $0E
0008DBF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DBFA E108                       	smpsAlterNote       $08
0008DBFC E701                       	dc.b	smpsNoAttack, $01
0008DBFE E104                       	smpsAlterNote       $04
0008DC00 E701                       	dc.b	smpsNoAttack, $01
0008DC02 E105                       	smpsAlterNote       $05
0008DC04 E701                       	dc.b	smpsNoAttack, $01
0008DC06 E10B                       	smpsAlterNote       $0B
0008DC08 E701                       	dc.b	smpsNoAttack, $01
0008DC0A E10F                       	smpsAlterNote       $0F
0008DC0C E701                       	dc.b	smpsNoAttack, $01
0008DC0E E10B                       	smpsAlterNote       $0B
0008DC10 E701                       	dc.b	smpsNoAttack, $01
0008DC12 E108                       	smpsAlterNote       $08
0008DC14 E701                       	dc.b	smpsNoAttack, $01
0008DC16 E105                       	smpsAlterNote       $05
0008DC18 8001                       	dc.b	nRst, $01
0008DC1A E109                       	smpsAlterNote       $09
0008DC1C B609 8001                  	dc.b	nF4, $09, nRst, $01
0008DC20 E108                       	smpsAlterNote       $08
0008DC22 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008DC26 E107                       	smpsAlterNote       $07
0008DC28 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008DC2C E108                       	smpsAlterNote       $08
0008DC2E B502 8001                  	dc.b	nE4, $02, nRst, $01
0008DC32 E109                       	smpsAlterNote       $09
0008DC34 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
0008DC3A E10B                       	smpsAlterNote       $0B
0008DC3C BA0D                       	dc.b	nA4, $0D
0008DC3E E108                       	smpsAlterNote       $08
0008DC40 E701                       	dc.b	smpsNoAttack, $01
0008DC42 E104                       	smpsAlterNote       $04
0008DC44 E701                       	dc.b	smpsNoAttack, $01
0008DC46 E108                       	smpsAlterNote       $08
0008DC48 E701                       	dc.b	smpsNoAttack, $01
0008DC4A E10E                       	smpsAlterNote       $0E
0008DC4C E701                       	dc.b	smpsNoAttack, $01
0008DC4E E10F                       	smpsAlterNote       $0F
0008DC50 E701                       	dc.b	smpsNoAttack, $01
0008DC52 E10B                       	smpsAlterNote       $0B
0008DC54 E701                       	dc.b	smpsNoAttack, $01
0008DC56 E105                       	smpsAlterNote       $05
0008DC58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC5C E108                       	smpsAlterNote       $08
0008DC5E E701                       	dc.b	smpsNoAttack, $01
0008DC60 E10E                       	smpsAlterNote       $0E
0008DC62 E701                       	dc.b	smpsNoAttack, $01
0008DC64 E10F                       	smpsAlterNote       $0F
0008DC66 8001                       	dc.b	nRst, $01
0008DC68 E109                       	smpsAlterNote       $09
0008DC6A C20D                       	dc.b	nF5, $0D
0008DC6C E103                       	smpsAlterNote       $03
0008DC6E E701                       	dc.b	smpsNoAttack, $01
0008DC70 E102                       	smpsAlterNote       $02
0008DC72 E701                       	dc.b	smpsNoAttack, $01
0008DC74 E106                       	smpsAlterNote       $06
0008DC76 E701                       	dc.b	smpsNoAttack, $01
0008DC78 E10C                       	smpsAlterNote       $0C
0008DC7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC7E E109                       	smpsAlterNote       $09
0008DC80 E701                       	dc.b	smpsNoAttack, $01
0008DC82 E103                       	smpsAlterNote       $03
0008DC84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC88 E109                       	smpsAlterNote       $09
0008DC8A E701                       	dc.b	smpsNoAttack, $01
0008DC8C E10C                       	smpsAlterNote       $0C
0008DC8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC92 E106                       	smpsAlterNote       $06
0008DC94 E701                       	dc.b	smpsNoAttack, $01
0008DC96 E102                       	smpsAlterNote       $02
0008DC98 E701                       	dc.b	smpsNoAttack, $01
0008DC9A E103                       	smpsAlterNote       $03
0008DC9C E701                       	dc.b	smpsNoAttack, $01
0008DC9E E109                       	smpsAlterNote       $09
0008DCA0 E701                       	dc.b	smpsNoAttack, $01
0008DCA2 E10D                       	smpsAlterNote       $0D
0008DCA4 E701                       	dc.b	smpsNoAttack, $01
0008DCA6 E109                       	smpsAlterNote       $09
0008DCA8 E701                       	dc.b	smpsNoAttack, $01
0008DCAA E106                       	smpsAlterNote       $06
0008DCAC E701                       	dc.b	smpsNoAttack, $01
0008DCAE E102                       	smpsAlterNote       $02
0008DCB0 E701                       	dc.b	smpsNoAttack, $01
0008DCB2 E106                       	smpsAlterNote       $06
0008DCB4 E701                       	dc.b	smpsNoAttack, $01
0008DCB6 E10C                       	smpsAlterNote       $0C
0008DCB8 E701                       	dc.b	smpsNoAttack, $01
0008DCBA E10D                       	smpsAlterNote       $0D
0008DCBC E701                       	dc.b	smpsNoAttack, $01
0008DCBE E109                       	smpsAlterNote       $09
0008DCC0 E701                       	dc.b	smpsNoAttack, $01
0008DCC2 E103                       	smpsAlterNote       $03
0008DCC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCC8 E106                       	smpsAlterNote       $06
0008DCCA E701                       	dc.b	smpsNoAttack, $01
0008DCCC E10C                       	smpsAlterNote       $0C
0008DCCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCD2 E106                       	smpsAlterNote       $06
0008DCD4 E701                       	dc.b	smpsNoAttack, $01
0008DCD6 E103                       	smpsAlterNote       $03
0008DCD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCDC E109                       	smpsAlterNote       $09
0008DCDE E701                       	dc.b	smpsNoAttack, $01
0008DCE0 E10D                       	smpsAlterNote       $0D
0008DCE2 E701                       	dc.b	smpsNoAttack, $01
0008DCE4 E10C                       	smpsAlterNote       $0C
0008DCE6 E701                       	dc.b	smpsNoAttack, $01
0008DCE8 E106                       	smpsAlterNote       $06
0008DCEA E701                       	dc.b	smpsNoAttack, $01
0008DCEC E102                       	smpsAlterNote       $02
0008DCEE E701                       	dc.b	smpsNoAttack, $01
0008DCF0 E106                       	smpsAlterNote       $06
0008DCF2 E701                       	dc.b	smpsNoAttack, $01
0008DCF4 E109                       	smpsAlterNote       $09
0008DCF6 E701                       	dc.b	smpsNoAttack, $01
0008DCF8 E10D                       	smpsAlterNote       $0D
0008DCFA E701                       	dc.b	smpsNoAttack, $01
0008DCFC E109                       	smpsAlterNote       $09
0008DCFE E701                       	dc.b	smpsNoAttack, $01
0008DD00 E103                       	smpsAlterNote       $03
0008DD02 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008DD06 E109                       	smpsAlterNote       $09
0008DD08 C206                       	dc.b	nF5, $06
0008DD0A E108                       	smpsAlterNote       $08
0008DD0C C10E                       	dc.b	nE5, $0E
0008DD0E E102                       	smpsAlterNote       $02
0008DD10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD14 E108                       	smpsAlterNote       $08
0008DD16 E701                       	dc.b	smpsNoAttack, $01
0008DD18 E10B                       	smpsAlterNote       $0B
0008DD1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD1E E105                       	smpsAlterNote       $05
0008DD20 E701                       	dc.b	smpsNoAttack, $01
0008DD22 E101                       	smpsAlterNote       $01
0008DD24 E701                       	dc.b	smpsNoAttack, $01
0008DD26 E102                       	smpsAlterNote       $02
0008DD28 E701                       	dc.b	smpsNoAttack, $01
0008DD2A E108                       	smpsAlterNote       $08
0008DD2C E701                       	dc.b	smpsNoAttack, $01
0008DD2E E10C                       	smpsAlterNote       $0C
0008DD30 E701                       	dc.b	smpsNoAttack, $01
0008DD32 E107                       	smpsAlterNote       $07
0008DD34 BF0E                       	dc.b	nD5, $0E
0008DD36 E101                       	smpsAlterNote       $01
0008DD38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD3C E107                       	smpsAlterNote       $07
0008DD3E E701                       	dc.b	smpsNoAttack, $01
0008DD40 E10A                       	smpsAlterNote       $0A
0008DD42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD46 E104                       	smpsAlterNote       $04
0008DD48 E701                       	dc.b	smpsNoAttack, $01
0008DD4A E100                       	smpsAlterNote       $00
0008DD4C E701                       	dc.b	smpsNoAttack, $01
0008DD4E E104                       	smpsAlterNote       $04
0008DD50 E701                       	dc.b	smpsNoAttack, $01
0008DD52 E107                       	smpsAlterNote       $07
0008DD54 E701                       	dc.b	smpsNoAttack, $01
0008DD56 E10B                       	smpsAlterNote       $0B
0008DD58 E701                       	dc.b	smpsNoAttack, $01
0008DD5A E107                       	smpsAlterNote       $07
0008DD5C E701                       	dc.b	smpsNoAttack, $01
0008DD5E E101                       	smpsAlterNote       $01
0008DD60 E701                       	dc.b	smpsNoAttack, $01
0008DD62 E100                       	smpsAlterNote       $00
0008DD64 E701                       	dc.b	smpsNoAttack, $01
0008DD66 E104                       	smpsAlterNote       $04
0008DD68 E701                       	dc.b	smpsNoAttack, $01
0008DD6A E10A                       	smpsAlterNote       $0A
0008DD6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD70 E107                       	smpsAlterNote       $07
0008DD72 E701                       	dc.b	smpsNoAttack, $01
0008DD74 E101                       	smpsAlterNote       $01
0008DD76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD7A E107                       	smpsAlterNote       $07
0008DD7C E701                       	dc.b	smpsNoAttack, $01
0008DD7E E10A                       	smpsAlterNote       $0A
0008DD80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD84 E104                       	smpsAlterNote       $04
0008DD86 E701                       	dc.b	smpsNoAttack, $01
0008DD88 E100                       	smpsAlterNote       $00
0008DD8A E701                       	dc.b	smpsNoAttack, $01
0008DD8C E101                       	smpsAlterNote       $01
0008DD8E E701                       	dc.b	smpsNoAttack, $01
0008DD90 E107                       	smpsAlterNote       $07
0008DD92 E701                       	dc.b	smpsNoAttack, $01
0008DD94 E10B                       	smpsAlterNote       $0B
0008DD96 E701                       	dc.b	smpsNoAttack, $01
0008DD98 E107                       	smpsAlterNote       $07
0008DD9A E701                       	dc.b	smpsNoAttack, $01
0008DD9C E104                       	smpsAlterNote       $04
0008DD9E E701                       	dc.b	smpsNoAttack, $01
0008DDA0 E100                       	smpsAlterNote       $00
0008DDA2 E701                       	dc.b	smpsNoAttack, $01
0008DDA4 E104                       	smpsAlterNote       $04
0008DDA6 E701                       	dc.b	smpsNoAttack, $01
0008DDA8 E10A                       	smpsAlterNote       $0A
0008DDAA E701                       	dc.b	smpsNoAttack, $01
0008DDAC E10B                       	smpsAlterNote       $0B
0008DDAE E701                       	dc.b	smpsNoAttack, $01
0008DDB0 E107                       	smpsAlterNote       $07
0008DDB2 E701                       	dc.b	smpsNoAttack, $01
0008DDB4 E101                       	smpsAlterNote       $01
0008DDB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDBA E104                       	smpsAlterNote       $04
0008DDBC E701                       	dc.b	smpsNoAttack, $01
0008DDBE E10A                       	smpsAlterNote       $0A
0008DDC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDC4 E104                       	smpsAlterNote       $04
0008DDC6 E701                       	dc.b	smpsNoAttack, $01
0008DDC8 E101                       	smpsAlterNote       $01
0008DDCA E701                       	dc.b	smpsNoAttack, $01
0008DDCE E107                       	smpsAlterNote       $07
0008DDD0 E6FF                       	smpsAlterVol        $FF
0008DDD2 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008DDDE 8004                       	dc.b	nRst, $04
0008DDE2 E109                       	smpsAlterNote       $09
0008DDE4 E602                       	smpsAlterVol        $02
0008DDE6 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
0008DDEC E108                       	smpsAlterNote       $08
0008DDEE B502 8001                  	dc.b	nE4, $02, nRst, $01
0008DDF2 E109                       	smpsAlterNote       $09
0008DDF4 B60D                       	dc.b	nF4, $0D
0008DDF6 E106                       	smpsAlterNote       $06
0008DDF8 E701                       	dc.b	smpsNoAttack, $01
0008DDFA E102                       	smpsAlterNote       $02
0008DDFC E701                       	dc.b	smpsNoAttack, $01
0008DDFE E106                       	smpsAlterNote       $06
0008DE00 E701                       	dc.b	smpsNoAttack, $01
0008DE02 E109                       	smpsAlterNote       $09
0008DE04 E701                       	dc.b	smpsNoAttack, $01
0008DE06 E10D                       	smpsAlterNote       $0D
0008DE08 E701                       	dc.b	smpsNoAttack, $01
0008DE0A E109                       	smpsAlterNote       $09
0008DE0C E701                       	dc.b	smpsNoAttack, $01
0008DE0E E103                       	smpsAlterNote       $03
0008DE10 E701                       	dc.b	smpsNoAttack, $01
0008DE12 E102                       	smpsAlterNote       $02
0008DE14 E701                       	dc.b	smpsNoAttack, $01
0008DE16 E106                       	smpsAlterNote       $06
0008DE18 E701                       	dc.b	smpsNoAttack, $01
0008DE1A E10C                       	smpsAlterNote       $0C
0008DE1C E701                       	dc.b	smpsNoAttack, $01
0008DE1E E10D                       	smpsAlterNote       $0D
0008DE20 8001                       	dc.b	nRst, $01
0008DE22 E109                       	smpsAlterNote       $09
0008DE24 B80D                       	dc.b	nG4, $0D
0008DE26 E106                       	smpsAlterNote       $06
0008DE28 E701                       	dc.b	smpsNoAttack, $01
0008DE2A E102                       	smpsAlterNote       $02
0008DE2C E701                       	dc.b	smpsNoAttack, $01
0008DE2E E106                       	smpsAlterNote       $06
0008DE30 E701                       	dc.b	smpsNoAttack, $01
0008DE32 E10C                       	smpsAlterNote       $0C
0008DE34 E701                       	dc.b	smpsNoAttack, $01
0008DE36 E10D                       	smpsAlterNote       $0D
0008DE38 E701                       	dc.b	smpsNoAttack, $01
0008DE3A E109                       	smpsAlterNote       $09
0008DE3C E701                       	dc.b	smpsNoAttack, $01
0008DE3E E103                       	smpsAlterNote       $03
0008DE40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE44 E106                       	smpsAlterNote       $06
0008DE46 E701                       	dc.b	smpsNoAttack, $01
0008DE48 E10C                       	smpsAlterNote       $0C
0008DE4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE4E E106                       	smpsAlterNote       $06
0008DE50 E701                       	dc.b	smpsNoAttack, $01
0008DE52 E103                       	smpsAlterNote       $03
0008DE54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE58 E109                       	smpsAlterNote       $09
0008DE5A E701                       	dc.b	smpsNoAttack, $01
0008DE5C E10D                       	smpsAlterNote       $0D
0008DE5E E701                       	dc.b	smpsNoAttack, $01
0008DE60 E10C                       	smpsAlterNote       $0C
0008DE62 E701                       	dc.b	smpsNoAttack, $01
0008DE64 E109                       	smpsAlterNote       $09
0008DE66 8001                       	dc.b	nRst, $01
0008DE68 E10B                       	smpsAlterNote       $0B
0008DE6A BA03                       	dc.b	nA4, $03
0008DE6C E10C                       	smpsAlterNote       $0C
0008DE6E BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0008DE72 E10B                       	smpsAlterNote       $0B
0008DE74 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
0008DE7A E10C                       	smpsAlterNote       $0C
0008DE7C C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008DE80 E10B                       	smpsAlterNote       $0B
0008DE82 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008DE88 E10C                       	smpsAlterNote       $0C
0008DE8A D303                       	dc.b	nBb6, $03
0008DE8C E10B                       	smpsAlterNote       $0B
0008DE8E D20D                       	dc.b	nA6, $0D
0008DE90 E108                       	smpsAlterNote       $08
0008DE92 E701                       	dc.b	smpsNoAttack, $01
0008DE94 E104                       	smpsAlterNote       $04
0008DE96 E701                       	dc.b	smpsNoAttack, $01
0008DE98 E105                       	smpsAlterNote       $05
0008DE9A E701                       	dc.b	smpsNoAttack, $01
0008DE9C E10B                       	smpsAlterNote       $0B
0008DE9E E701                       	dc.b	smpsNoAttack, $01
0008DEA0 E10F                       	smpsAlterNote       $0F
0008DEA2 E701                       	dc.b	smpsNoAttack, $01
0008DEA4 E10B                       	smpsAlterNote       $0B
0008DEA6 E701                       	dc.b	smpsNoAttack, $01
0008DEA8 E108                       	smpsAlterNote       $08
0008DEAA E701                       	dc.b	smpsNoAttack, $01
0008DEAC E104                       	smpsAlterNote       $04
0008DEAE E701                       	dc.b	smpsNoAttack, $01
0008DEB0 E108                       	smpsAlterNote       $08
0008DEB2 E701                       	dc.b	smpsNoAttack, $01
0008DEB4 E10E                       	smpsAlterNote       $0E
0008DEB6 E701                       	dc.b	smpsNoAttack, $01
0008DEB8 E10F                       	smpsAlterNote       $0F
0008DEBA E701                       	dc.b	smpsNoAttack, $01
0008DEBC E10B                       	smpsAlterNote       $0B
0008DEBE E701                       	dc.b	smpsNoAttack, $01
0008DEC0 E105                       	smpsAlterNote       $05
0008DEC2 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008DEC8 E109                       	smpsAlterNote       $09
0008DECA CE07                       	dc.b	nF6, $07
0008DECC E108                       	smpsAlterNote       $08
0008DECE CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008DED2 E109                       	smpsAlterNote       $09
0008DED4 CE03 8001                  	dc.b	nF6, $03, nRst, $01
0008DED8 E108                       	smpsAlterNote       $08
0008DEDA CC0D                       	dc.b	nEb6, $0D
0008DEDC E102                       	smpsAlterNote       $02
0008DEDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DEE2 E108                       	smpsAlterNote       $08
0008DEE4 E701                       	dc.b	smpsNoAttack, $01
0008DEE6 E10B                       	smpsAlterNote       $0B
0008DEE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DEEC E105                       	smpsAlterNote       $05
0008DEEE E701                       	dc.b	smpsNoAttack, $01
0008DEF0 E101                       	smpsAlterNote       $01
0008DEF2 E701                       	dc.b	smpsNoAttack, $01
0008DEF4 E102                       	smpsAlterNote       $02
0008DEF6 E701                       	dc.b	smpsNoAttack, $01
0008DEF8 E108                       	smpsAlterNote       $08
0008DEFA E701                       	dc.b	smpsNoAttack, $01
0008DEFC E10C                       	smpsAlterNote       $0C
0008DEFE E701                       	dc.b	smpsNoAttack, $01
0008DF00 E108                       	smpsAlterNote       $08
0008DF02 E701                       	dc.b	smpsNoAttack, $01
0008DF04 E105                       	smpsAlterNote       $05
0008DF06 E701                       	dc.b	smpsNoAttack, $01
0008DF08 E101                       	smpsAlterNote       $01
0008DF0A E701                       	dc.b	smpsNoAttack, $01
0008DF0C E105                       	smpsAlterNote       $05
0008DF0E E701                       	dc.b	smpsNoAttack, $01
0008DF10 E10B                       	smpsAlterNote       $0B
0008DF12 E701                       	dc.b	smpsNoAttack, $01
0008DF14 E10C                       	smpsAlterNote       $0C
0008DF16 E701                       	dc.b	smpsNoAttack, $01
0008DF18 E108                       	smpsAlterNote       $08
0008DF1A E701                       	dc.b	smpsNoAttack, $01
0008DF1C E107                       	smpsAlterNote       $07
0008DF1E CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
0008DF28 E10B                       	smpsAlterNote       $0B
0008DF2A C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008DF34 E109                       	smpsAlterNote       $09
0008DF36 C203                       	dc.b	nF5, $03
0008DF38 E108                       	smpsAlterNote       $08
0008DF3A C103 8001                  	dc.b	nE5, $03, nRst, $01
0008DF3E E109                       	smpsAlterNote       $09
0008DF40 C20D                       	dc.b	nF5, $0D
0008DF42 E108                       	smpsAlterNote       $08
0008DF44 C10E                       	dc.b	nE5, $0E
0008DF46 E107                       	smpsAlterNote       $07
0008DF48 BF0D                       	dc.b	nD5, $0D
0008DF4A E104                       	smpsAlterNote       $04
0008DF4C E701                       	dc.b	smpsNoAttack, $01
0008DF4E E100                       	smpsAlterNote       $00
0008DF50 E701                       	dc.b	smpsNoAttack, $01
0008DF52 E104                       	smpsAlterNote       $04
0008DF54 E701                       	dc.b	smpsNoAttack, $01
0008DF56 E107                       	smpsAlterNote       $07
0008DF58 E701                       	dc.b	smpsNoAttack, $01
0008DF5A E10B                       	smpsAlterNote       $0B
0008DF5C E701                       	dc.b	smpsNoAttack, $01
0008DF5E E107                       	smpsAlterNote       $07
0008DF60 E701                       	dc.b	smpsNoAttack, $01
0008DF62 E101                       	smpsAlterNote       $01
0008DF64 E701                       	dc.b	smpsNoAttack, $01
0008DF66 E100                       	smpsAlterNote       $00
0008DF68 E701                       	dc.b	smpsNoAttack, $01
0008DF6A E104                       	smpsAlterNote       $04
0008DF6C E701                       	dc.b	smpsNoAttack, $01
0008DF6E E10A                       	smpsAlterNote       $0A
0008DF70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF74 E107                       	smpsAlterNote       $07
0008DF76 E701                       	dc.b	smpsNoAttack, $01
0008DF78 E101                       	smpsAlterNote       $01
0008DF7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF7E E107                       	smpsAlterNote       $07
0008DF80 E701                       	dc.b	smpsNoAttack, $01
0008DF82 E10A                       	smpsAlterNote       $0A
0008DF84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF88 E104                       	smpsAlterNote       $04
0008DF8A E701                       	dc.b	smpsNoAttack, $01
0008DF8C E100                       	smpsAlterNote       $00
0008DF8E E701                       	dc.b	smpsNoAttack, $01
0008DF90 E101                       	smpsAlterNote       $01
0008DF92 E701                       	dc.b	smpsNoAttack, $01
0008DF94 E107                       	smpsAlterNote       $07
0008DF96 E701                       	dc.b	smpsNoAttack, $01
0008DF98 E10B                       	smpsAlterNote       $0B
0008DF9A E701                       	dc.b	smpsNoAttack, $01
0008DF9C E107                       	smpsAlterNote       $07
0008DF9E E701                       	dc.b	smpsNoAttack, $01
0008DFA0 E104                       	smpsAlterNote       $04
0008DFA2 E701                       	dc.b	smpsNoAttack, $01
0008DFA4 E100                       	smpsAlterNote       $00
0008DFA6 E701                       	dc.b	smpsNoAttack, $01
0008DFA8 E104                       	smpsAlterNote       $04
0008DFAA E701                       	dc.b	smpsNoAttack, $01
0008DFAC E10A                       	smpsAlterNote       $0A
0008DFAE E701                       	dc.b	smpsNoAttack, $01
0008DFB0 E10B                       	smpsAlterNote       $0B
0008DFB2 E701                       	dc.b	smpsNoAttack, $01
0008DFB4 E107                       	smpsAlterNote       $07
0008DFB6 E701                       	dc.b	smpsNoAttack, $01
0008DFB8 E101                       	smpsAlterNote       $01
0008DFBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFBE E104                       	smpsAlterNote       $04
0008DFC0 E701                       	dc.b	smpsNoAttack, $01
0008DFC2 E10A                       	smpsAlterNote       $0A
0008DFC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFC8 E104                       	smpsAlterNote       $04
0008DFCA E701                       	dc.b	smpsNoAttack, $01
0008DFCC E101                       	smpsAlterNote       $01
0008DFCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFD2 E107                       	smpsAlterNote       $07
0008DFD4 E701                       	dc.b	smpsNoAttack, $01
0008DFD6 E10B                       	smpsAlterNote       $0B
0008DFD8 E701                       	dc.b	smpsNoAttack, $01
0008DFDA E10A                       	smpsAlterNote       $0A
0008DFDC E701                       	dc.b	smpsNoAttack, $01
0008DFDE E104                       	smpsAlterNote       $04
0008DFE0 E701                       	dc.b	smpsNoAttack, $01
0008DFE2 E100                       	smpsAlterNote       $00
0008DFE4 E701                       	dc.b	smpsNoAttack, $01
0008DFE6 E104                       	smpsAlterNote       $04
0008DFE8 E701                       	dc.b	smpsNoAttack, $01
0008DFEA E107                       	smpsAlterNote       $07
0008DFEC E701                       	dc.b	smpsNoAttack, $01
0008DFEE E10B                       	smpsAlterNote       $0B
0008DFF0 E701                       	dc.b	smpsNoAttack, $01
0008DFF2 E107                       	smpsAlterNote       $07
0008DFF4 E701                       	dc.b	smpsNoAttack, $01
0008DFF6 E101                       	smpsAlterNote       $01
0008DFF8 E701                       	dc.b	smpsNoAttack, $01
0008DFFA E100                       	smpsAlterNote       $00
0008DFFC E701                       	dc.b	smpsNoAttack, $01
0008DFFE E104                       	smpsAlterNote       $04
0008E000 E701                       	dc.b	smpsNoAttack, $01
0008E002 E10A                       	smpsAlterNote       $0A
0008E004 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E008 E107                       	smpsAlterNote       $07
0008E00A E701                       	dc.b	smpsNoAttack, $01
0008E00C E101                       	smpsAlterNote       $01
0008E00E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E012 E107                       	smpsAlterNote       $07
0008E014 E701                       	dc.b	smpsNoAttack, $01
0008E016 E10A                       	smpsAlterNote       $0A
0008E018 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E01C E104                       	smpsAlterNote       $04
0008E01E E701                       	dc.b	smpsNoAttack, $01
0008E020 E100                       	smpsAlterNote       $00
0008E022 E701                       	dc.b	smpsNoAttack, $01
0008E024 E101                       	smpsAlterNote       $01
0008E026 E701                       	dc.b	smpsNoAttack, $01
0008E028 E107                       	smpsAlterNote       $07
0008E02A E701                       	dc.b	smpsNoAttack, $01
0008E02C E10B                       	smpsAlterNote       $0B
0008E02E E701                       	dc.b	smpsNoAttack, $01
0008E030 E107                       	smpsAlterNote       $07
0008E032 E701                       	dc.b	smpsNoAttack, $01
0008E034 E104                       	smpsAlterNote       $04
0008E036 E701                       	dc.b	smpsNoAttack, $01
0008E038 E100                       	smpsAlterNote       $00
0008E03A E701                       	dc.b	smpsNoAttack, $01
0008E03C E101                       	smpsAlterNote       $01
0008E03E 8001                       	dc.b	nRst, $01
0008E040 E109                       	smpsAlterNote       $09
0008E042 C20D                       	dc.b	nF5, $0D
0008E044 E106                       	smpsAlterNote       $06
0008E046 E701                       	dc.b	smpsNoAttack, $01
0008E048 E102                       	smpsAlterNote       $02
0008E04A E701                       	dc.b	smpsNoAttack, $01
0008E04C E106                       	smpsAlterNote       $06
0008E04E E701                       	dc.b	smpsNoAttack, $01
0008E050 E10C                       	smpsAlterNote       $0C
0008E052 E701                       	dc.b	smpsNoAttack, $01
0008E054 E10D                       	smpsAlterNote       $0D
0008E056 E701                       	dc.b	smpsNoAttack, $01
0008E058 E109                       	smpsAlterNote       $09
0008E05A E701                       	dc.b	smpsNoAttack, $01
0008E05C E103                       	smpsAlterNote       $03
0008E05E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E062 E106                       	smpsAlterNote       $06
0008E064 E701                       	dc.b	smpsNoAttack, $01
0008E066 E10C                       	smpsAlterNote       $0C
0008E068 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E06C E106                       	smpsAlterNote       $06
0008E06E E701                       	dc.b	smpsNoAttack, $01
0008E070 E103                       	smpsAlterNote       $03
0008E072 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E076 E109                       	smpsAlterNote       $09
0008E078 E701                       	dc.b	smpsNoAttack, $01
0008E07A E10D                       	smpsAlterNote       $0D
0008E07C E701                       	dc.b	smpsNoAttack, $01
0008E07E E10C                       	smpsAlterNote       $0C
0008E080 E701                       	dc.b	smpsNoAttack, $01
0008E082 E109                       	smpsAlterNote       $09
0008E084 8001                       	dc.b	nRst, $01
0008E086 E108                       	smpsAlterNote       $08
0008E088 C10D                       	dc.b	nE5, $0D
0008E08A E109                       	smpsAlterNote       $09
0008E08C C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0008E090 E108                       	smpsAlterNote       $08
0008E092 C10D                       	dc.b	nE5, $0D
0008E094 E102                       	smpsAlterNote       $02
0008E096 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E09A E105                       	smpsAlterNote       $05
0008E09C E701                       	dc.b	smpsNoAttack, $01
0008E09E E108                       	smpsAlterNote       $08
0008E0A0 8001                       	dc.b	nRst, $01
0008E0A2 E107                       	smpsAlterNote       $07
0008E0A4 BF0D                       	dc.b	nD5, $0D
0008E0A6 E108                       	smpsAlterNote       $08
0008E0A8 C107                       	dc.b	nE5, $07
0008E0AA E109                       	smpsAlterNote       $09
0008E0AC C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0008E0B2 E10B                       	smpsAlterNote       $0B
0008E0B4 C603                       	dc.b	nA5, $03
0008E0B6 E10C                       	smpsAlterNote       $0C
0008E0B8 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008E0BE E10B                       	smpsAlterNote       $0B
0008E0C0 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
0008E0C6 E109                       	smpsAlterNote       $09
0008E0C8 D003                       	dc.b	nG6, $03
0008E0CA E108                       	smpsAlterNote       $08
0008E0CC CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008E0D0 E10B                       	smpsAlterNote       $0B
0008E0D2 C601 8001                  	dc.b	nA5, $01, nRst, $01
0008E0D6 E108                       	smpsAlterNote       $08
0008E0D8 C102                       	dc.b	nE5, $02
0008E0DC E10C                       	smpsAlterNote       $0C
0008E0DE E6FB                       	smpsAlterVol        $FB
0008E0E0 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0008E0EC 8001                       	dc.b	nRst, $01
0008E0EE E10B                       	smpsAlterNote       $0B
0008E0F0 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008E0F8 E107                       	smpsAlterNote       $07
0008E0FA A706 8001                  	dc.b	nD3, $06, nRst, $01
0008E0FE E10B                       	smpsAlterNote       $0B
0008E100 A203                       	dc.b	nA2, $03
0008E102 E109                       	smpsAlterNote       $09
0008E104 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008E108 E108                       	smpsAlterNote       $08
0008E10A A906                       	dc.b	nE3, $06
0008E10C E107                       	smpsAlterNote       $07
0008E10E A703 8001                  	dc.b	nD3, $03, nRst, $01
0008E112 E106                       	smpsAlterNote       $06
0008E114 A503                       	dc.b	nC3, $03
0008E116 E10C                       	smpsAlterNote       $0C
0008E118 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008E11C E10B                       	smpsAlterNote       $0B
0008E11E A203 8004                  	dc.b	nA2, $03, nRst, $04
0008E122 E11B                       	smpsAlterNote       $1B
0008E124 C401                       	dc.b	nG5, $01
0008E126 E1F4                       	smpsAlterNote       $F4
0008E128 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008E12B E106                       	smpsAlterNote       $06
0008E12D E701                       	dc.b	smpsNoAttack, $01
0008E12F E10F                       	smpsAlterNote       $0F
0008E131 E701                       	dc.b	smpsNoAttack, $01
0008E133 E1E4                       	smpsAlterNote       $E4
0008E135 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008E138 E1F6                       	smpsAlterNote       $F6
0008E13A E701                       	dc.b	smpsNoAttack, $01
0008E13C E108                       	smpsAlterNote       $08
0008E13E E701                       	dc.b	smpsNoAttack, $01
0008E140 E10B                       	smpsAlterNote       $0B
0008E142 E706                       	dc.b	smpsNoAttack, $06
0008E144 E105                       	smpsAlterNote       $05
0008E146 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E14A E108                       	smpsAlterNote       $08
0008E14C E701                       	dc.b	smpsNoAttack, $01
0008E14E E10E                       	smpsAlterNote       $0E
0008E150 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E154 E108                       	smpsAlterNote       $08
0008E156 E701                       	dc.b	smpsNoAttack, $01
0008E158 E105                       	smpsAlterNote       $05
0008E15A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E15E E10B                       	smpsAlterNote       $0B
0008E160 E701                       	dc.b	smpsNoAttack, $01
0008E162 E10F                       	smpsAlterNote       $0F
0008E164 E701                       	dc.b	smpsNoAttack, $01
0008E166 E10E                       	smpsAlterNote       $0E
0008E168 E701                       	dc.b	smpsNoAttack, $01
0008E16A E108                       	smpsAlterNote       $08
0008E16C E701                       	dc.b	smpsNoAttack, $01
0008E16E E104                       	smpsAlterNote       $04
0008E170 E701                       	dc.b	smpsNoAttack, $01
0008E172 E108                       	smpsAlterNote       $08
0008E174 E701                       	dc.b	smpsNoAttack, $01
0008E176 E10B                       	smpsAlterNote       $0B
0008E178 E701                       	dc.b	smpsNoAttack, $01
0008E17A E10F                       	smpsAlterNote       $0F
0008E17C E701                       	dc.b	smpsNoAttack, $01
0008E17E E10B                       	smpsAlterNote       $0B
0008E180 E701                       	dc.b	smpsNoAttack, $01
0008E182 E105                       	smpsAlterNote       $05
0008E184 E701                       	dc.b	smpsNoAttack, $01
0008E186 E104                       	smpsAlterNote       $04
0008E188 E701                       	dc.b	smpsNoAttack, $01
0008E18A E108                       	smpsAlterNote       $08
0008E18C E701                       	dc.b	smpsNoAttack, $01
0008E18E E10E                       	smpsAlterNote       $0E
0008E190 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E194 E10B                       	smpsAlterNote       $0B
0008E196 E701                       	dc.b	smpsNoAttack, $01
0008E198 E105                       	smpsAlterNote       $05
0008E19A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E19E E10B                       	smpsAlterNote       $0B
0008E1A0 E701                       	dc.b	smpsNoAttack, $01
0008E1A2 E10E                       	smpsAlterNote       $0E
0008E1A4 E701                       	dc.b	smpsNoAttack, $01
0008E1A6 E10F                       	smpsAlterNote       $0F
0008E1A8 8001                       	dc.b	nRst, $01
0008E1AA E109                       	smpsAlterNote       $09
0008E1AC C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008E1B2 E108                       	smpsAlterNote       $08
0008E1B4 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008E1B8 E109                       	smpsAlterNote       $09
0008E1BA C202                       	dc.b	nF5, $02
0008E1BC E108                       	smpsAlterNote       $08
0008E1BE C102                       	dc.b	nE5, $02
0008E1C0 E107                       	smpsAlterNote       $07
0008E1C2 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008E1C6 E108                       	smpsAlterNote       $08
0008E1C8 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008E1CC E107                       	smpsAlterNote       $07
0008E1CE BF02                       	dc.b	nD5, $02
0008E1D0 E106                       	smpsAlterNote       $06
0008E1D2 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008E1D6 E107                       	smpsAlterNote       $07
0008E1D8 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008E1DC E106                       	smpsAlterNote       $06
0008E1DE BD02                       	dc.b	nC5, $02
0008E1E0 E10C                       	smpsAlterNote       $0C
0008E1E2 BB02                       	dc.b	nBb4, $02
0008E1E4 E106                       	smpsAlterNote       $06
0008E1E6 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008E1EA E10C                       	smpsAlterNote       $0C
0008E1EC BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008E1F0 E10B                       	smpsAlterNote       $0B
0008E1F2 BA02                       	dc.b	nA4, $02
0008E1F4 E10C                       	smpsAlterNote       $0C
0008E1F6 BB02                       	dc.b	nBb4, $02
0008E1F8 E10B                       	smpsAlterNote       $0B
0008E1FA BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008E204 E108                       	smpsAlterNote       $08
0008E206 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
0008E20E E107                       	smpsAlterNote       $07
0008E210 BE02                       	dc.b	nCs5, $02
0008E212 E10B                       	smpsAlterNote       $0B
0008E214 BA02                       	dc.b	nA4, $02
0008E216 E109                       	smpsAlterNote       $09
0008E218 B802 8001                  	dc.b	nG4, $02, nRst, $01
0008E21C E108                       	smpsAlterNote       $08
0008E21E B501 8001                  	dc.b	nE4, $01, nRst, $01
0008E222 E10B                       	smpsAlterNote       $0B
0008E224 AE02                       	dc.b	nA3, $02
0008E226 E10C                       	smpsAlterNote       $0C
0008E228 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
0008E234 E10B                       	smpsAlterNote       $0B
0008E236 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008E23E E107                       	smpsAlterNote       $07
0008E240 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008E244 E10B                       	smpsAlterNote       $0B
0008E246 A203                       	dc.b	nA2, $03
0008E248 E109                       	smpsAlterNote       $09
0008E24A AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008E24E E108                       	smpsAlterNote       $08
0008E250 A906 8001                  	dc.b	nE3, $06, nRst, $01
0008E254 E107                       	smpsAlterNote       $07
0008E256 A702 8001                  	dc.b	nD3, $02, nRst, $01
0008E25A E106                       	smpsAlterNote       $06
0008E25C A503                       	dc.b	nC3, $03
0008E25E E10C                       	smpsAlterNote       $0C
0008E260 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008E266 E107                       	smpsAlterNote       $07
0008E268 B20D                       	dc.b	nCs4, $0D
0008E26A E104                       	smpsAlterNote       $04
0008E26C E701                       	dc.b	smpsNoAttack, $01
0008E26E E100                       	smpsAlterNote       $00
0008E270 E701                       	dc.b	smpsNoAttack, $01
0008E272 E104                       	smpsAlterNote       $04
0008E274 E701                       	dc.b	smpsNoAttack, $01
0008E276 E10A                       	smpsAlterNote       $0A
0008E278 E701                       	dc.b	smpsNoAttack, $01
0008E27A E10B                       	smpsAlterNote       $0B
0008E27C E701                       	dc.b	smpsNoAttack, $01
0008E27E E107                       	smpsAlterNote       $07
0008E280 E701                       	dc.b	smpsNoAttack, $01
0008E282 E101                       	smpsAlterNote       $01
0008E284 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E288 E104                       	smpsAlterNote       $04
0008E28A E701                       	dc.b	smpsNoAttack, $01
0008E28C E10A                       	smpsAlterNote       $0A
0008E28E E701                       	dc.b	smpsNoAttack, $01
0008E290 E10B                       	smpsAlterNote       $0B
0008E292 8001                       	dc.b	nRst, $01
0008E294 E107                       	smpsAlterNote       $07
0008E296 B30D                       	dc.b	nD4, $0D
0008E298 E104                       	smpsAlterNote       $04
0008E29A E701                       	dc.b	smpsNoAttack, $01
0008E29C E100                       	smpsAlterNote       $00
0008E29E E701                       	dc.b	smpsNoAttack, $01
0008E2A0 E104                       	smpsAlterNote       $04
0008E2A2 E701                       	dc.b	smpsNoAttack, $01
0008E2A4 E10A                       	smpsAlterNote       $0A
0008E2A6 E701                       	dc.b	smpsNoAttack, $01
0008E2A8 E10B                       	smpsAlterNote       $0B
0008E2AA E701                       	dc.b	smpsNoAttack, $01
0008E2AC E107                       	smpsAlterNote       $07
0008E2AE E701                       	dc.b	smpsNoAttack, $01
0008E2B0 E101                       	smpsAlterNote       $01
0008E2B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2B6 E104                       	smpsAlterNote       $04
0008E2B8 E701                       	dc.b	smpsNoAttack, $01
0008E2BA E10A                       	smpsAlterNote       $0A
0008E2BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2C0 E104                       	smpsAlterNote       $04
0008E2C2 E701                       	dc.b	smpsNoAttack, $01
0008E2C4 E101                       	smpsAlterNote       $01
0008E2C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2CA E107                       	smpsAlterNote       $07
0008E2CC E701                       	dc.b	smpsNoAttack, $01
0008E2CE E10B                       	smpsAlterNote       $0B
0008E2D0 E701                       	dc.b	smpsNoAttack, $01
0008E2D2 E10A                       	smpsAlterNote       $0A
0008E2D4 E701                       	dc.b	smpsNoAttack, $01
0008E2D6 E107                       	smpsAlterNote       $07
0008E2D8 8001                       	dc.b	nRst, $01
0008E2DA E108                       	smpsAlterNote       $08
0008E2DC B50D                       	dc.b	nE4, $0D
0008E2DE E102                       	smpsAlterNote       $02
0008E2E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2E4 E105                       	smpsAlterNote       $05
0008E2E6 E701                       	dc.b	smpsNoAttack, $01
0008E2E8 E10B                       	smpsAlterNote       $0B
0008E2EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2EE E105                       	smpsAlterNote       $05
0008E2F0 E701                       	dc.b	smpsNoAttack, $01
0008E2F2 E102                       	smpsAlterNote       $02
0008E2F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2F8 E108                       	smpsAlterNote       $08
0008E2FA E701                       	dc.b	smpsNoAttack, $01
0008E2FC E10C                       	smpsAlterNote       $0C
0008E2FE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E302 E107                       	smpsAlterNote       $07
0008E304 B30D                       	dc.b	nD4, $0D
0008E306 E101                       	smpsAlterNote       $01
0008E308 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E30C E104                       	smpsAlterNote       $04
0008E30E E701                       	dc.b	smpsNoAttack, $01
0008E310 E10A                       	smpsAlterNote       $0A
0008E312 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E316 E104                       	smpsAlterNote       $04
0008E318 E701                       	dc.b	smpsNoAttack, $01
0008E31A E101                       	smpsAlterNote       $01
0008E31C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E320 E107                       	smpsAlterNote       $07
0008E322 E701                       	dc.b	smpsNoAttack, $01
0008E324 E10B                       	smpsAlterNote       $0B
0008E326 E701                       	dc.b	smpsNoAttack, $01
0008E328 E10A                       	smpsAlterNote       $0A
0008E32A E701                       	dc.b	smpsNoAttack, $01
0008E32C E104                       	smpsAlterNote       $04
0008E32E E701                       	dc.b	smpsNoAttack, $01
0008E330 E100                       	smpsAlterNote       $00
0008E332 E701                       	dc.b	smpsNoAttack, $01
0008E334 E104                       	smpsAlterNote       $04
0008E336 E701                       	dc.b	smpsNoAttack, $01
0008E338 E107                       	smpsAlterNote       $07
0008E33A E701                       	dc.b	smpsNoAttack, $01
0008E33C E10B                       	smpsAlterNote       $0B
0008E33E E701                       	dc.b	smpsNoAttack, $01
0008E340 E107                       	smpsAlterNote       $07
0008E342 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
0008E346 E101                       	smpsAlterNote       $01
0008E348 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E34C E107                       	smpsAlterNote       $07
0008E34E E701                       	dc.b	smpsNoAttack, $01
0008E350 E10A                       	smpsAlterNote       $0A
0008E352 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E356 E104                       	smpsAlterNote       $04
0008E358 E701                       	dc.b	smpsNoAttack, $01
0008E35A E100                       	smpsAlterNote       $00
0008E35C E701                       	dc.b	smpsNoAttack, $01
0008E35E E101                       	smpsAlterNote       $01
0008E360 E701                       	dc.b	smpsNoAttack, $01
0008E362 E107                       	smpsAlterNote       $07
0008E364 E701                       	dc.b	smpsNoAttack, $01
0008E366 E10B                       	smpsAlterNote       $0B
0008E368 E701                       	dc.b	smpsNoAttack, $01
0008E36A E107                       	smpsAlterNote       $07
0008E36C B30E                       	dc.b	nD4, $0E
0008E36E E101                       	smpsAlterNote       $01
0008E370 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E374 E107                       	smpsAlterNote       $07
0008E376 E701                       	dc.b	smpsNoAttack, $01
0008E378 E10A                       	smpsAlterNote       $0A
0008E37A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E37E E104                       	smpsAlterNote       $04
0008E380 E701                       	dc.b	smpsNoAttack, $01
0008E382 E100                       	smpsAlterNote       $00
0008E384 E701                       	dc.b	smpsNoAttack, $01
0008E386 E101                       	smpsAlterNote       $01
0008E388 E701                       	dc.b	smpsNoAttack, $01
0008E38A E107                       	smpsAlterNote       $07
0008E38C E701                       	dc.b	smpsNoAttack, $01
0008E38E E10B                       	smpsAlterNote       $0B
0008E390 E701                       	dc.b	smpsNoAttack, $01
0008E392 E107                       	smpsAlterNote       $07
0008E394 E701                       	dc.b	smpsNoAttack, $01
0008E396 E104                       	smpsAlterNote       $04
0008E398 E701                       	dc.b	smpsNoAttack, $01
0008E39A E100                       	smpsAlterNote       $00
0008E39C E701                       	dc.b	smpsNoAttack, $01
0008E39E E104                       	smpsAlterNote       $04
0008E3A0 E701                       	dc.b	smpsNoAttack, $01
0008E3A2 E10A                       	smpsAlterNote       $0A
0008E3A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3A8 E107                       	smpsAlterNote       $07
0008E3AA E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008E3AE E104                       	smpsAlterNote       $04
0008E3B0 E701                       	dc.b	smpsNoAttack, $01
0008E3B2 E100                       	smpsAlterNote       $00
0008E3B4 E701                       	dc.b	smpsNoAttack, $01
0008E3B6 E101                       	smpsAlterNote       $01
0008E3B8 E701                       	dc.b	smpsNoAttack, $01
0008E3BA E107                       	smpsAlterNote       $07
0008E3BC E701                       	dc.b	smpsNoAttack, $01
0008E3BE E10B                       	smpsAlterNote       $0B
0008E3C0 E701                       	dc.b	smpsNoAttack, $01
0008E3C2 E107                       	smpsAlterNote       $07
0008E3C4 E701                       	dc.b	smpsNoAttack, $01
0008E3C6 E104                       	smpsAlterNote       $04
0008E3C8 E701                       	dc.b	smpsNoAttack, $01
0008E3CA E100                       	smpsAlterNote       $00
0008E3CC E701                       	dc.b	smpsNoAttack, $01
0008E3CE E104                       	smpsAlterNote       $04
0008E3D0 E701                       	dc.b	smpsNoAttack, $01
0008E3D2 E10A                       	smpsAlterNote       $0A
0008E3D4 E701                       	dc.b	smpsNoAttack, $01
0008E3D6 E10B                       	smpsAlterNote       $0B
0008E3D8 E701                       	dc.b	smpsNoAttack, $01
0008E3DC E6FF                       	smpsAlterVol        $FF
0008E3DE A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008E3EA 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0008E3F2 E109                       	smpsAlterNote       $09
0008E3F4 E601                       	smpsAlterVol        $01
0008E3F6 B60D                       	dc.b	nF4, $0D
0008E3F8 E106                       	smpsAlterNote       $06
0008E3FA E701                       	dc.b	smpsNoAttack, $01
0008E3FC E102                       	smpsAlterNote       $02
0008E3FE E701                       	dc.b	smpsNoAttack, $01
0008E400 E106                       	smpsAlterNote       $06
0008E402 E701                       	dc.b	smpsNoAttack, $01
0008E404 E109                       	smpsAlterNote       $09
0008E406 E701                       	dc.b	smpsNoAttack, $01
0008E408 E10D                       	smpsAlterNote       $0D
0008E40A E701                       	dc.b	smpsNoAttack, $01
0008E40C E109                       	smpsAlterNote       $09
0008E40E E701                       	dc.b	smpsNoAttack, $01
0008E410 E103                       	smpsAlterNote       $03
0008E412 E701                       	dc.b	smpsNoAttack, $01
0008E414 E102                       	smpsAlterNote       $02
0008E416 E701                       	dc.b	smpsNoAttack, $01
0008E418 E106                       	smpsAlterNote       $06
0008E41A E701                       	dc.b	smpsNoAttack, $01
0008E41C E10C                       	smpsAlterNote       $0C
0008E41E E701                       	dc.b	smpsNoAttack, $01
0008E420 E10D                       	smpsAlterNote       $0D
0008E422 8001                       	dc.b	nRst, $01
0008E424 E109                       	smpsAlterNote       $09
0008E426 B80D                       	dc.b	nG4, $0D
0008E428 E106                       	smpsAlterNote       $06
0008E42A E701                       	dc.b	smpsNoAttack, $01
0008E42C E102                       	smpsAlterNote       $02
0008E42E E701                       	dc.b	smpsNoAttack, $01
0008E430 E106                       	smpsAlterNote       $06
0008E432 E701                       	dc.b	smpsNoAttack, $01
0008E434 E109                       	smpsAlterNote       $09
0008E436 E701                       	dc.b	smpsNoAttack, $01
0008E438 E10D                       	smpsAlterNote       $0D
0008E43A E701                       	dc.b	smpsNoAttack, $01
0008E43C E109                       	smpsAlterNote       $09
0008E43E E701                       	dc.b	smpsNoAttack, $01
0008E440 E103                       	smpsAlterNote       $03
0008E442 E701                       	dc.b	smpsNoAttack, $01
0008E444 E102                       	smpsAlterNote       $02
0008E446 E701                       	dc.b	smpsNoAttack, $01
0008E448 E106                       	smpsAlterNote       $06
0008E44A E701                       	dc.b	smpsNoAttack, $01
0008E44C E10C                       	smpsAlterNote       $0C
0008E44E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E452 E106                       	smpsAlterNote       $06
0008E454 E701                       	dc.b	smpsNoAttack, $01
0008E456 E103                       	smpsAlterNote       $03
0008E458 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E45C E109                       	smpsAlterNote       $09
0008E45E E701                       	dc.b	smpsNoAttack, $01
0008E460 E10D                       	smpsAlterNote       $0D
0008E462 E701                       	dc.b	smpsNoAttack, $01
0008E464 E10C                       	smpsAlterNote       $0C
0008E466 E701                       	dc.b	smpsNoAttack, $01
0008E468 E109                       	smpsAlterNote       $09
0008E46A 8001                       	dc.b	nRst, $01
0008E46C E10B                       	smpsAlterNote       $0B
0008E46E BA0D                       	dc.b	nA4, $0D
0008E470 E105                       	smpsAlterNote       $05
0008E472 E701                       	dc.b	smpsNoAttack, $01
0008E474 E104                       	smpsAlterNote       $04
0008E476 E701                       	dc.b	smpsNoAttack, $01
0008E478 E108                       	smpsAlterNote       $08
0008E47A E701                       	dc.b	smpsNoAttack, $01
0008E47C E10E                       	smpsAlterNote       $0E
0008E47E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E482 E10B                       	smpsAlterNote       $0B
0008E484 E701                       	dc.b	smpsNoAttack, $01
0008E486 E105                       	smpsAlterNote       $05
0008E488 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E48C E10B                       	smpsAlterNote       $0B
0008E48E E701                       	dc.b	smpsNoAttack, $01
0008E490 E10E                       	smpsAlterNote       $0E
0008E492 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E496 E108                       	smpsAlterNote       $08
0008E498 E701                       	dc.b	smpsNoAttack, $01
0008E49A E104                       	smpsAlterNote       $04
0008E49C E701                       	dc.b	smpsNoAttack, $01
0008E49E E105                       	smpsAlterNote       $05
0008E4A0 E701                       	dc.b	smpsNoAttack, $01
0008E4A2 E10B                       	smpsAlterNote       $0B
0008E4A4 E701                       	dc.b	smpsNoAttack, $01
0008E4A6 E10F                       	smpsAlterNote       $0F
0008E4A8 E701                       	dc.b	smpsNoAttack, $01
0008E4AA E10B                       	smpsAlterNote       $0B
0008E4AC E701                       	dc.b	smpsNoAttack, $01
0008E4AE E108                       	smpsAlterNote       $08
0008E4B0 E701                       	dc.b	smpsNoAttack, $01
0008E4B2 E104                       	smpsAlterNote       $04
0008E4B4 E701                       	dc.b	smpsNoAttack, $01
0008E4B6 E108                       	smpsAlterNote       $08
0008E4B8 E701                       	dc.b	smpsNoAttack, $01
0008E4BA E10E                       	smpsAlterNote       $0E
0008E4BC E701                       	dc.b	smpsNoAttack, $01
0008E4BE E10F                       	smpsAlterNote       $0F
0008E4C0 E701                       	dc.b	smpsNoAttack, $01
0008E4C2 E10B                       	smpsAlterNote       $0B
0008E4C4 E701                       	dc.b	smpsNoAttack, $01
0008E4C6 E105                       	smpsAlterNote       $05
0008E4C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E4CC E108                       	smpsAlterNote       $08
0008E4CE E701                       	dc.b	smpsNoAttack, $01
0008E4D0 E10E                       	smpsAlterNote       $0E
0008E4D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E4D6 E108                       	smpsAlterNote       $08
0008E4D8 E701                       	dc.b	smpsNoAttack, $01
0008E4DA E105                       	smpsAlterNote       $05
0008E4DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E4E0 E108                       	smpsAlterNote       $08
0008E4E2 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
0008E4E6 E109                       	smpsAlterNote       $09
0008E4E8 B60D                       	dc.b	nF4, $0D
0008E4EA E103                       	smpsAlterNote       $03
0008E4EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E4F0 E106                       	smpsAlterNote       $06
0008E4F2 E701                       	dc.b	smpsNoAttack, $01
0008E4F4 E10C                       	smpsAlterNote       $0C
0008E4F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E4FA E106                       	smpsAlterNote       $06
0008E4FC E701                       	dc.b	smpsNoAttack, $01
0008E4FE E103                       	smpsAlterNote       $03
0008E500 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E504 E109                       	smpsAlterNote       $09
0008E506 E701                       	dc.b	smpsNoAttack, $01
0008E508 E10D                       	smpsAlterNote       $0D
0008E50A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E50E E109                       	smpsAlterNote       $09
0008E510 B80D                       	dc.b	nG4, $0D
0008E512 E103                       	smpsAlterNote       $03
0008E514 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E518 E109                       	smpsAlterNote       $09
0008E51A E701                       	dc.b	smpsNoAttack, $01
0008E51C E10C                       	smpsAlterNote       $0C
0008E51E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E522 E106                       	smpsAlterNote       $06
0008E524 E701                       	dc.b	smpsNoAttack, $01
0008E526 E102                       	smpsAlterNote       $02
0008E528 E701                       	dc.b	smpsNoAttack, $01
0008E52A E103                       	smpsAlterNote       $03
0008E52C E701                       	dc.b	smpsNoAttack, $01
0008E52E E109                       	smpsAlterNote       $09
0008E530 E701                       	dc.b	smpsNoAttack, $01
0008E532 E10D                       	smpsAlterNote       $0D
0008E534 E701                       	dc.b	smpsNoAttack, $01
0008E536 E109                       	smpsAlterNote       $09
0008E538 E701                       	dc.b	smpsNoAttack, $01
0008E53A E106                       	smpsAlterNote       $06
0008E53C E701                       	dc.b	smpsNoAttack, $01
0008E53E E102                       	smpsAlterNote       $02
0008E540 E701                       	dc.b	smpsNoAttack, $01
0008E542 E106                       	smpsAlterNote       $06
0008E544 E701                       	dc.b	smpsNoAttack, $01
0008E546 E10C                       	smpsAlterNote       $0C
0008E548 E701                       	dc.b	smpsNoAttack, $01
0008E54A E10D                       	smpsAlterNote       $0D
0008E54C E701                       	dc.b	smpsNoAttack, $01
0008E54E E109                       	smpsAlterNote       $09
0008E550 E701                       	dc.b	smpsNoAttack, $01
0008E552 E10B                       	smpsAlterNote       $0B
0008E554 BA0D                       	dc.b	nA4, $0D
0008E556 E108                       	smpsAlterNote       $08
0008E558 E701                       	dc.b	smpsNoAttack, $01
0008E55A E105                       	smpsAlterNote       $05
0008E55C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E560 E10B                       	smpsAlterNote       $0B
0008E562 E701                       	dc.b	smpsNoAttack, $01
0008E564 E10F                       	smpsAlterNote       $0F
0008E566 E701                       	dc.b	smpsNoAttack, $01
0008E568 E10E                       	smpsAlterNote       $0E
0008E56A E701                       	dc.b	smpsNoAttack, $01
0008E56C E108                       	smpsAlterNote       $08
0008E56E E701                       	dc.b	smpsNoAttack, $01
0008E570 E104                       	smpsAlterNote       $04
0008E572 E701                       	dc.b	smpsNoAttack, $01
0008E574 E108                       	smpsAlterNote       $08
0008E576 E701                       	dc.b	smpsNoAttack, $01
0008E578 E10B                       	smpsAlterNote       $0B
0008E57A E701                       	dc.b	smpsNoAttack, $01
0008E57C E10F                       	smpsAlterNote       $0F
0008E57E E701                       	dc.b	smpsNoAttack, $01
0008E580 E10B                       	smpsAlterNote       $0B
0008E582 E701                       	dc.b	smpsNoAttack, $01
0008E584 E105                       	smpsAlterNote       $05
0008E586 E701                       	dc.b	smpsNoAttack, $01
0008E588 E104                       	smpsAlterNote       $04
0008E58A E701                       	dc.b	smpsNoAttack, $01
0008E58C E108                       	smpsAlterNote       $08
0008E58E E701                       	dc.b	smpsNoAttack, $01
0008E590 E10E                       	smpsAlterNote       $0E
0008E592 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E596 E10B                       	smpsAlterNote       $0B
0008E598 E701                       	dc.b	smpsNoAttack, $01
0008E59A E105                       	smpsAlterNote       $05
0008E59C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5A0 E10B                       	smpsAlterNote       $0B
0008E5A2 E701                       	dc.b	smpsNoAttack, $01
0008E5A4 E10E                       	smpsAlterNote       $0E
0008E5A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5AA E108                       	smpsAlterNote       $08
0008E5AC E701                       	dc.b	smpsNoAttack, $01
0008E5AE E105                       	smpsAlterNote       $05
0008E5B0 8001                       	dc.b	nRst, $01
0008E5B2 E109                       	smpsAlterNote       $09
0008E5B4 B60A                       	dc.b	nF4, $0A
0008E5B6 E108                       	smpsAlterNote       $08
0008E5B8 B507                       	dc.b	nE4, $07
0008E5BA E107                       	smpsAlterNote       $07
0008E5BC B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008E5C0 E108                       	smpsAlterNote       $08
0008E5C2 B503                       	dc.b	nE4, $03
0008E5C4 E109                       	smpsAlterNote       $09
0008E5C6 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0008E5CE E10B                       	smpsAlterNote       $0B
0008E5D0 BA0D                       	dc.b	nA4, $0D
0008E5D2 E108                       	smpsAlterNote       $08
0008E5D4 E701                       	dc.b	smpsNoAttack, $01
0008E5D6 E104                       	smpsAlterNote       $04
0008E5D8 E701                       	dc.b	smpsNoAttack, $01
0008E5DA E108                       	smpsAlterNote       $08
0008E5DC E701                       	dc.b	smpsNoAttack, $01
0008E5DE E10B                       	smpsAlterNote       $0B
0008E5E0 E701                       	dc.b	smpsNoAttack, $01
0008E5E2 E10F                       	smpsAlterNote       $0F
0008E5E4 E701                       	dc.b	smpsNoAttack, $01
0008E5E6 E10B                       	smpsAlterNote       $0B
0008E5E8 E701                       	dc.b	smpsNoAttack, $01
0008E5EA E105                       	smpsAlterNote       $05
0008E5EC E701                       	dc.b	smpsNoAttack, $01
0008E5EE E104                       	smpsAlterNote       $04
0008E5F0 E701                       	dc.b	smpsNoAttack, $01
0008E5F2 E108                       	smpsAlterNote       $08
0008E5F4 E701                       	dc.b	smpsNoAttack, $01
0008E5F6 E10E                       	smpsAlterNote       $0E
0008E5F8 E701                       	dc.b	smpsNoAttack, $01
0008E5FA E10F                       	smpsAlterNote       $0F
0008E5FC 8001                       	dc.b	nRst, $01
0008E5FE E109                       	smpsAlterNote       $09
0008E600 C20D                       	dc.b	nF5, $0D
0008E602 E106                       	smpsAlterNote       $06
0008E604 E701                       	dc.b	smpsNoAttack, $01
0008E606 E102                       	smpsAlterNote       $02
0008E608 E701                       	dc.b	smpsNoAttack, $01
0008E60A E106                       	smpsAlterNote       $06
0008E60C E701                       	dc.b	smpsNoAttack, $01
0008E60E E109                       	smpsAlterNote       $09
0008E610 E701                       	dc.b	smpsNoAttack, $01
0008E612 E10D                       	smpsAlterNote       $0D
0008E614 E701                       	dc.b	smpsNoAttack, $01
0008E616 E109                       	smpsAlterNote       $09
0008E618 E701                       	dc.b	smpsNoAttack, $01
0008E61A E103                       	smpsAlterNote       $03
0008E61C E701                       	dc.b	smpsNoAttack, $01
0008E61E E102                       	smpsAlterNote       $02
0008E620 E701                       	dc.b	smpsNoAttack, $01
0008E622 E106                       	smpsAlterNote       $06
0008E624 E701                       	dc.b	smpsNoAttack, $01
0008E626 E10C                       	smpsAlterNote       $0C
0008E628 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E62C E109                       	smpsAlterNote       $09
0008E62E E701                       	dc.b	smpsNoAttack, $01
0008E630 E103                       	smpsAlterNote       $03
0008E632 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E636 E109                       	smpsAlterNote       $09
0008E638 E701                       	dc.b	smpsNoAttack, $01
0008E63A E10C                       	smpsAlterNote       $0C
0008E63C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E640 E106                       	smpsAlterNote       $06
0008E642 E701                       	dc.b	smpsNoAttack, $01
0008E644 E102                       	smpsAlterNote       $02
0008E646 E701                       	dc.b	smpsNoAttack, $01
0008E648 E103                       	smpsAlterNote       $03
0008E64A E701                       	dc.b	smpsNoAttack, $01
0008E64C E109                       	smpsAlterNote       $09
0008E64E E701                       	dc.b	smpsNoAttack, $01
0008E650 E10D                       	smpsAlterNote       $0D
0008E652 E701                       	dc.b	smpsNoAttack, $01
0008E654 E109                       	smpsAlterNote       $09
0008E656 E701                       	dc.b	smpsNoAttack, $01
0008E658 E106                       	smpsAlterNote       $06
0008E65A E701                       	dc.b	smpsNoAttack, $01
0008E65C E102                       	smpsAlterNote       $02
0008E65E E701                       	dc.b	smpsNoAttack, $01
0008E660 E106                       	smpsAlterNote       $06
0008E662 E701                       	dc.b	smpsNoAttack, $01
0008E664 E10C                       	smpsAlterNote       $0C
0008E666 E701                       	dc.b	smpsNoAttack, $01
0008E668 E10D                       	smpsAlterNote       $0D
0008E66A E701                       	dc.b	smpsNoAttack, $01
0008E66C E109                       	smpsAlterNote       $09
0008E66E E701                       	dc.b	smpsNoAttack, $01
0008E670 E103                       	smpsAlterNote       $03
0008E672 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E676 E106                       	smpsAlterNote       $06
0008E678 E701                       	dc.b	smpsNoAttack, $01
0008E67A E10C                       	smpsAlterNote       $0C
0008E67C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E680 E106                       	smpsAlterNote       $06
0008E682 E701                       	dc.b	smpsNoAttack, $01
0008E684 E103                       	smpsAlterNote       $03
0008E686 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E68A E109                       	smpsAlterNote       $09
0008E68C E701                       	dc.b	smpsNoAttack, $01
0008E68E E10D                       	smpsAlterNote       $0D
0008E690 E701                       	dc.b	smpsNoAttack, $01
0008E692 E10C                       	smpsAlterNote       $0C
0008E694 E701                       	dc.b	smpsNoAttack, $01
0008E696 E106                       	smpsAlterNote       $06
0008E698 E701                       	dc.b	smpsNoAttack, $01
0008E69A E103                       	smpsAlterNote       $03
0008E69C 8001                       	dc.b	nRst, $01
0008E69E E109                       	smpsAlterNote       $09
0008E6A0 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008E6A6 E10C                       	smpsAlterNote       $0C
0008E6A8 E601                       	smpsAlterVol        $01
0008E6AA BB0D                       	dc.b	nBb4, $0D
0008E6AC E106                       	smpsAlterNote       $06
0008E6AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E6B2 E109                       	smpsAlterNote       $09
0008E6B4 E701                       	dc.b	smpsNoAttack, $01
0008E6B6 E10F                       	smpsAlterNote       $0F
0008E6B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E6BC E109                       	smpsAlterNote       $09
0008E6BE E701                       	dc.b	smpsNoAttack, $01
0008E6C0 E106                       	smpsAlterNote       $06
0008E6C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E6C6 E10C                       	smpsAlterNote       $0C
0008E6C8 E701                       	dc.b	smpsNoAttack, $01
0008E6CA E110                       	smpsAlterNote       $10
0008E6CC E701                       	dc.b	smpsNoAttack, $01
0008E6CE E10F                       	smpsAlterNote       $0F
0008E6D0 E701                       	dc.b	smpsNoAttack, $01
0008E6D2 E109                       	smpsAlterNote       $09
0008E6D4 E701                       	dc.b	smpsNoAttack, $01
0008E6D6 E105                       	smpsAlterNote       $05
0008E6D8 E701                       	dc.b	smpsNoAttack, $01
0008E6DA E106                       	smpsAlterNote       $06
0008E6DC 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008E6E0 E103                       	smpsAlterNote       $03
0008E6E2 E701                       	dc.b	smpsNoAttack, $01
0008E6E4 E1FF                       	smpsAlterNote       $FF
0008E6E6 E701                       	dc.b	smpsNoAttack, $01
0008E6E8 E103                       	smpsAlterNote       $03
0008E6EA E701                       	dc.b	smpsNoAttack, $01
0008E6EC E106                       	smpsAlterNote       $06
0008E6EE E701                       	dc.b	smpsNoAttack, $01
0008E6F0 E10A                       	smpsAlterNote       $0A
0008E6F2 E701                       	dc.b	smpsNoAttack, $01
0008E6F4 E106                       	smpsAlterNote       $06
0008E6F6 E701                       	dc.b	smpsNoAttack, $01
0008E6F8 E100                       	smpsAlterNote       $00
0008E6FA E701                       	dc.b	smpsNoAttack, $01
0008E6FC E1FF                       	smpsAlterNote       $FF
0008E6FE E701                       	dc.b	smpsNoAttack, $01
0008E700 E103                       	smpsAlterNote       $03
0008E702 E701                       	dc.b	smpsNoAttack, $01
0008E704 E109                       	smpsAlterNote       $09
0008E706 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E70A E106                       	smpsAlterNote       $06
0008E70C E701                       	dc.b	smpsNoAttack, $01
0008E70E E100                       	smpsAlterNote       $00
0008E710 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E714 E107                       	smpsAlterNote       $07
0008E716 BF0E                       	dc.b	nD5, $0E
0008E718 E101                       	smpsAlterNote       $01
0008E71A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E71E E107                       	smpsAlterNote       $07
0008E720 E701                       	dc.b	smpsNoAttack, $01
0008E722 E10A                       	smpsAlterNote       $0A
0008E724 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E728 E104                       	smpsAlterNote       $04
0008E72A E701                       	dc.b	smpsNoAttack, $01
0008E72C E100                       	smpsAlterNote       $00
0008E72E E701                       	dc.b	smpsNoAttack, $01
0008E730 E101                       	smpsAlterNote       $01
0008E732 E701                       	dc.b	smpsNoAttack, $01
0008E734 E107                       	smpsAlterNote       $07
0008E736 E701                       	dc.b	smpsNoAttack, $01
0008E738 E10B                       	smpsAlterNote       $0B
0008E73A E701                       	dc.b	smpsNoAttack, $01
0008E73C E107                       	smpsAlterNote       $07
0008E73E E701                       	dc.b	smpsNoAttack, $01
0008E740 E104                       	smpsAlterNote       $04
0008E742 E701                       	dc.b	smpsNoAttack, $01
0008E744 E100                       	smpsAlterNote       $00
0008E746 E701                       	dc.b	smpsNoAttack, $01
0008E748 E101                       	smpsAlterNote       $01
0008E74A 8001                       	dc.b	nRst, $01
0008E74C E108                       	smpsAlterNote       $08
0008E74E C10C                       	dc.b	nE5, $0C
0008E750 E109                       	smpsAlterNote       $09
0008E752 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008E756 E10A                       	smpsAlterNote       $0A
0008E758 8001                       	dc.b	nRst, $01
0008E75A E109                       	smpsAlterNote       $09
0008E75C C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008E760 E106                       	smpsAlterNote       $06
0008E762 E701                       	dc.b	smpsNoAttack, $01
0008E764 E102                       	smpsAlterNote       $02
0008E766 E701                       	dc.b	smpsNoAttack, $01
0008E768 E103                       	smpsAlterNote       $03
0008E76A E701                       	dc.b	smpsNoAttack, $01
0008E76C E109                       	smpsAlterNote       $09
0008E76E E701                       	dc.b	smpsNoAttack, $01
0008E770 E10D                       	smpsAlterNote       $0D
0008E772 E701                       	dc.b	smpsNoAttack, $01
0008E774 E109                       	smpsAlterNote       $09
0008E776 E701                       	dc.b	smpsNoAttack, $01
0008E778 E106                       	smpsAlterNote       $06
0008E77A E701                       	dc.b	smpsNoAttack, $01
0008E77C E102                       	smpsAlterNote       $02
0008E77E E701                       	dc.b	smpsNoAttack, $01
0008E780 E106                       	smpsAlterNote       $06
0008E782 E701                       	dc.b	smpsNoAttack, $01
0008E784 E10C                       	smpsAlterNote       $0C
0008E786 E701                       	dc.b	smpsNoAttack, $01
0008E788 E10D                       	smpsAlterNote       $0D
0008E78A E701                       	dc.b	smpsNoAttack, $01
0008E78C E109                       	smpsAlterNote       $09
0008E78E C40D                       	dc.b	nG5, $0D
0008E790 E106                       	smpsAlterNote       $06
0008E792 E701                       	dc.b	smpsNoAttack, $01
0008E794 E102                       	smpsAlterNote       $02
0008E796 E701                       	dc.b	smpsNoAttack, $01
0008E798 E103                       	smpsAlterNote       $03
0008E79A E701                       	dc.b	smpsNoAttack, $01
0008E79C E109                       	smpsAlterNote       $09
0008E79E E701                       	dc.b	smpsNoAttack, $01
0008E7A0 E108                       	smpsAlterNote       $08
0008E7A2 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0008E7AE E109                       	smpsAlterNote       $09
0008E7B0 C20D                       	dc.b	nF5, $0D
0008E7B2 E106                       	smpsAlterNote       $06
0008E7B4 E701                       	dc.b	smpsNoAttack, $01
0008E7B6 E102                       	smpsAlterNote       $02
0008E7B8 E701                       	dc.b	smpsNoAttack, $01
0008E7BA E106                       	smpsAlterNote       $06
0008E7BC E701                       	dc.b	smpsNoAttack, $01
0008E7BE E109                       	smpsAlterNote       $09
0008E7C0 E701                       	dc.b	smpsNoAttack, $01
0008E7C2 E10D                       	smpsAlterNote       $0D
0008E7C4 E701                       	dc.b	smpsNoAttack, $01
0008E7C6 E109                       	smpsAlterNote       $09
0008E7C8 E701                       	dc.b	smpsNoAttack, $01
0008E7CA E103                       	smpsAlterNote       $03
0008E7CC E701                       	dc.b	smpsNoAttack, $01
0008E7CE E102                       	smpsAlterNote       $02
0008E7D0 E701                       	dc.b	smpsNoAttack, $01
0008E7D2 E106                       	smpsAlterNote       $06
0008E7D4 E701                       	dc.b	smpsNoAttack, $01
0008E7D6 E10C                       	smpsAlterNote       $0C
0008E7D8 E701                       	dc.b	smpsNoAttack, $01
0008E7DA E10D                       	smpsAlterNote       $0D
0008E7DC 8001                       	dc.b	nRst, $01
0008E7DE E112                       	smpsAlterNote       $12
0008E7E0 C401                       	dc.b	nG5, $01
0008E7E2 E1EB                       	smpsAlterNote       $EB
0008E7E4 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008E7E7 E1FD                       	smpsAlterNote       $FD
0008E7E9 E701                       	dc.b	smpsNoAttack, $01
0008E7EB E10F                       	smpsAlterNote       $0F
0008E7ED E701                       	dc.b	smpsNoAttack, $01
0008E7EF E118                       	smpsAlterNote       $18
0008E7F1 E701                       	dc.b	smpsNoAttack, $01
0008E7F3 E1ED                       	smpsAlterNote       $ED
0008E7F5 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008E7F8 E1FF                       	smpsAlterNote       $FF
0008E7FA E701                       	dc.b	smpsNoAttack, $01
0008E7FC E10B                       	smpsAlterNote       $0B
0008E7FE E703                       	dc.b	smpsNoAttack, $03
0008E800 E109                       	smpsAlterNote       $09
0008E802 C407                       	dc.b	nG5, $07
0008E804 E108                       	smpsAlterNote       $08
0008E806 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
0008E812 E109                       	smpsAlterNote       $09
0008E814 C20D                       	dc.b	nF5, $0D
0008E816 E103                       	smpsAlterNote       $03
0008E818 E701                       	dc.b	smpsNoAttack, $01
0008E81A E102                       	smpsAlterNote       $02
0008E81C E701                       	dc.b	smpsNoAttack, $01
0008E81E E106                       	smpsAlterNote       $06
0008E820 E701                       	dc.b	smpsNoAttack, $01
0008E822 E10C                       	smpsAlterNote       $0C
0008E824 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E828 E109                       	smpsAlterNote       $09
0008E82A E701                       	dc.b	smpsNoAttack, $01
0008E82C E103                       	smpsAlterNote       $03
0008E82E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E832 E109                       	smpsAlterNote       $09
0008E834 E701                       	dc.b	smpsNoAttack, $01
0008E836 E10C                       	smpsAlterNote       $0C
0008E838 E701                       	dc.b	smpsNoAttack, $01
0008E83A E10D                       	smpsAlterNote       $0D
0008E83C 8001                       	dc.b	nRst, $01
0008E83E E10B                       	smpsAlterNote       $0B
0008E840 C609 8001                  	dc.b	nA5, $09, nRst, $01
0008E844 E109                       	smpsAlterNote       $09
0008E846 B806 8001                  	dc.b	nG4, $06, nRst, $01
0008E84A E108                       	smpsAlterNote       $08
0008E84C C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008E858 8001                       	dc.b	nRst, $01
0008E85A E109                       	smpsAlterNote       $09
0008E85C C20D                       	dc.b	nF5, $0D
0008E85E E103                       	smpsAlterNote       $03
0008E860 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E864 E106                       	smpsAlterNote       $06
0008E866 E701                       	dc.b	smpsNoAttack, $01
0008E868 E10C                       	smpsAlterNote       $0C
0008E86A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E86E E106                       	smpsAlterNote       $06
0008E870 E701                       	dc.b	smpsNoAttack, $01
0008E872 E103                       	smpsAlterNote       $03
0008E874 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E878 E109                       	smpsAlterNote       $09
0008E87A E701                       	dc.b	smpsNoAttack, $01
0008E87C E10D                       	smpsAlterNote       $0D
0008E87E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E884 E108                       	smpsAlterNote       $08
0008E886 E6FF                       	smpsAlterVol        $FF
0008E888 A806                       	dc.b	nEb3, $06
0008E88A E10C                       	smpsAlterNote       $0C
0008E88C A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008E890 E108                       	smpsAlterNote       $08
0008E892 A803                       	dc.b	nEb3, $03
0008E894 E109                       	smpsAlterNote       $09
0008E896 AC03 8001                  	dc.b	nG3, $03, nRst, $01
0008E89A E10C                       	smpsAlterNote       $0C
0008E89C AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
0008E8A6 E109                       	smpsAlterNote       $09
0008E8A8 E602                       	smpsAlterVol        $02
0008E8AA B604                       	dc.b	nF4, $04
0008E8AC E602                       	smpsAlterVol        $02
0008E8AE F6F1 AA                    	smpsJump            music84_Jump02
0008E8B1                            
0008E8B1                            ; FM4 Data
0008E8B1                            music84_FM4:
0008E8B3 E040                       	smpsPan             panRight, $00
0008E8B5 8003                       	dc.b	nRst, $03
0008E8B7 E10F                       	smpsAlterNote       $0F
0008E8B9 C603 8008                  	dc.b	nA5, $03, nRst, $08
0008E8BD E10D                       	smpsAlterNote       $0D
0008E8BF C403 800A                  	dc.b	nG5, $03, nRst, $0A
0008E8C3 E10C                       	smpsAlterNote       $0C
0008E8C5 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008E8CB E6FE                       	smpsAlterVol        $FE
0008E8CD E110                       	smpsAlterNote       $10
0008E8CF C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008E8D3 E10F                       	smpsAlterNote       $0F
0008E8D5 C602 8001                  	dc.b	nA5, $02, nRst, $01
0008E8D9 E10D                       	smpsAlterNote       $0D
0008E8DB C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
0008E8E4 E10C                       	smpsAlterNote       $0C
0008E8E6 C103                       	dc.b	nE5, $03
0008E8E8 E10A                       	smpsAlterNote       $0A
0008E8EA BD03 8001                  	dc.b	nC5, $03, nRst, $01
0008E8F0 03                         	dc.b	$03
0008E8F1                            
0008E8F1                            music84_Jump01:
0008E8F1 E10B                       	smpsAlterNote       $0B
0008E8F3 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008E8F7 E10C                       	smpsAlterNote       $0C
0008E8F9 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008E8FD E10D                       	smpsAlterNote       $0D
0008E8FF C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008E909 E10B                       	smpsAlterNote       $0B
0008E90B BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008E90F E107                       	smpsAlterNote       $07
0008E911 E701                       	dc.b	smpsNoAttack, $01
0008E913 E103                       	smpsAlterNote       $03
0008E915 E701                       	dc.b	smpsNoAttack, $01
0008E917 E104                       	smpsAlterNote       $04
0008E919 E701                       	dc.b	smpsNoAttack, $01
0008E91B E10A                       	smpsAlterNote       $0A
0008E91D E701                       	dc.b	smpsNoAttack, $01
0008E91F E10E                       	smpsAlterNote       $0E
0008E921 E701                       	dc.b	smpsNoAttack, $01
0008E923 E10A                       	smpsAlterNote       $0A
0008E925 E701                       	dc.b	smpsNoAttack, $01
0008E927 E107                       	smpsAlterNote       $07
0008E929 E701                       	dc.b	smpsNoAttack, $01
0008E92B E104                       	smpsAlterNote       $04
0008E92D 8001                       	dc.b	nRst, $01
0008E92F E110                       	smpsAlterNote       $10
0008E931 C703                       	dc.b	nBb5, $03
0008E933 E10F                       	smpsAlterNote       $0F
0008E935 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008E939 E10D                       	smpsAlterNote       $0D
0008E93B C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0008E941 E10C                       	smpsAlterNote       $0C
0008E943 E701                       	dc.b	smpsNoAttack, $01
0008E945 E108                       	smpsAlterNote       $08
0008E947 E701                       	dc.b	smpsNoAttack, $01
0008E949 E10C                       	smpsAlterNote       $0C
0008E94B E701                       	dc.b	smpsNoAttack, $01
0008E94D E10F                       	smpsAlterNote       $0F
0008E94F E701                       	dc.b	smpsNoAttack, $01
0008E951 E113                       	smpsAlterNote       $13
0008E953 E701                       	dc.b	smpsNoAttack, $01
0008E955 E10F                       	smpsAlterNote       $0F
0008E957 E701                       	dc.b	smpsNoAttack, $01
0008E959 E109                       	smpsAlterNote       $09
0008E95B E701                       	dc.b	smpsNoAttack, $01
0008E95D E108                       	smpsAlterNote       $08
0008E95F E701                       	dc.b	smpsNoAttack, $01
0008E961 E10C                       	smpsAlterNote       $0C
0008E963 E701                       	dc.b	smpsNoAttack, $01
0008E965 E112                       	smpsAlterNote       $12
0008E967 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E96B E10C                       	smpsAlterNote       $0C
0008E96D E701                       	dc.b	smpsNoAttack, $01
0008E96F E109                       	smpsAlterNote       $09
0008E971 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E975 E10F                       	smpsAlterNote       $0F
0008E977 E701                       	dc.b	smpsNoAttack, $01
0008E979 E113                       	smpsAlterNote       $13
0008E97B E701                       	dc.b	smpsNoAttack, $01
0008E97D E112                       	smpsAlterNote       $12
0008E97F E701                       	dc.b	smpsNoAttack, $01
0008E981 E10C                       	smpsAlterNote       $0C
0008E983 E701                       	dc.b	smpsNoAttack, $01
0008E985 E108                       	smpsAlterNote       $08
0008E987 E701                       	dc.b	smpsNoAttack, $01
0008E989 E10C                       	smpsAlterNote       $0C
0008E98B E701                       	dc.b	smpsNoAttack, $01
0008E98D E10F                       	smpsAlterNote       $0F
0008E98F E701                       	dc.b	smpsNoAttack, $01
0008E991 E113                       	smpsAlterNote       $13
0008E993 E701                       	dc.b	smpsNoAttack, $01
0008E995 E10F                       	smpsAlterNote       $0F
0008E997 E701                       	dc.b	smpsNoAttack, $01
0008E999 E109                       	smpsAlterNote       $09
0008E99B E701                       	dc.b	smpsNoAttack, $01
0008E99D E108                       	smpsAlterNote       $08
0008E99F E701                       	dc.b	smpsNoAttack, $01
0008E9A1 E10C                       	smpsAlterNote       $0C
0008E9A3 E701                       	dc.b	smpsNoAttack, $01
0008E9A5 E112                       	smpsAlterNote       $12
0008E9A7 E701                       	dc.b	smpsNoAttack, $01
0008E9A9 E113                       	smpsAlterNote       $13
0008E9AB 800F                       	dc.b	nRst, $0F
0008E9AD E10B                       	smpsAlterNote       $0B
0008E9AF BF03                       	dc.b	nD5, $03
0008E9B1 E10C                       	smpsAlterNote       $0C
0008E9B3 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008E9B7 E10D                       	smpsAlterNote       $0D
0008E9B9 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0008E9C1 E10B                       	smpsAlterNote       $0B
0008E9C3 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0008E9CD E110                       	smpsAlterNote       $10
0008E9CF C704                       	dc.b	nBb5, $04
0008E9D1 E10F                       	smpsAlterNote       $0F
0008E9D3 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008E9D7 E10D                       	smpsAlterNote       $0D
0008E9D9 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008E9DF E109                       	smpsAlterNote       $09
0008E9E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9E5 E10F                       	smpsAlterNote       $0F
0008E9E7 E701                       	dc.b	smpsNoAttack, $01
0008E9E9 E112                       	smpsAlterNote       $12
0008E9EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9EF E10C                       	smpsAlterNote       $0C
0008E9F1 E701                       	dc.b	smpsNoAttack, $01
0008E9F3 E108                       	smpsAlterNote       $08
0008E9F5 E701                       	dc.b	smpsNoAttack, $01
0008E9F7 E109                       	smpsAlterNote       $09
0008E9F9 E701                       	dc.b	smpsNoAttack, $01
0008E9FB E10F                       	smpsAlterNote       $0F
0008E9FD E701                       	dc.b	smpsNoAttack, $01
0008E9FF E113                       	smpsAlterNote       $13
0008EA01 E701                       	dc.b	smpsNoAttack, $01
0008EA03 E10F                       	smpsAlterNote       $0F
0008EA05 E701                       	dc.b	smpsNoAttack, $01
0008EA07 E10C                       	smpsAlterNote       $0C
0008EA09 E701                       	dc.b	smpsNoAttack, $01
0008EA0B E108                       	smpsAlterNote       $08
0008EA0D E701                       	dc.b	smpsNoAttack, $01
0008EA0F E10C                       	smpsAlterNote       $0C
0008EA11 E701                       	dc.b	smpsNoAttack, $01
0008EA13 E112                       	smpsAlterNote       $12
0008EA15 E701                       	dc.b	smpsNoAttack, $01
0008EA17 E113                       	smpsAlterNote       $13
0008EA19 E701                       	dc.b	smpsNoAttack, $01
0008EA1B E10F                       	smpsAlterNote       $0F
0008EA1D E701                       	dc.b	smpsNoAttack, $01
0008EA1F E109                       	smpsAlterNote       $09
0008EA21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA25 E10C                       	smpsAlterNote       $0C
0008EA27 E701                       	dc.b	smpsNoAttack, $01
0008EA29 E112                       	smpsAlterNote       $12
0008EA2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA2F E10C                       	smpsAlterNote       $0C
0008EA31 E701                       	dc.b	smpsNoAttack, $01
0008EA33 E109                       	smpsAlterNote       $09
0008EA35 E701                       	dc.b	smpsNoAttack, $01
0008EA37 E10D                       	smpsAlterNote       $0D
0008EA39 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008EA3D E10F                       	smpsAlterNote       $0F
0008EA3F C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
0008EA49 E10D                       	smpsAlterNote       $0D
0008EA4B C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008EA51 E10B                       	smpsAlterNote       $0B
0008EA53 BF0D                       	dc.b	nD5, $0D
0008EA55 E108                       	smpsAlterNote       $08
0008EA57 E701                       	dc.b	smpsNoAttack, $01
0008EA59 E104                       	smpsAlterNote       $04
0008EA5B E701                       	dc.b	smpsNoAttack, $01
0008EA5D E108                       	smpsAlterNote       $08
0008EA5F E701                       	dc.b	smpsNoAttack, $01
0008EA61 E10B                       	smpsAlterNote       $0B
0008EA63 E701                       	dc.b	smpsNoAttack, $01
0008EA65 E10F                       	smpsAlterNote       $0F
0008EA67 E701                       	dc.b	smpsNoAttack, $01
0008EA69 E10B                       	smpsAlterNote       $0B
0008EA6B E701                       	dc.b	smpsNoAttack, $01
0008EA6D E105                       	smpsAlterNote       $05
0008EA6F E701                       	dc.b	smpsNoAttack, $01
0008EA71 E104                       	smpsAlterNote       $04
0008EA73 E701                       	dc.b	smpsNoAttack, $01
0008EA75 E108                       	smpsAlterNote       $08
0008EA77 E701                       	dc.b	smpsNoAttack, $01
0008EA79 E10E                       	smpsAlterNote       $0E
0008EA7B E701                       	dc.b	smpsNoAttack, $01
0008EA7D E10F                       	smpsAlterNote       $0F
0008EA7F 8001                       	dc.b	nRst, $01
0008EA81 E10C                       	smpsAlterNote       $0C
0008EA83 C101                       	dc.b	nE5, $01
0008EA85 E10D                       	smpsAlterNote       $0D
0008EA87 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008EA8D E10F                       	smpsAlterNote       $0F
0008EA8F C606 8001                  	dc.b	nA5, $06, nRst, $01
0008EA93 E10C                       	smpsAlterNote       $0C
0008EA95 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008EA99 E10D                       	smpsAlterNote       $0D
0008EA9B CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008EA9F E10C                       	smpsAlterNote       $0C
0008EAA1 CD03                       	dc.b	nE6, $03
0008EAA3 E10A                       	smpsAlterNote       $0A
0008EAA5 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008EAA9 E10D                       	smpsAlterNote       $0D
0008EAAB C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008EAB3 E109                       	smpsAlterNote       $09
0008EAB5 E701                       	dc.b	smpsNoAttack, $01
0008EAB7 E10D                       	smpsAlterNote       $0D
0008EAB9 E701                       	dc.b	smpsNoAttack, $01
0008EABB E110                       	smpsAlterNote       $10
0008EABD E701                       	dc.b	smpsNoAttack, $01
0008EABF E114                       	smpsAlterNote       $14
0008EAC1 E701                       	dc.b	smpsNoAttack, $01
0008EAC3 E110                       	smpsAlterNote       $10
0008EAC5 E701                       	dc.b	smpsNoAttack, $01
0008EAC7 E10A                       	smpsAlterNote       $0A
0008EAC9 E701                       	dc.b	smpsNoAttack, $01
0008EACB E109                       	smpsAlterNote       $09
0008EACD E701                       	dc.b	smpsNoAttack, $01
0008EACF E10D                       	smpsAlterNote       $0D
0008EAD1 E701                       	dc.b	smpsNoAttack, $01
0008EAD3 E113                       	smpsAlterNote       $13
0008EAD5 E701                       	dc.b	smpsNoAttack, $01
0008EAD7 E114                       	smpsAlterNote       $14
0008EAD9 8001                       	dc.b	nRst, $01
0008EADB E10F                       	smpsAlterNote       $0F
0008EADD C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008EAE3 E10C                       	smpsAlterNote       $0C
0008EAE5 E701                       	dc.b	smpsNoAttack, $01
0008EAE7 E108                       	smpsAlterNote       $08
0008EAE9 E701                       	dc.b	smpsNoAttack, $01
0008EAEB E10C                       	smpsAlterNote       $0C
0008EAED E701                       	dc.b	smpsNoAttack, $01
0008EAEF E112                       	smpsAlterNote       $12
0008EAF1 E701                       	dc.b	smpsNoAttack, $01
0008EAF3 E113                       	smpsAlterNote       $13
0008EAF5 E701                       	dc.b	smpsNoAttack, $01
0008EAF7 E10F                       	smpsAlterNote       $0F
0008EAF9 E701                       	dc.b	smpsNoAttack, $01
0008EAFB E109                       	smpsAlterNote       $09
0008EAFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB01 E10C                       	smpsAlterNote       $0C
0008EB03 E701                       	dc.b	smpsNoAttack, $01
0008EB05 E112                       	smpsAlterNote       $12
0008EB07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB0B E10C                       	smpsAlterNote       $0C
0008EB0D E701                       	dc.b	smpsNoAttack, $01
0008EB0F E109                       	smpsAlterNote       $09
0008EB11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB15 E10F                       	smpsAlterNote       $0F
0008EB17 E701                       	dc.b	smpsNoAttack, $01
0008EB19 E113                       	smpsAlterNote       $13
0008EB1B E701                       	dc.b	smpsNoAttack, $01
0008EB1D E112                       	smpsAlterNote       $12
0008EB1F E701                       	dc.b	smpsNoAttack, $01
0008EB21 E10C                       	smpsAlterNote       $0C
0008EB23 E701                       	dc.b	smpsNoAttack, $01
0008EB25 E108                       	smpsAlterNote       $08
0008EB27 E701                       	dc.b	smpsNoAttack, $01
0008EB29 E10C                       	smpsAlterNote       $0C
0008EB2B E701                       	dc.b	smpsNoAttack, $01
0008EB2D E10F                       	smpsAlterNote       $0F
0008EB2F E701                       	dc.b	smpsNoAttack, $01
0008EB31 E113                       	smpsAlterNote       $13
0008EB33 E701                       	dc.b	smpsNoAttack, $01
0008EB35 E10F                       	smpsAlterNote       $0F
0008EB37 E701                       	dc.b	smpsNoAttack, $01
0008EB39 E109                       	smpsAlterNote       $09
0008EB3B E701                       	dc.b	smpsNoAttack, $01
0008EB3D E108                       	smpsAlterNote       $08
0008EB3F E701                       	dc.b	smpsNoAttack, $01
0008EB41 E10C                       	smpsAlterNote       $0C
0008EB43 E701                       	dc.b	smpsNoAttack, $01
0008EB45 E112                       	smpsAlterNote       $12
0008EB47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB4B E10F                       	smpsAlterNote       $0F
0008EB4D E701                       	dc.b	smpsNoAttack, $01
0008EB4F E109                       	smpsAlterNote       $09
0008EB51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB55 E10F                       	smpsAlterNote       $0F
0008EB57 E701                       	dc.b	smpsNoAttack, $01
0008EB59 E113                       	smpsAlterNote       $13
0008EB5B E701                       	dc.b	smpsNoAttack, $01
0008EB5D E112                       	smpsAlterNote       $12
0008EB5F E701                       	dc.b	smpsNoAttack, $01
0008EB61 E10C                       	smpsAlterNote       $0C
0008EB63 E701                       	dc.b	smpsNoAttack, $01
0008EB65 E108                       	smpsAlterNote       $08
0008EB67 E701                       	dc.b	smpsNoAttack, $01
0008EB69 E10C                       	smpsAlterNote       $0C
0008EB6B E701                       	dc.b	smpsNoAttack, $01
0008EB6D E10F                       	smpsAlterNote       $0F
0008EB6F E701                       	dc.b	smpsNoAttack, $01
0008EB71 E113                       	smpsAlterNote       $13
0008EB73 E701                       	dc.b	smpsNoAttack, $01
0008EB75 E10F                       	smpsAlterNote       $0F
0008EB77 E701                       	dc.b	smpsNoAttack, $01
0008EB79 E109                       	smpsAlterNote       $09
0008EB7B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008EB7F E10F                       	smpsAlterNote       $0F
0008EB81 C60D                       	dc.b	nA5, $0D
0008EB83 E109                       	smpsAlterNote       $09
0008EB85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB89 E10C                       	smpsAlterNote       $0C
0008EB8B E701                       	dc.b	smpsNoAttack, $01
0008EB8D E112                       	smpsAlterNote       $12
0008EB8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB93 E10C                       	smpsAlterNote       $0C
0008EB95 E701                       	dc.b	smpsNoAttack, $01
0008EB97 E109                       	smpsAlterNote       $09
0008EB99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB9D E10F                       	smpsAlterNote       $0F
0008EB9F E701                       	dc.b	smpsNoAttack, $01
0008EBA1 E113                       	smpsAlterNote       $13
0008EBA3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008EBA9 E10D                       	smpsAlterNote       $0D
0008EBAB C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008EBB3 E10C                       	smpsAlterNote       $0C
0008EBB5 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008EBBB E6FF                       	smpsAlterVol        $FF
0008EBBD E10B                       	smpsAlterNote       $0B
0008EBBF BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008EBC3 E10C                       	smpsAlterNote       $0C
0008EBC5 C103                       	dc.b	nE5, $03
0008EBC7 E10D                       	smpsAlterNote       $0D
0008EBC9 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008EBD3 E10B                       	smpsAlterNote       $0B
0008EBD5 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008EBD9 E107                       	smpsAlterNote       $07
0008EBDB E701                       	dc.b	smpsNoAttack, $01
0008EBDD E104                       	smpsAlterNote       $04
0008EBDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBE3 E10A                       	smpsAlterNote       $0A
0008EBE5 E701                       	dc.b	smpsNoAttack, $01
0008EBE7 E10D                       	smpsAlterNote       $0D
0008EBE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBED E107                       	smpsAlterNote       $07
0008EBEF E701                       	dc.b	smpsNoAttack, $01
0008EBF1 E104                       	smpsAlterNote       $04
0008EBF3 8001                       	dc.b	nRst, $01
0008EBF5 E110                       	smpsAlterNote       $10
0008EBF7 C703                       	dc.b	nBb5, $03
0008EBF9 E10F                       	smpsAlterNote       $0F
0008EBFB C603 8001                  	dc.b	nA5, $03, nRst, $01
0008EBFF E10D                       	smpsAlterNote       $0D
0008EC01 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008EC05 E10C                       	smpsAlterNote       $0C
0008EC07 E701                       	dc.b	smpsNoAttack, $01
0008EC09 E108                       	smpsAlterNote       $08
0008EC0B E701                       	dc.b	smpsNoAttack, $01
0008EC0D E109                       	smpsAlterNote       $09
0008EC0F E701                       	dc.b	smpsNoAttack, $01
0008EC11 E10F                       	smpsAlterNote       $0F
0008EC13 E701                       	dc.b	smpsNoAttack, $01
0008EC15 E113                       	smpsAlterNote       $13
0008EC17 E701                       	dc.b	smpsNoAttack, $01
0008EC19 E10F                       	smpsAlterNote       $0F
0008EC1B E701                       	dc.b	smpsNoAttack, $01
0008EC1D E10C                       	smpsAlterNote       $0C
0008EC1F E701                       	dc.b	smpsNoAttack, $01
0008EC21 E108                       	smpsAlterNote       $08
0008EC23 E701                       	dc.b	smpsNoAttack, $01
0008EC25 E10C                       	smpsAlterNote       $0C
0008EC27 E701                       	dc.b	smpsNoAttack, $01
0008EC29 E112                       	smpsAlterNote       $12
0008EC2B E701                       	dc.b	smpsNoAttack, $01
0008EC2D E113                       	smpsAlterNote       $13
0008EC2F E701                       	dc.b	smpsNoAttack, $01
0008EC31 E10F                       	smpsAlterNote       $0F
0008EC33 E701                       	dc.b	smpsNoAttack, $01
0008EC35 E109                       	smpsAlterNote       $09
0008EC37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC3B E10C                       	smpsAlterNote       $0C
0008EC3D E701                       	dc.b	smpsNoAttack, $01
0008EC3F E112                       	smpsAlterNote       $12
0008EC41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC45 E10C                       	smpsAlterNote       $0C
0008EC47 E701                       	dc.b	smpsNoAttack, $01
0008EC49 E109                       	smpsAlterNote       $09
0008EC4B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC4F E10F                       	smpsAlterNote       $0F
0008EC51 E701                       	dc.b	smpsNoAttack, $01
0008EC53 E113                       	smpsAlterNote       $13
0008EC55 E701                       	dc.b	smpsNoAttack, $01
0008EC57 E112                       	smpsAlterNote       $12
0008EC59 E701                       	dc.b	smpsNoAttack, $01
0008EC5B E10C                       	smpsAlterNote       $0C
0008EC5D E701                       	dc.b	smpsNoAttack, $01
0008EC5F E108                       	smpsAlterNote       $08
0008EC61 E701                       	dc.b	smpsNoAttack, $01
0008EC63 E10C                       	smpsAlterNote       $0C
0008EC65 E701                       	dc.b	smpsNoAttack, $01
0008EC67 E10F                       	smpsAlterNote       $0F
0008EC69 E701                       	dc.b	smpsNoAttack, $01
0008EC6B E113                       	smpsAlterNote       $13
0008EC6D E701                       	dc.b	smpsNoAttack, $01
0008EC6F E10F                       	smpsAlterNote       $0F
0008EC71 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008EC75 E110                       	smpsAlterNote       $10
0008EC77 BB03                       	dc.b	nBb4, $03
0008EC79 E10F                       	smpsAlterNote       $0F
0008EC7B BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008EC7F E10B                       	smpsAlterNote       $0B
0008EC81 BF03                       	dc.b	nD5, $03
0008EC83 E10C                       	smpsAlterNote       $0C
0008EC85 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008EC89 E10D                       	smpsAlterNote       $0D
0008EC8B C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008EC95 E10B                       	smpsAlterNote       $0B
0008EC97 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008ECA3 E110                       	smpsAlterNote       $10
0008ECA5 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008ECA9 E10F                       	smpsAlterNote       $0F
0008ECAB C604                       	dc.b	nA5, $04
0008ECAD E10D                       	smpsAlterNote       $0D
0008ECAF C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008ECB5 E109                       	smpsAlterNote       $09
0008ECB7 E701                       	dc.b	smpsNoAttack, $01
0008ECB9 E108                       	smpsAlterNote       $08
0008ECBB E701                       	dc.b	smpsNoAttack, $01
0008ECBD E10C                       	smpsAlterNote       $0C
0008ECBF E701                       	dc.b	smpsNoAttack, $01
0008ECC1 E112                       	smpsAlterNote       $12
0008ECC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECC7 E10F                       	smpsAlterNote       $0F
0008ECC9 E701                       	dc.b	smpsNoAttack, $01
0008ECCB E109                       	smpsAlterNote       $09
0008ECCD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECD1 E10F                       	smpsAlterNote       $0F
0008ECD3 E701                       	dc.b	smpsNoAttack, $01
0008ECD5 E112                       	smpsAlterNote       $12
0008ECD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECDB E10C                       	smpsAlterNote       $0C
0008ECDD E701                       	dc.b	smpsNoAttack, $01
0008ECDF E108                       	smpsAlterNote       $08
0008ECE1 E701                       	dc.b	smpsNoAttack, $01
0008ECE3 E109                       	smpsAlterNote       $09
0008ECE5 E701                       	dc.b	smpsNoAttack, $01
0008ECE7 E10F                       	smpsAlterNote       $0F
0008ECE9 E701                       	dc.b	smpsNoAttack, $01
0008ECEB E113                       	smpsAlterNote       $13
0008ECED E701                       	dc.b	smpsNoAttack, $01
0008ECEF E10F                       	smpsAlterNote       $0F
0008ECF1 E701                       	dc.b	smpsNoAttack, $01
0008ECF3 E10C                       	smpsAlterNote       $0C
0008ECF5 E701                       	dc.b	smpsNoAttack, $01
0008ECF7 E108                       	smpsAlterNote       $08
0008ECF9 E701                       	dc.b	smpsNoAttack, $01
0008ECFB E10C                       	smpsAlterNote       $0C
0008ECFD E701                       	dc.b	smpsNoAttack, $01
0008ECFF E112                       	smpsAlterNote       $12
0008ED01 E701                       	dc.b	smpsNoAttack, $01
0008ED03 E113                       	smpsAlterNote       $13
0008ED05 E701                       	dc.b	smpsNoAttack, $01
0008ED07 E10F                       	smpsAlterNote       $0F
0008ED09 E701                       	dc.b	smpsNoAttack, $01
0008ED0B E109                       	smpsAlterNote       $09
0008ED0D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED11 E10C                       	smpsAlterNote       $0C
0008ED13 E701                       	dc.b	smpsNoAttack, $01
0008ED15 E112                       	smpsAlterNote       $12
0008ED17 E701                       	dc.b	smpsNoAttack, $01
0008ED19 E113                       	smpsAlterNote       $13
0008ED1B 8001                       	dc.b	nRst, $01
0008ED1D E10F                       	smpsAlterNote       $0F
0008ED1F C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008ED2B C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008ED33 E10D                       	smpsAlterNote       $0D
0008ED35 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008ED3B E10B                       	smpsAlterNote       $0B
0008ED3D BF0D                       	dc.b	nD5, $0D
0008ED3F E108                       	smpsAlterNote       $08
0008ED41 E701                       	dc.b	smpsNoAttack, $01
0008ED43 E104                       	smpsAlterNote       $04
0008ED45 E701                       	dc.b	smpsNoAttack, $01
0008ED47 E105                       	smpsAlterNote       $05
0008ED49 E701                       	dc.b	smpsNoAttack, $01
0008ED4B E10B                       	smpsAlterNote       $0B
0008ED4D E701                       	dc.b	smpsNoAttack, $01
0008ED4F E10F                       	smpsAlterNote       $0F
0008ED51 E701                       	dc.b	smpsNoAttack, $01
0008ED53 E10B                       	smpsAlterNote       $0B
0008ED55 E701                       	dc.b	smpsNoAttack, $01
0008ED57 E108                       	smpsAlterNote       $08
0008ED59 E701                       	dc.b	smpsNoAttack, $01
0008ED5B E104                       	smpsAlterNote       $04
0008ED5D E701                       	dc.b	smpsNoAttack, $01
0008ED5F E108                       	smpsAlterNote       $08
0008ED61 E701                       	dc.b	smpsNoAttack, $01
0008ED63 E10E                       	smpsAlterNote       $0E
0008ED65 E701                       	dc.b	smpsNoAttack, $01
0008ED67 E10F                       	smpsAlterNote       $0F
0008ED69 E701                       	dc.b	smpsNoAttack, $01
0008ED6B E10C                       	smpsAlterNote       $0C
0008ED6D C101                       	dc.b	nE5, $01
0008ED6F E10D                       	smpsAlterNote       $0D
0008ED71 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008ED79 E10F                       	smpsAlterNote       $0F
0008ED7B C607                       	dc.b	nA5, $07
0008ED7D E10C                       	smpsAlterNote       $0C
0008ED7F CD07                       	dc.b	nE6, $07
0008ED81 E10D                       	smpsAlterNote       $0D
0008ED83 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008ED87 E10C                       	smpsAlterNote       $0C
0008ED89 CD03                       	dc.b	nE6, $03
0008ED8B E10A                       	smpsAlterNote       $0A
0008ED8D C903 8001                  	dc.b	nC6, $03, nRst, $01
0008ED91 E10D                       	smpsAlterNote       $0D
0008ED93 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008ED99 E10A                       	smpsAlterNote       $0A
0008ED9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED9F E110                       	smpsAlterNote       $10
0008EDA1 E701                       	dc.b	smpsNoAttack, $01
0008EDA3 E114                       	smpsAlterNote       $14
0008EDA5 E701                       	dc.b	smpsNoAttack, $01
0008EDA7 E113                       	smpsAlterNote       $13
0008EDA9 E701                       	dc.b	smpsNoAttack, $01
0008EDAB E10D                       	smpsAlterNote       $0D
0008EDAD E701                       	dc.b	smpsNoAttack, $01
0008EDAF E109                       	smpsAlterNote       $09
0008EDB1 E701                       	dc.b	smpsNoAttack, $01
0008EDB3 E10D                       	smpsAlterNote       $0D
0008EDB5 E701                       	dc.b	smpsNoAttack, $01
0008EDB7 E110                       	smpsAlterNote       $10
0008EDB9 E701                       	dc.b	smpsNoAttack, $01
0008EDBB E114                       	smpsAlterNote       $14
0008EDBD E701                       	dc.b	smpsNoAttack, $01
0008EDBF E10F                       	smpsAlterNote       $0F
0008EDC1 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008EDC5 E10C                       	smpsAlterNote       $0C
0008EDC7 E701                       	dc.b	smpsNoAttack, $01
0008EDC9 E108                       	smpsAlterNote       $08
0008EDCB E701                       	dc.b	smpsNoAttack, $01
0008EDCD E10C                       	smpsAlterNote       $0C
0008EDCF E701                       	dc.b	smpsNoAttack, $01
0008EDD1 E10F                       	smpsAlterNote       $0F
0008EDD3 E701                       	dc.b	smpsNoAttack, $01
0008EDD5 E113                       	smpsAlterNote       $13
0008EDD7 E701                       	dc.b	smpsNoAttack, $01
0008EDD9 E10F                       	smpsAlterNote       $0F
0008EDDB E701                       	dc.b	smpsNoAttack, $01
0008EDDD E109                       	smpsAlterNote       $09
0008EDDF E701                       	dc.b	smpsNoAttack, $01
0008EDE1 E108                       	smpsAlterNote       $08
0008EDE3 E701                       	dc.b	smpsNoAttack, $01
0008EDE5 E10C                       	smpsAlterNote       $0C
0008EDE7 E701                       	dc.b	smpsNoAttack, $01
0008EDE9 E112                       	smpsAlterNote       $12
0008EDEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EDEF E10F                       	smpsAlterNote       $0F
0008EDF1 E701                       	dc.b	smpsNoAttack, $01
0008EDF3 E109                       	smpsAlterNote       $09
0008EDF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EDF9 E10F                       	smpsAlterNote       $0F
0008EDFB E701                       	dc.b	smpsNoAttack, $01
0008EDFD E112                       	smpsAlterNote       $12
0008EDFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE03 E10C                       	smpsAlterNote       $0C
0008EE05 E701                       	dc.b	smpsNoAttack, $01
0008EE07 E108                       	smpsAlterNote       $08
0008EE09 E701                       	dc.b	smpsNoAttack, $01
0008EE0B E109                       	smpsAlterNote       $09
0008EE0D E701                       	dc.b	smpsNoAttack, $01
0008EE0F E10F                       	smpsAlterNote       $0F
0008EE11 E701                       	dc.b	smpsNoAttack, $01
0008EE13 E113                       	smpsAlterNote       $13
0008EE15 E701                       	dc.b	smpsNoAttack, $01
0008EE17 E10F                       	smpsAlterNote       $0F
0008EE19 E701                       	dc.b	smpsNoAttack, $01
0008EE1B E10C                       	smpsAlterNote       $0C
0008EE1D E701                       	dc.b	smpsNoAttack, $01
0008EE1F E108                       	smpsAlterNote       $08
0008EE21 E701                       	dc.b	smpsNoAttack, $01
0008EE23 E10C                       	smpsAlterNote       $0C
0008EE25 E701                       	dc.b	smpsNoAttack, $01
0008EE27 E112                       	smpsAlterNote       $12
0008EE29 E701                       	dc.b	smpsNoAttack, $01
0008EE2B E113                       	smpsAlterNote       $13
0008EE2D E701                       	dc.b	smpsNoAttack, $01
0008EE2F E10F                       	smpsAlterNote       $0F
0008EE31 E701                       	dc.b	smpsNoAttack, $01
0008EE33 E109                       	smpsAlterNote       $09
0008EE35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE39 E10C                       	smpsAlterNote       $0C
0008EE3B E701                       	dc.b	smpsNoAttack, $01
0008EE3D E112                       	smpsAlterNote       $12
0008EE3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE43 E10C                       	smpsAlterNote       $0C
0008EE45 E701                       	dc.b	smpsNoAttack, $01
0008EE47 E109                       	smpsAlterNote       $09
0008EE49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE4D E10F                       	smpsAlterNote       $0F
0008EE4F E701                       	dc.b	smpsNoAttack, $01
0008EE51 E113                       	smpsAlterNote       $13
0008EE53 E701                       	dc.b	smpsNoAttack, $01
0008EE55 E112                       	smpsAlterNote       $12
0008EE57 E701                       	dc.b	smpsNoAttack, $01
0008EE59 E10C                       	smpsAlterNote       $0C
0008EE5B E701                       	dc.b	smpsNoAttack, $01
0008EE5D E109                       	smpsAlterNote       $09
0008EE5F 8001                       	dc.b	nRst, $01
0008EE61 E10F                       	smpsAlterNote       $0F
0008EE63 C60D                       	dc.b	nA5, $0D
0008EE65 E10C                       	smpsAlterNote       $0C
0008EE67 E701                       	dc.b	smpsNoAttack, $01
0008EE69 E108                       	smpsAlterNote       $08
0008EE6B E701                       	dc.b	smpsNoAttack, $01
0008EE6D E10C                       	smpsAlterNote       $0C
0008EE6F E701                       	dc.b	smpsNoAttack, $01
0008EE71 E112                       	smpsAlterNote       $12
0008EE73 E701                       	dc.b	smpsNoAttack, $01
0008EE75 E113                       	smpsAlterNote       $13
0008EE77 E701                       	dc.b	smpsNoAttack, $01
0008EE79 E10F                       	smpsAlterNote       $0F
0008EE7B E701                       	dc.b	smpsNoAttack, $01
0008EE7D E109                       	smpsAlterNote       $09
0008EE7F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE83 E10C                       	smpsAlterNote       $0C
0008EE85 E701                       	dc.b	smpsNoAttack, $01
0008EE87 E112                       	smpsAlterNote       $12
0008EE89 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE8D E10C                       	smpsAlterNote       $0C
0008EE8F E701                       	dc.b	smpsNoAttack, $01
0008EE91 E109                       	smpsAlterNote       $09
0008EE93 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE97 E10F                       	smpsAlterNote       $0F
0008EE99 E701                       	dc.b	smpsNoAttack, $01
0008EE9B E113                       	smpsAlterNote       $13
0008EE9D E701                       	dc.b	smpsNoAttack, $01
0008EE9F E112                       	smpsAlterNote       $12
0008EEA1 E701                       	dc.b	smpsNoAttack, $01
0008EEA3 E10C                       	smpsAlterNote       $0C
0008EEA5 E701                       	dc.b	smpsNoAttack, $01
0008EEA7 E108                       	smpsAlterNote       $08
0008EEA9 E701                       	dc.b	smpsNoAttack, $01
0008EEAB E10C                       	smpsAlterNote       $0C
0008EEAD E701                       	dc.b	smpsNoAttack, $01
0008EEAF E10F                       	smpsAlterNote       $0F
0008EEB1 E701                       	dc.b	smpsNoAttack, $01
0008EEB3 E113                       	smpsAlterNote       $13
0008EEB5 E701                       	dc.b	smpsNoAttack, $01
0008EEB7 E10F                       	smpsAlterNote       $0F
0008EEB9 E701                       	dc.b	smpsNoAttack, $01
0008EEBB E109                       	smpsAlterNote       $09
0008EEBD E701                       	dc.b	smpsNoAttack, $01
0008EEBF E108                       	smpsAlterNote       $08
0008EEC1 E701                       	dc.b	smpsNoAttack, $01
0008EEC3 E10C                       	smpsAlterNote       $0C
0008EEC5 E701                       	dc.b	smpsNoAttack, $01
0008EEC7 E112                       	smpsAlterNote       $12
0008EEC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EECD E10F                       	smpsAlterNote       $0F
0008EECF E701                       	dc.b	smpsNoAttack, $01
0008EED1 E109                       	smpsAlterNote       $09
0008EED3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EED7 E10F                       	smpsAlterNote       $0F
0008EED9 E701                       	dc.b	smpsNoAttack, $01
0008EEDB E112                       	smpsAlterNote       $12
0008EEDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEE1 E10C                       	smpsAlterNote       $0C
0008EEE3 E701                       	dc.b	smpsNoAttack, $01
0008EEE5 E108                       	smpsAlterNote       $08
0008EEE7 E701                       	dc.b	smpsNoAttack, $01
0008EEE9 E10C                       	smpsAlterNote       $0C
0008EEEB E701                       	dc.b	smpsNoAttack, $01
0008EEED E10F                       	smpsAlterNote       $0F
0008EEEF E701                       	dc.b	smpsNoAttack, $01
0008EEF1 E113                       	smpsAlterNote       $13
0008EEF3 E701                       	dc.b	smpsNoAttack, $01
0008EEF5 E10F                       	smpsAlterNote       $0F
0008EEF7 E701                       	dc.b	smpsNoAttack, $01
0008EEF9 E109                       	smpsAlterNote       $09
0008EEFB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008EF01 E601                       	smpsAlterVol        $01
0008EF03 E10F                       	smpsAlterNote       $0F
0008EF05 C604                       	dc.b	nA5, $04
0008EF07 E10D                       	smpsAlterNote       $0D
0008EF09 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008EF0F E10B                       	smpsAlterNote       $0B
0008EF11 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008EF19 E10F                       	smpsAlterNote       $0F
0008EF1B C604 8001                  	dc.b	nA5, $04, nRst, $01
0008EF1F E10D                       	smpsAlterNote       $0D
0008EF21 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008EF27 E10C                       	smpsAlterNote       $0C
0008EF29 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0008EF2F E10A                       	smpsAlterNote       $0A
0008EF31 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008EF35 E110                       	smpsAlterNote       $10
0008EF37 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008EF3B E10F                       	smpsAlterNote       $0F
0008EF3D C604                       	dc.b	nA5, $04
0008EF3F E10D                       	smpsAlterNote       $0D
0008EF41 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008EF4D E109                       	smpsAlterNote       $09
0008EF4F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF53 E10F                       	smpsAlterNote       $0F
0008EF55 E701                       	dc.b	smpsNoAttack, $01
0008EF57 E112                       	smpsAlterNote       $12
0008EF59 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF5D E10C                       	smpsAlterNote       $0C
0008EF5F E701                       	dc.b	smpsNoAttack, $01
0008EF61 E108                       	smpsAlterNote       $08
0008EF63 E701                       	dc.b	smpsNoAttack, $01
0008EF65 E10C                       	smpsAlterNote       $0C
0008EF67 E701                       	dc.b	smpsNoAttack, $01
0008EF69 E10F                       	smpsAlterNote       $0F
0008EF6B E701                       	dc.b	smpsNoAttack, $01
0008EF6D E113                       	smpsAlterNote       $13
0008EF6F E701                       	dc.b	smpsNoAttack, $01
0008EF71 E10D                       	smpsAlterNote       $0D
0008EF73 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008EF79 E10C                       	smpsAlterNote       $0C
0008EF7B C10D                       	dc.b	nE5, $0D
0008EF7D E109                       	smpsAlterNote       $09
0008EF7F E701                       	dc.b	smpsNoAttack, $01
0008EF81 E105                       	smpsAlterNote       $05
0008EF83 E701                       	dc.b	smpsNoAttack, $01
0008EF85 E106                       	smpsAlterNote       $06
0008EF87 E701                       	dc.b	smpsNoAttack, $01
0008EF89 E10C                       	smpsAlterNote       $0C
0008EF8B E701                       	dc.b	smpsNoAttack, $01
0008EF8D E110                       	smpsAlterNote       $10
0008EF8F E701                       	dc.b	smpsNoAttack, $01
0008EF91 E10C                       	smpsAlterNote       $0C
0008EF93 E701                       	dc.b	smpsNoAttack, $01
0008EF95 E109                       	smpsAlterNote       $09
0008EF97 E701                       	dc.b	smpsNoAttack, $01
0008EF99 E105                       	smpsAlterNote       $05
0008EF9B E701                       	dc.b	smpsNoAttack, $01
0008EF9D E109                       	smpsAlterNote       $09
0008EF9F E701                       	dc.b	smpsNoAttack, $01
0008EFA1 E10F                       	smpsAlterNote       $0F
0008EFA3 E701                       	dc.b	smpsNoAttack, $01
0008EFA5 E110                       	smpsAlterNote       $10
0008EFA7 E701                       	dc.b	smpsNoAttack, $01
0008EFA9 E10C                       	smpsAlterNote       $0C
0008EFAB E701                       	dc.b	smpsNoAttack, $01
0008EFAD E106                       	smpsAlterNote       $06
0008EFAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFB3 E109                       	smpsAlterNote       $09
0008EFB5 E701                       	dc.b	smpsNoAttack, $01
0008EFB7 E10F                       	smpsAlterNote       $0F
0008EFB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFBD E109                       	smpsAlterNote       $09
0008EFBF E701                       	dc.b	smpsNoAttack, $01
0008EFC1 E106                       	smpsAlterNote       $06
0008EFC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFC7 E10C                       	smpsAlterNote       $0C
0008EFC9 E701                       	dc.b	smpsNoAttack, $01
0008EFCB E110                       	smpsAlterNote       $10
0008EFCD E701                       	dc.b	smpsNoAttack, $01
0008EFCF E10F                       	smpsAlterNote       $0F
0008EFD1 E701                       	dc.b	smpsNoAttack, $01
0008EFD3 E109                       	smpsAlterNote       $09
0008EFD5 E701                       	dc.b	smpsNoAttack, $01
0008EFD7 E105                       	smpsAlterNote       $05
0008EFD9 E701                       	dc.b	smpsNoAttack, $01
0008EFDB E109                       	smpsAlterNote       $09
0008EFDD E701                       	dc.b	smpsNoAttack, $01
0008EFDF E10C                       	smpsAlterNote       $0C
0008EFE1 E701                       	dc.b	smpsNoAttack, $01
0008EFE3 E110                       	smpsAlterNote       $10
0008EFE5 E701                       	dc.b	smpsNoAttack, $01
0008EFE7 E10C                       	smpsAlterNote       $0C
0008EFE9 E701                       	dc.b	smpsNoAttack, $01
0008EFEB E106                       	smpsAlterNote       $06
0008EFED E701                       	dc.b	smpsNoAttack, $01
0008EFEF E105                       	smpsAlterNote       $05
0008EFF1 E701                       	dc.b	smpsNoAttack, $01
0008EFF3 E109                       	smpsAlterNote       $09
0008EFF5 E701                       	dc.b	smpsNoAttack, $01
0008EFF7 E10F                       	smpsAlterNote       $0F
0008EFF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFFD E10C                       	smpsAlterNote       $0C
0008EFFF E701                       	dc.b	smpsNoAttack, $01
0008F001 E106                       	smpsAlterNote       $06
0008F003 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F007 E10C                       	smpsAlterNote       $0C
0008F009 E701                       	dc.b	smpsNoAttack, $01
0008F00B E10F                       	smpsAlterNote       $0F
0008F00D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F011 E109                       	smpsAlterNote       $09
0008F013 E701                       	dc.b	smpsNoAttack, $01
0008F015 E105                       	smpsAlterNote       $05
0008F017 E701                       	dc.b	smpsNoAttack, $01
0008F019 E106                       	smpsAlterNote       $06
0008F01B E701                       	dc.b	smpsNoAttack, $01
0008F01D E10C                       	smpsAlterNote       $0C
0008F01F E701                       	dc.b	smpsNoAttack, $01
0008F021 E110                       	smpsAlterNote       $10
0008F023 E701                       	dc.b	smpsNoAttack, $01
0008F025 E10C                       	smpsAlterNote       $0C
0008F027 E701                       	dc.b	smpsNoAttack, $01
0008F029 E109                       	smpsAlterNote       $09
0008F02B E701                       	dc.b	smpsNoAttack, $01
0008F02D E105                       	smpsAlterNote       $05
0008F02F E701                       	dc.b	smpsNoAttack, $01
0008F031 E109                       	smpsAlterNote       $09
0008F033 E701                       	dc.b	smpsNoAttack, $01
0008F035 E10F                       	smpsAlterNote       $0F
0008F037 E701                       	dc.b	smpsNoAttack, $01
0008F039 E110                       	smpsAlterNote       $10
0008F03B E701                       	dc.b	smpsNoAttack, $01
0008F03D E10C                       	smpsAlterNote       $0C
0008F03F E701                       	dc.b	smpsNoAttack, $01
0008F041 E106                       	smpsAlterNote       $06
0008F043 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F047 E109                       	smpsAlterNote       $09
0008F049 E701                       	dc.b	smpsNoAttack, $01
0008F04B E10F                       	smpsAlterNote       $0F
0008F04D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F051 E109                       	smpsAlterNote       $09
0008F053 E701                       	dc.b	smpsNoAttack, $01
0008F055 E106                       	smpsAlterNote       $06
0008F057 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F05B E10C                       	smpsAlterNote       $0C
0008F05D E701                       	dc.b	smpsNoAttack, $01
0008F05F E110                       	smpsAlterNote       $10
0008F061 E701                       	dc.b	smpsNoAttack, $01
0008F063 E10F                       	smpsAlterNote       $0F
0008F065 E701                       	dc.b	smpsNoAttack, $01
0008F067 E109                       	smpsAlterNote       $09
0008F069 E701                       	dc.b	smpsNoAttack, $01
0008F06B E105                       	smpsAlterNote       $05
0008F06D E701                       	dc.b	smpsNoAttack, $01
0008F06F E109                       	smpsAlterNote       $09
0008F071 E701                       	dc.b	smpsNoAttack, $01
0008F073 E10C                       	smpsAlterNote       $0C
0008F075 E701                       	dc.b	smpsNoAttack, $01
0008F077 E110                       	smpsAlterNote       $10
0008F079 E701                       	dc.b	smpsNoAttack, $01
0008F07B E10C                       	smpsAlterNote       $0C
0008F07D E701                       	dc.b	smpsNoAttack, $01
0008F07F E106                       	smpsAlterNote       $06
0008F081 E701                       	dc.b	smpsNoAttack, $01
0008F083 E105                       	smpsAlterNote       $05
0008F085 E701                       	dc.b	smpsNoAttack, $01
0008F087 E109                       	smpsAlterNote       $09
0008F089 E701                       	dc.b	smpsNoAttack, $01
0008F08B E10F                       	smpsAlterNote       $0F
0008F08D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F091 E109                       	smpsAlterNote       $09
0008F093 E701                       	dc.b	smpsNoAttack, $01
0008F095 E106                       	smpsAlterNote       $06
0008F097 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F09B E10C                       	smpsAlterNote       $0C
0008F09D E701                       	dc.b	smpsNoAttack, $01
0008F09F E110                       	smpsAlterNote       $10
0008F0A1 E701                       	dc.b	smpsNoAttack, $01
0008F0A3 E10F                       	smpsAlterNote       $0F
0008F0A5 E701                       	dc.b	smpsNoAttack, $01
0008F0A7 E109                       	smpsAlterNote       $09
0008F0A9 E701                       	dc.b	smpsNoAttack, $01
0008F0AB E105                       	smpsAlterNote       $05
0008F0AD E701                       	dc.b	smpsNoAttack, $01
0008F0AF E109                       	smpsAlterNote       $09
0008F0B1 E701                       	dc.b	smpsNoAttack, $01
0008F0B3 E10C                       	smpsAlterNote       $0C
0008F0B5 E701                       	dc.b	smpsNoAttack, $01
0008F0B7 E110                       	smpsAlterNote       $10
0008F0B9 E701                       	dc.b	smpsNoAttack, $01
0008F0BB E10C                       	smpsAlterNote       $0C
0008F0BD E701                       	dc.b	smpsNoAttack, $01
0008F0BF E106                       	smpsAlterNote       $06
0008F0C1 E701                       	dc.b	smpsNoAttack, $01
0008F0C3 E105                       	smpsAlterNote       $05
0008F0C5 E701                       	dc.b	smpsNoAttack, $01
0008F0C7 E109                       	smpsAlterNote       $09
0008F0C9 E701                       	dc.b	smpsNoAttack, $01
0008F0CB E10F                       	smpsAlterNote       $0F
0008F0CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0D1 E10C                       	smpsAlterNote       $0C
0008F0D3 E701                       	dc.b	smpsNoAttack, $01
0008F0D5 E106                       	smpsAlterNote       $06
0008F0D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0DB E10C                       	smpsAlterNote       $0C
0008F0DD E701                       	dc.b	smpsNoAttack, $01
0008F0DF E10F                       	smpsAlterNote       $0F
0008F0E1 E701                       	dc.b	smpsNoAttack, $01
0008F0E3 E110                       	smpsAlterNote       $10
0008F0E5 8001                       	dc.b	nRst, $01
0008F0E7 E10F                       	smpsAlterNote       $0F
0008F0E9 C604                       	dc.b	nA5, $04
0008F0EB E10D                       	smpsAlterNote       $0D
0008F0ED C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008F0F3 E10B                       	smpsAlterNote       $0B
0008F0F5 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008F0FB E10F                       	smpsAlterNote       $0F
0008F0FD C604 8001                  	dc.b	nA5, $04, nRst, $01
0008F101 E10D                       	smpsAlterNote       $0D
0008F103 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008F109 E10C                       	smpsAlterNote       $0C
0008F10B C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008F111 E10A                       	smpsAlterNote       $0A
0008F113 C904                       	dc.b	nC6, $04
0008F115 E110                       	smpsAlterNote       $10
0008F117 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008F11B E10F                       	smpsAlterNote       $0F
0008F11D C604                       	dc.b	nA5, $04
0008F11F E10D                       	smpsAlterNote       $0D
0008F121 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008F12D E109                       	smpsAlterNote       $09
0008F12F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F133 E10F                       	smpsAlterNote       $0F
0008F135 E701                       	dc.b	smpsNoAttack, $01
0008F137 E112                       	smpsAlterNote       $12
0008F139 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F13D E10C                       	smpsAlterNote       $0C
0008F13F E701                       	dc.b	smpsNoAttack, $01
0008F141 E108                       	smpsAlterNote       $08
0008F143 E701                       	dc.b	smpsNoAttack, $01
0008F145 E109                       	smpsAlterNote       $09
0008F147 E701                       	dc.b	smpsNoAttack, $01
0008F149 E10F                       	smpsAlterNote       $0F
0008F14B E701                       	dc.b	smpsNoAttack, $01
0008F14D E113                       	smpsAlterNote       $13
0008F14F E701                       	dc.b	smpsNoAttack, $01
0008F151 E10D                       	smpsAlterNote       $0D
0008F153 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008F159 E10C                       	smpsAlterNote       $0C
0008F15B C10D                       	dc.b	nE5, $0D
0008F15D E109                       	smpsAlterNote       $09
0008F15F E701                       	dc.b	smpsNoAttack, $01
0008F161 E106                       	smpsAlterNote       $06
0008F163 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F167 E10C                       	smpsAlterNote       $0C
0008F169 E701                       	dc.b	smpsNoAttack, $01
0008F16B E110                       	smpsAlterNote       $10
0008F16D E701                       	dc.b	smpsNoAttack, $01
0008F16F E10F                       	smpsAlterNote       $0F
0008F171 E701                       	dc.b	smpsNoAttack, $01
0008F173 E109                       	smpsAlterNote       $09
0008F175 E701                       	dc.b	smpsNoAttack, $01
0008F177 E105                       	smpsAlterNote       $05
0008F179 E701                       	dc.b	smpsNoAttack, $01
0008F17B E109                       	smpsAlterNote       $09
0008F17D E701                       	dc.b	smpsNoAttack, $01
0008F17F E10C                       	smpsAlterNote       $0C
0008F181 E701                       	dc.b	smpsNoAttack, $01
0008F183 E110                       	smpsAlterNote       $10
0008F185 E701                       	dc.b	smpsNoAttack, $01
0008F187 E10C                       	smpsAlterNote       $0C
0008F189 E701                       	dc.b	smpsNoAttack, $01
0008F18B E106                       	smpsAlterNote       $06
0008F18D E701                       	dc.b	smpsNoAttack, $01
0008F18F E105                       	smpsAlterNote       $05
0008F191 E701                       	dc.b	smpsNoAttack, $01
0008F193 E109                       	smpsAlterNote       $09
0008F195 E701                       	dc.b	smpsNoAttack, $01
0008F197 E10F                       	smpsAlterNote       $0F
0008F199 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F19D E10C                       	smpsAlterNote       $0C
0008F19F E701                       	dc.b	smpsNoAttack, $01
0008F1A1 E106                       	smpsAlterNote       $06
0008F1A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1A7 E10C                       	smpsAlterNote       $0C
0008F1A9 E701                       	dc.b	smpsNoAttack, $01
0008F1AB E10F                       	smpsAlterNote       $0F
0008F1AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1B1 E109                       	smpsAlterNote       $09
0008F1B3 E701                       	dc.b	smpsNoAttack, $01
0008F1B5 E105                       	smpsAlterNote       $05
0008F1B7 E701                       	dc.b	smpsNoAttack, $01
0008F1B9 E106                       	smpsAlterNote       $06
0008F1BB E701                       	dc.b	smpsNoAttack, $01
0008F1BD E10C                       	smpsAlterNote       $0C
0008F1BF E701                       	dc.b	smpsNoAttack, $01
0008F1C1 E110                       	smpsAlterNote       $10
0008F1C3 E701                       	dc.b	smpsNoAttack, $01
0008F1C5 E10C                       	smpsAlterNote       $0C
0008F1C7 E701                       	dc.b	smpsNoAttack, $01
0008F1C9 E109                       	smpsAlterNote       $09
0008F1CB E701                       	dc.b	smpsNoAttack, $01
0008F1CD E105                       	smpsAlterNote       $05
0008F1CF E701                       	dc.b	smpsNoAttack, $01
0008F1D1 E109                       	smpsAlterNote       $09
0008F1D3 E701                       	dc.b	smpsNoAttack, $01
0008F1D5 E10F                       	smpsAlterNote       $0F
0008F1D7 E701                       	dc.b	smpsNoAttack, $01
0008F1D9 E110                       	smpsAlterNote       $10
0008F1DB E701                       	dc.b	smpsNoAttack, $01
0008F1DD E10C                       	smpsAlterNote       $0C
0008F1DF E701                       	dc.b	smpsNoAttack, $01
0008F1E1 E106                       	smpsAlterNote       $06
0008F1E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1E7 E109                       	smpsAlterNote       $09
0008F1E9 E701                       	dc.b	smpsNoAttack, $01
0008F1EB E10F                       	smpsAlterNote       $0F
0008F1ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1F1 E109                       	smpsAlterNote       $09
0008F1F3 E701                       	dc.b	smpsNoAttack, $01
0008F1F5 E106                       	smpsAlterNote       $06
0008F1F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1FB E10C                       	smpsAlterNote       $0C
0008F1FD E701                       	dc.b	smpsNoAttack, $01
0008F1FF E110                       	smpsAlterNote       $10
0008F201 E701                       	dc.b	smpsNoAttack, $01
0008F203 E10F                       	smpsAlterNote       $0F
0008F205 E701                       	dc.b	smpsNoAttack, $01
0008F207 E109                       	smpsAlterNote       $09
0008F209 E701                       	dc.b	smpsNoAttack, $01
0008F20B E105                       	smpsAlterNote       $05
0008F20D E701                       	dc.b	smpsNoAttack, $01
0008F20F E109                       	smpsAlterNote       $09
0008F211 E701                       	dc.b	smpsNoAttack, $01
0008F213 E10F                       	smpsAlterNote       $0F
0008F215 E701                       	dc.b	smpsNoAttack, $01
0008F217 E110                       	smpsAlterNote       $10
0008F219 E701                       	dc.b	smpsNoAttack, $01
0008F21B E10C                       	smpsAlterNote       $0C
0008F21D E701                       	dc.b	smpsNoAttack, $01
0008F21F E106                       	smpsAlterNote       $06
0008F221 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F225 E109                       	smpsAlterNote       $09
0008F227 E701                       	dc.b	smpsNoAttack, $01
0008F229 E10F                       	smpsAlterNote       $0F
0008F22B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F22F E109                       	smpsAlterNote       $09
0008F231 E701                       	dc.b	smpsNoAttack, $01
0008F233 E106                       	smpsAlterNote       $06
0008F235 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F239 E10C                       	smpsAlterNote       $0C
0008F23B E701                       	dc.b	smpsNoAttack, $01
0008F23D E110                       	smpsAlterNote       $10
0008F23F E701                       	dc.b	smpsNoAttack, $01
0008F241 E10F                       	smpsAlterNote       $0F
0008F243 E701                       	dc.b	smpsNoAttack, $01
0008F245 E109                       	smpsAlterNote       $09
0008F247 E701                       	dc.b	smpsNoAttack, $01
0008F249 E105                       	smpsAlterNote       $05
0008F24B E701                       	dc.b	smpsNoAttack, $01
0008F24D E109                       	smpsAlterNote       $09
0008F24F E701                       	dc.b	smpsNoAttack, $01
0008F251 E10C                       	smpsAlterNote       $0C
0008F253 E701                       	dc.b	smpsNoAttack, $01
0008F255 E110                       	smpsAlterNote       $10
0008F257 E701                       	dc.b	smpsNoAttack, $01
0008F259 E10C                       	smpsAlterNote       $0C
0008F25B E701                       	dc.b	smpsNoAttack, $01
0008F25D E106                       	smpsAlterNote       $06
0008F25F E701                       	dc.b	smpsNoAttack, $01
0008F261 E105                       	smpsAlterNote       $05
0008F263 E701                       	dc.b	smpsNoAttack, $01
0008F265 E109                       	smpsAlterNote       $09
0008F267 E701                       	dc.b	smpsNoAttack, $01
0008F269 E10F                       	smpsAlterNote       $0F
0008F26B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F26F E10C                       	smpsAlterNote       $0C
0008F271 E701                       	dc.b	smpsNoAttack, $01
0008F273 E106                       	smpsAlterNote       $06
0008F275 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F279 E10C                       	smpsAlterNote       $0C
0008F27B E701                       	dc.b	smpsNoAttack, $01
0008F27D E10F                       	smpsAlterNote       $0F
0008F27F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F283 E109                       	smpsAlterNote       $09
0008F285 E701                       	dc.b	smpsNoAttack, $01
0008F287 E105                       	smpsAlterNote       $05
0008F289 E701                       	dc.b	smpsNoAttack, $01
0008F28B E106                       	smpsAlterNote       $06
0008F28D E701                       	dc.b	smpsNoAttack, $01
0008F28F E10C                       	smpsAlterNote       $0C
0008F291 E701                       	dc.b	smpsNoAttack, $01
0008F293 E110                       	smpsAlterNote       $10
0008F295 E701                       	dc.b	smpsNoAttack, $01
0008F297 E10C                       	smpsAlterNote       $0C
0008F299 E701                       	dc.b	smpsNoAttack, $01
0008F29B E109                       	smpsAlterNote       $09
0008F29D E701                       	dc.b	smpsNoAttack, $01
0008F29F E105                       	smpsAlterNote       $05
0008F2A1 E701                       	dc.b	smpsNoAttack, $01
0008F2A3 E109                       	smpsAlterNote       $09
0008F2A5 E701                       	dc.b	smpsNoAttack, $01
0008F2A7 E10F                       	smpsAlterNote       $0F
0008F2A9 E701                       	dc.b	smpsNoAttack, $01
0008F2AB E110                       	smpsAlterNote       $10
0008F2AD E701                       	dc.b	smpsNoAttack, $01
0008F2AF E10C                       	smpsAlterNote       $0C
0008F2B1 E701                       	dc.b	smpsNoAttack, $01
0008F2B3 E106                       	smpsAlterNote       $06
0008F2B5 E701                       	dc.b	smpsNoAttack, $01
0008F2B7 E10B                       	smpsAlterNote       $0B
0008F2B9 BF02                       	dc.b	nD5, $02
0008F2BB E10C                       	smpsAlterNote       $0C
0008F2BD C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008F2C3 E109                       	smpsAlterNote       $09
0008F2C5 E701                       	dc.b	smpsNoAttack, $01
0008F2C7 E105                       	smpsAlterNote       $05
0008F2C9 E701                       	dc.b	smpsNoAttack, $01
0008F2CB E109                       	smpsAlterNote       $09
0008F2CD E701                       	dc.b	smpsNoAttack, $01
0008F2CF E10F                       	smpsAlterNote       $0F
0008F2D1 E701                       	dc.b	smpsNoAttack, $01
0008F2D3 E110                       	smpsAlterNote       $10
0008F2D5 E701                       	dc.b	smpsNoAttack, $01
0008F2D7 E10C                       	smpsAlterNote       $0C
0008F2D9 E701                       	dc.b	smpsNoAttack, $01
0008F2DB E106                       	smpsAlterNote       $06
0008F2DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2E1 E109                       	smpsAlterNote       $09
0008F2E3 E701                       	dc.b	smpsNoAttack, $01
0008F2E5 E10F                       	smpsAlterNote       $0F
0008F2E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2EB E109                       	smpsAlterNote       $09
0008F2ED E701                       	dc.b	smpsNoAttack, $01
0008F2EF E106                       	smpsAlterNote       $06
0008F2F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2F5 E10C                       	smpsAlterNote       $0C
0008F2F7 E701                       	dc.b	smpsNoAttack, $01
0008F2F9 E110                       	smpsAlterNote       $10
0008F2FB E701                       	dc.b	smpsNoAttack, $01
0008F2FD E10F                       	smpsAlterNote       $0F
0008F2FF E701                       	dc.b	smpsNoAttack, $01
0008F301 E109                       	smpsAlterNote       $09
0008F303 E701                       	dc.b	smpsNoAttack, $01
0008F305 E105                       	smpsAlterNote       $05
0008F307 E701                       	dc.b	smpsNoAttack, $01
0008F309 E109                       	smpsAlterNote       $09
0008F30B E701                       	dc.b	smpsNoAttack, $01
0008F30D E10C                       	smpsAlterNote       $0C
0008F30F E701                       	dc.b	smpsNoAttack, $01
0008F311 E110                       	smpsAlterNote       $10
0008F313 E701                       	dc.b	smpsNoAttack, $01
0008F315 E10C                       	smpsAlterNote       $0C
0008F317 E701                       	dc.b	smpsNoAttack, $01
0008F319 E106                       	smpsAlterNote       $06
0008F31B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F31F E10D                       	smpsAlterNote       $0D
0008F321 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008F329 E10C                       	smpsAlterNote       $0C
0008F32B C10D                       	dc.b	nE5, $0D
0008F32D E106                       	smpsAlterNote       $06
0008F32F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F333 E109                       	smpsAlterNote       $09
0008F335 E701                       	dc.b	smpsNoAttack, $01
0008F337 E10F                       	smpsAlterNote       $0F
0008F339 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F33D E109                       	smpsAlterNote       $09
0008F33F E701                       	dc.b	smpsNoAttack, $01
0008F341 E106                       	smpsAlterNote       $06
0008F343 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F347 E10C                       	smpsAlterNote       $0C
0008F349 E701                       	dc.b	smpsNoAttack, $01
0008F34B E110                       	smpsAlterNote       $10
0008F34D E701                       	dc.b	smpsNoAttack, $01
0008F34F E10F                       	smpsAlterNote       $0F
0008F351 E701                       	dc.b	smpsNoAttack, $01
0008F353 E109                       	smpsAlterNote       $09
0008F355 E701                       	dc.b	smpsNoAttack, $01
0008F357 E105                       	smpsAlterNote       $05
0008F359 E701                       	dc.b	smpsNoAttack, $01
0008F35B E106                       	smpsAlterNote       $06
0008F35D 800F                       	dc.b	nRst, $0F
0008F361 E6FF                       	smpsAlterVol        $FF
0008F363 E10F                       	smpsAlterNote       $0F
0008F365 BA01                       	dc.b	nA4, $01
0008F367 E110                       	smpsAlterNote       $10
0008F369 BB02                       	dc.b	nBb4, $02
0008F36B E10F                       	smpsAlterNote       $0F
0008F36D BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008F373 E10B                       	smpsAlterNote       $0B
0008F375 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008F379 E10C                       	smpsAlterNote       $0C
0008F37B C103                       	dc.b	nE5, $03
0008F37D E10D                       	smpsAlterNote       $0D
0008F37F C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008F389 E10B                       	smpsAlterNote       $0B
0008F38B BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008F38F E104                       	smpsAlterNote       $04
0008F391 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F395 E10A                       	smpsAlterNote       $0A
0008F397 E701                       	dc.b	smpsNoAttack, $01
0008F399 E10D                       	smpsAlterNote       $0D
0008F39B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F39F E107                       	smpsAlterNote       $07
0008F3A1 E701                       	dc.b	smpsNoAttack, $01
0008F3A3 E104                       	smpsAlterNote       $04
0008F3A5 8001                       	dc.b	nRst, $01
0008F3A7 E110                       	smpsAlterNote       $10
0008F3A9 C703                       	dc.b	nBb5, $03
0008F3AB E10F                       	smpsAlterNote       $0F
0008F3AD C603 8001                  	dc.b	nA5, $03, nRst, $01
0008F3B1 E10D                       	smpsAlterNote       $0D
0008F3B3 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008F3B7 E10C                       	smpsAlterNote       $0C
0008F3B9 E701                       	dc.b	smpsNoAttack, $01
0008F3BB E108                       	smpsAlterNote       $08
0008F3BD E701                       	dc.b	smpsNoAttack, $01
0008F3BF E109                       	smpsAlterNote       $09
0008F3C1 E701                       	dc.b	smpsNoAttack, $01
0008F3C3 E10F                       	smpsAlterNote       $0F
0008F3C5 E701                       	dc.b	smpsNoAttack, $01
0008F3C7 E113                       	smpsAlterNote       $13
0008F3C9 E701                       	dc.b	smpsNoAttack, $01
0008F3CB E10F                       	smpsAlterNote       $0F
0008F3CD E701                       	dc.b	smpsNoAttack, $01
0008F3CF E10C                       	smpsAlterNote       $0C
0008F3D1 E701                       	dc.b	smpsNoAttack, $01
0008F3D3 E108                       	smpsAlterNote       $08
0008F3D5 E701                       	dc.b	smpsNoAttack, $01
0008F3D7 E10C                       	smpsAlterNote       $0C
0008F3D9 E701                       	dc.b	smpsNoAttack, $01
0008F3DB E112                       	smpsAlterNote       $12
0008F3DD E701                       	dc.b	smpsNoAttack, $01
0008F3DF E113                       	smpsAlterNote       $13
0008F3E1 E701                       	dc.b	smpsNoAttack, $01
0008F3E3 E10F                       	smpsAlterNote       $0F
0008F3E5 E701                       	dc.b	smpsNoAttack, $01
0008F3E7 E109                       	smpsAlterNote       $09
0008F3E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F3ED E10C                       	smpsAlterNote       $0C
0008F3EF E701                       	dc.b	smpsNoAttack, $01
0008F3F1 E112                       	smpsAlterNote       $12
0008F3F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F3F7 E10C                       	smpsAlterNote       $0C
0008F3F9 E701                       	dc.b	smpsNoAttack, $01
0008F3FB E109                       	smpsAlterNote       $09
0008F3FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F401 E10F                       	smpsAlterNote       $0F
0008F403 E701                       	dc.b	smpsNoAttack, $01
0008F405 E113                       	smpsAlterNote       $13
0008F407 E701                       	dc.b	smpsNoAttack, $01
0008F409 E112                       	smpsAlterNote       $12
0008F40B E701                       	dc.b	smpsNoAttack, $01
0008F40D E10C                       	smpsAlterNote       $0C
0008F40F E701                       	dc.b	smpsNoAttack, $01
0008F411 E108                       	smpsAlterNote       $08
0008F413 E701                       	dc.b	smpsNoAttack, $01
0008F415 E10C                       	smpsAlterNote       $0C
0008F417 E701                       	dc.b	smpsNoAttack, $01
0008F419 E10F                       	smpsAlterNote       $0F
0008F41B E701                       	dc.b	smpsNoAttack, $01
0008F41D E113                       	smpsAlterNote       $13
0008F41F E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008F423 E10B                       	smpsAlterNote       $0B
0008F425 BF03                       	dc.b	nD5, $03
0008F427 E10C                       	smpsAlterNote       $0C
0008F429 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008F42D E10D                       	smpsAlterNote       $0D
0008F42F C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008F439 E10B                       	smpsAlterNote       $0B
0008F43B BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008F447 E110                       	smpsAlterNote       $10
0008F449 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008F44D E10F                       	smpsAlterNote       $0F
0008F44F C604                       	dc.b	nA5, $04
0008F451 E10D                       	smpsAlterNote       $0D
0008F453 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008F459 E109                       	smpsAlterNote       $09
0008F45B E701                       	dc.b	smpsNoAttack, $01
0008F45D E108                       	smpsAlterNote       $08
0008F45F E701                       	dc.b	smpsNoAttack, $01
0008F461 E10C                       	smpsAlterNote       $0C
0008F463 E701                       	dc.b	smpsNoAttack, $01
0008F465 E112                       	smpsAlterNote       $12
0008F467 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F46B E10F                       	smpsAlterNote       $0F
0008F46D E701                       	dc.b	smpsNoAttack, $01
0008F46F E109                       	smpsAlterNote       $09
0008F471 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F475 E10F                       	smpsAlterNote       $0F
0008F477 E701                       	dc.b	smpsNoAttack, $01
0008F479 E112                       	smpsAlterNote       $12
0008F47B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F47F E10C                       	smpsAlterNote       $0C
0008F481 E701                       	dc.b	smpsNoAttack, $01
0008F483 E108                       	smpsAlterNote       $08
0008F485 E701                       	dc.b	smpsNoAttack, $01
0008F487 E109                       	smpsAlterNote       $09
0008F489 E701                       	dc.b	smpsNoAttack, $01
0008F48B E10F                       	smpsAlterNote       $0F
0008F48D E701                       	dc.b	smpsNoAttack, $01
0008F48F E113                       	smpsAlterNote       $13
0008F491 E701                       	dc.b	smpsNoAttack, $01
0008F493 E10F                       	smpsAlterNote       $0F
0008F495 E701                       	dc.b	smpsNoAttack, $01
0008F497 E10C                       	smpsAlterNote       $0C
0008F499 E701                       	dc.b	smpsNoAttack, $01
0008F49B E108                       	smpsAlterNote       $08
0008F49D E701                       	dc.b	smpsNoAttack, $01
0008F49F E10C                       	smpsAlterNote       $0C
0008F4A1 E701                       	dc.b	smpsNoAttack, $01
0008F4A3 E112                       	smpsAlterNote       $12
0008F4A5 E701                       	dc.b	smpsNoAttack, $01
0008F4A7 E113                       	smpsAlterNote       $13
0008F4A9 E701                       	dc.b	smpsNoAttack, $01
0008F4AB E10F                       	smpsAlterNote       $0F
0008F4AD E701                       	dc.b	smpsNoAttack, $01
0008F4AF E109                       	smpsAlterNote       $09
0008F4B1 E701                       	dc.b	smpsNoAttack, $01
0008F4B3 E10D                       	smpsAlterNote       $0D
0008F4B5 C402                       	dc.b	nG5, $02
0008F4B7 E10F                       	smpsAlterNote       $0F
0008F4B9 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0008F4C3 E10D                       	smpsAlterNote       $0D
0008F4C5 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008F4CB E10B                       	smpsAlterNote       $0B
0008F4CD BF0D                       	dc.b	nD5, $0D
0008F4CF E108                       	smpsAlterNote       $08
0008F4D1 E701                       	dc.b	smpsNoAttack, $01
0008F4D3 E104                       	smpsAlterNote       $04
0008F4D5 E701                       	dc.b	smpsNoAttack, $01
0008F4D7 E105                       	smpsAlterNote       $05
0008F4D9 E701                       	dc.b	smpsNoAttack, $01
0008F4DB E10B                       	smpsAlterNote       $0B
0008F4DD E701                       	dc.b	smpsNoAttack, $01
0008F4DF E10F                       	smpsAlterNote       $0F
0008F4E1 E701                       	dc.b	smpsNoAttack, $01
0008F4E3 E10B                       	smpsAlterNote       $0B
0008F4E5 E701                       	dc.b	smpsNoAttack, $01
0008F4E7 E108                       	smpsAlterNote       $08
0008F4E9 E701                       	dc.b	smpsNoAttack, $01
0008F4EB E104                       	smpsAlterNote       $04
0008F4ED E701                       	dc.b	smpsNoAttack, $01
0008F4EF E108                       	smpsAlterNote       $08
0008F4F1 E701                       	dc.b	smpsNoAttack, $01
0008F4F3 E10E                       	smpsAlterNote       $0E
0008F4F5 E701                       	dc.b	smpsNoAttack, $01
0008F4F7 E10F                       	smpsAlterNote       $0F
0008F4F9 E701                       	dc.b	smpsNoAttack, $01
0008F4FB E10C                       	smpsAlterNote       $0C
0008F4FD C101                       	dc.b	nE5, $01
0008F4FF E10D                       	smpsAlterNote       $0D
0008F501 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008F509 E10F                       	smpsAlterNote       $0F
0008F50B C607                       	dc.b	nA5, $07
0008F50D E10C                       	smpsAlterNote       $0C
0008F50F CD07                       	dc.b	nE6, $07
0008F511 E10D                       	smpsAlterNote       $0D
0008F513 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008F517 E10C                       	smpsAlterNote       $0C
0008F519 CD03                       	dc.b	nE6, $03
0008F51B E10A                       	smpsAlterNote       $0A
0008F51D C903 8001                  	dc.b	nC6, $03, nRst, $01
0008F521 E10D                       	smpsAlterNote       $0D
0008F523 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008F529 E10A                       	smpsAlterNote       $0A
0008F52B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F52F E110                       	smpsAlterNote       $10
0008F531 E701                       	dc.b	smpsNoAttack, $01
0008F533 E114                       	smpsAlterNote       $14
0008F535 E701                       	dc.b	smpsNoAttack, $01
0008F537 E113                       	smpsAlterNote       $13
0008F539 E701                       	dc.b	smpsNoAttack, $01
0008F53B E10D                       	smpsAlterNote       $0D
0008F53D E701                       	dc.b	smpsNoAttack, $01
0008F53F E109                       	smpsAlterNote       $09
0008F541 E701                       	dc.b	smpsNoAttack, $01
0008F543 E10D                       	smpsAlterNote       $0D
0008F545 E701                       	dc.b	smpsNoAttack, $01
0008F547 E110                       	smpsAlterNote       $10
0008F549 E701                       	dc.b	smpsNoAttack, $01
0008F54B E114                       	smpsAlterNote       $14
0008F54D E701                       	dc.b	smpsNoAttack, $01
0008F54F E10F                       	smpsAlterNote       $0F
0008F551 C607                       	dc.b	nA5, $07
0008F553 E10D                       	smpsAlterNote       $0D
0008F555 C40D                       	dc.b	nG5, $0D
0008F557 E10A                       	smpsAlterNote       $0A
0008F559 E701                       	dc.b	smpsNoAttack, $01
0008F55B E106                       	smpsAlterNote       $06
0008F55D E701                       	dc.b	smpsNoAttack, $01
0008F55F E10A                       	smpsAlterNote       $0A
0008F561 E701                       	dc.b	smpsNoAttack, $01
0008F563 E10D                       	smpsAlterNote       $0D
0008F565 E701                       	dc.b	smpsNoAttack, $01
0008F567 E111                       	smpsAlterNote       $11
0008F569 E701                       	dc.b	smpsNoAttack, $01
0008F56B E10D                       	smpsAlterNote       $0D
0008F56D E701                       	dc.b	smpsNoAttack, $01
0008F56F E107                       	smpsAlterNote       $07
0008F571 E701                       	dc.b	smpsNoAttack, $01
0008F573 E106                       	smpsAlterNote       $06
0008F575 E701                       	dc.b	smpsNoAttack, $01
0008F577 E10A                       	smpsAlterNote       $0A
0008F579 E701                       	dc.b	smpsNoAttack, $01
0008F57B E110                       	smpsAlterNote       $10
0008F57D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F581 E10D                       	smpsAlterNote       $0D
0008F583 E701                       	dc.b	smpsNoAttack, $01
0008F585 E107                       	smpsAlterNote       $07
0008F587 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F58B E10F                       	smpsAlterNote       $0F
0008F58D C60E                       	dc.b	nA5, $0E
0008F58F E109                       	smpsAlterNote       $09
0008F591 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F595 E10F                       	smpsAlterNote       $0F
0008F597 E701                       	dc.b	smpsNoAttack, $01
0008F599 E112                       	smpsAlterNote       $12
0008F59B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F59F E10C                       	smpsAlterNote       $0C
0008F5A1 E701                       	dc.b	smpsNoAttack, $01
0008F5A3 E108                       	smpsAlterNote       $08
0008F5A5 E701                       	dc.b	smpsNoAttack, $01
0008F5A7 E109                       	smpsAlterNote       $09
0008F5A9 E701                       	dc.b	smpsNoAttack, $01
0008F5AB E10F                       	smpsAlterNote       $0F
0008F5AD E701                       	dc.b	smpsNoAttack, $01
0008F5AF E113                       	smpsAlterNote       $13
0008F5B1 E701                       	dc.b	smpsNoAttack, $01
0008F5B3 E10F                       	smpsAlterNote       $0F
0008F5B5 E701                       	dc.b	smpsNoAttack, $01
0008F5B7 E10C                       	smpsAlterNote       $0C
0008F5B9 E701                       	dc.b	smpsNoAttack, $01
0008F5BB E108                       	smpsAlterNote       $08
0008F5BD E701                       	dc.b	smpsNoAttack, $01
0008F5BF E109                       	smpsAlterNote       $09
0008F5C1 8001                       	dc.b	nRst, $01
0008F5C3 E110                       	smpsAlterNote       $10
0008F5C5 C70D                       	dc.b	nBb5, $0D
0008F5C7 E10D                       	smpsAlterNote       $0D
0008F5C9 E701                       	dc.b	smpsNoAttack, $01
0008F5CB E109                       	smpsAlterNote       $09
0008F5CD E701                       	dc.b	smpsNoAttack, $01
0008F5CF E10D                       	smpsAlterNote       $0D
0008F5D1 E701                       	dc.b	smpsNoAttack, $01
0008F5D3 E113                       	smpsAlterNote       $13
0008F5D5 E701                       	dc.b	smpsNoAttack, $01
0008F5D7 E114                       	smpsAlterNote       $14
0008F5D9 E701                       	dc.b	smpsNoAttack, $01
0008F5DB E110                       	smpsAlterNote       $10
0008F5DD E701                       	dc.b	smpsNoAttack, $01
0008F5DF E10A                       	smpsAlterNote       $0A
0008F5E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5E5 E10D                       	smpsAlterNote       $0D
0008F5E7 E701                       	dc.b	smpsNoAttack, $01
0008F5E9 E113                       	smpsAlterNote       $13
0008F5EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5EF E10D                       	smpsAlterNote       $0D
0008F5F1 E701                       	dc.b	smpsNoAttack, $01
0008F5F3 E10A                       	smpsAlterNote       $0A
0008F5F5 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008F5FF E10B                       	smpsAlterNote       $0B
0008F601 8001                       	dc.b	nRst, $01
0008F603 E10C                       	smpsAlterNote       $0C
0008F605 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008F609 E10B                       	smpsAlterNote       $0B
0008F60B CB0D                       	dc.b	nD6, $0D
0008F60D E105                       	smpsAlterNote       $05
0008F60F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F613 E108                       	smpsAlterNote       $08
0008F615 E701                       	dc.b	smpsNoAttack, $01
0008F617 E10E                       	smpsAlterNote       $0E
0008F619 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F61D E108                       	smpsAlterNote       $08
0008F61F E701                       	dc.b	smpsNoAttack, $01
0008F621 E105                       	smpsAlterNote       $05
0008F623 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F627 E10B                       	smpsAlterNote       $0B
0008F629 E701                       	dc.b	smpsNoAttack, $01
0008F62B E10F                       	smpsAlterNote       $0F
0008F62D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F631 E10C                       	smpsAlterNote       $0C
0008F633 CC0D                       	dc.b	nEb6, $0D
0008F635 E106                       	smpsAlterNote       $06
0008F637 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F63B E109                       	smpsAlterNote       $09
0008F63D E701                       	dc.b	smpsNoAttack, $01
0008F63F E10C                       	smpsAlterNote       $0C
0008F641 8001                       	dc.b	nRst, $01
0008F643 E10A                       	smpsAlterNote       $0A
0008F645 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008F651 CB0E                       	dc.b	nD6, $0E
0008F653 E105                       	smpsAlterNote       $05
0008F655 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F659 E10B                       	smpsAlterNote       $0B
0008F65B E701                       	dc.b	smpsNoAttack, $01
0008F65D E10E                       	smpsAlterNote       $0E
0008F65F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F663 E108                       	smpsAlterNote       $08
0008F665 E701                       	dc.b	smpsNoAttack, $01
0008F667 E104                       	smpsAlterNote       $04
0008F669 E701                       	dc.b	smpsNoAttack, $01
0008F66B E105                       	smpsAlterNote       $05
0008F66D E701                       	dc.b	smpsNoAttack, $01
0008F66F E10B                       	smpsAlterNote       $0B
0008F671 E701                       	dc.b	smpsNoAttack, $01
0008F673 E10F                       	smpsAlterNote       $0F
0008F675 E701                       	dc.b	smpsNoAttack, $01
0008F677 E10D                       	smpsAlterNote       $0D
0008F679 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008F67D E10C                       	smpsAlterNote       $0C
0008F67F CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0008F683 E10A                       	smpsAlterNote       $0A
0008F685 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008F691 CB0D                       	dc.b	nD6, $0D
0008F693 E108                       	smpsAlterNote       $08
0008F695 E701                       	dc.b	smpsNoAttack, $01
0008F697 E104                       	smpsAlterNote       $04
0008F699 E701                       	dc.b	smpsNoAttack, $01
0008F69B E105                       	smpsAlterNote       $05
0008F69D E701                       	dc.b	smpsNoAttack, $01
0008F69F E10B                       	smpsAlterNote       $0B
0008F6A1 E701                       	dc.b	smpsNoAttack, $01
0008F6A3 E10F                       	smpsAlterNote       $0F
0008F6A5 E701                       	dc.b	smpsNoAttack, $01
0008F6A7 E10B                       	smpsAlterNote       $0B
0008F6A9 E701                       	dc.b	smpsNoAttack, $01
0008F6AB E108                       	smpsAlterNote       $08
0008F6AD E701                       	dc.b	smpsNoAttack, $01
0008F6AF E104                       	smpsAlterNote       $04
0008F6B1 E701                       	dc.b	smpsNoAttack, $01
0008F6B3 E108                       	smpsAlterNote       $08
0008F6B5 E701                       	dc.b	smpsNoAttack, $01
0008F6B7 E10E                       	smpsAlterNote       $0E
0008F6B9 E701                       	dc.b	smpsNoAttack, $01
0008F6BB E10F                       	smpsAlterNote       $0F
0008F6BD E701                       	dc.b	smpsNoAttack, $01
0008F6BF E10C                       	smpsAlterNote       $0C
0008F6C1 CC0D                       	dc.b	nEb6, $0D
0008F6C3 E109                       	smpsAlterNote       $09
0008F6C5 E701                       	dc.b	smpsNoAttack, $01
0008F6C7 E105                       	smpsAlterNote       $05
0008F6C9 E701                       	dc.b	smpsNoAttack, $01
0008F6CB E106                       	smpsAlterNote       $06
0008F6CD E701                       	dc.b	smpsNoAttack, $01
0008F6CF E10C                       	smpsAlterNote       $0C
0008F6D1 E701                       	dc.b	smpsNoAttack, $01
0008F6D3 E10A                       	smpsAlterNote       $0A
0008F6D5 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008F6E1 CB0D                       	dc.b	nD6, $0D
0008F6E3 E108                       	smpsAlterNote       $08
0008F6E5 E701                       	dc.b	smpsNoAttack, $01
0008F6E7 E104                       	smpsAlterNote       $04
0008F6E9 E701                       	dc.b	smpsNoAttack, $01
0008F6EB E108                       	smpsAlterNote       $08
0008F6ED E701                       	dc.b	smpsNoAttack, $01
0008F6EF E10B                       	smpsAlterNote       $0B
0008F6F1 E701                       	dc.b	smpsNoAttack, $01
0008F6F3 E10F                       	smpsAlterNote       $0F
0008F6F5 E701                       	dc.b	smpsNoAttack, $01
0008F6F7 E10B                       	smpsAlterNote       $0B
0008F6F9 E701                       	dc.b	smpsNoAttack, $01
0008F6FB E105                       	smpsAlterNote       $05
0008F6FD E701                       	dc.b	smpsNoAttack, $01
0008F6FF E104                       	smpsAlterNote       $04
0008F701 E701                       	dc.b	smpsNoAttack, $01
0008F703 E108                       	smpsAlterNote       $08
0008F705 E701                       	dc.b	smpsNoAttack, $01
0008F707 E10E                       	smpsAlterNote       $0E
0008F709 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F70D E10B                       	smpsAlterNote       $0B
0008F70F E701                       	dc.b	smpsNoAttack, $01
0008F711 E105                       	smpsAlterNote       $05
0008F713 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008F71B 03                         	dc.b	$03
0008F71C E601                       	smpsAlterVol        $01
0008F71E F6F1 D1                    	smpsJump            music84_Jump01
0008F721                            
0008F721                            ; FM5 Data
0008F721                            music84_FM5:
0008F723 E080                       	smpsPan             panLeft, $00
0008F725 8003                       	dc.b	nRst, $03
0008F727 E10D                       	smpsAlterNote       $0D
0008F729 C203 8008                  	dc.b	nF5, $03, nRst, $08
0008F72D E10C                       	smpsAlterNote       $0C
0008F72F C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008F733 E10F                       	smpsAlterNote       $0F
0008F735 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008F73B E6FE                       	smpsAlterVol        $FE
0008F73D C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008F743 E10D                       	smpsAlterNote       $0D
0008F745 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008F74B E10C                       	smpsAlterNote       $0C
0008F74D C102 8001                  	dc.b	nE5, $02, nRst, $01
0008F751 E10A                       	smpsAlterNote       $0A
0008F753 BD01 8001                  	dc.b	nC5, $01, nRst, $01
0008F759 03                         	dc.b	$03
0008F75A                            
0008F75A                            music84_Jump00:
0008F75A 8004                       	dc.b	nRst, $04
0008F75C E602                       	smpsAlterVol        $02
0008F75E E10D                       	smpsAlterNote       $0D
0008F760 B60D                       	dc.b	nF4, $0D
0008F762 E107                       	smpsAlterNote       $07
0008F764 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F768 E10A                       	smpsAlterNote       $0A
0008F76A E701                       	dc.b	smpsNoAttack, $01
0008F76C E110                       	smpsAlterNote       $10
0008F76E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F772 E10A                       	smpsAlterNote       $0A
0008F774 E701                       	dc.b	smpsNoAttack, $01
0008F776 E107                       	smpsAlterNote       $07
0008F778 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F77C E10D                       	smpsAlterNote       $0D
0008F77E E701                       	dc.b	smpsNoAttack, $01
0008F780 E111                       	smpsAlterNote       $11
0008F782 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F786 E10D                       	smpsAlterNote       $0D
0008F788 B80D                       	dc.b	nG4, $0D
0008F78A E107                       	smpsAlterNote       $07
0008F78C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F790 E10A                       	smpsAlterNote       $0A
0008F792 E701                       	dc.b	smpsNoAttack, $01
0008F794 E110                       	smpsAlterNote       $10
0008F796 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F79A E10A                       	smpsAlterNote       $0A
0008F79C E701                       	dc.b	smpsNoAttack, $01
0008F79E E107                       	smpsAlterNote       $07
0008F7A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7A4 E10D                       	smpsAlterNote       $0D
0008F7A6 E701                       	dc.b	smpsNoAttack, $01
0008F7A8 E111                       	smpsAlterNote       $11
0008F7AA E701                       	dc.b	smpsNoAttack, $01
0008F7AC E110                       	smpsAlterNote       $10
0008F7AE E701                       	dc.b	smpsNoAttack, $01
0008F7B0 E10A                       	smpsAlterNote       $0A
0008F7B2 E701                       	dc.b	smpsNoAttack, $01
0008F7B4 E106                       	smpsAlterNote       $06
0008F7B6 E701                       	dc.b	smpsNoAttack, $01
0008F7B8 E10A                       	smpsAlterNote       $0A
0008F7BA E701                       	dc.b	smpsNoAttack, $01
0008F7BC E10D                       	smpsAlterNote       $0D
0008F7BE E701                       	dc.b	smpsNoAttack, $01
0008F7C0 E111                       	smpsAlterNote       $11
0008F7C2 E701                       	dc.b	smpsNoAttack, $01
0008F7C4 E10D                       	smpsAlterNote       $0D
0008F7C6 E701                       	dc.b	smpsNoAttack, $01
0008F7C8 E10F                       	smpsAlterNote       $0F
0008F7CA BA0E                       	dc.b	nA4, $0E
0008F7CC E109                       	smpsAlterNote       $09
0008F7CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7D2 E10F                       	smpsAlterNote       $0F
0008F7D4 E701                       	dc.b	smpsNoAttack, $01
0008F7D6 E112                       	smpsAlterNote       $12
0008F7D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7DC E10C                       	smpsAlterNote       $0C
0008F7DE E701                       	dc.b	smpsNoAttack, $01
0008F7E0 E108                       	smpsAlterNote       $08
0008F7E2 E701                       	dc.b	smpsNoAttack, $01
0008F7E4 E109                       	smpsAlterNote       $09
0008F7E6 E701                       	dc.b	smpsNoAttack, $01
0008F7E8 E10F                       	smpsAlterNote       $0F
0008F7EA E701                       	dc.b	smpsNoAttack, $01
0008F7EC E113                       	smpsAlterNote       $13
0008F7EE E701                       	dc.b	smpsNoAttack, $01
0008F7F0 E10F                       	smpsAlterNote       $0F
0008F7F2 E701                       	dc.b	smpsNoAttack, $01
0008F7F4 E109                       	smpsAlterNote       $09
0008F7F6 E701                       	dc.b	smpsNoAttack, $01
0008F7F8 E108                       	smpsAlterNote       $08
0008F7FA E701                       	dc.b	smpsNoAttack, $01
0008F7FC E10C                       	smpsAlterNote       $0C
0008F7FE E701                       	dc.b	smpsNoAttack, $01
0008F800 E112                       	smpsAlterNote       $12
0008F802 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F806 E10F                       	smpsAlterNote       $0F
0008F808 E701                       	dc.b	smpsNoAttack, $01
0008F80A E109                       	smpsAlterNote       $09
0008F80C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F810 E10F                       	smpsAlterNote       $0F
0008F812 E701                       	dc.b	smpsNoAttack, $01
0008F814 E112                       	smpsAlterNote       $12
0008F816 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F81A E10C                       	smpsAlterNote       $0C
0008F81C E701                       	dc.b	smpsNoAttack, $01
0008F81E E108                       	smpsAlterNote       $08
0008F820 E701                       	dc.b	smpsNoAttack, $01
0008F822 E109                       	smpsAlterNote       $09
0008F824 E701                       	dc.b	smpsNoAttack, $01
0008F826 E10F                       	smpsAlterNote       $0F
0008F828 E701                       	dc.b	smpsNoAttack, $01
0008F82A E113                       	smpsAlterNote       $13
0008F82C E701                       	dc.b	smpsNoAttack, $01
0008F82E E10F                       	smpsAlterNote       $0F
0008F830 E701                       	dc.b	smpsNoAttack, $01
0008F832 E10C                       	smpsAlterNote       $0C
0008F834 E701                       	dc.b	smpsNoAttack, $01
0008F836 E108                       	smpsAlterNote       $08
0008F838 E701                       	dc.b	smpsNoAttack, $01
0008F83A E109                       	smpsAlterNote       $09
0008F83C 8001                       	dc.b	nRst, $01
0008F83E E10C                       	smpsAlterNote       $0C
0008F840 B50A                       	dc.b	nE4, $0A
0008F842 E10D                       	smpsAlterNote       $0D
0008F844 B60D                       	dc.b	nF4, $0D
0008F846 E10A                       	smpsAlterNote       $0A
0008F848 E701                       	dc.b	smpsNoAttack, $01
0008F84A E106                       	smpsAlterNote       $06
0008F84C E701                       	dc.b	smpsNoAttack, $01
0008F84E E107                       	smpsAlterNote       $07
0008F850 E701                       	dc.b	smpsNoAttack, $01
0008F852 E10D                       	smpsAlterNote       $0D
0008F854 E701                       	dc.b	smpsNoAttack, $01
0008F856 E111                       	smpsAlterNote       $11
0008F858 E701                       	dc.b	smpsNoAttack, $01
0008F85A E10D                       	smpsAlterNote       $0D
0008F85C E701                       	dc.b	smpsNoAttack, $01
0008F85E E10A                       	smpsAlterNote       $0A
0008F860 E701                       	dc.b	smpsNoAttack, $01
0008F862 E106                       	smpsAlterNote       $06
0008F864 E701                       	dc.b	smpsNoAttack, $01
0008F866 E10A                       	smpsAlterNote       $0A
0008F868 E701                       	dc.b	smpsNoAttack, $01
0008F86A E110                       	smpsAlterNote       $10
0008F86C E701                       	dc.b	smpsNoAttack, $01
0008F86E E111                       	smpsAlterNote       $11
0008F870 E701                       	dc.b	smpsNoAttack, $01
0008F872 E10D                       	smpsAlterNote       $0D
0008F874 B80D                       	dc.b	nG4, $0D
0008F876 E10A                       	smpsAlterNote       $0A
0008F878 E701                       	dc.b	smpsNoAttack, $01
0008F87A E106                       	smpsAlterNote       $06
0008F87C E701                       	dc.b	smpsNoAttack, $01
0008F87E E107                       	smpsAlterNote       $07
0008F880 E701                       	dc.b	smpsNoAttack, $01
0008F882 E10D                       	smpsAlterNote       $0D
0008F884 E701                       	dc.b	smpsNoAttack, $01
0008F886 E111                       	smpsAlterNote       $11
0008F888 E701                       	dc.b	smpsNoAttack, $01
0008F88A E10D                       	smpsAlterNote       $0D
0008F88C E701                       	dc.b	smpsNoAttack, $01
0008F88E E10A                       	smpsAlterNote       $0A
0008F890 E701                       	dc.b	smpsNoAttack, $01
0008F892 E106                       	smpsAlterNote       $06
0008F894 E701                       	dc.b	smpsNoAttack, $01
0008F896 E10A                       	smpsAlterNote       $0A
0008F898 E701                       	dc.b	smpsNoAttack, $01
0008F89A E110                       	smpsAlterNote       $10
0008F89C E701                       	dc.b	smpsNoAttack, $01
0008F89E E111                       	smpsAlterNote       $11
0008F8A0 E701                       	dc.b	smpsNoAttack, $01
0008F8A2 E10D                       	smpsAlterNote       $0D
0008F8A4 E701                       	dc.b	smpsNoAttack, $01
0008F8A6 E107                       	smpsAlterNote       $07
0008F8A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F8AC E10A                       	smpsAlterNote       $0A
0008F8AE E701                       	dc.b	smpsNoAttack, $01
0008F8B0 E110                       	smpsAlterNote       $10
0008F8B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F8B6 E10D                       	smpsAlterNote       $0D
0008F8B8 8001                       	dc.b	nRst, $01
0008F8BA E10F                       	smpsAlterNote       $0F
0008F8BC BA0D                       	dc.b	nA4, $0D
0008F8BE E10C                       	smpsAlterNote       $0C
0008F8C0 E701                       	dc.b	smpsNoAttack, $01
0008F8C2 E108                       	smpsAlterNote       $08
0008F8C4 E701                       	dc.b	smpsNoAttack, $01
0008F8C6 E10C                       	smpsAlterNote       $0C
0008F8C8 E701                       	dc.b	smpsNoAttack, $01
0008F8CA E112                       	smpsAlterNote       $12
0008F8CC E701                       	dc.b	smpsNoAttack, $01
0008F8CE E113                       	smpsAlterNote       $13
0008F8D0 E701                       	dc.b	smpsNoAttack, $01
0008F8D2 E10F                       	smpsAlterNote       $0F
0008F8D4 E701                       	dc.b	smpsNoAttack, $01
0008F8D6 E109                       	smpsAlterNote       $09
0008F8D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F8DC E10C                       	smpsAlterNote       $0C
0008F8DE E701                       	dc.b	smpsNoAttack, $01
0008F8E0 E112                       	smpsAlterNote       $12
0008F8E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F8E6 E10C                       	smpsAlterNote       $0C
0008F8E8 E701                       	dc.b	smpsNoAttack, $01
0008F8EA E109                       	smpsAlterNote       $09
0008F8EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F8F0 E10F                       	smpsAlterNote       $0F
0008F8F2 E701                       	dc.b	smpsNoAttack, $01
0008F8F4 E113                       	smpsAlterNote       $13
0008F8F6 E701                       	dc.b	smpsNoAttack, $01
0008F8F8 E112                       	smpsAlterNote       $12
0008F8FA E701                       	dc.b	smpsNoAttack, $01
0008F8FC E10C                       	smpsAlterNote       $0C
0008F8FE E701                       	dc.b	smpsNoAttack, $01
0008F900 E108                       	smpsAlterNote       $08
0008F902 E701                       	dc.b	smpsNoAttack, $01
0008F904 E10C                       	smpsAlterNote       $0C
0008F906 E701                       	dc.b	smpsNoAttack, $01
0008F908 E10F                       	smpsAlterNote       $0F
0008F90A E701                       	dc.b	smpsNoAttack, $01
0008F90C E113                       	smpsAlterNote       $13
0008F90E E701                       	dc.b	smpsNoAttack, $01
0008F910 E10F                       	smpsAlterNote       $0F
0008F912 E701                       	dc.b	smpsNoAttack, $01
0008F914 E109                       	smpsAlterNote       $09
0008F916 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F91A E10D                       	smpsAlterNote       $0D
0008F91C B609 8001                  	dc.b	nF4, $09, nRst, $01
0008F920 E10C                       	smpsAlterNote       $0C
0008F922 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008F926 E10B                       	smpsAlterNote       $0B
0008F928 B30D                       	dc.b	nD4, $0D
0008F92A E10C                       	smpsAlterNote       $0C
0008F92C B503 8001                  	dc.b	nE4, $03, nRst, $01
0008F930 E10D                       	smpsAlterNote       $0D
0008F932 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008F93A E109                       	smpsAlterNote       $09
0008F93C E701                       	dc.b	smpsNoAttack, $01
0008F93E E108                       	smpsAlterNote       $08
0008F940 E701                       	dc.b	smpsNoAttack, $01
0008F942 E10C                       	smpsAlterNote       $0C
0008F944 E701                       	dc.b	smpsNoAttack, $01
0008F946 E112                       	smpsAlterNote       $12
0008F948 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F94C E10F                       	smpsAlterNote       $0F
0008F94E E701                       	dc.b	smpsNoAttack, $01
0008F950 E109                       	smpsAlterNote       $09
0008F952 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F956 E10F                       	smpsAlterNote       $0F
0008F958 E701                       	dc.b	smpsNoAttack, $01
0008F95A E112                       	smpsAlterNote       $12
0008F95C E701                       	dc.b	smpsNoAttack, $01
0008F95E E113                       	smpsAlterNote       $13
0008F960 8001                       	dc.b	nRst, $01
0008F962 E10D                       	smpsAlterNote       $0D
0008F964 C20D                       	dc.b	nF5, $0D
0008F966 E107                       	smpsAlterNote       $07
0008F968 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F96C E10A                       	smpsAlterNote       $0A
0008F96E E701                       	dc.b	smpsNoAttack, $01
0008F970 E110                       	smpsAlterNote       $10
0008F972 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F976 E10A                       	smpsAlterNote       $0A
0008F978 E701                       	dc.b	smpsNoAttack, $01
0008F97A E107                       	smpsAlterNote       $07
0008F97C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F980 E10D                       	smpsAlterNote       $0D
0008F982 E701                       	dc.b	smpsNoAttack, $01
0008F984 E111                       	smpsAlterNote       $11
0008F986 E701                       	dc.b	smpsNoAttack, $01
0008F988 E110                       	smpsAlterNote       $10
0008F98A E701                       	dc.b	smpsNoAttack, $01
0008F98C E10A                       	smpsAlterNote       $0A
0008F98E E701                       	dc.b	smpsNoAttack, $01
0008F990 E106                       	smpsAlterNote       $06
0008F992 E701                       	dc.b	smpsNoAttack, $01
0008F994 E10A                       	smpsAlterNote       $0A
0008F996 E701                       	dc.b	smpsNoAttack, $01
0008F998 E10D                       	smpsAlterNote       $0D
0008F99A E701                       	dc.b	smpsNoAttack, $01
0008F99C E111                       	smpsAlterNote       $11
0008F99E E701                       	dc.b	smpsNoAttack, $01
0008F9A0 E10D                       	smpsAlterNote       $0D
0008F9A2 E701                       	dc.b	smpsNoAttack, $01
0008F9A4 E107                       	smpsAlterNote       $07
0008F9A6 E701                       	dc.b	smpsNoAttack, $01
0008F9A8 E106                       	smpsAlterNote       $06
0008F9AA E701                       	dc.b	smpsNoAttack, $01
0008F9AC E10A                       	smpsAlterNote       $0A
0008F9AE E701                       	dc.b	smpsNoAttack, $01
0008F9B0 E110                       	smpsAlterNote       $10
0008F9B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9B6 E10D                       	smpsAlterNote       $0D
0008F9B8 E701                       	dc.b	smpsNoAttack, $01
0008F9BA E107                       	smpsAlterNote       $07
0008F9BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9C0 E10D                       	smpsAlterNote       $0D
0008F9C2 E701                       	dc.b	smpsNoAttack, $01
0008F9C4 E110                       	smpsAlterNote       $10
0008F9C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9CA E10A                       	smpsAlterNote       $0A
0008F9CC E701                       	dc.b	smpsNoAttack, $01
0008F9CE E106                       	smpsAlterNote       $06
0008F9D0 E701                       	dc.b	smpsNoAttack, $01
0008F9D2 E107                       	smpsAlterNote       $07
0008F9D4 E701                       	dc.b	smpsNoAttack, $01
0008F9D6 E10D                       	smpsAlterNote       $0D
0008F9D8 E701                       	dc.b	smpsNoAttack, $01
0008F9DA E111                       	smpsAlterNote       $11
0008F9DC E701                       	dc.b	smpsNoAttack, $01
0008F9DE E10D                       	smpsAlterNote       $0D
0008F9E0 E701                       	dc.b	smpsNoAttack, $01
0008F9E2 E10A                       	smpsAlterNote       $0A
0008F9E4 E701                       	dc.b	smpsNoAttack, $01
0008F9E6 E106                       	smpsAlterNote       $06
0008F9E8 E701                       	dc.b	smpsNoAttack, $01
0008F9EA E10A                       	smpsAlterNote       $0A
0008F9EC E701                       	dc.b	smpsNoAttack, $01
0008F9EE E110                       	smpsAlterNote       $10
0008F9F0 E701                       	dc.b	smpsNoAttack, $01
0008F9F2 E111                       	smpsAlterNote       $11
0008F9F4 E701                       	dc.b	smpsNoAttack, $01
0008F9F6 E10D                       	smpsAlterNote       $0D
0008F9F8 E701                       	dc.b	smpsNoAttack, $01
0008F9FA E107                       	smpsAlterNote       $07
0008F9FC E701                       	dc.b	smpsNoAttack, $01
0008F9FE E10D                       	smpsAlterNote       $0D
0008FA00 C207                       	dc.b	nF5, $07
0008FA02 E10C                       	smpsAlterNote       $0C
0008FA04 C10D                       	dc.b	nE5, $0D
0008FA06 E109                       	smpsAlterNote       $09
0008FA08 E701                       	dc.b	smpsNoAttack, $01
0008FA0A E106                       	smpsAlterNote       $06
0008FA0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA10 E10C                       	smpsAlterNote       $0C
0008FA12 E701                       	dc.b	smpsNoAttack, $01
0008FA14 E110                       	smpsAlterNote       $10
0008FA16 E701                       	dc.b	smpsNoAttack, $01
0008FA18 E10F                       	smpsAlterNote       $0F
0008FA1A E701                       	dc.b	smpsNoAttack, $01
0008FA1C E109                       	smpsAlterNote       $09
0008FA1E E701                       	dc.b	smpsNoAttack, $01
0008FA20 E105                       	smpsAlterNote       $05
0008FA22 E701                       	dc.b	smpsNoAttack, $01
0008FA24 E109                       	smpsAlterNote       $09
0008FA26 E701                       	dc.b	smpsNoAttack, $01
0008FA28 E10C                       	smpsAlterNote       $0C
0008FA2A E701                       	dc.b	smpsNoAttack, $01
0008FA2C E110                       	smpsAlterNote       $10
0008FA2E E701                       	dc.b	smpsNoAttack, $01
0008FA30 E10B                       	smpsAlterNote       $0B
0008FA32 BF0D                       	dc.b	nD5, $0D
0008FA34 E108                       	smpsAlterNote       $08
0008FA36 E701                       	dc.b	smpsNoAttack, $01
0008FA38 E105                       	smpsAlterNote       $05
0008FA3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA3E E10B                       	smpsAlterNote       $0B
0008FA40 E701                       	dc.b	smpsNoAttack, $01
0008FA42 E10F                       	smpsAlterNote       $0F
0008FA44 E701                       	dc.b	smpsNoAttack, $01
0008FA46 E10E                       	smpsAlterNote       $0E
0008FA48 E701                       	dc.b	smpsNoAttack, $01
0008FA4A E108                       	smpsAlterNote       $08
0008FA4C E701                       	dc.b	smpsNoAttack, $01
0008FA4E E104                       	smpsAlterNote       $04
0008FA50 E701                       	dc.b	smpsNoAttack, $01
0008FA52 E108                       	smpsAlterNote       $08
0008FA54 E701                       	dc.b	smpsNoAttack, $01
0008FA56 E10E                       	smpsAlterNote       $0E
0008FA58 E701                       	dc.b	smpsNoAttack, $01
0008FA5A E10F                       	smpsAlterNote       $0F
0008FA5C E701                       	dc.b	smpsNoAttack, $01
0008FA5E E10B                       	smpsAlterNote       $0B
0008FA60 E701                       	dc.b	smpsNoAttack, $01
0008FA62 E105                       	smpsAlterNote       $05
0008FA64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA68 E108                       	smpsAlterNote       $08
0008FA6A E701                       	dc.b	smpsNoAttack, $01
0008FA6C E10E                       	smpsAlterNote       $0E
0008FA6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA72 E108                       	smpsAlterNote       $08
0008FA74 E701                       	dc.b	smpsNoAttack, $01
0008FA76 E105                       	smpsAlterNote       $05
0008FA78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA7C E10B                       	smpsAlterNote       $0B
0008FA7E E701                       	dc.b	smpsNoAttack, $01
0008FA80 E10F                       	smpsAlterNote       $0F
0008FA82 E701                       	dc.b	smpsNoAttack, $01
0008FA84 E10E                       	smpsAlterNote       $0E
0008FA86 E701                       	dc.b	smpsNoAttack, $01
0008FA88 E108                       	smpsAlterNote       $08
0008FA8A E701                       	dc.b	smpsNoAttack, $01
0008FA8C E104                       	smpsAlterNote       $04
0008FA8E E701                       	dc.b	smpsNoAttack, $01
0008FA90 E108                       	smpsAlterNote       $08
0008FA92 E701                       	dc.b	smpsNoAttack, $01
0008FA94 E10B                       	smpsAlterNote       $0B
0008FA96 E701                       	dc.b	smpsNoAttack, $01
0008FA98 E10F                       	smpsAlterNote       $0F
0008FA9A E701                       	dc.b	smpsNoAttack, $01
0008FA9C E10B                       	smpsAlterNote       $0B
0008FA9E E701                       	dc.b	smpsNoAttack, $01
0008FAA0 E105                       	smpsAlterNote       $05
0008FAA2 E701                       	dc.b	smpsNoAttack, $01
0008FAA4 E104                       	smpsAlterNote       $04
0008FAA6 E701                       	dc.b	smpsNoAttack, $01
0008FAA8 E108                       	smpsAlterNote       $08
0008FAAA E701                       	dc.b	smpsNoAttack, $01
0008FAAC E10E                       	smpsAlterNote       $0E
0008FAAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAB2 E10B                       	smpsAlterNote       $0B
0008FAB4 E701                       	dc.b	smpsNoAttack, $01
0008FAB6 E105                       	smpsAlterNote       $05
0008FAB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FABC E10B                       	smpsAlterNote       $0B
0008FABE E701                       	dc.b	smpsNoAttack, $01
0008FAC0 E10E                       	smpsAlterNote       $0E
0008FAC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAC6 E108                       	smpsAlterNote       $08
0008FAC8 E701                       	dc.b	smpsNoAttack, $01
0008FACA E105                       	smpsAlterNote       $05
0008FACC 8001                       	dc.b	nRst, $01
0008FAD0 E601                       	smpsAlterVol        $01
0008FAD2 E10B                       	smpsAlterNote       $0B
0008FAD4 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008FAE0 8004                       	dc.b	nRst, $04
0008FAE4 E6FF                       	smpsAlterVol        $FF
0008FAE6 E10D                       	smpsAlterNote       $0D
0008FAE8 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008FAF0 E10C                       	smpsAlterNote       $0C
0008FAF2 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0008FAF7 E10D                       	smpsAlterNote       $0D
0008FAF9 B60D                       	dc.b	nF4, $0D
0008FAFB E10A                       	smpsAlterNote       $0A
0008FAFD E701                       	dc.b	smpsNoAttack, $01
0008FAFF E106                       	smpsAlterNote       $06
0008FB01 E701                       	dc.b	smpsNoAttack, $01
0008FB03 E10A                       	smpsAlterNote       $0A
0008FB05 E701                       	dc.b	smpsNoAttack, $01
0008FB07 E110                       	smpsAlterNote       $10
0008FB09 E701                       	dc.b	smpsNoAttack, $01
0008FB0B E111                       	smpsAlterNote       $11
0008FB0D E701                       	dc.b	smpsNoAttack, $01
0008FB0F E10D                       	smpsAlterNote       $0D
0008FB11 E701                       	dc.b	smpsNoAttack, $01
0008FB13 E107                       	smpsAlterNote       $07
0008FB15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB19 E10A                       	smpsAlterNote       $0A
0008FB1B E701                       	dc.b	smpsNoAttack, $01
0008FB1D E110                       	smpsAlterNote       $10
0008FB1F E701                       	dc.b	smpsNoAttack, $01
0008FB21 E111                       	smpsAlterNote       $11
0008FB23 8001                       	dc.b	nRst, $01
0008FB25 E10D                       	smpsAlterNote       $0D
0008FB27 B80D                       	dc.b	nG4, $0D
0008FB29 E10A                       	smpsAlterNote       $0A
0008FB2B E701                       	dc.b	smpsNoAttack, $01
0008FB2D E106                       	smpsAlterNote       $06
0008FB2F E701                       	dc.b	smpsNoAttack, $01
0008FB31 E10A                       	smpsAlterNote       $0A
0008FB33 E701                       	dc.b	smpsNoAttack, $01
0008FB35 E110                       	smpsAlterNote       $10
0008FB37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB3B E10D                       	smpsAlterNote       $0D
0008FB3D E701                       	dc.b	smpsNoAttack, $01
0008FB3F E107                       	smpsAlterNote       $07
0008FB41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB45 E10D                       	smpsAlterNote       $0D
0008FB47 E701                       	dc.b	smpsNoAttack, $01
0008FB49 E110                       	smpsAlterNote       $10
0008FB4B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB4F E10A                       	smpsAlterNote       $0A
0008FB51 E701                       	dc.b	smpsNoAttack, $01
0008FB53 E106                       	smpsAlterNote       $06
0008FB55 E701                       	dc.b	smpsNoAttack, $01
0008FB57 E107                       	smpsAlterNote       $07
0008FB59 E701                       	dc.b	smpsNoAttack, $01
0008FB5B E10D                       	smpsAlterNote       $0D
0008FB5D E701                       	dc.b	smpsNoAttack, $01
0008FB5F E111                       	smpsAlterNote       $11
0008FB61 E701                       	dc.b	smpsNoAttack, $01
0008FB63 E10D                       	smpsAlterNote       $0D
0008FB65 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FB69 E10F                       	smpsAlterNote       $0F
0008FB6B BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008FB6F E110                       	smpsAlterNote       $10
0008FB71 BB03                       	dc.b	nBb4, $03
0008FB73 E10F                       	smpsAlterNote       $0F
0008FB75 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008FB7B E110                       	smpsAlterNote       $10
0008FB7D C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008FB81 E10F                       	smpsAlterNote       $0F
0008FB83 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008FB89 E110                       	smpsAlterNote       $10
0008FB8B D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008FB8F E10F                       	smpsAlterNote       $0F
0008FB91 D20D                       	dc.b	nA6, $0D
0008FB93 E10C                       	smpsAlterNote       $0C
0008FB95 E701                       	dc.b	smpsNoAttack, $01
0008FB97 E108                       	smpsAlterNote       $08
0008FB99 E701                       	dc.b	smpsNoAttack, $01
0008FB9B E10C                       	smpsAlterNote       $0C
0008FB9D E701                       	dc.b	smpsNoAttack, $01
0008FB9F E10F                       	smpsAlterNote       $0F
0008FBA1 E701                       	dc.b	smpsNoAttack, $01
0008FBA3 E113                       	smpsAlterNote       $13
0008FBA5 E701                       	dc.b	smpsNoAttack, $01
0008FBA7 E10F                       	smpsAlterNote       $0F
0008FBA9 E701                       	dc.b	smpsNoAttack, $01
0008FBAB E109                       	smpsAlterNote       $09
0008FBAD E701                       	dc.b	smpsNoAttack, $01
0008FBAF E108                       	smpsAlterNote       $08
0008FBB1 E701                       	dc.b	smpsNoAttack, $01
0008FBB3 E10C                       	smpsAlterNote       $0C
0008FBB5 E701                       	dc.b	smpsNoAttack, $01
0008FBB7 E112                       	smpsAlterNote       $12
0008FBB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBBD E10F                       	smpsAlterNote       $0F
0008FBBF E701                       	dc.b	smpsNoAttack, $01
0008FBC1 E109                       	smpsAlterNote       $09
0008FBC3 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008FBC9 E10D                       	smpsAlterNote       $0D
0008FBCB CE07                       	dc.b	nF6, $07
0008FBCD E10C                       	smpsAlterNote       $0C
0008FBCF CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008FBD3 E10D                       	smpsAlterNote       $0D
0008FBD5 CE03                       	dc.b	nF6, $03
0008FBD7 E10C                       	smpsAlterNote       $0C
0008FBD9 CC0D                       	dc.b	nEb6, $0D
0008FBDB E109                       	smpsAlterNote       $09
0008FBDD E701                       	dc.b	smpsNoAttack, $01
0008FBDF E106                       	smpsAlterNote       $06
0008FBE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBE5 E10C                       	smpsAlterNote       $0C
0008FBE7 E701                       	dc.b	smpsNoAttack, $01
0008FBE9 E110                       	smpsAlterNote       $10
0008FBEB E701                       	dc.b	smpsNoAttack, $01
0008FBED E10F                       	smpsAlterNote       $0F
0008FBEF E701                       	dc.b	smpsNoAttack, $01
0008FBF1 E109                       	smpsAlterNote       $09
0008FBF3 E701                       	dc.b	smpsNoAttack, $01
0008FBF5 E105                       	smpsAlterNote       $05
0008FBF7 E701                       	dc.b	smpsNoAttack, $01
0008FBF9 E109                       	smpsAlterNote       $09
0008FBFB E701                       	dc.b	smpsNoAttack, $01
0008FBFD E10C                       	smpsAlterNote       $0C
0008FBFF E701                       	dc.b	smpsNoAttack, $01
0008FC01 E110                       	smpsAlterNote       $10
0008FC03 E701                       	dc.b	smpsNoAttack, $01
0008FC05 E10C                       	smpsAlterNote       $0C
0008FC07 E701                       	dc.b	smpsNoAttack, $01
0008FC09 E106                       	smpsAlterNote       $06
0008FC0B E701                       	dc.b	smpsNoAttack, $01
0008FC0D E105                       	smpsAlterNote       $05
0008FC0F E701                       	dc.b	smpsNoAttack, $01
0008FC11 E109                       	smpsAlterNote       $09
0008FC13 E701                       	dc.b	smpsNoAttack, $01
0008FC15 E10F                       	smpsAlterNote       $0F
0008FC17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC1B E10C                       	smpsAlterNote       $0C
0008FC1D E701                       	dc.b	smpsNoAttack, $01
0008FC1F E10B                       	smpsAlterNote       $0B
0008FC21 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008FC2B E10F                       	smpsAlterNote       $0F
0008FC2D C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008FC37 E10D                       	smpsAlterNote       $0D
0008FC39 C203                       	dc.b	nF5, $03
0008FC3B E10C                       	smpsAlterNote       $0C
0008FC3D C103 8001                  	dc.b	nE5, $03, nRst, $01
0008FC41 E10D                       	smpsAlterNote       $0D
0008FC43 C20D                       	dc.b	nF5, $0D
0008FC45 E10C                       	smpsAlterNote       $0C
0008FC47 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0008FC4B E10B                       	smpsAlterNote       $0B
0008FC4D BF0D                       	dc.b	nD5, $0D
0008FC4F E108                       	smpsAlterNote       $08
0008FC51 E701                       	dc.b	smpsNoAttack, $01
0008FC53 E104                       	smpsAlterNote       $04
0008FC55 E701                       	dc.b	smpsNoAttack, $01
0008FC57 E108                       	smpsAlterNote       $08
0008FC59 E701                       	dc.b	smpsNoAttack, $01
0008FC5B E10E                       	smpsAlterNote       $0E
0008FC5D E701                       	dc.b	smpsNoAttack, $01
0008FC5F E10F                       	smpsAlterNote       $0F
0008FC61 E701                       	dc.b	smpsNoAttack, $01
0008FC63 E10B                       	smpsAlterNote       $0B
0008FC65 E701                       	dc.b	smpsNoAttack, $01
0008FC67 E105                       	smpsAlterNote       $05
0008FC69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC6D E108                       	smpsAlterNote       $08
0008FC6F E701                       	dc.b	smpsNoAttack, $01
0008FC71 E10E                       	smpsAlterNote       $0E
0008FC73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC77 E108                       	smpsAlterNote       $08
0008FC79 E701                       	dc.b	smpsNoAttack, $01
0008FC7B E105                       	smpsAlterNote       $05
0008FC7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC81 E10B                       	smpsAlterNote       $0B
0008FC83 E701                       	dc.b	smpsNoAttack, $01
0008FC85 E10F                       	smpsAlterNote       $0F
0008FC87 E701                       	dc.b	smpsNoAttack, $01
0008FC89 E10E                       	smpsAlterNote       $0E
0008FC8B E701                       	dc.b	smpsNoAttack, $01
0008FC8D E108                       	smpsAlterNote       $08
0008FC8F E701                       	dc.b	smpsNoAttack, $01
0008FC91 E104                       	smpsAlterNote       $04
0008FC93 E701                       	dc.b	smpsNoAttack, $01
0008FC95 E108                       	smpsAlterNote       $08
0008FC97 E701                       	dc.b	smpsNoAttack, $01
0008FC99 E10B                       	smpsAlterNote       $0B
0008FC9B E701                       	dc.b	smpsNoAttack, $01
0008FC9D E10F                       	smpsAlterNote       $0F
0008FC9F E701                       	dc.b	smpsNoAttack, $01
0008FCA1 E10B                       	smpsAlterNote       $0B
0008FCA3 E701                       	dc.b	smpsNoAttack, $01
0008FCA5 E105                       	smpsAlterNote       $05
0008FCA7 E701                       	dc.b	smpsNoAttack, $01
0008FCA9 E104                       	smpsAlterNote       $04
0008FCAB E701                       	dc.b	smpsNoAttack, $01
0008FCAD E108                       	smpsAlterNote       $08
0008FCAF E701                       	dc.b	smpsNoAttack, $01
0008FCB1 E10E                       	smpsAlterNote       $0E
0008FCB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCB7 E10B                       	smpsAlterNote       $0B
0008FCB9 E701                       	dc.b	smpsNoAttack, $01
0008FCBB E105                       	smpsAlterNote       $05
0008FCBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCC1 E10B                       	smpsAlterNote       $0B
0008FCC3 E701                       	dc.b	smpsNoAttack, $01
0008FCC5 E10E                       	smpsAlterNote       $0E
0008FCC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCCB E108                       	smpsAlterNote       $08
0008FCCD E701                       	dc.b	smpsNoAttack, $01
0008FCCF E104                       	smpsAlterNote       $04
0008FCD1 E701                       	dc.b	smpsNoAttack, $01
0008FCD3 E105                       	smpsAlterNote       $05
0008FCD5 E701                       	dc.b	smpsNoAttack, $01
0008FCD7 E10B                       	smpsAlterNote       $0B
0008FCD9 E701                       	dc.b	smpsNoAttack, $01
0008FCDB E10F                       	smpsAlterNote       $0F
0008FCDD E701                       	dc.b	smpsNoAttack, $01
0008FCDF E10B                       	smpsAlterNote       $0B
0008FCE1 E701                       	dc.b	smpsNoAttack, $01
0008FCE3 E108                       	smpsAlterNote       $08
0008FCE5 E701                       	dc.b	smpsNoAttack, $01
0008FCE7 E104                       	smpsAlterNote       $04
0008FCE9 E701                       	dc.b	smpsNoAttack, $01
0008FCEB E108                       	smpsAlterNote       $08
0008FCED E701                       	dc.b	smpsNoAttack, $01
0008FCEF E10E                       	smpsAlterNote       $0E
0008FCF1 E701                       	dc.b	smpsNoAttack, $01
0008FCF3 E10F                       	smpsAlterNote       $0F
0008FCF5 E701                       	dc.b	smpsNoAttack, $01
0008FCF7 E10B                       	smpsAlterNote       $0B
0008FCF9 E701                       	dc.b	smpsNoAttack, $01
0008FCFB E105                       	smpsAlterNote       $05
0008FCFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD01 E108                       	smpsAlterNote       $08
0008FD03 E701                       	dc.b	smpsNoAttack, $01
0008FD05 E10E                       	smpsAlterNote       $0E
0008FD07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD0B E108                       	smpsAlterNote       $08
0008FD0D E701                       	dc.b	smpsNoAttack, $01
0008FD0F E105                       	smpsAlterNote       $05
0008FD11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD15 E10B                       	smpsAlterNote       $0B
0008FD17 E701                       	dc.b	smpsNoAttack, $01
0008FD19 E10F                       	smpsAlterNote       $0F
0008FD1B E701                       	dc.b	smpsNoAttack, $01
0008FD1D E10E                       	smpsAlterNote       $0E
0008FD1F E701                       	dc.b	smpsNoAttack, $01
0008FD21 E108                       	smpsAlterNote       $08
0008FD23 E701                       	dc.b	smpsNoAttack, $01
0008FD25 E104                       	smpsAlterNote       $04
0008FD27 E701                       	dc.b	smpsNoAttack, $01
0008FD29 E108                       	smpsAlterNote       $08
0008FD2B E701                       	dc.b	smpsNoAttack, $01
0008FD2D E10B                       	smpsAlterNote       $0B
0008FD2F E701                       	dc.b	smpsNoAttack, $01
0008FD31 E10F                       	smpsAlterNote       $0F
0008FD33 E701                       	dc.b	smpsNoAttack, $01
0008FD35 E10B                       	smpsAlterNote       $0B
0008FD37 E701                       	dc.b	smpsNoAttack, $01
0008FD39 E105                       	smpsAlterNote       $05
0008FD3B E701                       	dc.b	smpsNoAttack, $01
0008FD3D E104                       	smpsAlterNote       $04
0008FD3F E701                       	dc.b	smpsNoAttack, $01
0008FD41 E105                       	smpsAlterNote       $05
0008FD43 8001                       	dc.b	nRst, $01
0008FD45 E10D                       	smpsAlterNote       $0D
0008FD47 C20D                       	dc.b	nF5, $0D
0008FD49 E107                       	smpsAlterNote       $07
0008FD4B E701                       	dc.b	smpsNoAttack, $01
0008FD4D E106                       	smpsAlterNote       $06
0008FD4F E701                       	dc.b	smpsNoAttack, $01
0008FD51 E10A                       	smpsAlterNote       $0A
0008FD53 E701                       	dc.b	smpsNoAttack, $01
0008FD55 E110                       	smpsAlterNote       $10
0008FD57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD5B E10D                       	smpsAlterNote       $0D
0008FD5D E701                       	dc.b	smpsNoAttack, $01
0008FD5F E107                       	smpsAlterNote       $07
0008FD61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD65 E10D                       	smpsAlterNote       $0D
0008FD67 E701                       	dc.b	smpsNoAttack, $01
0008FD69 E110                       	smpsAlterNote       $10
0008FD6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD6F E10A                       	smpsAlterNote       $0A
0008FD71 E701                       	dc.b	smpsNoAttack, $01
0008FD73 E106                       	smpsAlterNote       $06
0008FD75 E701                       	dc.b	smpsNoAttack, $01
0008FD77 E107                       	smpsAlterNote       $07
0008FD79 E701                       	dc.b	smpsNoAttack, $01
0008FD7B E10D                       	smpsAlterNote       $0D
0008FD7D E701                       	dc.b	smpsNoAttack, $01
0008FD7F E111                       	smpsAlterNote       $11
0008FD81 E701                       	dc.b	smpsNoAttack, $01
0008FD83 E10D                       	smpsAlterNote       $0D
0008FD85 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FD89 E10C                       	smpsAlterNote       $0C
0008FD8B C10D                       	dc.b	nE5, $0D
0008FD8D E10D                       	smpsAlterNote       $0D
0008FD8F C20A                       	dc.b	nF5, $0A
0008FD91 E10C                       	smpsAlterNote       $0C
0008FD93 C10E                       	dc.b	nE5, $0E
0008FD95 E106                       	smpsAlterNote       $06
0008FD97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD9B E10C                       	smpsAlterNote       $0C
0008FD9D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FDA1 E10B                       	smpsAlterNote       $0B
0008FDA3 BF0D                       	dc.b	nD5, $0D
0008FDA5 E10C                       	smpsAlterNote       $0C
0008FDA7 C107                       	dc.b	nE5, $07
0008FDA9 E10D                       	smpsAlterNote       $0D
0008FDAB C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0008FDB5 E110                       	smpsAlterNote       $10
0008FDB7 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008FDBD E10F                       	smpsAlterNote       $0F
0008FDBF C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008FDC7 E10D                       	smpsAlterNote       $0D
0008FDC9 D003                       	dc.b	nG6, $03
0008FDCD E0C0                       	smpsPan             panCenter, $00
0008FDCF E6FF                       	smpsAlterVol        $FF
0008FDD1 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0008FDDD 8001                       	dc.b	nRst, $01
0008FDDF E10C                       	smpsAlterNote       $0C
0008FDE1 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008FDEB E604                       	smpsAlterVol        $04
0008FDED E10B                       	smpsAlterNote       $0B
0008FDEF B306 8001                  	dc.b	nD4, $06, nRst, $01
0008FDF3 E10F                       	smpsAlterNote       $0F
0008FDF5 AE03                       	dc.b	nA3, $03
0008FDF7 E10D                       	smpsAlterNote       $0D
0008FDF9 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008FDFD E10C                       	smpsAlterNote       $0C
0008FDFF B506 8001                  	dc.b	nE4, $06, nRst, $01
0008FE03 E10B                       	smpsAlterNote       $0B
0008FE05 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008FE09 E10A                       	smpsAlterNote       $0A
0008FE0B B103                       	dc.b	nC4, $03
0008FE0D E110                       	smpsAlterNote       $10
0008FE0F AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008FE13 E10F                       	smpsAlterNote       $0F
0008FE15 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0008FE19 E080                       	smpsPan             panLeft, $00
0008FE1B 01                         	dc.b	$01
0008FE1E E6FB                       	smpsAlterVol        $FB
0008FE20 E1E4                       	smpsAlterNote       $E4
0008FE22 C501                       	dc.b	nAb5, $01
0008FE24 E1F4                       	smpsAlterNote       $F4
0008FE26 E701                       	dc.b	smpsNoAttack, $01
0008FE28 E104                       	smpsAlterNote       $04
0008FE2A E701                       	dc.b	smpsNoAttack, $01
0008FE2C E114                       	smpsAlterNote       $14
0008FE2E E701                       	dc.b	smpsNoAttack, $01
0008FE30 E11C                       	smpsAlterNote       $1C
0008FE32 E701                       	dc.b	smpsNoAttack, $01
0008FE34 E1EF                       	smpsAlterNote       $EF
0008FE36 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008FE39 E1FF                       	smpsAlterNote       $FF
0008FE3B E701                       	dc.b	smpsNoAttack, $01
0008FE3D E10F                       	smpsAlterNote       $0F
0008FE3F C606                       	dc.b	nA5, $06
0008FE41 E109                       	smpsAlterNote       $09
0008FE43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE47 E10F                       	smpsAlterNote       $0F
0008FE49 E701                       	dc.b	smpsNoAttack, $01
0008FE4B E112                       	smpsAlterNote       $12
0008FE4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE51 E10C                       	smpsAlterNote       $0C
0008FE53 E701                       	dc.b	smpsNoAttack, $01
0008FE55 E108                       	smpsAlterNote       $08
0008FE57 E701                       	dc.b	smpsNoAttack, $01
0008FE59 E109                       	smpsAlterNote       $09
0008FE5B E701                       	dc.b	smpsNoAttack, $01
0008FE5D E10F                       	smpsAlterNote       $0F
0008FE5F E701                       	dc.b	smpsNoAttack, $01
0008FE61 E113                       	smpsAlterNote       $13
0008FE63 E701                       	dc.b	smpsNoAttack, $01
0008FE65 E10F                       	smpsAlterNote       $0F
0008FE67 E701                       	dc.b	smpsNoAttack, $01
0008FE69 E10C                       	smpsAlterNote       $0C
0008FE6B E701                       	dc.b	smpsNoAttack, $01
0008FE6D E108                       	smpsAlterNote       $08
0008FE6F E701                       	dc.b	smpsNoAttack, $01
0008FE71 E10C                       	smpsAlterNote       $0C
0008FE73 E701                       	dc.b	smpsNoAttack, $01
0008FE75 E112                       	smpsAlterNote       $12
0008FE77 E701                       	dc.b	smpsNoAttack, $01
0008FE79 E113                       	smpsAlterNote       $13
0008FE7B E701                       	dc.b	smpsNoAttack, $01
0008FE7D E10F                       	smpsAlterNote       $0F
0008FE7F E701                       	dc.b	smpsNoAttack, $01
0008FE81 E109                       	smpsAlterNote       $09
0008FE83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE87 E10C                       	smpsAlterNote       $0C
0008FE89 E701                       	dc.b	smpsNoAttack, $01
0008FE8B E112                       	smpsAlterNote       $12
0008FE8D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE91 E10C                       	smpsAlterNote       $0C
0008FE93 E701                       	dc.b	smpsNoAttack, $01
0008FE95 E109                       	smpsAlterNote       $09
0008FE97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE9B E10F                       	smpsAlterNote       $0F
0008FE9D E701                       	dc.b	smpsNoAttack, $01
0008FE9F E113                       	smpsAlterNote       $13
0008FEA1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FEA5 E10D                       	smpsAlterNote       $0D
0008FEA7 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008FEAD E10C                       	smpsAlterNote       $0C
0008FEAF C102 8001                  	dc.b	nE5, $02, nRst, $01
0008FEB3 E10D                       	smpsAlterNote       $0D
0008FEB5 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008FEB9 E10C                       	smpsAlterNote       $0C
0008FEBB C102                       	dc.b	nE5, $02
0008FEBD E10B                       	smpsAlterNote       $0B
0008FEBF BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008FEC3 E10C                       	smpsAlterNote       $0C
0008FEC5 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008FEC9 E10B                       	smpsAlterNote       $0B
0008FECB BF02                       	dc.b	nD5, $02
0008FECD E10A                       	smpsAlterNote       $0A
0008FECF BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008FED9 E110                       	smpsAlterNote       $10
0008FEDB BB02                       	dc.b	nBb4, $02
0008FEDD E10A                       	smpsAlterNote       $0A
0008FEDF BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008FEE3 E110                       	smpsAlterNote       $10
0008FEE5 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008FEE9 E10F                       	smpsAlterNote       $0F
0008FEEB BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008FEEF E110                       	smpsAlterNote       $10
0008FEF1 BB02                       	dc.b	nBb4, $02
0008FEF3 E10F                       	smpsAlterNote       $0F
0008FEF5 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008FEFF E10C                       	smpsAlterNote       $0C
0008FF01 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008FF09 E10B                       	smpsAlterNote       $0B
0008FF0B BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0008FF0F E10F                       	smpsAlterNote       $0F
0008FF11 BA02                       	dc.b	nA4, $02
0008FF15 E0C0                       	smpsPan             panCenter, $00
0008FF17 E601                       	smpsAlterVol        $01
0008FF19 E109                       	smpsAlterNote       $09
0008FF1B AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0008FF27 E108                       	smpsAlterNote       $08
0008FF29 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0008FF2F E107                       	smpsAlterNote       $07
0008FF31 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0008FF37 E109                       	smpsAlterNote       $09
0008FF39 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008FF3D E108                       	smpsAlterNote       $08
0008FF3F B506 8001                  	dc.b	nE4, $06, nRst, $01
0008FF43 E107                       	smpsAlterNote       $07
0008FF45 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008FF49 E106                       	smpsAlterNote       $06
0008FF4B B103                       	dc.b	nC4, $03
0008FF4D E10C                       	smpsAlterNote       $0C
0008FF4F AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008FF55 E080                       	smpsPan             panLeft, $00
0008FF57 07                         	dc.b	$07
0008FF58 E6FE                       	smpsAlterVol        $FE
0008FF5A E10B                       	smpsAlterNote       $0B
0008FF5C B20D                       	dc.b	nCs4, $0D
0008FF5E E105                       	smpsAlterNote       $05
0008FF60 E701                       	dc.b	smpsNoAttack, $01
0008FF62 E104                       	smpsAlterNote       $04
0008FF64 E701                       	dc.b	smpsNoAttack, $01
0008FF66 E108                       	smpsAlterNote       $08
0008FF68 E701                       	dc.b	smpsNoAttack, $01
0008FF6A E10E                       	smpsAlterNote       $0E
0008FF6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF70 E10B                       	smpsAlterNote       $0B
0008FF72 E701                       	dc.b	smpsNoAttack, $01
0008FF74 E105                       	smpsAlterNote       $05
0008FF76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF7A E10B                       	smpsAlterNote       $0B
0008FF7C E701                       	dc.b	smpsNoAttack, $01
0008FF7E E10E                       	smpsAlterNote       $0E
0008FF80 E701                       	dc.b	smpsNoAttack, $01
0008FF82 E10F                       	smpsAlterNote       $0F
0008FF84 8001                       	dc.b	nRst, $01
0008FF86 E10B                       	smpsAlterNote       $0B
0008FF88 B30D                       	dc.b	nD4, $0D
0008FF8A E105                       	smpsAlterNote       $05
0008FF8C E701                       	dc.b	smpsNoAttack, $01
0008FF8E E104                       	smpsAlterNote       $04
0008FF90 E701                       	dc.b	smpsNoAttack, $01
0008FF92 E108                       	smpsAlterNote       $08
0008FF94 E701                       	dc.b	smpsNoAttack, $01
0008FF96 E10E                       	smpsAlterNote       $0E
0008FF98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF9C E10B                       	smpsAlterNote       $0B
0008FF9E E701                       	dc.b	smpsNoAttack, $01
0008FFA0 E105                       	smpsAlterNote       $05
0008FFA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFA6 E10B                       	smpsAlterNote       $0B
0008FFA8 E701                       	dc.b	smpsNoAttack, $01
0008FFAA E10E                       	smpsAlterNote       $0E
0008FFAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFB0 E108                       	smpsAlterNote       $08
0008FFB2 E701                       	dc.b	smpsNoAttack, $01
0008FFB4 E104                       	smpsAlterNote       $04
0008FFB6 E701                       	dc.b	smpsNoAttack, $01
0008FFB8 E105                       	smpsAlterNote       $05
0008FFBA E701                       	dc.b	smpsNoAttack, $01
0008FFBC E10B                       	smpsAlterNote       $0B
0008FFBE E701                       	dc.b	smpsNoAttack, $01
0008FFC0 E10F                       	smpsAlterNote       $0F
0008FFC2 E701                       	dc.b	smpsNoAttack, $01
0008FFC4 E10B                       	smpsAlterNote       $0B
0008FFC6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FFCA E10C                       	smpsAlterNote       $0C
0008FFCC B50D                       	dc.b	nE4, $0D
0008FFCE E106                       	smpsAlterNote       $06
0008FFD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFD4 E10C                       	smpsAlterNote       $0C
0008FFD6 E701                       	dc.b	smpsNoAttack, $01
0008FFD8 E10F                       	smpsAlterNote       $0F
0008FFDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFDE E109                       	smpsAlterNote       $09
0008FFE0 E701                       	dc.b	smpsNoAttack, $01
0008FFE2 E105                       	smpsAlterNote       $05
0008FFE4 E701                       	dc.b	smpsNoAttack, $01
0008FFE6 E106                       	smpsAlterNote       $06
0008FFE8 E701                       	dc.b	smpsNoAttack, $01
0008FFEA E10C                       	smpsAlterNote       $0C
0008FFEC E701                       	dc.b	smpsNoAttack, $01
0008FFEE E110                       	smpsAlterNote       $10
0008FFF0 E701                       	dc.b	smpsNoAttack, $01
0008FFF2 E10B                       	smpsAlterNote       $0B
0008FFF4 B30E                       	dc.b	nD4, $0E
0008FFF6 E105                       	smpsAlterNote       $05
0008FFF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFFC E10B                       	smpsAlterNote       $0B
0008FFFE E701                       	dc.b	smpsNoAttack, $01
00090000 E10E                       	smpsAlterNote       $0E
00090002 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090006 E108                       	smpsAlterNote       $08
00090008 E701                       	dc.b	smpsNoAttack, $01
0009000A E104                       	smpsAlterNote       $04
0009000C E701                       	dc.b	smpsNoAttack, $01
0009000E E105                       	smpsAlterNote       $05
00090010 E701                       	dc.b	smpsNoAttack, $01
00090012 E10B                       	smpsAlterNote       $0B
00090014 E701                       	dc.b	smpsNoAttack, $01
00090016 E10F                       	smpsAlterNote       $0F
00090018 E701                       	dc.b	smpsNoAttack, $01
0009001A E10B                       	smpsAlterNote       $0B
0009001C E701                       	dc.b	smpsNoAttack, $01
0009001E E108                       	smpsAlterNote       $08
00090020 E701                       	dc.b	smpsNoAttack, $01
00090022 E104                       	smpsAlterNote       $04
00090024 E701                       	dc.b	smpsNoAttack, $01
00090026 E108                       	smpsAlterNote       $08
00090028 E701                       	dc.b	smpsNoAttack, $01
0009002A E10E                       	smpsAlterNote       $0E
0009002C E701                       	dc.b	smpsNoAttack, $01
0009002E E10F                       	smpsAlterNote       $0F
00090030 E701                       	dc.b	smpsNoAttack, $01
00090032 E10B                       	smpsAlterNote       $0B
00090034 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00090038 E108                       	smpsAlterNote       $08
0009003A E701                       	dc.b	smpsNoAttack, $01
0009003C E105                       	smpsAlterNote       $05
0009003E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090042 E10B                       	smpsAlterNote       $0B
00090044 E701                       	dc.b	smpsNoAttack, $01
00090046 E10F                       	smpsAlterNote       $0F
00090048 E701                       	dc.b	smpsNoAttack, $01
0009004A E10E                       	smpsAlterNote       $0E
0009004C E701                       	dc.b	smpsNoAttack, $01
0009004E E108                       	smpsAlterNote       $08
00090050 E701                       	dc.b	smpsNoAttack, $01
00090052 E104                       	smpsAlterNote       $04
00090054 E701                       	dc.b	smpsNoAttack, $01
00090056 E108                       	smpsAlterNote       $08
00090058 E701                       	dc.b	smpsNoAttack, $01
0009005A E10B                       	smpsAlterNote       $0B
0009005C E701                       	dc.b	smpsNoAttack, $01
0009005E E10F                       	smpsAlterNote       $0F
00090060 E701                       	dc.b	smpsNoAttack, $01
00090062 E10B                       	smpsAlterNote       $0B
00090064 B30D                       	dc.b	nD4, $0D
00090066 E108                       	smpsAlterNote       $08
00090068 E701                       	dc.b	smpsNoAttack, $01
0009006A E105                       	smpsAlterNote       $05
0009006C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090070 E10B                       	smpsAlterNote       $0B
00090072 E701                       	dc.b	smpsNoAttack, $01
00090074 E10F                       	smpsAlterNote       $0F
00090076 E701                       	dc.b	smpsNoAttack, $01
00090078 E10E                       	smpsAlterNote       $0E
0009007A E701                       	dc.b	smpsNoAttack, $01
0009007C E108                       	smpsAlterNote       $08
0009007E E701                       	dc.b	smpsNoAttack, $01
00090080 E104                       	smpsAlterNote       $04
00090082 E701                       	dc.b	smpsNoAttack, $01
00090084 E108                       	smpsAlterNote       $08
00090086 E701                       	dc.b	smpsNoAttack, $01
00090088 E10B                       	smpsAlterNote       $0B
0009008A E701                       	dc.b	smpsNoAttack, $01
0009008C E10F                       	smpsAlterNote       $0F
0009008E E701                       	dc.b	smpsNoAttack, $01
00090090 E10B                       	smpsAlterNote       $0B
00090092 E701                       	dc.b	smpsNoAttack, $01
00090094 E105                       	smpsAlterNote       $05
00090096 E701                       	dc.b	smpsNoAttack, $01
00090098 E104                       	smpsAlterNote       $04
0009009A E701                       	dc.b	smpsNoAttack, $01
0009009C E108                       	smpsAlterNote       $08
0009009E E701                       	dc.b	smpsNoAttack, $01
000900A0 E10E                       	smpsAlterNote       $0E
000900A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900A6 E10B                       	smpsAlterNote       $0B
000900A8 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
000900AC E108                       	smpsAlterNote       $08
000900AE E701                       	dc.b	smpsNoAttack, $01
000900B0 E104                       	smpsAlterNote       $04
000900B2 E701                       	dc.b	smpsNoAttack, $01
000900B4 E108                       	smpsAlterNote       $08
000900B6 E701                       	dc.b	smpsNoAttack, $01
000900B8 E10B                       	smpsAlterNote       $0B
000900BA E701                       	dc.b	smpsNoAttack, $01
000900BE E0C0                       	smpsPan             panCenter, $00
000900C0 E601                       	smpsAlterVol        $01
000900C2 E108                       	smpsAlterNote       $08
000900C4 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
000900D0 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
000900D8 E080                       	smpsPan             panLeft, $00
000900DA 07                         	dc.b	$07
000900DB E6FF                       	smpsAlterVol        $FF
000900DD E10D                       	smpsAlterNote       $0D
000900DF B60D                       	dc.b	nF4, $0D
000900E1 E10A                       	smpsAlterNote       $0A
000900E3 E701                       	dc.b	smpsNoAttack, $01
000900E5 E106                       	smpsAlterNote       $06
000900E7 E701                       	dc.b	smpsNoAttack, $01
000900E9 E10A                       	smpsAlterNote       $0A
000900EB E701                       	dc.b	smpsNoAttack, $01
000900ED E110                       	smpsAlterNote       $10
000900EF E701                       	dc.b	smpsNoAttack, $01
000900F1 E111                       	smpsAlterNote       $11
000900F3 E701                       	dc.b	smpsNoAttack, $01
000900F5 E10D                       	smpsAlterNote       $0D
000900F7 E701                       	dc.b	smpsNoAttack, $01
000900F9 E107                       	smpsAlterNote       $07
000900FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900FF E10A                       	smpsAlterNote       $0A
00090101 E701                       	dc.b	smpsNoAttack, $01
00090103 E110                       	smpsAlterNote       $10
00090105 E701                       	dc.b	smpsNoAttack, $01
00090107 E111                       	smpsAlterNote       $11
00090109 8001                       	dc.b	nRst, $01
0009010B E10D                       	smpsAlterNote       $0D
0009010D B80D                       	dc.b	nG4, $0D
0009010F E10A                       	smpsAlterNote       $0A
00090111 E701                       	dc.b	smpsNoAttack, $01
00090113 E106                       	smpsAlterNote       $06
00090115 E701                       	dc.b	smpsNoAttack, $01
00090117 E10A                       	smpsAlterNote       $0A
00090119 E701                       	dc.b	smpsNoAttack, $01
0009011B E110                       	smpsAlterNote       $10
0009011D E701                       	dc.b	smpsNoAttack, $01
0009011F E111                       	smpsAlterNote       $11
00090121 E701                       	dc.b	smpsNoAttack, $01
00090123 E10D                       	smpsAlterNote       $0D
00090125 E701                       	dc.b	smpsNoAttack, $01
00090127 E107                       	smpsAlterNote       $07
00090129 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009012D E10D                       	smpsAlterNote       $0D
0009012F E701                       	dc.b	smpsNoAttack, $01
00090131 E110                       	smpsAlterNote       $10
00090133 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090137 E10A                       	smpsAlterNote       $0A
00090139 E701                       	dc.b	smpsNoAttack, $01
0009013B E106                       	smpsAlterNote       $06
0009013D E701                       	dc.b	smpsNoAttack, $01
0009013F E107                       	smpsAlterNote       $07
00090141 E701                       	dc.b	smpsNoAttack, $01
00090143 E10D                       	smpsAlterNote       $0D
00090145 E701                       	dc.b	smpsNoAttack, $01
00090147 E111                       	smpsAlterNote       $11
00090149 E701                       	dc.b	smpsNoAttack, $01
0009014B E10D                       	smpsAlterNote       $0D
0009014D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00090151 E10F                       	smpsAlterNote       $0F
00090153 BA0D                       	dc.b	nA4, $0D
00090155 E109                       	smpsAlterNote       $09
00090157 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009015B E10C                       	smpsAlterNote       $0C
0009015D E701                       	dc.b	smpsNoAttack, $01
0009015F E112                       	smpsAlterNote       $12
00090161 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090165 E10C                       	smpsAlterNote       $0C
00090167 E701                       	dc.b	smpsNoAttack, $01
00090169 E109                       	smpsAlterNote       $09
0009016B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009016F E10F                       	smpsAlterNote       $0F
00090171 E701                       	dc.b	smpsNoAttack, $01
00090173 E113                       	smpsAlterNote       $13
00090175 E701                       	dc.b	smpsNoAttack, $01
00090177 E112                       	smpsAlterNote       $12
00090179 E701                       	dc.b	smpsNoAttack, $01
0009017B E10C                       	smpsAlterNote       $0C
0009017D E701                       	dc.b	smpsNoAttack, $01
0009017F E108                       	smpsAlterNote       $08
00090181 E701                       	dc.b	smpsNoAttack, $01
00090183 E10C                       	smpsAlterNote       $0C
00090185 E701                       	dc.b	smpsNoAttack, $01
00090187 E10F                       	smpsAlterNote       $0F
00090189 E701                       	dc.b	smpsNoAttack, $01
0009018B E113                       	smpsAlterNote       $13
0009018D E701                       	dc.b	smpsNoAttack, $01
0009018F E10F                       	smpsAlterNote       $0F
00090191 E701                       	dc.b	smpsNoAttack, $01
00090193 E109                       	smpsAlterNote       $09
00090195 E701                       	dc.b	smpsNoAttack, $01
00090197 E108                       	smpsAlterNote       $08
00090199 E701                       	dc.b	smpsNoAttack, $01
0009019B E10C                       	smpsAlterNote       $0C
0009019D E701                       	dc.b	smpsNoAttack, $01
0009019F E112                       	smpsAlterNote       $12
000901A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901A5 E10F                       	smpsAlterNote       $0F
000901A7 E701                       	dc.b	smpsNoAttack, $01
000901A9 E109                       	smpsAlterNote       $09
000901AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901AF E10F                       	smpsAlterNote       $0F
000901B1 E701                       	dc.b	smpsNoAttack, $01
000901B3 E112                       	smpsAlterNote       $12
000901B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901B9 E10C                       	smpsAlterNote       $0C
000901BB E701                       	dc.b	smpsNoAttack, $01
000901BD E108                       	smpsAlterNote       $08
000901BF E701                       	dc.b	smpsNoAttack, $01
000901C1 E109                       	smpsAlterNote       $09
000901C3 E701                       	dc.b	smpsNoAttack, $01
000901C5 E10C                       	smpsAlterNote       $0C
000901C7 B50A                       	dc.b	nE4, $0A
000901C9 E10D                       	smpsAlterNote       $0D
000901CB B60E                       	dc.b	nF4, $0E
000901CD E107                       	smpsAlterNote       $07
000901CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901D3 E10D                       	smpsAlterNote       $0D
000901D5 E701                       	dc.b	smpsNoAttack, $01
000901D7 E110                       	smpsAlterNote       $10
000901D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901DD E10A                       	smpsAlterNote       $0A
000901DF E701                       	dc.b	smpsNoAttack, $01
000901E1 E106                       	smpsAlterNote       $06
000901E3 E701                       	dc.b	smpsNoAttack, $01
000901E5 E107                       	smpsAlterNote       $07
000901E7 E701                       	dc.b	smpsNoAttack, $01
000901E9 E10D                       	smpsAlterNote       $0D
000901EB E701                       	dc.b	smpsNoAttack, $01
000901ED E111                       	smpsAlterNote       $11
000901EF E701                       	dc.b	smpsNoAttack, $01
000901F1 E10D                       	smpsAlterNote       $0D
000901F3 B80D                       	dc.b	nG4, $0D
000901F5 E10A                       	smpsAlterNote       $0A
000901F7 E701                       	dc.b	smpsNoAttack, $01
000901F9 E107                       	smpsAlterNote       $07
000901FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901FF E10D                       	smpsAlterNote       $0D
00090201 E701                       	dc.b	smpsNoAttack, $01
00090203 E111                       	smpsAlterNote       $11
00090205 E701                       	dc.b	smpsNoAttack, $01
00090207 E110                       	smpsAlterNote       $10
00090209 E701                       	dc.b	smpsNoAttack, $01
0009020B E10A                       	smpsAlterNote       $0A
0009020D E701                       	dc.b	smpsNoAttack, $01
0009020F E106                       	smpsAlterNote       $06
00090211 E701                       	dc.b	smpsNoAttack, $01
00090213 E10A                       	smpsAlterNote       $0A
00090215 E701                       	dc.b	smpsNoAttack, $01
00090217 E10D                       	smpsAlterNote       $0D
00090219 E701                       	dc.b	smpsNoAttack, $01
0009021B E111                       	smpsAlterNote       $11
0009021D E701                       	dc.b	smpsNoAttack, $01
0009021F E10D                       	smpsAlterNote       $0D
00090221 E701                       	dc.b	smpsNoAttack, $01
00090223 E107                       	smpsAlterNote       $07
00090225 E701                       	dc.b	smpsNoAttack, $01
00090227 E106                       	smpsAlterNote       $06
00090229 E701                       	dc.b	smpsNoAttack, $01
0009022B E10A                       	smpsAlterNote       $0A
0009022D E701                       	dc.b	smpsNoAttack, $01
0009022F E110                       	smpsAlterNote       $10
00090231 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090235 E10D                       	smpsAlterNote       $0D
00090237 E701                       	dc.b	smpsNoAttack, $01
00090239 E10F                       	smpsAlterNote       $0F
0009023B BA0D                       	dc.b	nA4, $0D
0009023D E10C                       	smpsAlterNote       $0C
0009023F E701                       	dc.b	smpsNoAttack, $01
00090241 E108                       	smpsAlterNote       $08
00090243 E701                       	dc.b	smpsNoAttack, $01
00090245 E109                       	smpsAlterNote       $09
00090247 E701                       	dc.b	smpsNoAttack, $01
00090249 E10F                       	smpsAlterNote       $0F
0009024B E701                       	dc.b	smpsNoAttack, $01
0009024D E113                       	smpsAlterNote       $13
0009024F E701                       	dc.b	smpsNoAttack, $01
00090251 E10F                       	smpsAlterNote       $0F
00090253 E701                       	dc.b	smpsNoAttack, $01
00090255 E10C                       	smpsAlterNote       $0C
00090257 E701                       	dc.b	smpsNoAttack, $01
00090259 E108                       	smpsAlterNote       $08
0009025B E701                       	dc.b	smpsNoAttack, $01
0009025D E10C                       	smpsAlterNote       $0C
0009025F E701                       	dc.b	smpsNoAttack, $01
00090261 E112                       	smpsAlterNote       $12
00090263 E701                       	dc.b	smpsNoAttack, $01
00090265 E113                       	smpsAlterNote       $13
00090267 E701                       	dc.b	smpsNoAttack, $01
00090269 E10F                       	smpsAlterNote       $0F
0009026B E701                       	dc.b	smpsNoAttack, $01
0009026D E109                       	smpsAlterNote       $09
0009026F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090273 E10C                       	smpsAlterNote       $0C
00090275 E701                       	dc.b	smpsNoAttack, $01
00090277 E112                       	smpsAlterNote       $12
00090279 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009027D E10C                       	smpsAlterNote       $0C
0009027F E701                       	dc.b	smpsNoAttack, $01
00090281 E109                       	smpsAlterNote       $09
00090283 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090287 E10F                       	smpsAlterNote       $0F
00090289 E701                       	dc.b	smpsNoAttack, $01
0009028B E113                       	smpsAlterNote       $13
0009028D E701                       	dc.b	smpsNoAttack, $01
0009028F E112                       	smpsAlterNote       $12
00090291 E701                       	dc.b	smpsNoAttack, $01
00090293 E10C                       	smpsAlterNote       $0C
00090295 E701                       	dc.b	smpsNoAttack, $01
00090297 E109                       	smpsAlterNote       $09
00090299 8001                       	dc.b	nRst, $01
0009029B E10D                       	smpsAlterNote       $0D
0009029D B60A                       	dc.b	nF4, $0A
0009029F E10C                       	smpsAlterNote       $0C
000902A1 B506 8001                  	dc.b	nE4, $06, nRst, $01
000902A5 E10B                       	smpsAlterNote       $0B
000902A7 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000902AB E10C                       	smpsAlterNote       $0C
000902AD B503                       	dc.b	nE4, $03
000902AF E10D                       	smpsAlterNote       $0D
000902B1 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
000902BB E10C                       	smpsAlterNote       $0C
000902BD E701                       	dc.b	smpsNoAttack, $01
000902BF E108                       	smpsAlterNote       $08
000902C1 E701                       	dc.b	smpsNoAttack, $01
000902C3 E10C                       	smpsAlterNote       $0C
000902C5 E701                       	dc.b	smpsNoAttack, $01
000902C7 E112                       	smpsAlterNote       $12
000902C9 E701                       	dc.b	smpsNoAttack, $01
000902CB E113                       	smpsAlterNote       $13
000902CD E701                       	dc.b	smpsNoAttack, $01
000902CF E10F                       	smpsAlterNote       $0F
000902D1 E701                       	dc.b	smpsNoAttack, $01
000902D3 E109                       	smpsAlterNote       $09
000902D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000902D9 E10C                       	smpsAlterNote       $0C
000902DB E701                       	dc.b	smpsNoAttack, $01
000902DD E112                       	smpsAlterNote       $12
000902DF E701                       	dc.b	smpsNoAttack, $01
000902E1 E113                       	smpsAlterNote       $13
000902E3 8001                       	dc.b	nRst, $01
000902E5 E10D                       	smpsAlterNote       $0D
000902E7 C20D                       	dc.b	nF5, $0D
000902E9 E10A                       	smpsAlterNote       $0A
000902EB E701                       	dc.b	smpsNoAttack, $01
000902ED E106                       	smpsAlterNote       $06
000902EF E701                       	dc.b	smpsNoAttack, $01
000902F1 E10A                       	smpsAlterNote       $0A
000902F3 E701                       	dc.b	smpsNoAttack, $01
000902F5 E110                       	smpsAlterNote       $10
000902F7 E701                       	dc.b	smpsNoAttack, $01
000902F9 E111                       	smpsAlterNote       $11
000902FB E701                       	dc.b	smpsNoAttack, $01
000902FD E10D                       	smpsAlterNote       $0D
000902FF E701                       	dc.b	smpsNoAttack, $01
00090301 E107                       	smpsAlterNote       $07
00090303 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090307 E10A                       	smpsAlterNote       $0A
00090309 E701                       	dc.b	smpsNoAttack, $01
0009030B E110                       	smpsAlterNote       $10
0009030D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090311 E10A                       	smpsAlterNote       $0A
00090313 E701                       	dc.b	smpsNoAttack, $01
00090315 E107                       	smpsAlterNote       $07
00090317 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009031B E10D                       	smpsAlterNote       $0D
0009031D E701                       	dc.b	smpsNoAttack, $01
0009031F E111                       	smpsAlterNote       $11
00090321 E701                       	dc.b	smpsNoAttack, $01
00090323 E110                       	smpsAlterNote       $10
00090325 E701                       	dc.b	smpsNoAttack, $01
00090327 E10A                       	smpsAlterNote       $0A
00090329 E701                       	dc.b	smpsNoAttack, $01
0009032B E106                       	smpsAlterNote       $06
0009032D E701                       	dc.b	smpsNoAttack, $01
0009032F E10A                       	smpsAlterNote       $0A
00090331 E701                       	dc.b	smpsNoAttack, $01
00090333 E10D                       	smpsAlterNote       $0D
00090335 E701                       	dc.b	smpsNoAttack, $01
00090337 E111                       	smpsAlterNote       $11
00090339 E701                       	dc.b	smpsNoAttack, $01
0009033B E10D                       	smpsAlterNote       $0D
0009033D E701                       	dc.b	smpsNoAttack, $01
0009033F E107                       	smpsAlterNote       $07
00090341 E701                       	dc.b	smpsNoAttack, $01
00090343 E106                       	smpsAlterNote       $06
00090345 E701                       	dc.b	smpsNoAttack, $01
00090347 E10A                       	smpsAlterNote       $0A
00090349 E701                       	dc.b	smpsNoAttack, $01
0009034B E110                       	smpsAlterNote       $10
0009034D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090351 E10D                       	smpsAlterNote       $0D
00090353 E701                       	dc.b	smpsNoAttack, $01
00090355 E107                       	smpsAlterNote       $07
00090357 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009035B E10D                       	smpsAlterNote       $0D
0009035D E701                       	dc.b	smpsNoAttack, $01
0009035F E110                       	smpsAlterNote       $10
00090361 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090365 E10A                       	smpsAlterNote       $0A
00090367 E701                       	dc.b	smpsNoAttack, $01
00090369 E106                       	smpsAlterNote       $06
0009036B E701                       	dc.b	smpsNoAttack, $01
0009036D E107                       	smpsAlterNote       $07
0009036F E701                       	dc.b	smpsNoAttack, $01
00090371 E10D                       	smpsAlterNote       $0D
00090373 E701                       	dc.b	smpsNoAttack, $01
00090375 E111                       	smpsAlterNote       $11
00090377 E701                       	dc.b	smpsNoAttack, $01
00090379 E10D                       	smpsAlterNote       $0D
0009037B E701                       	dc.b	smpsNoAttack, $01
0009037D E10A                       	smpsAlterNote       $0A
0009037F E701                       	dc.b	smpsNoAttack, $01
00090381 E107                       	smpsAlterNote       $07
00090383 8001                       	dc.b	nRst, $01
00090385 E10D                       	smpsAlterNote       $0D
00090387 C206 8001                  	dc.b	nF5, $06, nRst, $01
0009038D E601                       	smpsAlterVol        $01
0009038F E110                       	smpsAlterNote       $10
00090391 BB0D                       	dc.b	nBb4, $0D
00090393 E10A                       	smpsAlterNote       $0A
00090395 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090399 E110                       	smpsAlterNote       $10
0009039B E701                       	dc.b	smpsNoAttack, $01
0009039D E113                       	smpsAlterNote       $13
0009039F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000903A3 E10D                       	smpsAlterNote       $0D
000903A5 E701                       	dc.b	smpsNoAttack, $01
000903A7 E109                       	smpsAlterNote       $09
000903A9 E701                       	dc.b	smpsNoAttack, $01
000903AB E10A                       	smpsAlterNote       $0A
000903AD E701                       	dc.b	smpsNoAttack, $01
000903AF E110                       	smpsAlterNote       $10
000903B1 E701                       	dc.b	smpsNoAttack, $01
000903B3 E114                       	smpsAlterNote       $14
000903B5 E701                       	dc.b	smpsNoAttack, $01
000903B7 E110                       	smpsAlterNote       $10
000903B9 E701                       	dc.b	smpsNoAttack, $01
000903BB E10D                       	smpsAlterNote       $0D
000903BD E701                       	dc.b	smpsNoAttack, $01
000903BF E109                       	smpsAlterNote       $09
000903C1 E701                       	dc.b	smpsNoAttack, $01
000903C3 E10A                       	smpsAlterNote       $0A
000903C5 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000903C9 E107                       	smpsAlterNote       $07
000903CB E701                       	dc.b	smpsNoAttack, $01
000903CD E103                       	smpsAlterNote       $03
000903CF E701                       	dc.b	smpsNoAttack, $01
000903D1 E107                       	smpsAlterNote       $07
000903D3 E701                       	dc.b	smpsNoAttack, $01
000903D5 E10D                       	smpsAlterNote       $0D
000903D7 E701                       	dc.b	smpsNoAttack, $01
000903D9 E10E                       	smpsAlterNote       $0E
000903DB E701                       	dc.b	smpsNoAttack, $01
000903DD E10A                       	smpsAlterNote       $0A
000903DF E701                       	dc.b	smpsNoAttack, $01
000903E1 E104                       	smpsAlterNote       $04
000903E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000903E7 E107                       	smpsAlterNote       $07
000903E9 E701                       	dc.b	smpsNoAttack, $01
000903EB E10D                       	smpsAlterNote       $0D
000903ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000903F1 E107                       	smpsAlterNote       $07
000903F3 E701                       	dc.b	smpsNoAttack, $01
000903F5 E104                       	smpsAlterNote       $04
000903F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000903FB E10B                       	smpsAlterNote       $0B
000903FD BF0D                       	dc.b	nD5, $0D
000903FF E108                       	smpsAlterNote       $08
00090401 E701                       	dc.b	smpsNoAttack, $01
00090403 E105                       	smpsAlterNote       $05
00090405 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090409 E10B                       	smpsAlterNote       $0B
0009040B E701                       	dc.b	smpsNoAttack, $01
0009040D E10F                       	smpsAlterNote       $0F
0009040F E701                       	dc.b	smpsNoAttack, $01
00090411 E10E                       	smpsAlterNote       $0E
00090413 E701                       	dc.b	smpsNoAttack, $01
00090415 E108                       	smpsAlterNote       $08
00090417 E701                       	dc.b	smpsNoAttack, $01
00090419 E104                       	smpsAlterNote       $04
0009041B E701                       	dc.b	smpsNoAttack, $01
0009041D E108                       	smpsAlterNote       $08
0009041F E701                       	dc.b	smpsNoAttack, $01
00090421 E10B                       	smpsAlterNote       $0B
00090423 E701                       	dc.b	smpsNoAttack, $01
00090425 E10F                       	smpsAlterNote       $0F
00090427 E701                       	dc.b	smpsNoAttack, $01
00090429 E10B                       	smpsAlterNote       $0B
0009042B E701                       	dc.b	smpsNoAttack, $01
0009042D E105                       	smpsAlterNote       $05
0009042F E701                       	dc.b	smpsNoAttack, $01
00090431 E104                       	smpsAlterNote       $04
00090433 E701                       	dc.b	smpsNoAttack, $01
00090435 E105                       	smpsAlterNote       $05
00090437 8001                       	dc.b	nRst, $01
00090439 E10C                       	smpsAlterNote       $0C
0009043B C10C                       	dc.b	nE5, $0C
0009043D E10D                       	smpsAlterNote       $0D
0009043F C201                       	dc.b	nF5, $01
00090441 E10E                       	smpsAlterNote       $0E
00090443 C301 8001                  	dc.b	nFs5, $01, nRst, $01
00090447 E10D                       	smpsAlterNote       $0D
00090449 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0009044D E10A                       	smpsAlterNote       $0A
0009044F E701                       	dc.b	smpsNoAttack, $01
00090451 E106                       	smpsAlterNote       $06
00090453 E701                       	dc.b	smpsNoAttack, $01
00090455 E10A                       	smpsAlterNote       $0A
00090457 E701                       	dc.b	smpsNoAttack, $01
00090459 E10D                       	smpsAlterNote       $0D
0009045B E701                       	dc.b	smpsNoAttack, $01
0009045D E111                       	smpsAlterNote       $11
0009045F E701                       	dc.b	smpsNoAttack, $01
00090461 E10D                       	smpsAlterNote       $0D
00090463 E701                       	dc.b	smpsNoAttack, $01
00090465 E107                       	smpsAlterNote       $07
00090467 E701                       	dc.b	smpsNoAttack, $01
00090469 E106                       	smpsAlterNote       $06
0009046B E701                       	dc.b	smpsNoAttack, $01
0009046D E10A                       	smpsAlterNote       $0A
0009046F E701                       	dc.b	smpsNoAttack, $01
00090471 E110                       	smpsAlterNote       $10
00090473 E701                       	dc.b	smpsNoAttack, $01
00090475 E111                       	smpsAlterNote       $11
00090477 8001                       	dc.b	nRst, $01
00090479 E10D                       	smpsAlterNote       $0D
0009047B C40D                       	dc.b	nG5, $0D
0009047D E10A                       	smpsAlterNote       $0A
0009047F E701                       	dc.b	smpsNoAttack, $01
00090481 E106                       	smpsAlterNote       $06
00090483 E701                       	dc.b	smpsNoAttack, $01
00090485 E10A                       	smpsAlterNote       $0A
00090487 E701                       	dc.b	smpsNoAttack, $01
00090489 E10D                       	smpsAlterNote       $0D
0009048B E701                       	dc.b	smpsNoAttack, $01
0009048D E10C                       	smpsAlterNote       $0C
0009048F C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0009049B 8001                       	dc.b	nRst, $01
0009049D E10D                       	smpsAlterNote       $0D
0009049F C20D                       	dc.b	nF5, $0D
000904A1 E10A                       	smpsAlterNote       $0A
000904A3 E701                       	dc.b	smpsNoAttack, $01
000904A5 E106                       	smpsAlterNote       $06
000904A7 E701                       	dc.b	smpsNoAttack, $01
000904A9 E10A                       	smpsAlterNote       $0A
000904AB E701                       	dc.b	smpsNoAttack, $01
000904AD E110                       	smpsAlterNote       $10
000904AF E701                       	dc.b	smpsNoAttack, $01
000904B1 E111                       	smpsAlterNote       $11
000904B3 E701                       	dc.b	smpsNoAttack, $01
000904B5 E10D                       	smpsAlterNote       $0D
000904B7 E701                       	dc.b	smpsNoAttack, $01
000904B9 E107                       	smpsAlterNote       $07
000904BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000904BF E10A                       	smpsAlterNote       $0A
000904C1 E701                       	dc.b	smpsNoAttack, $01
000904C3 E110                       	smpsAlterNote       $10
000904C5 E701                       	dc.b	smpsNoAttack, $01
000904C7 E111                       	smpsAlterNote       $11
000904C9 8001                       	dc.b	nRst, $01
000904CB E10F                       	smpsAlterNote       $0F
000904CD C60A                       	dc.b	nA5, $0A
000904CF E10D                       	smpsAlterNote       $0D
000904D1 C406 8001                  	dc.b	nG5, $06, nRst, $01
000904D5 E10C                       	smpsAlterNote       $0C
000904D7 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000904E3 8001                       	dc.b	nRst, $01
000904E5 E10D                       	smpsAlterNote       $0D
000904E7 C20D                       	dc.b	nF5, $0D
000904E9 E107                       	smpsAlterNote       $07
000904EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000904EF E10A                       	smpsAlterNote       $0A
000904F1 E701                       	dc.b	smpsNoAttack, $01
000904F3 E110                       	smpsAlterNote       $10
000904F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000904F9 E10A                       	smpsAlterNote       $0A
000904FB E701                       	dc.b	smpsNoAttack, $01
000904FD E107                       	smpsAlterNote       $07
000904FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090503 E10D                       	smpsAlterNote       $0D
00090505 E701                       	dc.b	smpsNoAttack, $01
00090507 E111                       	smpsAlterNote       $11
00090509 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009050D E10D                       	smpsAlterNote       $0D
0009050F C40D                       	dc.b	nG5, $0D
00090511 E107                       	smpsAlterNote       $07
00090513 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090517 E10A                       	smpsAlterNote       $0A
00090519 E701                       	dc.b	smpsNoAttack, $01
0009051B E10D                       	smpsAlterNote       $0D
0009051D 8001                       	dc.b	nRst, $01
0009051F E10C                       	smpsAlterNote       $0C
00090521 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0009052D E10D                       	smpsAlterNote       $0D
0009052F C20E                       	dc.b	nF5, $0E
00090531 E107                       	smpsAlterNote       $07
00090533 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090537 E10D                       	smpsAlterNote       $0D
00090539 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009053F E0C0                       	smpsPan             panCenter, $00
00090541 E603                       	smpsAlterVol        $03
00090543 E108                       	smpsAlterNote       $08
00090545 B406                       	dc.b	nEb4, $06
00090547 E10C                       	smpsAlterNote       $0C
00090549 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009054D E108                       	smpsAlterNote       $08
0009054F B403                       	dc.b	nEb4, $03
00090551 E109                       	smpsAlterNote       $09
00090553 B803 8001                  	dc.b	nG4, $03, nRst, $01
00090557 E10C                       	smpsAlterNote       $0C
00090559 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
00090561 03                         	dc.b	$03
00090562 E6FD                       	smpsAlterVol        $FD
00090564 F6F1 F4                    	smpsJump            music84_Jump00
00090567                            
00090567                            ; PSG1 Data
00090567                            music84_PSG1:
00090567 E1FD                       	smpsAlterNote       $FD
00090569 EC04                       	smpsPSGAlterVol     $04
0009056B 9203                       	dc.b	nF1, $03
0009056D E1FE                       	smpsAlterNote       $FE
0009056F 9603                       	dc.b	nA1, $03
00090571 EC04                       	smpsPSGAlterVol     $04
00090573 E701                       	dc.b	smpsNoAttack, $01
00090575 E1FF                       	smpsAlterNote       $FF
00090577 ECFC                       	smpsPSGAlterVol     $FC
00090579 9B03                       	dc.b	nD2, $03
0009057B E1FD                       	smpsAlterNote       $FD
0009057D 9403                       	dc.b	nG1, $03
0009057F EC04                       	smpsPSGAlterVol     $04
00090581 E701                       	dc.b	smpsNoAttack, $01
00090583 E1FE                       	smpsAlterNote       $FE
00090585 ECFC                       	smpsPSGAlterVol     $FC
00090587 9703                       	dc.b	nBb1, $03
00090589 E1FF                       	smpsAlterNote       $FF
0009058B 9B03                       	dc.b	nD2, $03
0009058D EC04                       	smpsPSGAlterVol     $04
0009058F E701                       	dc.b	smpsNoAttack, $01
00090591 E1FE                       	smpsAlterNote       $FE
00090593 ECFC                       	smpsPSGAlterVol     $FC
00090595 A002                       	dc.b	nG2, $02
00090597 EC04                       	smpsPSGAlterVol     $04
00090599 E701                       	dc.b	smpsNoAttack, $01
0009059B E1FF                       	smpsAlterNote       $FF
0009059D ECFC                       	smpsPSGAlterVol     $FC
0009059F A203                       	dc.b	nA2, $03
000905A1 EC0B                       	smpsPSGAlterVol     $0B
000905A3 800A                       	dc.b	nRst, $0A
000905A5 E105                       	smpsAlterNote       $05
000905A7 01                         	dc.b	$01
000905A8 E1FC                       	smpsAlterNote       $FC
000905AA 01                         	dc.b	$01
000905AB E105                       	smpsAlterNote       $05
000905AD 01                         	dc.b	$01
000905AE E1FD                       	smpsAlterNote       $FD
000905B0 01                         	dc.b	$01
000905B1 E105                       	smpsAlterNote       $05
000905B3 01                         	dc.b	$01
000905B4 E1FD                       	smpsAlterNote       $FD
000905B6 01                         	dc.b	$01
000905B7 E1FA                       	smpsAlterNote       $FA
000905B9 01                         	dc.b	$01
000905BA E1FC                       	smpsAlterNote       $FC
000905BC 01                         	dc.b	$01
000905BD E105                       	smpsAlterNote       $05
000905BF 01                         	dc.b	$01
000905C0 E108                       	smpsAlterNote       $08
000905C2 0101                       	dc.b	$01, $01
000905C4 E105                       	smpsAlterNote       $05
000905C6 01                         	dc.b	$01
000905C7 E1FA                       	smpsAlterNote       $FA
000905C9 0101                       	dc.b	$01, $01
000905CB E1FD                       	smpsAlterNote       $FD
000905CD 01                         	dc.b	$01
000905CE E105                       	smpsAlterNote       $05
000905D0 01                         	dc.b	$01
000905D1 E108                       	smpsAlterNote       $08
000905D3 01                         	dc.b	$01
000905D4 E105                       	smpsAlterNote       $05
000905D6 01                         	dc.b	$01
000905D7 E1FC                       	smpsAlterNote       $FC
000905D9 01                         	dc.b	$01
000905DA E105                       	smpsAlterNote       $05
000905DC 01                         	dc.b	$01
000905DD E1FD                       	smpsAlterNote       $FD
000905DF 01                         	dc.b	$01
000905E0                            
000905E0                            music84_Jump07:
000905E0 E105                       	smpsAlterNote       $05
000905E2 8001                       	dc.b	nRst, $01
000905E4 E1FD                       	smpsAlterNote       $FD
000905E6 01                         	dc.b	$01
000905E7 E1FA                       	smpsAlterNote       $FA
000905E9 01                         	dc.b	$01
000905EA E1FC                       	smpsAlterNote       $FC
000905EC 01                         	dc.b	$01
000905ED E1FD                       	smpsAlterNote       $FD
000905EF ECF5                       	smpsPSGAlterVol     $F5
000905F1 9206                       	dc.b	nF1, $06
000905F3 EC04                       	smpsPSGAlterVol     $04
000905F5 E701                       	dc.b	smpsNoAttack, $01
000905F7 EC07                       	smpsPSGAlterVol     $07
000905F9 8003                       	dc.b	nRst, $03
000905FB ECF5                       	smpsPSGAlterVol     $F5
000905FD 9206                       	dc.b	nF1, $06
000905FF EC04                       	smpsPSGAlterVol     $04
00090601 E701                       	dc.b	smpsNoAttack, $01
00090603 EC07                       	smpsPSGAlterVol     $07
00090605 8006                       	dc.b	nRst, $06
00090607 E100                       	smpsAlterNote       $00
00090609 01                         	dc.b	$01
0009060A E104                       	smpsAlterNote       $04
0009060C 01                         	dc.b	$01
0009060D E100                       	smpsAlterNote       $00
0009060F 01                         	dc.b	$01
00090610 E1FB                       	smpsAlterNote       $FB
00090612 01                         	dc.b	$01
00090613 E1FD                       	smpsAlterNote       $FD
00090615 ECF5                       	smpsPSGAlterVol     $F5
00090617 9406                       	dc.b	nG1, $06
00090619 EC04                       	smpsPSGAlterVol     $04
0009061B E701                       	dc.b	smpsNoAttack, $01
0009061D EC07                       	smpsPSGAlterVol     $07
0009061F 8003                       	dc.b	nRst, $03
00090621 ECF5                       	smpsPSGAlterVol     $F5
00090623 9407                       	dc.b	nG1, $07
00090625 EC0B                       	smpsPSGAlterVol     $0B
00090627 8006                       	dc.b	nRst, $06
00090629 E100                       	smpsAlterNote       $00
0009062B 01                         	dc.b	$01
0009062C E103                       	smpsAlterNote       $03
0009062E 0101                       	dc.b	$01, $01
00090630 E1FD                       	smpsAlterNote       $FD
00090632 01                         	dc.b	$01
00090633 ECF5                       	smpsPSGAlterVol     $F5
00090635 9207                       	dc.b	nF1, $07
00090637 EC0B                       	smpsPSGAlterVol     $0B
00090639 8004                       	dc.b	nRst, $04
0009063B ECF5                       	smpsPSGAlterVol     $F5
0009063D 9206                       	dc.b	nF1, $06
0009063F EC04                       	smpsPSGAlterVol     $04
00090641 E701                       	dc.b	smpsNoAttack, $01
00090643 EC07                       	smpsPSGAlterVol     $07
00090645 8006                       	dc.b	nRst, $06
00090647 E103                       	smpsAlterNote       $03
00090649 01                         	dc.b	$01
0009064A E104                       	smpsAlterNote       $04
0009064C 01                         	dc.b	$01
0009064D E100                       	smpsAlterNote       $00
0009064F 01                         	dc.b	$01
00090650 E1FA                       	smpsAlterNote       $FA
00090652 01                         	dc.b	$01
00090653 E1FD                       	smpsAlterNote       $FD
00090655 ECF5                       	smpsPSGAlterVol     $F5
00090657 9206                       	dc.b	nF1, $06
00090659 EC04                       	smpsPSGAlterVol     $04
0009065B E701                       	dc.b	smpsNoAttack, $01
0009065D EC07                       	smpsPSGAlterVol     $07
0009065F 8003                       	dc.b	nRst, $03
00090661 ECF5                       	smpsPSGAlterVol     $F5
00090663 9106                       	dc.b	nE1, $06
00090665 EC04                       	smpsPSGAlterVol     $04
00090667 E701                       	dc.b	smpsNoAttack, $01
00090669 EC07                       	smpsPSGAlterVol     $07
0009066B 8006                       	dc.b	nRst, $06
0009066D E100                       	smpsAlterNote       $00
0009066F 01                         	dc.b	$01
00090670 E104                       	smpsAlterNote       $04
00090672 01                         	dc.b	$01
00090673 E100                       	smpsAlterNote       $00
00090675 01                         	dc.b	$01
00090676 E1FD                       	smpsAlterNote       $FD
00090678 01                         	dc.b	$01
00090679 ECF5                       	smpsPSGAlterVol     $F5
0009067B 9206                       	dc.b	nF1, $06
0009067D EC04                       	smpsPSGAlterVol     $04
0009067F E701                       	dc.b	smpsNoAttack, $01
00090681 EC07                       	smpsPSGAlterVol     $07
00090683 8003                       	dc.b	nRst, $03
00090685 ECF5                       	smpsPSGAlterVol     $F5
00090687 9207                       	dc.b	nF1, $07
00090689 EC0B                       	smpsPSGAlterVol     $0B
0009068B 8007                       	dc.b	nRst, $07
0009068D E103                       	smpsAlterNote       $03
0009068F 0101                       	dc.b	$01, $01
00090691 E1FD                       	smpsAlterNote       $FD
00090693 01                         	dc.b	$01
00090694 E1FB                       	smpsAlterNote       $FB
00090696 01                         	dc.b	$01
00090697 E1FD                       	smpsAlterNote       $FD
00090699 ECF5                       	smpsPSGAlterVol     $F5
0009069B 9406                       	dc.b	nG1, $06
0009069D EC0B                       	smpsPSGAlterVol     $0B
0009069F 8004                       	dc.b	nRst, $04
000906A1 ECF5                       	smpsPSGAlterVol     $F5
000906A3 9406                       	dc.b	nG1, $06
000906A5 EC04                       	smpsPSGAlterVol     $04
000906A7 E701                       	dc.b	smpsNoAttack, $01
000906A9 EC07                       	smpsPSGAlterVol     $07
000906AB 8006                       	dc.b	nRst, $06
000906AD E100                       	smpsAlterNote       $00
000906AF 01                         	dc.b	$01
000906B0 E104                       	smpsAlterNote       $04
000906B2 01                         	dc.b	$01
000906B3 E100                       	smpsAlterNote       $00
000906B5 01                         	dc.b	$01
000906B6 E1F9                       	smpsAlterNote       $F9
000906B8 01                         	dc.b	$01
000906B9 E1FD                       	smpsAlterNote       $FD
000906BB ECF5                       	smpsPSGAlterVol     $F5
000906BD 9206                       	dc.b	nF1, $06
000906BF EC04                       	smpsPSGAlterVol     $04
000906C1 E701                       	dc.b	smpsNoAttack, $01
000906C3 EC07                       	smpsPSGAlterVol     $07
000906C5 8003                       	dc.b	nRst, $03
000906C7 ECF5                       	smpsPSGAlterVol     $F5
000906C9 9207                       	dc.b	nF1, $07
000906CB EC0B                       	smpsPSGAlterVol     $0B
000906CD 8006                       	dc.b	nRst, $06
000906CF E100                       	smpsAlterNote       $00
000906D1 01                         	dc.b	$01
000906D2 E104                       	smpsAlterNote       $04
000906D4 01                         	dc.b	$01
000906D5 E103                       	smpsAlterNote       $03
000906D7 01                         	dc.b	$01
000906D8 E1FD                       	smpsAlterNote       $FD
000906DA 01                         	dc.b	$01
000906DB ECF5                       	smpsPSGAlterVol     $F5
000906DD 9207                       	dc.b	nF1, $07
000906DF EC0B                       	smpsPSGAlterVol     $0B
000906E1 8004                       	dc.b	nRst, $04
000906E3 ECF5                       	smpsPSGAlterVol     $F5
000906E5 9206                       	dc.b	nF1, $06
000906E7 EC0B                       	smpsPSGAlterVol     $0B
000906E9 8007                       	dc.b	nRst, $07
000906EB E103                       	smpsAlterNote       $03
000906ED 0101                       	dc.b	$01, $01
000906EF E100                       	smpsAlterNote       $00
000906F1 01                         	dc.b	$01
000906F2 E1FA                       	smpsAlterNote       $FA
000906F4 01                         	dc.b	$01
000906F5 E1FD                       	smpsAlterNote       $FD
000906F7 ECF5                       	smpsPSGAlterVol     $F5
000906F9 9206                       	dc.b	nF1, $06
000906FB EC04                       	smpsPSGAlterVol     $04
000906FD E701                       	dc.b	smpsNoAttack, $01
000906FF EC07                       	smpsPSGAlterVol     $07
00090701 8003                       	dc.b	nRst, $03
00090703 ECF5                       	smpsPSGAlterVol     $F5
00090705 9206                       	dc.b	nF1, $06
00090707 EC04                       	smpsPSGAlterVol     $04
00090709 E701                       	dc.b	smpsNoAttack, $01
0009070B EC07                       	smpsPSGAlterVol     $07
0009070D 8006                       	dc.b	nRst, $06
0009070F E100                       	smpsAlterNote       $00
00090711 01                         	dc.b	$01
00090712 E104                       	smpsAlterNote       $04
00090714 01                         	dc.b	$01
00090715 E100                       	smpsAlterNote       $00
00090717 01                         	dc.b	$01
00090718 E1FD                       	smpsAlterNote       $FD
0009071A 01                         	dc.b	$01
0009071B ECF5                       	smpsPSGAlterVol     $F5
0009071D 9206                       	dc.b	nF1, $06
0009071F EC04                       	smpsPSGAlterVol     $04
00090721 E701                       	dc.b	smpsNoAttack, $01
00090723 EC07                       	smpsPSGAlterVol     $07
00090725 8003                       	dc.b	nRst, $03
00090727 ECF5                       	smpsPSGAlterVol     $F5
00090729 9207                       	dc.b	nF1, $07
0009072B EC0B                       	smpsPSGAlterVol     $0B
0009072D 8007                       	dc.b	nRst, $07
0009072F E103                       	smpsAlterNote       $03
00090731 0101                       	dc.b	$01, $01
00090733 E1FD                       	smpsAlterNote       $FD
00090735 01                         	dc.b	$01
00090736 E1FA                       	smpsAlterNote       $FA
00090738 01                         	dc.b	$01
00090739 E1FD                       	smpsAlterNote       $FD
0009073B ECF5                       	smpsPSGAlterVol     $F5
0009073D 9206                       	dc.b	nF1, $06
0009073F EC0B                       	smpsPSGAlterVol     $0B
00090741 8004                       	dc.b	nRst, $04
00090743 ECF5                       	smpsPSGAlterVol     $F5
00090745 9206                       	dc.b	nF1, $06
00090747 EC04                       	smpsPSGAlterVol     $04
00090749 E701                       	dc.b	smpsNoAttack, $01
0009074B EC07                       	smpsPSGAlterVol     $07
0009074D 8006                       	dc.b	nRst, $06
0009074F E103                       	smpsAlterNote       $03
00090751 01                         	dc.b	$01
00090752 E104                       	smpsAlterNote       $04
00090754 01                         	dc.b	$01
00090755 E100                       	smpsAlterNote       $00
00090757 01                         	dc.b	$01
00090758 E1FA                       	smpsAlterNote       $FA
0009075A 01                         	dc.b	$01
0009075B E1FD                       	smpsAlterNote       $FD
0009075D ECF5                       	smpsPSGAlterVol     $F5
0009075F 9206                       	dc.b	nF1, $06
00090761 EC04                       	smpsPSGAlterVol     $04
00090763 E701                       	dc.b	smpsNoAttack, $01
00090765 EC07                       	smpsPSGAlterVol     $07
00090767 8003                       	dc.b	nRst, $03
00090769 ECF5                       	smpsPSGAlterVol     $F5
0009076B 9206                       	dc.b	nF1, $06
0009076D EC04                       	smpsPSGAlterVol     $04
0009076F E701                       	dc.b	smpsNoAttack, $01
00090771 EC07                       	smpsPSGAlterVol     $07
00090773 8006                       	dc.b	nRst, $06
00090775 E100                       	smpsAlterNote       $00
00090777 01                         	dc.b	$01
00090778 E104                       	smpsAlterNote       $04
0009077A 01                         	dc.b	$01
0009077B E103                       	smpsAlterNote       $03
0009077D 01                         	dc.b	$01
0009077E E1FD                       	smpsAlterNote       $FD
00090780 01                         	dc.b	$01
00090781 ECF5                       	smpsPSGAlterVol     $F5
00090783 9107                       	dc.b	nE1, $07
00090785 EC0B                       	smpsPSGAlterVol     $0B
00090787 8004                       	dc.b	nRst, $04
00090789 ECF5                       	smpsPSGAlterVol     $F5
0009078B 9106                       	dc.b	nE1, $06
0009078D EC0B                       	smpsPSGAlterVol     $0B
0009078F 8007                       	dc.b	nRst, $07
00090791 E103                       	smpsAlterNote       $03
00090793 0101                       	dc.b	$01, $01
00090795 E100                       	smpsAlterNote       $00
00090797 01                         	dc.b	$01
00090798 E1FA                       	smpsAlterNote       $FA
0009079A 01                         	dc.b	$01
0009079B E1FD                       	smpsAlterNote       $FD
0009079D ECF5                       	smpsPSGAlterVol     $F5
0009079F 9106                       	dc.b	nE1, $06
000907A1 EC04                       	smpsPSGAlterVol     $04
000907A3 E701                       	dc.b	smpsNoAttack, $01
000907A5 EC07                       	smpsPSGAlterVol     $07
000907A7 8003                       	dc.b	nRst, $03
000907A9 ECF5                       	smpsPSGAlterVol     $F5
000907AB 9106                       	dc.b	nE1, $06
000907AD EC04                       	smpsPSGAlterVol     $04
000907AF E701                       	dc.b	smpsNoAttack, $01
000907B1 EC07                       	smpsPSGAlterVol     $07
000907B3 8006                       	dc.b	nRst, $06
000907B5 E100                       	smpsAlterNote       $00
000907B7 01                         	dc.b	$01
000907B8 E104                       	smpsAlterNote       $04
000907BA 01                         	dc.b	$01
000907BB E100                       	smpsAlterNote       $00
000907BD 01                         	dc.b	$01
000907BE E1FA                       	smpsAlterNote       $FA
000907C0 01                         	dc.b	$01
000907C1 E1FD                       	smpsAlterNote       $FD
000907C3 ECF5                       	smpsPSGAlterVol     $F5
000907C5 9106                       	dc.b	nE1, $06
000907C7 EC04                       	smpsPSGAlterVol     $04
000907C9 E701                       	dc.b	smpsNoAttack, $01
000907CB EC07                       	smpsPSGAlterVol     $07
000907CD 8003                       	dc.b	nRst, $03
000907CF ECF5                       	smpsPSGAlterVol     $F5
000907D1 9107 9106                  	dc.b	nE1, $07, nE1, $06
000907D5 EC04                       	smpsPSGAlterVol     $04
000907D7 E701                       	dc.b	smpsNoAttack, $01
000907D9 ECFC                       	smpsPSGAlterVol     $FC
000907DB 9103 9103                  	dc.b	nE1, $03, nE1, $03
000907DF EC04                       	smpsPSGAlterVol     $04
000907E1 E701                       	dc.b	smpsNoAttack, $01
000907E3 ECFC                       	smpsPSGAlterVol     $FC
000907E5 9106                       	dc.b	nE1, $06
000907E7 EC04                       	smpsPSGAlterVol     $04
000907E9 E701                       	dc.b	smpsNoAttack, $01
000907EB EC07                       	smpsPSGAlterVol     $07
000907ED 8006                       	dc.b	nRst, $06
000907EF E100                       	smpsAlterNote       $00
000907F1 01                         	dc.b	$01
000907F2 E104                       	smpsAlterNote       $04
000907F4 01                         	dc.b	$01
000907F5 E100                       	smpsAlterNote       $00
000907F7 01                         	dc.b	$01
000907F8 E1FA                       	smpsAlterNote       $FA
000907FA 01                         	dc.b	$01
000907FB E1F9                       	smpsAlterNote       $F9
000907FD 01                         	dc.b	$01
000907FE E1FD                       	smpsAlterNote       $FD
00090800 01                         	dc.b	$01
00090801 E103                       	smpsAlterNote       $03
00090803 01                         	dc.b	$01
00090804 E104                       	smpsAlterNote       $04
00090806 01                         	dc.b	$01
00090807 E100                       	smpsAlterNote       $00
00090809 01                         	dc.b	$01
0009080A E1FA                       	smpsAlterNote       $FA
0009080C 0101                       	dc.b	$01, $01
0009080E E1FD                       	smpsAlterNote       $FD
00090810 ECF5                       	smpsPSGAlterVol     $F5
00090812 9206                       	dc.b	nF1, $06
00090814 EC04                       	smpsPSGAlterVol     $04
00090816 E701                       	dc.b	smpsNoAttack, $01
00090818 EC07                       	smpsPSGAlterVol     $07
0009081A 8003                       	dc.b	nRst, $03
0009081C ECF5                       	smpsPSGAlterVol     $F5
0009081E 9206                       	dc.b	nF1, $06
00090820 EC04                       	smpsPSGAlterVol     $04
00090822 E701                       	dc.b	smpsNoAttack, $01
00090824 EC07                       	smpsPSGAlterVol     $07
00090826 8006                       	dc.b	nRst, $06
00090828 E100                       	smpsAlterNote       $00
0009082A 01                         	dc.b	$01
0009082B E104                       	smpsAlterNote       $04
0009082D 01                         	dc.b	$01
0009082E E103                       	smpsAlterNote       $03
00090830 01                         	dc.b	$01
00090831 E1FD                       	smpsAlterNote       $FD
00090833 01                         	dc.b	$01
00090834 ECF5                       	smpsPSGAlterVol     $F5
00090836 9407                       	dc.b	nG1, $07
00090838 EC0B                       	smpsPSGAlterVol     $0B
0009083A 8004                       	dc.b	nRst, $04
0009083C ECF5                       	smpsPSGAlterVol     $F5
0009083E 9406                       	dc.b	nG1, $06
00090840 EC0B                       	smpsPSGAlterVol     $0B
00090842 8007                       	dc.b	nRst, $07
00090844 E103                       	smpsAlterNote       $03
00090846 0101                       	dc.b	$01, $01
00090848 E1FD                       	smpsAlterNote       $FD
0009084A 01                         	dc.b	$01
0009084B E1F9                       	smpsAlterNote       $F9
0009084D 01                         	dc.b	$01
0009084E E1FD                       	smpsAlterNote       $FD
00090850 ECF5                       	smpsPSGAlterVol     $F5
00090852 9206                       	dc.b	nF1, $06
00090854 EC04                       	smpsPSGAlterVol     $04
00090856 E701                       	dc.b	smpsNoAttack, $01
00090858 EC07                       	smpsPSGAlterVol     $07
0009085A 8003                       	dc.b	nRst, $03
0009085C ECF5                       	smpsPSGAlterVol     $F5
0009085E 9206                       	dc.b	nF1, $06
00090860 EC04                       	smpsPSGAlterVol     $04
00090862 E701                       	dc.b	smpsNoAttack, $01
00090864 EC07                       	smpsPSGAlterVol     $07
00090866 8006                       	dc.b	nRst, $06
00090868 E100                       	smpsAlterNote       $00
0009086A 01                         	dc.b	$01
0009086B E104                       	smpsAlterNote       $04
0009086D 01                         	dc.b	$01
0009086E E100                       	smpsAlterNote       $00
00090870 01                         	dc.b	$01
00090871 E1FA                       	smpsAlterNote       $FA
00090873 01                         	dc.b	$01
00090874 E1FD                       	smpsAlterNote       $FD
00090876 ECF5                       	smpsPSGAlterVol     $F5
00090878 9206                       	dc.b	nF1, $06
0009087A EC04                       	smpsPSGAlterVol     $04
0009087C E701                       	dc.b	smpsNoAttack, $01
0009087E EC07                       	smpsPSGAlterVol     $07
00090880 8003                       	dc.b	nRst, $03
00090882 ECF5                       	smpsPSGAlterVol     $F5
00090884 9107                       	dc.b	nE1, $07
00090886 EC0B                       	smpsPSGAlterVol     $0B
00090888 8006                       	dc.b	nRst, $06
0009088A E100                       	smpsAlterNote       $00
0009088C 01                         	dc.b	$01
0009088D E103                       	smpsAlterNote       $03
0009088F 0101                       	dc.b	$01, $01
00090891 E1FD                       	smpsAlterNote       $FD
00090893 01                         	dc.b	$01
00090894 ECF5                       	smpsPSGAlterVol     $F5
00090896 9207                       	dc.b	nF1, $07
00090898 EC0B                       	smpsPSGAlterVol     $0B
0009089A 8004                       	dc.b	nRst, $04
0009089C ECF5                       	smpsPSGAlterVol     $F5
0009089E 9206                       	dc.b	nF1, $06
000908A0 EC04                       	smpsPSGAlterVol     $04
000908A2 E701                       	dc.b	smpsNoAttack, $01
000908A4 EC07                       	smpsPSGAlterVol     $07
000908A6 8006                       	dc.b	nRst, $06
000908A8 E103                       	smpsAlterNote       $03
000908AA 01                         	dc.b	$01
000908AB E104                       	smpsAlterNote       $04
000908AD 01                         	dc.b	$01
000908AE E100                       	smpsAlterNote       $00
000908B0 01                         	dc.b	$01
000908B1 E1FB                       	smpsAlterNote       $FB
000908B3 01                         	dc.b	$01
000908B4 E1FD                       	smpsAlterNote       $FD
000908B6 ECF5                       	smpsPSGAlterVol     $F5
000908B8 9406                       	dc.b	nG1, $06
000908BA EC04                       	smpsPSGAlterVol     $04
000908BC E701                       	dc.b	smpsNoAttack, $01
000908BE EC07                       	smpsPSGAlterVol     $07
000908C0 8003                       	dc.b	nRst, $03
000908C2 ECF5                       	smpsPSGAlterVol     $F5
000908C4 9406                       	dc.b	nG1, $06
000908C6 EC04                       	smpsPSGAlterVol     $04
000908C8 E701                       	dc.b	smpsNoAttack, $01
000908CA EC07                       	smpsPSGAlterVol     $07
000908CC 8006                       	dc.b	nRst, $06
000908CE E100                       	smpsAlterNote       $00
000908D0 01                         	dc.b	$01
000908D1 E104                       	smpsAlterNote       $04
000908D3 01                         	dc.b	$01
000908D4 E100                       	smpsAlterNote       $00
000908D6 01                         	dc.b	$01
000908D7 E1FD                       	smpsAlterNote       $FD
000908D9 01                         	dc.b	$01
000908DA ECF5                       	smpsPSGAlterVol     $F5
000908DC 9206                       	dc.b	nF1, $06
000908DE EC04                       	smpsPSGAlterVol     $04
000908E0 E701                       	dc.b	smpsNoAttack, $01
000908E2 EC07                       	smpsPSGAlterVol     $07
000908E4 8003                       	dc.b	nRst, $03
000908E6 ECF5                       	smpsPSGAlterVol     $F5
000908E8 9207                       	dc.b	nF1, $07
000908EA EC0B                       	smpsPSGAlterVol     $0B
000908EC 8007                       	dc.b	nRst, $07
000908EE E103                       	smpsAlterNote       $03
000908F0 0101                       	dc.b	$01, $01
000908F2 E1FD                       	smpsAlterNote       $FD
000908F4 01                         	dc.b	$01
000908F5 E1FA                       	smpsAlterNote       $FA
000908F7 01                         	dc.b	$01
000908F8 E1FD                       	smpsAlterNote       $FD
000908FA ECF5                       	smpsPSGAlterVol     $F5
000908FC 9206                       	dc.b	nF1, $06
000908FE EC0B                       	smpsPSGAlterVol     $0B
00090900 8004                       	dc.b	nRst, $04
00090902 ECF5                       	smpsPSGAlterVol     $F5
00090904 9206                       	dc.b	nF1, $06
00090906 EC04                       	smpsPSGAlterVol     $04
00090908 E701                       	dc.b	smpsNoAttack, $01
0009090A EC07                       	smpsPSGAlterVol     $07
0009090C 8006                       	dc.b	nRst, $06
0009090E E100                       	smpsAlterNote       $00
00090910 01                         	dc.b	$01
00090911 E104                       	smpsAlterNote       $04
00090913 01                         	dc.b	$01
00090914 E100                       	smpsAlterNote       $00
00090916 01                         	dc.b	$01
00090917 E1FA                       	smpsAlterNote       $FA
00090919 01                         	dc.b	$01
0009091A E1FD                       	smpsAlterNote       $FD
0009091C ECF5                       	smpsPSGAlterVol     $F5
0009091E 9206                       	dc.b	nF1, $06
00090920 EC04                       	smpsPSGAlterVol     $04
00090922 E704                       	dc.b	smpsNoAttack, $04
00090924 ECFC                       	smpsPSGAlterVol     $FC
00090926 9207                       	dc.b	nF1, $07
00090928 EC0B                       	smpsPSGAlterVol     $0B
0009092A 8006                       	dc.b	nRst, $06
0009092C E100                       	smpsAlterNote       $00
0009092E 01                         	dc.b	$01
0009092F E104                       	smpsAlterNote       $04
00090931 01                         	dc.b	$01
00090932 E103                       	smpsAlterNote       $03
00090934 01                         	dc.b	$01
00090935 E1FD                       	smpsAlterNote       $FD
00090937 01                         	dc.b	$01
00090938 ECF5                       	smpsPSGAlterVol     $F5
0009093A 9207                       	dc.b	nF1, $07
0009093C EC0B                       	smpsPSGAlterVol     $0B
0009093E 8004                       	dc.b	nRst, $04
00090940 ECF5                       	smpsPSGAlterVol     $F5
00090942 9206                       	dc.b	nF1, $06
00090944 EC0B                       	smpsPSGAlterVol     $0B
00090946 8007                       	dc.b	nRst, $07
00090948 E103                       	smpsAlterNote       $03
0009094A 0101                       	dc.b	$01, $01
0009094C E100                       	smpsAlterNote       $00
0009094E 01                         	dc.b	$01
0009094F E1FA                       	smpsAlterNote       $FA
00090951 01                         	dc.b	$01
00090952 E1FD                       	smpsAlterNote       $FD
00090954 ECF5                       	smpsPSGAlterVol     $F5
00090956 9206                       	dc.b	nF1, $06
00090958 EC04                       	smpsPSGAlterVol     $04
0009095A E704                       	dc.b	smpsNoAttack, $04
0009095C ECFC                       	smpsPSGAlterVol     $FC
0009095E 9206                       	dc.b	nF1, $06
00090960 EC04                       	smpsPSGAlterVol     $04
00090962 E701                       	dc.b	smpsNoAttack, $01
00090964 EC07                       	smpsPSGAlterVol     $07
00090966 8006                       	dc.b	nRst, $06
00090968 E100                       	smpsAlterNote       $00
0009096A 01                         	dc.b	$01
0009096B E104                       	smpsAlterNote       $04
0009096D 01                         	dc.b	$01
0009096E E100                       	smpsAlterNote       $00
00090970 01                         	dc.b	$01
00090971 E1FD                       	smpsAlterNote       $FD
00090973 01                         	dc.b	$01
00090974 ECF5                       	smpsPSGAlterVol     $F5
00090976 9206                       	dc.b	nF1, $06
00090978 EC04                       	smpsPSGAlterVol     $04
0009097A E701                       	dc.b	smpsNoAttack, $01
0009097C EC07                       	smpsPSGAlterVol     $07
0009097E 8003                       	dc.b	nRst, $03
00090980 ECF5                       	smpsPSGAlterVol     $F5
00090982 9207                       	dc.b	nF1, $07
00090984 EC0B                       	smpsPSGAlterVol     $0B
00090986 8007                       	dc.b	nRst, $07
00090988 E103                       	smpsAlterNote       $03
0009098A 0101                       	dc.b	$01, $01
0009098C E1FD                       	smpsAlterNote       $FD
0009098E 01                         	dc.b	$01
0009098F E1FA                       	smpsAlterNote       $FA
00090991 01                         	dc.b	$01
00090992 E1FD                       	smpsAlterNote       $FD
00090994 ECF5                       	smpsPSGAlterVol     $F5
00090996 9106                       	dc.b	nE1, $06
00090998 EC0B                       	smpsPSGAlterVol     $0B
0009099A 8004                       	dc.b	nRst, $04
0009099C ECF5                       	smpsPSGAlterVol     $F5
0009099E 9106                       	dc.b	nE1, $06
000909A0 EC04                       	smpsPSGAlterVol     $04
000909A2 E701                       	dc.b	smpsNoAttack, $01
000909A4 EC07                       	smpsPSGAlterVol     $07
000909A6 8006                       	dc.b	nRst, $06
000909A8 E100                       	smpsAlterNote       $00
000909AA 01                         	dc.b	$01
000909AB E104                       	smpsAlterNote       $04
000909AD 01                         	dc.b	$01
000909AE E100                       	smpsAlterNote       $00
000909B0 01                         	dc.b	$01
000909B1 E1FA                       	smpsAlterNote       $FA
000909B3 01                         	dc.b	$01
000909B4 E1FD                       	smpsAlterNote       $FD
000909B6 ECF5                       	smpsPSGAlterVol     $F5
000909B8 9106                       	dc.b	nE1, $06
000909BA EC04                       	smpsPSGAlterVol     $04
000909BC E701                       	dc.b	smpsNoAttack, $01
000909BE EC07                       	smpsPSGAlterVol     $07
000909C0 8003                       	dc.b	nRst, $03
000909C2 ECF5                       	smpsPSGAlterVol     $F5
000909C4 9106                       	dc.b	nE1, $06
000909C6 EC04                       	smpsPSGAlterVol     $04
000909C8 E701                       	dc.b	smpsNoAttack, $01
000909CA EC07                       	smpsPSGAlterVol     $07
000909CC 8006                       	dc.b	nRst, $06
000909CE E100                       	smpsAlterNote       $00
000909D0 01                         	dc.b	$01
000909D1 E104                       	smpsAlterNote       $04
000909D3 01                         	dc.b	$01
000909D4 E103                       	smpsAlterNote       $03
000909D6 01                         	dc.b	$01
000909D7 E1FD                       	smpsAlterNote       $FD
000909D9 01                         	dc.b	$01
000909DA ECF5                       	smpsPSGAlterVol     $F5
000909DC 9107                       	dc.b	nE1, $07
000909DE EC0B                       	smpsPSGAlterVol     $0B
000909E0 8004                       	dc.b	nRst, $04
000909E2 ECF5                       	smpsPSGAlterVol     $F5
000909E4 9106                       	dc.b	nE1, $06
000909E6 EC0B                       	smpsPSGAlterVol     $0B
000909E8 8007                       	dc.b	nRst, $07
000909EA E103                       	smpsAlterNote       $03
000909EC 0101                       	dc.b	$01, $01
000909EE E100                       	smpsAlterNote       $00
000909F0 01                         	dc.b	$01
000909F1 E1FA                       	smpsAlterNote       $FA
000909F3 01                         	dc.b	$01
000909F4 E1FD                       	smpsAlterNote       $FD
000909F6 ECF5                       	smpsPSGAlterVol     $F5
000909F8 9106                       	dc.b	nE1, $06
000909FA EC04                       	smpsPSGAlterVol     $04
000909FC E701                       	dc.b	smpsNoAttack, $01
000909FE EC07                       	smpsPSGAlterVol     $07
00090A00 8003                       	dc.b	nRst, $03
00090A02 ECF5                       	smpsPSGAlterVol     $F5
00090A04 9106                       	dc.b	nE1, $06
00090A06 EC04                       	smpsPSGAlterVol     $04
00090A08 E701                       	dc.b	smpsNoAttack, $01
00090A0A EC07                       	smpsPSGAlterVol     $07
00090A0C 8003                       	dc.b	nRst, $03
00090A0E ECF5                       	smpsPSGAlterVol     $F5
00090A10 9207                       	dc.b	nF1, $07
00090A12 EC0B                       	smpsPSGAlterVol     $0B
00090A14 8006                       	dc.b	nRst, $06
00090A16 E100                       	smpsAlterNote       $00
00090A18 01                         	dc.b	$01
00090A19 E104                       	smpsAlterNote       $04
00090A1B 01                         	dc.b	$01
00090A1C E103                       	smpsAlterNote       $03
00090A1E 01                         	dc.b	$01
00090A1F E1FD                       	smpsAlterNote       $FD
00090A21 01                         	dc.b	$01
00090A22 E1F9                       	smpsAlterNote       $F9
00090A24 01                         	dc.b	$01
00090A25 E1FD                       	smpsAlterNote       $FD
00090A27 01                         	dc.b	$01
00090A28 E100                       	smpsAlterNote       $00
00090A2A 01                         	dc.b	$01
00090A2B E104                       	smpsAlterNote       $04
00090A2D 01                         	dc.b	$01
00090A2E E1FD                       	smpsAlterNote       $FD
00090A30 ECF5                       	smpsPSGAlterVol     $F5
00090A32 9203 9203                  	dc.b	nF1, $03, nF1, $03
00090A36 EC04                       	smpsPSGAlterVol     $04
00090A38 E701                       	dc.b	smpsNoAttack, $01
00090A3A EC07                       	smpsPSGAlterVol     $07
00090A3C 8009                       	dc.b	nRst, $09
00090A3E E100                       	smpsAlterNote       $00
00090A40 01                         	dc.b	$01
00090A41 E104                       	smpsAlterNote       $04
00090A43 01                         	dc.b	$01
00090A44 E103                       	smpsAlterNote       $03
00090A46 01                         	dc.b	$01
00090A47 E1FD                       	smpsAlterNote       $FD
00090A49 01                         	dc.b	$01
00090A4A E1F9                       	smpsAlterNote       $F9
00090A4C 01                         	dc.b	$01
00090A4D E1FD                       	smpsAlterNote       $FD
00090A4F 01                         	dc.b	$01
00090A50 E100                       	smpsAlterNote       $00
00090A52 01                         	dc.b	$01
00090A53 E104                       	smpsAlterNote       $04
00090A55 01                         	dc.b	$01
00090A56 E100                       	smpsAlterNote       $00
00090A58 01                         	dc.b	$01
00090A59 E1FA                       	smpsAlterNote       $FA
00090A5B 01                         	dc.b	$01
00090A5C E1F9                       	smpsAlterNote       $F9
00090A5E 01                         	dc.b	$01
00090A5F E1FD                       	smpsAlterNote       $FD
00090A61 01                         	dc.b	$01
00090A62 E103                       	smpsAlterNote       $03
00090A64 0101                       	dc.b	$01, $01
00090A66 E100                       	smpsAlterNote       $00
00090A68 01                         	dc.b	$01
00090A69 E1FD                       	smpsAlterNote       $FD
00090A6B ECF5                       	smpsPSGAlterVol     $F5
00090A6D 9202                       	dc.b	nF1, $02
00090A6F EC04                       	smpsPSGAlterVol     $04
00090A71 E701                       	dc.b	smpsNoAttack, $01
00090A73 ECFC                       	smpsPSGAlterVol     $FC
00090A75 9106                       	dc.b	nE1, $06
00090A77 EC04                       	smpsPSGAlterVol     $04
00090A79 E701                       	dc.b	smpsNoAttack, $01
00090A7B EC07                       	smpsPSGAlterVol     $07
00090A7D 8006                       	dc.b	nRst, $06
00090A7F E100                       	smpsAlterNote       $00
00090A81 01                         	dc.b	$01
00090A82 E104                       	smpsAlterNote       $04
00090A84 01                         	dc.b	$01
00090A85 E100                       	smpsAlterNote       $00
00090A87 01                         	dc.b	$01
00090A88 E1FD                       	smpsAlterNote       $FD
00090A8A 01                         	dc.b	$01
00090A8B E1F9                       	smpsAlterNote       $F9
00090A8D 01                         	dc.b	$01
00090A8E E1FD                       	smpsAlterNote       $FD
00090A90 01                         	dc.b	$01
00090A91 E103                       	smpsAlterNote       $03
00090A93 01                         	dc.b	$01
00090A94 E104                       	smpsAlterNote       $04
00090A96 01                         	dc.b	$01
00090A97 E1FD                       	smpsAlterNote       $FD
00090A99 ECF5                       	smpsPSGAlterVol     $F5
00090A9B 9102                       	dc.b	nE1, $02
00090A9D EC04                       	smpsPSGAlterVol     $04
00090A9F E701                       	dc.b	smpsNoAttack, $01
00090AA1 ECFC                       	smpsPSGAlterVol     $FC
00090AA3 920D                       	dc.b	nF1, $0D
00090AA5 E100                       	smpsAlterNote       $00
00090AA7 E701                       	dc.b	smpsNoAttack, $01
00090AA9 E104                       	smpsAlterNote       $04
00090AAB E701                       	dc.b	smpsNoAttack, $01
00090AAD E100                       	smpsAlterNote       $00
00090AAF E701                       	dc.b	smpsNoAttack, $01
00090AB1 E1FD                       	smpsAlterNote       $FD
00090AB3 E701                       	dc.b	smpsNoAttack, $01
00090AB5 E1F9                       	smpsAlterNote       $F9
00090AB7 E701                       	dc.b	smpsNoAttack, $01
00090AB9 E1FD                       	smpsAlterNote       $FD
00090ABB E701                       	dc.b	smpsNoAttack, $01
00090ABD E103                       	smpsAlterNote       $03
00090ABF E701                       	dc.b	smpsNoAttack, $01
00090AC1 E104                       	smpsAlterNote       $04
00090AC3 E701                       	dc.b	smpsNoAttack, $01
00090AC5 E100                       	smpsAlterNote       $00
00090AC7 E701                       	dc.b	smpsNoAttack, $01
00090AC9 E1FA                       	smpsAlterNote       $FA
00090ACB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090ACF E1FD                       	smpsAlterNote       $FD
00090AD1 E701                       	dc.b	smpsNoAttack, $01
00090AD3 E103                       	smpsAlterNote       $03
00090AD5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090AD9 E1FD                       	smpsAlterNote       $FD
00090ADB E701                       	dc.b	smpsNoAttack, $01
00090ADD E1F9                       	smpsAlterNote       $F9
00090ADF E701                       	dc.b	smpsNoAttack, $01
00090AE1 E1FA                       	smpsAlterNote       $FA
00090AE3 E701                       	dc.b	smpsNoAttack, $01
00090AE5 E100                       	smpsAlterNote       $00
00090AE7 EC04                       	smpsPSGAlterVol     $04
00090AE9 E701                       	dc.b	smpsNoAttack, $01
00090AEB EC07                       	smpsPSGAlterVol     $07
00090AED E104                       	smpsAlterNote       $04
00090AEF 8001                       	dc.b	nRst, $01
00090AF1 E100                       	smpsAlterNote       $00
00090AF3 01                         	dc.b	$01
00090AF4 E1FD                       	smpsAlterNote       $FD
00090AF6 01                         	dc.b	$01
00090AF7 E1F9                       	smpsAlterNote       $F9
00090AF9 01                         	dc.b	$01
00090AFA E1FD                       	smpsAlterNote       $FD
00090AFC 01                         	dc.b	$01
00090AFD E103                       	smpsAlterNote       $03
00090AFF 01                         	dc.b	$01
00090B00 E104                       	smpsAlterNote       $04
00090B02 01                         	dc.b	$01
00090B03 E1FD                       	smpsAlterNote       $FD
00090B05 ECF5                       	smpsPSGAlterVol     $F5
00090B07 9106                       	dc.b	nE1, $06
00090B09 EC04                       	smpsPSGAlterVol     $04
00090B0B E701                       	dc.b	smpsNoAttack, $01
00090B0D EC07                       	smpsPSGAlterVol     $07
00090B0F 8003                       	dc.b	nRst, $03
00090B11 ECF5                       	smpsPSGAlterVol     $F5
00090B13 9106                       	dc.b	nE1, $06
00090B15 EC04                       	smpsPSGAlterVol     $04
00090B17 E701                       	dc.b	smpsNoAttack, $01
00090B19 EC07                       	smpsPSGAlterVol     $07
00090B1B 8006                       	dc.b	nRst, $06
00090B1D E100                       	smpsAlterNote       $00
00090B1F 01                         	dc.b	$01
00090B20 E104                       	smpsAlterNote       $04
00090B22 01                         	dc.b	$01
00090B23 E100                       	smpsAlterNote       $00
00090B25 01                         	dc.b	$01
00090B26 E1FA                       	smpsAlterNote       $FA
00090B28 01                         	dc.b	$01
00090B29 E1FD                       	smpsAlterNote       $FD
00090B2B ECF5                       	smpsPSGAlterVol     $F5
00090B2D 9206                       	dc.b	nF1, $06
00090B2F EC04                       	smpsPSGAlterVol     $04
00090B31 E701                       	dc.b	smpsNoAttack, $01
00090B33 EC07                       	smpsPSGAlterVol     $07
00090B35 8003                       	dc.b	nRst, $03
00090B37 ECF5                       	smpsPSGAlterVol     $F5
00090B39 9207                       	dc.b	nF1, $07
00090B3B EC0B                       	smpsPSGAlterVol     $0B
00090B3D 8006                       	dc.b	nRst, $06
00090B3F E100                       	smpsAlterNote       $00
00090B41 01                         	dc.b	$01
00090B42 E103                       	smpsAlterNote       $03
00090B44 0101                       	dc.b	$01, $01
00090B46 E1FD                       	smpsAlterNote       $FD
00090B48 01                         	dc.b	$01
00090B49 ECF5                       	smpsPSGAlterVol     $F5
00090B4B 9107                       	dc.b	nE1, $07
00090B4D EC0B                       	smpsPSGAlterVol     $0B
00090B4F 8004                       	dc.b	nRst, $04
00090B51 ECF5                       	smpsPSGAlterVol     $F5
00090B53 9106                       	dc.b	nE1, $06
00090B55 EC04                       	smpsPSGAlterVol     $04
00090B57 E701                       	dc.b	smpsNoAttack, $01
00090B59 EC07                       	smpsPSGAlterVol     $07
00090B5B 8006                       	dc.b	nRst, $06
00090B5D E103                       	smpsAlterNote       $03
00090B5F 01                         	dc.b	$01
00090B60 E104                       	smpsAlterNote       $04
00090B62 01                         	dc.b	$01
00090B63 E100                       	smpsAlterNote       $00
00090B65 01                         	dc.b	$01
00090B66 E1FA                       	smpsAlterNote       $FA
00090B68 01                         	dc.b	$01
00090B69 E1FD                       	smpsAlterNote       $FD
00090B6B ECF5                       	smpsPSGAlterVol     $F5
00090B6D 9106                       	dc.b	nE1, $06
00090B6F EC04                       	smpsPSGAlterVol     $04
00090B71 E701                       	dc.b	smpsNoAttack, $01
00090B73 EC07                       	smpsPSGAlterVol     $07
00090B75 8003                       	dc.b	nRst, $03
00090B77 ECF5                       	smpsPSGAlterVol     $F5
00090B79 9106                       	dc.b	nE1, $06
00090B7B EC04                       	smpsPSGAlterVol     $04
00090B7D E701                       	dc.b	smpsNoAttack, $01
00090B7F EC07                       	smpsPSGAlterVol     $07
00090B81 8003                       	dc.b	nRst, $03
00090B83 ECF5                       	smpsPSGAlterVol     $F5
00090B85 9207                       	dc.b	nF1, $07
00090B87 EC0B                       	smpsPSGAlterVol     $0B
00090B89 8006                       	dc.b	nRst, $06
00090B8B E100                       	smpsAlterNote       $00
00090B8D 01                         	dc.b	$01
00090B8E E103                       	smpsAlterNote       $03
00090B90 0101                       	dc.b	$01, $01
00090B92 E1FD                       	smpsAlterNote       $FD
00090B94 01                         	dc.b	$01
00090B95 E1F9                       	smpsAlterNote       $F9
00090B97 01                         	dc.b	$01
00090B98 E1FA                       	smpsAlterNote       $FA
00090B9A 01                         	dc.b	$01
00090B9B E100                       	smpsAlterNote       $00
00090B9D 01                         	dc.b	$01
00090B9E E104                       	smpsAlterNote       $04
00090BA0 01                         	dc.b	$01
00090BA1 E1FD                       	smpsAlterNote       $FD
00090BA3 ECF5                       	smpsPSGAlterVol     $F5
00090BA5 9203 9203                  	dc.b	nF1, $03, nF1, $03
00090BA9 EC04                       	smpsPSGAlterVol     $04
00090BAB E701                       	dc.b	smpsNoAttack, $01
00090BAD EC07                       	smpsPSGAlterVol     $07
00090BAF 8009                       	dc.b	nRst, $09
00090BB1 E100                       	smpsAlterNote       $00
00090BB3 01                         	dc.b	$01
00090BB4 E103                       	smpsAlterNote       $03
00090BB6 0101                       	dc.b	$01, $01
00090BB8 E1FD                       	smpsAlterNote       $FD
00090BBA 01                         	dc.b	$01
00090BBB E1F9                       	smpsAlterNote       $F9
00090BBD 01                         	dc.b	$01
00090BBE E1FA                       	smpsAlterNote       $FA
00090BC0 01                         	dc.b	$01
00090BC1 E100                       	smpsAlterNote       $00
00090BC3 01                         	dc.b	$01
00090BC4 E104                       	smpsAlterNote       $04
00090BC6 01                         	dc.b	$01
00090BC7 E100                       	smpsAlterNote       $00
00090BC9 01                         	dc.b	$01
00090BCA E1FD                       	smpsAlterNote       $FD
00090BCC 01                         	dc.b	$01
00090BCD E1F9                       	smpsAlterNote       $F9
00090BCF 01                         	dc.b	$01
00090BD0 E1FD                       	smpsAlterNote       $FD
00090BD2 01                         	dc.b	$01
00090BD3 E103                       	smpsAlterNote       $03
00090BD5 01                         	dc.b	$01
00090BD6 E104                       	smpsAlterNote       $04
00090BD8 01                         	dc.b	$01
00090BD9 E100                       	smpsAlterNote       $00
00090BDB 01                         	dc.b	$01
00090BDC E1FD                       	smpsAlterNote       $FD
00090BDE ECF5                       	smpsPSGAlterVol     $F5
00090BE0 9203 9106                  	dc.b	nF1, $03, nE1, $06
00090BE4 EC04                       	smpsPSGAlterVol     $04
00090BE6 E701                       	dc.b	smpsNoAttack, $01
00090BE8 EC07                       	smpsPSGAlterVol     $07
00090BEA 8006                       	dc.b	nRst, $06
00090BEC E100                       	smpsAlterNote       $00
00090BEE 01                         	dc.b	$01
00090BEF E104                       	smpsAlterNote       $04
00090BF1 01                         	dc.b	$01
00090BF2 E103                       	smpsAlterNote       $03
00090BF4 01                         	dc.b	$01
00090BF5 E1FD                       	smpsAlterNote       $FD
00090BF7 01                         	dc.b	$01
00090BF8 E1F9                       	smpsAlterNote       $F9
00090BFA 01                         	dc.b	$01
00090BFB E1FD                       	smpsAlterNote       $FD
00090BFD 01                         	dc.b	$01
00090BFE E100                       	smpsAlterNote       $00
00090C00 01                         	dc.b	$01
00090C01 E104                       	smpsAlterNote       $04
00090C03 01                         	dc.b	$01
00090C04 E1FD                       	smpsAlterNote       $FD
00090C06 ECF5                       	smpsPSGAlterVol     $F5
00090C08 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00090C0C E100                       	smpsAlterNote       $00
00090C0E E701                       	dc.b	smpsNoAttack, $01
00090C10 E104                       	smpsAlterNote       $04
00090C12 E701                       	dc.b	smpsNoAttack, $01
00090C14 E100                       	smpsAlterNote       $00
00090C16 E701                       	dc.b	smpsNoAttack, $01
00090C18 E1FD                       	smpsAlterNote       $FD
00090C1A E701                       	dc.b	smpsNoAttack, $01
00090C1C E1F9                       	smpsAlterNote       $F9
00090C1E E701                       	dc.b	smpsNoAttack, $01
00090C20 E1FD                       	smpsAlterNote       $FD
00090C22 E701                       	dc.b	smpsNoAttack, $01
00090C24 E103                       	smpsAlterNote       $03
00090C26 E701                       	dc.b	smpsNoAttack, $01
00090C28 E104                       	smpsAlterNote       $04
00090C2A E701                       	dc.b	smpsNoAttack, $01
00090C2C E100                       	smpsAlterNote       $00
00090C2E E701                       	dc.b	smpsNoAttack, $01
00090C30 E1FA                       	smpsAlterNote       $FA
00090C32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090C36 E1FD                       	smpsAlterNote       $FD
00090C38 E701                       	dc.b	smpsNoAttack, $01
00090C3A E103                       	smpsAlterNote       $03
00090C3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090C40 E100                       	smpsAlterNote       $00
00090C42 E701                       	dc.b	smpsNoAttack, $01
00090C44 E1FA                       	smpsAlterNote       $FA
00090C46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090C4A E100                       	smpsAlterNote       $00
00090C4C EC04                       	smpsPSGAlterVol     $04
00090C4E E701                       	dc.b	smpsNoAttack, $01
00090C50 EC07                       	smpsPSGAlterVol     $07
00090C52 E104                       	smpsAlterNote       $04
00090C54 8001                       	dc.b	nRst, $01
00090C56 E103                       	smpsAlterNote       $03
00090C58 01                         	dc.b	$01
00090C59 E1FD                       	smpsAlterNote       $FD
00090C5B 01                         	dc.b	$01
00090C5C E1F9                       	smpsAlterNote       $F9
00090C5E 01                         	dc.b	$01
00090C5F E1FD                       	smpsAlterNote       $FD
00090C61 01                         	dc.b	$01
00090C62 E100                       	smpsAlterNote       $00
00090C64 01                         	dc.b	$01
00090C65 E104                       	smpsAlterNote       $04
00090C67 01                         	dc.b	$01
00090C68 E1FD                       	smpsAlterNote       $FD
00090C6A ECF5                       	smpsPSGAlterVol     $F5
00090C6C 9106                       	dc.b	nE1, $06
00090C6E EC04                       	smpsPSGAlterVol     $04
00090C70 E701                       	dc.b	smpsNoAttack, $01
00090C72 EC07                       	smpsPSGAlterVol     $07
00090C74 8003                       	dc.b	nRst, $03
00090C76 ECF5                       	smpsPSGAlterVol     $F5
00090C78 9106                       	dc.b	nE1, $06
00090C7A EC04                       	smpsPSGAlterVol     $04
00090C7C E701                       	dc.b	smpsNoAttack, $01
00090C7E EC07                       	smpsPSGAlterVol     $07
00090C80 8006                       	dc.b	nRst, $06
00090C82 E100                       	smpsAlterNote       $00
00090C84 01                         	dc.b	$01
00090C85 E104                       	smpsAlterNote       $04
00090C87 01                         	dc.b	$01
00090C88 E100                       	smpsAlterNote       $00
00090C8A 01                         	dc.b	$01
00090C8B E1FD                       	smpsAlterNote       $FD
00090C8D 01                         	dc.b	$01
00090C8E ECF5                       	smpsPSGAlterVol     $F5
00090C90 9206                       	dc.b	nF1, $06
00090C92 EC04                       	smpsPSGAlterVol     $04
00090C94 E701                       	dc.b	smpsNoAttack, $01
00090C96 EC07                       	smpsPSGAlterVol     $07
00090C98 8003                       	dc.b	nRst, $03
00090C9A ECF5                       	smpsPSGAlterVol     $F5
00090C9C 9207                       	dc.b	nF1, $07
00090C9E EC0B                       	smpsPSGAlterVol     $0B
00090CA0 8007                       	dc.b	nRst, $07
00090CA2 E103                       	smpsAlterNote       $03
00090CA4 0101                       	dc.b	$01, $01
00090CA6 E1FD                       	smpsAlterNote       $FD
00090CA8 01                         	dc.b	$01
00090CA9 E1FA                       	smpsAlterNote       $FA
00090CAB 01                         	dc.b	$01
00090CAC E1FD                       	smpsAlterNote       $FD
00090CAE ECF5                       	smpsPSGAlterVol     $F5
00090CB0 9106                       	dc.b	nE1, $06
00090CB2 EC0B                       	smpsPSGAlterVol     $0B
00090CB4 8004                       	dc.b	nRst, $04
00090CB6 ECF5                       	smpsPSGAlterVol     $F5
00090CB8 9106                       	dc.b	nE1, $06
00090CBA EC04                       	smpsPSGAlterVol     $04
00090CBC E701                       	dc.b	smpsNoAttack, $01
00090CBE EC07                       	smpsPSGAlterVol     $07
00090CC0 8006                       	dc.b	nRst, $06
00090CC2 E100                       	smpsAlterNote       $00
00090CC4 01                         	dc.b	$01
00090CC5 E104                       	smpsAlterNote       $04
00090CC7 01                         	dc.b	$01
00090CC8 E100                       	smpsAlterNote       $00
00090CCA 01                         	dc.b	$01
00090CCB E1FA                       	smpsAlterNote       $FA
00090CCD 01                         	dc.b	$01
00090CCE E1FD                       	smpsAlterNote       $FD
00090CD0 ECF5                       	smpsPSGAlterVol     $F5
00090CD2 9206                       	dc.b	nF1, $06
00090CD4 EC04                       	smpsPSGAlterVol     $04
00090CD6 E701                       	dc.b	smpsNoAttack, $01
00090CD8 EC07                       	smpsPSGAlterVol     $07
00090CDA 8003                       	dc.b	nRst, $03
00090CDC ECF5                       	smpsPSGAlterVol     $F5
00090CDE 9206                       	dc.b	nF1, $06
00090CE0 EC04                       	smpsPSGAlterVol     $04
00090CE2 E701                       	dc.b	smpsNoAttack, $01
00090CE4 EC07                       	smpsPSGAlterVol     $07
00090CE6 8006                       	dc.b	nRst, $06
00090CE8 E100                       	smpsAlterNote       $00
00090CEA 01                         	dc.b	$01
00090CEB E104                       	smpsAlterNote       $04
00090CED 01                         	dc.b	$01
00090CEE E103                       	smpsAlterNote       $03
00090CF0 01                         	dc.b	$01
00090CF1 E1FD                       	smpsAlterNote       $FD
00090CF3 01                         	dc.b	$01
00090CF4 ECF5                       	smpsPSGAlterVol     $F5
00090CF6 9107                       	dc.b	nE1, $07
00090CF8 EC0B                       	smpsPSGAlterVol     $0B
00090CFA 8004                       	dc.b	nRst, $04
00090CFC ECF5                       	smpsPSGAlterVol     $F5
00090CFE 9106                       	dc.b	nE1, $06
00090D00 EC0B                       	smpsPSGAlterVol     $0B
00090D02 8007                       	dc.b	nRst, $07
00090D04 E103                       	smpsAlterNote       $03
00090D06 0101                       	dc.b	$01, $01
00090D08 E100                       	smpsAlterNote       $00
00090D0A 01                         	dc.b	$01
00090D0B E1FA                       	smpsAlterNote       $FA
00090D0D 01                         	dc.b	$01
00090D0E E1FD                       	smpsAlterNote       $FD
00090D10 ECF5                       	smpsPSGAlterVol     $F5
00090D12 9206                       	dc.b	nF1, $06
00090D14 EC04                       	smpsPSGAlterVol     $04
00090D16 E701                       	dc.b	smpsNoAttack, $01
00090D18 EC07                       	smpsPSGAlterVol     $07
00090D1A 8003                       	dc.b	nRst, $03
00090D1C ECF5                       	smpsPSGAlterVol     $F5
00090D1E 9206                       	dc.b	nF1, $06
00090D20 EC04                       	smpsPSGAlterVol     $04
00090D22 E701                       	dc.b	smpsNoAttack, $01
00090D24 EC07                       	smpsPSGAlterVol     $07
00090D26 8006                       	dc.b	nRst, $06
00090D28 E100                       	smpsAlterNote       $00
00090D2A 01                         	dc.b	$01
00090D2B E104                       	smpsAlterNote       $04
00090D2D 01                         	dc.b	$01
00090D2E E100                       	smpsAlterNote       $00
00090D30 01                         	dc.b	$01
00090D31 E1FD                       	smpsAlterNote       $FD
00090D33 01                         	dc.b	$01
00090D34 ECF5                       	smpsPSGAlterVol     $F5
00090D36 9106                       	dc.b	nE1, $06
00090D38 EC04                       	smpsPSGAlterVol     $04
00090D3A E701                       	dc.b	smpsNoAttack, $01
00090D3C EC07                       	smpsPSGAlterVol     $07
00090D3E 8003                       	dc.b	nRst, $03
00090D40 ECF5                       	smpsPSGAlterVol     $F5
00090D42 9107 9106                  	dc.b	nE1, $07, nE1, $06
00090D46 EC04                       	smpsPSGAlterVol     $04
00090D48 E701                       	dc.b	smpsNoAttack, $01
00090D4A ECFC                       	smpsPSGAlterVol     $FC
00090D4C 9103                       	dc.b	nE1, $03
00090D4E EC04                       	smpsPSGAlterVol     $04
00090D50 E701                       	dc.b	smpsNoAttack, $01
00090D52 ECFC                       	smpsPSGAlterVol     $FC
00090D54 9102                       	dc.b	nE1, $02
00090D56 EC04                       	smpsPSGAlterVol     $04
00090D58 E701                       	dc.b	smpsNoAttack, $01
00090D5A ECFC                       	smpsPSGAlterVol     $FC
00090D5C 9103                       	dc.b	nE1, $03
00090D5E EC0B                       	smpsPSGAlterVol     $0B
00090D60 800A                       	dc.b	nRst, $0A
00090D62 E100                       	smpsAlterNote       $00
00090D64 01                         	dc.b	$01
00090D65 E104                       	smpsAlterNote       $04
00090D67 01                         	dc.b	$01
00090D68 E100                       	smpsAlterNote       $00
00090D6A 01                         	dc.b	$01
00090D6B E1FA                       	smpsAlterNote       $FA
00090D6D 01                         	dc.b	$01
00090D6E E1F9                       	smpsAlterNote       $F9
00090D70 01                         	dc.b	$01
00090D71 E1FD                       	smpsAlterNote       $FD
00090D73 01                         	dc.b	$01
00090D74 E103                       	smpsAlterNote       $03
00090D76 0101                       	dc.b	$01, $01
00090D78 E100                       	smpsAlterNote       $00
00090D7A 01                         	dc.b	$01
00090D7B E1FA                       	smpsAlterNote       $FA
00090D7D 0101                       	dc.b	$01, $01
00090D7F E1FD                       	smpsAlterNote       $FD
00090D81 ECF5                       	smpsPSGAlterVol     $F5
00090D83 9206                       	dc.b	nF1, $06
00090D85 EC04                       	smpsPSGAlterVol     $04
00090D87 E704                       	dc.b	smpsNoAttack, $04
00090D89 ECFC                       	smpsPSGAlterVol     $FC
00090D8B 9206                       	dc.b	nF1, $06
00090D8D EC04                       	smpsPSGAlterVol     $04
00090D8F E701                       	dc.b	smpsNoAttack, $01
00090D91 EC07                       	smpsPSGAlterVol     $07
00090D93 8006                       	dc.b	nRst, $06
00090D95 E100                       	smpsAlterNote       $00
00090D97 01                         	dc.b	$01
00090D98 E104                       	smpsAlterNote       $04
00090D9A 01                         	dc.b	$01
00090D9B E103                       	smpsAlterNote       $03
00090D9D 01                         	dc.b	$01
00090D9E E1FD                       	smpsAlterNote       $FD
00090DA0 01                         	dc.b	$01
00090DA1 ECF5                       	smpsPSGAlterVol     $F5
00090DA3 9407                       	dc.b	nG1, $07
00090DA5 EC0B                       	smpsPSGAlterVol     $0B
00090DA7 8004                       	dc.b	nRst, $04
00090DA9 ECF5                       	smpsPSGAlterVol     $F5
00090DAB 9406                       	dc.b	nG1, $06
00090DAD EC0B                       	smpsPSGAlterVol     $0B
00090DAF 8007                       	dc.b	nRst, $07
00090DB1 E103                       	smpsAlterNote       $03
00090DB3 0101                       	dc.b	$01, $01
00090DB5 E1FD                       	smpsAlterNote       $FD
00090DB7 01                         	dc.b	$01
00090DB8 E1F9                       	smpsAlterNote       $F9
00090DBA 01                         	dc.b	$01
00090DBB E1FD                       	smpsAlterNote       $FD
00090DBD ECF5                       	smpsPSGAlterVol     $F5
00090DBF 9206                       	dc.b	nF1, $06
00090DC1 EC04                       	smpsPSGAlterVol     $04
00090DC3 E701                       	dc.b	smpsNoAttack, $01
00090DC5 EC07                       	smpsPSGAlterVol     $07
00090DC7 8003                       	dc.b	nRst, $03
00090DC9 ECF5                       	smpsPSGAlterVol     $F5
00090DCB 9206                       	dc.b	nF1, $06
00090DCD EC04                       	smpsPSGAlterVol     $04
00090DCF E701                       	dc.b	smpsNoAttack, $01
00090DD1 EC07                       	smpsPSGAlterVol     $07
00090DD3 8006                       	dc.b	nRst, $06
00090DD5 E100                       	smpsAlterNote       $00
00090DD7 01                         	dc.b	$01
00090DD8 E104                       	smpsAlterNote       $04
00090DDA 01                         	dc.b	$01
00090DDB E100                       	smpsAlterNote       $00
00090DDD 01                         	dc.b	$01
00090DDE E1FA                       	smpsAlterNote       $FA
00090DE0 01                         	dc.b	$01
00090DE1 E1FD                       	smpsAlterNote       $FD
00090DE3 ECF5                       	smpsPSGAlterVol     $F5
00090DE5 9206                       	dc.b	nF1, $06
00090DE7 EC04                       	smpsPSGAlterVol     $04
00090DE9 E701                       	dc.b	smpsNoAttack, $01
00090DEB EC07                       	smpsPSGAlterVol     $07
00090DED 8003                       	dc.b	nRst, $03
00090DEF ECF5                       	smpsPSGAlterVol     $F5
00090DF1 9107                       	dc.b	nE1, $07
00090DF3 EC0B                       	smpsPSGAlterVol     $0B
00090DF5 8006                       	dc.b	nRst, $06
00090DF7 E100                       	smpsAlterNote       $00
00090DF9 01                         	dc.b	$01
00090DFA E103                       	smpsAlterNote       $03
00090DFC 0101                       	dc.b	$01, $01
00090DFE E1FD                       	smpsAlterNote       $FD
00090E00 01                         	dc.b	$01
00090E01 ECF5                       	smpsPSGAlterVol     $F5
00090E03 9207                       	dc.b	nF1, $07
00090E05 EC0B                       	smpsPSGAlterVol     $0B
00090E07 8004                       	dc.b	nRst, $04
00090E09 ECF5                       	smpsPSGAlterVol     $F5
00090E0B 9206                       	dc.b	nF1, $06
00090E0D EC04                       	smpsPSGAlterVol     $04
00090E0F E701                       	dc.b	smpsNoAttack, $01
00090E11 EC07                       	smpsPSGAlterVol     $07
00090E13 8006                       	dc.b	nRst, $06
00090E15 E103                       	smpsAlterNote       $03
00090E17 01                         	dc.b	$01
00090E18 E104                       	smpsAlterNote       $04
00090E1A 01                         	dc.b	$01
00090E1B E100                       	smpsAlterNote       $00
00090E1D 01                         	dc.b	$01
00090E1E E1FB                       	smpsAlterNote       $FB
00090E20 01                         	dc.b	$01
00090E21 E1FD                       	smpsAlterNote       $FD
00090E23 ECF5                       	smpsPSGAlterVol     $F5
00090E25 9406                       	dc.b	nG1, $06
00090E27 EC04                       	smpsPSGAlterVol     $04
00090E29 E701                       	dc.b	smpsNoAttack, $01
00090E2B EC07                       	smpsPSGAlterVol     $07
00090E2D 8003                       	dc.b	nRst, $03
00090E2F ECF5                       	smpsPSGAlterVol     $F5
00090E31 9406                       	dc.b	nG1, $06
00090E33 EC04                       	smpsPSGAlterVol     $04
00090E35 E701                       	dc.b	smpsNoAttack, $01
00090E37 EC07                       	smpsPSGAlterVol     $07
00090E39 8006                       	dc.b	nRst, $06
00090E3B E100                       	smpsAlterNote       $00
00090E3D 01                         	dc.b	$01
00090E3E E104                       	smpsAlterNote       $04
00090E40 01                         	dc.b	$01
00090E41 E100                       	smpsAlterNote       $00
00090E43 01                         	dc.b	$01
00090E44 E1FD                       	smpsAlterNote       $FD
00090E46 01                         	dc.b	$01
00090E47 ECF5                       	smpsPSGAlterVol     $F5
00090E49 9206                       	dc.b	nF1, $06
00090E4B EC04                       	smpsPSGAlterVol     $04
00090E4D E701                       	dc.b	smpsNoAttack, $01
00090E4F EC07                       	smpsPSGAlterVol     $07
00090E51 8003                       	dc.b	nRst, $03
00090E53 ECF5                       	smpsPSGAlterVol     $F5
00090E55 9207                       	dc.b	nF1, $07
00090E57 EC0B                       	smpsPSGAlterVol     $0B
00090E59 8007                       	dc.b	nRst, $07
00090E5B E103                       	smpsAlterNote       $03
00090E5D 0101                       	dc.b	$01, $01
00090E5F E1FD                       	smpsAlterNote       $FD
00090E61 01                         	dc.b	$01
00090E62 E1FA                       	smpsAlterNote       $FA
00090E64 01                         	dc.b	$01
00090E65 E1FD                       	smpsAlterNote       $FD
00090E67 ECF5                       	smpsPSGAlterVol     $F5
00090E69 9206                       	dc.b	nF1, $06
00090E6B EC0B                       	smpsPSGAlterVol     $0B
00090E6D 8004                       	dc.b	nRst, $04
00090E6F ECF5                       	smpsPSGAlterVol     $F5
00090E71 9206                       	dc.b	nF1, $06
00090E73 EC04                       	smpsPSGAlterVol     $04
00090E75 E701                       	dc.b	smpsNoAttack, $01
00090E77 EC07                       	smpsPSGAlterVol     $07
00090E79 8006                       	dc.b	nRst, $06
00090E7B E100                       	smpsAlterNote       $00
00090E7D 01                         	dc.b	$01
00090E7E E104                       	smpsAlterNote       $04
00090E80 01                         	dc.b	$01
00090E81 E100                       	smpsAlterNote       $00
00090E83 01                         	dc.b	$01
00090E84 E1FA                       	smpsAlterNote       $FA
00090E86 01                         	dc.b	$01
00090E87 E1FD                       	smpsAlterNote       $FD
00090E89 ECF5                       	smpsPSGAlterVol     $F5
00090E8B 9206                       	dc.b	nF1, $06
00090E8D EC04                       	smpsPSGAlterVol     $04
00090E8F E701                       	dc.b	smpsNoAttack, $01
00090E91 EC07                       	smpsPSGAlterVol     $07
00090E93 8003                       	dc.b	nRst, $03
00090E95 ECF5                       	smpsPSGAlterVol     $F5
00090E97 9207                       	dc.b	nF1, $07
00090E99 EC0B                       	smpsPSGAlterVol     $0B
00090E9B 8006                       	dc.b	nRst, $06
00090E9D E100                       	smpsAlterNote       $00
00090E9F 01                         	dc.b	$01
00090EA0 E103                       	smpsAlterNote       $03
00090EA2 0101                       	dc.b	$01, $01
00090EA4 E1FD                       	smpsAlterNote       $FD
00090EA6 01                         	dc.b	$01
00090EA7 ECF5                       	smpsPSGAlterVol     $F5
00090EA9 9207                       	dc.b	nF1, $07
00090EAB EC0B                       	smpsPSGAlterVol     $0B
00090EAD 8004                       	dc.b	nRst, $04
00090EAF ECF5                       	smpsPSGAlterVol     $F5
00090EB1 9206                       	dc.b	nF1, $06
00090EB3 EC0B                       	smpsPSGAlterVol     $0B
00090EB5 8007                       	dc.b	nRst, $07
00090EB7 E103                       	smpsAlterNote       $03
00090EB9 0101                       	dc.b	$01, $01
00090EBB E100                       	smpsAlterNote       $00
00090EBD 01                         	dc.b	$01
00090EBE E1FA                       	smpsAlterNote       $FA
00090EC0 01                         	dc.b	$01
00090EC1 E1FD                       	smpsAlterNote       $FD
00090EC3 ECF5                       	smpsPSGAlterVol     $F5
00090EC5 9206                       	dc.b	nF1, $06
00090EC7 EC04                       	smpsPSGAlterVol     $04
00090EC9 E701                       	dc.b	smpsNoAttack, $01
00090ECB EC07                       	smpsPSGAlterVol     $07
00090ECD 8003                       	dc.b	nRst, $03
00090ECF ECF5                       	smpsPSGAlterVol     $F5
00090ED1 9206                       	dc.b	nF1, $06
00090ED3 EC04                       	smpsPSGAlterVol     $04
00090ED5 E701                       	dc.b	smpsNoAttack, $01
00090ED7 EC07                       	smpsPSGAlterVol     $07
00090ED9 8006                       	dc.b	nRst, $06
00090EDB E100                       	smpsAlterNote       $00
00090EDD 01                         	dc.b	$01
00090EDE E104                       	smpsAlterNote       $04
00090EE0 01                         	dc.b	$01
00090EE1 E100                       	smpsAlterNote       $00
00090EE3 01                         	dc.b	$01
00090EE4 E1FD                       	smpsAlterNote       $FD
00090EE6 01                         	dc.b	$01
00090EE7 ECF5                       	smpsPSGAlterVol     $F5
00090EE9 9206                       	dc.b	nF1, $06
00090EEB EC04                       	smpsPSGAlterVol     $04
00090EED E701                       	dc.b	smpsNoAttack, $01
00090EEF EC07                       	smpsPSGAlterVol     $07
00090EF1 8003                       	dc.b	nRst, $03
00090EF3 ECF5                       	smpsPSGAlterVol     $F5
00090EF5 9207                       	dc.b	nF1, $07
00090EF7 EC0B                       	smpsPSGAlterVol     $0B
00090EF9 8007                       	dc.b	nRst, $07
00090EFB E104                       	smpsAlterNote       $04
00090EFD 0101                       	dc.b	$01, $01
00090EFF E1FB                       	smpsAlterNote       $FB
00090F01 01                         	dc.b	$01
00090F02 E1F6                       	smpsAlterNote       $F6
00090F04 0101                       	dc.b	$01, $01
00090F06 E1FF                       	smpsAlterNote       $FF
00090F08 01                         	dc.b	$01
00090F09 E105                       	smpsAlterNote       $05
00090F0B 01                         	dc.b	$01
00090F0C E104                       	smpsAlterNote       $04
00090F0E 01                         	dc.b	$01
00090F0F E1FB                       	smpsAlterNote       $FB
00090F11 01                         	dc.b	$01
00090F12 E1F5                       	smpsAlterNote       $F5
00090F14 01                         	dc.b	$01
00090F15 E1FC                       	smpsAlterNote       $FC
00090F17 ECF5                       	smpsPSGAlterVol     $F5
00090F19 8B0E                       	dc.b	nBb0, $0E
00090F1B E102                       	smpsAlterNote       $02
00090F1D EC0B                       	smpsPSGAlterVol     $0B
00090F1F 8001                       	dc.b	nRst, $01
00090F21 E101                       	smpsAlterNote       $01
00090F23 01                         	dc.b	$01
00090F24 E1FC                       	smpsAlterNote       $FC
00090F26 01                         	dc.b	$01
00090F27 E1F9                       	smpsAlterNote       $F9
00090F29 0101                       	dc.b	$01, $01
00090F2B E1FF                       	smpsAlterNote       $FF
00090F2D 01                         	dc.b	$01
00090F2E E102                       	smpsAlterNote       $02
00090F30 01                         	dc.b	$01
00090F31 E1FF                       	smpsAlterNote       $FF
00090F33 01                         	dc.b	$01
00090F34 E1FC                       	smpsAlterNote       $FC
00090F36 01                         	dc.b	$01
00090F37 E1F8                       	smpsAlterNote       $F8
00090F39 01                         	dc.b	$01
00090F3A E1FC                       	smpsAlterNote       $FC
00090F3C 01                         	dc.b	$01
00090F3D E101                       	smpsAlterNote       $01
00090F3F 01                         	dc.b	$01
00090F40 E102                       	smpsAlterNote       $02
00090F42 01                         	dc.b	$01
00090F43 E1FF                       	smpsAlterNote       $FF
00090F45 01                         	dc.b	$01
00090F46 E1FB                       	smpsAlterNote       $FB
00090F48 ECF5                       	smpsPSGAlterVol     $F5
00090F4A 8D0D                       	dc.b	nC1, $0D
00090F4C E101                       	smpsAlterNote       $01
00090F4E EC0B                       	smpsPSGAlterVol     $0B
00090F50 8001                       	dc.b	nRst, $01
00090F52 E102                       	smpsAlterNote       $02
00090F54 01                         	dc.b	$01
00090F55 E1FF                       	smpsAlterNote       $FF
00090F57 01                         	dc.b	$01
00090F58 E1F9                       	smpsAlterNote       $F9
00090F5A 0101                       	dc.b	$01, $01
00090F5C E1FC                       	smpsAlterNote       $FC
00090F5E 01                         	dc.b	$01
00090F5F E101                       	smpsAlterNote       $01
00090F61 0101                       	dc.b	$01, $01
00090F63 E1FC                       	smpsAlterNote       $FC
00090F65 01                         	dc.b	$01
00090F66 E1F9                       	smpsAlterNote       $F9
00090F68 0101                       	dc.b	$01, $01
00090F6A E1FF                       	smpsAlterNote       $FF
00090F6C 01                         	dc.b	$01
00090F6D E102                       	smpsAlterNote       $02
00090F6F 01                         	dc.b	$01
00090F70 E101                       	smpsAlterNote       $01
00090F72 01                         	dc.b	$01
00090F73 E1FC                       	smpsAlterNote       $FC
00090F75 ECF5                       	smpsPSGAlterVol     $F5
00090F77 8F0D                       	dc.b	nD1, $0D
00090F79 E1FF                       	smpsAlterNote       $FF
00090F7B EC04                       	smpsPSGAlterVol     $04
00090F7D E701                       	dc.b	smpsNoAttack, $01
00090F7F EC07                       	smpsPSGAlterVol     $07
00090F81 E103                       	smpsAlterNote       $03
00090F83 8001                       	dc.b	nRst, $01
00090F85 E102                       	smpsAlterNote       $02
00090F87 01                         	dc.b	$01
00090F88 E1FD                       	smpsAlterNote       $FD
00090F8A 01                         	dc.b	$01
00090F8B E1F9                       	smpsAlterNote       $F9
00090F8D 01                         	dc.b	$01
00090F8E E1FD                       	smpsAlterNote       $FD
00090F90 01                         	dc.b	$01
00090F91 E100                       	smpsAlterNote       $00
00090F93 01                         	dc.b	$01
00090F94 E103                       	smpsAlterNote       $03
00090F96 01                         	dc.b	$01
00090F97 E100                       	smpsAlterNote       $00
00090F99 01                         	dc.b	$01
00090F9A E1FA                       	smpsAlterNote       $FA
00090F9C 01                         	dc.b	$01
00090F9D E1F9                       	smpsAlterNote       $F9
00090F9F 01                         	dc.b	$01
00090FA0 E1FD                       	smpsAlterNote       $FD
00090FA2 01                         	dc.b	$01
00090FA3 E102                       	smpsAlterNote       $02
00090FA5 0101                       	dc.b	$01, $01
00090FA7 E100                       	smpsAlterNote       $00
00090FA9 01                         	dc.b	$01
00090FAA E1FD                       	smpsAlterNote       $FD
00090FAC ECF5                       	smpsPSGAlterVol     $F5
00090FAE 910D                       	dc.b	nE1, $0D
00090FB0 E103                       	smpsAlterNote       $03
00090FB2 EC0B                       	smpsPSGAlterVol     $0B
00090FB4 8001 01                    	dc.b	nRst, $01, $01
00090FB7 E100                       	smpsAlterNote       $00
00090FB9 01                         	dc.b	$01
00090FBA E1FA                       	smpsAlterNote       $FA
00090FBC 0101                       	dc.b	$01, $01
00090FBE E100                       	smpsAlterNote       $00
00090FC0 01                         	dc.b	$01
00090FC1 E103                       	smpsAlterNote       $03
00090FC3 01                         	dc.b	$01
00090FC4 E1FD                       	smpsAlterNote       $FD
00090FC6 ECF5                       	smpsPSGAlterVol     $F5
00090FC8 9206                       	dc.b	nF1, $06
00090FCA EC04                       	smpsPSGAlterVol     $04
00090FCC E701                       	dc.b	smpsNoAttack, $01
00090FCE EC07                       	smpsPSGAlterVol     $07
00090FD0 8003                       	dc.b	nRst, $03
00090FD2 ECF5                       	smpsPSGAlterVol     $F5
00090FD4 9207                       	dc.b	nF1, $07
00090FD6 EC0B                       	smpsPSGAlterVol     $0B
00090FD8 8006                       	dc.b	nRst, $06
00090FDA E100                       	smpsAlterNote       $00
00090FDC 01                         	dc.b	$01
00090FDD E103                       	smpsAlterNote       $03
00090FDF 0101                       	dc.b	$01, $01
00090FE1 E1FD                       	smpsAlterNote       $FD
00090FE3 01                         	dc.b	$01
00090FE4 ECF5                       	smpsPSGAlterVol     $F5
00090FE6 9407                       	dc.b	nG1, $07
00090FE8 EC0B                       	smpsPSGAlterVol     $0B
00090FEA 8004                       	dc.b	nRst, $04
00090FEC ECF5                       	smpsPSGAlterVol     $F5
00090FEE 9406                       	dc.b	nG1, $06
00090FF0 EC04                       	smpsPSGAlterVol     $04
00090FF2 E701                       	dc.b	smpsNoAttack, $01
00090FF4 EC07                       	smpsPSGAlterVol     $07
00090FF6 8006                       	dc.b	nRst, $06
00090FF8 E103                       	smpsAlterNote       $03
00090FFA 01                         	dc.b	$01
00090FFB E104                       	smpsAlterNote       $04
00090FFD 01                         	dc.b	$01
00090FFE E100                       	smpsAlterNote       $00
00091000 01                         	dc.b	$01
00091001 E1F9                       	smpsAlterNote       $F9
00091003 01                         	dc.b	$01
00091004 E1FD                       	smpsAlterNote       $FD
00091006 ECF5                       	smpsPSGAlterVol     $F5
00091008 9206                       	dc.b	nF1, $06
0009100A EC04                       	smpsPSGAlterVol     $04
0009100C E701                       	dc.b	smpsNoAttack, $01
0009100E EC07                       	smpsPSGAlterVol     $07
00091010 8003                       	dc.b	nRst, $03
00091012 ECF5                       	smpsPSGAlterVol     $F5
00091014 9206                       	dc.b	nF1, $06
00091016 EC04                       	smpsPSGAlterVol     $04
00091018 E701                       	dc.b	smpsNoAttack, $01
0009101A EC07                       	smpsPSGAlterVol     $07
0009101C 8006                       	dc.b	nRst, $06
0009101E E100                       	smpsAlterNote       $00
00091020 01                         	dc.b	$01
00091021 E104                       	smpsAlterNote       $04
00091023 01                         	dc.b	$01
00091024 E103                       	smpsAlterNote       $03
00091026 01                         	dc.b	$01
00091027 E1FD                       	smpsAlterNote       $FD
00091029 01                         	dc.b	$01
0009102A ECF5                       	smpsPSGAlterVol     $F5
0009102C 9407                       	dc.b	nG1, $07
0009102E EC0B                       	smpsPSGAlterVol     $0B
00091030 8004                       	dc.b	nRst, $04
00091032 ECF5                       	smpsPSGAlterVol     $F5
00091034 9406                       	dc.b	nG1, $06
00091036 EC0B                       	smpsPSGAlterVol     $0B
00091038 8007                       	dc.b	nRst, $07
0009103A E103                       	smpsAlterNote       $03
0009103C 0101                       	dc.b	$01, $01
0009103E E100                       	smpsAlterNote       $00
00091040 01                         	dc.b	$01
00091041 E1F9                       	smpsAlterNote       $F9
00091043 01                         	dc.b	$01
00091044 E1FD                       	smpsAlterNote       $FD
00091046 ECF5                       	smpsPSGAlterVol     $F5
00091048 9206                       	dc.b	nF1, $06
0009104A EC04                       	smpsPSGAlterVol     $04
0009104C E701                       	dc.b	smpsNoAttack, $01
0009104E EC07                       	smpsPSGAlterVol     $07
00091050 8003                       	dc.b	nRst, $03
00091052 ECF5                       	smpsPSGAlterVol     $F5
00091054 9206                       	dc.b	nF1, $06
00091056 EC04                       	smpsPSGAlterVol     $04
00091058 E701                       	dc.b	smpsNoAttack, $01
0009105A EC07                       	smpsPSGAlterVol     $07
0009105C 8006                       	dc.b	nRst, $06
0009105E E100                       	smpsAlterNote       $00
00091060 01                         	dc.b	$01
00091061 E104                       	smpsAlterNote       $04
00091063 01                         	dc.b	$01
00091064 E100                       	smpsAlterNote       $00
00091066 01                         	dc.b	$01
00091067 E1FB                       	smpsAlterNote       $FB
00091069 01                         	dc.b	$01
0009106A E1FD                       	smpsAlterNote       $FD
0009106C ECF5                       	smpsPSGAlterVol     $F5
0009106E 9406                       	dc.b	nG1, $06
00091070 EC04                       	smpsPSGAlterVol     $04
00091072 E701                       	dc.b	smpsNoAttack, $01
00091074 EC07                       	smpsPSGAlterVol     $07
00091076 8003                       	dc.b	nRst, $03
00091078 ECF5                       	smpsPSGAlterVol     $F5
0009107A 9407                       	dc.b	nG1, $07
0009107C EC0B                       	smpsPSGAlterVol     $0B
0009107E 8006                       	dc.b	nRst, $06
00091080 E100                       	smpsAlterNote       $00
00091082 01                         	dc.b	$01
00091083 E103                       	smpsAlterNote       $03
00091085 0101                       	dc.b	$01, $01
00091087 E1FD                       	smpsAlterNote       $FD
00091089 01                         	dc.b	$01
0009108A ECF5                       	smpsPSGAlterVol     $F5
0009108C 9207                       	dc.b	nF1, $07
0009108E EC0B                       	smpsPSGAlterVol     $0B
00091090 8004                       	dc.b	nRst, $04
00091092 ECF5                       	smpsPSGAlterVol     $F5
00091094 9206                       	dc.b	nF1, $06
00091096 EC04                       	smpsPSGAlterVol     $04
00091098 E701                       	dc.b	smpsNoAttack, $01
0009109A ECFC                       	smpsPSGAlterVol     $FC
0009109C E1FC                       	smpsAlterNote       $FC
0009109E 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
000910A2 EC04                       	smpsPSGAlterVol     $04
000910A4 E701                       	dc.b	smpsNoAttack, $01
000910A6 ECFC                       	smpsPSGAlterVol     $FC
000910A8 9003                       	dc.b	nEb1, $03
000910AA E1FD                       	smpsAlterNote       $FD
000910AC 9403                       	dc.b	nG1, $03
000910AE EC04                       	smpsPSGAlterVol     $04
000910B0 E701                       	dc.b	smpsNoAttack, $01
000910B2 E1FE                       	smpsAlterNote       $FE
000910B4 ECFC                       	smpsPSGAlterVol     $FC
000910B6 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000910BA EC04                       	smpsPSGAlterVol     $04
000910BC E701                       	dc.b	smpsNoAttack, $01
000910BE EC07                       	smpsPSGAlterVol     $07
000910C0 8009                       	dc.b	nRst, $09
000910C2 E100                       	smpsAlterNote       $00
000910C4 01                         	dc.b	$01
000910C5 F6F5 19                    	smpsJump            music84_Jump07
000910C8                            
000910C8                            ; PSG2 Data
000910C8                            music84_PSG2:
000910C8 E1FC                       	smpsAlterNote       $FC
000910CA EC04                       	smpsPSGAlterVol     $04
000910CC 8F03                       	dc.b	nD1, $03
000910CE E1FD                       	smpsAlterNote       $FD
000910D0 9203                       	dc.b	nF1, $03
000910D2 EC04                       	smpsPSGAlterVol     $04
000910D4 E701                       	dc.b	smpsNoAttack, $01
000910D6 E1FE                       	smpsAlterNote       $FE
000910D8 ECFC                       	smpsPSGAlterVol     $FC
000910DA 9603                       	dc.b	nA1, $03
000910DC E1FD                       	smpsAlterNote       $FD
000910DE 9103                       	dc.b	nE1, $03
000910E0 EC04                       	smpsPSGAlterVol     $04
000910E2 E701                       	dc.b	smpsNoAttack, $01
000910E4 ECFC                       	smpsPSGAlterVol     $FC
000910E6 9403                       	dc.b	nG1, $03
000910E8 E1FE                       	smpsAlterNote       $FE
000910EA 9703                       	dc.b	nBb1, $03
000910EC EC04                       	smpsPSGAlterVol     $04
000910EE E701                       	dc.b	smpsNoAttack, $01
000910F0 E1FF                       	smpsAlterNote       $FF
000910F2 ECFC                       	smpsPSGAlterVol     $FC
000910F4 9B02                       	dc.b	nD2, $02
000910F6 EC04                       	smpsPSGAlterVol     $04
000910F8 E701                       	dc.b	smpsNoAttack, $01
000910FA ECFC                       	smpsPSGAlterVol     $FC
000910FC E1FE                       	smpsAlterNote       $FE
000910FE 9A03                       	dc.b	nCs2, $03
00091100 EC0B                       	smpsPSGAlterVol     $0B
00091102 800A                       	dc.b	nRst, $0A
00091104 E102                       	smpsAlterNote       $02
00091106 01                         	dc.b	$01
00091107 E10A                       	smpsAlterNote       $0A
00091109 01                         	dc.b	$01
0009110A E102                       	smpsAlterNote       $02
0009110C 01                         	dc.b	$01
0009110D E1FC                       	smpsAlterNote       $FC
0009110F 01                         	dc.b	$01
00091110 E10A                       	smpsAlterNote       $0A
00091112 01                         	dc.b	$01
00091113 E1FC                       	smpsAlterNote       $FC
00091115 01                         	dc.b	$01
00091116 E108                       	smpsAlterNote       $08
00091118 01                         	dc.b	$01
00091119 E10A                       	smpsAlterNote       $0A
0009111B 01                         	dc.b	$01
0009111C E102                       	smpsAlterNote       $02
0009111E 01                         	dc.b	$01
0009111F E1F7                       	smpsAlterNote       $F7
00091121 0101                       	dc.b	$01, $01
00091123 E102                       	smpsAlterNote       $02
00091125 01                         	dc.b	$01
00091126 E108                       	smpsAlterNote       $08
00091128 0101                       	dc.b	$01, $01
0009112A E1FC                       	smpsAlterNote       $FC
0009112C 01                         	dc.b	$01
0009112D E10A                       	smpsAlterNote       $0A
0009112F 01                         	dc.b	$01
00091130 E1F7                       	smpsAlterNote       $F7
00091132 01                         	dc.b	$01
00091133 E102                       	smpsAlterNote       $02
00091135 01                         	dc.b	$01
00091136 E10A                       	smpsAlterNote       $0A
00091138 01                         	dc.b	$01
00091139 E102                       	smpsAlterNote       $02
0009113B 01                         	dc.b	$01
0009113C E1FC                       	smpsAlterNote       $FC
0009113E 01                         	dc.b	$01
0009113F                            
0009113F                            music84_Jump06:
0009113F E10A                       	smpsAlterNote       $0A
00091141 8001                       	dc.b	nRst, $01
00091143 E1FC                       	smpsAlterNote       $FC
00091145 01                         	dc.b	$01
00091146 E108                       	smpsAlterNote       $08
00091148 01                         	dc.b	$01
00091149 E10A                       	smpsAlterNote       $0A
0009114B 01                         	dc.b	$01
0009114C E1FC                       	smpsAlterNote       $FC
0009114E ECF5                       	smpsPSGAlterVol     $F5
00091150 8F06                       	dc.b	nD1, $06
00091152 EC04                       	smpsPSGAlterVol     $04
00091154 E701                       	dc.b	smpsNoAttack, $01
00091156 EC07                       	smpsPSGAlterVol     $07
00091158 8003                       	dc.b	nRst, $03
0009115A ECF5                       	smpsPSGAlterVol     $F5
0009115C 8F06                       	dc.b	nD1, $06
0009115E EC04                       	smpsPSGAlterVol     $04
00091160 E701                       	dc.b	smpsNoAttack, $01
00091162 EC07                       	smpsPSGAlterVol     $07
00091164 8006                       	dc.b	nRst, $06
00091166 E1FF                       	smpsAlterNote       $FF
00091168 01                         	dc.b	$01
00091169 E102                       	smpsAlterNote       $02
0009116B 01                         	dc.b	$01
0009116C E1FF                       	smpsAlterNote       $FF
0009116E 01                         	dc.b	$01
0009116F E1F9                       	smpsAlterNote       $F9
00091171 01                         	dc.b	$01
00091172 E1FC                       	smpsAlterNote       $FC
00091174 ECF5                       	smpsPSGAlterVol     $F5
00091176 9006                       	dc.b	nEb1, $06
00091178 EC04                       	smpsPSGAlterVol     $04
0009117A E701                       	dc.b	smpsNoAttack, $01
0009117C EC07                       	smpsPSGAlterVol     $07
0009117E 8003                       	dc.b	nRst, $03
00091180 ECF5                       	smpsPSGAlterVol     $F5
00091182 9007                       	dc.b	nEb1, $07
00091184 EC0B                       	smpsPSGAlterVol     $0B
00091186 8006                       	dc.b	nRst, $06
00091188 E1FF                       	smpsAlterNote       $FF
0009118A 01                         	dc.b	$01
0009118B E103                       	smpsAlterNote       $03
0009118D 0101                       	dc.b	$01, $01
0009118F E1FC                       	smpsAlterNote       $FC
00091191 01                         	dc.b	$01
00091192 ECF5                       	smpsPSGAlterVol     $F5
00091194 8F07                       	dc.b	nD1, $07
00091196 EC0B                       	smpsPSGAlterVol     $0B
00091198 8004                       	dc.b	nRst, $04
0009119A ECF5                       	smpsPSGAlterVol     $F5
0009119C 8F06                       	dc.b	nD1, $06
0009119E EC04                       	smpsPSGAlterVol     $04
000911A0 E701                       	dc.b	smpsNoAttack, $01
000911A2 EC07                       	smpsPSGAlterVol     $07
000911A4 8006                       	dc.b	nRst, $06
000911A6 E102                       	smpsAlterNote       $02
000911A8 01                         	dc.b	$01
000911A9 E103                       	smpsAlterNote       $03
000911AB 01                         	dc.b	$01
000911AC E1FF                       	smpsAlterNote       $FF
000911AE 01                         	dc.b	$01
000911AF E1F9                       	smpsAlterNote       $F9
000911B1 01                         	dc.b	$01
000911B2 E1FC                       	smpsAlterNote       $FC
000911B4 ECF5                       	smpsPSGAlterVol     $F5
000911B6 8F06                       	dc.b	nD1, $06
000911B8 EC04                       	smpsPSGAlterVol     $04
000911BA E701                       	dc.b	smpsNoAttack, $01
000911BC EC07                       	smpsPSGAlterVol     $07
000911BE 8003                       	dc.b	nRst, $03
000911C0 ECF5                       	smpsPSGAlterVol     $F5
000911C2 8F06                       	dc.b	nD1, $06
000911C4 EC04                       	smpsPSGAlterVol     $04
000911C6 E701                       	dc.b	smpsNoAttack, $01
000911C8 EC07                       	smpsPSGAlterVol     $07
000911CA 8006                       	dc.b	nRst, $06
000911CC E1FF                       	smpsAlterNote       $FF
000911CE 01                         	dc.b	$01
000911CF E103                       	smpsAlterNote       $03
000911D1 01                         	dc.b	$01
000911D2 E1FF                       	smpsAlterNote       $FF
000911D4 01                         	dc.b	$01
000911D5 E1FC                       	smpsAlterNote       $FC
000911D7 01                         	dc.b	$01
000911D8 ECF5                       	smpsPSGAlterVol     $F5
000911DA 8F06                       	dc.b	nD1, $06
000911DC EC04                       	smpsPSGAlterVol     $04
000911DE E701                       	dc.b	smpsNoAttack, $01
000911E0 EC07                       	smpsPSGAlterVol     $07
000911E2 8003                       	dc.b	nRst, $03
000911E4 ECF5                       	smpsPSGAlterVol     $F5
000911E6 8F07                       	dc.b	nD1, $07
000911E8 EC0B                       	smpsPSGAlterVol     $0B
000911EA 8007                       	dc.b	nRst, $07
000911EC E101                       	smpsAlterNote       $01
000911EE 0101                       	dc.b	$01, $01
000911F0 E1FC                       	smpsAlterNote       $FC
000911F2 01                         	dc.b	$01
000911F3 E1F9                       	smpsAlterNote       $F9
000911F5 01                         	dc.b	$01
000911F6 E1FC                       	smpsAlterNote       $FC
000911F8 ECF5                       	smpsPSGAlterVol     $F5
000911FA 9006                       	dc.b	nEb1, $06
000911FC EC0B                       	smpsPSGAlterVol     $0B
000911FE 8004                       	dc.b	nRst, $04
00091200 ECF5                       	smpsPSGAlterVol     $F5
00091202 9006                       	dc.b	nEb1, $06
00091204 EC04                       	smpsPSGAlterVol     $04
00091206 E701                       	dc.b	smpsNoAttack, $01
00091208 EC07                       	smpsPSGAlterVol     $07
0009120A 8006                       	dc.b	nRst, $06
0009120C E100                       	smpsAlterNote       $00
0009120E 01                         	dc.b	$01
0009120F E102                       	smpsAlterNote       $02
00091211 01                         	dc.b	$01
00091212 E100                       	smpsAlterNote       $00
00091214 01                         	dc.b	$01
00091215 E1FD                       	smpsAlterNote       $FD
00091217 01                         	dc.b	$01
00091218 E1FF                       	smpsAlterNote       $FF
0009121A ECF5                       	smpsPSGAlterVol     $F5
0009121C 9B06                       	dc.b	nD2, $06
0009121E EC04                       	smpsPSGAlterVol     $04
00091220 E701                       	dc.b	smpsNoAttack, $01
00091222 EC07                       	smpsPSGAlterVol     $07
00091224 8003                       	dc.b	nRst, $03
00091226 ECF5                       	smpsPSGAlterVol     $F5
00091228 9B07                       	dc.b	nD2, $07
0009122A EC0B                       	smpsPSGAlterVol     $0B
0009122C 8006                       	dc.b	nRst, $06
0009122E E102                       	smpsAlterNote       $02
00091230 01                         	dc.b	$01
00091231 E106                       	smpsAlterNote       $06
00091233 01                         	dc.b	$01
00091234 E105                       	smpsAlterNote       $05
00091236 01                         	dc.b	$01
00091237 E1FF                       	smpsAlterNote       $FF
00091239 01                         	dc.b	$01
0009123A ECF5                       	smpsPSGAlterVol     $F5
0009123C 9B07                       	dc.b	nD2, $07
0009123E EC0B                       	smpsPSGAlterVol     $0B
00091240 8004                       	dc.b	nRst, $04
00091242 ECF5                       	smpsPSGAlterVol     $F5
00091244 9B06                       	dc.b	nD2, $06
00091246 EC0B                       	smpsPSGAlterVol     $0B
00091248 8007                       	dc.b	nRst, $07
0009124A E105                       	smpsAlterNote       $05
0009124C 0101                       	dc.b	$01, $01
0009124E E102                       	smpsAlterNote       $02
00091250 01                         	dc.b	$01
00091251 E1FC                       	smpsAlterNote       $FC
00091253 01                         	dc.b	$01
00091254 E1FF                       	smpsAlterNote       $FF
00091256 ECF5                       	smpsPSGAlterVol     $F5
00091258 9B06                       	dc.b	nD2, $06
0009125A EC04                       	smpsPSGAlterVol     $04
0009125C E701                       	dc.b	smpsNoAttack, $01
0009125E EC07                       	smpsPSGAlterVol     $07
00091260 8003                       	dc.b	nRst, $03
00091262 ECF5                       	smpsPSGAlterVol     $F5
00091264 9B06                       	dc.b	nD2, $06
00091266 EC04                       	smpsPSGAlterVol     $04
00091268 E701                       	dc.b	smpsNoAttack, $01
0009126A EC07                       	smpsPSGAlterVol     $07
0009126C 8006                       	dc.b	nRst, $06
0009126E E102                       	smpsAlterNote       $02
00091270 01                         	dc.b	$01
00091271 E106                       	smpsAlterNote       $06
00091273 01                         	dc.b	$01
00091274 E102                       	smpsAlterNote       $02
00091276 01                         	dc.b	$01
00091277 E1FF                       	smpsAlterNote       $FF
00091279 01                         	dc.b	$01
0009127A ECF5                       	smpsPSGAlterVol     $F5
0009127C 9B06                       	dc.b	nD2, $06
0009127E EC04                       	smpsPSGAlterVol     $04
00091280 E701                       	dc.b	smpsNoAttack, $01
00091282 EC07                       	smpsPSGAlterVol     $07
00091284 8003                       	dc.b	nRst, $03
00091286 ECF5                       	smpsPSGAlterVol     $F5
00091288 9B07                       	dc.b	nD2, $07
0009128A EC0B                       	smpsPSGAlterVol     $0B
0009128C 8007                       	dc.b	nRst, $07
0009128E E105                       	smpsAlterNote       $05
00091290 0101                       	dc.b	$01, $01
00091292 E1FF                       	smpsAlterNote       $FF
00091294 01                         	dc.b	$01
00091295 E1FC                       	smpsAlterNote       $FC
00091297 01                         	dc.b	$01
00091298 E1FF                       	smpsAlterNote       $FF
0009129A ECF5                       	smpsPSGAlterVol     $F5
0009129C 9B06                       	dc.b	nD2, $06
0009129E EC0B                       	smpsPSGAlterVol     $0B
000912A0 8004                       	dc.b	nRst, $04
000912A2 ECF5                       	smpsPSGAlterVol     $F5
000912A4 9B06                       	dc.b	nD2, $06
000912A6 EC04                       	smpsPSGAlterVol     $04
000912A8 E701                       	dc.b	smpsNoAttack, $01
000912AA EC07                       	smpsPSGAlterVol     $07
000912AC 8006                       	dc.b	nRst, $06
000912AE E105                       	smpsAlterNote       $05
000912B0 01                         	dc.b	$01
000912B1 E106                       	smpsAlterNote       $06
000912B3 01                         	dc.b	$01
000912B4 E102                       	smpsAlterNote       $02
000912B6 01                         	dc.b	$01
000912B7 E1FC                       	smpsAlterNote       $FC
000912B9 01                         	dc.b	$01
000912BA E1FF                       	smpsAlterNote       $FF
000912BC ECF5                       	smpsPSGAlterVol     $F5
000912BE 9B06                       	dc.b	nD2, $06
000912C0 EC04                       	smpsPSGAlterVol     $04
000912C2 E701                       	dc.b	smpsNoAttack, $01
000912C4 EC07                       	smpsPSGAlterVol     $07
000912C6 8003                       	dc.b	nRst, $03
000912C8 ECF5                       	smpsPSGAlterVol     $F5
000912CA 9B06                       	dc.b	nD2, $06
000912CC EC04                       	smpsPSGAlterVol     $04
000912CE E701                       	dc.b	smpsNoAttack, $01
000912D0 EC07                       	smpsPSGAlterVol     $07
000912D2 8006                       	dc.b	nRst, $06
000912D4 E102                       	smpsAlterNote       $02
000912D6 01                         	dc.b	$01
000912D7 E106                       	smpsAlterNote       $06
000912D9 01                         	dc.b	$01
000912DA E105                       	smpsAlterNote       $05
000912DC 01                         	dc.b	$01
000912DD E1FF                       	smpsAlterNote       $FF
000912DF 01                         	dc.b	$01
000912E0 ECF5                       	smpsPSGAlterVol     $F5
000912E2 9B07                       	dc.b	nD2, $07
000912E4 EC0B                       	smpsPSGAlterVol     $0B
000912E6 8004                       	dc.b	nRst, $04
000912E8 ECF5                       	smpsPSGAlterVol     $F5
000912EA 9B06                       	dc.b	nD2, $06
000912EC EC0B                       	smpsPSGAlterVol     $0B
000912EE 8007                       	dc.b	nRst, $07
000912F0 E105                       	smpsAlterNote       $05
000912F2 0101                       	dc.b	$01, $01
000912F4 E102                       	smpsAlterNote       $02
000912F6 01                         	dc.b	$01
000912F7 E1FC                       	smpsAlterNote       $FC
000912F9 01                         	dc.b	$01
000912FA E1FF                       	smpsAlterNote       $FF
000912FC ECF5                       	smpsPSGAlterVol     $F5
000912FE 9B06                       	dc.b	nD2, $06
00091300 EC04                       	smpsPSGAlterVol     $04
00091302 E701                       	dc.b	smpsNoAttack, $01
00091304 EC07                       	smpsPSGAlterVol     $07
00091306 8003                       	dc.b	nRst, $03
00091308 ECF5                       	smpsPSGAlterVol     $F5
0009130A 9B06                       	dc.b	nD2, $06
0009130C EC04                       	smpsPSGAlterVol     $04
0009130E E701                       	dc.b	smpsNoAttack, $01
00091310 EC07                       	smpsPSGAlterVol     $07
00091312 8006                       	dc.b	nRst, $06
00091314 E102                       	smpsAlterNote       $02
00091316 01                         	dc.b	$01
00091317 E106                       	smpsAlterNote       $06
00091319 01                         	dc.b	$01
0009131A E102                       	smpsAlterNote       $02
0009131C 01                         	dc.b	$01
0009131D E1FF                       	smpsAlterNote       $FF
0009131F 01                         	dc.b	$01
00091320 ECF5                       	smpsPSGAlterVol     $F5
00091322 9B06                       	dc.b	nD2, $06
00091324 EC04                       	smpsPSGAlterVol     $04
00091326 E701                       	dc.b	smpsNoAttack, $01
00091328 EC07                       	smpsPSGAlterVol     $07
0009132A 8003                       	dc.b	nRst, $03
0009132C ECF5                       	smpsPSGAlterVol     $F5
0009132E 9B07                       	dc.b	nD2, $07
00091330 E1FE                       	smpsAlterNote       $FE
00091332 9706                       	dc.b	nBb1, $06
00091334 EC04                       	smpsPSGAlterVol     $04
00091336 E701                       	dc.b	smpsNoAttack, $01
00091338 ECFC                       	smpsPSGAlterVol     $FC
0009133A 9703                       	dc.b	nBb1, $03
0009133C EC04                       	smpsPSGAlterVol     $04
0009133E E701                       	dc.b	smpsNoAttack, $01
00091340 ECFC                       	smpsPSGAlterVol     $FC
00091342 9702                       	dc.b	nBb1, $02
00091344 EC04                       	smpsPSGAlterVol     $04
00091346 E701                       	dc.b	smpsNoAttack, $01
00091348 ECFC                       	smpsPSGAlterVol     $FC
0009134A 9606                       	dc.b	nA1, $06
0009134C EC04                       	smpsPSGAlterVol     $04
0009134E E701                       	dc.b	smpsNoAttack, $01
00091350 EC07                       	smpsPSGAlterVol     $07
00091352 8006                       	dc.b	nRst, $06
00091354 E101                       	smpsAlterNote       $01
00091356 01                         	dc.b	$01
00091357 E107                       	smpsAlterNote       $07
00091359 01                         	dc.b	$01
0009135A E101                       	smpsAlterNote       $01
0009135C 01                         	dc.b	$01
0009135D E1F8                       	smpsAlterNote       $F8
0009135F 01                         	dc.b	$01
00091360 E1F7                       	smpsAlterNote       $F7
00091362 01                         	dc.b	$01
00091363 E1FC                       	smpsAlterNote       $FC
00091365 01                         	dc.b	$01
00091366 E106                       	smpsAlterNote       $06
00091368 01                         	dc.b	$01
00091369 E107                       	smpsAlterNote       $07
0009136B 01                         	dc.b	$01
0009136C E101                       	smpsAlterNote       $01
0009136E 01                         	dc.b	$01
0009136F E1F8                       	smpsAlterNote       $F8
00091371 0101                       	dc.b	$01, $01
00091373 E1FC                       	smpsAlterNote       $FC
00091375 ECF5                       	smpsPSGAlterVol     $F5
00091377 8F06                       	dc.b	nD1, $06
00091379 EC04                       	smpsPSGAlterVol     $04
0009137B E701                       	dc.b	smpsNoAttack, $01
0009137D EC07                       	smpsPSGAlterVol     $07
0009137F 8003                       	dc.b	nRst, $03
00091381 ECF5                       	smpsPSGAlterVol     $F5
00091383 8F06                       	dc.b	nD1, $06
00091385 EC04                       	smpsPSGAlterVol     $04
00091387 E701                       	dc.b	smpsNoAttack, $01
00091389 EC07                       	smpsPSGAlterVol     $07
0009138B 8006                       	dc.b	nRst, $06
0009138D E1FF                       	smpsAlterNote       $FF
0009138F 01                         	dc.b	$01
00091390 E102                       	smpsAlterNote       $02
00091392 01                         	dc.b	$01
00091393 E101                       	smpsAlterNote       $01
00091395 01                         	dc.b	$01
00091396 E1FC                       	smpsAlterNote       $FC
00091398 01                         	dc.b	$01
00091399 ECF5                       	smpsPSGAlterVol     $F5
0009139B 9007                       	dc.b	nEb1, $07
0009139D EC0B                       	smpsPSGAlterVol     $0B
0009139F 8004                       	dc.b	nRst, $04
000913A1 ECF5                       	smpsPSGAlterVol     $F5
000913A3 9006                       	dc.b	nEb1, $06
000913A5 EC0B                       	smpsPSGAlterVol     $0B
000913A7 8007                       	dc.b	nRst, $07
000913A9 E103                       	smpsAlterNote       $03
000913AB 0101                       	dc.b	$01, $01
000913AD E1FC                       	smpsAlterNote       $FC
000913AF 01                         	dc.b	$01
000913B0 E1F9                       	smpsAlterNote       $F9
000913B2 01                         	dc.b	$01
000913B3 E1FC                       	smpsAlterNote       $FC
000913B5 ECF5                       	smpsPSGAlterVol     $F5
000913B7 8F06                       	dc.b	nD1, $06
000913B9 EC04                       	smpsPSGAlterVol     $04
000913BB E701                       	dc.b	smpsNoAttack, $01
000913BD EC07                       	smpsPSGAlterVol     $07
000913BF 8003                       	dc.b	nRst, $03
000913C1 ECF5                       	smpsPSGAlterVol     $F5
000913C3 8F06                       	dc.b	nD1, $06
000913C5 EC04                       	smpsPSGAlterVol     $04
000913C7 E701                       	dc.b	smpsNoAttack, $01
000913C9 EC07                       	smpsPSGAlterVol     $07
000913CB 8006                       	dc.b	nRst, $06
000913CD E1FF                       	smpsAlterNote       $FF
000913CF 01                         	dc.b	$01
000913D0 E103                       	smpsAlterNote       $03
000913D2 01                         	dc.b	$01
000913D3 E1FF                       	smpsAlterNote       $FF
000913D5 01                         	dc.b	$01
000913D6 E1F9                       	smpsAlterNote       $F9
000913D8 01                         	dc.b	$01
000913D9 E1FC                       	smpsAlterNote       $FC
000913DB ECF5                       	smpsPSGAlterVol     $F5
000913DD 8F06                       	dc.b	nD1, $06
000913DF EC04                       	smpsPSGAlterVol     $04
000913E1 E701                       	dc.b	smpsNoAttack, $01
000913E3 EC07                       	smpsPSGAlterVol     $07
000913E5 8003                       	dc.b	nRst, $03
000913E7 ECF5                       	smpsPSGAlterVol     $F5
000913E9 8F07                       	dc.b	nD1, $07
000913EB EC0B                       	smpsPSGAlterVol     $0B
000913ED 8006                       	dc.b	nRst, $06
000913EF E1FF                       	smpsAlterNote       $FF
000913F1 01                         	dc.b	$01
000913F2 E102                       	smpsAlterNote       $02
000913F4 0101                       	dc.b	$01, $01
000913F6 E1FC                       	smpsAlterNote       $FC
000913F8 01                         	dc.b	$01
000913F9 ECF5                       	smpsPSGAlterVol     $F5
000913FB 8F07                       	dc.b	nD1, $07
000913FD EC0B                       	smpsPSGAlterVol     $0B
000913FF 8004                       	dc.b	nRst, $04
00091401 ECF5                       	smpsPSGAlterVol     $F5
00091403 8F06                       	dc.b	nD1, $06
00091405 EC04                       	smpsPSGAlterVol     $04
00091407 E701                       	dc.b	smpsNoAttack, $01
00091409 EC07                       	smpsPSGAlterVol     $07
0009140B 8006                       	dc.b	nRst, $06
0009140D E101                       	smpsAlterNote       $01
0009140F 01                         	dc.b	$01
00091410 E102                       	smpsAlterNote       $02
00091412 01                         	dc.b	$01
00091413 E1FF                       	smpsAlterNote       $FF
00091415 01                         	dc.b	$01
00091416 E1F9                       	smpsAlterNote       $F9
00091418 01                         	dc.b	$01
00091419 E1FC                       	smpsAlterNote       $FC
0009141B ECF5                       	smpsPSGAlterVol     $F5
0009141D 9006                       	dc.b	nEb1, $06
0009141F EC04                       	smpsPSGAlterVol     $04
00091421 E701                       	dc.b	smpsNoAttack, $01
00091423 EC07                       	smpsPSGAlterVol     $07
00091425 8003                       	dc.b	nRst, $03
00091427 ECF5                       	smpsPSGAlterVol     $F5
00091429 9006                       	dc.b	nEb1, $06
0009142B EC04                       	smpsPSGAlterVol     $04
0009142D E701                       	dc.b	smpsNoAttack, $01
0009142F EC07                       	smpsPSGAlterVol     $07
00091431 8006                       	dc.b	nRst, $06
00091433 E100                       	smpsAlterNote       $00
00091435 01                         	dc.b	$01
00091436 E102                       	smpsAlterNote       $02
00091438 01                         	dc.b	$01
00091439 E100                       	smpsAlterNote       $00
0009143B 01                         	dc.b	$01
0009143C E1FF                       	smpsAlterNote       $FF
0009143E 01                         	dc.b	$01
0009143F ECF5                       	smpsPSGAlterVol     $F5
00091441 9B06                       	dc.b	nD2, $06
00091443 EC04                       	smpsPSGAlterVol     $04
00091445 E701                       	dc.b	smpsNoAttack, $01
00091447 EC07                       	smpsPSGAlterVol     $07
00091449 8003                       	dc.b	nRst, $03
0009144B ECF5                       	smpsPSGAlterVol     $F5
0009144D 9B07                       	dc.b	nD2, $07
0009144F EC0B                       	smpsPSGAlterVol     $0B
00091451 8007                       	dc.b	nRst, $07
00091453 E105                       	smpsAlterNote       $05
00091455 0101                       	dc.b	$01, $01
00091457 E1FF                       	smpsAlterNote       $FF
00091459 01                         	dc.b	$01
0009145A E1FC                       	smpsAlterNote       $FC
0009145C 01                         	dc.b	$01
0009145D E1FF                       	smpsAlterNote       $FF
0009145F ECF5                       	smpsPSGAlterVol     $F5
00091461 9B06                       	dc.b	nD2, $06
00091463 EC0B                       	smpsPSGAlterVol     $0B
00091465 8004                       	dc.b	nRst, $04
00091467 ECF5                       	smpsPSGAlterVol     $F5
00091469 9B06                       	dc.b	nD2, $06
0009146B EC04                       	smpsPSGAlterVol     $04
0009146D E701                       	dc.b	smpsNoAttack, $01
0009146F EC07                       	smpsPSGAlterVol     $07
00091471 8006                       	dc.b	nRst, $06
00091473 E102                       	smpsAlterNote       $02
00091475 01                         	dc.b	$01
00091476 E106                       	smpsAlterNote       $06
00091478 01                         	dc.b	$01
00091479 E102                       	smpsAlterNote       $02
0009147B 01                         	dc.b	$01
0009147C E1FC                       	smpsAlterNote       $FC
0009147E 01                         	dc.b	$01
0009147F E1FF                       	smpsAlterNote       $FF
00091481 ECF5                       	smpsPSGAlterVol     $F5
00091483 9B06                       	dc.b	nD2, $06
00091485 EC04                       	smpsPSGAlterVol     $04
00091487 E701                       	dc.b	smpsNoAttack, $01
00091489 EC07                       	smpsPSGAlterVol     $07
0009148B 8003                       	dc.b	nRst, $03
0009148D ECF5                       	smpsPSGAlterVol     $F5
0009148F 9B07                       	dc.b	nD2, $07
00091491 EC0B                       	smpsPSGAlterVol     $0B
00091493 8006                       	dc.b	nRst, $06
00091495 E102                       	smpsAlterNote       $02
00091497 01                         	dc.b	$01
00091498 E105                       	smpsAlterNote       $05
0009149A 0101                       	dc.b	$01, $01
0009149C E1FF                       	smpsAlterNote       $FF
0009149E 01                         	dc.b	$01
0009149F ECF5                       	smpsPSGAlterVol     $F5
000914A1 9B07                       	dc.b	nD2, $07
000914A3 EC0B                       	smpsPSGAlterVol     $0B
000914A5 8004                       	dc.b	nRst, $04
000914A7 ECF5                       	smpsPSGAlterVol     $F5
000914A9 9B06                       	dc.b	nD2, $06
000914AB EC0B                       	smpsPSGAlterVol     $0B
000914AD 8007                       	dc.b	nRst, $07
000914AF E105                       	smpsAlterNote       $05
000914B1 0101                       	dc.b	$01, $01
000914B3 E102                       	smpsAlterNote       $02
000914B5 01                         	dc.b	$01
000914B6 E1FC                       	smpsAlterNote       $FC
000914B8 01                         	dc.b	$01
000914B9 E1FF                       	smpsAlterNote       $FF
000914BB ECF5                       	smpsPSGAlterVol     $F5
000914BD 9B06                       	dc.b	nD2, $06
000914BF EC04                       	smpsPSGAlterVol     $04
000914C1 E701                       	dc.b	smpsNoAttack, $01
000914C3 EC07                       	smpsPSGAlterVol     $07
000914C5 8003                       	dc.b	nRst, $03
000914C7 ECF5                       	smpsPSGAlterVol     $F5
000914C9 9B06                       	dc.b	nD2, $06
000914CB EC04                       	smpsPSGAlterVol     $04
000914CD E701                       	dc.b	smpsNoAttack, $01
000914CF EC07                       	smpsPSGAlterVol     $07
000914D1 8006                       	dc.b	nRst, $06
000914D3 E102                       	smpsAlterNote       $02
000914D5 01                         	dc.b	$01
000914D6 E106                       	smpsAlterNote       $06
000914D8 01                         	dc.b	$01
000914D9 E102                       	smpsAlterNote       $02
000914DB 01                         	dc.b	$01
000914DC E1FF                       	smpsAlterNote       $FF
000914DE 01                         	dc.b	$01
000914DF ECF5                       	smpsPSGAlterVol     $F5
000914E1 9B06                       	dc.b	nD2, $06
000914E3 EC04                       	smpsPSGAlterVol     $04
000914E5 E701                       	dc.b	smpsNoAttack, $01
000914E7 EC07                       	smpsPSGAlterVol     $07
000914E9 8003                       	dc.b	nRst, $03
000914EB ECF5                       	smpsPSGAlterVol     $F5
000914ED 9B07                       	dc.b	nD2, $07
000914EF EC0B                       	smpsPSGAlterVol     $0B
000914F1 8007                       	dc.b	nRst, $07
000914F3 E105                       	smpsAlterNote       $05
000914F5 0101                       	dc.b	$01, $01
000914F7 E1FF                       	smpsAlterNote       $FF
000914F9 01                         	dc.b	$01
000914FA E1FC                       	smpsAlterNote       $FC
000914FC 01                         	dc.b	$01
000914FD E1FF                       	smpsAlterNote       $FF
000914FF ECF5                       	smpsPSGAlterVol     $F5
00091501 9B06                       	dc.b	nD2, $06
00091503 EC0B                       	smpsPSGAlterVol     $0B
00091505 8004                       	dc.b	nRst, $04
00091507 ECF5                       	smpsPSGAlterVol     $F5
00091509 9B06                       	dc.b	nD2, $06
0009150B EC04                       	smpsPSGAlterVol     $04
0009150D E701                       	dc.b	smpsNoAttack, $01
0009150F EC07                       	smpsPSGAlterVol     $07
00091511 8006                       	dc.b	nRst, $06
00091513 E102                       	smpsAlterNote       $02
00091515 01                         	dc.b	$01
00091516 E106                       	smpsAlterNote       $06
00091518 01                         	dc.b	$01
00091519 E102                       	smpsAlterNote       $02
0009151B 01                         	dc.b	$01
0009151C E1FC                       	smpsAlterNote       $FC
0009151E 01                         	dc.b	$01
0009151F E1FF                       	smpsAlterNote       $FF
00091521 ECF5                       	smpsPSGAlterVol     $F5
00091523 9B06                       	dc.b	nD2, $06
00091525 EC04                       	smpsPSGAlterVol     $04
00091527 E701                       	dc.b	smpsNoAttack, $01
00091529 EC07                       	smpsPSGAlterVol     $07
0009152B 8003                       	dc.b	nRst, $03
0009152D ECF5                       	smpsPSGAlterVol     $F5
0009152F 9B06                       	dc.b	nD2, $06
00091531 EC04                       	smpsPSGAlterVol     $04
00091533 E701                       	dc.b	smpsNoAttack, $01
00091535 EC07                       	smpsPSGAlterVol     $07
00091537 8006                       	dc.b	nRst, $06
00091539 E102                       	smpsAlterNote       $02
0009153B 01                         	dc.b	$01
0009153C E106                       	smpsAlterNote       $06
0009153E 01                         	dc.b	$01
0009153F E105                       	smpsAlterNote       $05
00091541 01                         	dc.b	$01
00091542 E1FF                       	smpsAlterNote       $FF
00091544 01                         	dc.b	$01
00091545 ECF5                       	smpsPSGAlterVol     $F5
00091547 9B07                       	dc.b	nD2, $07
00091549 EC0B                       	smpsPSGAlterVol     $0B
0009154B 8004                       	dc.b	nRst, $04
0009154D ECF5                       	smpsPSGAlterVol     $F5
0009154F 9B06                       	dc.b	nD2, $06
00091551 EC0B                       	smpsPSGAlterVol     $0B
00091553 8007                       	dc.b	nRst, $07
00091555 E105                       	smpsAlterNote       $05
00091557 0101                       	dc.b	$01, $01
00091559 E101                       	smpsAlterNote       $01
0009155B 01                         	dc.b	$01
0009155C E1FB                       	smpsAlterNote       $FB
0009155E 01                         	dc.b	$01
0009155F E1FE                       	smpsAlterNote       $FE
00091561 ECF5                       	smpsPSGAlterVol     $F5
00091563 9A06                       	dc.b	nCs2, $06
00091565 EC04                       	smpsPSGAlterVol     $04
00091567 E701                       	dc.b	smpsNoAttack, $01
00091569 EC07                       	smpsPSGAlterVol     $07
0009156B 8003                       	dc.b	nRst, $03
0009156D ECF5                       	smpsPSGAlterVol     $F5
0009156F 9A06                       	dc.b	nCs2, $06
00091571 EC04                       	smpsPSGAlterVol     $04
00091573 E701                       	dc.b	smpsNoAttack, $01
00091575 EC07                       	smpsPSGAlterVol     $07
00091577 8003                       	dc.b	nRst, $03
00091579 E1FC                       	smpsAlterNote       $FC
0009157B ECF5                       	smpsPSGAlterVol     $F5
0009157D 8F07                       	dc.b	nD1, $07
0009157F EC0B                       	smpsPSGAlterVol     $0B
00091581 8006                       	dc.b	nRst, $06
00091583 E1FF                       	smpsAlterNote       $FF
00091585 01                         	dc.b	$01
00091586 E103                       	smpsAlterNote       $03
00091588 01                         	dc.b	$01
00091589 E102                       	smpsAlterNote       $02
0009158B 01                         	dc.b	$01
0009158C E1FC                       	smpsAlterNote       $FC
0009158E 01                         	dc.b	$01
0009158F E1F8                       	smpsAlterNote       $F8
00091591 01                         	dc.b	$01
00091592 E1FC                       	smpsAlterNote       $FC
00091594 01                         	dc.b	$01
00091595 E1FF                       	smpsAlterNote       $FF
00091597 01                         	dc.b	$01
00091598 E103                       	smpsAlterNote       $03
0009159A 01                         	dc.b	$01
0009159B E1FC                       	smpsAlterNote       $FC
0009159D ECF5                       	smpsPSGAlterVol     $F5
0009159F 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000915A3 EC04                       	smpsPSGAlterVol     $04
000915A5 E701                       	dc.b	smpsNoAttack, $01
000915A7 EC07                       	smpsPSGAlterVol     $07
000915A9 8009                       	dc.b	nRst, $09
000915AB E1FF                       	smpsAlterNote       $FF
000915AD 01                         	dc.b	$01
000915AE E103                       	smpsAlterNote       $03
000915B0 01                         	dc.b	$01
000915B1 E102                       	smpsAlterNote       $02
000915B3 01                         	dc.b	$01
000915B4 E1FC                       	smpsAlterNote       $FC
000915B6 01                         	dc.b	$01
000915B7 E1F8                       	smpsAlterNote       $F8
000915B9 01                         	dc.b	$01
000915BA E1FC                       	smpsAlterNote       $FC
000915BC 01                         	dc.b	$01
000915BD E1FF                       	smpsAlterNote       $FF
000915BF 01                         	dc.b	$01
000915C0 E103                       	smpsAlterNote       $03
000915C2 01                         	dc.b	$01
000915C3 E1FF                       	smpsAlterNote       $FF
000915C5 01                         	dc.b	$01
000915C6 E1F9                       	smpsAlterNote       $F9
000915C8 01                         	dc.b	$01
000915C9 E1F8                       	smpsAlterNote       $F8
000915CB 01                         	dc.b	$01
000915CC E1FC                       	smpsAlterNote       $FC
000915CE 01                         	dc.b	$01
000915CF E102                       	smpsAlterNote       $02
000915D1 0101                       	dc.b	$01, $01
000915D3 E1FF                       	smpsAlterNote       $FF
000915D5 01                         	dc.b	$01
000915D6 E1FC                       	smpsAlterNote       $FC
000915D8 ECF5                       	smpsPSGAlterVol     $F5
000915DA 8F02                       	dc.b	nD1, $02
000915DC EC04                       	smpsPSGAlterVol     $04
000915DE E701                       	dc.b	smpsNoAttack, $01
000915E0 ECFC                       	smpsPSGAlterVol     $FC
000915E2 E1FB                       	smpsAlterNote       $FB
000915E4 8D06                       	dc.b	nC1, $06
000915E6 EC04                       	smpsPSGAlterVol     $04
000915E8 E701                       	dc.b	smpsNoAttack, $01
000915EA EC07                       	smpsPSGAlterVol     $07
000915EC 8006                       	dc.b	nRst, $06
000915EE E1FE                       	smpsAlterNote       $FE
000915F0 01                         	dc.b	$01
000915F1 E102                       	smpsAlterNote       $02
000915F3 01                         	dc.b	$01
000915F4 E1FE                       	smpsAlterNote       $FE
000915F6 01                         	dc.b	$01
000915F7 E1FB                       	smpsAlterNote       $FB
000915F9 01                         	dc.b	$01
000915FA E1F7                       	smpsAlterNote       $F7
000915FC 01                         	dc.b	$01
000915FD E1FB                       	smpsAlterNote       $FB
000915FF 01                         	dc.b	$01
00091600 E101                       	smpsAlterNote       $01
00091602 01                         	dc.b	$01
00091603 E102                       	smpsAlterNote       $02
00091605 01                         	dc.b	$01
00091606 E1FB                       	smpsAlterNote       $FB
00091608 ECF5                       	smpsPSGAlterVol     $F5
0009160A 8D02                       	dc.b	nC1, $02
0009160C EC04                       	smpsPSGAlterVol     $04
0009160E E701                       	dc.b	smpsNoAttack, $01
00091610 E1FC                       	smpsAlterNote       $FC
00091612 ECFC                       	smpsPSGAlterVol     $FC
00091614 8F0D                       	dc.b	nD1, $0D
00091616 E1FF                       	smpsAlterNote       $FF
00091618 E701                       	dc.b	smpsNoAttack, $01
0009161A E103                       	smpsAlterNote       $03
0009161C E701                       	dc.b	smpsNoAttack, $01
0009161E E1FF                       	smpsAlterNote       $FF
00091620 E701                       	dc.b	smpsNoAttack, $01
00091622 E1FC                       	smpsAlterNote       $FC
00091624 E701                       	dc.b	smpsNoAttack, $01
00091626 E1F8                       	smpsAlterNote       $F8
00091628 E701                       	dc.b	smpsNoAttack, $01
0009162A E1FC                       	smpsAlterNote       $FC
0009162C E701                       	dc.b	smpsNoAttack, $01
0009162E E102                       	smpsAlterNote       $02
00091630 E701                       	dc.b	smpsNoAttack, $01
00091632 E103                       	smpsAlterNote       $03
00091634 E701                       	dc.b	smpsNoAttack, $01
00091636 E1FF                       	smpsAlterNote       $FF
00091638 E701                       	dc.b	smpsNoAttack, $01
0009163A E1F9                       	smpsAlterNote       $F9
0009163C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091640 E1FC                       	smpsAlterNote       $FC
00091642 E701                       	dc.b	smpsNoAttack, $01
00091644 E102                       	smpsAlterNote       $02
00091646 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009164A E1FC                       	smpsAlterNote       $FC
0009164C E701                       	dc.b	smpsNoAttack, $01
0009164E E1F9                       	smpsAlterNote       $F9
00091650 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091654 E1FF                       	smpsAlterNote       $FF
00091656 EC04                       	smpsPSGAlterVol     $04
00091658 E701                       	dc.b	smpsNoAttack, $01
0009165A EC07                       	smpsPSGAlterVol     $07
0009165C E103                       	smpsAlterNote       $03
0009165E 8001                       	dc.b	nRst, $01
00091660 E102                       	smpsAlterNote       $02
00091662 01                         	dc.b	$01
00091663 E1FB                       	smpsAlterNote       $FB
00091665 01                         	dc.b	$01
00091666 E1F7                       	smpsAlterNote       $F7
00091668 01                         	dc.b	$01
00091669 E1FB                       	smpsAlterNote       $FB
0009166B 01                         	dc.b	$01
0009166C E102                       	smpsAlterNote       $02
0009166E 01                         	dc.b	$01
0009166F E103                       	smpsAlterNote       $03
00091671 01                         	dc.b	$01
00091672 E1FB                       	smpsAlterNote       $FB
00091674 ECF5                       	smpsPSGAlterVol     $F5
00091676 8E06                       	dc.b	nCs1, $06
00091678 EC04                       	smpsPSGAlterVol     $04
0009167A E701                       	dc.b	smpsNoAttack, $01
0009167C EC07                       	smpsPSGAlterVol     $07
0009167E 8003                       	dc.b	nRst, $03
00091680 ECF5                       	smpsPSGAlterVol     $F5
00091682 8E06                       	dc.b	nCs1, $06
00091684 EC04                       	smpsPSGAlterVol     $04
00091686 E701                       	dc.b	smpsNoAttack, $01
00091688 EC07                       	smpsPSGAlterVol     $07
0009168A 8006                       	dc.b	nRst, $06
0009168C E1FE                       	smpsAlterNote       $FE
0009168E 01                         	dc.b	$01
0009168F E102                       	smpsAlterNote       $02
00091691 01                         	dc.b	$01
00091692 E1FE                       	smpsAlterNote       $FE
00091694 01                         	dc.b	$01
00091695 E1F9                       	smpsAlterNote       $F9
00091697 01                         	dc.b	$01
00091698 E1FC                       	smpsAlterNote       $FC
0009169A ECF5                       	smpsPSGAlterVol     $F5
0009169C 8F06                       	dc.b	nD1, $06
0009169E EC04                       	smpsPSGAlterVol     $04
000916A0 E701                       	dc.b	smpsNoAttack, $01
000916A2 EC07                       	smpsPSGAlterVol     $07
000916A4 8003                       	dc.b	nRst, $03
000916A6 ECF5                       	smpsPSGAlterVol     $F5
000916A8 8F07                       	dc.b	nD1, $07
000916AA EC0B                       	smpsPSGAlterVol     $0B
000916AC 8006                       	dc.b	nRst, $06
000916AE E1FF                       	smpsAlterNote       $FF
000916B0 01                         	dc.b	$01
000916B1 E102                       	smpsAlterNote       $02
000916B3 0101                       	dc.b	$01, $01
000916B5 E1FB                       	smpsAlterNote       $FB
000916B7 01                         	dc.b	$01
000916B8 ECF5                       	smpsPSGAlterVol     $F5
000916BA 8E07                       	dc.b	nCs1, $07
000916BC EC0B                       	smpsPSGAlterVol     $0B
000916BE 8004                       	dc.b	nRst, $04
000916C0 ECF5                       	smpsPSGAlterVol     $F5
000916C2 8E06                       	dc.b	nCs1, $06
000916C4 EC04                       	smpsPSGAlterVol     $04
000916C6 E701                       	dc.b	smpsNoAttack, $01
000916C8 EC07                       	smpsPSGAlterVol     $07
000916CA 8006                       	dc.b	nRst, $06
000916CC E101                       	smpsAlterNote       $01
000916CE 01                         	dc.b	$01
000916CF E102                       	smpsAlterNote       $02
000916D1 01                         	dc.b	$01
000916D2 E1FE                       	smpsAlterNote       $FE
000916D4 01                         	dc.b	$01
000916D5 E1F8                       	smpsAlterNote       $F8
000916D7 01                         	dc.b	$01
000916D8 E1FB                       	smpsAlterNote       $FB
000916DA ECF5                       	smpsPSGAlterVol     $F5
000916DC 8E06                       	dc.b	nCs1, $06
000916DE EC04                       	smpsPSGAlterVol     $04
000916E0 E701                       	dc.b	smpsNoAttack, $01
000916E2 EC07                       	smpsPSGAlterVol     $07
000916E4 8003                       	dc.b	nRst, $03
000916E6 ECF5                       	smpsPSGAlterVol     $F5
000916E8 8E06                       	dc.b	nCs1, $06
000916EA EC04                       	smpsPSGAlterVol     $04
000916EC E701                       	dc.b	smpsNoAttack, $01
000916EE EC07                       	smpsPSGAlterVol     $07
000916F0 8004                       	dc.b	nRst, $04
000916F2 E1FC                       	smpsAlterNote       $FC
000916F4 ECF5                       	smpsPSGAlterVol     $F5
000916F6 8F06                       	dc.b	nD1, $06
000916F8 EC0B                       	smpsPSGAlterVol     $0B
000916FA 8006                       	dc.b	nRst, $06
000916FC E1FF                       	smpsAlterNote       $FF
000916FE 01                         	dc.b	$01
000916FF E102                       	smpsAlterNote       $02
00091701 0101                       	dc.b	$01, $01
00091703 E1FC                       	smpsAlterNote       $FC
00091705 01                         	dc.b	$01
00091706 E1F8                       	smpsAlterNote       $F8
00091708 01                         	dc.b	$01
00091709 E1F9                       	smpsAlterNote       $F9
0009170B 01                         	dc.b	$01
0009170C E1FF                       	smpsAlterNote       $FF
0009170E 01                         	dc.b	$01
0009170F E103                       	smpsAlterNote       $03
00091711 01                         	dc.b	$01
00091712 E1FC                       	smpsAlterNote       $FC
00091714 ECF5                       	smpsPSGAlterVol     $F5
00091716 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0009171A EC04                       	smpsPSGAlterVol     $04
0009171C E701                       	dc.b	smpsNoAttack, $01
0009171E EC07                       	smpsPSGAlterVol     $07
00091720 8009                       	dc.b	nRst, $09
00091722 E1FF                       	smpsAlterNote       $FF
00091724 01                         	dc.b	$01
00091725 E102                       	smpsAlterNote       $02
00091727 0101                       	dc.b	$01, $01
00091729 E1FC                       	smpsAlterNote       $FC
0009172B 01                         	dc.b	$01
0009172C E1F8                       	smpsAlterNote       $F8
0009172E 01                         	dc.b	$01
0009172F E1F9                       	smpsAlterNote       $F9
00091731 01                         	dc.b	$01
00091732 E1FF                       	smpsAlterNote       $FF
00091734 01                         	dc.b	$01
00091735 E103                       	smpsAlterNote       $03
00091737 01                         	dc.b	$01
00091738 E1FF                       	smpsAlterNote       $FF
0009173A 01                         	dc.b	$01
0009173B E1FC                       	smpsAlterNote       $FC
0009173D 01                         	dc.b	$01
0009173E E1F8                       	smpsAlterNote       $F8
00091740 01                         	dc.b	$01
00091741 E1FC                       	smpsAlterNote       $FC
00091743 01                         	dc.b	$01
00091744 E102                       	smpsAlterNote       $02
00091746 01                         	dc.b	$01
00091747 E103                       	smpsAlterNote       $03
00091749 01                         	dc.b	$01
0009174A E1FF                       	smpsAlterNote       $FF
0009174C 01                         	dc.b	$01
0009174D E1FC                       	smpsAlterNote       $FC
0009174F ECF5                       	smpsPSGAlterVol     $F5
00091751 8F03                       	dc.b	nD1, $03
00091753 E1FB                       	smpsAlterNote       $FB
00091755 8D06                       	dc.b	nC1, $06
00091757 EC04                       	smpsPSGAlterVol     $04
00091759 E701                       	dc.b	smpsNoAttack, $01
0009175B EC07                       	smpsPSGAlterVol     $07
0009175D 8006                       	dc.b	nRst, $06
0009175F E1FE                       	smpsAlterNote       $FE
00091761 01                         	dc.b	$01
00091762 E102                       	smpsAlterNote       $02
00091764 01                         	dc.b	$01
00091765 E101                       	smpsAlterNote       $01
00091767 01                         	dc.b	$01
00091768 E1FB                       	smpsAlterNote       $FB
0009176A 01                         	dc.b	$01
0009176B E1F7                       	smpsAlterNote       $F7
0009176D 01                         	dc.b	$01
0009176E E1FB                       	smpsAlterNote       $FB
00091770 01                         	dc.b	$01
00091771 E1FE                       	smpsAlterNote       $FE
00091773 01                         	dc.b	$01
00091774 E102                       	smpsAlterNote       $02
00091776 01                         	dc.b	$01
00091777 E1FB                       	smpsAlterNote       $FB
00091779 ECF5                       	smpsPSGAlterVol     $F5
0009177B 8D03                       	dc.b	nC1, $03
0009177D E1FC                       	smpsAlterNote       $FC
0009177F 8F0D                       	dc.b	nD1, $0D
00091781 E1FF                       	smpsAlterNote       $FF
00091783 E701                       	dc.b	smpsNoAttack, $01
00091785 E103                       	smpsAlterNote       $03
00091787 E701                       	dc.b	smpsNoAttack, $01
00091789 E1FF                       	smpsAlterNote       $FF
0009178B E701                       	dc.b	smpsNoAttack, $01
0009178D E1FC                       	smpsAlterNote       $FC
0009178F E701                       	dc.b	smpsNoAttack, $01
00091791 E1F8                       	smpsAlterNote       $F8
00091793 E701                       	dc.b	smpsNoAttack, $01
00091795 E1FC                       	smpsAlterNote       $FC
00091797 E701                       	dc.b	smpsNoAttack, $01
00091799 E102                       	smpsAlterNote       $02
0009179B E701                       	dc.b	smpsNoAttack, $01
0009179D E103                       	smpsAlterNote       $03
0009179F E701                       	dc.b	smpsNoAttack, $01
000917A1 E1FF                       	smpsAlterNote       $FF
000917A3 E701                       	dc.b	smpsNoAttack, $01
000917A5 E1F9                       	smpsAlterNote       $F9
000917A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000917AB E1FC                       	smpsAlterNote       $FC
000917AD E701                       	dc.b	smpsNoAttack, $01
000917AF E102                       	smpsAlterNote       $02
000917B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000917B5 E1FF                       	smpsAlterNote       $FF
000917B7 E701                       	dc.b	smpsNoAttack, $01
000917B9 E1F9                       	smpsAlterNote       $F9
000917BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000917BF E1FF                       	smpsAlterNote       $FF
000917C1 EC04                       	smpsPSGAlterVol     $04
000917C3 E701                       	dc.b	smpsNoAttack, $01
000917C5 EC07                       	smpsPSGAlterVol     $07
000917C7 E103                       	smpsAlterNote       $03
000917C9 8001                       	dc.b	nRst, $01
000917CB E102                       	smpsAlterNote       $02
000917CD 01                         	dc.b	$01
000917CE E1FB                       	smpsAlterNote       $FB
000917D0 01                         	dc.b	$01
000917D1 E1F7                       	smpsAlterNote       $F7
000917D3 01                         	dc.b	$01
000917D4 E1FB                       	smpsAlterNote       $FB
000917D6 01                         	dc.b	$01
000917D7 E1FF                       	smpsAlterNote       $FF
000917D9 01                         	dc.b	$01
000917DA E103                       	smpsAlterNote       $03
000917DC 01                         	dc.b	$01
000917DD E1FB                       	smpsAlterNote       $FB
000917DF ECF5                       	smpsPSGAlterVol     $F5
000917E1 8E06                       	dc.b	nCs1, $06
000917E3 EC04                       	smpsPSGAlterVol     $04
000917E5 E701                       	dc.b	smpsNoAttack, $01
000917E7 EC07                       	smpsPSGAlterVol     $07
000917E9 8003                       	dc.b	nRst, $03
000917EB ECF5                       	smpsPSGAlterVol     $F5
000917ED 8E06                       	dc.b	nCs1, $06
000917EF EC04                       	smpsPSGAlterVol     $04
000917F1 E701                       	dc.b	smpsNoAttack, $01
000917F3 EC07                       	smpsPSGAlterVol     $07
000917F5 8006                       	dc.b	nRst, $06
000917F7 E1FE                       	smpsAlterNote       $FE
000917F9 01                         	dc.b	$01
000917FA E102                       	smpsAlterNote       $02
000917FC 01                         	dc.b	$01
000917FD E1FE                       	smpsAlterNote       $FE
000917FF 01                         	dc.b	$01
00091800 E1FC                       	smpsAlterNote       $FC
00091802 01                         	dc.b	$01
00091803 ECF5                       	smpsPSGAlterVol     $F5
00091805 8F06                       	dc.b	nD1, $06
00091807 EC04                       	smpsPSGAlterVol     $04
00091809 E701                       	dc.b	smpsNoAttack, $01
0009180B EC07                       	smpsPSGAlterVol     $07
0009180D 8003                       	dc.b	nRst, $03
0009180F ECF5                       	smpsPSGAlterVol     $F5
00091811 8F07                       	dc.b	nD1, $07
00091813 EC0B                       	smpsPSGAlterVol     $0B
00091815 8007                       	dc.b	nRst, $07
00091817 E102                       	smpsAlterNote       $02
00091819 0101                       	dc.b	$01, $01
0009181B E1FB                       	smpsAlterNote       $FB
0009181D 01                         	dc.b	$01
0009181E E1F8                       	smpsAlterNote       $F8
00091820 01                         	dc.b	$01
00091821 E1FB                       	smpsAlterNote       $FB
00091823 ECF5                       	smpsPSGAlterVol     $F5
00091825 8E06                       	dc.b	nCs1, $06
00091827 EC0B                       	smpsPSGAlterVol     $0B
00091829 8004                       	dc.b	nRst, $04
0009182B ECF5                       	smpsPSGAlterVol     $F5
0009182D 8E06                       	dc.b	nCs1, $06
0009182F EC04                       	smpsPSGAlterVol     $04
00091831 E701                       	dc.b	smpsNoAttack, $01
00091833 EC07                       	smpsPSGAlterVol     $07
00091835 8006                       	dc.b	nRst, $06
00091837 E1FE                       	smpsAlterNote       $FE
00091839 01                         	dc.b	$01
0009183A E102                       	smpsAlterNote       $02
0009183C 01                         	dc.b	$01
0009183D E1FE                       	smpsAlterNote       $FE
0009183F 01                         	dc.b	$01
00091840 E1F9                       	smpsAlterNote       $F9
00091842 01                         	dc.b	$01
00091843 E1FC                       	smpsAlterNote       $FC
00091845 ECF5                       	smpsPSGAlterVol     $F5
00091847 8F06                       	dc.b	nD1, $06
00091849 EC04                       	smpsPSGAlterVol     $04
0009184B E701                       	dc.b	smpsNoAttack, $01
0009184D EC07                       	smpsPSGAlterVol     $07
0009184F 8003                       	dc.b	nRst, $03
00091851 ECF5                       	smpsPSGAlterVol     $F5
00091853 8F06                       	dc.b	nD1, $06
00091855 EC04                       	smpsPSGAlterVol     $04
00091857 E701                       	dc.b	smpsNoAttack, $01
00091859 EC07                       	smpsPSGAlterVol     $07
0009185B 8006                       	dc.b	nRst, $06
0009185D E1FF                       	smpsAlterNote       $FF
0009185F 01                         	dc.b	$01
00091860 E103                       	smpsAlterNote       $03
00091862 01                         	dc.b	$01
00091863 E102                       	smpsAlterNote       $02
00091865 01                         	dc.b	$01
00091866 E1FB                       	smpsAlterNote       $FB
00091868 01                         	dc.b	$01
00091869 ECF5                       	smpsPSGAlterVol     $F5
0009186B 8E07                       	dc.b	nCs1, $07
0009186D EC0B                       	smpsPSGAlterVol     $0B
0009186F 8004                       	dc.b	nRst, $04
00091871 ECF5                       	smpsPSGAlterVol     $F5
00091873 8E06                       	dc.b	nCs1, $06
00091875 EC0B                       	smpsPSGAlterVol     $0B
00091877 8007                       	dc.b	nRst, $07
00091879 E101                       	smpsAlterNote       $01
0009187B 0101                       	dc.b	$01, $01
0009187D E1FE                       	smpsAlterNote       $FE
0009187F 01                         	dc.b	$01
00091880 E1F9                       	smpsAlterNote       $F9
00091882 01                         	dc.b	$01
00091883 E1FC                       	smpsAlterNote       $FC
00091885 ECF5                       	smpsPSGAlterVol     $F5
00091887 8F06                       	dc.b	nD1, $06
00091889 EC04                       	smpsPSGAlterVol     $04
0009188B E701                       	dc.b	smpsNoAttack, $01
0009188D EC07                       	smpsPSGAlterVol     $07
0009188F 8003                       	dc.b	nRst, $03
00091891 ECF5                       	smpsPSGAlterVol     $F5
00091893 8F06                       	dc.b	nD1, $06
00091895 EC04                       	smpsPSGAlterVol     $04
00091897 E701                       	dc.b	smpsNoAttack, $01
00091899 EC07                       	smpsPSGAlterVol     $07
0009189B 8006                       	dc.b	nRst, $06
0009189D E1FF                       	smpsAlterNote       $FF
0009189F 01                         	dc.b	$01
000918A0 E103                       	smpsAlterNote       $03
000918A2 01                         	dc.b	$01
000918A3 E1FF                       	smpsAlterNote       $FF
000918A5 01                         	dc.b	$01
000918A6 E1FB                       	smpsAlterNote       $FB
000918A8 01                         	dc.b	$01
000918A9 ECF5                       	smpsPSGAlterVol     $F5
000918AB 8E06                       	dc.b	nCs1, $06
000918AD EC04                       	smpsPSGAlterVol     $04
000918AF E701                       	dc.b	smpsNoAttack, $01
000918B1 EC07                       	smpsPSGAlterVol     $07
000918B3 8003                       	dc.b	nRst, $03
000918B5 ECF5                       	smpsPSGAlterVol     $F5
000918B7 8E07                       	dc.b	nCs1, $07
000918B9 E1FF                       	smpsAlterNote       $FF
000918BB 9B06                       	dc.b	nD2, $06
000918BD EC04                       	smpsPSGAlterVol     $04
000918BF E701                       	dc.b	smpsNoAttack, $01
000918C1 ECFC                       	smpsPSGAlterVol     $FC
000918C3 9B03                       	dc.b	nD2, $03
000918C5 EC04                       	smpsPSGAlterVol     $04
000918C7 E701                       	dc.b	smpsNoAttack, $01
000918C9 ECFC                       	smpsPSGAlterVol     $FC
000918CB 9B02                       	dc.b	nD2, $02
000918CD EC04                       	smpsPSGAlterVol     $04
000918CF E701                       	dc.b	smpsNoAttack, $01
000918D1 ECFC                       	smpsPSGAlterVol     $FC
000918D3 E1FE                       	smpsAlterNote       $FE
000918D5 9A03                       	dc.b	nCs2, $03
000918D7 EC0B                       	smpsPSGAlterVol     $0B
000918D9 800A                       	dc.b	nRst, $0A
000918DB E102                       	smpsAlterNote       $02
000918DD 01                         	dc.b	$01
000918DE E10A                       	smpsAlterNote       $0A
000918E0 01                         	dc.b	$01
000918E1 E102                       	smpsAlterNote       $02
000918E3 01                         	dc.b	$01
000918E4 E1F7                       	smpsAlterNote       $F7
000918E6 01                         	dc.b	$01
000918E7 E10A                       	smpsAlterNote       $0A
000918E9 01                         	dc.b	$01
000918EA E1FC                       	smpsAlterNote       $FC
000918EC 01                         	dc.b	$01
000918ED E108                       	smpsAlterNote       $08
000918EF 0101                       	dc.b	$01, $01
000918F1 E102                       	smpsAlterNote       $02
000918F3 01                         	dc.b	$01
000918F4 E1F7                       	smpsAlterNote       $F7
000918F6 0101                       	dc.b	$01, $01
000918F8 E1FC                       	smpsAlterNote       $FC
000918FA ECF5                       	smpsPSGAlterVol     $F5
000918FC 8F06                       	dc.b	nD1, $06
000918FE EC04                       	smpsPSGAlterVol     $04
00091900 E701                       	dc.b	smpsNoAttack, $01
00091902 EC07                       	smpsPSGAlterVol     $07
00091904 8003                       	dc.b	nRst, $03
00091906 ECF5                       	smpsPSGAlterVol     $F5
00091908 8F06                       	dc.b	nD1, $06
0009190A EC04                       	smpsPSGAlterVol     $04
0009190C E701                       	dc.b	smpsNoAttack, $01
0009190E EC07                       	smpsPSGAlterVol     $07
00091910 8006                       	dc.b	nRst, $06
00091912 E1FF                       	smpsAlterNote       $FF
00091914 01                         	dc.b	$01
00091915 E102                       	smpsAlterNote       $02
00091917 01                         	dc.b	$01
00091918 E101                       	smpsAlterNote       $01
0009191A 01                         	dc.b	$01
0009191B E1FC                       	smpsAlterNote       $FC
0009191D 01                         	dc.b	$01
0009191E ECF5                       	smpsPSGAlterVol     $F5
00091920 9007                       	dc.b	nEb1, $07
00091922 EC0B                       	smpsPSGAlterVol     $0B
00091924 8004                       	dc.b	nRst, $04
00091926 ECF5                       	smpsPSGAlterVol     $F5
00091928 9006                       	dc.b	nEb1, $06
0009192A EC0B                       	smpsPSGAlterVol     $0B
0009192C 8007                       	dc.b	nRst, $07
0009192E E103                       	smpsAlterNote       $03
00091930 0101                       	dc.b	$01, $01
00091932 E1FF                       	smpsAlterNote       $FF
00091934 01                         	dc.b	$01
00091935 E1F9                       	smpsAlterNote       $F9
00091937 01                         	dc.b	$01
00091938 E1FC                       	smpsAlterNote       $FC
0009193A ECF5                       	smpsPSGAlterVol     $F5
0009193C 8F06                       	dc.b	nD1, $06
0009193E EC04                       	smpsPSGAlterVol     $04
00091940 E701                       	dc.b	smpsNoAttack, $01
00091942 EC07                       	smpsPSGAlterVol     $07
00091944 8003                       	dc.b	nRst, $03
00091946 ECF5                       	smpsPSGAlterVol     $F5
00091948 8F06                       	dc.b	nD1, $06
0009194A EC04                       	smpsPSGAlterVol     $04
0009194C E701                       	dc.b	smpsNoAttack, $01
0009194E EC07                       	smpsPSGAlterVol     $07
00091950 8006                       	dc.b	nRst, $06
00091952 E1FF                       	smpsAlterNote       $FF
00091954 01                         	dc.b	$01
00091955 E103                       	smpsAlterNote       $03
00091957 01                         	dc.b	$01
00091958 E1FF                       	smpsAlterNote       $FF
0009195A 01                         	dc.b	$01
0009195B E1F9                       	smpsAlterNote       $F9
0009195D 01                         	dc.b	$01
0009195E E1FC                       	smpsAlterNote       $FC
00091960 ECF5                       	smpsPSGAlterVol     $F5
00091962 8F06                       	dc.b	nD1, $06
00091964 EC04                       	smpsPSGAlterVol     $04
00091966 E701                       	dc.b	smpsNoAttack, $01
00091968 EC07                       	smpsPSGAlterVol     $07
0009196A 8003                       	dc.b	nRst, $03
0009196C ECF5                       	smpsPSGAlterVol     $F5
0009196E 8F07                       	dc.b	nD1, $07
00091970 EC0B                       	smpsPSGAlterVol     $0B
00091972 8006                       	dc.b	nRst, $06
00091974 E1FF                       	smpsAlterNote       $FF
00091976 01                         	dc.b	$01
00091977 E102                       	smpsAlterNote       $02
00091979 0101                       	dc.b	$01, $01
0009197B E1FC                       	smpsAlterNote       $FC
0009197D 01                         	dc.b	$01
0009197E ECF5                       	smpsPSGAlterVol     $F5
00091980 8F07                       	dc.b	nD1, $07
00091982 EC0B                       	smpsPSGAlterVol     $0B
00091984 8004                       	dc.b	nRst, $04
00091986 ECF5                       	smpsPSGAlterVol     $F5
00091988 8F06                       	dc.b	nD1, $06
0009198A EC04                       	smpsPSGAlterVol     $04
0009198C E701                       	dc.b	smpsNoAttack, $01
0009198E EC07                       	smpsPSGAlterVol     $07
00091990 8006                       	dc.b	nRst, $06
00091992 E101                       	smpsAlterNote       $01
00091994 01                         	dc.b	$01
00091995 E102                       	smpsAlterNote       $02
00091997 01                         	dc.b	$01
00091998 E1FF                       	smpsAlterNote       $FF
0009199A 01                         	dc.b	$01
0009199B E1F9                       	smpsAlterNote       $F9
0009199D 01                         	dc.b	$01
0009199E E1FC                       	smpsAlterNote       $FC
000919A0 ECF5                       	smpsPSGAlterVol     $F5
000919A2 9006                       	dc.b	nEb1, $06
000919A4 EC04                       	smpsPSGAlterVol     $04
000919A6 E701                       	dc.b	smpsNoAttack, $01
000919A8 EC07                       	smpsPSGAlterVol     $07
000919AA 8003                       	dc.b	nRst, $03
000919AC ECF5                       	smpsPSGAlterVol     $F5
000919AE 9006                       	dc.b	nEb1, $06
000919B0 EC04                       	smpsPSGAlterVol     $04
000919B2 E701                       	dc.b	smpsNoAttack, $01
000919B4 EC07                       	smpsPSGAlterVol     $07
000919B6 8006                       	dc.b	nRst, $06
000919B8 E100                       	smpsAlterNote       $00
000919BA 01                         	dc.b	$01
000919BB E102                       	smpsAlterNote       $02
000919BD 01                         	dc.b	$01
000919BE E100                       	smpsAlterNote       $00
000919C0 01                         	dc.b	$01
000919C1 E1FF                       	smpsAlterNote       $FF
000919C3 01                         	dc.b	$01
000919C4 ECF5                       	smpsPSGAlterVol     $F5
000919C6 9B06                       	dc.b	nD2, $06
000919C8 EC04                       	smpsPSGAlterVol     $04
000919CA E701                       	dc.b	smpsNoAttack, $01
000919CC EC07                       	smpsPSGAlterVol     $07
000919CE 8003                       	dc.b	nRst, $03
000919D0 ECF5                       	smpsPSGAlterVol     $F5
000919D2 9B07                       	dc.b	nD2, $07
000919D4 EC0B                       	smpsPSGAlterVol     $0B
000919D6 8007                       	dc.b	nRst, $07
000919D8 E105                       	smpsAlterNote       $05
000919DA 0101                       	dc.b	$01, $01
000919DC E1FF                       	smpsAlterNote       $FF
000919DE 01                         	dc.b	$01
000919DF E1FC                       	smpsAlterNote       $FC
000919E1 01                         	dc.b	$01
000919E2 E1FF                       	smpsAlterNote       $FF
000919E4 ECF5                       	smpsPSGAlterVol     $F5
000919E6 9B06                       	dc.b	nD2, $06
000919E8 EC0B                       	smpsPSGAlterVol     $0B
000919EA 8004                       	dc.b	nRst, $04
000919EC ECF5                       	smpsPSGAlterVol     $F5
000919EE 9B06                       	dc.b	nD2, $06
000919F0 EC04                       	smpsPSGAlterVol     $04
000919F2 E701                       	dc.b	smpsNoAttack, $01
000919F4 EC07                       	smpsPSGAlterVol     $07
000919F6 8006                       	dc.b	nRst, $06
000919F8 E102                       	smpsAlterNote       $02
000919FA 01                         	dc.b	$01
000919FB E106                       	smpsAlterNote       $06
000919FD 01                         	dc.b	$01
000919FE E102                       	smpsAlterNote       $02
00091A00 01                         	dc.b	$01
00091A01 E1FC                       	smpsAlterNote       $FC
00091A03 01                         	dc.b	$01
00091A04 E1FF                       	smpsAlterNote       $FF
00091A06 ECF5                       	smpsPSGAlterVol     $F5
00091A08 9B06                       	dc.b	nD2, $06
00091A0A EC04                       	smpsPSGAlterVol     $04
00091A0C E701                       	dc.b	smpsNoAttack, $01
00091A0E EC07                       	smpsPSGAlterVol     $07
00091A10 8003                       	dc.b	nRst, $03
00091A12 ECF5                       	smpsPSGAlterVol     $F5
00091A14 9B07                       	dc.b	nD2, $07
00091A16 EC0B                       	smpsPSGAlterVol     $0B
00091A18 8006                       	dc.b	nRst, $06
00091A1A E102                       	smpsAlterNote       $02
00091A1C 01                         	dc.b	$01
00091A1D E105                       	smpsAlterNote       $05
00091A1F 0101                       	dc.b	$01, $01
00091A21 E1FF                       	smpsAlterNote       $FF
00091A23 01                         	dc.b	$01
00091A24 ECF5                       	smpsPSGAlterVol     $F5
00091A26 9B07                       	dc.b	nD2, $07
00091A28 EC0B                       	smpsPSGAlterVol     $0B
00091A2A 8004                       	dc.b	nRst, $04
00091A2C ECF5                       	smpsPSGAlterVol     $F5
00091A2E 9B06                       	dc.b	nD2, $06
00091A30 EC04                       	smpsPSGAlterVol     $04
00091A32 E701                       	dc.b	smpsNoAttack, $01
00091A34 EC07                       	smpsPSGAlterVol     $07
00091A36 8006                       	dc.b	nRst, $06
00091A38 E105                       	smpsAlterNote       $05
00091A3A 0101                       	dc.b	$01, $01
00091A3C E102                       	smpsAlterNote       $02
00091A3E 01                         	dc.b	$01
00091A3F E1FC                       	smpsAlterNote       $FC
00091A41 01                         	dc.b	$01
00091A42 E1FF                       	smpsAlterNote       $FF
00091A44 ECF5                       	smpsPSGAlterVol     $F5
00091A46 9B06                       	dc.b	nD2, $06
00091A48 EC04                       	smpsPSGAlterVol     $04
00091A4A E701                       	dc.b	smpsNoAttack, $01
00091A4C EC07                       	smpsPSGAlterVol     $07
00091A4E 8003                       	dc.b	nRst, $03
00091A50 ECF5                       	smpsPSGAlterVol     $F5
00091A52 9B06                       	dc.b	nD2, $06
00091A54 EC04                       	smpsPSGAlterVol     $04
00091A56 E701                       	dc.b	smpsNoAttack, $01
00091A58 EC07                       	smpsPSGAlterVol     $07
00091A5A 8006                       	dc.b	nRst, $06
00091A5C E102                       	smpsAlterNote       $02
00091A5E 01                         	dc.b	$01
00091A5F E106                       	smpsAlterNote       $06
00091A61 01                         	dc.b	$01
00091A62 E102                       	smpsAlterNote       $02
00091A64 01                         	dc.b	$01
00091A65 E1FF                       	smpsAlterNote       $FF
00091A67 01                         	dc.b	$01
00091A68 ECF5                       	smpsPSGAlterVol     $F5
00091A6A 9B06                       	dc.b	nD2, $06
00091A6C EC04                       	smpsPSGAlterVol     $04
00091A6E E701                       	dc.b	smpsNoAttack, $01
00091A70 EC07                       	smpsPSGAlterVol     $07
00091A72 8003                       	dc.b	nRst, $03
00091A74 ECF5                       	smpsPSGAlterVol     $F5
00091A76 9B07                       	dc.b	nD2, $07
00091A78 EC0B                       	smpsPSGAlterVol     $0B
00091A7A 8007                       	dc.b	nRst, $07
00091A7C E107                       	smpsAlterNote       $07
00091A7E 0101                       	dc.b	$01, $01
00091A80 E1FE                       	smpsAlterNote       $FE
00091A82 01                         	dc.b	$01
00091A83 E1FA                       	smpsAlterNote       $FA
00091A85 0101                       	dc.b	$01, $01
00091A87 E103                       	smpsAlterNote       $03
00091A89 01                         	dc.b	$01
00091A8A E109                       	smpsAlterNote       $09
00091A8C 01                         	dc.b	$01
00091A8D E107                       	smpsAlterNote       $07
00091A8F 01                         	dc.b	$01
00091A90 E1FE                       	smpsAlterNote       $FE
00091A92 01                         	dc.b	$01
00091A93 E108                       	smpsAlterNote       $08
00091A95 01                         	dc.b	$01
00091A96 E1FD                       	smpsAlterNote       $FD
00091A98 ECF5                       	smpsPSGAlterVol     $F5
00091A9A 940E                       	dc.b	nG1, $0E
00091A9C E103                       	smpsAlterNote       $03
00091A9E EC0B                       	smpsPSGAlterVol     $0B
00091AA0 8001 01                    	dc.b	nRst, $01, $01
00091AA3 E1FD                       	smpsAlterNote       $FD
00091AA5 01                         	dc.b	$01
00091AA6 E1FB                       	smpsAlterNote       $FB
00091AA8 0101                       	dc.b	$01, $01
00091AAA E100                       	smpsAlterNote       $00
00091AAC 01                         	dc.b	$01
00091AAD E103                       	smpsAlterNote       $03
00091AAF 01                         	dc.b	$01
00091AB0 E100                       	smpsAlterNote       $00
00091AB2 01                         	dc.b	$01
00091AB3 E1FD                       	smpsAlterNote       $FD
00091AB5 01                         	dc.b	$01
00091AB6 E1FA                       	smpsAlterNote       $FA
00091AB8 01                         	dc.b	$01
00091AB9 E1FD                       	smpsAlterNote       $FD
00091ABB 01                         	dc.b	$01
00091ABC E103                       	smpsAlterNote       $03
00091ABE 0101                       	dc.b	$01, $01
00091AC0 E100                       	smpsAlterNote       $00
00091AC2 01                         	dc.b	$01
00091AC3 E1FE                       	smpsAlterNote       $FE
00091AC5 ECF5                       	smpsPSGAlterVol     $F5
00091AC7 960D                       	dc.b	nA1, $0D
00091AC9 E104                       	smpsAlterNote       $04
00091ACB EC0B                       	smpsPSGAlterVol     $0B
00091ACD 8001 01                    	dc.b	nRst, $01, $01
00091AD0 E101                       	smpsAlterNote       $01
00091AD2 01                         	dc.b	$01
00091AD3 E1FB                       	smpsAlterNote       $FB
00091AD5 0101                       	dc.b	$01, $01
00091AD7 E1FE                       	smpsAlterNote       $FE
00091AD9 01                         	dc.b	$01
00091ADA E104                       	smpsAlterNote       $04
00091ADC 0101                       	dc.b	$01, $01
00091ADE E1FE                       	smpsAlterNote       $FE
00091AE0 01                         	dc.b	$01
00091AE1 E1FB                       	smpsAlterNote       $FB
00091AE3 0101                       	dc.b	$01, $01
00091AE5 E101                       	smpsAlterNote       $01
00091AE7 01                         	dc.b	$01
00091AE8 E104                       	smpsAlterNote       $04
00091AEA 0101                       	dc.b	$01, $01
00091AEC E1FE                       	smpsAlterNote       $FE
00091AEE ECF5                       	smpsPSGAlterVol     $F5
00091AF0 970D                       	dc.b	nBb1, $0D
00091AF2 E101                       	smpsAlterNote       $01
00091AF4 EC04                       	smpsPSGAlterVol     $04
00091AF6 E701                       	dc.b	smpsNoAttack, $01
00091AF8 EC07                       	smpsPSGAlterVol     $07
00091AFA E104                       	smpsAlterNote       $04
00091AFC 8001                       	dc.b	nRst, $01
00091AFE E103                       	smpsAlterNote       $03
00091B00 01                         	dc.b	$01
00091B01 E1FE                       	smpsAlterNote       $FE
00091B03 01                         	dc.b	$01
00091B04 E1FA                       	smpsAlterNote       $FA
00091B06 01                         	dc.b	$01
00091B07 E1FE                       	smpsAlterNote       $FE
00091B09 01                         	dc.b	$01
00091B0A E101                       	smpsAlterNote       $01
00091B0C 01                         	dc.b	$01
00091B0D E104                       	smpsAlterNote       $04
00091B0F 01                         	dc.b	$01
00091B10 E101                       	smpsAlterNote       $01
00091B12 01                         	dc.b	$01
00091B13 E1FB                       	smpsAlterNote       $FB
00091B15 01                         	dc.b	$01
00091B16 E1FA                       	smpsAlterNote       $FA
00091B18 01                         	dc.b	$01
00091B19 E1FE                       	smpsAlterNote       $FE
00091B1B 01                         	dc.b	$01
00091B1C E103                       	smpsAlterNote       $03
00091B1E 0101                       	dc.b	$01, $01
00091B20 E101                       	smpsAlterNote       $01
00091B22 01                         	dc.b	$01
00091B23 E1FE                       	smpsAlterNote       $FE
00091B25 ECF5                       	smpsPSGAlterVol     $F5
00091B27 990D                       	dc.b	nC2, $0D
00091B29 E104                       	smpsAlterNote       $04
00091B2B EC0B                       	smpsPSGAlterVol     $0B
00091B2D 8001 01                    	dc.b	nRst, $01, $01
00091B30 E102                       	smpsAlterNote       $02
00091B32 01                         	dc.b	$01
00091B33 E1FC                       	smpsAlterNote       $FC
00091B35 0101                       	dc.b	$01, $01
00091B37 E102                       	smpsAlterNote       $02
00091B39 01                         	dc.b	$01
00091B3A E104                       	smpsAlterNote       $04
00091B3C 01                         	dc.b	$01
00091B3D E1FF                       	smpsAlterNote       $FF
00091B3F ECF5                       	smpsPSGAlterVol     $F5
00091B41 9B06                       	dc.b	nD2, $06
00091B43 EC04                       	smpsPSGAlterVol     $04
00091B45 E701                       	dc.b	smpsNoAttack, $01
00091B47 EC07                       	smpsPSGAlterVol     $07
00091B49 8003                       	dc.b	nRst, $03
00091B4B ECF5                       	smpsPSGAlterVol     $F5
00091B4D 9B07                       	dc.b	nD2, $07
00091B4F EC0B                       	smpsPSGAlterVol     $0B
00091B51 8006                       	dc.b	nRst, $06
00091B53 E101                       	smpsAlterNote       $01
00091B55 01                         	dc.b	$01
00091B56 E104                       	smpsAlterNote       $04
00091B58 0101                       	dc.b	$01, $01
00091B5A E1FE                       	smpsAlterNote       $FE
00091B5C 01                         	dc.b	$01
00091B5D E1FC                       	smpsAlterNote       $FC
00091B5F 01                         	dc.b	$01
00091B60 E1FE                       	smpsAlterNote       $FE
00091B62 ECF5                       	smpsPSGAlterVol     $F5
00091B64 9C06                       	dc.b	nEb2, $06
00091B66 EC0B                       	smpsPSGAlterVol     $0B
00091B68 8004                       	dc.b	nRst, $04
00091B6A ECF5                       	smpsPSGAlterVol     $F5
00091B6C 9C06                       	dc.b	nEb2, $06
00091B6E EC04                       	smpsPSGAlterVol     $04
00091B70 E701                       	dc.b	smpsNoAttack, $01
00091B72 EC07                       	smpsPSGAlterVol     $07
00091B74 8006                       	dc.b	nRst, $06
00091B76 E105                       	smpsAlterNote       $05
00091B78 01                         	dc.b	$01
00091B79 E106                       	smpsAlterNote       $06
00091B7B 01                         	dc.b	$01
00091B7C E102                       	smpsAlterNote       $02
00091B7E 01                         	dc.b	$01
00091B7F E1FB                       	smpsAlterNote       $FB
00091B81 01                         	dc.b	$01
00091B82 E1FF                       	smpsAlterNote       $FF
00091B84 ECF5                       	smpsPSGAlterVol     $F5
00091B86 9B06                       	dc.b	nD2, $06
00091B88 EC04                       	smpsPSGAlterVol     $04
00091B8A E701                       	dc.b	smpsNoAttack, $01
00091B8C EC07                       	smpsPSGAlterVol     $07
00091B8E 8003                       	dc.b	nRst, $03
00091B90 ECF5                       	smpsPSGAlterVol     $F5
00091B92 9B06                       	dc.b	nD2, $06
00091B94 EC04                       	smpsPSGAlterVol     $04
00091B96 E701                       	dc.b	smpsNoAttack, $01
00091B98 EC07                       	smpsPSGAlterVol     $07
00091B9A 8006                       	dc.b	nRst, $06
00091B9C E101                       	smpsAlterNote       $01
00091B9E 01                         	dc.b	$01
00091B9F E105                       	smpsAlterNote       $05
00091BA1 01                         	dc.b	$01
00091BA2 E104                       	smpsAlterNote       $04
00091BA4 01                         	dc.b	$01
00091BA5 E1FE                       	smpsAlterNote       $FE
00091BA7 01                         	dc.b	$01
00091BA8 ECF5                       	smpsPSGAlterVol     $F5
00091BAA 9C07                       	dc.b	nEb2, $07
00091BAC EC0B                       	smpsPSGAlterVol     $0B
00091BAE 8004                       	dc.b	nRst, $04
00091BB0 ECF5                       	smpsPSGAlterVol     $F5
00091BB2 9C06                       	dc.b	nEb2, $06
00091BB4 EC0B                       	smpsPSGAlterVol     $0B
00091BB6 8007                       	dc.b	nRst, $07
00091BB8 E105                       	smpsAlterNote       $05
00091BBA 0101                       	dc.b	$01, $01
00091BBC E102                       	smpsAlterNote       $02
00091BBE 01                         	dc.b	$01
00091BBF E1FB                       	smpsAlterNote       $FB
00091BC1 01                         	dc.b	$01
00091BC2 E1FF                       	smpsAlterNote       $FF
00091BC4 ECF5                       	smpsPSGAlterVol     $F5
00091BC6 9B06                       	dc.b	nD2, $06
00091BC8 EC04                       	smpsPSGAlterVol     $04
00091BCA E701                       	dc.b	smpsNoAttack, $01
00091BCC EC07                       	smpsPSGAlterVol     $07
00091BCE 8003                       	dc.b	nRst, $03
00091BD0 ECF5                       	smpsPSGAlterVol     $F5
00091BD2 9B06                       	dc.b	nD2, $06
00091BD4 EC04                       	smpsPSGAlterVol     $04
00091BD6 E701                       	dc.b	smpsNoAttack, $01
00091BD8 EC07                       	smpsPSGAlterVol     $07
00091BDA 8006                       	dc.b	nRst, $06
00091BDC E101                       	smpsAlterNote       $01
00091BDE 01                         	dc.b	$01
00091BDF E105                       	smpsAlterNote       $05
00091BE1 01                         	dc.b	$01
00091BE2 E101                       	smpsAlterNote       $01
00091BE4 01                         	dc.b	$01
00091BE5 E1FC                       	smpsAlterNote       $FC
00091BE7 01                         	dc.b	$01
00091BE8 E1FE                       	smpsAlterNote       $FE
00091BEA ECF5                       	smpsPSGAlterVol     $F5
00091BEC 9C06                       	dc.b	nEb2, $06
00091BEE EC04                       	smpsPSGAlterVol     $04
00091BF0 E701                       	dc.b	smpsNoAttack, $01
00091BF2 EC07                       	smpsPSGAlterVol     $07
00091BF4 8003                       	dc.b	nRst, $03
00091BF6 ECF5                       	smpsPSGAlterVol     $F5
00091BF8 9C07                       	dc.b	nEb2, $07
00091BFA EC0B                       	smpsPSGAlterVol     $0B
00091BFC 8006                       	dc.b	nRst, $06
00091BFE E102                       	smpsAlterNote       $02
00091C00 01                         	dc.b	$01
00091C01 E105                       	smpsAlterNote       $05
00091C03 0101                       	dc.b	$01, $01
00091C05 E1FF                       	smpsAlterNote       $FF
00091C07 01                         	dc.b	$01
00091C08 ECF5                       	smpsPSGAlterVol     $F5
00091C0A 9B07                       	dc.b	nD2, $07
00091C0C EC0B                       	smpsPSGAlterVol     $0B
00091C0E 8004                       	dc.b	nRst, $04
00091C10 ECF5                       	smpsPSGAlterVol     $F5
00091C12 9B06                       	dc.b	nD2, $06
00091C14 EC04                       	smpsPSGAlterVol     $04
00091C16 E701                       	dc.b	smpsNoAttack, $01
00091C18 EC07                       	smpsPSGAlterVol     $07
00091C1A 8002                       	dc.b	nRst, $02
00091C1C E1FC                       	smpsAlterNote       $FC
00091C1E ECF5                       	smpsPSGAlterVol     $F5
00091C20 9006                       	dc.b	nEb1, $06
00091C22 EC04                       	smpsPSGAlterVol     $04
00091C24 E701                       	dc.b	smpsNoAttack, $01
00091C26 ECFC                       	smpsPSGAlterVol     $FC
00091C28 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00091C2C EC04                       	smpsPSGAlterVol     $04
00091C2E E701                       	dc.b	smpsNoAttack, $01
00091C30 E1FD                       	smpsAlterNote       $FD
00091C32 ECFC                       	smpsPSGAlterVol     $FC
00091C34 9402                       	dc.b	nG1, $02
00091C36 EC04                       	smpsPSGAlterVol     $04
00091C38 E701                       	dc.b	smpsNoAttack, $01
00091C3A E1FE                       	smpsAlterNote       $FE
00091C3C ECFC                       	smpsPSGAlterVol     $FC
00091C3E 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00091C42 EC04                       	smpsPSGAlterVol     $04
00091C44 E701                       	dc.b	smpsNoAttack, $01
00091C46 EC07                       	smpsPSGAlterVol     $07
00091C48 8008                       	dc.b	nRst, $08
00091C4A F6F4 F3                    	smpsJump            music84_Jump06
00091C4D                            
00091C4D                            ; PSG3 Data
00091C4D                            music84_PSG3:
00091C4D F500                       	smpsPSGvoice        $00
00091C4F E1FF                       	smpsAlterNote       $FF
00091C51 EC0F                       	smpsPSGAlterVol     $0F
00091C53 803A                       	dc.b	nRst, $3A
00091C55                            
00091C55                            music84_Jump05:
00091C55 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00091C61 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00091C6B F6FF E8                    	smpsJump            music84_Jump05
00091C6E                            
00091C6E                            ; DAC Data
00091C6E                            music84_DAC:
00091C6E E0C0                       	smpsPan             panCenter, $00
00091C70 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00091C7C 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00091C88 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00091C94 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00091CA0 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00091CAC 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00091CB8 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00091CC4 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00091CD0 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00091CDC 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00091CE8 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00091CF4 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
00091D00 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00091D0C 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00091D18 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
00091D24 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
00091D30 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
00091D3C 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00091D48 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
00091D54 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00091D60 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00091D6C 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00091D78 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00091D84 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00091D90 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00091D9C 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00091DA8 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00091DB4 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00091DC0 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00091DCC 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00091DD8 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00091DE4 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00091DF0 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
00091DFC 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
00091E08 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
00091E14 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00091E20 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
00091E2C 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
00091E38 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00091E44 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
00091E50 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
00091E5C 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00091E68 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00091E74 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00091E80 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00091E8C 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00091E98 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00091EA4 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00091EB0 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
00091EBC 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00091EC8 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00091ED4 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
00091EE0 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
00091EEC 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00091EF8 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00091F04 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
00091F10 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
00091F1C 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00091F28 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00091F34 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00091F40 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
00091F4C 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00091F58 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
00091F64 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
00091F70 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
00091F7C 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00091F88 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00091F94 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00091FA0 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
00091FAC 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00091FB8 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00091FC4 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00091FD0 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
00091FDC 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00091FE8 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
00091FF4 E0C0                       	smpsPan             panCenter, $00
00091FF6 F2                         	smpsStop
00091FF7                            
00091FF7                            music84_Voices:
00091FF7                            ;	Voice $00
00091FF7                            ;	$3D
00091FF7                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00091FF7                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00091FF7                            	smpsVcAlgorithm     $05
00091FF7                            	smpsVcFeedback      $07
00091FF7                            	smpsVcUnusedBits    $00
00091FF7                            	smpsVcDetune        $05, $04, $03, $04
00091FF7                            	smpsVcCoarseFreq    $01, $01, $01, $01
00091FF7                            	smpsVcRateScale     $00, $00, $00, $00
00091FF7                            	smpsVcAttackRate    $11, $11, $11, $11
00091FF7                            	smpsVcAmpMod        $00, $00, $00, $00
00091FF7                            	smpsVcDecayRate1    $00, $00, $00, $0A
00091FF7                            	smpsVcDecayRate2    $00, $00, $00, $0B
00091FF7                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00091FF7                            	smpsVcReleaseRate   $08, $08, $08, $07
00091FF7 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
00092010                            
00092010                            ;	Voice $01
00092010                            ;	$04
00092010                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
00092010                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
00092010                            	smpsVcAlgorithm     $04
00092010                            	smpsVcFeedback      $00
00092010                            	smpsVcUnusedBits    $00
00092010                            	smpsVcDetune        $04, $03, $04, $05
00092010                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
00092010                            	smpsVcRateScale     $00, $01, $00, $01
00092010                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00092010                            	smpsVcAmpMod        $00, $00, $00, $00
00092010                            	smpsVcDecayRate1    $0E, $00, $0E, $00
00092010                            	smpsVcDecayRate2    $05, $00, $05, $00
00092010                            	smpsVcDecayLevel    $08, $0E, $08, $0E
00092010                            	smpsVcReleaseRate   $06, $06, $06, $06
00092010 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
00092029                            
00092029                            ;	Voice $02
00092029                            ;	$30
00092029                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
00092029                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
00092029                            	smpsVcAlgorithm     $00
00092029                            	smpsVcFeedback      $06
00092029                            	smpsVcUnusedBits    $00
00092029                            	smpsVcDetune        $04, $02, $00, $06
00092029                            	smpsVcCoarseFreq    $01, $01, $03, $0C
00092029                            	smpsVcRateScale     $00, $00, $00, $00
00092029                            	smpsVcAttackRate    $1F, $1F, $1F, $14
00092029                            	smpsVcAmpMod        $00, $00, $00, $00
00092029                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
00092029                            	smpsVcDecayRate2    $01, $01, $01, $01
00092029                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
00092029                            	smpsVcReleaseRate   $09, $0B, $08, $0F
00092029 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
00092042                            
00092042                            ;	Voice $03
00092042                            ;	$3A
00092042                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
00092042                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
00092042                            	smpsVcAlgorithm     $02
00092042                            	smpsVcFeedback      $07
00092042                            	smpsVcUnusedBits    $00
00092042                            	smpsVcDetune        $04, $06, $02, $00
00092042                            	smpsVcCoarseFreq    $01, $01, $01, $01
00092042                            	smpsVcRateScale     $00, $00, $00, $00
00092042                            	smpsVcAttackRate    $18, $19, $14, $14
00092042                            	smpsVcAmpMod        $00, $00, $00, $00
00092042                            	smpsVcDecayRate1    $09, $0D, $09, $09
00092042                            	smpsVcDecayRate2    $00, $00, $00, $00
00092042                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
00092042                            	smpsVcReleaseRate   $08, $0F, $0F, $07
00092042 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0009205B                            
0009205B                            ;	Voice $04
0009205B                            ;	$3C
0009205B                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0009205B                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0009205B                            	smpsVcAlgorithm     $04
0009205B                            	smpsVcFeedback      $07
0009205B                            	smpsVcUnusedBits    $00
0009205B                            	smpsVcDetune        $07, $00, $00, $03
0009205B                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0009205B                            	smpsVcRateScale     $00, $00, $00, $00
0009205B                            	smpsVcAttackRate    $10, $1F, $10, $1F
0009205B                            	smpsVcAmpMod        $00, $00, $00, $00
0009205B                            	smpsVcDecayRate1    $00, $00, $00, $00
0009205B                            	smpsVcDecayRate2    $00, $00, $00, $00
0009205B                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009205B                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0009205B 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
00092074                            
00092074                            ;	Voice $05
00092074                            ;	$38
00092074                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
00092074                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
00092074                            	smpsVcAlgorithm     $00
00092074                            	smpsVcFeedback      $07
00092074                            	smpsVcUnusedBits    $00
00092074                            	smpsVcDetune        $04, $06, $02, $00
00092074                            	smpsVcCoarseFreq    $01, $01, $01, $00
00092074                            	smpsVcRateScale     $00, $00, $00, $00
00092074                            	smpsVcAttackRate    $1F, $1F, $1F, $10
00092074                            	smpsVcAmpMod        $00, $00, $00, $00
00092074                            	smpsVcDecayRate1    $00, $03, $00, $17
00092074                            	smpsVcDecayRate2    $00, $08, $08, $0B
00092074                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
00092074                            	smpsVcReleaseRate   $08, $05, $05, $05
00092074 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0009208D                            
0009208D                            
0009208E 00                         		even
0009208E                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0009629E                            		even
0009629E                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
00099DF6 00                         		even
00099DF6                            Music87:	include	sound\music87.asm; Invincibility
00099DF6                            triple_Header:
00099DF6 =00000001                  smpsHeaderStartSong = 1
00099DF6 0000                       	smpsHeaderVoice     triple_Voices
00099DF8 0501                       	smpsHeaderChan      $05, $01
00099DFA 0200                       	smpsHeaderTempo     $02, $00
00099DFC                            
00099E00 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00099E04 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00099E08 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
00099E0C 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
00099E10 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00099E16                            
00099E16                            ; DAC Data
00099E16                            triple_DAC:
00099E16 E0C0                       	smpsPan             panCenter, $00
00099E18 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
00099E1E                            
00099E1E                            triple_Loop01:
00099E1E 8282 82                    	dc.b	dSnare, dSnare, dSnare
00099E21                            
00099E21                            triple_Loop00:
00099E21 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00099E2D 06                         	dc.b	$06
00099E2E F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00099E33 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00099E3F 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00099E46 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00099E4B 0303 1B                    	dc.b	$03, $03, $1B
00099E4E E0C0                       	smpsPan             panCenter, $00
00099E50 F6FF C4                    	smpsJump triple_DAC
00099E53                            
00099E53                            ; FM1 Data
00099E53                            triple_FM1:
00099E53 E0C0                       	smpsPan             panCenter, $00
00099E57 8018                       	dc.b	nRst, $18
00099E59                            
00099E59                            triple_Loop0B:
00099E59 AC06 B8                    	dc.b	nG3, $06, nG4
00099E5C F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
00099E61                            
00099E61                            triple_Loop0C:
00099E61 A7B3                       	dc.b	nD3, nD4
00099E63 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00099E68                            
00099E68                            triple_Loop0D:
00099E68 A9B5                       	dc.b	nE3, nE4
00099E6A F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00099E6F A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00099E77 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00099E7C A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00099E88 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00099E94 AD                         	dc.b	nAb3
00099E95 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00099E9A 8018                       	dc.b	nRst, $18
00099E9C E0C0                       	smpsPan             panCenter, $00
00099EA0 F6FF B1                    	smpsJump triple_FM1
00099EA3                            
00099EA3                            ; FM2 Data
00099EA3                            triple_FM2:
00099EA3 E0C0                       	smpsPan             panCenter, $00
00099EA7 8018                       	dc.b	nRst, $18
00099EA9                            
00099EA9                            triple_Loop07:
00099EA9 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099EB5 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099EC1 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
00099EC6 8003                       	dc.b	nRst, $03
00099EC8                            
00099EC8                            triple_Loop08:
00099EC8 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099ECE F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
00099ED3 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00099ED9                            
00099ED9                            triple_Loop09:
00099ED9 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099EE5 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099EF1 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
00099EF6 8003                       	dc.b	nRst, $03
00099EF8                            
00099EF8                            triple_Loop0A:
00099EF8 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099EFE F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
00099F03 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00099F09 E0C0                       	smpsPan             panCenter, $00
00099F0D F6FF 94                    	smpsJump triple_FM2
00099F10                            
00099F10                            ; FM3 Data
00099F10                            triple_FM3:
00099F10 E0C0                       	smpsPan             panCenter, $00
00099F14 8018                       	dc.b	nRst, $18
00099F16                            
00099F16                            triple_Loop06:
00099F16 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
00099F1D F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
00099F22 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00099F2E BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00099F3A C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00099F3D F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
00099F42 8018                       	dc.b	nRst, $18
00099F44 E0C0                       	smpsPan             panCenter, $00
00099F48 F6FF C6                    	smpsJump triple_FM3
00099F4B                            
00099F4B                            ; FM4 Data
00099F4B                            triple_FM4:
00099F4B E103                       	smpsAlterNote       $03
00099F4F E0C0                       	smpsPan             panCenter, $00
00099F51 8018                       	dc.b	nRst, $18
00099F53                            
00099F53                            triple_Loop02:
00099F53 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099F5F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099F6B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
00099F70 8003                       	dc.b	nRst, $03
00099F72                            
00099F72                            triple_Loop03:
00099F72 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099F78 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00099F7D B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00099F83                            
00099F83                            triple_Loop04:
00099F83 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099F8F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099F9B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
00099FA0 8003                       	dc.b	nRst, $03
00099FA2                            
00099FA2                            triple_Loop05:
00099FA2 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099FA8 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
00099FAD B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00099FB3 E0C0                       	smpsPan             panCenter, $00
00099FB5 F6FF 94                    	smpsJump triple_FM4
00099FB8                            
00099FB8                            ; PSG1 Data
00099FB8                            triple_PSG1:
00099FB8 8018                       	dc.b	nRst, $18
00099FBA                            
00099FBA                            triple_Loop0E:
00099FBA A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00099FC6 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00099FD2 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00099FDE 9402 8004                  	dc.b	nG1, $02, nRst, $04
00099FE2 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
00099FE7 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00099FF3 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00099FFF 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009A00B 9402 8007                  	dc.b	nG1, $02, nRst, $07
0009A00F                            
0009A00F                            triple_Loop0F:
0009A00F 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0009A015 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
0009A01A 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
0009A020                            
0009A020                            triple_Loop10:
0009A020 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009A02C 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009A038 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009A044 9402 8004                  	dc.b	nG1, $02, nRst, $04
0009A048 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
0009A04D A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009A059 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009A065 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009A071 9402 8007                  	dc.b	nG1, $02, nRst, $07
0009A075                            
0009A075                            triple_Loop11:
0009A075 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0009A07B F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
0009A080 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
0009A086 F500                       	smpsPSGvoice        $00
0009A088 F6FF 2E                    	smpsJump triple_PSG1
0009A08B                            
0009A08B                            triple_Voices:
0009A08B                            ;	Voice $00
0009A08B                            ;	$3A
0009A08B                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
0009A08B                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
0009A08B                            	smpsVcAlgorithm     $02
0009A08B                            	smpsVcFeedback      $07
0009A08B                            	smpsVcUnusedBits    $00
0009A08B                            	smpsVcDetune        $00, $00, $00, $00
0009A08B                            	smpsVcCoarseFreq    $01, $01, $07, $01
0009A08B                            	smpsVcRateScale     $01, $02, $02, $02
0009A08B                            	smpsVcAttackRate    $13, $0D, $0E, $0E
0009A08B                            	smpsVcAmpMod        $00, $00, $00, $00
0009A08B                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
0009A08B                            	smpsVcDecayRate2    $00, $00, $00, $00
0009A08B                            	smpsVcDecayLevel    $00, $01, $0F, $01
0009A08B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009A08B 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
0009A0A4                            
0009A0A4                            ;	Voice $01
0009A0A4                            ;	$20
0009A0A4                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
0009A0A4                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
0009A0A4                            	smpsVcAlgorithm     $00
0009A0A4                            	smpsVcFeedback      $04
0009A0A4                            	smpsVcUnusedBits    $00
0009A0A4                            	smpsVcDetune        $00, $00, $03, $07
0009A0A4                            	smpsVcCoarseFreq    $00, $00, $01, $0A
0009A0A4                            	smpsVcRateScale     $03, $03, $03, $02
0009A0A4                            	smpsVcAttackRate    $1F, $1C, $18, $1F
0009A0A4                            	smpsVcAmpMod        $00, $00, $00, $00
0009A0A4                            	smpsVcDecayRate1    $04, $04, $0A, $10
0009A0A4                            	smpsVcDecayRate2    $08, $08, $08, $0F
0009A0A4                            	smpsVcDecayLevel    $0B, $0B, $05, $05
0009A0A4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009A0A4 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0009A0A4 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0009A0BE 00                         		even
0009A0BE                            Music88:	incbin	sound\music88.bin; Extra Life
0009A1AC                            		even
0009A1AC                            Music89:	incbin	sound\music89.bin; Special Stage
0009E074 00                         		even
0009E074                            Music8A:	incbin	sound\music8A.bin; Title Screen
0009E23E                            		even
0009E23E                            Music8B:	incbin	sound\music8B.bin; Ending Theme
0009E4D8                            		even
0009E4D8                            Music8C:	incbin	sound\music8C.bin; VS Boss
0009E776                            		even
0009E776                            Music8D:	incbin	sound\music8D.bin; Final Zone
0009E992                            		even
0009E992                            Music8E:	incbin	sound\fle.bin ;		Act Clear
0009EE00 00                         		even
0009EE00                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009F440 00                         		even
0009F440                            Music90:	incbin	sound\music90.bin ; Continue
0009F7DA 00                         		even
0009F7DA                            Music91:	incbin	sound\music91.bin ; Credits
000A0AA8                            		even
000A0AA8                            Music92:	incbin	sound\music92.bin ; Drowning
000A0DEA 00                         		even
000A0DEA                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A0EBA                            		even
000A0EBA                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A1B90 00                         		even
000A1B90                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A1CE0 00                         		even
000A1CE0                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A1D1A 00                         		even
000A1D1A                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A1D54 00                         		even
000A1D54                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A1D8E 00                         		even
000A1D8E                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A1DC8 00                         		even
000A1DC8                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A1E02 00                         		even
000A1E02                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A1E3C 00                         		even
000A1E3C                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A1E76 00                         		even
000A1E76                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A1EB0 00                         		even
000A1EB0                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A23A0                            		even
000A23A0                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A23A0                            GentleBreeze_Header:
000A23A0 =00000001                  smpsHeaderStartSong = 1
000A23A0 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A23A2 0603                       	smpsHeaderChan      $06, $03
000A23A4 0100                       	smpsHeaderTempo     $01, $00
000A23A6                            
000A23AA 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A23AE 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A23B2 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A23B6 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A23BA 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A23BE 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A23C4 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A23CA 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A23D0                            
000A23D0                            ; PSG3 Data
000A23D0                            GentleBreeze_PSG3:
000A23D0 F2                         	smpsStop
000A23D1                            
000A23D1                            ; FM1 Data
000A23D1                            GentleBreeze_FM1:
000A23D3 E0C0                       	smpsPan             panCenter, $00
000A23D5 E1FF                       	smpsAlterNote       $FF
000A23D7 C410                       	dc.b	nG5, $10
000A23D9 E60F                       	smpsAlterVol        $0F
000A23DB C4                         	dc.b	nG5
000A23DC E6F1                       	smpsAlterVol        $F1
000A23DE E100                       	smpsAlterNote       $00
000A23E0 C2                         	dc.b	nF5
000A23E1 E60F                       	smpsAlterVol        $0F
000A23E3 08                         	dc.b	$08
000A23E4 E6F1                       	smpsAlterVol        $F1
000A23E6 C010                       	dc.b	nEb5, $10
000A23E8 E60F                       	smpsAlterVol        $0F
000A23EA C0                         	dc.b	nEb5
000A23EB E6F1                       	smpsAlterVol        $F1
000A23ED BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A23F3 E60F                       	smpsAlterVol        $0F
000A23F5 C9                         	dc.b	nC6
000A23F6 E6F1                       	smpsAlterVol        $F1
000A23F8 C5                         	dc.b	nAb5
000A23F9 E60F                       	smpsAlterVol        $0F
000A23FB 08                         	dc.b	$08
000A23FC E6F1                       	smpsAlterVol        $F1
000A23FE C010                       	dc.b	nEb5, $10
000A2400 E60F                       	smpsAlterVol        $0F
000A2402 C0                         	dc.b	nEb5
000A2403 E6F1                       	smpsAlterVol        $F1
000A2405 C208                       	dc.b	nF5, $08
000A2407 E1FF                       	smpsAlterNote       $FF
000A2409 C410                       	dc.b	nG5, $10
000A240B E100                       	smpsAlterNote       $00
000A240D C5C7                       	dc.b	nAb5, nBb5
000A240F E60F                       	smpsAlterVol        $0F
000A2411 C7                         	dc.b	nBb5
000A2412 E6F1                       	smpsAlterVol        $F1
000A2414 C5                         	dc.b	nAb5
000A2415 E60F                       	smpsAlterVol        $0F
000A2417 08                         	dc.b	$08
000A2418 E6F1                       	smpsAlterVol        $F1
000A241A E1FF                       	smpsAlterNote       $FF
000A241C C410                       	dc.b	nG5, $10
000A241E E60F                       	smpsAlterVol        $0F
000A2420 C4                         	dc.b	nG5
000A2421 E6F1                       	smpsAlterVol        $F1
000A2423 C4                         	dc.b	nG5
000A2424 E100                       	smpsAlterNote       $00
000A2426 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A242B E60F                       	smpsAlterVol        $0F
000A242D C2                         	dc.b	nF5
000A242E E6F1                       	smpsAlterVol        $F1
000A2430 E1FF                       	smpsAlterNote       $FF
000A2432 C4                         	dc.b	nG5
000A2433 E60F                       	smpsAlterVol        $0F
000A2435 08                         	dc.b	$08
000A2436 E6F1                       	smpsAlterVol        $F1
000A2438 10                         	dc.b	$10
000A2439 E60F                       	smpsAlterVol        $0F
000A243B 38                         	dc.b	$38
000A243C E6F1                       	smpsAlterVol        $F1
000A243E 10                         	dc.b	$10
000A243F E60F                       	smpsAlterVol        $0F
000A2441 C4                         	dc.b	nG5
000A2442 E6F1                       	smpsAlterVol        $F1
000A2444 E100                       	smpsAlterNote       $00
000A2446 C2                         	dc.b	nF5
000A2447 E60F                       	smpsAlterVol        $0F
000A2449 08                         	dc.b	$08
000A244A E6F1                       	smpsAlterVol        $F1
000A244C C010                       	dc.b	nEb5, $10
000A244E E60F                       	smpsAlterVol        $0F
000A2450 C0                         	dc.b	nEb5
000A2451 E6F1                       	smpsAlterVol        $F1
000A2453 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A2459 E60F                       	smpsAlterVol        $0F
000A245B C9                         	dc.b	nC6
000A245C E6F1                       	smpsAlterVol        $F1
000A245E C5                         	dc.b	nAb5
000A245F E60F                       	smpsAlterVol        $0F
000A2461 08                         	dc.b	$08
000A2462 E6F1                       	smpsAlterVol        $F1
000A2464 C010                       	dc.b	nEb5, $10
000A2466 E60F                       	smpsAlterVol        $0F
000A2468 C0                         	dc.b	nEb5
000A2469 E6F1                       	smpsAlterVol        $F1
000A246B C208                       	dc.b	nF5, $08
000A246D E1FF                       	smpsAlterNote       $FF
000A246F C410                       	dc.b	nG5, $10
000A2471 E100                       	smpsAlterNote       $00
000A2473 C5C7                       	dc.b	nAb5, nBb5
000A2475 E60F                       	smpsAlterVol        $0F
000A2477 C7                         	dc.b	nBb5
000A2478 E6F1                       	smpsAlterVol        $F1
000A247A C5                         	dc.b	nAb5
000A247B E60F                       	smpsAlterVol        $0F
000A247D 08                         	dc.b	$08
000A247E E6F1                       	smpsAlterVol        $F1
000A2480 E1FF                       	smpsAlterNote       $FF
000A2482 C410                       	dc.b	nG5, $10
000A2484 E60F                       	smpsAlterVol        $0F
000A2486 C4                         	dc.b	nG5
000A2487 E6F1                       	smpsAlterVol        $F1
000A2489 C4                         	dc.b	nG5
000A248A E100                       	smpsAlterNote       $00
000A248C C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A2491 E60F                       	smpsAlterVol        $0F
000A2493 28                         	dc.b	$28
000A2494 E6F1                       	smpsAlterVol        $F1
000A2496 C008 10                    	dc.b	nEb5, $08, $10
000A2499 E60F                       	smpsAlterVol        $0F
000A249B 21                         	dc.b	$21
000A249C                            
000A249C                            GentleBreeze_Loop12:
000A249C E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A249F F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A24A4 E717                       	dc.b	smpsNoAttack, $17
000A24A6 E6F1                       	smpsAlterVol        $F1
000A24A8 E1FF                       	smpsAlterNote       $FF
000A24AA C410                       	dc.b	nG5, $10
000A24AC E60F                       	smpsAlterVol        $0F
000A24AE C4                         	dc.b	nG5
000A24AF E6F1                       	smpsAlterVol        $F1
000A24B1 E100                       	smpsAlterNote       $00
000A24B3 C2                         	dc.b	nF5
000A24B4 E60F                       	smpsAlterVol        $0F
000A24B6 08                         	dc.b	$08
000A24B7 E6F1                       	smpsAlterVol        $F1
000A24B9 C010                       	dc.b	nEb5, $10
000A24BB E60F                       	smpsAlterVol        $0F
000A24BD C0                         	dc.b	nEb5
000A24BE E6F1                       	smpsAlterVol        $F1
000A24C0 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A24C6 E60F                       	smpsAlterVol        $0F
000A24C8 C9                         	dc.b	nC6
000A24C9 E6F1                       	smpsAlterVol        $F1
000A24CB C5                         	dc.b	nAb5
000A24CC E60F                       	smpsAlterVol        $0F
000A24CE 08                         	dc.b	$08
000A24CF E6F1                       	smpsAlterVol        $F1
000A24D1 C010                       	dc.b	nEb5, $10
000A24D3 E60F                       	smpsAlterVol        $0F
000A24D5 C0                         	dc.b	nEb5
000A24D6 E6F1                       	smpsAlterVol        $F1
000A24D8 C208                       	dc.b	nF5, $08
000A24DA E1FF                       	smpsAlterNote       $FF
000A24DC C410                       	dc.b	nG5, $10
000A24DE E100                       	smpsAlterNote       $00
000A24E0 C5C7                       	dc.b	nAb5, nBb5
000A24E2 E60F                       	smpsAlterVol        $0F
000A24E4 C7                         	dc.b	nBb5
000A24E5 E6F1                       	smpsAlterVol        $F1
000A24E7 C5                         	dc.b	nAb5
000A24E8 E60F                       	smpsAlterVol        $0F
000A24EA 08                         	dc.b	$08
000A24EB E6F1                       	smpsAlterVol        $F1
000A24ED E1FF                       	smpsAlterNote       $FF
000A24EF C410                       	dc.b	nG5, $10
000A24F1 E60F                       	smpsAlterVol        $0F
000A24F3 C4                         	dc.b	nG5
000A24F4 E6F1                       	smpsAlterVol        $F1
000A24F6 C4                         	dc.b	nG5
000A24F7 E100                       	smpsAlterNote       $00
000A24F9 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A24FE E60F                       	smpsAlterVol        $0F
000A2500 C2                         	dc.b	nF5
000A2501 E6F1                       	smpsAlterVol        $F1
000A2503 E1FF                       	smpsAlterNote       $FF
000A2505 C4                         	dc.b	nG5
000A2506 E60F                       	smpsAlterVol        $0F
000A2508 08                         	dc.b	$08
000A2509 E6F1                       	smpsAlterVol        $F1
000A250B 10                         	dc.b	$10
000A250C E60F                       	smpsAlterVol        $0F
000A250E 38                         	dc.b	$38
000A250F E6F1                       	smpsAlterVol        $F1
000A2511 10                         	dc.b	$10
000A2512 E60F                       	smpsAlterVol        $0F
000A2514 C4                         	dc.b	nG5
000A2515 E6F1                       	smpsAlterVol        $F1
000A2517 E100                       	smpsAlterNote       $00
000A2519 C2                         	dc.b	nF5
000A251A E60F                       	smpsAlterVol        $0F
000A251C 08                         	dc.b	$08
000A251D E6F1                       	smpsAlterVol        $F1
000A251F C010                       	dc.b	nEb5, $10
000A2521 E60F                       	smpsAlterVol        $0F
000A2523 C0                         	dc.b	nEb5
000A2524 E6F1                       	smpsAlterVol        $F1
000A2526 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A252C E60F                       	smpsAlterVol        $0F
000A252E C9                         	dc.b	nC6
000A252F E6F1                       	smpsAlterVol        $F1
000A2531 C5                         	dc.b	nAb5
000A2532 E60F                       	smpsAlterVol        $0F
000A2534 08                         	dc.b	$08
000A2535 E6F1                       	smpsAlterVol        $F1
000A2537 C010                       	dc.b	nEb5, $10
000A2539 E60F                       	smpsAlterVol        $0F
000A253B C0                         	dc.b	nEb5
000A253C E6F1                       	smpsAlterVol        $F1
000A253E C208                       	dc.b	nF5, $08
000A2540 E1FF                       	smpsAlterNote       $FF
000A2542 C410                       	dc.b	nG5, $10
000A2544 E100                       	smpsAlterNote       $00
000A2546 C5C7                       	dc.b	nAb5, nBb5
000A2548 E60F                       	smpsAlterVol        $0F
000A254A C7                         	dc.b	nBb5
000A254B E6F1                       	smpsAlterVol        $F1
000A254D C5                         	dc.b	nAb5
000A254E E60F                       	smpsAlterVol        $0F
000A2550 08                         	dc.b	$08
000A2551 E6F1                       	smpsAlterVol        $F1
000A2553 E1FF                       	smpsAlterNote       $FF
000A2555 C410                       	dc.b	nG5, $10
000A2557 E60F                       	smpsAlterVol        $0F
000A2559 C4                         	dc.b	nG5
000A255A E6F1                       	smpsAlterVol        $F1
000A255C C4                         	dc.b	nG5
000A255D E100                       	smpsAlterNote       $00
000A255F C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A2564 E60F                       	smpsAlterVol        $0F
000A2566 28                         	dc.b	$28
000A2567 E6F1                       	smpsAlterVol        $F1
000A2569 C008 10                    	dc.b	nEb5, $08, $10
000A256C E60F                       	smpsAlterVol        $0F
000A256E 21                         	dc.b	$21
000A256F E0C0                       	smpsPan             panCenter, $00
000A2571 F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A2574                            
000A2574                            ; FM2 Data
000A2574                            GentleBreeze_FM2:
000A2576 E60C                       	smpsAlterVol        $0C
000A2578 E0C0                       	smpsPan             panCenter, $00
000A257A 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A2586 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A2592 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A259E 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A25AA 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A25B6 A039                       	dc.b	nG2, $39
000A25B8                            
000A25B8                            GentleBreeze_Jump04:
000A25B8 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A25BB                            
000A25BB                            GentleBreeze_Loop11:
000A25BB A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A25C7 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A25D3 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A25DF 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A25EB A3                         	dc.b	nBb2
000A25EC F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A25F1 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A25FD A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A2609 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A2615 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A2621 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A262D A039                       	dc.b	nG2, $39
000A262F E0C0                       	smpsPan             panCenter, $00
000A2631 F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A2634                            
000A2634                            ; FM3 Data
000A2634                            GentleBreeze_FM3:
000A2636 E0C0                       	smpsPan             panCenter, $00
000A2638 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A2640 E616                       	smpsAlterVol        $16
000A2642 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A2647                            
000A2647                            GentleBreeze_Loop0F:
000A2647 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A264B E1FF                       	smpsAlterNote       $FF
000A264D C4                         	dc.b	nG5
000A264E E100                       	smpsAlterNote       $00
000A2650 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A2655 E608                       	smpsAlterVol        $08
000A2657 C080 08                    	dc.b	nEb5, nRst, $08
000A265A E6F8                       	smpsAlterVol        $F8
000A265C C7                         	dc.b	nBb5
000A265D E1FF                       	smpsAlterNote       $FF
000A265F C4                         	dc.b	nG5
000A2660 E100                       	smpsAlterNote       $00
000A2662 C0BB                       	dc.b	nEb5, nBb4
000A2664 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A2669 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A266C E1FF                       	smpsAlterNote       $FF
000A266E C4                         	dc.b	nG5
000A266F E100                       	smpsAlterNote       $00
000A2671 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A2676 E608                       	smpsAlterVol        $08
000A2678 C080 08                    	dc.b	nEb5, nRst, $08
000A267B E6F8                       	smpsAlterVol        $F8
000A267D E1FF                       	smpsAlterNote       $FF
000A267F C4                         	dc.b	nG5
000A2680 E100                       	smpsAlterNote       $00
000A2682 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A2689 E1FF                       	smpsAlterNote       $FF
000A268B C4                         	dc.b	nG5
000A268C E100                       	smpsAlterNote       $00
000A268E C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A2693 E1FF                       	smpsAlterNote       $FF
000A2695 C4                         	dc.b	nG5
000A2696 E100                       	smpsAlterNote       $00
000A2698 C7                         	dc.b	nBb5
000A2699 E1FF                       	smpsAlterNote       $FF
000A269B C4                         	dc.b	nG5
000A269C E100                       	smpsAlterNote       $00
000A269E C2C0 01                    	dc.b	nF5, nEb5, $01
000A26A1                            
000A26A1                            GentleBreeze_Jump03:
000A26A1 E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A26A8 E6FA                       	smpsAlterVol        $FA
000A26AA F4                         	smpsModOff
000A26AB E1FF                       	smpsAlterNote       $FF
000A26AD B850                       	dc.b	nG4, $50
000A26AF E100                       	smpsAlterNote       $00
000A26B1 B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A26BD E1FF                       	smpsAlterNote       $FF
000A26BF B810                       	dc.b	nG4, $10
000A26C1 E100                       	smpsAlterNote       $00
000A26C3 BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A26C8 E1FF                       	smpsAlterNote       $FF
000A26CA B8                         	dc.b	nG4
000A26CB E100                       	smpsAlterNote       $00
000A26CD B610                       	dc.b	nF4, $10
000A26CF E1FF                       	smpsAlterNote       $FF
000A26D1 B850                       	dc.b	nG4, $50
000A26D3 E100                       	smpsAlterNote       $00
000A26D5 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A26DD E1FF                       	smpsAlterNote       $FF
000A26DF AC08                       	dc.b	nG3, $08
000A26E1 E100                       	smpsAlterNote       $00
000A26E3 AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A26E8 E1FF                       	smpsAlterNote       $FF
000A26EA B850                       	dc.b	nG4, $50
000A26EC E100                       	smpsAlterNote       $00
000A26EE BB08                       	dc.b	nBb4, $08
000A26F0 E1FF                       	smpsAlterNote       $FF
000A26F2 B8                         	dc.b	nG4
000A26F3 E100                       	smpsAlterNote       $00
000A26F5 BDBB B6                    	dc.b	nC5, nBb4, nF4
000A26F8 E1FF                       	smpsAlterNote       $FF
000A26FA B810 08                    	dc.b	nG4, $10, $08
000A26FD E100                       	smpsAlterNote       $00
000A26FF B6                         	dc.b	nF4
000A2700 E1FF                       	smpsAlterNote       $FF
000A2702 B880                       	dc.b	nG4, nRst
000A2704 E100                       	smpsAlterNote       $00
000A2706 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A2709 E1FF                       	smpsAlterNote       $FF
000A270B B810                       	dc.b	nG4, $10
000A270D E100                       	smpsAlterNote       $00
000A270F B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A2716 E1FF                       	smpsAlterNote       $FF
000A2718 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A2726 E606                       	smpsAlterVol        $06
000A2728 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A272D E100                       	smpsAlterNote       $00
000A272F                            
000A272F                            GentleBreeze_Loop10:
000A272F C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A2733 E1FF                       	smpsAlterNote       $FF
000A2735 C4                         	dc.b	nG5
000A2736 E100                       	smpsAlterNote       $00
000A2738 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A273D E608                       	smpsAlterVol        $08
000A273F C080 08                    	dc.b	nEb5, nRst, $08
000A2742 E6F8                       	smpsAlterVol        $F8
000A2744 C7                         	dc.b	nBb5
000A2745 E1FF                       	smpsAlterNote       $FF
000A2747 C4                         	dc.b	nG5
000A2748 E100                       	smpsAlterNote       $00
000A274A C0BB                       	dc.b	nEb5, nBb4
000A274C F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A2751 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A2754 E1FF                       	smpsAlterNote       $FF
000A2756 C4                         	dc.b	nG5
000A2757 E100                       	smpsAlterNote       $00
000A2759 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A275E E608                       	smpsAlterVol        $08
000A2760 C080 08                    	dc.b	nEb5, nRst, $08
000A2763 E6F8                       	smpsAlterVol        $F8
000A2765 E1FF                       	smpsAlterNote       $FF
000A2767 C4                         	dc.b	nG5
000A2768 E100                       	smpsAlterNote       $00
000A276A C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A2771 E1FF                       	smpsAlterNote       $FF
000A2773 C4                         	dc.b	nG5
000A2774 E100                       	smpsAlterNote       $00
000A2776 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A277B E1FF                       	smpsAlterNote       $FF
000A277D C4                         	dc.b	nG5
000A277E E100                       	smpsAlterNote       $00
000A2780 C7                         	dc.b	nBb5
000A2781 E1FF                       	smpsAlterNote       $FF
000A2783 C4                         	dc.b	nG5
000A2784 E100                       	smpsAlterNote       $00
000A2786 C2C0 01                    	dc.b	nF5, nEb5, $01
000A2789 E0C0                       	smpsPan             panCenter, $00
000A278B F1                         	smpsModOn
000A278C F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A278F                            
000A278F                            ; FM4 Data
000A278F                            GentleBreeze_FM4:
000A2791 E0C0                       	smpsPan             panCenter, $00
000A2793 80                         	dc.b	nRst
000A2794                            
000A2794                            GentleBreeze_Loop0D:
000A2794 7F                         	dc.b	$7F
000A2795 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A279A 77                         	dc.b	$77
000A279D E609                       	smpsAlterVol        $09
000A279F C001                       	dc.b	nEb5, $01
000A27A1                            
000A27A1                            GentleBreeze_Jump02:
000A27A1 E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A27A6 E607                       	smpsAlterVol        $07
000A27A8 E1FF                       	smpsAlterNote       $FF
000A27AA C450                       	dc.b	nG5, $50
000A27AC E100                       	smpsAlterNote       $00
000A27AE C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A27BA E1FF                       	smpsAlterNote       $FF
000A27BC C410                       	dc.b	nG5, $10
000A27BE E100                       	smpsAlterNote       $00
000A27C0 C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A27C5 E1FF                       	smpsAlterNote       $FF
000A27C7 C4                         	dc.b	nG5
000A27C8 E100                       	smpsAlterNote       $00
000A27CA C210                       	dc.b	nF5, $10
000A27CC E1FF                       	smpsAlterNote       $FF
000A27CE C450                       	dc.b	nG5, $50
000A27D0 E100                       	smpsAlterNote       $00
000A27D2 C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A27DA E1FF                       	smpsAlterNote       $FF
000A27DC B808                       	dc.b	nG4, $08
000A27DE E100                       	smpsAlterNote       $00
000A27E0 BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A27E5 E1FF                       	smpsAlterNote       $FF
000A27E7 C450                       	dc.b	nG5, $50
000A27E9 E100                       	smpsAlterNote       $00
000A27EB C708                       	dc.b	nBb5, $08
000A27ED E1FF                       	smpsAlterNote       $FF
000A27EF C4                         	dc.b	nG5
000A27F0 E100                       	smpsAlterNote       $00
000A27F2 C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A27F5 E1FF                       	smpsAlterNote       $FF
000A27F7 C410 08                    	dc.b	nG5, $10, $08
000A27FA E100                       	smpsAlterNote       $00
000A27FC C2                         	dc.b	nF5
000A27FD E1FF                       	smpsAlterNote       $FF
000A27FF C480                       	dc.b	nG5, nRst
000A2801 E100                       	smpsAlterNote       $00
000A2803 C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A2806 E1FF                       	smpsAlterNote       $FF
000A2808 C410                       	dc.b	nG5, $10
000A280A E100                       	smpsAlterNote       $00
000A280C BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A2813 E1FF                       	smpsAlterNote       $FF
000A2815 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A281D                            
000A281D                            GentleBreeze_Loop0E:
000A281D 7F                         	dc.b	$7F
000A281E F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A2823 77                         	dc.b	$77
000A2824 E100                       	smpsAlterNote       $00
000A2826 C001                       	dc.b	nEb5, $01
000A2828 E6F9                       	smpsAlterVol        $F9
000A282A E0C0                       	smpsPan             panCenter, $00
000A282C E100                       	smpsAlterNote       $00
000A282E F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A2831                            
000A2831                            ; FM5 Data
000A2831                            GentleBreeze_FM5:
000A2833 E0C0                       	smpsPan             panCenter, $00
000A2835 A5                         	dc.b	nC3
000A2836                            
000A2836                            GentleBreeze_Loop06:
000A2836 10                         	dc.b	$10
000A2837 E607                       	smpsAlterVol        $07
000A2839 A5                         	dc.b	nC3
000A283A E6F9                       	smpsAlterVol        $F9
000A283C 08                         	dc.b	$08
000A283D E607                       	smpsAlterVol        $07
000A283F A5                         	dc.b	nC3
000A2840 E608                       	smpsAlterVol        $08
000A2842 A5                         	dc.b	nC3
000A2843 E6F1                       	smpsAlterVol        $F1
000A2845 18                         	dc.b	$18
000A2846 E607                       	smpsAlterVol        $07
000A2848 10                         	dc.b	$10
000A2849 E608                       	smpsAlterVol        $08
000A284B A5                         	dc.b	nC3
000A284C E6F1                       	smpsAlterVol        $F1
000A284E A5                         	dc.b	nC3
000A284F F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A2854 A5                         	dc.b	nC3
000A2855                            
000A2855                            GentleBreeze_Loop07:
000A2855 E607                       	smpsAlterVol        $07
000A2857 A5                         	dc.b	nC3
000A2858 E6F9                       	smpsAlterVol        $F9
000A285A 08                         	dc.b	$08
000A285B E607                       	smpsAlterVol        $07
000A285D A5                         	dc.b	nC3
000A285E E608                       	smpsAlterVol        $08
000A2860 A5                         	dc.b	nC3
000A2861 E6F1                       	smpsAlterVol        $F1
000A2863 10                         	dc.b	$10
000A2864 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A2869                            
000A2869                            GentleBreeze_Loop08:
000A2869 A5                         	dc.b	nC3
000A286A E607                       	smpsAlterVol        $07
000A286C A5                         	dc.b	nC3
000A286D E6F9                       	smpsAlterVol        $F9
000A286F 08                         	dc.b	$08
000A2870 E607                       	smpsAlterVol        $07
000A2872 A5                         	dc.b	nC3
000A2873 E608                       	smpsAlterVol        $08
000A2875 A5                         	dc.b	nC3
000A2876 E6F1                       	smpsAlterVol        $F1
000A2878 18                         	dc.b	$18
000A2879 E607                       	smpsAlterVol        $07
000A287B 10                         	dc.b	$10
000A287C E608                       	smpsAlterVol        $08
000A287E A5                         	dc.b	nC3
000A287F E6F1                       	smpsAlterVol        $F1
000A2881 A5                         	dc.b	nC3
000A2882 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A2887 A5                         	dc.b	nC3
000A2888 E607                       	smpsAlterVol        $07
000A288A A5                         	dc.b	nC3
000A288B E6F9                       	smpsAlterVol        $F9
000A288D 08                         	dc.b	$08
000A288E E607                       	smpsAlterVol        $07
000A2890 A5                         	dc.b	nC3
000A2891 E608                       	smpsAlterVol        $08
000A2893 A5                         	dc.b	nC3
000A2894 E6F1                       	smpsAlterVol        $F1
000A2896 10                         	dc.b	$10
000A2897 E607                       	smpsAlterVol        $07
000A2899 A5                         	dc.b	nC3
000A289A E6F9                       	smpsAlterVol        $F9
000A289C 08                         	dc.b	$08
000A289D E607                       	smpsAlterVol        $07
000A289F A5                         	dc.b	nC3
000A28A0 E608                       	smpsAlterVol        $08
000A28A2 A5                         	dc.b	nC3
000A28A3 E6F1                       	smpsAlterVol        $F1
000A28A5 01                         	dc.b	$01
000A28A6                            
000A28A6                            GentleBreeze_Jump01:
000A28A6 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A28A9 E607                       	smpsAlterVol        $07
000A28AB                            
000A28AB                            GentleBreeze_Loop09:
000A28AB 10                         	dc.b	$10
000A28AC E608                       	smpsAlterVol        $08
000A28AE A5                         	dc.b	nC3
000A28AF E6F1                       	smpsAlterVol        $F1
000A28B1 08                         	dc.b	$08
000A28B2 E60F                       	smpsAlterVol        $0F
000A28B4 18                         	dc.b	$18
000A28B5 E6F8                       	smpsAlterVol        $F8
000A28B7 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A28BC 10                         	dc.b	$10
000A28BD E608                       	smpsAlterVol        $08
000A28BF A5                         	dc.b	nC3
000A28C0 E6F1                       	smpsAlterVol        $F1
000A28C2 08                         	dc.b	$08
000A28C3 E60F                       	smpsAlterVol        $0F
000A28C5 18                         	dc.b	$18
000A28C6 E6F1                       	smpsAlterVol        $F1
000A28C8                            
000A28C8                            GentleBreeze_Loop0A:
000A28C8 10                         	dc.b	$10
000A28C9 E607                       	smpsAlterVol        $07
000A28CB A5                         	dc.b	nC3
000A28CC E6F9                       	smpsAlterVol        $F9
000A28CE 08                         	dc.b	$08
000A28CF E607                       	smpsAlterVol        $07
000A28D1 A5                         	dc.b	nC3
000A28D2 E608                       	smpsAlterVol        $08
000A28D4 A5                         	dc.b	nC3
000A28D5 E6F1                       	smpsAlterVol        $F1
000A28D7 18                         	dc.b	$18
000A28D8 E607                       	smpsAlterVol        $07
000A28DA 10                         	dc.b	$10
000A28DB E608                       	smpsAlterVol        $08
000A28DD A5                         	dc.b	nC3
000A28DE E6F1                       	smpsAlterVol        $F1
000A28E0 A5                         	dc.b	nC3
000A28E1 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A28E6 A5                         	dc.b	nC3
000A28E7                            
000A28E7                            GentleBreeze_Loop0B:
000A28E7 E607                       	smpsAlterVol        $07
000A28E9 A5                         	dc.b	nC3
000A28EA E6F9                       	smpsAlterVol        $F9
000A28EC 08                         	dc.b	$08
000A28ED E607                       	smpsAlterVol        $07
000A28EF A5                         	dc.b	nC3
000A28F0 E608                       	smpsAlterVol        $08
000A28F2 A5                         	dc.b	nC3
000A28F3 E6F1                       	smpsAlterVol        $F1
000A28F5 10                         	dc.b	$10
000A28F6 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A28FB                            
000A28FB                            GentleBreeze_Loop0C:
000A28FB A5                         	dc.b	nC3
000A28FC E607                       	smpsAlterVol        $07
000A28FE A5                         	dc.b	nC3
000A28FF E6F9                       	smpsAlterVol        $F9
000A2901 08                         	dc.b	$08
000A2902 E607                       	smpsAlterVol        $07
000A2904 A5                         	dc.b	nC3
000A2905 E608                       	smpsAlterVol        $08
000A2907 A5                         	dc.b	nC3
000A2908 E6F1                       	smpsAlterVol        $F1
000A290A 18                         	dc.b	$18
000A290B E607                       	smpsAlterVol        $07
000A290D 10                         	dc.b	$10
000A290E E608                       	smpsAlterVol        $08
000A2910 A5                         	dc.b	nC3
000A2911 E6F1                       	smpsAlterVol        $F1
000A2913 A5                         	dc.b	nC3
000A2914 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A2919 A5                         	dc.b	nC3
000A291A E607                       	smpsAlterVol        $07
000A291C A5                         	dc.b	nC3
000A291D E6F9                       	smpsAlterVol        $F9
000A291F 08                         	dc.b	$08
000A2920 E607                       	smpsAlterVol        $07
000A2922 A5                         	dc.b	nC3
000A2923 E608                       	smpsAlterVol        $08
000A2925 A5                         	dc.b	nC3
000A2926 E6F1                       	smpsAlterVol        $F1
000A2928 10                         	dc.b	$10
000A2929 E607                       	smpsAlterVol        $07
000A292B A5                         	dc.b	nC3
000A292C E6F9                       	smpsAlterVol        $F9
000A292E 08                         	dc.b	$08
000A292F E607                       	smpsAlterVol        $07
000A2931 A5                         	dc.b	nC3
000A2932 E608                       	smpsAlterVol        $08
000A2934 A5                         	dc.b	nC3
000A2935 E6F1                       	smpsAlterVol        $F1
000A2937 01                         	dc.b	$01
000A2938 E0C0                       	smpsPan             panCenter, $00
000A293A F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A293D                            
000A293D                            ; DAC Data
000A293D                            GentleBreeze_DAC:
000A293D 81                         	dc.b	dKick
000A293E                            
000A293E                            GentleBreeze_Loop00:
000A293E 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A2944 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A2949 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A2954                            
000A2954                            GentleBreeze_Loop01:
000A2954 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A295A F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A295F 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A2969                            
000A2969                            GentleBreeze_Jump00:
000A2969 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A296D                            
000A296D                            GentleBreeze_Loop02:
000A296D 81                         	dc.b	dKick
000A296E                            
000A296E                            GentleBreeze_Loop03:
000A296E 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A297A 088A                       	dc.b	$08, dLowTimpani
000A297C F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A2981 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A298D 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A2992 F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A2997                            
000A2997                            GentleBreeze_Loop04:
000A2997 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A299D F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A29A2 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A29AD                            
000A29AD                            GentleBreeze_Loop05:
000A29AD 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A29B3 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A29B8 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A29C2 F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A29C5                            
000A29C5                            ; PSG 1 Data
000A29C5                            GentleBreeze_PSG1:
000A29C5 80                         	dc.b	nRst
000A29C6                            
000A29C6                            GentleBreeze_LoopPSG02:
000A29C6 7F                         	dc.b	$7F
000A29C7 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A29CC 08                         	dc.b	$08
000A29CD EC04                       	smpsPSGAlterVol     $04
000A29CF                            
000A29CF                            GentleBreeze_JumpPSG01:
000A29CF A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A29DB A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A29E3                            
000A29E3                            GentleBreeze_LoopPSG03:
000A29E3 7F                         	dc.b	$7F
000A29E4 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A29E9 08A3 01                    	dc.b	$08, nBb2, $01
000A29EC F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A29EF                            
000A29EF                            ; PSG2 Data
000A29EF                            GentleBreeze_PSG2:
000A29EF 80                         	dc.b	nRst
000A29F0                            
000A29F0                            GentleBreeze_LoopPSG00:
000A29F0 7F                         	dc.b	$7F
000A29F1 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A29F6 08                         	dc.b	$08
000A29F7 EC04                       	smpsPSGAlterVol     $04
000A29F9                            
000A29F9                            GentleBreeze_JumpPSG00:
000A29F9 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A2A05 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A2A0D                            
000A2A0D                            GentleBreeze_LoopPSG01:
000A2A0D 7F                         	dc.b	$7F
000A2A0E F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A2A13 08A8 01                    	dc.b	$08, nEb3, $01
000A2A16 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A2A19                            
000A2A19                            GentleBreeze_Voices:
000A2A19                            ;	Voice $00
000A2A19                            ;	$0C
000A2A19                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A2A19                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A2A19                            	smpsVcAlgorithm     $04
000A2A19                            	smpsVcFeedback      $01
000A2A19                            	smpsVcUnusedBits    $00
000A2A19                            	smpsVcDetune        $07, $02, $07, $02
000A2A19                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A2A19                            	smpsVcRateScale     $00, $00, $00, $00
000A2A19                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2A19                            	smpsVcAmpMod        $00, $00, $00, $00
000A2A19                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A2A19                            	smpsVcDecayRate2    $01, $00, $00, $00
000A2A19                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A2A19                            	smpsVcReleaseRate   $09, $01, $04, $03
000A2A19 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A2A32                            
000A2A32                            ;	Voice $01
000A2A32                            ;	$38
000A2A32                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A2A32                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A2A32                            	smpsVcAlgorithm     $00
000A2A32                            	smpsVcFeedback      $07
000A2A32                            	smpsVcUnusedBits    $00
000A2A32                            	smpsVcDetune        $03, $07, $01, $05
000A2A32                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A2A32                            	smpsVcRateScale     $00, $02, $00, $02
000A2A32                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2A32                            	smpsVcAmpMod        $00, $00, $00, $00
000A2A32                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A2A32                            	smpsVcDecayRate2    $00, $00, $10, $00
000A2A32                            	smpsVcDecayLevel    $00, $00, $00, $00
000A2A32                            	smpsVcReleaseRate   $08, $05, $05, $05
000A2A32 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A2A4B                            
000A2A4B                            ;	Voice $02
000A2A4B                            ;	$00
000A2A4B                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A2A4B                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A2A4B                            	smpsVcAlgorithm     $00
000A2A4B                            	smpsVcFeedback      $00
000A2A4B                            	smpsVcUnusedBits    $00
000A2A4B                            	smpsVcDetune        $00, $00, $00, $00
000A2A4B                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A2A4B                            	smpsVcRateScale     $00, $00, $00, $00
000A2A4B                            	smpsVcAttackRate    $00, $00, $00, $00
000A2A4B                            	smpsVcAmpMod        $00, $00, $00, $00
000A2A4B                            	smpsVcDecayRate1    $00, $00, $00, $00
000A2A4B                            	smpsVcDecayRate2    $00, $00, $00, $00
000A2A4B                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A2A4B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A2A4B 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2A64                            
000A2A64                            ;	Voice $03
000A2A64                            ;	$36
000A2A64                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A2A64                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A2A64                            	smpsVcAlgorithm     $06
000A2A64                            	smpsVcFeedback      $06
000A2A64                            	smpsVcUnusedBits    $00
000A2A64                            	smpsVcDetune        $00, $00, $00, $00
000A2A64                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A2A64                            	smpsVcRateScale     $00, $00, $00, $00
000A2A64                            	smpsVcAttackRate    $1F, $00, $18, $16
000A2A64                            	smpsVcAmpMod        $00, $00, $00, $00
000A2A64                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A2A64                            	smpsVcDecayRate2    $00, $00, $12, $00
000A2A64                            	smpsVcDecayLevel    $04, $04, $02, $00
000A2A64                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A2A64 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A2A7D                            
000A2A7D                            ;	Voice $04
000A2A7D                            ;	$07
000A2A7D                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A2A7D                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A2A7D                            	smpsVcAlgorithm     $07
000A2A7D                            	smpsVcFeedback      $00
000A2A7D                            	smpsVcUnusedBits    $00
000A2A7D                            	smpsVcDetune        $07, $06, $05, $00
000A2A7D                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A2A7D                            	smpsVcRateScale     $00, $01, $01, $01
000A2A7D                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A2A7D                            	smpsVcAmpMod        $00, $00, $00, $00
000A2A7D                            	smpsVcDecayRate1    $17, $17, $17, $17
000A2A7D                            	smpsVcDecayRate2    $00, $00, $00, $00
000A2A7D                            	smpsVcDecayLevel    $02, $02, $02, $02
000A2A7D                            	smpsVcReleaseRate   $06, $06, $06, $06
000A2A7D 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2A96                            
000A2A96                            ;	Voice $05
000A2A96                            ;	$3C
000A2A96                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A2A96                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A2A96                            	smpsVcAlgorithm     $04
000A2A96                            	smpsVcFeedback      $07
000A2A96                            	smpsVcUnusedBits    $00
000A2A96                            	smpsVcDetune        $06, $06, $02, $02
000A2A96                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A2A96                            	smpsVcRateScale     $00, $00, $00, $00
000A2A96                            	smpsVcAttackRate    $0E, $14, $10, $13
000A2A96                            	smpsVcAmpMod        $00, $00, $00, $00
000A2A96                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A2A96                            	smpsVcDecayRate2    $04, $04, $04, $04
000A2A96                            	smpsVcDecayLevel    $02, $01, $01, $01
000A2A96                            	smpsVcReleaseRate   $07, $07, $07, $07
000A2A96 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A2AAF                            
000A2AAF                            
000A2AB0 00                         		even
000A2AB0                            ; ---------------------------------------------------------------------------
000A2AB0                            ; Sound	effect pointers
000A2AB0                            ; ---------------------------------------------------------------------------
000A2AB0 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A2ABC 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A2AC8 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A2AD4 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A2AE0 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A2AEC 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A2AF8 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A2B04 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A2B10 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A2B1C 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A2B28 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A2B34 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A2B40 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A2B4C 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A2B58 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A2B64 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A2B70 0000 0000                  SoundD0Index:	dc.l SoundD0
000A2B74                            SoundA0:	include	sound\jump.asm
000A2B74                            jump_Header:
000A2B74 =00000001                  smpsHeaderStartSong = 1
000A2B74 0000                       	smpsHeaderVoice     jump_Voices
000A2B76 01                         	smpsHeaderTempoSFX  $01
000A2B77 01                         	smpsHeaderChanSFX   $01
000A2B78                            
000A2B84                            
000A2B84                            ; FM4 Data
000A2B84                            jump_FM4:
000A2B86 E000                       	smpsPan             panNone, $00
000A2B88 E607                       	smpsAlterVol        $07
000A2B8A E0C0                       	smpsPan             panCenter, $00
000A2B8C 9903 B1                    	dc.b	nC2, $03, nC4
000A2B8F E607                       	smpsAlterVol        $07
000A2B91 E040                       	smpsPan             panRight, $00
000A2B93 99B1                       	dc.b	nC2, nC4
000A2B95 E60A                       	smpsAlterVol        $0A
000A2B97 E080                       	smpsPan             panLeft, $00
000A2B99 99B1                       	dc.b	nC2, nC4
000A2B9B E603                       	smpsAlterVol        $03
000A2B9D E0C0                       	smpsPan             panCenter, $00
000A2B9F 99B1                       	dc.b	nC2, nC4
000A2BA1 E000                       	smpsPan             panNone, $00
000A2BA3 803D                       	dc.b	nRst, $3D
000A2BA5 F2                         	smpsStop
000A2BA6                            
000A2BA6                            ; PSG3 Data
000A2BA6                            jump_PSG3:
000A2BA6 F3E7                       	smpsPSGform         $E7
000A2BA8 8056                       	dc.b	nRst, $56
000A2BAA F2                         	smpsStop
000A2BAB                            
000A2BAB                            jump_Voices:
000A2BAB                            ;	Voice $00
000A2BAB                            ;	$3C
000A2BAB                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000A2BAB                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000A2BAB                            	smpsVcAlgorithm     $04
000A2BAB                            	smpsVcFeedback      $07
000A2BAB                            	smpsVcUnusedBits    $00
000A2BAB                            	smpsVcDetune        $00, $00, $00, $00
000A2BAB                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000A2BAB                            	smpsVcRateScale     $00, $00, $00, $00
000A2BAB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2BAB                            	smpsVcAmpMod        $00, $00, $00, $00
000A2BAB                            	smpsVcDecayRate1    $0E, $14, $12, $00
000A2BAB                            	smpsVcDecayRate2    $11, $00, $11, $00
000A2BAB                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000A2BAB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A2BAB 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2BC4                            
000A2BC4                            
000A2BC4                            		even
000A2BC4                            SoundA1:	incbin	sound\soundA1.bin
000A2BEE                            		even
000A2BEE                            SoundA2:	incbin	sound\soundA2.bin
000A2C0E                            		even
000A2C0E                            SoundA3:	incbin	sound\soundA3.bin
000A2C40                            		even
000A2C40                            SoundA4:	incbin	sound\soundA4.bin
000A2C76                            		even
000A2C76                            SoundA5:	include	sound\fart.asm
000A2C76                            Fart_Header:
000A2C76 =00000001                  smpsHeaderStartSong = 1
000A2C76 0000                       	smpsHeaderVoice     Fart_Voices
000A2C78 01                         	smpsHeaderTempoSFX  $01
000A2C79 04                         	smpsHeaderChanSFX   $04
000A2C7A                            
000A2C92                            
000A2C92                            Fart_FM3:
000A2C94 E607                       	smpsAlterVol        $07
000A2C96 E0C0                       	smpsPan             panCenter, $00
000A2C98 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A2C9D A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A2CA0 E1FE                       	smpsAlterNote       $FE
000A2CA2 A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A2CA5 E100                       	smpsAlterNote       $00
000A2CA7 A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A2CAC F2                         	smpsStop
000A2CAD                            
000A2CAD                            ; FM4 Data
000A2CAD                            Fart_FM4:
000A2CAF E0C0                       	smpsPan             panCenter, $00
000A2CB1 8006                       	dc.b	nRst, $06
000A2CB5 E616                       	smpsAlterVol        $16
000A2CB7 E080                       	smpsPan             panLeft, $00
000A2CB9 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A2CBE A212                       	dc.b	nA2, $12
000A2CC0 E60A                       	smpsAlterVol        $0A
000A2CC2 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A2CC5 E603                       	smpsAlterVol        $03
000A2CC7 E7A2                       	dc.b	smpsNoAttack, nA2
000A2CC9 E603                       	smpsAlterVol        $03
000A2CCB E7A2                       	dc.b	smpsNoAttack, nA2
000A2CCD E604                       	smpsAlterVol        $04
000A2CCF E7A2                       	dc.b	smpsNoAttack, nA2
000A2CD1 E606                       	smpsAlterVol        $06
000A2CD3 E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A2CD6 E610                       	smpsAlterVol        $10
000A2CD8 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A2CDB E610                       	smpsAlterVol        $10
000A2CDD E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A2CE2 F2                         	smpsStop
000A2CE3                            
000A2CE3                            ; FM5 Data
000A2CE3                            Fart_FM5:
000A2CE5 E0C0                       	smpsPan             panCenter, $00
000A2CE7 8009                       	dc.b	nRst, $09
000A2CEB E616                       	smpsAlterVol        $16
000A2CED E040                       	smpsPan             panRight, $00
000A2CEF F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A2CF4 A215                       	dc.b	nA2, $15
000A2CF6 E60A                       	smpsAlterVol        $0A
000A2CF8 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A2CFB E603                       	smpsAlterVol        $03
000A2CFD E7A2                       	dc.b	smpsNoAttack, nA2
000A2CFF E603                       	smpsAlterVol        $03
000A2D01 E7A2                       	dc.b	smpsNoAttack, nA2
000A2D03 E604                       	smpsAlterVol        $04
000A2D05 E7A2                       	dc.b	smpsNoAttack, nA2
000A2D07 E606                       	smpsAlterVol        $06
000A2D09 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A2D0C E610                       	smpsAlterVol        $10
000A2D0E E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A2D11 E610                       	smpsAlterVol        $10
000A2D13 E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A2D18 F2                         	smpsStop
000A2D19                            
000A2D19                            ; PSG3 Data
000A2D19                            Fart_PSG3:
000A2D19 F2                         	smpsStop
000A2D1A                            
000A2D1A                            ; FM Voices
000A2D1A                            Fart_Voices:
000A2D1A                            ;	Voice $00
000A2D1A                            ;	$39
000A2D1A                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A2D1A                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A2D1A                            	smpsVcAlgorithm     $01
000A2D1A                            	smpsVcFeedback      $07
000A2D1A                            	smpsVcUnusedBits    $00
000A2D1A                            	smpsVcDetune        $00, $07, $03, $07
000A2D1A                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A2D1A                            	smpsVcRateScale     $00, $03, $03, $03
000A2D1A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2D1A                            	smpsVcAmpMod        $00, $00, $00, $00
000A2D1A                            	smpsVcDecayRate1    $00, $00, $00, $04
000A2D1A                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A2D1A                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A2D1A                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A2D1A 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A2D33                            
000A2D33                            ;	Voice $01
000A2D33                            ;	$00
000A2D33                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A2D33                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A2D33                            	smpsVcAlgorithm     $00
000A2D33                            	smpsVcFeedback      $00
000A2D33                            	smpsVcUnusedBits    $00
000A2D33                            	smpsVcDetune        $00, $00, $00, $00
000A2D33                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A2D33                            	smpsVcRateScale     $00, $00, $00, $00
000A2D33                            	smpsVcAttackRate    $00, $00, $00, $00
000A2D33                            	smpsVcAmpMod        $00, $00, $00, $00
000A2D33                            	smpsVcDecayRate1    $00, $00, $00, $00
000A2D33                            	smpsVcDecayRate2    $00, $00, $00, $00
000A2D33                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A2D33                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A2D33 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2D33 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2D4C                            		even
000A2D4C                            SoundA6:	incbin	sound\soundA6.bin
000A2D7C                            		even
000A2D7C                            SoundA7:	incbin	sound\soundA7.bin
000A2DAC                            		even
000A2DAC                            SoundA8:	incbin	sound\soundA8.bin
000A2DE0                            		even
000A2DE0                            SoundA9:	incbin	sound\soundA9.bin
000A2DF2                            		even
000A2DF2                            SoundAA:	incbin	sound\soundAA.bin
000A2E34                            		even
000A2E34                            SoundAB:	incbin	sound\soundAB.bin
000A2E54                            		even
000A2E54                            SoundAC:	incbin	sound\soundAC.bin
000A2E88                            		even
000A2E88                            SoundAD:	incbin	sound\soundAD.bin
000A2EBE                            		even
000A2EBE                            SoundAE:	incbin	sound\soundAE.bin
000A2F08                            		even
000A2F08                            SoundAF:	incbin	sound\soundAF.bin
000A2F36                            		even
000A2F36                            SoundB0:	incbin	sound\soundB0.bin
000A2F68                            		even
000A2F68                            SoundB1:	incbin	sound\soundB1.bin
000A2F94                            		even
000A2F94                            SoundB2:	incbin	sound\soundB2.bin
000A2FE4                            		even
000A2FE4                            SoundB3:	incbin	sound\soundB3.bin
000A302E                            		even
000A302E                            SoundB4:	include	sound\soundB4.asm
000A302E                            SndB4_Bumper_Header:
000A302E =00000001                  smpsHeaderStartSong = 1
000A302E 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000A3030 01                         	smpsHeaderTempoSFX  $01
000A3031 03                         	smpsHeaderChanSFX   $03
000A3032                            
000A3044                            
000A3044                            ; FM5 Data
000A3044                            SndB4_Bumper_FM5:
000A3046 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000A3049                            
000A3049                            ; FM4 Data
000A3049                            SndB4_Bumper_FM4:
000A3049 F2                         	smpsStop
000A304A                            
000A304A                            SndB4_Bumper_Jump00:
000A304A A020                       	dc.b	nG2, $20
000A304C F2                         	smpsStop
000A304D                            
000A304D                            ; FM3 Data
000A304D                            SndB4_Bumper_FM3:
000A304D F2                         	smpsStop
000A304E                            
000A304E                            SndB4_Bumper_Voices:
000A304E                            ;	Voice $00
000A304E                            ;	$32
000A304E                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000A304E                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000A304E                            	smpsVcAlgorithm     $02
000A304E                            	smpsVcFeedback      $06
000A304E                            	smpsVcUnusedBits    $00
000A304E                            	smpsVcDetune        $07, $07, $02, $00
000A304E                            	smpsVcCoarseFreq    $00, $00, $00, $04
000A304E                            	smpsVcRateScale     $00, $00, $00, $00
000A304E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A304E                            	smpsVcAmpMod        $00, $00, $00, $00
000A304E                            	smpsVcDecayRate1    $08, $00, $00, $09
000A304E                            	smpsVcDecayRate2    $0B, $00, $00, $09
000A304E                            	smpsVcDecayLevel    $00, $00, $00, $00
000A304E                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A304E 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A304E 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A3068 00                         		even
000A3068                            SoundB5:	incbin	sound\soundB5.bin
000A3086 00                         		even
000A3086                            SoundB6:	incbin	sound\soundB6.bin
000A30A4                            		even
000A30A4                            SoundB7:	incbin	sound\soundB7.bin
000A30E0                            		even
000A30E0                            SoundB8:	incbin	sound\soundB8.bin
000A30FE                            		even
000A30FE                            SoundB9:	incbin	sound\soundB9.bin
000A3162                            		even
000A3162                            SoundBA:	incbin	sound\soundBA.bin
000A318A                            		even
000A318A                            SoundBB:	incbin	sound\soundBB.bin
000A31B6                            		even
000A31B6                            SoundBC:	incbin	sound\soundBC.bin
000A31F8                            		even
000A31F8                            SoundBD:	incbin	sound\soundBD.bin
000A324C                            		even
000A324C                            SoundBE:	incbin	sound\soundBE.bin
000A3286                            		even
000A3286                            SoundBF:	incbin	sound\soundBF.bin
000A32F8                            		even
000A32F8                            SoundC0:	incbin	sound\soundC0.bin
000A3326                            		even
000A3326                            SoundC1:	incbin	sound\soundC1.bin
000A3380                            		even
000A3380                            SoundC2:	incbin	sound\soundC2.bin
000A33AA                            		even
000A33AA                            SoundC3:	incbin	sound\soundC3.bin
000A3424                            		even
000A3424                            SoundC4:	incbin	sound\soundC4.bin
000A3522                            		even
000A3522                            SoundC5:	incbin	sound\soundC5.bin
000A358A                            		even
000A358A                            SoundC6:	incbin	sound\soundC6.bin
000A35CC                            		even
000A35CC                            SoundC7:	incbin	sound\soundC7.bin
000A35FA                            		even
000A35FA                            SoundC8:	incbin	sound\soundC8.bin
000A360C                            		even
000A360C                            SoundC9:	incbin	sound\soundC9.bin
000A363A                            		even
000A363A                            SoundCA:	incbin	sound\soundCA.bin
000A3668                            		even
000A3668                            SoundCB:	incbin	sound\soundCB.bin
000A36B4                            		even
000A36B4                            SoundCC:	incbin	sound\C9.ssf
000A36E2                            		even
000A36E2                            SoundCD:	incbin	sound\soundCD.bin
000A370E                            		even
000A370E                            SoundCE:	incbin	sound\soundCE.bin
000A372C 00                         		even
000A372C                            SoundCF:	incbin	sound\soundCF.bin
000A3764                            		even
000A3764                            SoundD0:	incbin	sound\soundD0.bin
000A379E                            		even
000A379E                            SegaPCM:	incbin	sound\segapcm.bin
000BD8F4                            SegaPCM_end:	even
000BD8F4                            
000BD8F4                            IdiotPCM:	incbin	sound\youare.bin
000C79C6 00                         IdiotPCM_end:	even
000C79C6                            
000C79C6                            Minecraft:	include	minecraft\code\main.asm
000C79C6                            ; Minecraft: Very Legacy Console Edition
000C79C6                            ; Main file
000C79C6                            
000C79C6                            	include	minecraft\code\variables.asm
000C79C6                            ; Minecraft: Very Legacy Console Edition
000C79C6                            ; Variable Definitions
000C79C6                            
000C79C6 =00000040                  MAP_HEIGHT	equ	64
000C79C6 =00000100                  MAP_WIDTH	equ	256
000C79C6                            
000C79C6                            		rsset	$FF0000
000C79C6 =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000C79C6 =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000C79C6                            
000C79C6                            		rsset	$FFFF8000
000C79C6 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000C79C6                            
000C79C6 =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000C79C6 =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000C79C6 =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000C79C6 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C79C6 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C79C6                            
000C79C6                            MC_Init:
000C79C6 007C 0700                  		ori	#$700,sr		; disables CPU interrupts
000C79CA 4DF9 00C0 0004             		lea	($C00004).l,a6	;	; load the address of the VDP control port into a6
000C79D0                            
000C79D0 3CBC 8134                  		move.w	#$8134,(a6)		; disable display
000C79D4 6100 0000                  		bsr.w	MC_ClearScreen		; clear VRAM, CRAM, and VSRAM
000C79D8 6100 0000                  		bsr.w	MC_LoadPalette		; load in the palette
000C79DC 3CBC 8174                  		move.w	#$8174,(a6)		; enable display
000C79E0                            
000C79E0                            
000C79E0                            
000C79E0 6000 FFFE                  		bra.w	*			; spin infinitely
000C79E4                            
000C79E4                            ; ===========================================================================
000C79E4                            ; ---------------------------------------------------------------------------
000C79E4                            ; Clear The Screen
000C79E4                            ; ---------------------------------------------------------------------------
000C79E4                            MC_ClearScreen:
000C79E4 3CBC 8F01                  		move.w	#$8F01,(a6)		; set auto-incremement size to byte
000C79E8                            
000C79E8 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)		; clear the VRAM
000C79EE 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C79F2 2CBC 4000 0080             		move.l	#$40000080,(a6)		; ^
000C79F8 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C79FE                            
000C79FE 44D6                       .waitVRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C7A00 69FC                       		bvs.s	.waitVRAMClr		; if so, loop until DMA is complete
000C7A02                            
000C7A02 2CBC 9400 937F             		move.l	#$9400937F,(a6)		; clear the CRAM
000C7A08 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C7A0C 2CBC C000 0080             		move.l	#$C0000080,(a6)		; ^
000C7A12 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C7A18                            
000C7A18 44D6                       .waitCRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C7A1A 69FC                       		bvs.s	.waitCRAMClr		; if so, loop until DMA is complete
000C7A1C                            
000C7A1C 2CBC 9400 935F             		move.l	#$9400935F,(a6)		; clear the VSRAM
000C7A22 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C7A26 2CBC 4000 0090             		move.l	#$40000090,(a6)		; ^
000C7A2C 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C7A32                            
000C7A32 44D6                       .waitVSRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C7A34 69FC                       		bvs.s	.waitVSRAMClr		; if so, loop until DMA is complete
000C7A36                            
000C7A36 3CBC 8F02                  		move.w	#$8F02,(a6)		; set auto-incremement size to word
000C7A3A 4E75                       		rts				; return
000C7A3C                            ; ---------------------------------------------------------------------------
000C7A3C                            
000C7A3C                            ; ===========================================================================
000C7A3C                            ; ---------------------------------------------------------------------------
000C7A3C                            ; Load The Palette
000C7A3C                            ; ---------------------------------------------------------------------------
000C7A3C                            MC_LoadPalette:
000C7A3C 44D6                       		move.w	(a6),ccr		; is v-blank active?
000C7A3E 6AFC                       		bpl.s	MC_LoadPalette		; if not, wait for it to start
000C7A40                            
000C7A40                            .updatePalette:
000C7A40 2CBC 9400 9340             		move.l	#$94009340,(a6)		; set the DMA transfer size (64 colors)
000C7A46                            		
000C7A46 4BFA 0000                  		lea	MC_Palette(pc),a5	; load the base address of the palette data (pc relative)
000C7A4A 200D                       		move.l	a5,d0			; move the address to a data register so we can modify it
000C7A4C E288                       		lsr.l	#1,d0			; divide by two
000C7A4E                            
000C7A4E 323C 9500                  		move.w	#$9500,d1		; set the low byte of the transfer source address
000C7A52 1200                       		move.b	d0,d1			; ^
000C7A54 3C81                       		move.w	d1,(a6)			; ^
000C7A56                            
000C7A56 E088                       		lsr.l	#8,d0			; set the middle byte of the transfer source address
000C7A58 323C 9600                  		move.w	#$9600,d1		; ^
000C7A5C 1200                       		move.b	d0,d1			; ^
000C7A5E 3C81                       		move.w	d1,(a6)			; ^
000C7A60                            
000C7A60 E088                       		lsr.l	#8,d0			; set the high byte of the transfer source address
000C7A62 323C 9700                  		move.w	#$9700,d1		; ^
000C7A66 1200                       		move.b	d0,d1			; ^
000C7A68 3C81                       		move.w	d1,(a6)			; ^
000C7A6A                            
000C7A6A 2CBC C000 0080             		move.l	#$C0000080,(a6)		; set the destination palette index and begin the transfer
000C7A70                            
000C7A70                            .waitForScan:
000C7A70                            	;	move.w	(a6),ccr		; is v-blank still active?
000C7A70                            	;	bmi.s	.waitForScan		; if so, wait for active scan before returning
000C7A70 4E75                       		rts				; return
000C7A72                            ; ---------------------------------------------------------------------------
000C7A72                            
000C7A72                            MC_Palette:
000C7A72 0E86 08AE 068E 046C 0246+  	dc.w	$E86, $8AE, $68E, $46C, $246, $024, $CC0, $AA0, $C46, $824, $EEE, $444, $222, $000, $000, $000
000C7A92 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4EE, $6AE, $48C, $26A, $048, $026, $4E6, $2C4, $080
000C7AB2 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C7AD2 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C7AD2 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C7AF2                            ; end of 'ROM'
000C7AF2                            EndOfRom:
000C7AF2                            
000C7AF2                            
